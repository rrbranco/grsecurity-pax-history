diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/alpha/include/asm/atomic.h linux-3.3.8-pax/arch/alpha/include/asm/atomic.h
--- linux-3.3.8/arch/alpha/include/asm/atomic.h	2011-10-24 12:48:18.607092182 +0200
+++ linux-3.3.8-pax/arch/alpha/include/asm/atomic.h	2012-03-19 10:43:42.892035515 +0100
@@ -250,6 +250,16 @@ static __inline__ int atomic64_add_unles
 #define atomic_dec(v) atomic_sub(1,(v))
 #define atomic64_dec(v) atomic64_sub(1,(v))
 
+#define atomic64_read_unchecked(v)		atomic64_read(v)
+#define atomic64_set_unchecked(v, i)		atomic64_set((v), (i))
+#define atomic64_add_unchecked(a, v)		atomic64_add((a), (v))
+#define atomic64_add_return_unchecked(a, v)	atomic64_add_return((a), (v))
+#define atomic64_sub_unchecked(a, v)		atomic64_sub((a), (v))
+#define atomic64_inc_unchecked(v)		atomic64_inc(v)
+#define atomic64_inc_return_unchecked(v)	atomic64_inc_return(v)
+#define atomic64_dec_unchecked(v)		atomic64_dec(v)
+#define atomic64_cmpxchg_unchecked(v, o, n)	atomic64_cmpxchg((v), (o), (n))
+
 #define smp_mb__before_atomic_dec()	smp_mb()
 #define smp_mb__after_atomic_dec()	smp_mb()
 #define smp_mb__before_atomic_inc()	smp_mb()
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/alpha/include/asm/elf.h linux-3.3.8-pax/arch/alpha/include/asm/elf.h
--- linux-3.3.8/arch/alpha/include/asm/elf.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/alpha/include/asm/elf.h	2012-03-19 10:43:42.896035314 +0100
@@ -90,6 +90,13 @@ typedef elf_fpreg_t elf_fpregset_t[ELF_N
 
 #define ELF_ET_DYN_BASE		(TASK_UNMAPPED_BASE + 0x1000000)
 
+#ifdef CONFIG_PAX_ASLR
+#define PAX_ELF_ET_DYN_BASE	(current->personality & ADDR_LIMIT_32BIT ? 0x10000 : 0x120000000UL)
+
+#define PAX_DELTA_MMAP_LEN	(current->personality & ADDR_LIMIT_32BIT ? 14 : 28)
+#define PAX_DELTA_STACK_LEN	(current->personality & ADDR_LIMIT_32BIT ? 14 : 19)
+#endif
+
 /* $0 is set by ld.so to a pointer to a function which might be 
    registered using atexit.  This provides a mean for the dynamic
    linker to call DT_FINI functions for shared libraries that have
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/alpha/include/asm/pgalloc.h linux-3.3.8-pax/arch/alpha/include/asm/pgalloc.h
--- linux-3.3.8/arch/alpha/include/asm/pgalloc.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/alpha/include/asm/pgalloc.h	2012-05-07 17:02:51.888263059 +0200
@@ -29,6 +29,12 @@ pgd_populate(struct mm_struct *mm, pgd_t
 	pgd_set(pgd, pmd);
 }
 
+static inline void
+pgd_populate_kernel(struct mm_struct *mm, pgd_t *pgd, pmd_t *pmd)
+{
+	pgd_populate(mm, pgd, pmd);
+}
+
 extern pgd_t *pgd_alloc(struct mm_struct *mm);
 
 static inline void
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/alpha/include/asm/pgtable.h linux-3.3.8-pax/arch/alpha/include/asm/pgtable.h
--- linux-3.3.8/arch/alpha/include/asm/pgtable.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/alpha/include/asm/pgtable.h	2012-03-19 10:43:42.896035314 +0100
@@ -101,6 +101,17 @@ struct vm_area_struct;
 #define PAGE_SHARED	__pgprot(_PAGE_VALID | __ACCESS_BITS)
 #define PAGE_COPY	__pgprot(_PAGE_VALID | __ACCESS_BITS | _PAGE_FOW)
 #define PAGE_READONLY	__pgprot(_PAGE_VALID | __ACCESS_BITS | _PAGE_FOW)
+
+#ifdef CONFIG_PAX_PAGEEXEC
+# define PAGE_SHARED_NOEXEC	__pgprot(_PAGE_VALID | __ACCESS_BITS | _PAGE_FOE)
+# define PAGE_COPY_NOEXEC	__pgprot(_PAGE_VALID | __ACCESS_BITS | _PAGE_FOW | _PAGE_FOE)
+# define PAGE_READONLY_NOEXEC	__pgprot(_PAGE_VALID | __ACCESS_BITS | _PAGE_FOW | _PAGE_FOE)
+#else
+# define PAGE_SHARED_NOEXEC	PAGE_SHARED
+# define PAGE_COPY_NOEXEC	PAGE_COPY
+# define PAGE_READONLY_NOEXEC	PAGE_READONLY
+#endif
+
 #define PAGE_KERNEL	__pgprot(_PAGE_VALID | _PAGE_ASM | _PAGE_KRE | _PAGE_KWE)
 
 #define _PAGE_NORMAL(x) __pgprot(_PAGE_VALID | __ACCESS_BITS | (x))
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/alpha/kernel/module.c linux-3.3.8-pax/arch/alpha/kernel/module.c
--- linux-3.3.8/arch/alpha/kernel/module.c	2011-10-24 12:48:18.623092181 +0200
+++ linux-3.3.8-pax/arch/alpha/kernel/module.c	2012-03-19 10:43:42.896035314 +0100
@@ -160,7 +160,7 @@ apply_relocate_add(Elf64_Shdr *sechdrs,
 
 	/* The small sections were sorted to the end of the segment.
 	   The following should definitely cover them.  */
-	gp = (u64)me->module_core + me->core_size - 0x8000;
+	gp = (u64)me->module_core_rw + me->core_size_rw - 0x8000;
 	got = sechdrs[me->arch.gotsecindex].sh_addr;
 
 	for (i = 0; i < n; i++) {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/alpha/kernel/osf_sys.c linux-3.3.8-pax/arch/alpha/kernel/osf_sys.c
--- linux-3.3.8/arch/alpha/kernel/osf_sys.c	2011-10-24 12:48:18.627092180 +0200
+++ linux-3.3.8-pax/arch/alpha/kernel/osf_sys.c	2012-03-19 10:43:42.896035314 +0100
@@ -1147,7 +1147,7 @@ arch_get_unmapped_area_1(unsigned long a
 		/* At this point:  (!vma || addr < vma->vm_end). */
 		if (limit - len < addr)
 			return -ENOMEM;
-		if (!vma || addr + len <= vma->vm_start)
+		if (check_heap_stack_gap(vma, addr, len))
 			return addr;
 		addr = vma->vm_end;
 		vma = vma->vm_next;
@@ -1183,6 +1183,10 @@ arch_get_unmapped_area(struct file *filp
 	   merely specific addresses, but regions of memory -- perhaps
 	   this feature should be incorporated into all ports?  */
 
+#ifdef CONFIG_PAX_RANDMMAP
+	if (!(current->mm->pax_flags & MF_PAX_RANDMMAP))
+#endif
+
 	if (addr) {
 		addr = arch_get_unmapped_area_1 (PAGE_ALIGN(addr), len, limit);
 		if (addr != (unsigned long) -ENOMEM)
@@ -1190,8 +1194,8 @@ arch_get_unmapped_area(struct file *filp
 	}
 
 	/* Next, try allocating at TASK_UNMAPPED_BASE.  */
-	addr = arch_get_unmapped_area_1 (PAGE_ALIGN(TASK_UNMAPPED_BASE),
-					 len, limit);
+	addr = arch_get_unmapped_area_1 (PAGE_ALIGN(current->mm->mmap_base), len, limit);
+
 	if (addr != (unsigned long) -ENOMEM)
 		return addr;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/alpha/mm/fault.c linux-3.3.8-pax/arch/alpha/mm/fault.c
--- linux-3.3.8/arch/alpha/mm/fault.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/alpha/mm/fault.c	2012-03-19 10:43:42.896035306 +0100
@@ -54,6 +54,124 @@ __load_new_mm_context(struct mm_struct *
 	__reload_thread(pcb);
 }
 
+#ifdef CONFIG_PAX_PAGEEXEC
+/*
+ * PaX: decide what to do with offenders (regs->pc = fault address)
+ *
+ * returns 1 when task should be killed
+ *         2 when patched PLT trampoline was detected
+ *         3 when unpatched PLT trampoline was detected
+ */
+static int pax_handle_fetch_fault(struct pt_regs *regs)
+{
+
+#ifdef CONFIG_PAX_EMUPLT
+	int err;
+
+	do { /* PaX: patched PLT emulation #1 */
+		unsigned int ldah, ldq, jmp;
+
+		err = get_user(ldah, (unsigned int *)regs->pc);
+		err |= get_user(ldq, (unsigned int *)(regs->pc+4));
+		err |= get_user(jmp, (unsigned int *)(regs->pc+8));
+
+		if (err)
+			break;
+
+		if ((ldah & 0xFFFF0000U) == 0x277B0000U &&
+		    (ldq & 0xFFFF0000U) == 0xA77B0000U &&
+		    jmp == 0x6BFB0000U)
+		{
+			unsigned long r27, addr;
+			unsigned long addrh = (ldah | 0xFFFFFFFFFFFF0000UL) << 16;
+			unsigned long addrl = ldq | 0xFFFFFFFFFFFF0000UL;
+
+			addr = regs->r27 + ((addrh ^ 0x80000000UL) + 0x80000000UL) + ((addrl ^ 0x8000UL) + 0x8000UL);
+			err = get_user(r27, (unsigned long *)addr);
+			if (err)
+				break;
+
+			regs->r27 = r27;
+			regs->pc = r27;
+			return 2;
+		}
+	} while (0);
+
+	do { /* PaX: patched PLT emulation #2 */
+		unsigned int ldah, lda, br;
+
+		err = get_user(ldah, (unsigned int *)regs->pc);
+		err |= get_user(lda, (unsigned int *)(regs->pc+4));
+		err |= get_user(br, (unsigned int *)(regs->pc+8));
+
+		if (err)
+			break;
+
+		if ((ldah & 0xFFFF0000U) == 0x277B0000U &&
+		    (lda & 0xFFFF0000U) == 0xA77B0000U &&
+		    (br & 0xFFE00000U) == 0xC3E00000U)
+		{
+			unsigned long addr = br | 0xFFFFFFFFFFE00000UL;
+			unsigned long addrh = (ldah | 0xFFFFFFFFFFFF0000UL) << 16;
+			unsigned long addrl = lda | 0xFFFFFFFFFFFF0000UL;
+
+			regs->r27 += ((addrh ^ 0x80000000UL) + 0x80000000UL) + ((addrl ^ 0x8000UL) + 0x8000UL);
+			regs->pc += 12 + (((addr ^ 0x00100000UL) + 0x00100000UL) << 2);
+			return 2;
+		}
+	} while (0);
+
+	do { /* PaX: unpatched PLT emulation */
+		unsigned int br;
+
+		err = get_user(br, (unsigned int *)regs->pc);
+
+		if (!err && (br & 0xFFE00000U) == 0xC3800000U) {
+			unsigned int br2, ldq, nop, jmp;
+			unsigned long addr = br | 0xFFFFFFFFFFE00000UL, resolver;
+
+			addr = regs->pc + 4 + (((addr ^ 0x00100000UL) + 0x00100000UL) << 2);
+			err = get_user(br2, (unsigned int *)addr);
+			err |= get_user(ldq, (unsigned int *)(addr+4));
+			err |= get_user(nop, (unsigned int *)(addr+8));
+			err |= get_user(jmp, (unsigned int *)(addr+12));
+			err |= get_user(resolver, (unsigned long *)(addr+16));
+
+			if (err)
+				break;
+
+			if (br2 == 0xC3600000U &&
+			    ldq == 0xA77B000CU &&
+			    nop == 0x47FF041FU &&
+			    jmp == 0x6B7B0000U)
+			{
+				regs->r28 = regs->pc+4;
+				regs->r27 = addr+16;
+				regs->pc = resolver;
+				return 3;
+			}
+		}
+	} while (0);
+#endif
+
+	return 1;
+}
+
+void pax_report_insns(struct pt_regs *regs, void *pc, void *sp)
+{
+	unsigned long i;
+
+	printk(KERN_ERR "PAX: bytes at PC: ");
+	for (i = 0; i < 5; i++) {
+		unsigned int c;
+		if (get_user(c, (unsigned int *)pc+i))
+			printk(KERN_CONT "???????? ");
+		else
+			printk(KERN_CONT "%08x ", c);
+	}
+	printk("\n");
+}
+#endif
 
 /*
  * This routine handles page faults.  It determines the address,
@@ -131,8 +249,29 @@ do_page_fault(unsigned long address, uns
  good_area:
 	si_code = SEGV_ACCERR;
 	if (cause < 0) {
-		if (!(vma->vm_flags & VM_EXEC))
+		if (!(vma->vm_flags & VM_EXEC)) {
+
+#ifdef CONFIG_PAX_PAGEEXEC
+			if (!(mm->pax_flags & MF_PAX_PAGEEXEC) || address != regs->pc)
+				goto bad_area;
+
+			up_read(&mm->mmap_sem);
+			switch (pax_handle_fetch_fault(regs)) {
+
+#ifdef CONFIG_PAX_EMUPLT
+			case 2:
+			case 3:
+				return;
+#endif
+
+			}
+			pax_report_fault(regs, (void *)regs->pc, (void *)rdusp());
+			do_group_exit(SIGKILL);
+#else
 			goto bad_area;
+#endif
+
+		}
 	} else if (!cause) {
 		/* Allow reads even for write-only mappings */
 		if (!(vma->vm_flags & (VM_READ | VM_WRITE)))
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/arm/include/asm/atomic.h linux-3.3.8-pax/arch/arm/include/asm/atomic.h
--- linux-3.3.8/arch/arm/include/asm/atomic.h	2011-10-24 12:48:18.799092171 +0200
+++ linux-3.3.8-pax/arch/arm/include/asm/atomic.h	2012-04-24 20:35:03.389621815 +0200
@@ -15,6 +15,10 @@
 #include <linux/types.h>
 #include <asm/system.h>
 
+#ifdef CONFIG_GENERIC_ATOMIC64
+#include <asm-generic/atomic64.h>
+#endif
+
 #define ATOMIC_INIT(i)	{ (i) }
 
 #ifdef __KERNEL__
@@ -25,7 +29,15 @@
  * atomic_set() is the clrex or dummy strex done on every exception return.
  */
 #define atomic_read(v)	(*(volatile int *)&(v)->counter)
+static inline int atomic_read_unchecked(const atomic_unchecked_t *v)
+{
+	return v->counter;
+}
 #define atomic_set(v,i)	(((v)->counter) = (i))
+static inline void atomic_set_unchecked(atomic_unchecked_t *v, int i)
+{
+	v->counter = i;
+}
 
 #if __LINUX_ARM_ARCH__ >= 6
 
@@ -40,6 +52,35 @@ static inline void atomic_add(int i, ato
 	int result;
 
 	__asm__ __volatile__("@ atomic_add\n"
+"1:	ldrex	%1, [%3]\n"
+"	adds	%0, %1, %4\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+"	bvc	3f\n"
+"2:	bkpt	0xf103\n"
+"3:\n"
+#endif
+
+"	strex	%1, %0, [%3]\n"
+"	teq	%1, #0\n"
+"	bne	1b"
+
+#ifdef CONFIG_PAX_REFCOUNT
+"\n4:\n"
+	_ASM_EXTABLE(2b, 4b)
+#endif
+
+	: "=&r" (result), "=&r" (tmp), "+Qo" (v->counter)
+	: "r" (&v->counter), "Ir" (i)
+	: "cc");
+}
+
+static inline void atomic_add_unchecked(int i, atomic_unchecked_t *v)
+{
+	unsigned long tmp;
+	int result;
+
+	__asm__ __volatile__("@ atomic_add_unchecked\n"
 "1:	ldrex	%0, [%3]\n"
 "	add	%0, %0, %4\n"
 "	strex	%1, %0, [%3]\n"
@@ -58,6 +99,42 @@ static inline int atomic_add_return(int
 	smp_mb();
 
 	__asm__ __volatile__("@ atomic_add_return\n"
+"1:	ldrex	%1, [%3]\n"
+"	adds	%0, %1, %4\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+"	bvc	3f\n"
+"	mov	%0, %1\n"
+"2:	bkpt	0xf103\n"
+"3:\n"
+#endif
+
+"	strex	%1, %0, [%3]\n"
+"	teq	%1, #0\n"
+"	bne	1b"
+
+#ifdef CONFIG_PAX_REFCOUNT
+"\n4:\n"
+	_ASM_EXTABLE(2b, 4b)
+#endif
+
+	: "=&r" (result), "=&r" (tmp), "+Qo" (v->counter)
+	: "r" (&v->counter), "Ir" (i)
+	: "cc");
+
+	smp_mb();
+
+	return result;
+}
+
+static inline int atomic_add_return_unchecked(int i, atomic_unchecked_t *v)
+{
+	unsigned long tmp;
+	int result;
+
+	smp_mb();
+
+	__asm__ __volatile__("@ atomic_add_return_unchecked\n"
 "1:	ldrex	%0, [%3]\n"
 "	add	%0, %0, %4\n"
 "	strex	%1, %0, [%3]\n"
@@ -78,6 +155,35 @@ static inline void atomic_sub(int i, ato
 	int result;
 
 	__asm__ __volatile__("@ atomic_sub\n"
+"1:	ldrex	%1, [%3]\n"
+"	subs	%0, %1, %4\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+"	bvc	3f\n"
+"2:	bkpt	0xf103\n"
+"3:\n"
+#endif
+
+"	strex	%1, %0, [%3]\n"
+"	teq	%1, #0\n"
+"	bne	1b"
+
+#ifdef CONFIG_PAX_REFCOUNT
+"\n4:\n"
+	_ASM_EXTABLE(2b, 4b)
+#endif
+
+	: "=&r" (result), "=&r" (tmp), "+Qo" (v->counter)
+	: "r" (&v->counter), "Ir" (i)
+	: "cc");
+}
+
+static inline void atomic_sub_unchecked(int i, atomic_unchecked_t *v)
+{
+	unsigned long tmp;
+	int result;
+
+	__asm__ __volatile__("@ atomic_sub_unchecked\n"
 "1:	ldrex	%0, [%3]\n"
 "	sub	%0, %0, %4\n"
 "	strex	%1, %0, [%3]\n"
@@ -96,11 +202,25 @@ static inline int atomic_sub_return(int
 	smp_mb();
 
 	__asm__ __volatile__("@ atomic_sub_return\n"
-"1:	ldrex	%0, [%3]\n"
-"	sub	%0, %0, %4\n"
+"1:	ldrex	%1, [%3]\n"
+"	sub	%0, %1, %4\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+"	bvc	3f\n"
+"	mov	%0, %1\n"
+"2:	bkpt	0xf103\n"
+"3:\n"
+#endif
+
 "	strex	%1, %0, [%3]\n"
 "	teq	%1, #0\n"
 "	bne	1b"
+
+#ifdef CONFIG_PAX_REFCOUNT
+"\n4:\n"
+	_ASM_EXTABLE(2b, 4b)
+#endif
+
 	: "=&r" (result), "=&r" (tmp), "+Qo" (v->counter)
 	: "r" (&v->counter), "Ir" (i)
 	: "cc");
@@ -132,6 +252,28 @@ static inline int atomic_cmpxchg(atomic_
 	return oldval;
 }
 
+static inline int atomic_cmpxchg_unchecked(atomic_unchecked_t *ptr, int old, int new)
+{
+	unsigned long oldval, res;
+
+	smp_mb();
+
+	do {
+		__asm__ __volatile__("@ atomic_cmpxchg_unchecked\n"
+		"ldrex	%1, [%3]\n"
+		"mov	%0, #0\n"
+		"teq	%1, %4\n"
+		"strexeq %0, %5, [%3]\n"
+		    : "=&r" (res), "=&r" (oldval), "+Qo" (ptr->counter)
+		    : "r" (&ptr->counter), "Ir" (old), "r" (new)
+		    : "cc");
+	} while (res);
+
+	smp_mb();
+
+	return oldval;
+}
+
 static inline void atomic_clear_mask(unsigned long mask, unsigned long *addr)
 {
 	unsigned long tmp, tmp2;
@@ -165,7 +307,9 @@ static inline int atomic_add_return(int
 
 	return val;
 }
+#define atomic_add_return_unchecked(i, v) atomic_add_return(i, v)
 #define atomic_add(i, v)	(void) atomic_add_return(i, v)
+#define atomic_add_unchecked(i, v)	(void) atomic_add_return_unchecked(i, v)
 
 static inline int atomic_sub_return(int i, atomic_t *v)
 {
@@ -179,7 +323,9 @@ static inline int atomic_sub_return(int
 
 	return val;
 }
+#define atomic_sub_return_unchecked(i, v) atomic_sub_return(i, v)
 #define atomic_sub(i, v)	(void) atomic_sub_return(i, v)
+#define atomic_sub_unchecked(i, v)	(void) atomic_sub_return_unchecked(i, v)
 
 static inline int atomic_cmpxchg(atomic_t *v, int old, int new)
 {
@@ -194,6 +340,7 @@ static inline int atomic_cmpxchg(atomic_
 
 	return ret;
 }
+#define atomic_cmpxchg_unchecked(v, o, n) atomic_cmpxchg(v, o, n)
 
 static inline void atomic_clear_mask(unsigned long mask, unsigned long *addr)
 {
@@ -207,6 +354,10 @@ static inline void atomic_clear_mask(uns
 #endif /* __LINUX_ARM_ARCH__ */
 
 #define atomic_xchg(v, new) (xchg(&((v)->counter), new))
+static inline int atomic_xchg_unchecked(atomic_unchecked_t *v, int new)
+{
+	return xchg(&v->counter, new);
+}
 
 static inline int __atomic_add_unless(atomic_t *v, int a, int u)
 {
@@ -219,11 +370,27 @@ static inline int __atomic_add_unless(at
 }
 
 #define atomic_inc(v)		atomic_add(1, v)
+static inline void atomic_inc_unchecked(atomic_unchecked_t *v)
+{
+	atomic_add_unchecked(1, v);
+}
 #define atomic_dec(v)		atomic_sub(1, v)
+static inline void atomic_dec_unchecked(atomic_unchecked_t *v)
+{
+	atomic_sub_unchecked(1, v);
+}
 
 #define atomic_inc_and_test(v)	(atomic_add_return(1, v) == 0)
+static inline int atomic_inc_and_test_unchecked(atomic_unchecked_t *v)
+{
+	return atomic_add_return_unchecked(1, v) == 0;
+}
 #define atomic_dec_and_test(v)	(atomic_sub_return(1, v) == 0)
 #define atomic_inc_return(v)    (atomic_add_return(1, v))
+static inline int atomic_inc_return_unchecked(atomic_unchecked_t *v)
+{
+	return atomic_add_return_unchecked(1, v);
+}
 #define atomic_dec_return(v)    (atomic_sub_return(1, v))
 #define atomic_sub_and_test(i, v) (atomic_sub_return(i, v) == 0)
 
@@ -239,6 +406,14 @@ typedef struct {
 	u64 __aligned(8) counter;
 } atomic64_t;
 
+#ifdef CONFIG_PAX_REFCOUNT
+typedef struct {
+	u64 __aligned(8) counter;
+} atomic64_unchecked_t;
+#else
+typedef atomic64_t atomic64_unchecked_t;
+#endif
+
 #define ATOMIC64_INIT(i) { (i) }
 
 static inline u64 atomic64_read(atomic64_t *v)
@@ -254,6 +429,19 @@ static inline u64 atomic64_read(atomic64
 	return result;
 }
 
+static inline u64 atomic64_read_unchecked(atomic64_unchecked_t *v)
+{
+	u64 result;
+
+	__asm__ __volatile__("@ atomic64_read_unchecked\n"
+"	ldrexd	%0, %H0, [%1]"
+	: "=&r" (result)
+	: "r" (&v->counter), "Qo" (v->counter)
+	);
+
+	return result;
+}
+
 static inline void atomic64_set(atomic64_t *v, u64 i)
 {
 	u64 tmp;
@@ -268,6 +456,20 @@ static inline void atomic64_set(atomic64
 	: "cc");
 }
 
+static inline void atomic64_set_unchecked(atomic64_unchecked_t *v, u64 i)
+{
+	u64 tmp;
+
+	__asm__ __volatile__("@ atomic64_set_unchecked\n"
+"1:	ldrexd	%0, %H0, [%2]\n"
+"	strexd	%0, %3, %H3, [%2]\n"
+"	teq	%0, #0\n"
+"	bne	1b"
+	: "=&r" (tmp), "=Qo" (v->counter)
+	: "r" (&v->counter), "r" (i)
+	: "cc");
+}
+
 static inline void atomic64_add(u64 i, atomic64_t *v)
 {
 	u64 result;
@@ -276,6 +478,36 @@ static inline void atomic64_add(u64 i, a
 	__asm__ __volatile__("@ atomic64_add\n"
 "1:	ldrexd	%0, %H0, [%3]\n"
 "	adds	%0, %0, %4\n"
+"	adcs	%H0, %H0, %H4\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+"	bvc	3f\n"
+"2:	bkpt	0xf103\n"
+"3:\n"
+#endif
+
+"	strexd	%1, %0, %H0, [%3]\n"
+"	teq	%1, #0\n"
+"	bne	1b"
+
+#ifdef CONFIG_PAX_REFCOUNT
+"\n4:\n"
+	_ASM_EXTABLE(2b, 4b)
+#endif
+
+	: "=&r" (result), "=&r" (tmp), "+Qo" (v->counter)
+	: "r" (&v->counter), "r" (i)
+	: "cc");
+}
+
+static inline void atomic64_add_unchecked(u64 i, atomic64_unchecked_t *v)
+{
+	u64 result;
+	unsigned long tmp;
+
+	__asm__ __volatile__("@ atomic64_add_unchecked\n"
+"1:	ldrexd	%0, %H0, [%3]\n"
+"	adds	%0, %0, %4\n"
 "	adc	%H0, %H0, %H4\n"
 "	strexd	%1, %0, %H0, [%3]\n"
 "	teq	%1, #0\n"
@@ -287,12 +519,49 @@ static inline void atomic64_add(u64 i, a
 
 static inline u64 atomic64_add_return(u64 i, atomic64_t *v)
 {
+	u64 result, tmp;
+
+	smp_mb();
+
+	__asm__ __volatile__("@ atomic64_add_return\n"
+"1:	ldrexd	%1, %H1, [%3]\n"
+"	adds	%0, %1, %4\n"
+"	adcs	%H0, %H1, %H4\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+"	bvc	3f\n"
+"	mov	%0, %1\n"
+"	mov	%H0, %H1\n"
+"2:	bkpt	0xf103\n"
+"3:\n"
+#endif
+
+"	strexd	%1, %0, %H0, [%3]\n"
+"	teq	%1, #0\n"
+"	bne	1b"
+
+#ifdef CONFIG_PAX_REFCOUNT
+"\n4:\n"
+	_ASM_EXTABLE(2b, 4b)
+#endif
+
+	: "=&r" (result), "=&r" (tmp), "+Qo" (v->counter)
+	: "r" (&v->counter), "r" (i)
+	: "cc");
+
+	smp_mb();
+
+	return result;
+}
+
+static inline u64 atomic64_add_return_unchecked(u64 i, atomic64_unchecked_t *v)
+{
 	u64 result;
 	unsigned long tmp;
 
 	smp_mb();
 
-	__asm__ __volatile__("@ atomic64_add_return\n"
+	__asm__ __volatile__("@ atomic64_add_return_unchecked\n"
 "1:	ldrexd	%0, %H0, [%3]\n"
 "	adds	%0, %0, %4\n"
 "	adc	%H0, %H0, %H4\n"
@@ -316,23 +585,34 @@ static inline void atomic64_sub(u64 i, a
 	__asm__ __volatile__("@ atomic64_sub\n"
 "1:	ldrexd	%0, %H0, [%3]\n"
 "	subs	%0, %0, %4\n"
-"	sbc	%H0, %H0, %H4\n"
+"	sbcs	%H0, %H0, %H4\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+"	bvc	3f\n"
+"2:	bkpt	0xf103\n"
+"3:\n"
+#endif
+
 "	strexd	%1, %0, %H0, [%3]\n"
 "	teq	%1, #0\n"
 "	bne	1b"
+
+#ifdef CONFIG_PAX_REFCOUNT
+"\n4:\n"
+	_ASM_EXTABLE(2b, 4b)
+#endif
+
 	: "=&r" (result), "=&r" (tmp), "+Qo" (v->counter)
 	: "r" (&v->counter), "r" (i)
 	: "cc");
 }
 
-static inline u64 atomic64_sub_return(u64 i, atomic64_t *v)
+static inline void atomic64_sub_unchecked(u64 i, atomic64_unchecked_t *v)
 {
 	u64 result;
 	unsigned long tmp;
 
-	smp_mb();
-
-	__asm__ __volatile__("@ atomic64_sub_return\n"
+	__asm__ __volatile__("@ atomic64_sub_unchecked\n"
 "1:	ldrexd	%0, %H0, [%3]\n"
 "	subs	%0, %0, %4\n"
 "	sbc	%H0, %H0, %H4\n"
@@ -342,6 +622,39 @@ static inline u64 atomic64_sub_return(u6
 	: "=&r" (result), "=&r" (tmp), "+Qo" (v->counter)
 	: "r" (&v->counter), "r" (i)
 	: "cc");
+}
+
+static inline u64 atomic64_sub_return(u64 i, atomic64_t *v)
+{
+	u64 result, tmp;
+
+	smp_mb();
+
+	__asm__ __volatile__("@ atomic64_sub_return\n"
+"1:	ldrexd	%1, %H1, [%3]\n"
+"	subs	%0, %1, %4\n"
+"	sbc	%H0, %H1, %H4\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+"	bvc	3f\n"
+"	mov	%0, %1\n"
+"	mov	%H0, %H1\n"
+"2:	bkpt	0xf103\n"
+"3:\n"
+#endif
+
+"	strexd	%1, %0, %H0, [%3]\n"
+"	teq	%1, #0\n"
+"	bne	1b"
+
+#ifdef CONFIG_PAX_REFCOUNT
+"\n4:\n"
+	_ASM_EXTABLE(2b, 4b)
+#endif
+
+	: "=&r" (result), "=&r" (tmp), "+Qo" (v->counter)
+	: "r" (&v->counter), "r" (i)
+	: "cc");
 
 	smp_mb();
 
@@ -372,6 +685,30 @@ static inline u64 atomic64_cmpxchg(atomi
 	return oldval;
 }
 
+static inline u64 atomic64_cmpxchg_unchecked(atomic64_unchecked_t *ptr, u64 old, u64 new)
+{
+	u64 oldval;
+	unsigned long res;
+
+	smp_mb();
+
+	do {
+		__asm__ __volatile__("@ atomic64_cmpxchg_unchecked\n"
+		"ldrexd		%1, %H1, [%3]\n"
+		"mov		%0, #0\n"
+		"teq		%1, %4\n"
+		"teqeq		%H1, %H4\n"
+		"strexdeq	%0, %5, %H5, [%3]"
+		: "=&r" (res), "=&r" (oldval), "+Qo" (ptr->counter)
+		: "r" (&ptr->counter), "r" (old), "r" (new)
+		: "cc");
+	} while (res);
+
+	smp_mb();
+
+	return oldval;
+}
+
 static inline u64 atomic64_xchg(atomic64_t *ptr, u64 new)
 {
 	u64 result;
@@ -395,21 +732,34 @@ static inline u64 atomic64_xchg(atomic64
 
 static inline u64 atomic64_dec_if_positive(atomic64_t *v)
 {
-	u64 result;
-	unsigned long tmp;
+	u64 result, tmp;
 
 	smp_mb();
 
 	__asm__ __volatile__("@ atomic64_dec_if_positive\n"
-"1:	ldrexd	%0, %H0, [%3]\n"
-"	subs	%0, %0, #1\n"
-"	sbc	%H0, %H0, #0\n"
+"1:	ldrexd	%1, %H1, [%3]\n"
+"	subs	%0, %1, #1\n"
+"	sbc	%H0, %H1, #0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+"	bvc	3f\n"
+"	mov	%0, %1\n"
+"	mov	%H0, %H1\n"
+"2:	bkpt	0xf103\n"
+"3:\n"
+#endif
+
 "	teq	%H0, #0\n"
-"	bmi	2f\n"
+"	bmi	4f\n"
 "	strexd	%1, %0, %H0, [%3]\n"
 "	teq	%1, #0\n"
 "	bne	1b\n"
-"2:"
+"4:\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+	_ASM_EXTABLE(2b, 4b)
+#endif
+
 	: "=&r" (result), "=&r" (tmp), "+Qo" (v->counter)
 	: "r" (&v->counter)
 	: "cc");
@@ -432,13 +782,25 @@ static inline int atomic64_add_unless(at
 "	teq	%0, %5\n"
 "	teqeq	%H0, %H5\n"
 "	moveq	%1, #0\n"
-"	beq	2f\n"
+"	beq	4f\n"
 "	adds	%0, %0, %6\n"
 "	adc	%H0, %H0, %H6\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+"	bvc	3f\n"
+"2:	bkpt	0xf103\n"
+"3:\n"
+#endif
+
 "	strexd	%2, %0, %H0, [%4]\n"
 "	teq	%2, #0\n"
 "	bne	1b\n"
-"2:"
+"4:\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+	_ASM_EXTABLE(2b, 4b)
+#endif
+
 	: "=&r" (val), "+r" (ret), "=&r" (tmp), "+Qo" (v->counter)
 	: "r" (&v->counter), "r" (u), "r" (a)
 	: "cc");
@@ -451,10 +813,13 @@ static inline int atomic64_add_unless(at
 
 #define atomic64_add_negative(a, v)	(atomic64_add_return((a), (v)) < 0)
 #define atomic64_inc(v)			atomic64_add(1LL, (v))
+#define atomic64_inc_unchecked(v)	atomic64_add_unchecked(1LL, (v))
 #define atomic64_inc_return(v)		atomic64_add_return(1LL, (v))
+#define atomic64_inc_return_unchecked(v)	atomic64_add_return_unchecked(1LL, (v))
 #define atomic64_inc_and_test(v)	(atomic64_inc_return(v) == 0)
 #define atomic64_sub_and_test(a, v)	(atomic64_sub_return((a), (v)) == 0)
 #define atomic64_dec(v)			atomic64_sub(1LL, (v))
+#define atomic64_dec_unchecked(v)	atomic64_sub_unchecked(1LL, (v))
 #define atomic64_dec_return(v)		atomic64_sub_return(1LL, (v))
 #define atomic64_dec_and_test(v)	(atomic64_dec_return((v)) == 0)
 #define atomic64_inc_not_zero(v)	atomic64_add_unless((v), 1LL, 0LL)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/arm/include/asm/cacheflush.h linux-3.3.8-pax/arch/arm/include/asm/cacheflush.h
--- linux-3.3.8/arch/arm/include/asm/cacheflush.h	2012-06-11 19:36:39.484445771 +0200
+++ linux-3.3.8-pax/arch/arm/include/asm/cacheflush.h	2012-06-11 19:36:45.948446120 +0200
@@ -108,7 +108,7 @@ struct cpu_cache_fns {
 	void (*dma_unmap_area)(const void *, size_t, int);
 
 	void (*dma_flush_range)(const void *, const void *);
-};
+} __no_const;
 
 /*
  * Select the calling method
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/arm/include/asm/cache.h linux-3.3.8-pax/arch/arm/include/asm/cache.h
--- linux-3.3.8/arch/arm/include/asm/cache.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/arm/include/asm/cache.h	2012-03-19 10:43:42.896035306 +0100
@@ -5,7 +5,7 @@
 #define __ASMARM_CACHE_H
 
 #define L1_CACHE_SHIFT		CONFIG_ARM_L1_CACHE_SHIFT
-#define L1_CACHE_BYTES		(1 << L1_CACHE_SHIFT)
+#define L1_CACHE_BYTES		(_AC(1,UL) << L1_CACHE_SHIFT)
 
 /*
  * Memory returned by kmalloc() may be used for DMA, so we must make
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/arm/include/asm/elf.h linux-3.3.8-pax/arch/arm/include/asm/elf.h
--- linux-3.3.8/arch/arm/include/asm/elf.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/arm/include/asm/elf.h	2012-03-19 10:43:42.900035113 +0100
@@ -116,7 +116,14 @@ int dump_task_regs(struct task_struct *t
    the loader.  We need to make sure that it is out of the way of the program
    that it will "exec", and that there is sufficient room for the brk.  */
 
-#define ELF_ET_DYN_BASE	(2 * TASK_SIZE / 3)
+#define ELF_ET_DYN_BASE		(TASK_SIZE / 3 * 2)
+
+#ifdef CONFIG_PAX_ASLR
+#define PAX_ELF_ET_DYN_BASE	0x00008000UL
+
+#define PAX_DELTA_MMAP_LEN	((current->personality == PER_LINUX_32BIT) ? 16 : 10)
+#define PAX_DELTA_STACK_LEN	((current->personality == PER_LINUX_32BIT) ? 16 : 10)
+#endif
 
 /* When the program starts, a1 contains a pointer to a function to be 
    registered with atexit, as per the SVR4 ABI.  A value of 0 means we 
@@ -126,10 +133,6 @@ int dump_task_regs(struct task_struct *t
 extern void elf_set_personality(const struct elf32_hdr *);
 #define SET_PERSONALITY(ex)	elf_set_personality(&(ex))
 
-struct mm_struct;
-extern unsigned long arch_randomize_brk(struct mm_struct *mm);
-#define arch_randomize_brk arch_randomize_brk
-
 extern int vectors_user_mapping(void);
 #define arch_setup_additional_pages(bprm, uses_interp) vectors_user_mapping()
 #define ARCH_HAS_SETUP_ADDITIONAL_PAGES
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/arm/include/asm/kmap_types.h linux-3.3.8-pax/arch/arm/include/asm/kmap_types.h
--- linux-3.3.8/arch/arm/include/asm/kmap_types.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/arm/include/asm/kmap_types.h	2012-03-19 10:43:42.900035113 +0100
@@ -21,6 +21,7 @@ enum km_type {
 	KM_L1_CACHE,
 	KM_L2_CACHE,
 	KM_KDB,
+	KM_CLEARPAGE,
 	KM_TYPE_NR
 };
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/arm/include/asm/outercache.h linux-3.3.8-pax/arch/arm/include/asm/outercache.h
--- linux-3.3.8/arch/arm/include/asm/outercache.h	2012-01-08 19:47:31.027473972 +0100
+++ linux-3.3.8-pax/arch/arm/include/asm/outercache.h	2012-03-19 10:43:42.900035113 +0100
@@ -35,7 +35,7 @@ struct outer_cache_fns {
 #endif
 	void (*set_debug)(unsigned long);
 	void (*resume)(void);
-};
+} __no_const;
 
 #ifdef CONFIG_OUTER_CACHE
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/arm/include/asm/page.h linux-3.3.8-pax/arch/arm/include/asm/page.h
--- linux-3.3.8/arch/arm/include/asm/page.h	2012-03-19 10:38:39.408050915 +0100
+++ linux-3.3.8-pax/arch/arm/include/asm/page.h	2012-03-19 10:43:42.900035113 +0100
@@ -123,7 +123,7 @@ struct cpu_user_fns {
 	void (*cpu_clear_user_highpage)(struct page *page, unsigned long vaddr);
 	void (*cpu_copy_user_highpage)(struct page *to, struct page *from,
 			unsigned long vaddr, struct vm_area_struct *vma);
-};
+} __no_const;
 
 #ifdef MULTI_USER
 extern struct cpu_user_fns cpu_user;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/arm/include/asm/pgalloc.h linux-3.3.8-pax/arch/arm/include/asm/pgalloc.h
--- linux-3.3.8/arch/arm/include/asm/pgalloc.h	2012-03-19 10:38:39.444050913 +0100
+++ linux-3.3.8-pax/arch/arm/include/asm/pgalloc.h	2012-05-07 17:20:55.068205226 +0200
@@ -43,6 +43,11 @@ static inline void pud_populate(struct m
 	set_pud(pud, __pud(__pa(pmd) | PMD_TYPE_TABLE));
 }
 
+static inline void pud_populate_kernel(struct mm_struct *mm, pud_t *pud, pmd_t *pmd)
+{
+	pud_populate(mm, pud, pmd);
+}
+
 #else	/* !CONFIG_ARM_LPAE */
 
 /*
@@ -51,6 +56,7 @@ static inline void pud_populate(struct m
 #define pmd_alloc_one(mm,addr)		({ BUG(); ((pmd_t *)2); })
 #define pmd_free(mm, pmd)		do { } while (0)
 #define pud_populate(mm,pmd,pte)	BUG()
+#define pud_populate_kernel(mm,pmd,pte)	BUG()
 
 #endif	/* CONFIG_ARM_LPAE */
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/arm/include/asm/system.h linux-3.3.8-pax/arch/arm/include/asm/system.h
--- linux-3.3.8/arch/arm/include/asm/system.h	2012-03-19 10:38:39.536050907 +0100
+++ linux-3.3.8-pax/arch/arm/include/asm/system.h	2012-03-19 10:43:42.900035113 +0100
@@ -98,6 +98,8 @@ void hook_ifault_code(int nr, int (*fn)(
 
 #define xchg(ptr,x) \
 	((__typeof__(*(ptr)))__xchg((unsigned long)(x),(ptr),sizeof(*(ptr))))
+#define xchg_unchecked(ptr,x) \
+	((__typeof__(*(ptr)))__xchg((unsigned long)(x),(ptr),sizeof(*(ptr))))
 
 extern asmlinkage void c_backtrace(unsigned long fp, int pmode);
 
@@ -534,6 +536,13 @@ static inline unsigned long long __cmpxc
 
 #endif	/* __LINUX_ARM_ARCH__ >= 6 */
 
+#define _ASM_EXTABLE(from, to)		\
+"	.pushsection __ex_table,\"a\"\n"\
+"	.align	3\n"			\
+"	.long	" #from ", " #to"\n"	\
+"	.popsection"
+
+
 #endif /* __ASSEMBLY__ */
 
 #define arch_align_stack(x) (x)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/arm/include/asm/uaccess.h linux-3.3.8-pax/arch/arm/include/asm/uaccess.h
--- linux-3.3.8/arch/arm/include/asm/uaccess.h	2012-03-19 10:38:39.544050907 +0100
+++ linux-3.3.8-pax/arch/arm/include/asm/uaccess.h	2012-03-19 10:43:42.904035008 +0100
@@ -22,6 +22,8 @@
 #define VERIFY_READ 0
 #define VERIFY_WRITE 1
 
+extern void check_object_size(const void *ptr, unsigned long n, bool to);
+
 /*
  * The exception table consists of pairs of addresses: the first is the
  * address of an instruction that is allowed to fault, and the second is
@@ -387,8 +389,23 @@ do {									\
 
 
 #ifdef CONFIG_MMU
-extern unsigned long __must_check __copy_from_user(void *to, const void __user *from, unsigned long n);
-extern unsigned long __must_check __copy_to_user(void __user *to, const void *from, unsigned long n);
+extern unsigned long __must_check ___copy_from_user(void *to, const void __user *from, unsigned long n);
+extern unsigned long __must_check ___copy_to_user(void __user *to, const void *from, unsigned long n);
+
+static inline unsigned long __must_check __copy_from_user(void *to, const void __user *from, unsigned long n)
+{
+	if (!__builtin_constant_p(n))
+		check_object_size(to, n, false);
+	return ___copy_from_user(to, from, n);
+}
+
+static inline unsigned long __must_check __copy_to_user(void __user *to, const void *from, unsigned long n)
+{
+	if (!__builtin_constant_p(n))
+		check_object_size(from, n, true);
+	return ___copy_to_user(to, from, n);
+}
+
 extern unsigned long __must_check __copy_to_user_std(void __user *to, const void *from, unsigned long n);
 extern unsigned long __must_check __clear_user(void __user *addr, unsigned long n);
 extern unsigned long __must_check __clear_user_std(void __user *addr, unsigned long n);
@@ -403,6 +420,9 @@ extern unsigned long __must_check __strn
 
 static inline unsigned long __must_check copy_from_user(void *to, const void __user *from, unsigned long n)
 {
+	if ((long)n < 0)
+		return n;
+
 	if (access_ok(VERIFY_READ, from, n))
 		n = __copy_from_user(to, from, n);
 	else /* security hole - plug it */
@@ -412,6 +432,9 @@ static inline unsigned long __must_check
 
 static inline unsigned long __must_check copy_to_user(void __user *to, const void *from, unsigned long n)
 {
+	if ((long)n < 0)
+		return n;
+
 	if (access_ok(VERIFY_WRITE, to, n))
 		n = __copy_to_user(to, from, n);
 	return n;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/arm/kernel/armksyms.c linux-3.3.8-pax/arch/arm/kernel/armksyms.c
--- linux-3.3.8/arch/arm/kernel/armksyms.c	2012-01-08 19:47:31.123473967 +0100
+++ linux-3.3.8-pax/arch/arm/kernel/armksyms.c	2012-03-19 10:43:42.904035008 +0100
@@ -95,8 +95,8 @@ EXPORT_SYMBOL(__strncpy_from_user);
 #ifdef CONFIG_MMU
 EXPORT_SYMBOL(copy_page);
 
-EXPORT_SYMBOL(__copy_from_user);
-EXPORT_SYMBOL(__copy_to_user);
+EXPORT_SYMBOL(___copy_from_user);
+EXPORT_SYMBOL(___copy_to_user);
 EXPORT_SYMBOL(__clear_user);
 
 EXPORT_SYMBOL(__get_user_1);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/arm/kernel/process.c linux-3.3.8-pax/arch/arm/kernel/process.c
--- linux-3.3.8/arch/arm/kernel/process.c	2012-03-19 10:38:39.736050897 +0100
+++ linux-3.3.8-pax/arch/arm/kernel/process.c	2012-03-19 10:43:42.904035008 +0100
@@ -28,7 +28,6 @@
 #include <linux/tick.h>
 #include <linux/utsname.h>
 #include <linux/uaccess.h>
-#include <linux/random.h>
 #include <linux/hw_breakpoint.h>
 #include <linux/cpuidle.h>
 
@@ -273,9 +272,10 @@ void machine_power_off(void)
 	machine_shutdown();
 	if (pm_power_off)
 		pm_power_off();
+	BUG();
 }
 
-void machine_restart(char *cmd)
+__noreturn void machine_restart(char *cmd)
 {
 	machine_shutdown();
 
@@ -517,12 +517,6 @@ unsigned long get_wchan(struct task_stru
 	return 0;
 }
 
-unsigned long arch_randomize_brk(struct mm_struct *mm)
-{
-	unsigned long range_end = mm->brk + 0x02000000;
-	return randomize_range(mm->brk, range_end, 0) ? : mm->brk;
-}
-
 #ifdef CONFIG_MMU
 /*
  * The vectors page is always readable from user space for the
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/arm/kernel/setup.c linux-3.3.8-pax/arch/arm/kernel/setup.c
--- linux-3.3.8/arch/arm/kernel/setup.c	2012-03-19 10:38:39.744050896 +0100
+++ linux-3.3.8-pax/arch/arm/kernel/setup.c	2012-03-19 10:43:42.904035008 +0100
@@ -109,13 +109,13 @@ struct processor processor __read_mostly
 struct cpu_tlb_fns cpu_tlb __read_mostly;
 #endif
 #ifdef MULTI_USER
-struct cpu_user_fns cpu_user __read_mostly;
+struct cpu_user_fns cpu_user __read_only;
 #endif
 #ifdef MULTI_CACHE
-struct cpu_cache_fns cpu_cache __read_mostly;
+struct cpu_cache_fns cpu_cache __read_only;
 #endif
 #ifdef CONFIG_OUTER_CACHE
-struct outer_cache_fns outer_cache __read_mostly;
+struct outer_cache_fns outer_cache __read_only;
 EXPORT_SYMBOL(outer_cache);
 #endif
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/arm/lib/copy_from_user.S linux-3.3.8-pax/arch/arm/lib/copy_from_user.S
--- linux-3.3.8/arch/arm/lib/copy_from_user.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/arm/lib/copy_from_user.S	2012-03-19 10:43:42.904035008 +0100
@@ -16,7 +16,7 @@
 /*
  * Prototype:
  *
- *	size_t __copy_from_user(void *to, const void *from, size_t n)
+ *	size_t ___copy_from_user(void *to, const void *from, size_t n)
  *
  * Purpose:
  *
@@ -84,11 +84,11 @@
 
 	.text
 
-ENTRY(__copy_from_user)
+ENTRY(___copy_from_user)
 
 #include "copy_template.S"
 
-ENDPROC(__copy_from_user)
+ENDPROC(___copy_from_user)
 
 	.pushsection .fixup,"ax"
 	.align 0
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/arm/lib/copy_page.S linux-3.3.8-pax/arch/arm/lib/copy_page.S
--- linux-3.3.8/arch/arm/lib/copy_page.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/arm/lib/copy_page.S	2012-03-19 10:43:42.908034833 +0100
@@ -10,6 +10,7 @@
  *  ASM optimised string functions
  */
 #include <linux/linkage.h>
+#include <linux/const.h>
 #include <asm/assembler.h>
 #include <asm/asm-offsets.h>
 #include <asm/cache.h>
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/arm/lib/copy_to_user.S linux-3.3.8-pax/arch/arm/lib/copy_to_user.S
--- linux-3.3.8/arch/arm/lib/copy_to_user.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/arm/lib/copy_to_user.S	2012-03-19 10:43:42.908034833 +0100
@@ -16,7 +16,7 @@
 /*
  * Prototype:
  *
- *	size_t __copy_to_user(void *to, const void *from, size_t n)
+ *	size_t ___copy_to_user(void *to, const void *from, size_t n)
  *
  * Purpose:
  *
@@ -88,11 +88,11 @@
 	.text
 
 ENTRY(__copy_to_user_std)
-WEAK(__copy_to_user)
+WEAK(___copy_to_user)
 
 #include "copy_template.S"
 
-ENDPROC(__copy_to_user)
+ENDPROC(___copy_to_user)
 ENDPROC(__copy_to_user_std)
 
 	.pushsection .fixup,"ax"
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/arm/lib/uaccess.S linux-3.3.8-pax/arch/arm/lib/uaccess.S
--- linux-3.3.8/arch/arm/lib/uaccess.S	2012-03-19 10:38:39.916050885 +0100
+++ linux-3.3.8-pax/arch/arm/lib/uaccess.S	2012-03-19 10:43:42.908034833 +0100
@@ -20,7 +20,7 @@
 
 #define PAGE_SHIFT 12
 
-/* Prototype: int __copy_to_user(void *to, const char *from, size_t n)
+/* Prototype: int ___copy_to_user(void *to, const char *from, size_t n)
  * Purpose  : copy a block to user memory from kernel memory
  * Params   : to   - user memory
  *          : from - kernel memory
@@ -40,7 +40,7 @@ USER(	TUSER(	strgtb) r3, [r0], #1)			@ M
 		sub	r2, r2, ip
 		b	.Lc2u_dest_aligned
 
-ENTRY(__copy_to_user)
+ENTRY(___copy_to_user)
 		stmfd	sp!, {r2, r4 - r7, lr}
 		cmp	r2, #4
 		blt	.Lc2u_not_enough
@@ -278,14 +278,14 @@ USER(	TUSER(	strgeb) r3, [r0], #1)			@ M
 		ldrgtb	r3, [r1], #0
 USER(	TUSER(	strgtb) r3, [r0], #1)			@ May fault
 		b	.Lc2u_finished
-ENDPROC(__copy_to_user)
+ENDPROC(___copy_to_user)
 
 		.pushsection .fixup,"ax"
 		.align	0
 9001:		ldmfd	sp!, {r0, r4 - r7, pc}
 		.popsection
 
-/* Prototype: unsigned long __copy_from_user(void *to,const void *from,unsigned long n);
+/* Prototype: unsigned long ___copy_from_user(void *to,const void *from,unsigned long n);
  * Purpose  : copy a block from user memory to kernel memory
  * Params   : to   - kernel memory
  *          : from - user memory
@@ -304,7 +304,7 @@ USER(	TUSER(	ldrgtb) r3, [r1], #1)			@ M
 		sub	r2, r2, ip
 		b	.Lcfu_dest_aligned
 
-ENTRY(__copy_from_user)
+ENTRY(___copy_from_user)
 		stmfd	sp!, {r0, r2, r4 - r7, lr}
 		cmp	r2, #4
 		blt	.Lcfu_not_enough
@@ -544,7 +544,7 @@ USER(	TUSER(	ldrgeb) r3, [r1], #1)			@ M
 USER(	TUSER(	ldrgtb) r3, [r1], #1)			@ May fault
 		strgtb	r3, [r0], #1
 		b	.Lcfu_finished
-ENDPROC(__copy_from_user)
+ENDPROC(___copy_from_user)
 
 		.pushsection .fixup,"ax"
 		.align	0
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/arm/lib/uaccess_with_memcpy.c linux-3.3.8-pax/arch/arm/lib/uaccess_with_memcpy.c
--- linux-3.3.8/arch/arm/lib/uaccess_with_memcpy.c	2012-01-08 19:47:31.451473950 +0100
+++ linux-3.3.8-pax/arch/arm/lib/uaccess_with_memcpy.c	2012-03-19 10:43:42.908034833 +0100
@@ -104,7 +104,7 @@ out:
 }
 
 unsigned long
-__copy_to_user(void __user *to, const void *from, unsigned long n)
+___copy_to_user(void __user *to, const void *from, unsigned long n)
 {
 	/*
 	 * This test is stubbed out of the main function above to keep
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/arm/mach-omap2/board-n8x0.c linux-3.3.8-pax/arch/arm/mach-omap2/board-n8x0.c
--- linux-3.3.8/arch/arm/mach-omap2/board-n8x0.c	2012-03-19 10:38:43.536050694 +0100
+++ linux-3.3.8-pax/arch/arm/mach-omap2/board-n8x0.c	2012-03-19 10:43:42.912034658 +0100
@@ -597,7 +597,7 @@ static int n8x0_menelaus_late_init(struc
 }
 #endif
 
-static struct menelaus_platform_data n8x0_menelaus_platform_data __initdata = {
+static struct menelaus_platform_data n8x0_menelaus_platform_data __initconst = {
 	.late_init = n8x0_menelaus_late_init,
 };
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/arm/mm/fault.c linux-3.3.8-pax/arch/arm/mm/fault.c
--- linux-3.3.8/arch/arm/mm/fault.c	2012-05-24 17:32:19.309142883 +0200
+++ linux-3.3.8-pax/arch/arm/mm/fault.c	2012-05-24 17:32:27.037145997 +0200
@@ -172,6 +172,13 @@ __do_user_fault(struct task_struct *tsk,
 	}
 #endif
 
+#ifdef CONFIG_PAX_PAGEEXEC
+	if (fsr & FSR_LNX_PF) {
+		pax_report_fault(regs, (void *)regs->ARM_pc, (void *)regs->ARM_sp);
+		do_group_exit(SIGKILL);
+	}
+#endif
+
 	tsk->thread.address = addr;
 	tsk->thread.error_code = fsr;
 	tsk->thread.trap_no = 14;
@@ -395,6 +402,33 @@ do_page_fault(unsigned long addr, unsign
 }
 #endif					/* CONFIG_MMU */
 
+#ifdef CONFIG_PAX_PAGEEXEC
+void pax_report_insns(struct pt_regs *regs, void *pc, void *sp)
+{
+	long i;
+
+	printk(KERN_ERR "PAX: bytes at PC: ");
+	for (i = 0; i < 20; i++) {
+		unsigned char c;
+		if (get_user(c, (__force unsigned char __user *)pc+i))
+			printk(KERN_CONT "?? ");
+		else
+			printk(KERN_CONT "%02x ", c);
+	}
+	printk("\n");
+
+	printk(KERN_ERR "PAX: bytes at SP-4: ");
+	for (i = -1; i < 20; i++) {
+		unsigned long c;
+		if (get_user(c, (__force unsigned long __user *)sp+i))
+			printk(KERN_CONT "???????? ");
+		else
+			printk(KERN_CONT "%08lx ", c);
+	}
+	printk("\n");
+}
+#endif
+
 /*
  * First Level Translation Fault Handler
  *
@@ -575,6 +609,20 @@ do_PrefetchAbort(unsigned long addr, uns
 	const struct fsr_info *inf = ifsr_info + fsr_fs(ifsr);
 	struct siginfo info;
 
+#ifdef CONFIG_PAX_REFCOUNT
+	if (fsr_fs(ifsr) == 2) {
+		unsigned int bkpt;
+
+		if (!probe_kernel_address((unsigned int *)addr, bkpt) && bkpt == 0xe12f1073) {
+			current->thread.error_code = ifsr;
+			current->thread.trap_no = 0;
+			pax_report_refcount_overflow(regs);
+			fixup_exception(regs);
+			return;
+		}
+	}
+#endif
+
 	if (!inf->fn(addr, ifsr | FSR_LNX_PF, regs))
 		return;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/arm/mm/mmap.c linux-3.3.8-pax/arch/arm/mm/mmap.c
--- linux-3.3.8/arch/arm/mm/mmap.c	2012-03-19 10:38:49.092050065 +0100
+++ linux-3.3.8-pax/arch/arm/mm/mmap.c	2012-03-19 10:43:42.912034658 +0100
@@ -93,6 +93,10 @@ arch_get_unmapped_area(struct file *filp
 	if (len > TASK_SIZE)
 		return -ENOMEM;
 
+#ifdef CONFIG_PAX_RANDMMAP
+	if (!(mm->pax_flags & MF_PAX_RANDMMAP))
+#endif
+
 	if (addr) {
 		if (do_align)
 			addr = COLOUR_ALIGN(addr, pgoff);
@@ -100,15 +104,14 @@ arch_get_unmapped_area(struct file *filp
 			addr = PAGE_ALIGN(addr);
 
 		vma = find_vma(mm, addr);
-		if (TASK_SIZE - len >= addr &&
-		    (!vma || addr + len <= vma->vm_start))
+		if (TASK_SIZE - len >= addr && check_heap_stack_gap(vma, addr, len))
 			return addr;
 	}
 	if (len > mm->cached_hole_size) {
-	        start_addr = addr = mm->free_area_cache;
+		start_addr = addr = mm->free_area_cache;
 	} else {
-	        start_addr = addr = mm->mmap_base;
-	        mm->cached_hole_size = 0;
+		start_addr = addr = mm->mmap_base;
+		mm->cached_hole_size = 0;
 	}
 
 full_search:
@@ -124,14 +127,14 @@ full_search:
 			 * Start a new search - just in case we missed
 			 * some holes.
 			 */
-			if (start_addr != TASK_UNMAPPED_BASE) {
-				start_addr = addr = TASK_UNMAPPED_BASE;
+			if (start_addr != mm->mmap_base) {
+				start_addr = addr = mm->mmap_base;
 				mm->cached_hole_size = 0;
 				goto full_search;
 			}
 			return -ENOMEM;
 		}
-		if (!vma || addr + len <= vma->vm_start) {
+		if (check_heap_stack_gap(vma, addr, len)) {
 			/*
 			 * Remember the place where we stopped the search:
 			 */
@@ -266,10 +269,22 @@ void arch_pick_mmap_layout(struct mm_str
 
 	if (mmap_is_legacy()) {
 		mm->mmap_base = TASK_UNMAPPED_BASE + random_factor;
+
+#ifdef CONFIG_PAX_RANDMMAP
+		if (mm->pax_flags & MF_PAX_RANDMMAP)
+			mm->mmap_base += mm->delta_mmap;
+#endif
+
 		mm->get_unmapped_area = arch_get_unmapped_area;
 		mm->unmap_area = arch_unmap_area;
 	} else {
 		mm->mmap_base = mmap_base(random_factor);
+
+#ifdef CONFIG_PAX_RANDMMAP
+		if (mm->pax_flags & MF_PAX_RANDMMAP)
+			mm->mmap_base -= mm->delta_mmap + mm->delta_stack;
+#endif
+
 		mm->get_unmapped_area = arch_get_unmapped_area_topdown;
 		mm->unmap_area = arch_unmap_area_topdown;
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/arm/plat-samsung/include/plat/dma-ops.h linux-3.3.8-pax/arch/arm/plat-samsung/include/plat/dma-ops.h
--- linux-3.3.8/arch/arm/plat-samsung/include/plat/dma-ops.h	2012-03-19 10:38:49.736050362 +0100
+++ linux-3.3.8-pax/arch/arm/plat-samsung/include/plat/dma-ops.h	2012-03-19 10:43:42.912034658 +0100
@@ -43,7 +43,7 @@ struct samsung_dma_ops {
 	int (*started)(unsigned ch);
 	int (*flush)(unsigned ch);
 	int (*stop)(unsigned ch);
-};
+} __no_const;
 
 extern void *samsung_dmadev_get_ops(void);
 extern void *s3c_dma_get_ops(void);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/arm/plat-samsung/include/plat/ehci.h linux-3.3.8-pax/arch/arm/plat-samsung/include/plat/ehci.h
--- linux-3.3.8/arch/arm/plat-samsung/include/plat/ehci.h	2012-01-08 19:47:41.215473428 +0100
+++ linux-3.3.8-pax/arch/arm/plat-samsung/include/plat/ehci.h	2012-03-19 10:43:42.912034658 +0100
@@ -14,7 +14,7 @@
 struct s5p_ehci_platdata {
 	int (*phy_init)(struct platform_device *pdev, int type);
 	int (*phy_exit)(struct platform_device *pdev, int type);
-};
+} __no_const;
 
 extern void s5p_ehci_set_platdata(struct s5p_ehci_platdata *pd);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/avr32/include/asm/elf.h linux-3.3.8-pax/arch/avr32/include/asm/elf.h
--- linux-3.3.8/arch/avr32/include/asm/elf.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/avr32/include/asm/elf.h	2012-03-19 10:43:42.916034553 +0100
@@ -84,8 +84,14 @@ typedef struct user_fpu_struct elf_fpreg
    the loader.  We need to make sure that it is out of the way of the program
    that it will "exec", and that there is sufficient room for the brk.  */
 
-#define ELF_ET_DYN_BASE         (2 * TASK_SIZE / 3)
+#define ELF_ET_DYN_BASE		(TASK_SIZE / 3 * 2)
 
+#ifdef CONFIG_PAX_ASLR
+#define PAX_ELF_ET_DYN_BASE	0x00001000UL
+
+#define PAX_DELTA_MMAP_LEN	15
+#define PAX_DELTA_STACK_LEN	15
+#endif
 
 /* This yields a mask that user programs can use to figure out what
    instruction set this CPU supports.  This could be done in user space,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/avr32/include/asm/kmap_types.h linux-3.3.8-pax/arch/avr32/include/asm/kmap_types.h
--- linux-3.3.8/arch/avr32/include/asm/kmap_types.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/avr32/include/asm/kmap_types.h	2012-03-19 10:43:42.916034553 +0100
@@ -22,7 +22,8 @@ D(10)	KM_IRQ0,
 D(11)	KM_IRQ1,
 D(12)	KM_SOFTIRQ0,
 D(13)	KM_SOFTIRQ1,
-D(14)	KM_TYPE_NR
+D(14)	KM_CLEARPAGE,
+D(15)	KM_TYPE_NR
 };
 
 #undef D
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/avr32/mm/fault.c linux-3.3.8-pax/arch/avr32/mm/fault.c
--- linux-3.3.8/arch/avr32/mm/fault.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/avr32/mm/fault.c	2012-03-19 10:43:42.916034553 +0100
@@ -41,6 +41,23 @@ static inline int notify_page_fault(stru
 
 int exception_trace = 1;
 
+#ifdef CONFIG_PAX_PAGEEXEC
+void pax_report_insns(struct pt_regs *regs, void *pc, void *sp)
+{
+	unsigned long i;
+
+	printk(KERN_ERR "PAX: bytes at PC: ");
+	for (i = 0; i < 20; i++) {
+		unsigned char c;
+		if (get_user(c, (unsigned char *)pc+i))
+			printk(KERN_CONT "???????? ");
+		else
+			printk(KERN_CONT "%02x ", c);
+	}
+	printk("\n");
+}
+#endif
+
 /*
  * This routine handles page faults. It determines the address and the
  * problem, and then passes it off to one of the appropriate routines.
@@ -156,6 +173,16 @@ bad_area:
 	up_read(&mm->mmap_sem);
 
 	if (user_mode(regs)) {
+
+#ifdef CONFIG_PAX_PAGEEXEC
+		if (mm->pax_flags & MF_PAX_PAGEEXEC) {
+			if (ecr == ECR_PROTECTION_X || ecr == ECR_TLB_MISS_X) {
+				pax_report_fault(regs, (void *)regs->pc, (void *)regs->sp);
+				do_group_exit(SIGKILL);
+			}
+		}
+#endif
+
 		if (exception_trace && printk_ratelimit())
 			printk("%s%s[%d]: segfault at %08lx pc %08lx "
 			       "sp %08lx ecr %lu\n",
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/frv/include/asm/atomic.h linux-3.3.8-pax/arch/frv/include/asm/atomic.h
--- linux-3.3.8/arch/frv/include/asm/atomic.h	2011-10-24 12:48:23.287091932 +0200
+++ linux-3.3.8-pax/arch/frv/include/asm/atomic.h	2012-03-19 10:43:42.916034553 +0100
@@ -241,6 +241,16 @@ extern uint32_t __xchg_32(uint32_t i, vo
 #define atomic64_cmpxchg(v, old, new)	(__cmpxchg_64(old, new, &(v)->counter))
 #define atomic64_xchg(v, new)		(__xchg_64(new, &(v)->counter))
 
+#define atomic64_read_unchecked(v)		atomic64_read(v)
+#define atomic64_set_unchecked(v, i)		atomic64_set((v), (i))
+#define atomic64_add_unchecked(a, v)		atomic64_add((a), (v))
+#define atomic64_add_return_unchecked(a, v)	atomic64_add_return((a), (v))
+#define atomic64_sub_unchecked(a, v)		atomic64_sub((a), (v))
+#define atomic64_inc_unchecked(v)		atomic64_inc(v)
+#define atomic64_inc_return_unchecked(v)	atomic64_inc_return(v)
+#define atomic64_dec_unchecked(v)		atomic64_dec(v)
+#define atomic64_cmpxchg_unchecked(v, o, n)	atomic64_cmpxchg((v), (o), (n))
+
 static __inline__ int __atomic_add_unless(atomic_t *v, int a, int u)
 {
 	int c, old;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/frv/include/asm/kmap_types.h linux-3.3.8-pax/arch/frv/include/asm/kmap_types.h
--- linux-3.3.8/arch/frv/include/asm/kmap_types.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/frv/include/asm/kmap_types.h	2012-03-19 10:43:42.916034553 +0100
@@ -23,6 +23,7 @@ enum km_type {
 	KM_IRQ1,
 	KM_SOFTIRQ0,
 	KM_SOFTIRQ1,
+	KM_CLEARPAGE,
 	KM_TYPE_NR
 };
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/frv/mm/elf-fdpic.c linux-3.3.8-pax/arch/frv/mm/elf-fdpic.c
--- linux-3.3.8/arch/frv/mm/elf-fdpic.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/frv/mm/elf-fdpic.c	2012-03-19 10:43:42.920034570 +0100
@@ -73,8 +73,7 @@ unsigned long arch_get_unmapped_area(str
 	if (addr) {
 		addr = PAGE_ALIGN(addr);
 		vma = find_vma(current->mm, addr);
-		if (TASK_SIZE - len >= addr &&
-		    (!vma || addr + len <= vma->vm_start))
+		if (TASK_SIZE - len >= addr && check_heap_stack_gap(vma, addr, len))
 			goto success;
 	}
 
@@ -89,7 +88,7 @@ unsigned long arch_get_unmapped_area(str
 			for (; vma; vma = vma->vm_next) {
 				if (addr > limit)
 					break;
-				if (addr + len <= vma->vm_start)
+				if (check_heap_stack_gap(vma, addr, len))
 					goto success;
 				addr = vma->vm_end;
 			}
@@ -104,7 +103,7 @@ unsigned long arch_get_unmapped_area(str
 		for (; vma; vma = vma->vm_next) {
 			if (addr > limit)
 				break;
-			if (addr + len <= vma->vm_start)
+			if (check_heap_stack_gap(vma, addr, len))
 				goto success;
 			addr = vma->vm_end;
 		}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/ia64/include/asm/atomic.h linux-3.3.8-pax/arch/ia64/include/asm/atomic.h
--- linux-3.3.8/arch/ia64/include/asm/atomic.h	2011-10-24 12:48:23.383091927 +0200
+++ linux-3.3.8-pax/arch/ia64/include/asm/atomic.h	2012-03-19 10:43:42.920034570 +0100
@@ -209,6 +209,16 @@ atomic64_add_negative (__s64 i, atomic64
 #define atomic64_inc(v)			atomic64_add(1, (v))
 #define atomic64_dec(v)			atomic64_sub(1, (v))
 
+#define atomic64_read_unchecked(v)		atomic64_read(v)
+#define atomic64_set_unchecked(v, i)		atomic64_set((v), (i))
+#define atomic64_add_unchecked(a, v)		atomic64_add((a), (v))
+#define atomic64_add_return_unchecked(a, v)	atomic64_add_return((a), (v))
+#define atomic64_sub_unchecked(a, v)		atomic64_sub((a), (v))
+#define atomic64_inc_unchecked(v)		atomic64_inc(v)
+#define atomic64_inc_return_unchecked(v)	atomic64_inc_return(v)
+#define atomic64_dec_unchecked(v)		atomic64_dec(v)
+#define atomic64_cmpxchg_unchecked(v, o, n)	atomic64_cmpxchg((v), (o), (n))
+
 /* Atomic operations are already serializing */
 #define smp_mb__before_atomic_dec()	barrier()
 #define smp_mb__after_atomic_dec()	barrier()
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/ia64/include/asm/elf.h linux-3.3.8-pax/arch/ia64/include/asm/elf.h
--- linux-3.3.8/arch/ia64/include/asm/elf.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/ia64/include/asm/elf.h	2012-03-19 10:43:42.920034570 +0100
@@ -42,6 +42,13 @@
  */
 #define ELF_ET_DYN_BASE		(TASK_UNMAPPED_BASE + 0x800000000UL)
 
+#ifdef CONFIG_PAX_ASLR
+#define PAX_ELF_ET_DYN_BASE	(current->personality == PER_LINUX32 ? 0x08048000UL : 0x4000000000000000UL)
+
+#define PAX_DELTA_MMAP_LEN	(current->personality == PER_LINUX32 ? 16 : 3*PAGE_SHIFT - 13)
+#define PAX_DELTA_STACK_LEN	(current->personality == PER_LINUX32 ? 16 : 3*PAGE_SHIFT - 13)
+#endif
+
 #define PT_IA_64_UNWIND		0x70000001
 
 /* IA-64 relocations: */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/ia64/include/asm/pgalloc.h linux-3.3.8-pax/arch/ia64/include/asm/pgalloc.h
--- linux-3.3.8/arch/ia64/include/asm/pgalloc.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/ia64/include/asm/pgalloc.h	2012-05-07 17:19:10.488210810 +0200
@@ -39,6 +39,12 @@ pgd_populate(struct mm_struct *mm, pgd_t
 	pgd_val(*pgd_entry) = __pa(pud);
 }
 
+static inline void
+pgd_populate_kernel(struct mm_struct *mm, pgd_t * pgd_entry, pud_t * pud)
+{
+	pgd_populate(mm, pgd_entry, pud);
+}
+
 static inline pud_t *pud_alloc_one(struct mm_struct *mm, unsigned long addr)
 {
 	return quicklist_alloc(0, GFP_KERNEL, NULL);
@@ -57,6 +63,12 @@ pud_populate(struct mm_struct *mm, pud_t
 	pud_val(*pud_entry) = __pa(pmd);
 }
 
+static inline void
+pud_populate_kernel(struct mm_struct *mm, pud_t * pud_entry, pmd_t * pmd)
+{
+	pud_populate(mm, pud_entry, pmd);
+}
+
 static inline pmd_t *pmd_alloc_one(struct mm_struct *mm, unsigned long addr)
 {
 	return quicklist_alloc(0, GFP_KERNEL, NULL);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/ia64/include/asm/pgtable.h linux-3.3.8-pax/arch/ia64/include/asm/pgtable.h
--- linux-3.3.8/arch/ia64/include/asm/pgtable.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/ia64/include/asm/pgtable.h	2012-03-19 10:43:42.920034570 +0100
@@ -12,7 +12,7 @@
  *	David Mosberger-Tang <davidm@hpl.hp.com>
  */
 
-
+#include <linux/const.h>
 #include <asm/mman.h>
 #include <asm/page.h>
 #include <asm/processor.h>
@@ -143,6 +143,17 @@
 #define PAGE_READONLY	__pgprot(__ACCESS_BITS | _PAGE_PL_3 | _PAGE_AR_R)
 #define PAGE_COPY	__pgprot(__ACCESS_BITS | _PAGE_PL_3 | _PAGE_AR_R)
 #define PAGE_COPY_EXEC	__pgprot(__ACCESS_BITS | _PAGE_PL_3 | _PAGE_AR_RX)
+
+#ifdef CONFIG_PAX_PAGEEXEC
+# define PAGE_SHARED_NOEXEC	__pgprot(__ACCESS_BITS | _PAGE_PL_3 | _PAGE_AR_RW)
+# define PAGE_READONLY_NOEXEC	__pgprot(__ACCESS_BITS | _PAGE_PL_3 | _PAGE_AR_R)
+# define PAGE_COPY_NOEXEC	__pgprot(__ACCESS_BITS | _PAGE_PL_3 | _PAGE_AR_R)
+#else
+# define PAGE_SHARED_NOEXEC	PAGE_SHARED
+# define PAGE_READONLY_NOEXEC	PAGE_READONLY
+# define PAGE_COPY_NOEXEC	PAGE_COPY
+#endif
+
 #define PAGE_GATE	__pgprot(__ACCESS_BITS | _PAGE_PL_0 | _PAGE_AR_X_RX)
 #define PAGE_KERNEL	__pgprot(__DIRTY_BITS  | _PAGE_PL_0 | _PAGE_AR_RWX)
 #define PAGE_KERNELRX	__pgprot(__ACCESS_BITS | _PAGE_PL_0 | _PAGE_AR_RX)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/ia64/include/asm/spinlock.h linux-3.3.8-pax/arch/ia64/include/asm/spinlock.h
--- linux-3.3.8/arch/ia64/include/asm/spinlock.h	2011-10-24 12:48:23.435091924 +0200
+++ linux-3.3.8-pax/arch/ia64/include/asm/spinlock.h	2012-03-19 10:43:42.920034570 +0100
@@ -72,7 +72,7 @@ static __always_inline void __ticket_spi
 	unsigned short	*p = (unsigned short *)&lock->lock + 1, tmp;
 
 	asm volatile ("ld2.bias %0=[%1]" : "=r"(tmp) : "r"(p));
-	ACCESS_ONCE(*p) = (tmp + 2) & ~1;
+	ACCESS_ONCE_RW(*p) = (tmp + 2) & ~1;
 }
 
 static __always_inline void __ticket_spin_unlock_wait(arch_spinlock_t *lock)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/ia64/include/asm/uaccess.h linux-3.3.8-pax/arch/ia64/include/asm/uaccess.h
--- linux-3.3.8/arch/ia64/include/asm/uaccess.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/ia64/include/asm/uaccess.h	2012-03-19 10:43:42.924034605 +0100
@@ -257,7 +257,7 @@ __copy_from_user (void *to, const void _
 	const void *__cu_from = (from);							\
 	long __cu_len = (n);								\
 											\
-	if (__access_ok(__cu_to, __cu_len, get_fs()))					\
+	if (__cu_len > 0  && __cu_len <= INT_MAX && __access_ok(__cu_to, __cu_len, get_fs()))			\
 		__cu_len = __copy_user(__cu_to, (__force void __user *) __cu_from, __cu_len);	\
 	__cu_len;									\
 })
@@ -269,7 +269,7 @@ __copy_from_user (void *to, const void _
 	long __cu_len = (n);								\
 											\
 	__chk_user_ptr(__cu_from);							\
-	if (__access_ok(__cu_from, __cu_len, get_fs()))					\
+	if (__cu_len > 0 && __cu_len <= INT_MAX  && __access_ok(__cu_from, __cu_len, get_fs()))			\
 		__cu_len = __copy_user((__force void __user *) __cu_to, __cu_from, __cu_len);	\
 	__cu_len;									\
 })
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/ia64/kernel/module.c linux-3.3.8-pax/arch/ia64/kernel/module.c
--- linux-3.3.8/arch/ia64/kernel/module.c	2011-10-24 12:48:23.459091923 +0200
+++ linux-3.3.8-pax/arch/ia64/kernel/module.c	2012-03-19 10:43:42.924034605 +0100
@@ -307,8 +307,7 @@ plt_target (struct plt_entry *plt)
 void
 module_free (struct module *mod, void *module_region)
 {
-	if (mod && mod->arch.init_unw_table &&
-	    module_region == mod->module_init) {
+	if (mod && mod->arch.init_unw_table && module_region == mod->module_init_rx) {
 		unw_remove_unwind_table(mod->arch.init_unw_table);
 		mod->arch.init_unw_table = NULL;
 	}
@@ -494,15 +493,39 @@ module_frob_arch_sections (Elf_Ehdr *ehd
 }
 
 static inline int
+in_init_rx (const struct module *mod, uint64_t addr)
+{
+	return addr - (uint64_t) mod->module_init_rx < mod->init_size_rx;
+}
+
+static inline int
+in_init_rw (const struct module *mod, uint64_t addr)
+{
+	return addr - (uint64_t) mod->module_init_rw < mod->init_size_rw;
+}
+
+static inline int
 in_init (const struct module *mod, uint64_t addr)
 {
-	return addr - (uint64_t) mod->module_init < mod->init_size;
+	return in_init_rx(mod, addr) || in_init_rw(mod, addr);
+}
+
+static inline int
+in_core_rx (const struct module *mod, uint64_t addr)
+{
+	return addr - (uint64_t) mod->module_core_rx < mod->core_size_rx;
+}
+
+static inline int
+in_core_rw (const struct module *mod, uint64_t addr)
+{
+	return addr - (uint64_t) mod->module_core_rw < mod->core_size_rw;
 }
 
 static inline int
 in_core (const struct module *mod, uint64_t addr)
 {
-	return addr - (uint64_t) mod->module_core < mod->core_size;
+	return in_core_rx(mod, addr) || in_core_rw(mod, addr);
 }
 
 static inline int
@@ -685,7 +708,14 @@ do_reloc (struct module *mod, uint8_t r_
 		break;
 
 	      case RV_BDREL:
-		val -= (uint64_t) (in_init(mod, val) ? mod->module_init : mod->module_core);
+		if (in_init_rx(mod, val))
+			val -= (uint64_t) mod->module_init_rx;
+		else if (in_init_rw(mod, val))
+			val -= (uint64_t) mod->module_init_rw;
+		else if (in_core_rx(mod, val))
+			val -= (uint64_t) mod->module_core_rx;
+		else if (in_core_rw(mod, val))
+			val -= (uint64_t) mod->module_core_rw;
 		break;
 
 	      case RV_LTV:
@@ -820,15 +850,15 @@ apply_relocate_add (Elf64_Shdr *sechdrs,
 		 *     addresses have been selected...
 		 */
 		uint64_t gp;
-		if (mod->core_size > MAX_LTOFF)
+		if (mod->core_size_rx + mod->core_size_rw > MAX_LTOFF)
 			/*
 			 * This takes advantage of fact that SHF_ARCH_SMALL gets allocated
 			 * at the end of the module.
 			 */
-			gp = mod->core_size - MAX_LTOFF / 2;
+			gp = mod->core_size_rx + mod->core_size_rw - MAX_LTOFF / 2;
 		else
-			gp = mod->core_size / 2;
-		gp = (uint64_t) mod->module_core + ((gp + 7) & -8);
+			gp = (mod->core_size_rx + mod->core_size_rw) / 2;
+		gp = (uint64_t) mod->module_core_rx + ((gp + 7) & -8);
 		mod->arch.gp = gp;
 		DEBUGP("%s: placing gp at 0x%lx\n", __func__, gp);
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/ia64/kernel/sys_ia64.c linux-3.3.8-pax/arch/ia64/kernel/sys_ia64.c
--- linux-3.3.8/arch/ia64/kernel/sys_ia64.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/ia64/kernel/sys_ia64.c	2012-03-19 10:43:42.924034605 +0100
@@ -43,6 +43,13 @@ arch_get_unmapped_area (struct file *fil
 	if (REGION_NUMBER(addr) == RGN_HPAGE)
 		addr = 0;
 #endif
+
+#ifdef CONFIG_PAX_RANDMMAP
+	if (mm->pax_flags & MF_PAX_RANDMMAP)
+		addr = mm->free_area_cache;
+	else
+#endif
+
 	if (!addr)
 		addr = mm->free_area_cache;
 
@@ -61,14 +68,14 @@ arch_get_unmapped_area (struct file *fil
 	for (vma = find_vma(mm, addr); ; vma = vma->vm_next) {
 		/* At this point:  (!vma || addr < vma->vm_end). */
 		if (TASK_SIZE - len < addr || RGN_MAP_LIMIT - len < REGION_OFFSET(addr)) {
-			if (start_addr != TASK_UNMAPPED_BASE) {
+			if (start_addr != mm->mmap_base) {
 				/* Start a new search --- just in case we missed some holes.  */
-				addr = TASK_UNMAPPED_BASE;
+				addr = mm->mmap_base;
 				goto full_search;
 			}
 			return -ENOMEM;
 		}
-		if (!vma || addr + len <= vma->vm_start) {
+		if (check_heap_stack_gap(vma, addr, len)) {
 			/* Remember the address where we stopped this search:  */
 			mm->free_area_cache = addr + len;
 			return addr;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/ia64/kernel/vmlinux.lds.S linux-3.3.8-pax/arch/ia64/kernel/vmlinux.lds.S
--- linux-3.3.8/arch/ia64/kernel/vmlinux.lds.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/ia64/kernel/vmlinux.lds.S	2012-03-19 10:43:42.924034605 +0100
@@ -199,7 +199,7 @@ SECTIONS {
 	/* Per-cpu data: */
 	. = ALIGN(PERCPU_PAGE_SIZE);
 	PERCPU_VADDR(SMP_CACHE_BYTES, PERCPU_ADDR, :percpu)
-	__phys_per_cpu_start = __per_cpu_load;
+	__phys_per_cpu_start = per_cpu_load;
 	/*
 	 * ensure percpu data fits
 	 * into percpu page size
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/ia64/mm/fault.c linux-3.3.8-pax/arch/ia64/mm/fault.c
--- linux-3.3.8/arch/ia64/mm/fault.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/ia64/mm/fault.c	2012-03-19 10:43:42.928034710 +0100
@@ -73,6 +73,23 @@ mapped_kernel_page_is_present (unsigned
 	return pte_present(pte);
 }
 
+#ifdef CONFIG_PAX_PAGEEXEC
+void pax_report_insns(struct pt_regs *regs, void *pc, void *sp)
+{
+	unsigned long i;
+
+	printk(KERN_ERR "PAX: bytes at PC: ");
+	for (i = 0; i < 8; i++) {
+		unsigned int c;
+		if (get_user(c, (unsigned int *)pc+i))
+			printk(KERN_CONT "???????? ");
+		else
+			printk(KERN_CONT "%08x ", c);
+	}
+	printk("\n");
+}
+#endif
+
 void __kprobes
 ia64_do_page_fault (unsigned long address, unsigned long isr, struct pt_regs *regs)
 {
@@ -146,9 +163,23 @@ ia64_do_page_fault (unsigned long addres
 	mask = (  (((isr >> IA64_ISR_X_BIT) & 1UL) << VM_EXEC_BIT)
 		| (((isr >> IA64_ISR_W_BIT) & 1UL) << VM_WRITE_BIT));
 
-	if ((vma->vm_flags & mask) != mask)
+	if ((vma->vm_flags & mask) != mask) {
+
+#ifdef CONFIG_PAX_PAGEEXEC
+		if (!(vma->vm_flags & VM_EXEC) && (mask & VM_EXEC)) {
+			if (!(mm->pax_flags & MF_PAX_PAGEEXEC) || address != regs->cr_iip)
+				goto bad_area;
+
+			up_read(&mm->mmap_sem);
+			pax_report_fault(regs, (void *)regs->cr_iip, (void *)regs->r12);
+			do_group_exit(SIGKILL);
+		}
+#endif
+
 		goto bad_area;
 
+	}
+
 	/*
 	 * If for any reason at all we couldn't handle the fault, make
 	 * sure we exit gracefully rather than endlessly redo the
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/ia64/mm/hugetlbpage.c linux-3.3.8-pax/arch/ia64/mm/hugetlbpage.c
--- linux-3.3.8/arch/ia64/mm/hugetlbpage.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/ia64/mm/hugetlbpage.c	2012-03-19 10:43:42.928034710 +0100
@@ -171,7 +171,7 @@ unsigned long hugetlb_get_unmapped_area(
 		/* At this point:  (!vmm || addr < vmm->vm_end). */
 		if (REGION_OFFSET(addr) + len > RGN_MAP_LIMIT)
 			return -ENOMEM;
-		if (!vmm || (addr + len) <= vmm->vm_start)
+		if (check_heap_stack_gap(vmm, addr, len))
 			return addr;
 		addr = ALIGN(vmm->vm_end, HPAGE_SIZE);
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/ia64/mm/init.c linux-3.3.8-pax/arch/ia64/mm/init.c
--- linux-3.3.8/arch/ia64/mm/init.c	2012-03-19 10:38:51.072050292 +0100
+++ linux-3.3.8-pax/arch/ia64/mm/init.c	2012-03-19 10:43:42.928034710 +0100
@@ -121,6 +121,19 @@ ia64_init_addr_space (void)
 		vma->vm_start = current->thread.rbs_bot & PAGE_MASK;
 		vma->vm_end = vma->vm_start + PAGE_SIZE;
 		vma->vm_flags = VM_DATA_DEFAULT_FLAGS|VM_GROWSUP|VM_ACCOUNT;
+
+#ifdef CONFIG_PAX_PAGEEXEC
+		if (current->mm->pax_flags & MF_PAX_PAGEEXEC) {
+			vma->vm_flags &= ~VM_EXEC;
+
+#ifdef CONFIG_PAX_MPROTECT
+			if (current->mm->pax_flags & MF_PAX_MPROTECT)
+				vma->vm_flags &= ~VM_MAYEXEC;
+#endif
+
+		}
+#endif
+
 		vma->vm_page_prot = vm_get_page_prot(vma->vm_flags);
 		down_write(&current->mm->mmap_sem);
 		if (insert_vm_struct(current->mm, vma)) {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/m32r/lib/usercopy.c linux-3.3.8-pax/arch/m32r/lib/usercopy.c
--- linux-3.3.8/arch/m32r/lib/usercopy.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/m32r/lib/usercopy.c	2012-03-19 10:43:42.928034710 +0100
@@ -14,6 +14,9 @@
 unsigned long
 __generic_copy_to_user(void __user *to, const void *from, unsigned long n)
 {
+	if ((long)n < 0)
+		return n;
+
 	prefetch(from);
 	if (access_ok(VERIFY_WRITE, to, n))
 		__copy_user(to,from,n);
@@ -23,6 +26,9 @@ __generic_copy_to_user(void __user *to,
 unsigned long
 __generic_copy_from_user(void *to, const void __user *from, unsigned long n)
 {
+	if ((long)n < 0)
+		return n;
+
 	prefetchw(to);
 	if (access_ok(VERIFY_READ, from, n))
 		__copy_user_zeroing(to,from,n);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/mips/include/asm/atomic.h linux-3.3.8-pax/arch/mips/include/asm/atomic.h
--- linux-3.3.8/arch/mips/include/asm/atomic.h	2011-10-24 12:48:24.075091892 +0200
+++ linux-3.3.8-pax/arch/mips/include/asm/atomic.h	2012-03-19 10:43:42.932034780 +0100
@@ -21,6 +21,10 @@
 #include <asm/war.h>
 #include <asm/system.h>
 
+#ifdef CONFIG_GENERIC_ATOMIC64
+#include <asm-generic/atomic64.h>
+#endif
+
 #define ATOMIC_INIT(i)    { (i) }
 
 /*
@@ -765,6 +769,16 @@ static __inline__ int atomic64_add_unles
  */
 #define atomic64_add_negative(i, v) (atomic64_add_return(i, (v)) < 0)
 
+#define atomic64_read_unchecked(v)		atomic64_read(v)
+#define atomic64_set_unchecked(v, i)		atomic64_set((v), (i))
+#define atomic64_add_unchecked(a, v)		atomic64_add((a), (v))
+#define atomic64_add_return_unchecked(a, v)	atomic64_add_return((a), (v))
+#define atomic64_sub_unchecked(a, v)		atomic64_sub((a), (v))
+#define atomic64_inc_unchecked(v)		atomic64_inc(v)
+#define atomic64_inc_return_unchecked(v)	atomic64_inc_return(v)
+#define atomic64_dec_unchecked(v)		atomic64_dec(v)
+#define atomic64_cmpxchg_unchecked(v, o, n)	atomic64_cmpxchg((v), (o), (n))
+
 #endif /* CONFIG_64BIT */
 
 /*
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/mips/include/asm/elf.h linux-3.3.8-pax/arch/mips/include/asm/elf.h
--- linux-3.3.8/arch/mips/include/asm/elf.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/mips/include/asm/elf.h	2012-03-19 10:43:42.932034780 +0100
@@ -372,13 +372,16 @@ extern const char *__elf_platform;
 #define ELF_ET_DYN_BASE         (TASK_SIZE / 3 * 2)
 #endif
 
+#ifdef CONFIG_PAX_ASLR
+#define PAX_ELF_ET_DYN_BASE	(TASK_IS_32BIT_ADDR ? 0x00400000UL : 0x00400000UL)
+
+#define PAX_DELTA_MMAP_LEN	(TASK_IS_32BIT_ADDR ? 27-PAGE_SHIFT : 36-PAGE_SHIFT)
+#define PAX_DELTA_STACK_LEN	(TASK_IS_32BIT_ADDR ? 27-PAGE_SHIFT : 36-PAGE_SHIFT)
+#endif
+
 #define ARCH_HAS_SETUP_ADDITIONAL_PAGES 1
 struct linux_binprm;
 extern int arch_setup_additional_pages(struct linux_binprm *bprm,
 				       int uses_interp);
 
-struct mm_struct;
-extern unsigned long arch_randomize_brk(struct mm_struct *mm);
-#define arch_randomize_brk arch_randomize_brk
-
 #endif /* _ASM_ELF_H */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/mips/include/asm/page.h linux-3.3.8-pax/arch/mips/include/asm/page.h
--- linux-3.3.8/arch/mips/include/asm/page.h	2012-03-19 10:38:52.780050198 +0100
+++ linux-3.3.8-pax/arch/mips/include/asm/page.h	2012-03-19 10:43:42.932034780 +0100
@@ -98,7 +98,7 @@ extern void copy_user_highpage(struct pa
   #ifdef CONFIG_CPU_MIPS32
     typedef struct { unsigned long pte_low, pte_high; } pte_t;
     #define pte_val(x)    ((x).pte_low | ((unsigned long long)(x).pte_high << 32))
-    #define __pte(x)      ({ pte_t __pte = {(x), ((unsigned long long)(x)) >> 32}; __pte; })
+    #define __pte(x)      ({ pte_t __pte = {(x), (x) >> 32}; __pte; })
   #else
      typedef struct { unsigned long long pte; } pte_t;
      #define pte_val(x)	((x).pte)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/mips/include/asm/pgalloc.h linux-3.3.8-pax/arch/mips/include/asm/pgalloc.h
--- linux-3.3.8/arch/mips/include/asm/pgalloc.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/mips/include/asm/pgalloc.h	2012-05-07 17:18:29.712212987 +0200
@@ -37,6 +37,11 @@ static inline void pud_populate(struct m
 {
 	set_pud(pud, __pud((unsigned long)pmd));
 }
+
+static inline void pud_populate_kernel(struct mm_struct *mm, pud_t *pud, pmd_t *pmd)
+{
+	pud_populate(mm, pud, pmd);
+}
 #endif
 
 /*
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/mips/include/asm/system.h linux-3.3.8-pax/arch/mips/include/asm/system.h
--- linux-3.3.8/arch/mips/include/asm/system.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/mips/include/asm/system.h	2012-03-19 10:43:42.932034780 +0100
@@ -230,6 +230,6 @@ extern void per_cpu_trap_init(void);
  */
 #define __ARCH_WANT_UNLOCKED_CTXSW
 
-extern unsigned long arch_align_stack(unsigned long sp);
+#define arch_align_stack(x) ((x) & ~0xfUL)
 
 #endif /* _ASM_SYSTEM_H */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/mips/kernel/binfmt_elfn32.c linux-3.3.8-pax/arch/mips/kernel/binfmt_elfn32.c
--- linux-3.3.8/arch/mips/kernel/binfmt_elfn32.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/mips/kernel/binfmt_elfn32.c	2012-03-19 10:43:42.940034779 +0100
@@ -50,6 +50,13 @@ typedef elf_fpreg_t elf_fpregset_t[ELF_N
 #undef ELF_ET_DYN_BASE
 #define ELF_ET_DYN_BASE         (TASK32_SIZE / 3 * 2)
 
+#ifdef CONFIG_PAX_ASLR
+#define PAX_ELF_ET_DYN_BASE	(TASK_IS_32BIT_ADDR ? 0x00400000UL : 0x00400000UL)
+
+#define PAX_DELTA_MMAP_LEN	(TASK_IS_32BIT_ADDR ? 27-PAGE_SHIFT : 36-PAGE_SHIFT)
+#define PAX_DELTA_STACK_LEN	(TASK_IS_32BIT_ADDR ? 27-PAGE_SHIFT : 36-PAGE_SHIFT)
+#endif
+
 #include <asm/processor.h>
 #include <linux/module.h>
 #include <linux/elfcore.h>
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/mips/kernel/binfmt_elfo32.c linux-3.3.8-pax/arch/mips/kernel/binfmt_elfo32.c
--- linux-3.3.8/arch/mips/kernel/binfmt_elfo32.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/mips/kernel/binfmt_elfo32.c	2012-03-19 10:43:42.940034779 +0100
@@ -52,6 +52,13 @@ typedef elf_fpreg_t elf_fpregset_t[ELF_N
 #undef ELF_ET_DYN_BASE
 #define ELF_ET_DYN_BASE         (TASK32_SIZE / 3 * 2)
 
+#ifdef CONFIG_PAX_ASLR
+#define PAX_ELF_ET_DYN_BASE	(TASK_IS_32BIT_ADDR ? 0x00400000UL : 0x00400000UL)
+
+#define PAX_DELTA_MMAP_LEN	(TASK_IS_32BIT_ADDR ? 27-PAGE_SHIFT : 36-PAGE_SHIFT)
+#define PAX_DELTA_STACK_LEN	(TASK_IS_32BIT_ADDR ? 27-PAGE_SHIFT : 36-PAGE_SHIFT)
+#endif
+
 #include <asm/processor.h>
 
 /*
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/mips/kernel/process.c linux-3.3.8-pax/arch/mips/kernel/process.c
--- linux-3.3.8/arch/mips/kernel/process.c	2012-03-19 10:38:52.932050191 +0100
+++ linux-3.3.8-pax/arch/mips/kernel/process.c	2012-03-19 10:43:42.940034779 +0100
@@ -483,15 +483,3 @@ unsigned long get_wchan(struct task_stru
 out:
 	return pc;
 }
-
-/*
- * Don't forget that the stack pointer must be aligned on a 8 bytes
- * boundary for 32-bits ABI and 16 bytes for 64-bits ABI.
- */
-unsigned long arch_align_stack(unsigned long sp)
-{
-	if (!(current->personality & ADDR_NO_RANDOMIZE) && randomize_va_space)
-		sp -= get_random_int() & ~PAGE_MASK;
-
-	return sp & ALMASK;
-}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/mips/mm/fault.c linux-3.3.8-pax/arch/mips/mm/fault.c
--- linux-3.3.8/arch/mips/mm/fault.c	2012-03-19 10:38:53.060050184 +0100
+++ linux-3.3.8-pax/arch/mips/mm/fault.c	2012-03-19 10:43:42.940034779 +0100
@@ -28,6 +28,23 @@
 #include <asm/highmem.h>		/* For VMALLOC_END */
 #include <linux/kdebug.h>
 
+#ifdef CONFIG_PAX_PAGEEXEC
+void pax_report_insns(struct pt_regs *regs, void *pc, void *sp)
+{
+	unsigned long i;
+
+	printk(KERN_ERR "PAX: bytes at PC: ");
+	for (i = 0; i < 5; i++) {
+		unsigned int c;
+		if (get_user(c, (unsigned int *)pc+i))
+			printk(KERN_CONT "???????? ");
+		else
+			printk(KERN_CONT "%08x ", c);
+	}
+	printk("\n");
+}
+#endif
+
 /*
  * This routine handles page faults.  It determines the address,
  * and the problem, and then passes it off to one of the appropriate
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/mips/mm/mmap.c linux-3.3.8-pax/arch/mips/mm/mmap.c
--- linux-3.3.8/arch/mips/mm/mmap.c	2011-10-24 12:48:24.319091873 +0200
+++ linux-3.3.8-pax/arch/mips/mm/mmap.c	2012-03-19 10:43:42.940034780 +0100
@@ -95,6 +95,11 @@ static unsigned long arch_get_unmapped_a
 		do_color_align = 1;
 
 	/* requesting a specific address */
+
+#ifdef CONFIG_PAX_RANDMMAP
+	if (!(current->mm->pax_flags & MF_PAX_RANDMMAP))
+#endif
+
 	if (addr) {
 		if (do_color_align)
 			addr = COLOUR_ALIGN(addr, pgoff);
@@ -102,8 +107,7 @@ static unsigned long arch_get_unmapped_a
 			addr = PAGE_ALIGN(addr);
 
 		vma = find_vma(mm, addr);
-		if (TASK_SIZE - len >= addr &&
-		    (!vma || addr + len <= vma->vm_start))
+		if (TASK_SIZE - len >= addr && check_heap_stack_gap(vmm, addr, len))
 			return addr;
 	}
 
@@ -118,7 +122,7 @@ static unsigned long arch_get_unmapped_a
 			/* At this point:  (!vma || addr < vma->vm_end). */
 			if (TASK_SIZE - len < addr)
 				return -ENOMEM;
-			if (!vma || addr + len <= vma->vm_start)
+			if (check_heap_stack_gap(vmm, addr, len))
 				return addr;
 			addr = vma->vm_end;
 			if (do_color_align)
@@ -145,7 +149,7 @@ static unsigned long arch_get_unmapped_a
 		/* make sure it can fit in the remaining address space */
 		if (likely(addr > len)) {
 			vma = find_vma(mm, addr - len);
-			if (!vma || addr <= vma->vm_start) {
+			if (check_heap_stack_gap(vmm, addr - len, len))
 				/* cache the address as a hint for next time */
 				return mm->free_area_cache = addr - len;
 			}
@@ -165,7 +169,7 @@ static unsigned long arch_get_unmapped_a
 			 * return with success:
 			 */
 			vma = find_vma(mm, addr);
-			if (likely(!vma || addr + len <= vma->vm_start)) {
+			if (check_heap_stack_gap(vmm, addr, len)) {
 				/* cache the address as a hint for next time */
 				return mm->free_area_cache = addr;
 			}
@@ -242,30 +246,3 @@ void arch_pick_mmap_layout(struct mm_str
 		mm->unmap_area = arch_unmap_area_topdown;
 	}
 }
-
-static inline unsigned long brk_rnd(void)
-{
-	unsigned long rnd = get_random_int();
-
-	rnd = rnd << PAGE_SHIFT;
-	/* 8MB for 32bit, 256MB for 64bit */
-	if (TASK_IS_32BIT_ADDR)
-		rnd = rnd & 0x7ffffful;
-	else
-		rnd = rnd & 0xffffffful;
-
-	return rnd;
-}
-
-unsigned long arch_randomize_brk(struct mm_struct *mm)
-{
-	unsigned long base = mm->brk;
-	unsigned long ret;
-
-	ret = PAGE_ALIGN(base + brk_rnd());
-
-	if (ret < mm->brk)
-		return mm->brk;
-
-	return ret;
-}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/parisc/include/asm/atomic.h linux-3.3.8-pax/arch/parisc/include/asm/atomic.h
--- linux-3.3.8/arch/parisc/include/asm/atomic.h	2011-10-24 12:48:24.543091861 +0200
+++ linux-3.3.8-pax/arch/parisc/include/asm/atomic.h	2012-03-19 10:43:42.940034780 +0100
@@ -335,6 +335,16 @@ static __inline__ int atomic64_add_unles
 
 #define atomic64_inc_not_zero(v) atomic64_add_unless((v), 1, 0)
 
+#define atomic64_read_unchecked(v)		atomic64_read(v)
+#define atomic64_set_unchecked(v, i)		atomic64_set((v), (i))
+#define atomic64_add_unchecked(a, v)		atomic64_add((a), (v))
+#define atomic64_add_return_unchecked(a, v)	atomic64_add_return((a), (v))
+#define atomic64_sub_unchecked(a, v)		atomic64_sub((a), (v))
+#define atomic64_inc_unchecked(v)		atomic64_inc(v)
+#define atomic64_inc_return_unchecked(v)	atomic64_inc_return(v)
+#define atomic64_dec_unchecked(v)		atomic64_dec(v)
+#define atomic64_cmpxchg_unchecked(v, o, n)	atomic64_cmpxchg((v), (o), (n))
+
 #endif /* !CONFIG_64BIT */
 
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/parisc/include/asm/elf.h linux-3.3.8-pax/arch/parisc/include/asm/elf.h
--- linux-3.3.8/arch/parisc/include/asm/elf.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/parisc/include/asm/elf.h	2012-03-19 10:43:42.940034780 +0100
@@ -342,6 +342,13 @@ struct pt_regs;	/* forward declaration..
 
 #define ELF_ET_DYN_BASE         (TASK_UNMAPPED_BASE + 0x01000000)
 
+#ifdef CONFIG_PAX_ASLR
+#define PAX_ELF_ET_DYN_BASE	0x10000UL
+
+#define PAX_DELTA_MMAP_LEN	16
+#define PAX_DELTA_STACK_LEN	16
+#endif
+
 /* This yields a mask that user programs can use to figure out what
    instruction set this CPU supports.  This could be done in user space,
    but it's not easy, and we've already done it here.  */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/parisc/include/asm/pgalloc.h linux-3.3.8-pax/arch/parisc/include/asm/pgalloc.h
--- linux-3.3.8/arch/parisc/include/asm/pgalloc.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/parisc/include/asm/pgalloc.h	2012-05-07 17:11:06.140236670 +0200
@@ -61,6 +61,11 @@ static inline void pgd_populate(struct m
 		        (__u32)(__pa((unsigned long)pmd) >> PxD_VALUE_SHIFT));
 }
 
+static inline void pgd_populate_kernel(struct mm_struct *mm, pgd_t *pgd, pmd_t *pmd)
+{
+	pgd_populate(mm, pgd, pmd);
+}
+
 static inline pmd_t *pmd_alloc_one(struct mm_struct *mm, unsigned long address)
 {
 	pmd_t *pmd = (pmd_t *)__get_free_pages(GFP_KERNEL|__GFP_REPEAT,
@@ -93,6 +98,7 @@ static inline void pmd_free(struct mm_st
 #define pmd_alloc_one(mm, addr)		({ BUG(); ((pmd_t *)2); })
 #define pmd_free(mm, x)			do { } while (0)
 #define pgd_populate(mm, pmd, pte)	BUG()
+#define pgd_populate_kernel(mm, pmd, pte)	BUG()
 
 #endif
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/parisc/include/asm/pgtable.h linux-3.3.8-pax/arch/parisc/include/asm/pgtable.h
--- linux-3.3.8/arch/parisc/include/asm/pgtable.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/parisc/include/asm/pgtable.h	2012-03-19 10:43:42.940034780 +0100
@@ -210,6 +210,17 @@ struct vm_area_struct;
 #define PAGE_EXECREAD   __pgprot(_PAGE_PRESENT | _PAGE_USER | _PAGE_READ | _PAGE_EXEC |_PAGE_ACCESSED)
 #define PAGE_COPY       PAGE_EXECREAD
 #define PAGE_RWX        __pgprot(_PAGE_PRESENT | _PAGE_USER | _PAGE_READ | _PAGE_WRITE | _PAGE_EXEC |_PAGE_ACCESSED)
+
+#ifdef CONFIG_PAX_PAGEEXEC
+# define PAGE_SHARED_NOEXEC	__pgprot(_PAGE_PRESENT | _PAGE_USER | _PAGE_READ | _PAGE_WRITE | _PAGE_ACCESSED)
+# define PAGE_COPY_NOEXEC	__pgprot(_PAGE_PRESENT | _PAGE_USER | _PAGE_READ | _PAGE_ACCESSED)
+# define PAGE_READONLY_NOEXEC	__pgprot(_PAGE_PRESENT | _PAGE_USER | _PAGE_READ | _PAGE_ACCESSED)
+#else
+# define PAGE_SHARED_NOEXEC	PAGE_SHARED
+# define PAGE_COPY_NOEXEC	PAGE_COPY
+# define PAGE_READONLY_NOEXEC	PAGE_READONLY
+#endif
+
 #define PAGE_KERNEL	__pgprot(_PAGE_KERNEL)
 #define PAGE_KERNEL_EXEC	__pgprot(_PAGE_KERNEL_EXEC)
 #define PAGE_KERNEL_RWX	__pgprot(_PAGE_KERNEL_RWX)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/parisc/kernel/module.c linux-3.3.8-pax/arch/parisc/kernel/module.c
--- linux-3.3.8/arch/parisc/kernel/module.c	2011-10-24 12:48:24.567091865 +0200
+++ linux-3.3.8-pax/arch/parisc/kernel/module.c	2012-03-19 10:43:42.948034690 +0100
@@ -98,16 +98,38 @@
 
 /* three functions to determine where in the module core
  * or init pieces the location is */
+static inline int in_init_rx(struct module *me, void *loc)
+{
+	return (loc >= me->module_init_rx &&
+		loc < (me->module_init_rx + me->init_size_rx));
+}
+
+static inline int in_init_rw(struct module *me, void *loc)
+{
+	return (loc >= me->module_init_rw &&
+		loc < (me->module_init_rw + me->init_size_rw));
+}
+
 static inline int in_init(struct module *me, void *loc)
 {
-	return (loc >= me->module_init &&
-		loc <= (me->module_init + me->init_size));
+	return in_init_rx(me, loc) || in_init_rw(me, loc);
+}
+
+static inline int in_core_rx(struct module *me, void *loc)
+{
+	return (loc >= me->module_core_rx &&
+		loc < (me->module_core_rx + me->core_size_rx));
+}
+
+static inline int in_core_rw(struct module *me, void *loc)
+{
+	return (loc >= me->module_core_rw &&
+		loc < (me->module_core_rw + me->core_size_rw));
 }
 
 static inline int in_core(struct module *me, void *loc)
 {
-	return (loc >= me->module_core &&
-		loc <= (me->module_core + me->core_size));
+	return in_core_rx(me, loc) || in_core_rw(me, loc);
 }
 
 static inline int in_local(struct module *me, void *loc)
@@ -373,13 +395,13 @@ int module_frob_arch_sections(CONST Elf_
 	}
 
 	/* align things a bit */
-	me->core_size = ALIGN(me->core_size, 16);
-	me->arch.got_offset = me->core_size;
-	me->core_size += gots * sizeof(struct got_entry);
-
-	me->core_size = ALIGN(me->core_size, 16);
-	me->arch.fdesc_offset = me->core_size;
-	me->core_size += fdescs * sizeof(Elf_Fdesc);
+	me->core_size_rw = ALIGN(me->core_size_rw, 16);
+	me->arch.got_offset = me->core_size_rw;
+	me->core_size_rw += gots * sizeof(struct got_entry);
+
+	me->core_size_rw = ALIGN(me->core_size_rw, 16);
+	me->arch.fdesc_offset = me->core_size_rw;
+	me->core_size_rw += fdescs * sizeof(Elf_Fdesc);
 
 	me->arch.got_max = gots;
 	me->arch.fdesc_max = fdescs;
@@ -397,7 +419,7 @@ static Elf64_Word get_got(struct module
 
 	BUG_ON(value == 0);
 
-	got = me->module_core + me->arch.got_offset;
+	got = me->module_core_rw + me->arch.got_offset;
 	for (i = 0; got[i].addr; i++)
 		if (got[i].addr == value)
 			goto out;
@@ -415,7 +437,7 @@ static Elf64_Word get_got(struct module
 #ifdef CONFIG_64BIT
 static Elf_Addr get_fdesc(struct module *me, unsigned long value)
 {
-	Elf_Fdesc *fdesc = me->module_core + me->arch.fdesc_offset;
+	Elf_Fdesc *fdesc = me->module_core_rw + me->arch.fdesc_offset;
 
 	if (!value) {
 		printk(KERN_ERR "%s: zero OPD requested!\n", me->name);
@@ -433,7 +455,7 @@ static Elf_Addr get_fdesc(struct module
 
 	/* Create new one */
 	fdesc->addr = value;
-	fdesc->gp = (Elf_Addr)me->module_core + me->arch.got_offset;
+	fdesc->gp = (Elf_Addr)me->module_core_rw + me->arch.got_offset;
 	return (Elf_Addr)fdesc;
 }
 #endif /* CONFIG_64BIT */
@@ -845,7 +867,7 @@ register_unwind_table(struct module *me,
 
 	table = (unsigned char *)sechdrs[me->arch.unwind_section].sh_addr;
 	end = table + sechdrs[me->arch.unwind_section].sh_size;
-	gp = (Elf_Addr)me->module_core + me->arch.got_offset;
+	gp = (Elf_Addr)me->module_core_rw + me->arch.got_offset;
 
 	DEBUGP("register_unwind_table(), sect = %d at 0x%p - 0x%p (gp=0x%lx)\n",
 	       me->arch.unwind_section, table, end, gp);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/parisc/kernel/sys_parisc.c linux-3.3.8-pax/arch/parisc/kernel/sys_parisc.c
--- linux-3.3.8/arch/parisc/kernel/sys_parisc.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/parisc/kernel/sys_parisc.c	2012-03-19 10:43:42.952034645 +0100
@@ -43,7 +43,7 @@ static unsigned long get_unshared_area(u
 		/* At this point:  (!vma || addr < vma->vm_end). */
 		if (TASK_SIZE - len < addr)
 			return -ENOMEM;
-		if (!vma || addr + len <= vma->vm_start)
+		if (check_heap_stack_gap(vma, addr, len))
 			return addr;
 		addr = vma->vm_end;
 	}
@@ -79,7 +79,7 @@ static unsigned long get_shared_area(str
 		/* At this point:  (!vma || addr < vma->vm_end). */
 		if (TASK_SIZE - len < addr)
 			return -ENOMEM;
-		if (!vma || addr + len <= vma->vm_start)
+		if (check_heap_stack_gap(vma, addr, len))
 			return addr;
 		addr = DCACHE_ALIGN(vma->vm_end - offset) + offset;
 		if (addr < vma->vm_end) /* handle wraparound */
@@ -98,7 +98,7 @@ unsigned long arch_get_unmapped_area(str
 	if (flags & MAP_FIXED)
 		return addr;
 	if (!addr)
-		addr = TASK_UNMAPPED_BASE;
+		addr = current->mm->mmap_base;
 
 	if (filp) {
 		addr = get_shared_area(filp->f_mapping, addr, len, pgoff);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/parisc/kernel/traps.c linux-3.3.8-pax/arch/parisc/kernel/traps.c
--- linux-3.3.8/arch/parisc/kernel/traps.c	2011-10-24 12:48:24.571091862 +0200
+++ linux-3.3.8-pax/arch/parisc/kernel/traps.c	2012-03-19 10:43:42.956034662 +0100
@@ -733,9 +733,7 @@ void notrace handle_interruption(int cod
 
 			down_read(&current->mm->mmap_sem);
 			vma = find_vma(current->mm,regs->iaoq[0]);
-			if (vma && (regs->iaoq[0] >= vma->vm_start)
-				&& (vma->vm_flags & VM_EXEC)) {
-
+			if (vma && (regs->iaoq[0] >= vma->vm_start)) {
 				fault_address = regs->iaoq[0];
 				fault_space = regs->iasq[0];
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/parisc/mm/fault.c linux-3.3.8-pax/arch/parisc/mm/fault.c
--- linux-3.3.8/arch/parisc/mm/fault.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/parisc/mm/fault.c	2012-03-19 10:43:42.960034714 +0100
@@ -15,6 +15,7 @@
 #include <linux/sched.h>
 #include <linux/interrupt.h>
 #include <linux/module.h>
+#include <linux/unistd.h>
 
 #include <asm/uaccess.h>
 #include <asm/traps.h>
@@ -52,7 +53,7 @@ DEFINE_PER_CPU(struct exception_data, ex
 static unsigned long
 parisc_acctyp(unsigned long code, unsigned int inst)
 {
-	if (code == 6 || code == 16)
+	if (code == 6 || code == 7 || code == 16)
 	    return VM_EXEC;
 
 	switch (inst & 0xf0000000) {
@@ -138,6 +139,116 @@ parisc_acctyp(unsigned long code, unsign
 			}
 #endif
 
+#ifdef CONFIG_PAX_PAGEEXEC
+/*
+ * PaX: decide what to do with offenders (instruction_pointer(regs) = fault address)
+ *
+ * returns 1 when task should be killed
+ *         2 when rt_sigreturn trampoline was detected
+ *         3 when unpatched PLT trampoline was detected
+ */
+static int pax_handle_fetch_fault(struct pt_regs *regs)
+{
+
+#ifdef CONFIG_PAX_EMUPLT
+	int err;
+
+	do { /* PaX: unpatched PLT emulation */
+		unsigned int bl, depwi;
+
+		err = get_user(bl, (unsigned int *)instruction_pointer(regs));
+		err |= get_user(depwi, (unsigned int *)(instruction_pointer(regs)+4));
+
+		if (err)
+			break;
+
+		if (bl == 0xEA9F1FDDU && depwi == 0xD6801C1EU) {
+			unsigned int ldw, bv, ldw2, addr = instruction_pointer(regs)-12;
+
+			err = get_user(ldw, (unsigned int *)addr);
+			err |= get_user(bv, (unsigned int *)(addr+4));
+			err |= get_user(ldw2, (unsigned int *)(addr+8));
+
+			if (err)
+				break;
+
+			if (ldw == 0x0E801096U &&
+			    bv == 0xEAC0C000U &&
+			    ldw2 == 0x0E881095U)
+			{
+				unsigned int resolver, map;
+
+				err = get_user(resolver, (unsigned int *)(instruction_pointer(regs)+8));
+				err |= get_user(map, (unsigned int *)(instruction_pointer(regs)+12));
+				if (err)
+					break;
+
+				regs->gr[20] = instruction_pointer(regs)+8;
+				regs->gr[21] = map;
+				regs->gr[22] = resolver;
+				regs->iaoq[0] = resolver | 3UL;
+				regs->iaoq[1] = regs->iaoq[0] + 4;
+				return 3;
+			}
+		}
+	} while (0);
+#endif
+
+#ifdef CONFIG_PAX_EMUTRAMP
+
+#ifndef CONFIG_PAX_EMUSIGRT
+	if (!(current->mm->pax_flags & MF_PAX_EMUTRAMP))
+		return 1;
+#endif
+
+	do { /* PaX: rt_sigreturn emulation */
+		unsigned int ldi1, ldi2, bel, nop;
+
+		err = get_user(ldi1, (unsigned int *)instruction_pointer(regs));
+		err |= get_user(ldi2, (unsigned int *)(instruction_pointer(regs)+4));
+		err |= get_user(bel, (unsigned int *)(instruction_pointer(regs)+8));
+		err |= get_user(nop, (unsigned int *)(instruction_pointer(regs)+12));
+
+		if (err)
+			break;
+
+		if ((ldi1 == 0x34190000U || ldi1 == 0x34190002U) &&
+		    ldi2 == 0x3414015AU &&
+		    bel == 0xE4008200U &&
+		    nop == 0x08000240U)
+		{
+			regs->gr[25] = (ldi1 & 2) >> 1;
+			regs->gr[20] = __NR_rt_sigreturn;
+			regs->gr[31] = regs->iaoq[1] + 16;
+			regs->sr[0] = regs->iasq[1];
+			regs->iaoq[0] = 0x100UL;
+			regs->iaoq[1] = regs->iaoq[0] + 4;
+			regs->iasq[0] = regs->sr[2];
+			regs->iasq[1] = regs->sr[2];
+			return 2;
+		}
+	} while (0);
+#endif
+
+	return 1;
+}
+
+void pax_report_insns(struct pt_regs *regs, void *pc, void *sp)
+{
+	unsigned long i;
+
+	printk(KERN_ERR "PAX: bytes at PC: ");
+	for (i = 0; i < 5; i++) {
+		unsigned int c;
+		if (get_user(c, (unsigned int *)pc+i))
+			printk(KERN_CONT "???????? ");
+		else
+			printk(KERN_CONT "%08x ", c);
+	}
+	printk("\n");
+}
+#endif
+
 int fixup_exception(struct pt_regs *regs)
 {
 	const struct exception_table_entry *fix;
@@ -192,8 +303,33 @@ good_area:
 
 	acc_type = parisc_acctyp(code,regs->iir);
 
-	if ((vma->vm_flags & acc_type) != acc_type)
+	if ((vma->vm_flags & acc_type) != acc_type) {
+
+#ifdef CONFIG_PAX_PAGEEXEC
+		if ((mm->pax_flags & MF_PAX_PAGEEXEC) && (acc_type & VM_EXEC) &&
+		    (address & ~3UL) == instruction_pointer(regs))
+		{
+			up_read(&mm->mmap_sem);
+			switch (pax_handle_fetch_fault(regs)) {
+
+#ifdef CONFIG_PAX_EMUPLT
+			case 3:
+				return;
+#endif
+
+#ifdef CONFIG_PAX_EMUTRAMP
+			case 2:
+				return;
+#endif
+
+			}
+			pax_report_fault(regs, (void *)instruction_pointer(regs), (void *)regs->gr[30]);
+			do_group_exit(SIGKILL);
+		}
+#endif
+
 		goto bad_area;
+	}
 
 	/*
 	 * If for any reason at all we couldn't handle the fault, make
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/powerpc/include/asm/atomic.h linux-3.3.8-pax/arch/powerpc/include/asm/atomic.h
--- linux-3.3.8/arch/powerpc/include/asm/atomic.h	2012-01-08 19:47:44.763473239 +0100
+++ linux-3.3.8-pax/arch/powerpc/include/asm/atomic.h	2012-03-19 10:43:42.960034714 +0100
@@ -469,6 +469,16 @@ static __inline__ int atomic64_add_unles
 
 #define atomic64_inc_not_zero(v) atomic64_add_unless((v), 1, 0)
 
+#define atomic64_read_unchecked(v)		atomic64_read(v)
+#define atomic64_set_unchecked(v, i)		atomic64_set((v), (i))
+#define atomic64_add_unchecked(a, v)		atomic64_add((a), (v))
+#define atomic64_add_return_unchecked(a, v)	atomic64_add_return((a), (v))
+#define atomic64_sub_unchecked(a, v)		atomic64_sub((a), (v))
+#define atomic64_inc_unchecked(v)		atomic64_inc(v)
+#define atomic64_inc_return_unchecked(v)	atomic64_inc_return(v)
+#define atomic64_dec_unchecked(v)		atomic64_dec(v)
+#define atomic64_cmpxchg_unchecked(v, o, n)	atomic64_cmpxchg((v), (o), (n))
+
 #endif /* __powerpc64__ */
 
 #endif /* __KERNEL__ */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/powerpc/include/asm/elf.h linux-3.3.8-pax/arch/powerpc/include/asm/elf.h
--- linux-3.3.8/arch/powerpc/include/asm/elf.h	2011-10-24 12:48:24.695091853 +0200
+++ linux-3.3.8-pax/arch/powerpc/include/asm/elf.h	2012-03-19 10:43:42.964034748 +0100
@@ -178,8 +178,19 @@ typedef elf_fpreg_t elf_vsrreghalf_t32[E
    the loader.  We need to make sure that it is out of the way of the program
    that it will "exec", and that there is sufficient room for the brk.  */
 
-extern unsigned long randomize_et_dyn(unsigned long base);
-#define ELF_ET_DYN_BASE		(randomize_et_dyn(0x20000000))
+#define ELF_ET_DYN_BASE		(0x20000000)
+
+#ifdef CONFIG_PAX_ASLR
+#define PAX_ELF_ET_DYN_BASE	(0x10000000UL)
+
+#ifdef __powerpc64__
+#define PAX_DELTA_MMAP_LEN	(is_32bit_task() ? 16 : 28)
+#define PAX_DELTA_STACK_LEN	(is_32bit_task() ? 16 : 28)
+#else
+#define PAX_DELTA_MMAP_LEN	15
+#define PAX_DELTA_STACK_LEN	15
+#endif
+#endif
 
 /*
  * Our registers are always unsigned longs, whether we're a 32 bit
@@ -274,9 +285,6 @@ extern int arch_setup_additional_pages(s
 	(0x7ff >> (PAGE_SHIFT - 12)) : \
 	(0x3ffff >> (PAGE_SHIFT - 12)))
 
-extern unsigned long arch_randomize_brk(struct mm_struct *mm);
-#define arch_randomize_brk arch_randomize_brk
-
 #endif /* __KERNEL__ */
 
 /*
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/powerpc/include/asm/kmap_types.h linux-3.3.8-pax/arch/powerpc/include/asm/kmap_types.h
--- linux-3.3.8/arch/powerpc/include/asm/kmap_types.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/powerpc/include/asm/kmap_types.h	2012-03-19 10:43:42.964034748 +0100
@@ -27,6 +27,7 @@ enum km_type {
 	KM_PPC_SYNC_PAGE,
 	KM_PPC_SYNC_ICACHE,
 	KM_KDB,
+	KM_CLEARPAGE,
 	KM_TYPE_NR
 };
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/powerpc/include/asm/mman.h linux-3.3.8-pax/arch/powerpc/include/asm/mman.h
--- linux-3.3.8/arch/powerpc/include/asm/mman.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/powerpc/include/asm/mman.h	2012-03-19 10:43:42.964034748 +0100
@@ -44,7 +44,7 @@ static inline unsigned long arch_calc_vm
 }
 #define arch_calc_vm_prot_bits(prot) arch_calc_vm_prot_bits(prot)
 
-static inline pgprot_t arch_vm_get_page_prot(unsigned long vm_flags)
+static inline pgprot_t arch_vm_get_page_prot(vm_flags_t vm_flags)
 {
 	return (vm_flags & VM_SAO) ? __pgprot(_PAGE_SAO) : __pgprot(0);
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/powerpc/include/asm/page_64.h linux-3.3.8-pax/arch/powerpc/include/asm/page_64.h
--- linux-3.3.8/arch/powerpc/include/asm/page_64.h	2012-03-19 10:38:54.240050122 +0100
+++ linux-3.3.8-pax/arch/powerpc/include/asm/page_64.h	2012-03-19 10:43:42.964034748 +0100
@@ -146,15 +146,18 @@ do {						\
  * stack by default, so in the absence of a PT_GNU_STACK program header
  * we turn execute permission off.
  */
-#define VM_STACK_DEFAULT_FLAGS32	(VM_READ | VM_WRITE | VM_EXEC | \
-					 VM_MAYREAD | VM_MAYWRITE | VM_MAYEXEC)
+#define VM_STACK_DEFAULT_FLAGS32 \
+	(((current->personality & READ_IMPLIES_EXEC) ? VM_EXEC : 0) | \
+	 VM_READ | VM_WRITE | VM_MAYREAD | VM_MAYWRITE | VM_MAYEXEC)
 
 #define VM_STACK_DEFAULT_FLAGS64	(VM_READ | VM_WRITE | \
 					 VM_MAYREAD | VM_MAYWRITE | VM_MAYEXEC)
 
+#ifndef CONFIG_PAX_PAGEEXEC
 #define VM_STACK_DEFAULT_FLAGS \
 	(is_32bit_task() ? \
 	 VM_STACK_DEFAULT_FLAGS32 : VM_STACK_DEFAULT_FLAGS64)
+#endif
 
 #include <asm-generic/getorder.h>
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/powerpc/include/asm/page.h linux-3.3.8-pax/arch/powerpc/include/asm/page.h
--- linux-3.3.8/arch/powerpc/include/asm/page.h	2012-03-19 10:38:54.236050122 +0100
+++ linux-3.3.8-pax/arch/powerpc/include/asm/page.h	2012-03-19 10:43:42.972034746 +0100
@@ -220,8 +220,9 @@ extern long long virt_phys_offset;
  * and needs to be executable.  This means the whole heap ends
  * up being executable.
  */
-#define VM_DATA_DEFAULT_FLAGS32	(VM_READ | VM_WRITE | VM_EXEC | \
-				 VM_MAYREAD | VM_MAYWRITE | VM_MAYEXEC)
+#define VM_DATA_DEFAULT_FLAGS32 \
+	(((current->personality & READ_IMPLIES_EXEC) ? VM_EXEC : 0) | \
+	 VM_READ | VM_WRITE | VM_MAYREAD | VM_MAYWRITE | VM_MAYEXEC)
 
 #define VM_DATA_DEFAULT_FLAGS64	(VM_READ | VM_WRITE | \
 				 VM_MAYREAD | VM_MAYWRITE | VM_MAYEXEC)
@@ -249,6 +250,9 @@ extern long long virt_phys_offset;
 #define is_kernel_addr(x)	((x) >= PAGE_OFFSET)
 #endif
 
+#define ktla_ktva(addr)		(addr)
+#define ktva_ktla(addr)		(addr)
+
 /*
  * Use the top bit of the higher-level page table entries to indicate whether
  * the entries we point to contain hugepages.  This works because we know that
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/powerpc/include/asm/pgalloc-64.h linux-3.3.8-pax/arch/powerpc/include/asm/pgalloc-64.h
--- linux-3.3.8/arch/powerpc/include/asm/pgalloc-64.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/powerpc/include/asm/pgalloc-64.h	2012-05-07 17:17:49.324215143 +0200
@@ -50,6 +50,7 @@ static inline void pgd_free(struct mm_st
 #ifndef CONFIG_PPC_64K_PAGES
 
 #define pgd_populate(MM, PGD, PUD)	pgd_set(PGD, PUD)
+#define pgd_populate_kernel(MM, PGD, PUD)	pgd_populate((MM), (PGD), (PUD))
 
 static inline pud_t *pud_alloc_one(struct mm_struct *mm, unsigned long addr)
 {
@@ -67,6 +68,11 @@ static inline void pud_populate(struct m
 	pud_set(pud, (unsigned long)pmd);
 }
 
+static inline void pud_populate_kernel(struct mm_struct *mm, pud_t *pud, pmd_t *pmd)
+{
+	pud_populate(mm, pud, pmd);
+}
+
 #define pmd_populate(mm, pmd, pte_page) \
 	pmd_populate_kernel(mm, pmd, page_address(pte_page))
 #define pmd_populate_kernel(mm, pmd, pte) pmd_set(pmd, (unsigned long)(pte))
@@ -76,6 +82,7 @@ static inline void pud_populate(struct m
 #else /* CONFIG_PPC_64K_PAGES */
 
 #define pud_populate(mm, pud, pmd)	pud_set(pud, (unsigned long)pmd)
+#define pud_populate_kernel(mm, pud, pmd)	pud_populate((mm), (pud), (pmd))
 
 static inline void pmd_populate_kernel(struct mm_struct *mm, pmd_t *pmd,
 				       pte_t *pte)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/powerpc/include/asm/pgtable.h linux-3.3.8-pax/arch/powerpc/include/asm/pgtable.h
--- linux-3.3.8/arch/powerpc/include/asm/pgtable.h	2012-03-19 10:38:54.248050122 +0100
+++ linux-3.3.8-pax/arch/powerpc/include/asm/pgtable.h	2012-03-19 10:43:42.972034746 +0100
@@ -2,6 +2,7 @@
 #define _ASM_POWERPC_PGTABLE_H
 #ifdef __KERNEL__
 
+#include <linux/const.h>
 #ifndef __ASSEMBLY__
 #include <asm/processor.h>		/* For TASK_SIZE */
 #include <asm/mmu.h>
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/powerpc/include/asm/pte-hash32.h linux-3.3.8-pax/arch/powerpc/include/asm/pte-hash32.h
--- linux-3.3.8/arch/powerpc/include/asm/pte-hash32.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/powerpc/include/asm/pte-hash32.h	2012-03-19 10:43:42.972034746 +0100
@@ -21,6 +21,7 @@
 #define _PAGE_FILE	0x004	/* when !present: nonlinear file mapping */
 #define _PAGE_USER	0x004	/* usermode access allowed */
 #define _PAGE_GUARDED	0x008	/* G: prohibit speculative access */
+#define _PAGE_EXEC	_PAGE_GUARDED
 #define _PAGE_COHERENT	0x010	/* M: enforce memory coherence (SMP systems) */
 #define _PAGE_NO_CACHE	0x020	/* I: cache inhibit */
 #define _PAGE_WRITETHRU	0x040	/* W: cache write-through */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/powerpc/include/asm/reg.h linux-3.3.8-pax/arch/powerpc/include/asm/reg.h
--- linux-3.3.8/arch/powerpc/include/asm/reg.h	2012-03-19 10:38:54.272050121 +0100
+++ linux-3.3.8-pax/arch/powerpc/include/asm/reg.h	2012-03-19 10:43:42.972034746 +0100
@@ -212,6 +212,7 @@
 #define SPRN_DBCR	0x136	/* e300 Data Breakpoint Control Reg */
 #define SPRN_DSISR	0x012	/* Data Storage Interrupt Status Register */
 #define   DSISR_NOHPTE		0x40000000	/* no translation found */
+#define   DSISR_GUARDED		0x10000000	/* fetch from guarded storage */
 #define   DSISR_PROTFAULT	0x08000000	/* protection fault */
 #define   DSISR_ISSTORE		0x02000000	/* access was a store */
 #define   DSISR_DABRMATCH	0x00400000	/* hit data breakpoint */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/powerpc/include/asm/system.h linux-3.3.8-pax/arch/powerpc/include/asm/system.h
--- linux-3.3.8/arch/powerpc/include/asm/system.h	2012-03-19 10:38:54.288050120 +0100
+++ linux-3.3.8-pax/arch/powerpc/include/asm/system.h	2012-03-19 10:43:42.972034748 +0100
@@ -539,7 +539,7 @@ __cmpxchg_local(volatile void *ptr, unsi
 #define cmpxchg64_local(ptr, o, n) __cmpxchg64_local_generic((ptr), (o), (n))
 #endif
 
-extern unsigned long arch_align_stack(unsigned long sp);
+#define arch_align_stack(x) ((x) & ~0xfUL)
 
 /* Used in very early kernel initialization. */
 extern unsigned long reloc_offset(void);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/powerpc/include/asm/uaccess.h linux-3.3.8-pax/arch/powerpc/include/asm/uaccess.h
--- linux-3.3.8/arch/powerpc/include/asm/uaccess.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/powerpc/include/asm/uaccess.h	2012-03-19 10:43:42.972034748 +0100
@@ -13,6 +13,8 @@
 #define VERIFY_READ	0
 #define VERIFY_WRITE	1
 
+extern void check_object_size(const void *ptr, unsigned long n, bool to);
+
 /*
  * The fs value determines whether argument validity checking should be
  * performed or not.  If get_fs() == USER_DS, checking is performed, with
@@ -327,52 +329,6 @@ do {								\
 extern unsigned long __copy_tofrom_user(void __user *to,
 		const void __user *from, unsigned long size);
 
-#ifndef __powerpc64__
-
-static inline unsigned long copy_from_user(void *to,
-		const void __user *from, unsigned long n)
-{
-	unsigned long over;
-
-	if (access_ok(VERIFY_READ, from, n))
-		return __copy_tofrom_user((__force void __user *)to, from, n);
-	if ((unsigned long)from < TASK_SIZE) {
-		over = (unsigned long)from + n - TASK_SIZE;
-		return __copy_tofrom_user((__force void __user *)to, from,
-				n - over) + over;
-	}
-	return n;
-}
-
-static inline unsigned long copy_to_user(void __user *to,
-		const void *from, unsigned long n)
-{
-	unsigned long over;
-
-	if (access_ok(VERIFY_WRITE, to, n))
-		return __copy_tofrom_user(to, (__force void __user *)from, n);
-	if ((unsigned long)to < TASK_SIZE) {
-		over = (unsigned long)to + n - TASK_SIZE;
-		return __copy_tofrom_user(to, (__force void __user *)from,
-				n - over) + over;
-	}
-	return n;
-}
-
-#else /* __powerpc64__ */
-
-#define __copy_in_user(to, from, size) \
-	__copy_tofrom_user((to), (from), (size))
-
-extern unsigned long copy_from_user(void *to, const void __user *from,
-				    unsigned long n);
-extern unsigned long copy_to_user(void __user *to, const void *from,
-				  unsigned long n);
-extern unsigned long copy_in_user(void __user *to, const void __user *from,
-				  unsigned long n);
-
-#endif /* __powerpc64__ */
-
 static inline unsigned long __copy_from_user_inatomic(void *to,
 		const void __user *from, unsigned long n)
 {
@@ -396,6 +352,10 @@ static inline unsigned long __copy_from_
 		if (ret == 0)
 			return 0;
 	}
+
+	if (!__builtin_constant_p(n))
+		check_object_size(to, n, false);
+
 	return __copy_tofrom_user((__force void __user *)to, from, n);
 }
 
@@ -422,6 +382,10 @@ static inline unsigned long __copy_to_us
 		if (ret == 0)
 			return 0;
 	}
+
+	if (!__builtin_constant_p(n))
+		check_object_size(from, n, true);
+
 	return __copy_tofrom_user(to, (__force const void __user *)from, n);
 }
 
@@ -439,6 +403,92 @@ static inline unsigned long __copy_to_us
 	return __copy_to_user_inatomic(to, from, size);
 }
 
+#ifndef __powerpc64__
+
+static inline unsigned long __must_check copy_from_user(void *to,
+		const void __user *from, unsigned long n)
+{
+	unsigned long over;
+
+	if ((long)n < 0)
+		return n;
+
+	if (access_ok(VERIFY_READ, from, n)) {
+		if (!__builtin_constant_p(n))
+			check_object_size(to, n, false);
+		return __copy_tofrom_user((__force void __user *)to, from, n);
+	}
+	if ((unsigned long)from < TASK_SIZE) {
+		over = (unsigned long)from + n - TASK_SIZE;
+		if (!__builtin_constant_p(n - over))
+			check_object_size(to, n - over, false);
+		return __copy_tofrom_user((__force void __user *)to, from,
+				n - over) + over;
+	}
+	return n;
+}
+
+static inline unsigned long __must_check copy_to_user(void __user *to,
+		const void *from, unsigned long n)
+{
+	unsigned long over;
+
+	if ((long)n < 0)
+		return n;
+
+	if (access_ok(VERIFY_WRITE, to, n)) {
+		if (!__builtin_constant_p(n))
+			check_object_size(from, n, true);
+		return __copy_tofrom_user(to, (__force void __user *)from, n);
+	}
+	if ((unsigned long)to < TASK_SIZE) {
+		over = (unsigned long)to + n - TASK_SIZE;
+		if (!__builtin_constant_p(n))
+			check_object_size(from, n - over, true);
+		return __copy_tofrom_user(to, (__force void __user *)from,
+				n - over) + over;
+	}
+	return n;
+}
+
+#else /* __powerpc64__ */
+
+#define __copy_in_user(to, from, size) \
+	__copy_tofrom_user((to), (from), (size))
+
+static inline unsigned long __must_check copy_from_user(void *to, const void __user *from, unsigned long n)
+{
+	if ((long)n < 0 || n > INT_MAX)
+		return n;
+
+	if (!__builtin_constant_p(n))
+		check_object_size(to, n, false);
+
+	if (likely(access_ok(VERIFY_READ, from, n)))
+		n = __copy_from_user(to, from, n);
+	else
+		memset(to, 0, n);
+	return n;
+}
+
+static inline unsigned long __must_check copy_to_user(void __user *to, const void *from, unsigned long n)
+{
+	if ((long)n < 0 || n > INT_MAX)
+		return n;
+
+	if (likely(access_ok(VERIFY_WRITE, to, n))) {
+		if (!__builtin_constant_p(n))
+			check_object_size(from, n, true);
+		n = __copy_to_user(to, from, n);
+	}
+	return n;
+}
+
+extern unsigned long copy_in_user(void __user *to, const void __user *from,
+				  unsigned long n);
+
+#endif /* __powerpc64__ */
+
 extern unsigned long __clear_user(void __user *addr, unsigned long size);
 
 static inline unsigned long clear_user(void __user *addr, unsigned long size)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/powerpc/kernel/exceptions-64e.S linux-3.3.8-pax/arch/powerpc/kernel/exceptions-64e.S
--- linux-3.3.8/arch/powerpc/kernel/exceptions-64e.S	2011-10-24 12:48:24.879091844 +0200
+++ linux-3.3.8-pax/arch/powerpc/kernel/exceptions-64e.S	2012-03-19 10:43:42.972034748 +0100
@@ -587,6 +587,7 @@ storage_fault_common:
 	std	r14,_DAR(r1)
 	std	r15,_DSISR(r1)
 	addi	r3,r1,STACK_FRAME_OVERHEAD
+	bl	.save_nvgprs
 	mr	r4,r14
 	mr	r5,r15
 	ld	r14,PACA_EXGEN+EX_R14(r13)
@@ -596,8 +597,7 @@ storage_fault_common:
 	cmpdi	r3,0
 	bne-	1f
 	b	.ret_from_except_lite
-1:	bl	.save_nvgprs
-	mr	r5,r3
+1:	mr	r5,r3
 	addi	r3,r1,STACK_FRAME_OVERHEAD
 	ld	r4,_DAR(r1)
 	bl	.bad_page_fault
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/powerpc/kernel/exceptions-64s.S linux-3.3.8-pax/arch/powerpc/kernel/exceptions-64s.S
--- linux-3.3.8/arch/powerpc/kernel/exceptions-64s.S	2012-03-19 10:38:54.368050115 +0100
+++ linux-3.3.8-pax/arch/powerpc/kernel/exceptions-64s.S	2012-03-19 10:43:42.972034748 +0100
@@ -1004,10 +1004,10 @@ handle_page_fault:
 11:	ld	r4,_DAR(r1)
 	ld	r5,_DSISR(r1)
 	addi	r3,r1,STACK_FRAME_OVERHEAD
+	bl	.save_nvgprs
 	bl	.do_page_fault
 	cmpdi	r3,0
 	beq+	13f
-	bl	.save_nvgprs
 	mr	r5,r3
 	addi	r3,r1,STACK_FRAME_OVERHEAD
 	lwz	r4,_DAR(r1)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/powerpc/kernel/irq.c linux-3.3.8-pax/arch/powerpc/kernel/irq.c
--- linux-3.3.8/arch/powerpc/kernel/irq.c	2012-03-19 10:38:54.384050115 +0100
+++ linux-3.3.8-pax/arch/powerpc/kernel/irq.c	2012-03-19 10:43:42.980034709 +0100
@@ -560,9 +560,6 @@ struct irq_host *irq_alloc_host(struct d
 	host->ops = ops;
 	host->of_node = of_node_get(of_node);
 
-	if (host->ops->match == NULL)
-		host->ops->match = default_irq_host_match;
-
 	raw_spin_lock_irqsave(&irq_big_lock, flags);
 
 	/* If it's a legacy controller, check for duplicates and
@@ -635,7 +632,12 @@ struct irq_host *irq_find_host(struct de
 	 */
 	raw_spin_lock_irqsave(&irq_big_lock, flags);
 	list_for_each_entry(h, &irq_hosts, link)
-		if (h->ops->match(h, node)) {
+		if (h->ops->match) {
+			if (h->ops->match(h, node)) {
+				found = h;
+				break;
+			}
+		} else if (default_irq_host_match(h, node)) {
 			found = h;
 			break;
 		}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/powerpc/kernel/module_32.c linux-3.3.8-pax/arch/powerpc/kernel/module_32.c
--- linux-3.3.8/arch/powerpc/kernel/module_32.c	2011-10-24 12:48:24.903091847 +0200
+++ linux-3.3.8-pax/arch/powerpc/kernel/module_32.c	2012-03-19 10:43:42.980034709 +0100
@@ -162,7 +162,7 @@ int module_frob_arch_sections(Elf32_Ehdr
 			me->arch.core_plt_section = i;
 	}
 	if (!me->arch.core_plt_section || !me->arch.init_plt_section) {
-		printk("Module doesn't contain .plt or .init.plt sections.\n");
+		printk("Module %s doesn't contain .plt or .init.plt sections.\n", me->name);
 		return -ENOEXEC;
 	}
 
@@ -192,11 +192,16 @@ static uint32_t do_plt_call(void *locati
 
 	DEBUGP("Doing plt for call to 0x%x at 0x%x\n", val, (unsigned int)location);
 	/* Init, or core PLT? */
-	if (location >= mod->module_core
-	    && location < mod->module_core + mod->core_size)
+	if ((location >= mod->module_core_rx && location < mod->module_core_rx + mod->core_size_rx) ||
+	    (location >= mod->module_core_rw && location < mod->module_core_rw + mod->core_size_rw))
 		entry = (void *)sechdrs[mod->arch.core_plt_section].sh_addr;
-	else
+	else if ((location >= mod->module_init_rx && location < mod->module_init_rx + mod->init_size_rx) ||
+		 (location >= mod->module_init_rw && location < mod->module_init_rw + mod->init_size_rw))
 		entry = (void *)sechdrs[mod->arch.init_plt_section].sh_addr;
+	else {
+		printk(KERN_ERR "%s: invalid R_PPC_REL24 entry found\n", mod->name);
+		return ~0UL;
+	}
 
 	/* Find this entry, or if that fails, the next avail. entry */
 	while (entry->jump[0]) {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/powerpc/kernel/process.c linux-3.3.8-pax/arch/powerpc/kernel/process.c
--- linux-3.3.8/arch/powerpc/kernel/process.c	2012-03-19 10:38:54.428050110 +0100
+++ linux-3.3.8-pax/arch/powerpc/kernel/process.c	2012-03-19 10:43:42.980034709 +0100
@@ -1279,58 +1279,3 @@ void thread_info_cache_init(void)
 }
 
 #endif /* THREAD_SHIFT < PAGE_SHIFT */
-
-unsigned long arch_align_stack(unsigned long sp)
-{
-	if (!(current->personality & ADDR_NO_RANDOMIZE) && randomize_va_space)
-		sp -= get_random_int() & ~PAGE_MASK;
-	return sp & ~0xf;
-}
-
-static inline unsigned long brk_rnd(void)
-{
-        unsigned long rnd = 0;
-
-	/* 8MB for 32bit, 1GB for 64bit */
-	if (is_32bit_task())
-		rnd = (long)(get_random_int() % (1<<(23-PAGE_SHIFT)));
-	else
-		rnd = (long)(get_random_int() % (1<<(30-PAGE_SHIFT)));
-
-	return rnd << PAGE_SHIFT;
-}
-
-unsigned long arch_randomize_brk(struct mm_struct *mm)
-{
-	unsigned long base = mm->brk;
-	unsigned long ret;
-
-#ifdef CONFIG_PPC_STD_MMU_64
-	/*
-	 * If we are using 1TB segments and we are allowed to randomise
-	 * the heap, we can put it above 1TB so it is backed by a 1TB
-	 * segment. Otherwise the heap will be in the bottom 1TB
-	 * which always uses 256MB segments and this may result in a
-	 * performance penalty.
-	 */
-	if (!is_32bit_task() && (mmu_highuser_ssize == MMU_SEGSIZE_1T))
-		base = max_t(unsigned long, mm->brk, 1UL << SID_SHIFT_1T);
-#endif
-
-	ret = PAGE_ALIGN(base + brk_rnd());
-
-	if (ret < mm->brk)
-		return mm->brk;
-
-	return ret;
-}
-
-unsigned long randomize_et_dyn(unsigned long base)
-{
-	unsigned long ret = PAGE_ALIGN(base + brk_rnd());
-
-	if (ret < base)
-		return base;
-
-	return ret;
-}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/powerpc/kernel/signal_32.c linux-3.3.8-pax/arch/powerpc/kernel/signal_32.c
--- linux-3.3.8/arch/powerpc/kernel/signal_32.c	2012-01-08 19:47:45.243473213 +0100
+++ linux-3.3.8-pax/arch/powerpc/kernel/signal_32.c	2012-03-19 10:43:42.980034705 +0100
@@ -859,7 +859,7 @@ int handle_rt_signal32(unsigned long sig
 	/* Save user registers on the stack */
 	frame = &rt_sf->uc.uc_mcontext;
 	addr = frame;
-	if (vdso32_rt_sigtramp && current->mm->context.vdso_base) {
+	if (vdso32_rt_sigtramp && current->mm->context.vdso_base != ~0UL) {
 		if (save_user_regs(regs, frame, 0, 1))
 			goto badframe;
 		regs->link = current->mm->context.vdso_base + vdso32_rt_sigtramp;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/powerpc/kernel/signal_64.c linux-3.3.8-pax/arch/powerpc/kernel/signal_64.c
--- linux-3.3.8/arch/powerpc/kernel/signal_64.c	2012-01-08 19:47:45.247473213 +0100
+++ linux-3.3.8-pax/arch/powerpc/kernel/signal_64.c	2012-03-19 10:43:42.980034705 +0100
@@ -429,7 +429,7 @@ int handle_rt_signal64(int signr, struct
 	current->thread.fpscr.val = 0;
 
 	/* Set up to return from userspace. */
-	if (vdso64_rt_sigtramp && current->mm->context.vdso_base) {
+	if (vdso64_rt_sigtramp && current->mm->context.vdso_base != ~0UL) {
 		regs->link = current->mm->context.vdso_base + vdso64_rt_sigtramp;
 	} else {
 		err |= setup_trampoline(__NR_rt_sigreturn, &frame->tramp[0]);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/powerpc/kernel/vdso.c linux-3.3.8-pax/arch/powerpc/kernel/vdso.c
--- linux-3.3.8/arch/powerpc/kernel/vdso.c	2012-01-08 19:47:45.299473210 +0100
+++ linux-3.3.8-pax/arch/powerpc/kernel/vdso.c	2012-03-19 10:43:42.980034705 +0100
@@ -35,6 +35,7 @@
 #include <asm/firmware.h>
 #include <asm/vdso.h>
 #include <asm/vdso_datapage.h>
+#include <asm/mman.h>
 
 #include "setup.h"
 
@@ -219,7 +220,7 @@ int arch_setup_additional_pages(struct l
 	vdso_base = VDSO32_MBASE;
 #endif
 
-	current->mm->context.vdso_base = 0;
+	current->mm->context.vdso_base = ~0UL;
 
 	/* vDSO has a problem and was disabled, just don't "enable" it for the
 	 * process
@@ -239,7 +240,7 @@ int arch_setup_additional_pages(struct l
 	vdso_base = get_unmapped_area(NULL, vdso_base,
 				      (vdso_pages << PAGE_SHIFT) +
 				      ((VDSO_ALIGNMENT - 1) & PAGE_MASK),
-				      0, 0);
+				      0, MAP_PRIVATE | MAP_EXECUTABLE);
 	if (IS_ERR_VALUE(vdso_base)) {
 		rc = vdso_base;
 		goto fail_mmapsem;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/powerpc/lib/usercopy_64.c linux-3.3.8-pax/arch/powerpc/lib/usercopy_64.c
--- linux-3.3.8/arch/powerpc/lib/usercopy_64.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/powerpc/lib/usercopy_64.c	2012-03-19 10:43:42.980034705 +0100
@@ -9,22 +9,6 @@
 #include <linux/module.h>
 #include <asm/uaccess.h>
 
-unsigned long copy_from_user(void *to, const void __user *from, unsigned long n)
-{
-	if (likely(access_ok(VERIFY_READ, from, n)))
-		n = __copy_from_user(to, from, n);
-	else
-		memset(to, 0, n);
-	return n;
-}
-
-unsigned long copy_to_user(void __user *to, const void *from, unsigned long n)
-{
-	if (likely(access_ok(VERIFY_WRITE, to, n)))
-		n = __copy_to_user(to, from, n);
-	return n;
-}
-
 unsigned long copy_in_user(void __user *to, const void __user *from,
 			   unsigned long n)
 {
@@ -35,7 +19,5 @@ unsigned long copy_in_user(void __user *
 	return n;
 }
 
-EXPORT_SYMBOL(copy_from_user);
-EXPORT_SYMBOL(copy_to_user);
 EXPORT_SYMBOL(copy_in_user);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/powerpc/mm/fault.c linux-3.3.8-pax/arch/powerpc/mm/fault.c
--- linux-3.3.8/arch/powerpc/mm/fault.c	2012-03-19 10:38:54.644050102 +0100
+++ linux-3.3.8-pax/arch/powerpc/mm/fault.c	2012-03-19 10:43:42.984034690 +0100
@@ -32,6 +32,10 @@
 #include <linux/perf_event.h>
 #include <linux/magic.h>
 #include <linux/ratelimit.h>
+#include <linux/slab.h>
+#include <linux/pagemap.h>
+#include <linux/compiler.h>
+#include <linux/unistd.h>
 
 #include <asm/firmware.h>
 #include <asm/page.h>
@@ -43,6 +47,7 @@
 #include <asm/tlbflush.h>
 #include <asm/siginfo.h>
 #include <mm/mmu_decl.h>
+#include <asm/ptrace.h>
 
 #include "icswx.h"
 
@@ -68,6 +73,33 @@ static inline int notify_page_fault(stru
 }
 #endif
 
+#ifdef CONFIG_PAX_PAGEEXEC
+/*
+ * PaX: decide what to do with offenders (regs->nip = fault address)
+ *
+ * returns 1 when task should be killed
+ */
+static int pax_handle_fetch_fault(struct pt_regs *regs)
+{
+	return 1;
+}
+
+void pax_report_insns(struct pt_regs *regs, void *pc, void *sp)
+{
+	unsigned long i;
+
+	printk(KERN_ERR "PAX: bytes at PC: ");
+	for (i = 0; i < 5; i++) {
+		unsigned int c;
+		if (get_user(c, (unsigned int __user *)pc+i))
+			printk(KERN_CONT "???????? ");
+		else
+			printk(KERN_CONT "%08x ", c);
+	}
+	printk("\n");
+}
+#endif
+
 /*
  * Check whether the instruction at regs->nip is a store using
  * an update addressing form which will update r1.
@@ -138,7 +170,7 @@ int __kprobes do_page_fault(struct pt_re
 	 * indicate errors in DSISR but can validly be set in SRR1.
 	 */
 	if (trap == 0x400)
-		error_code &= 0x48200000;
+		error_code &= 0x58200000;
 	else
 		is_write = error_code & DSISR_ISSTORE;
 #else
@@ -276,7 +308,7 @@ good_area:
          * "undefined".  Of those that can be set, this is the only
          * one which seems bad.
          */
-	if (error_code & 0x10000000)
+	if (error_code & DSISR_GUARDED)
                 /* Guarded storage error. */
 		goto bad_area;
 #endif /* CONFIG_8xx */
@@ -291,7 +323,7 @@ good_area:
 		 * processors use the same I/D cache coherency mechanism
 		 * as embedded.
 		 */
-		if (error_code & DSISR_PROTFAULT)
+		if (error_code & (DSISR_PROTFAULT | DSISR_GUARDED))
 			goto bad_area;
 #endif /* CONFIG_PPC_STD_MMU */
 
@@ -360,6 +392,23 @@ bad_area:
 bad_area_nosemaphore:
 	/* User mode accesses cause a SIGSEGV */
 	if (user_mode(regs)) {
+
+#ifdef CONFIG_PAX_PAGEEXEC
+		if (mm->pax_flags & MF_PAX_PAGEEXEC) {
+#ifdef CONFIG_PPC_STD_MMU
+			if (is_exec && (error_code & (DSISR_PROTFAULT | DSISR_GUARDED))) {
+#else
+			if (is_exec && regs->nip == address) {
+#endif
+				switch (pax_handle_fetch_fault(regs)) {
+				}
+
+				pax_report_fault(regs, (void *)regs->nip, (void *)regs->gpr[PT_R1]);
+				do_group_exit(SIGKILL);
+			}
+		}
+#endif
+
 		_exception(SIGSEGV, regs, code, address);
 		return 0;
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/powerpc/mm/mmap_64.c linux-3.3.8-pax/arch/powerpc/mm/mmap_64.c
--- linux-3.3.8/arch/powerpc/mm/mmap_64.c	2012-03-19 10:38:54.676050099 +0100
+++ linux-3.3.8-pax/arch/powerpc/mm/mmap_64.c	2012-03-19 10:43:42.984034690 +0100
@@ -91,10 +91,22 @@ void arch_pick_mmap_layout(struct mm_str
 	 */
 	if (mmap_is_legacy()) {
 		mm->mmap_base = TASK_UNMAPPED_BASE;
+
+#ifdef CONFIG_PAX_RANDMMAP
+		if (mm->pax_flags & MF_PAX_RANDMMAP)
+			mm->mmap_base += mm->delta_mmap;
+#endif
+
 		mm->get_unmapped_area = arch_get_unmapped_area;
 		mm->unmap_area = arch_unmap_area;
 	} else {
 		mm->mmap_base = mmap_base();
+
+#ifdef CONFIG_PAX_RANDMMAP
+		if (mm->pax_flags & MF_PAX_RANDMMAP)
+			mm->mmap_base -= mm->delta_mmap + mm->delta_stack;
+#endif
+
 		mm->get_unmapped_area = arch_get_unmapped_area_topdown;
 		mm->unmap_area = arch_unmap_area_topdown;
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/powerpc/mm/slice.c linux-3.3.8-pax/arch/powerpc/mm/slice.c
--- linux-3.3.8/arch/powerpc/mm/slice.c	2012-01-08 19:47:45.479473201 +0100
+++ linux-3.3.8-pax/arch/powerpc/mm/slice.c	2012-03-19 10:43:42.984034690 +0100
@@ -98,7 +98,7 @@ static int slice_area_is_free(struct mm_
 	if ((mm->task_size - len) < addr)
 		return 0;
 	vma = find_vma(mm, addr);
-	return (!vma || (addr + len) <= vma->vm_start);
+	return check_heap_stack_gap(vma, addr, len);
 }
 
 static int slice_low_has_vma(struct mm_struct *mm, unsigned long slice)
@@ -256,7 +256,7 @@ full_search:
 				addr = _ALIGN_UP(addr + 1,  1ul << SLICE_HIGH_SHIFT);
 			continue;
 		}
-		if (!vma || addr + len <= vma->vm_start) {
+		if (check_heap_stack_gap(vma, addr, len)) {
 			/*
 			 * Remember the place where we stopped the search:
 			 */
@@ -313,10 +313,14 @@ static unsigned long slice_find_area_top
 		}
 	}
 
-	addr = mm->mmap_base;
-	while (addr > len) {
+	if (mm->mmap_base < len)
+		addr = -ENOMEM;
+	else
+		addr = mm->mmap_base - len;
+
+	while (!IS_ERR_VALUE(addr)) {
 		/* Go down by chunk size */
-		addr = _ALIGN_DOWN(addr - len, 1ul << pshift);
+		addr = _ALIGN_DOWN(addr, 1ul << pshift);
 
 		/* Check for hit with different page size */
 		mask = slice_range_to_mask(addr, len);
@@ -336,7 +340,7 @@ static unsigned long slice_find_area_top
 		 * return with success:
 		 */
 		vma = find_vma(mm, addr);
-		if (!vma || (addr + len) <= vma->vm_start) {
+		if (check_heap_stack_gap(vma, addr, len)) {
 			/* remember the address as a hint for next time */
 			if (use_cache)
 				mm->free_area_cache = addr;
@@ -348,7 +352,7 @@ static unsigned long slice_find_area_top
 		        mm->cached_hole_size = vma->vm_start - addr;
 
 		/* try just below the current vma->vm_start */
-		addr = vma->vm_start;
+		addr = skip_heap_stack_gap(vma, len);
 	}
 
 	/*
@@ -426,6 +430,11 @@ unsigned long slice_get_unmapped_area(un
 	if (fixed && addr > (mm->task_size - len))
 		return -EINVAL;
 
+#ifdef CONFIG_PAX_RANDMMAP
+	if (!fixed && (mm->pax_flags & MF_PAX_RANDMMAP))
+		addr = 0;
+#endif
+
 	/* If hint, make sure it matches our alignment restrictions */
 	if (!fixed && addr) {
 		addr = _ALIGN_UP(addr, 1ul << pshift);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/s390/include/asm/atomic.h linux-3.3.8-pax/arch/s390/include/asm/atomic.h
--- linux-3.3.8/arch/s390/include/asm/atomic.h	2011-10-24 12:48:25.307091825 +0200
+++ linux-3.3.8-pax/arch/s390/include/asm/atomic.h	2012-03-19 10:43:42.984034690 +0100
@@ -326,6 +326,16 @@ static inline long long atomic64_dec_if_
 #define atomic64_dec_and_test(_v)	(atomic64_sub_return(1, _v) == 0)
 #define atomic64_inc_not_zero(v)	atomic64_add_unless((v), 1, 0)
 
+#define atomic64_read_unchecked(v)		atomic64_read(v)
+#define atomic64_set_unchecked(v, i)		atomic64_set((v), (i))
+#define atomic64_add_unchecked(a, v)		atomic64_add((a), (v))
+#define atomic64_add_return_unchecked(a, v)	atomic64_add_return((a), (v))
+#define atomic64_sub_unchecked(a, v)		atomic64_sub((a), (v))
+#define atomic64_inc_unchecked(v)		atomic64_inc(v)
+#define atomic64_inc_return_unchecked(v)	atomic64_inc_return(v)
+#define atomic64_dec_unchecked(v)		atomic64_dec(v)
+#define atomic64_cmpxchg_unchecked(v, o, n)	atomic64_cmpxchg((v), (o), (n))
+
 #define smp_mb__before_atomic_dec()	smp_mb()
 #define smp_mb__after_atomic_dec()	smp_mb()
 #define smp_mb__before_atomic_inc()	smp_mb()
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/s390/include/asm/elf.h linux-3.3.8-pax/arch/s390/include/asm/elf.h
--- linux-3.3.8/arch/s390/include/asm/elf.h	2011-10-24 12:48:25.311091825 +0200
+++ linux-3.3.8-pax/arch/s390/include/asm/elf.h	2012-03-19 10:43:42.988034684 +0100
@@ -162,8 +162,14 @@ extern unsigned int vdso_enabled;
    the loader.  We need to make sure that it is out of the way of the program
    that it will "exec", and that there is sufficient room for the brk.  */
 
-extern unsigned long randomize_et_dyn(unsigned long base);
-#define ELF_ET_DYN_BASE		(randomize_et_dyn(STACK_TOP / 3 * 2))
+#define ELF_ET_DYN_BASE		(STACK_TOP / 3 * 2)
+
+#ifdef CONFIG_PAX_ASLR
+#define PAX_ELF_ET_DYN_BASE	(test_thread_flag(TIF_31BIT) ? 0x10000UL : 0x80000000UL)
+
+#define PAX_DELTA_MMAP_LEN	(test_thread_flag(TIF_31BIT) ? 15 : 26)
+#define PAX_DELTA_STACK_LEN	(test_thread_flag(TIF_31BIT) ? 15 : 26)
+#endif
 
 /* This yields a mask that user programs can use to figure out what
    instruction set this CPU supports. */
@@ -211,7 +217,4 @@ struct linux_binprm;
 #define ARCH_HAS_SETUP_ADDITIONAL_PAGES 1
 int arch_setup_additional_pages(struct linux_binprm *, int);
 
-extern unsigned long arch_randomize_brk(struct mm_struct *mm);
-#define arch_randomize_brk arch_randomize_brk
-
 #endif
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/s390/include/asm/system.h linux-3.3.8-pax/arch/s390/include/asm/system.h
--- linux-3.3.8/arch/s390/include/asm/system.h	2012-03-19 10:38:55.380050062 +0100
+++ linux-3.3.8-pax/arch/s390/include/asm/system.h	2012-03-19 10:43:42.988034684 +0100
@@ -260,7 +260,7 @@ extern void (*_machine_restart)(char *co
 extern void (*_machine_halt)(void);
 extern void (*_machine_power_off)(void);
 
-extern unsigned long arch_align_stack(unsigned long sp);
+#define arch_align_stack(x) ((x) & ~0xfUL)
 
 static inline int tprot(unsigned long addr)
 {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/s390/include/asm/uaccess.h linux-3.3.8-pax/arch/s390/include/asm/uaccess.h
--- linux-3.3.8/arch/s390/include/asm/uaccess.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/s390/include/asm/uaccess.h	2012-03-19 10:43:42.988034684 +0100
@@ -235,6 +235,10 @@ static inline unsigned long __must_check
 copy_to_user(void __user *to, const void *from, unsigned long n)
 {
 	might_fault();
+
+	if ((long)n < 0)
+		return n;
+
 	if (access_ok(VERIFY_WRITE, to, n))
 		n = __copy_to_user(to, from, n);
 	return n;
@@ -260,6 +264,9 @@ copy_to_user(void __user *to, const void
 static inline unsigned long __must_check
 __copy_from_user(void *to, const void __user *from, unsigned long n)
 {
+	if ((long)n < 0)
+		return n;
+
 	if (__builtin_constant_p(n) && (n <= 256))
 		return uaccess.copy_from_user_small(n, from, to);
 	else
@@ -294,6 +301,10 @@ copy_from_user(void *to, const void __us
 	unsigned int sz = __compiletime_object_size(to);
 
 	might_fault();
+
+	if ((long)n < 0)
+		return n;
+
 	if (unlikely(sz != -1 && sz < n)) {
 		copy_from_user_overflow();
 		return n;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/s390/kernel/module.c linux-3.3.8-pax/arch/s390/kernel/module.c
--- linux-3.3.8/arch/s390/kernel/module.c	2011-10-24 12:48:25.383091820 +0200
+++ linux-3.3.8-pax/arch/s390/kernel/module.c	2012-03-19 10:43:42.988034684 +0100
@@ -161,11 +161,11 @@ module_frob_arch_sections(Elf_Ehdr *hdr,
 
 	/* Increase core size by size of got & plt and set start
 	   offsets for got and plt. */
-	me->core_size = ALIGN(me->core_size, 4);
-	me->arch.got_offset = me->core_size;
-	me->core_size += me->arch.got_size;
-	me->arch.plt_offset = me->core_size;
-	me->core_size += me->arch.plt_size;
+	me->core_size_rw = ALIGN(me->core_size_rw, 4);
+	me->arch.got_offset = me->core_size_rw;
+	me->core_size_rw += me->arch.got_size;
+	me->arch.plt_offset = me->core_size_rx;
+	me->core_size_rx += me->arch.plt_size;
 	return 0;
 }
 
@@ -242,7 +242,7 @@ apply_rela(Elf_Rela *rela, Elf_Addr base
 		if (info->got_initialized == 0) {
 			Elf_Addr *gotent;
 
-			gotent = me->module_core + me->arch.got_offset +
+			gotent = me->module_core_rw + me->arch.got_offset +
 				info->got_offset;
 			*gotent = val;
 			info->got_initialized = 1;
@@ -266,7 +266,7 @@ apply_rela(Elf_Rela *rela, Elf_Addr base
 		else if (r_type == R_390_GOTENT ||
 			 r_type == R_390_GOTPLTENT)
 			*(unsigned int *) loc =
-				(val + (Elf_Addr) me->module_core - loc) >> 1;
+				(val + (Elf_Addr) me->module_core_rw - loc) >> 1;
 		else if (r_type == R_390_GOT64 ||
 			 r_type == R_390_GOTPLT64)
 			*(unsigned long *) loc = val;
@@ -280,7 +280,7 @@ apply_rela(Elf_Rela *rela, Elf_Addr base
 	case R_390_PLTOFF64:	/* 16 bit offset from GOT to PLT. */
 		if (info->plt_initialized == 0) {
 			unsigned int *ip;
-			ip = me->module_core + me->arch.plt_offset +
+			ip = me->module_core_rx + me->arch.plt_offset +
 				info->plt_offset;
 #ifndef CONFIG_64BIT
 			ip[0] = 0x0d105810; /* basr 1,0; l 1,6(1); br 1 */
@@ -305,7 +305,7 @@ apply_rela(Elf_Rela *rela, Elf_Addr base
 			       val - loc + 0xffffUL < 0x1ffffeUL) ||
 			      (r_type == R_390_PLT32DBL &&
 			       val - loc + 0xffffffffULL < 0x1fffffffeULL)))
-				val = (Elf_Addr) me->module_core +
+				val = (Elf_Addr) me->module_core_rx +
 					me->arch.plt_offset +
 					info->plt_offset;
 			val += rela->r_addend - loc;
@@ -327,7 +327,7 @@ apply_rela(Elf_Rela *rela, Elf_Addr base
 	case R_390_GOTOFF32:	/* 32 bit offset to GOT.  */
 	case R_390_GOTOFF64:	/* 64 bit offset to GOT. */
 		val = val + rela->r_addend -
-			((Elf_Addr) me->module_core + me->arch.got_offset);
+			((Elf_Addr) me->module_core_rw + me->arch.got_offset);
 		if (r_type == R_390_GOTOFF16)
 			*(unsigned short *) loc = val;
 		else if (r_type == R_390_GOTOFF32)
@@ -337,7 +337,7 @@ apply_rela(Elf_Rela *rela, Elf_Addr base
 		break;
 	case R_390_GOTPC:	/* 32 bit PC relative offset to GOT. */
 	case R_390_GOTPCDBL:	/* 32 bit PC rel. off. to GOT shifted by 1. */
-		val = (Elf_Addr) me->module_core + me->arch.got_offset +
+		val = (Elf_Addr) me->module_core_rw + me->arch.got_offset +
 			rela->r_addend - loc;
 		if (r_type == R_390_GOTPC)
 			*(unsigned int *) loc = val;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/s390/kernel/process.c linux-3.3.8-pax/arch/s390/kernel/process.c
--- linux-3.3.8/arch/s390/kernel/process.c	2012-03-19 10:38:55.496050056 +0100
+++ linux-3.3.8-pax/arch/s390/kernel/process.c	2012-03-19 10:43:42.988034684 +0100
@@ -323,39 +323,3 @@ unsigned long get_wchan(struct task_stru
 	}
 	return 0;
 }
-
-unsigned long arch_align_stack(unsigned long sp)
-{
-	if (!(current->personality & ADDR_NO_RANDOMIZE) && randomize_va_space)
-		sp -= get_random_int() & ~PAGE_MASK;
-	return sp & ~0xf;
-}
-
-static inline unsigned long brk_rnd(void)
-{
-	/* 8MB for 32bit, 1GB for 64bit */
-	if (is_32bit_task())
-		return (get_random_int() & 0x7ffUL) << PAGE_SHIFT;
-	else
-		return (get_random_int() & 0x3ffffUL) << PAGE_SHIFT;
-}
-
-unsigned long arch_randomize_brk(struct mm_struct *mm)
-{
-	unsigned long ret = PAGE_ALIGN(mm->brk + brk_rnd());
-
-	if (ret < mm->brk)
-		return mm->brk;
-	return ret;
-}
-
-unsigned long randomize_et_dyn(unsigned long base)
-{
-	unsigned long ret = PAGE_ALIGN(base + brk_rnd());
-
-	if (!(current->flags & PF_RANDOMIZE))
-		return base;
-	if (ret < base)
-		return base;
-	return ret;
-}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/s390/mm/mmap.c linux-3.3.8-pax/arch/s390/mm/mmap.c
--- linux-3.3.8/arch/s390/mm/mmap.c	2012-03-19 10:38:55.532050053 +0100
+++ linux-3.3.8-pax/arch/s390/mm/mmap.c	2012-03-19 10:43:42.992034700 +0100
@@ -92,10 +92,22 @@ void arch_pick_mmap_layout(struct mm_str
 	 */
 	if (mmap_is_legacy()) {
 		mm->mmap_base = TASK_UNMAPPED_BASE;
+
+#ifdef CONFIG_PAX_RANDMMAP
+		if (mm->pax_flags & MF_PAX_RANDMMAP)
+			mm->mmap_base += mm->delta_mmap;
+#endif
+
 		mm->get_unmapped_area = arch_get_unmapped_area;
 		mm->unmap_area = arch_unmap_area;
 	} else {
 		mm->mmap_base = mmap_base();
+
+#ifdef CONFIG_PAX_RANDMMAP
+		if (mm->pax_flags & MF_PAX_RANDMMAP)
+			mm->mmap_base -= mm->delta_mmap + mm->delta_stack;
+#endif
+
 		mm->get_unmapped_area = arch_get_unmapped_area_topdown;
 		mm->unmap_area = arch_unmap_area_topdown;
 	}
@@ -167,10 +179,22 @@ void arch_pick_mmap_layout(struct mm_str
 	 */
 	if (mmap_is_legacy()) {
 		mm->mmap_base = TASK_UNMAPPED_BASE;
+
+#ifdef CONFIG_PAX_RANDMMAP
+		if (mm->pax_flags & MF_PAX_RANDMMAP)
+			mm->mmap_base += mm->delta_mmap;
+#endif
+
 		mm->get_unmapped_area = s390_get_unmapped_area;
 		mm->unmap_area = arch_unmap_area;
 	} else {
 		mm->mmap_base = mmap_base();
+
+#ifdef CONFIG_PAX_RANDMMAP
+		if (mm->pax_flags & MF_PAX_RANDMMAP)
+			mm->mmap_base -= mm->delta_mmap + mm->delta_stack;
+#endif
+
 		mm->get_unmapped_area = s390_get_unmapped_area_topdown;
 		mm->unmap_area = arch_unmap_area_topdown;
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/score/include/asm/system.h linux-3.3.8-pax/arch/score/include/asm/system.h
--- linux-3.3.8/arch/score/include/asm/system.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/score/include/asm/system.h	2012-03-19 10:43:42.992034700 +0100
@@ -17,7 +17,7 @@ do {								\
 #define finish_arch_switch(prev)	do {} while (0)
 
 typedef void (*vi_handler_t)(void);
-extern unsigned long arch_align_stack(unsigned long sp);
+#define arch_align_stack(x) (x)
 
 #define mb()		barrier()
 #define rmb()		barrier()
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/score/kernel/process.c linux-3.3.8-pax/arch/score/kernel/process.c
--- linux-3.3.8/arch/score/kernel/process.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/score/kernel/process.c	2012-03-19 10:43:42.992034700 +0100
@@ -161,8 +161,3 @@ unsigned long get_wchan(struct task_stru
 
 	return task_pt_regs(task)->cp0_epc;
 }
-
-unsigned long arch_align_stack(unsigned long sp)
-{
-	return sp;
-}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/sh/mm/mmap.c linux-3.3.8-pax/arch/sh/mm/mmap.c
--- linux-3.3.8/arch/sh/mm/mmap.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/sh/mm/mmap.c	2012-03-19 10:43:42.992034700 +0100
@@ -74,8 +74,7 @@ unsigned long arch_get_unmapped_area(str
 			addr = PAGE_ALIGN(addr);
 
 		vma = find_vma(mm, addr);
-		if (TASK_SIZE - len >= addr &&
-		    (!vma || addr + len <= vma->vm_start))
+		if (TASK_SIZE - len >= addr && check_heap_stack_gap(vma, addr, len))
 			return addr;
 	}
 
@@ -106,7 +105,7 @@ full_search:
 			}
 			return -ENOMEM;
 		}
-		if (likely(!vma || addr + len <= vma->vm_start)) {
+		if (likely(check_heap_stack_gap(vma, addr, len))) {
 			/*
 			 * Remember the place where we stopped the search:
 			 */
@@ -157,8 +156,7 @@ arch_get_unmapped_area_topdown(struct fi
 			addr = PAGE_ALIGN(addr);
 
 		vma = find_vma(mm, addr);
-		if (TASK_SIZE - len >= addr &&
-		    (!vma || addr + len <= vma->vm_start))
+		if (TASK_SIZE - len >= addr && check_heap_stack_gap(vma, addr, len))
 			return addr;
 	}
 
@@ -179,7 +177,7 @@ arch_get_unmapped_area_topdown(struct fi
 	/* make sure it can fit in the remaining address space */
 	if (likely(addr > len)) {
 		vma = find_vma(mm, addr-len);
-		if (!vma || addr <= vma->vm_start) {
+		if (check_heap_stack_gap(vma, addr - len, len)) {
 			/* remember the address as a hint for next time */
 			return (mm->free_area_cache = addr-len);
 		}
@@ -188,18 +186,18 @@ arch_get_unmapped_area_topdown(struct fi
 	if (unlikely(mm->mmap_base < len))
 		goto bottomup;
 
-	addr = mm->mmap_base-len;
-	if (do_colour_align)
-		addr = COLOUR_ALIGN_DOWN(addr, pgoff);
+	addr = mm->mmap_base - len;
 
 	do {
+		if (do_colour_align)
+			addr = COLOUR_ALIGN_DOWN(addr, pgoff);
 		/*
 		 * Lookup failure means no vma is above this address,
 		 * else if new region fits below vma->vm_start,
 		 * return with success:
 		 */
 		vma = find_vma(mm, addr);
-		if (likely(!vma || addr+len <= vma->vm_start)) {
+		if (likely(check_heap_stack_gap(vma, addr, len))) {
 			/* remember the address as a hint for next time */
 			return (mm->free_area_cache = addr);
 		}
@@ -209,10 +207,8 @@ arch_get_unmapped_area_topdown(struct fi
 		        mm->cached_hole_size = vma->vm_start - addr;
 
 		/* try just below the current vma->vm_start */
-		addr = vma->vm_start-len;
-		if (do_colour_align)
-			addr = COLOUR_ALIGN_DOWN(addr, pgoff);
-	} while (likely(len < vma->vm_start));
+		addr = skip_heap_stack_gap(vma, len);
+	} while (!IS_ERR_VALUE(addr));
 
 bottomup:
 	/*
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/sparc/include/asm/atomic_64.h linux-3.3.8-pax/arch/sparc/include/asm/atomic_64.h
--- linux-3.3.8/arch/sparc/include/asm/atomic_64.h	2011-10-24 12:48:25.647091806 +0200
+++ linux-3.3.8-pax/arch/sparc/include/asm/atomic_64.h	2012-03-19 10:43:42.992034700 +0100
@@ -14,18 +14,40 @@
 #define ATOMIC64_INIT(i)	{ (i) }
 
 #define atomic_read(v)		(*(volatile int *)&(v)->counter)
+static inline int atomic_read_unchecked(const atomic_unchecked_t *v)
+{
+	return v->counter;
+}
 #define atomic64_read(v)	(*(volatile long *)&(v)->counter)
+static inline long atomic64_read_unchecked(const atomic64_unchecked_t *v)
+{
+	return v->counter;
+}
 
 #define atomic_set(v, i)	(((v)->counter) = i)
+static inline void atomic_set_unchecked(atomic_unchecked_t *v, int i)
+{
+	v->counter = i;
+}
 #define atomic64_set(v, i)	(((v)->counter) = i)
+static inline void atomic64_set_unchecked(atomic64_unchecked_t *v, long i)
+{
+	v->counter = i;
+}
 
 extern void atomic_add(int, atomic_t *);
+extern void atomic_add_unchecked(int, atomic_unchecked_t *);
 extern void atomic64_add(long, atomic64_t *);
+extern void atomic64_add_unchecked(long, atomic64_unchecked_t *);
 extern void atomic_sub(int, atomic_t *);
+extern void atomic_sub_unchecked(int, atomic_unchecked_t *);
 extern void atomic64_sub(long, atomic64_t *);
+extern void atomic64_sub_unchecked(long, atomic64_unchecked_t *);
 
 extern int atomic_add_ret(int, atomic_t *);
+extern int atomic_add_ret_unchecked(int, atomic_unchecked_t *);
 extern long atomic64_add_ret(long, atomic64_t *);
+extern long atomic64_add_ret_unchecked(long, atomic64_unchecked_t *);
 extern int atomic_sub_ret(int, atomic_t *);
 extern long atomic64_sub_ret(long, atomic64_t *);
 
@@ -33,13 +55,29 @@ extern long atomic64_sub_ret(long, atomi
 #define atomic64_dec_return(v) atomic64_sub_ret(1, v)
 
 #define atomic_inc_return(v) atomic_add_ret(1, v)
+static inline int atomic_inc_return_unchecked(atomic_unchecked_t *v)
+{
+	return atomic_add_ret_unchecked(1, v);
+}
 #define atomic64_inc_return(v) atomic64_add_ret(1, v)
+static inline long atomic64_inc_return_unchecked(atomic64_unchecked_t *v)
+{
+	return atomic64_add_ret_unchecked(1, v);
+}
 
 #define atomic_sub_return(i, v) atomic_sub_ret(i, v)
 #define atomic64_sub_return(i, v) atomic64_sub_ret(i, v)
 
 #define atomic_add_return(i, v) atomic_add_ret(i, v)
+static inline int atomic_add_return_unchecked(int i, atomic_unchecked_t *v)
+{
+	return atomic_add_ret_unchecked(i, v);
+}
 #define atomic64_add_return(i, v) atomic64_add_ret(i, v)
+static inline long atomic64_add_return_unchecked(long i, atomic64_unchecked_t *v)
+{
+	return atomic64_add_ret_unchecked(i, v);
+}
 
 /*
  * atomic_inc_and_test - increment and test
@@ -50,6 +88,10 @@ extern long atomic64_sub_ret(long, atomi
  * other cases.
  */
 #define atomic_inc_and_test(v) (atomic_inc_return(v) == 0)
+static inline int atomic_inc_and_test_unchecked(atomic_unchecked_t *v)
+{
+	return atomic_inc_return_unchecked(v) == 0;
+}
 #define atomic64_inc_and_test(v) (atomic64_inc_return(v) == 0)
 
 #define atomic_sub_and_test(i, v) (atomic_sub_ret(i, v) == 0)
@@ -59,25 +101,60 @@ extern long atomic64_sub_ret(long, atomi
 #define atomic64_dec_and_test(v) (atomic64_sub_ret(1, v) == 0)
 
 #define atomic_inc(v) atomic_add(1, v)
+static inline void atomic_inc_unchecked(atomic_unchecked_t *v)
+{
+	atomic_add_unchecked(1, v);
+}
 #define atomic64_inc(v) atomic64_add(1, v)
+static inline void atomic64_inc_unchecked(atomic64_unchecked_t *v)
+{
+	atomic64_add_unchecked(1, v);
+}
 
 #define atomic_dec(v) atomic_sub(1, v)
+static inline void atomic_dec_unchecked(atomic_unchecked_t *v)
+{
+	atomic_sub_unchecked(1, v);
+}
 #define atomic64_dec(v) atomic64_sub(1, v)
+static inline void atomic64_dec_unchecked(atomic64_unchecked_t *v)
+{
+	atomic64_sub_unchecked(1, v);
+}
 
 #define atomic_add_negative(i, v) (atomic_add_ret(i, v) < 0)
 #define atomic64_add_negative(i, v) (atomic64_add_ret(i, v) < 0)
 
 #define atomic_cmpxchg(v, o, n) (cmpxchg(&((v)->counter), (o), (n)))
+static inline int atomic_cmpxchg_unchecked(atomic_unchecked_t *v, int old, int new)
+{
+	return cmpxchg(&v->counter, old, new);
+}
 #define atomic_xchg(v, new) (xchg(&((v)->counter), new))
+static inline int atomic_xchg_unchecked(atomic_unchecked_t *v, int new)
+{
+	return xchg(&v->counter, new);
+}
 
 static inline int __atomic_add_unless(atomic_t *v, int a, int u)
 {
-	int c, old;
+	int c, old, new;
 	c = atomic_read(v);
 	for (;;) {
-		if (unlikely(c == (u)))
+		if (unlikely(c == u))
 			break;
-		old = atomic_cmpxchg((v), c, c + (a));
+
+		asm volatile("addcc %2, %0, %0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+			     "tvs %%icc, 6\n"
+#endif
+
+			     : "=r" (new)
+			     : "0" (c), "ir" (a)
+			     : "cc");
+
+		old = atomic_cmpxchg(v, c, new);
 		if (likely(old == c))
 			break;
 		c = old;
@@ -89,20 +166,35 @@ static inline int __atomic_add_unless(at
 #define atomic64_cmpxchg(v, o, n) \
 	((__typeof__((v)->counter))cmpxchg(&((v)->counter), (o), (n)))
 #define atomic64_xchg(v, new) (xchg(&((v)->counter), new))
+static inline long atomic64_xchg_unchecked(atomic64_unchecked_t *v, long new)
+{
+	return xchg(&v->counter, new);
+}
 
 static inline long atomic64_add_unless(atomic64_t *v, long a, long u)
 {
-	long c, old;
+	long c, old, new;
 	c = atomic64_read(v);
 	for (;;) {
-		if (unlikely(c == (u)))
+		if (unlikely(c == u))
 			break;
-		old = atomic64_cmpxchg((v), c, c + (a));
+
+		asm volatile("addcc %2, %0, %0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+			     "tvs %%xcc, 6\n"
+#endif
+
+			     : "=r" (new)
+			     : "0" (c), "ir" (a)
+			     : "cc");
+
+		old = atomic64_cmpxchg(v, c, new);
 		if (likely(old == c))
 			break;
 		c = old;
 	}
-	return c != (u);
+	return c != u;
 }
 
 #define atomic64_inc_not_zero(v) atomic64_add_unless((v), 1, 0)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/sparc/include/asm/cache.h linux-3.3.8-pax/arch/sparc/include/asm/cache.h
--- linux-3.3.8/arch/sparc/include/asm/cache.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/sparc/include/asm/cache.h	2012-03-19 10:43:42.996034711 +0100
@@ -10,7 +10,7 @@
 #define ARCH_SLAB_MINALIGN	__alignof__(unsigned long long)
 
 #define L1_CACHE_SHIFT 5
-#define L1_CACHE_BYTES 32
+#define L1_CACHE_BYTES 32UL
 
 #ifdef CONFIG_SPARC32
 #define SMP_CACHE_BYTES_SHIFT 5
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/sparc/include/asm/elf_32.h linux-3.3.8-pax/arch/sparc/include/asm/elf_32.h
--- linux-3.3.8/arch/sparc/include/asm/elf_32.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/sparc/include/asm/elf_32.h	2012-03-19 10:43:42.996034711 +0100
@@ -114,6 +114,13 @@ typedef struct {
 
 #define ELF_ET_DYN_BASE         (TASK_UNMAPPED_BASE)
 
+#ifdef CONFIG_PAX_ASLR
+#define PAX_ELF_ET_DYN_BASE	0x10000UL
+
+#define PAX_DELTA_MMAP_LEN	16
+#define PAX_DELTA_STACK_LEN	16
+#endif
+
 /* This yields a mask that user programs can use to figure out what
    instruction set this cpu supports.  This can NOT be done in userspace
    on Sparc.  */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/sparc/include/asm/elf_64.h linux-3.3.8-pax/arch/sparc/include/asm/elf_64.h
--- linux-3.3.8/arch/sparc/include/asm/elf_64.h	2011-10-24 12:48:25.651091805 +0200
+++ linux-3.3.8-pax/arch/sparc/include/asm/elf_64.h	2012-03-19 10:43:42.996034711 +0100
@@ -180,6 +180,13 @@ typedef struct {
 #define ELF_ET_DYN_BASE		0x0000010000000000UL
 #define COMPAT_ELF_ET_DYN_BASE	0x0000000070000000UL
 
+#ifdef CONFIG_PAX_ASLR
+#define PAX_ELF_ET_DYN_BASE	(test_thread_flag(TIF_32BIT) ? 0x10000UL : 0x100000UL)
+
+#define PAX_DELTA_MMAP_LEN	(test_thread_flag(TIF_32BIT) ? 14 : 28)
+#define PAX_DELTA_STACK_LEN	(test_thread_flag(TIF_32BIT) ? 15 : 29)
+#endif
+
 extern unsigned long sparc64_elf_hwcap;
 #define ELF_HWCAP	sparc64_elf_hwcap
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/sparc/include/asm/pgalloc_32.h linux-3.3.8-pax/arch/sparc/include/asm/pgalloc_32.h
--- linux-3.3.8/arch/sparc/include/asm/pgalloc_32.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/sparc/include/asm/pgalloc_32.h	2012-05-07 17:13:33.340228811 +0200
@@ -37,6 +37,7 @@ BTFIXUPDEF_CALL(void, free_pgd_fast, pgd
 BTFIXUPDEF_CALL(void, pgd_set, pgd_t *, pmd_t *)
 #define pgd_set(pgdp,pmdp) BTFIXUP_CALL(pgd_set)(pgdp,pmdp)
 #define pgd_populate(MM, PGD, PMD)      pgd_set(PGD, PMD)
+#define pgd_populate_kernel(MM, PGD, PMD)      pgd_populate((MM), (PGD), (PMD))
 
 BTFIXUPDEF_CALL(pmd_t *, pmd_alloc_one, struct mm_struct *, unsigned long)
 #define pmd_alloc_one(mm, address)	BTFIXUP_CALL(pmd_alloc_one)(mm, address)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/sparc/include/asm/pgalloc_64.h linux-3.3.8-pax/arch/sparc/include/asm/pgalloc_64.h
--- linux-3.3.8/arch/sparc/include/asm/pgalloc_64.h	2011-10-24 12:48:25.663091805 +0200
+++ linux-3.3.8-pax/arch/sparc/include/asm/pgalloc_64.h	2012-05-07 17:16:47.340218453 +0200
@@ -26,6 +26,7 @@ static inline void pgd_free(struct mm_st
 }
 
 #define pud_populate(MM, PUD, PMD)	pud_set(PUD, PMD)
+#define pud_populate_kernel(MM, PUD, PMD)	pud_populate((MM), (PUD), (PMD))
 
 static inline pmd_t *pmd_alloc_one(struct mm_struct *mm, unsigned long addr)
 {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/sparc/include/asm/pgtable_32.h linux-3.3.8-pax/arch/sparc/include/asm/pgtable_32.h
--- linux-3.3.8/arch/sparc/include/asm/pgtable_32.h	2012-01-08 19:47:47.031473118 +0100
+++ linux-3.3.8-pax/arch/sparc/include/asm/pgtable_32.h	2012-03-19 10:43:42.996034711 +0100
@@ -45,6 +45,13 @@ BTFIXUPDEF_SIMM13(user_ptrs_per_pgd)
 BTFIXUPDEF_INT(page_none)
 BTFIXUPDEF_INT(page_copy)
 BTFIXUPDEF_INT(page_readonly)
+
+#ifdef CONFIG_PAX_PAGEEXEC
+BTFIXUPDEF_INT(page_shared_noexec)
+BTFIXUPDEF_INT(page_copy_noexec)
+BTFIXUPDEF_INT(page_readonly_noexec)
+#endif
+
 BTFIXUPDEF_INT(page_kernel)
 
 #define PMD_SHIFT		SUN4C_PMD_SHIFT
@@ -66,6 +73,16 @@ extern pgprot_t PAGE_SHARED;
 #define PAGE_COPY      __pgprot(BTFIXUP_INT(page_copy))
 #define PAGE_READONLY  __pgprot(BTFIXUP_INT(page_readonly))
 
+#ifdef CONFIG_PAX_PAGEEXEC
+extern pgprot_t PAGE_SHARED_NOEXEC;
+# define PAGE_COPY_NOEXEC	__pgprot(BTFIXUP_INT(page_copy_noexec))
+# define PAGE_READONLY_NOEXEC	__pgprot(BTFIXUP_INT(page_readonly_noexec))
+#else
+# define PAGE_SHARED_NOEXEC	PAGE_SHARED
+# define PAGE_COPY_NOEXEC	PAGE_COPY
+# define PAGE_READONLY_NOEXEC	PAGE_READONLY
+#endif
+
 extern unsigned long page_kernel;
 
 #ifdef MODULE
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/sparc/include/asm/pgtsrmmu.h linux-3.3.8-pax/arch/sparc/include/asm/pgtsrmmu.h
--- linux-3.3.8/arch/sparc/include/asm/pgtsrmmu.h	2011-10-24 12:48:25.667091805 +0200
+++ linux-3.3.8-pax/arch/sparc/include/asm/pgtsrmmu.h	2012-03-19 10:43:43.000034718 +0100
@@ -115,6 +115,13 @@
 				    SRMMU_EXEC | SRMMU_REF)
 #define SRMMU_PAGE_RDONLY  __pgprot(SRMMU_VALID | SRMMU_CACHE | \
 				    SRMMU_EXEC | SRMMU_REF)
+
+#ifdef CONFIG_PAX_PAGEEXEC
+#define SRMMU_PAGE_SHARED_NOEXEC	__pgprot(SRMMU_VALID | SRMMU_CACHE | SRMMU_WRITE | SRMMU_REF)
+#define SRMMU_PAGE_COPY_NOEXEC	__pgprot(SRMMU_VALID | SRMMU_CACHE | SRMMU_REF)
+#define SRMMU_PAGE_RDONLY_NOEXEC	__pgprot(SRMMU_VALID | SRMMU_CACHE | SRMMU_REF)
+#endif
+
 #define SRMMU_PAGE_KERNEL  __pgprot(SRMMU_VALID | SRMMU_CACHE | SRMMU_PRIV | \
 				    SRMMU_DIRTY | SRMMU_REF)
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/sparc/include/asm/spinlock_64.h linux-3.3.8-pax/arch/sparc/include/asm/spinlock_64.h
--- linux-3.3.8/arch/sparc/include/asm/spinlock_64.h	2011-10-24 12:48:25.687091804 +0200
+++ linux-3.3.8-pax/arch/sparc/include/asm/spinlock_64.h	2012-03-19 10:43:43.000034718 +0100
@@ -92,14 +92,19 @@ static inline void arch_spin_lock_flags(
 
 /* Multi-reader locks, these are much saner than the 32-bit Sparc ones... */
 
-static void inline arch_read_lock(arch_rwlock_t *lock)
+static inline void arch_read_lock(arch_rwlock_t *lock)
 {
 	unsigned long tmp1, tmp2;
 
 	__asm__ __volatile__ (
 "1:	ldsw		[%2], %0\n"
 "	brlz,pn		%0, 2f\n"
-"4:	 add		%0, 1, %1\n"
+"4:	 addcc		%0, 1, %1\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+"	tvs		%%icc, 6\n"
+#endif
+
 "	cas		[%2], %0, %1\n"
 "	cmp		%0, %1\n"
 "	bne,pn		%%icc, 1b\n"
@@ -112,10 +117,10 @@ static void inline arch_read_lock(arch_r
 "	.previous"
 	: "=&r" (tmp1), "=&r" (tmp2)
 	: "r" (lock)
-	: "memory");
+	: "memory", "cc");
 }
 
-static int inline arch_read_trylock(arch_rwlock_t *lock)
+static inline int arch_read_trylock(arch_rwlock_t *lock)
 {
 	int tmp1, tmp2;
 
@@ -123,7 +128,12 @@ static int inline arch_read_trylock(arch
 "1:	ldsw		[%2], %0\n"
 "	brlz,a,pn	%0, 2f\n"
 "	 mov		0, %0\n"
-"	add		%0, 1, %1\n"
+"	addcc		%0, 1, %1\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+"	tvs		%%icc, 6\n"
+#endif
+
 "	cas		[%2], %0, %1\n"
 "	cmp		%0, %1\n"
 "	bne,pn		%%icc, 1b\n"
@@ -136,13 +146,18 @@ static int inline arch_read_trylock(arch
 	return tmp1;
 }
 
-static void inline arch_read_unlock(arch_rwlock_t *lock)
+static inline void arch_read_unlock(arch_rwlock_t *lock)
 {
 	unsigned long tmp1, tmp2;
 
 	__asm__ __volatile__(
 "1:	lduw	[%2], %0\n"
-"	sub	%0, 1, %1\n"
+"	subcc	%0, 1, %1\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+"	tvs	%%icc, 6\n"
+#endif
+
 "	cas	[%2], %0, %1\n"
 "	cmp	%0, %1\n"
 "	bne,pn	%%xcc, 1b\n"
@@ -152,7 +167,7 @@ static void inline arch_read_unlock(arch
 	: "memory");
 }
 
-static void inline arch_write_lock(arch_rwlock_t *lock)
+static inline void arch_write_lock(arch_rwlock_t *lock)
 {
 	unsigned long mask, tmp1, tmp2;
 
@@ -177,7 +192,7 @@ static void inline arch_write_lock(arch_
 	: "memory");
 }
 
-static void inline arch_write_unlock(arch_rwlock_t *lock)
+static inline void arch_write_unlock(arch_rwlock_t *lock)
 {
 	__asm__ __volatile__(
 "	stw		%%g0, [%0]"
@@ -186,7 +201,7 @@ static void inline arch_write_unlock(arc
 	: "memory");
 }
 
-static int inline arch_write_trylock(arch_rwlock_t *lock)
+static inline int arch_write_trylock(arch_rwlock_t *lock)
 {
 	unsigned long mask, tmp1, tmp2, result;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/sparc/include/asm/thread_info_32.h linux-3.3.8-pax/arch/sparc/include/asm/thread_info_32.h
--- linux-3.3.8/arch/sparc/include/asm/thread_info_32.h	2012-03-19 10:38:55.976050030 +0100
+++ linux-3.3.8-pax/arch/sparc/include/asm/thread_info_32.h	2012-03-19 10:43:43.000034718 +0100
@@ -50,6 +50,8 @@ struct thread_info {
 	unsigned long		w_saved;
 
 	struct restart_block	restart_block;
+
+	unsigned long		lowest_stack;
 };
 
 /*
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/sparc/include/asm/thread_info_64.h linux-3.3.8-pax/arch/sparc/include/asm/thread_info_64.h
--- linux-3.3.8/arch/sparc/include/asm/thread_info_64.h	2012-03-19 10:38:55.976050030 +0100
+++ linux-3.3.8-pax/arch/sparc/include/asm/thread_info_64.h	2012-03-19 10:43:43.000034718 +0100
@@ -63,6 +63,8 @@ struct thread_info {
 	struct pt_regs		*kern_una_regs;
 	unsigned int		kern_una_insn;
 
+	unsigned long		lowest_stack;
+
 	unsigned long		fpregs[0] __attribute__ ((aligned(64)));
 };
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/sparc/include/asm/uaccess_32.h linux-3.3.8-pax/arch/sparc/include/asm/uaccess_32.h
--- linux-3.3.8/arch/sparc/include/asm/uaccess_32.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/sparc/include/asm/uaccess_32.h	2012-03-19 10:43:43.000034718 +0100
@@ -249,27 +249,46 @@ extern unsigned long __copy_user(void __
 
 static inline unsigned long copy_to_user(void __user *to, const void *from, unsigned long n)
 {
-	if (n && __access_ok((unsigned long) to, n))
+	if ((long)n < 0)
+		return n;
+
+	if (n && __access_ok((unsigned long) to, n)) {
+		if (!__builtin_constant_p(n))
+			check_object_size(from, n, true);
 		return __copy_user(to, (__force void __user *) from, n);
-	else
+	} else
 		return n;
 }
 
 static inline unsigned long __copy_to_user(void __user *to, const void *from, unsigned long n)
 {
+	if ((long)n < 0)
+		return n;
+
+	if (!__builtin_constant_p(n))
+		check_object_size(from, n, true);
+
 	return __copy_user(to, (__force void __user *) from, n);
 }
 
 static inline unsigned long copy_from_user(void *to, const void __user *from, unsigned long n)
 {
-	if (n && __access_ok((unsigned long) from, n))
+	if ((long)n < 0)
+		return n;
+
+	if (n && __access_ok((unsigned long) from, n)) {
+		if (!__builtin_constant_p(n))
+			check_object_size(to, n, false);
 		return __copy_user((__force void __user *) to, from, n);
-	else
+	} else
 		return n;
 }
 
 static inline unsigned long __copy_from_user(void *to, const void __user *from, unsigned long n)
 {
+	if ((long)n < 0)
+		return n;
+
 	return __copy_user((__force void __user *) to, from, n);
 }
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/sparc/include/asm/uaccess_64.h linux-3.3.8-pax/arch/sparc/include/asm/uaccess_64.h
--- linux-3.3.8/arch/sparc/include/asm/uaccess_64.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/sparc/include/asm/uaccess_64.h	2012-03-19 10:43:43.004034718 +0100
@@ -10,6 +10,7 @@
 #include <linux/compiler.h>
 #include <linux/string.h>
 #include <linux/thread_info.h>
+#include <linux/kernel.h>
 #include <asm/asi.h>
 #include <asm/system.h>
 #include <asm/spitfire.h>
@@ -213,8 +214,15 @@ extern unsigned long copy_from_user_fixu
 static inline unsigned long __must_check
 copy_from_user(void *to, const void __user *from, unsigned long size)
 {
-	unsigned long ret = ___copy_from_user(to, from, size);
+	unsigned long ret;
 
+	if ((long)size < 0 || size > INT_MAX)
+		return size;
+
+	if (!__builtin_constant_p(size))
+		check_object_size(to, size, false);
+
+	ret = ___copy_from_user(to, from, size);
 	if (unlikely(ret))
 		ret = copy_from_user_fixup(to, from, size);
 
@@ -230,8 +238,15 @@ extern unsigned long copy_to_user_fixup(
 static inline unsigned long __must_check
 copy_to_user(void __user *to, const void *from, unsigned long size)
 {
-	unsigned long ret = ___copy_to_user(to, from, size);
+	unsigned long ret;
+
+	if ((long)size < 0 || size > INT_MAX)
+		return size;
+
+	if (!__builtin_constant_p(size))
+		check_object_size(from, size, true);
 
+	ret = ___copy_to_user(to, from, size);
 	if (unlikely(ret))
 		ret = copy_to_user_fixup(to, from, size);
 	return ret;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/sparc/include/asm/uaccess.h linux-3.3.8-pax/arch/sparc/include/asm/uaccess.h
--- linux-3.3.8/arch/sparc/include/asm/uaccess.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/sparc/include/asm/uaccess.h	2012-03-19 10:43:43.004034718 +0100
@@ -1,5 +1,13 @@
 #ifndef ___ASM_SPARC_UACCESS_H
 #define ___ASM_SPARC_UACCESS_H
+
+#ifdef __KERNEL__
+#ifndef __ASSEMBLY__
+#include <linux/types.h>
+extern void check_object_size(const void *ptr, unsigned long n, bool to);
+#endif
+#endif
+
 #if defined(__sparc__) && defined(__arch64__)
 #include <asm/uaccess_64.h>
 #else
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/sparc/kernel/Makefile linux-3.3.8-pax/arch/sparc/kernel/Makefile
--- linux-3.3.8/arch/sparc/kernel/Makefile	2011-10-24 12:48:25.691091803 +0200
+++ linux-3.3.8-pax/arch/sparc/kernel/Makefile	2012-03-19 10:43:43.004034718 +0100
@@ -3,7 +3,7 @@
 #
 
 asflags-y := -ansi
-ccflags-y := -Werror
+#ccflags-y := -Werror
 
 extra-y     := head_$(BITS).o
 extra-y     += init_task.o
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/sparc/kernel/sys_sparc_32.c linux-3.3.8-pax/arch/sparc/kernel/sys_sparc_32.c
--- linux-3.3.8/arch/sparc/kernel/sys_sparc_32.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/sparc/kernel/sys_sparc_32.c	2012-03-19 10:43:43.004034718 +0100
@@ -56,7 +56,7 @@ unsigned long arch_get_unmapped_area(str
 	if (ARCH_SUN4C && len > 0x20000000)
 		return -ENOMEM;
 	if (!addr)
-		addr = TASK_UNMAPPED_BASE;
+		addr = current->mm->mmap_base;
 
 	if (flags & MAP_SHARED)
 		addr = COLOUR_ALIGN(addr);
@@ -71,7 +71,7 @@ unsigned long arch_get_unmapped_area(str
 		}
 		if (TASK_SIZE - PAGE_SIZE - len < addr)
 			return -ENOMEM;
-		if (!vmm || addr + len <= vmm->vm_start)
+		if (check_heap_stack_gap(vmm, addr, len))
 			return addr;
 		addr = vmm->vm_end;
 		if (flags & MAP_SHARED)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/sparc/kernel/sys_sparc_64.c linux-3.3.8-pax/arch/sparc/kernel/sys_sparc_64.c
--- linux-3.3.8/arch/sparc/kernel/sys_sparc_64.c	2012-03-19 10:38:56.048050026 +0100
+++ linux-3.3.8-pax/arch/sparc/kernel/sys_sparc_64.c	2012-03-19 10:43:43.004034718 +0100
@@ -124,7 +124,7 @@ unsigned long arch_get_unmapped_area(str
 		/* We do not accept a shared mapping if it would violate
 		 * cache aliasing constraints.
 		 */
-		if ((flags & MAP_SHARED) &&
+		if ((filp || (flags & MAP_SHARED)) &&
 		    ((addr - (pgoff << PAGE_SHIFT)) & (SHMLBA - 1)))
 			return -EINVAL;
 		return addr;
@@ -139,6 +139,10 @@ unsigned long arch_get_unmapped_area(str
 	if (filp || (flags & MAP_SHARED))
 		do_color_align = 1;
 
+#ifdef CONFIG_PAX_RANDMMAP
+	if (!(mm->pax_flags & MF_PAX_RANDMMAP))
+#endif
+
 	if (addr) {
 		if (do_color_align)
 			addr = COLOUR_ALIGN(addr, pgoff);
@@ -146,15 +150,14 @@ unsigned long arch_get_unmapped_area(str
 			addr = PAGE_ALIGN(addr);
 
 		vma = find_vma(mm, addr);
-		if (task_size - len >= addr &&
-		    (!vma || addr + len <= vma->vm_start))
+		if (task_size - len >= addr && check_heap_stack_gap(vma, addr, len))
 			return addr;
 	}
 
 	if (len > mm->cached_hole_size) {
-	        start_addr = addr = mm->free_area_cache;
+		start_addr = addr = mm->free_area_cache;
 	} else {
-	        start_addr = addr = TASK_UNMAPPED_BASE;
+		start_addr = addr = mm->mmap_base;
 	        mm->cached_hole_size = 0;
 	}
 
@@ -174,14 +177,14 @@ full_search:
 			vma = find_vma(mm, VA_EXCLUDE_END);
 		}
 		if (unlikely(task_size < addr)) {
-			if (start_addr != TASK_UNMAPPED_BASE) {
-				start_addr = addr = TASK_UNMAPPED_BASE;
+			if (start_addr != mm->mmap_base) {
+				start_addr = addr = mm->mmap_base;
 				mm->cached_hole_size = 0;
 				goto full_search;
 			}
 			return -ENOMEM;
 		}
-		if (likely(!vma || addr + len <= vma->vm_start)) {
+		if (likely(check_heap_stack_gap(vma, addr, len))) {
 			/*
 			 * Remember the place where we stopped the search:
 			 */
@@ -215,7 +218,7 @@ arch_get_unmapped_area_topdown(struct fi
 		/* We do not accept a shared mapping if it would violate
 		 * cache aliasing constraints.
 		 */
-		if ((flags & MAP_SHARED) &&
+		if ((filp || (flags & MAP_SHARED)) &&
 		    ((addr - (pgoff << PAGE_SHIFT)) & (SHMLBA - 1)))
 			return -EINVAL;
 		return addr;
@@ -236,8 +239,7 @@ arch_get_unmapped_area_topdown(struct fi
 			addr = PAGE_ALIGN(addr);
 
 		vma = find_vma(mm, addr);
-		if (task_size - len >= addr &&
-		    (!vma || addr + len <= vma->vm_start))
+		if (task_size - len >= addr && check_heap_stack_gap(vma, addr, len))
 			return addr;
 	}
 
@@ -258,7 +260,7 @@ arch_get_unmapped_area_topdown(struct fi
 	/* make sure it can fit in the remaining address space */
 	if (likely(addr > len)) {
 		vma = find_vma(mm, addr-len);
-		if (!vma || addr <= vma->vm_start) {
+		if (check_heap_stack_gap(vma, addr - len, len)) {
 			/* remember the address as a hint for next time */
 			return (mm->free_area_cache = addr-len);
 		}
@@ -267,18 +269,18 @@ arch_get_unmapped_area_topdown(struct fi
 	if (unlikely(mm->mmap_base < len))
 		goto bottomup;
 
-	addr = mm->mmap_base-len;
-	if (do_color_align)
-		addr = COLOUR_ALIGN_DOWN(addr, pgoff);
+	addr = mm->mmap_base - len;
 
 	do {
+		if (do_color_align)
+			addr = COLOUR_ALIGN_DOWN(addr, pgoff);
 		/*
 		 * Lookup failure means no vma is above this address,
 		 * else if new region fits below vma->vm_start,
 		 * return with success:
 		 */
 		vma = find_vma(mm, addr);
-		if (likely(!vma || addr+len <= vma->vm_start)) {
+		if (likely(check_heap_stack_gap(vma, addr, len))) {
 			/* remember the address as a hint for next time */
 			return (mm->free_area_cache = addr);
 		}
@@ -288,10 +290,8 @@ arch_get_unmapped_area_topdown(struct fi
  		        mm->cached_hole_size = vma->vm_start - addr;
 
 		/* try just below the current vma->vm_start */
-		addr = vma->vm_start-len;
-		if (do_color_align)
-			addr = COLOUR_ALIGN_DOWN(addr, pgoff);
-	} while (likely(len < vma->vm_start));
+		addr = skip_heap_stack_gap(vma, len);
+	} while (!IS_ERR_VALUE(addr));
 
 bottomup:
 	/*
@@ -390,6 +390,12 @@ void arch_pick_mmap_layout(struct mm_str
 	    gap == RLIM_INFINITY ||
 	    sysctl_legacy_va_layout) {
 		mm->mmap_base = TASK_UNMAPPED_BASE + random_factor;
+
+#ifdef CONFIG_PAX_RANDMMAP
+		if (mm->pax_flags & MF_PAX_RANDMMAP)
+			mm->mmap_base += mm->delta_mmap;
+#endif
+
 		mm->get_unmapped_area = arch_get_unmapped_area;
 		mm->unmap_area = arch_unmap_area;
 	} else {
@@ -402,6 +408,12 @@ void arch_pick_mmap_layout(struct mm_str
 			gap = (task_size / 6 * 5);
 
 		mm->mmap_base = PAGE_ALIGN(task_size - gap - random_factor);
+
+#ifdef CONFIG_PAX_RANDMMAP
+		if (mm->pax_flags & MF_PAX_RANDMMAP)
+			mm->mmap_base -= mm->delta_mmap + mm->delta_stack;
+#endif
+
 		mm->get_unmapped_area = arch_get_unmapped_area_topdown;
 		mm->unmap_area = arch_unmap_area_topdown;
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/sparc/kernel/traps_64.c linux-3.3.8-pax/arch/sparc/kernel/traps_64.c
--- linux-3.3.8/arch/sparc/kernel/traps_64.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/sparc/kernel/traps_64.c	2012-03-19 10:43:43.008034714 +0100
@@ -95,6 +95,12 @@ void bad_trap(struct pt_regs *regs, long
 
 	lvl -= 0x100;
 	if (regs->tstate & TSTATE_PRIV) {
+
+#ifdef CONFIG_PAX_REFCOUNT
+		if (lvl == 6)
+			pax_report_refcount_overflow(regs);
+#endif
+
 		sprintf(buffer, "Kernel bad sw trap %lx", lvl);
 		die_if_kernel(buffer, regs);
 	}
@@ -113,11 +119,16 @@ void bad_trap(struct pt_regs *regs, long
 void bad_trap_tl1(struct pt_regs *regs, long lvl)
 {
 	char buffer[32];
-	
+
 	if (notify_die(DIE_TRAP_TL1, "bad trap tl1", regs,
 		       0, lvl, SIGTRAP) == NOTIFY_STOP)
 		return;
 
+#ifdef CONFIG_PAX_REFCOUNT
+	if (lvl == 6)
+		pax_report_refcount_overflow(regs);
+#endif
+
 	dump_tl1_traplog((struct tl1_traplog *)(regs + 1));
 
 	sprintf (buffer, "Bad trap %lx at tl>0", lvl);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/sparc/lib/atomic_64.S linux-3.3.8-pax/arch/sparc/lib/atomic_64.S
--- linux-3.3.8/arch/sparc/lib/atomic_64.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/sparc/lib/atomic_64.S	2012-03-19 10:43:43.008034714 +0100
@@ -18,7 +18,12 @@
 atomic_add: /* %o0 = increment, %o1 = atomic_ptr */
 	BACKOFF_SETUP(%o2)
 1:	lduw	[%o1], %g1
-	add	%g1, %o0, %g7
+	addcc	%g1, %o0, %g7
+
+#ifdef CONFIG_PAX_REFCOUNT
+	tvs	%icc, 6
+#endif
+
 	cas	[%o1], %g1, %g7
 	cmp	%g1, %g7
 	bne,pn	%icc, BACKOFF_LABEL(2f, 1b)
@@ -28,12 +33,32 @@ atomic_add: /* %o0 = increment, %o1 = at
 2:	BACKOFF_SPIN(%o2, %o3, 1b)
 	.size	atomic_add, .-atomic_add
 
+	.globl	atomic_add_unchecked
+	.type	atomic_add_unchecked,#function
+atomic_add_unchecked: /* %o0 = increment, %o1 = atomic_ptr */
+	BACKOFF_SETUP(%o2)
+1:	lduw	[%o1], %g1
+	add	%g1, %o0, %g7
+	cas	[%o1], %g1, %g7
+	cmp	%g1, %g7
+	bne,pn	%icc, 2f
+	 nop
+	retl
+	 nop
+2:	BACKOFF_SPIN(%o2, %o3, 1b)
+	.size	atomic_add_unchecked, .-atomic_add_unchecked
+
 	.globl	atomic_sub
 	.type	atomic_sub,#function
 atomic_sub: /* %o0 = decrement, %o1 = atomic_ptr */
 	BACKOFF_SETUP(%o2)
 1:	lduw	[%o1], %g1
-	sub	%g1, %o0, %g7
+	subcc	%g1, %o0, %g7
+
+#ifdef CONFIG_PAX_REFCOUNT
+	tvs	%icc, 6
+#endif
+
 	cas	[%o1], %g1, %g7
 	cmp	%g1, %g7
 	bne,pn	%icc, BACKOFF_LABEL(2f, 1b)
@@ -43,12 +68,32 @@ atomic_sub: /* %o0 = decrement, %o1 = at
 2:	BACKOFF_SPIN(%o2, %o3, 1b)
 	.size	atomic_sub, .-atomic_sub
 
+	.globl	atomic_sub_unchecked
+	.type	atomic_sub_unchecked,#function
+atomic_sub_unchecked: /* %o0 = decrement, %o1 = atomic_ptr */
+	BACKOFF_SETUP(%o2)
+1:	lduw	[%o1], %g1
+	sub	%g1, %o0, %g7
+	cas	[%o1], %g1, %g7
+	cmp	%g1, %g7
+	bne,pn	%icc, 2f
+	 nop
+	retl
+	 nop
+2:	BACKOFF_SPIN(%o2, %o3, 1b)
+	.size	atomic_sub_unchecked, .-atomic_sub_unchecked
+
 	.globl	atomic_add_ret
 	.type	atomic_add_ret,#function
 atomic_add_ret: /* %o0 = increment, %o1 = atomic_ptr */
 	BACKOFF_SETUP(%o2)
 1:	lduw	[%o1], %g1
-	add	%g1, %o0, %g7
+	addcc	%g1, %o0, %g7
+
+#ifdef CONFIG_PAX_REFCOUNT
+	tvs	%icc, 6
+#endif
+
 	cas	[%o1], %g1, %g7
 	cmp	%g1, %g7
 	bne,pn	%icc, BACKOFF_LABEL(2f, 1b)
@@ -58,12 +103,33 @@ atomic_add_ret: /* %o0 = increment, %o1
 2:	BACKOFF_SPIN(%o2, %o3, 1b)
 	.size	atomic_add_ret, .-atomic_add_ret
 
+	.globl	atomic_add_ret_unchecked
+	.type	atomic_add_ret_unchecked,#function
+atomic_add_ret_unchecked: /* %o0 = increment, %o1 = atomic_ptr */
+	BACKOFF_SETUP(%o2)
+1:	lduw	[%o1], %g1
+	addcc	%g1, %o0, %g7
+	cas	[%o1], %g1, %g7
+	cmp	%g1, %g7
+	bne,pn	%icc, 2f
+	 add	%g7, %o0, %g7
+	sra	%g7, 0, %o0
+	retl
+	 nop
+2:	BACKOFF_SPIN(%o2, %o3, 1b)
+	.size	atomic_add_ret_unchecked, .-atomic_add_ret_unchecked
+
 	.globl	atomic_sub_ret
 	.type	atomic_sub_ret,#function
 atomic_sub_ret: /* %o0 = decrement, %o1 = atomic_ptr */
 	BACKOFF_SETUP(%o2)
 1:	lduw	[%o1], %g1
-	sub	%g1, %o0, %g7
+	subcc	%g1, %o0, %g7
+
+#ifdef CONFIG_PAX_REFCOUNT
+	tvs	%icc, 6
+#endif
+
 	cas	[%o1], %g1, %g7
 	cmp	%g1, %g7
 	bne,pn	%icc, BACKOFF_LABEL(2f, 1b)
@@ -78,7 +144,12 @@ atomic_sub_ret: /* %o0 = decrement, %o1
 atomic64_add: /* %o0 = increment, %o1 = atomic_ptr */
 	BACKOFF_SETUP(%o2)
 1:	ldx	[%o1], %g1
-	add	%g1, %o0, %g7
+	addcc	%g1, %o0, %g7
+
+#ifdef CONFIG_PAX_REFCOUNT
+	tvs	%xcc, 6
+#endif
+
 	casx	[%o1], %g1, %g7
 	cmp	%g1, %g7
 	bne,pn	%xcc, BACKOFF_LABEL(2f, 1b)
@@ -88,12 +159,32 @@ atomic64_add: /* %o0 = increment, %o1 =
 2:	BACKOFF_SPIN(%o2, %o3, 1b)
 	.size	atomic64_add, .-atomic64_add
 
+	.globl	atomic64_add_unchecked
+	.type	atomic64_add_unchecked,#function
+atomic64_add_unchecked: /* %o0 = increment, %o1 = atomic_ptr */
+	BACKOFF_SETUP(%o2)
+1:	ldx	[%o1], %g1
+	addcc	%g1, %o0, %g7
+	casx	[%o1], %g1, %g7
+	cmp	%g1, %g7
+	bne,pn	%xcc, 2f
+	 nop
+	retl
+	 nop
+2:	BACKOFF_SPIN(%o2, %o3, 1b)
+	.size	atomic64_add_unchecked, .-atomic64_add_unchecked
+
 	.globl	atomic64_sub
 	.type	atomic64_sub,#function
 atomic64_sub: /* %o0 = decrement, %o1 = atomic_ptr */
 	BACKOFF_SETUP(%o2)
 1:	ldx	[%o1], %g1
-	sub	%g1, %o0, %g7
+	subcc	%g1, %o0, %g7
+
+#ifdef CONFIG_PAX_REFCOUNT
+	tvs	%xcc, 6
+#endif
+
 	casx	[%o1], %g1, %g7
 	cmp	%g1, %g7
 	bne,pn	%xcc, BACKOFF_LABEL(2f, 1b)
@@ -103,12 +194,32 @@ atomic64_sub: /* %o0 = decrement, %o1 =
 2:	BACKOFF_SPIN(%o2, %o3, 1b)
 	.size	atomic64_sub, .-atomic64_sub
 
+	.globl	atomic64_sub_unchecked
+	.type	atomic64_sub_unchecked,#function
+atomic64_sub_unchecked: /* %o0 = decrement, %o1 = atomic_ptr */
+	BACKOFF_SETUP(%o2)
+1:	ldx	[%o1], %g1
+	subcc	%g1, %o0, %g7
+	casx	[%o1], %g1, %g7
+	cmp	%g1, %g7
+	bne,pn	%xcc, 2f
+	 nop
+	retl
+	 nop
+2:	BACKOFF_SPIN(%o2, %o3, 1b)
+	.size	atomic64_sub_unchecked, .-atomic64_sub_unchecked
+
 	.globl	atomic64_add_ret
 	.type	atomic64_add_ret,#function
 atomic64_add_ret: /* %o0 = increment, %o1 = atomic_ptr */
 	BACKOFF_SETUP(%o2)
 1:	ldx	[%o1], %g1
-	add	%g1, %o0, %g7
+	addcc	%g1, %o0, %g7
+
+#ifdef CONFIG_PAX_REFCOUNT
+	tvs	%xcc, 6
+#endif
+
 	casx	[%o1], %g1, %g7
 	cmp	%g1, %g7
 	bne,pn	%xcc, BACKOFF_LABEL(2f, 1b)
@@ -118,12 +229,33 @@ atomic64_add_ret: /* %o0 = increment, %o
 2:	BACKOFF_SPIN(%o2, %o3, 1b)
 	.size	atomic64_add_ret, .-atomic64_add_ret
 
+	.globl	atomic64_add_ret_unchecked
+	.type	atomic64_add_ret_unchecked,#function
+atomic64_add_ret_unchecked: /* %o0 = increment, %o1 = atomic_ptr */
+	BACKOFF_SETUP(%o2)
+1:	ldx	[%o1], %g1
+	addcc	%g1, %o0, %g7
+	casx	[%o1], %g1, %g7
+	cmp	%g1, %g7
+	bne,pn	%xcc, 2f
+	 add	%g7, %o0, %g7
+	mov	%g7, %o0
+	retl
+	 nop
+2:	BACKOFF_SPIN(%o2, %o3, 1b)
+	.size	atomic64_add_ret_unchecked, .-atomic64_add_ret_unchecked
+
 	.globl	atomic64_sub_ret
 	.type	atomic64_sub_ret,#function
 atomic64_sub_ret: /* %o0 = decrement, %o1 = atomic_ptr */
 	BACKOFF_SETUP(%o2)
 1:	ldx	[%o1], %g1
-	sub	%g1, %o0, %g7
+	subcc	%g1, %o0, %g7
+
+#ifdef CONFIG_PAX_REFCOUNT
+	tvs	%xcc, 6
+#endif
+
 	casx	[%o1], %g1, %g7
 	cmp	%g1, %g7
 	bne,pn	%xcc, BACKOFF_LABEL(2f, 1b)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/sparc/lib/ksyms.c linux-3.3.8-pax/arch/sparc/lib/ksyms.c
--- linux-3.3.8/arch/sparc/lib/ksyms.c	2012-03-19 10:38:56.172050019 +0100
+++ linux-3.3.8-pax/arch/sparc/lib/ksyms.c	2012-03-19 10:43:43.008034714 +0100
@@ -136,12 +136,18 @@ EXPORT_SYMBOL(__downgrade_write);
 
 /* Atomic counter implementation. */
 EXPORT_SYMBOL(atomic_add);
+EXPORT_SYMBOL(atomic_add_unchecked);
 EXPORT_SYMBOL(atomic_add_ret);
+EXPORT_SYMBOL(atomic_add_ret_unchecked);
 EXPORT_SYMBOL(atomic_sub);
+EXPORT_SYMBOL(atomic_sub_unchecked);
 EXPORT_SYMBOL(atomic_sub_ret);
 EXPORT_SYMBOL(atomic64_add);
+EXPORT_SYMBOL(atomic64_add_unchecked);
 EXPORT_SYMBOL(atomic64_add_ret);
+EXPORT_SYMBOL(atomic64_add_ret_unchecked);
 EXPORT_SYMBOL(atomic64_sub);
+EXPORT_SYMBOL(atomic64_sub_unchecked);
 EXPORT_SYMBOL(atomic64_sub_ret);
 
 /* Atomic bit operations. */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/sparc/lib/Makefile linux-3.3.8-pax/arch/sparc/lib/Makefile
--- linux-3.3.8/arch/sparc/lib/Makefile	2011-10-24 12:48:25.839091800 +0200
+++ linux-3.3.8-pax/arch/sparc/lib/Makefile	2012-03-19 10:43:43.012034708 +0100
@@ -2,7 +2,7 @@
 #
 
 asflags-y := -ansi -DST_DIV0=0x02
-ccflags-y := -Werror
+#ccflags-y := -Werror
 
 lib-$(CONFIG_SPARC32) += mul.o rem.o sdiv.o udiv.o umul.o urem.o ashrdi3.o
 lib-$(CONFIG_SPARC32) += memcpy.o memset.o
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/sparc/mm/fault_32.c linux-3.3.8-pax/arch/sparc/mm/fault_32.c
--- linux-3.3.8/arch/sparc/mm/fault_32.c	2012-01-08 19:47:47.867473073 +0100
+++ linux-3.3.8-pax/arch/sparc/mm/fault_32.c	2012-03-19 10:43:43.012034708 +0100
@@ -21,6 +21,9 @@
 #include <linux/perf_event.h>
 #include <linux/interrupt.h>
 #include <linux/kdebug.h>
+#include <linux/slab.h>
+#include <linux/pagemap.h>
+#include <linux/compiler.h>
 
 #include <asm/system.h>
 #include <asm/page.h>
@@ -208,6 +211,268 @@ static unsigned long compute_si_addr(str
 	return safe_compute_effective_address(regs, insn);
 }
 
+#ifdef CONFIG_PAX_PAGEEXEC
+#ifdef CONFIG_PAX_DLRESOLVE
+static void pax_emuplt_close(struct vm_area_struct *vma)
+{
+	vma->vm_mm->call_dl_resolve = 0UL;
+}
+
+static int pax_emuplt_fault(struct vm_area_struct *vma, struct vm_fault *vmf)
+{
+	unsigned int *kaddr;
+
+	vmf->page = alloc_page(GFP_HIGHUSER);
+	if (!vmf->page)
+		return VM_FAULT_OOM;
+
+	kaddr = kmap(vmf->page);
+	memset(kaddr, 0, PAGE_SIZE);
+	kaddr[0] = 0x9DE3BFA8U; /* save */
+	flush_dcache_page(vmf->page);
+	kunmap(vmf->page);
+	return VM_FAULT_MAJOR;
+}
+
+static const struct vm_operations_struct pax_vm_ops = {
+	.close = pax_emuplt_close,
+	.fault = pax_emuplt_fault
+};
+
+static int pax_insert_vma(struct vm_area_struct *vma, unsigned long addr)
+{
+	int ret;
+
+	INIT_LIST_HEAD(&vma->anon_vma_chain);
+	vma->vm_mm = current->mm;
+	vma->vm_start = addr;
+	vma->vm_end = addr + PAGE_SIZE;
+	vma->vm_flags = VM_READ | VM_EXEC | VM_MAYREAD | VM_MAYEXEC;
+	vma->vm_page_prot = vm_get_page_prot(vma->vm_flags);
+	vma->vm_ops = &pax_vm_ops;
+
+	ret = insert_vm_struct(current->mm, vma);
+	if (ret)
+		return ret;
+
+	++current->mm->total_vm;
+	return 0;
+}
+#endif
+
+/*
+ * PaX: decide what to do with offenders (regs->pc = fault address)
+ *
+ * returns 1 when task should be killed
+ *         2 when patched PLT trampoline was detected
+ *         3 when unpatched PLT trampoline was detected
+ */
+static int pax_handle_fetch_fault(struct pt_regs *regs)
+{
+
+#ifdef CONFIG_PAX_EMUPLT
+	int err;
+
+	do { /* PaX: patched PLT emulation #1 */
+		unsigned int sethi1, sethi2, jmpl;
+
+		err = get_user(sethi1, (unsigned int *)regs->pc);
+		err |= get_user(sethi2, (unsigned int *)(regs->pc+4));
+		err |= get_user(jmpl, (unsigned int *)(regs->pc+8));
+
+		if (err)
+			break;
+
+		if ((sethi1 & 0xFFC00000U) == 0x03000000U &&
+		    (sethi2 & 0xFFC00000U) == 0x03000000U &&
+		    (jmpl & 0xFFFFE000U) == 0x81C06000U)
+		{
+			unsigned int addr;
+
+			regs->u_regs[UREG_G1] = (sethi2 & 0x003FFFFFU) << 10;
+			addr = regs->u_regs[UREG_G1];
+			addr += (((jmpl | 0xFFFFE000U) ^ 0x00001000U) + 0x00001000U);
+			regs->pc = addr;
+			regs->npc = addr+4;
+			return 2;
+		}
+	} while (0);
+
+	{ /* PaX: patched PLT emulation #2 */
+		unsigned int ba;
+
+		err = get_user(ba, (unsigned int *)regs->pc);
+
+		if (!err && (ba & 0xFFC00000U) == 0x30800000U) {
+			unsigned int addr;
+
+			addr = regs->pc + ((((ba | 0xFFC00000U) ^ 0x00200000U) + 0x00200000U) << 2);
+			regs->pc = addr;
+			regs->npc = addr+4;
+			return 2;
+		}
+	}
+
+	do { /* PaX: patched PLT emulation #3 */
+		unsigned int sethi, jmpl, nop;
+
+		err = get_user(sethi, (unsigned int *)regs->pc);
+		err |= get_user(jmpl, (unsigned int *)(regs->pc+4));
+		err |= get_user(nop, (unsigned int *)(regs->pc+8));
+
+		if (err)
+			break;
+
+		if ((sethi & 0xFFC00000U) == 0x03000000U &&
+		    (jmpl & 0xFFFFE000U) == 0x81C06000U &&
+		    nop == 0x01000000U)
+		{
+			unsigned int addr;
+
+			addr = (sethi & 0x003FFFFFU) << 10;
+			regs->u_regs[UREG_G1] = addr;
+			addr += (((jmpl | 0xFFFFE000U) ^ 0x00001000U) + 0x00001000U);
+			regs->pc = addr;
+			regs->npc = addr+4;
+			return 2;
+		}
+	} while (0);
+
+	do { /* PaX: unpatched PLT emulation step 1 */
+		unsigned int sethi, ba, nop;
+
+		err = get_user(sethi, (unsigned int *)regs->pc);
+		err |= get_user(ba, (unsigned int *)(regs->pc+4));
+		err |= get_user(nop, (unsigned int *)(regs->pc+8));
+
+		if (err)
+			break;
+
+		if ((sethi & 0xFFC00000U) == 0x03000000U &&
+		    ((ba & 0xFFC00000U) == 0x30800000U || (ba & 0xFFF80000U) == 0x30680000U) &&
+		    nop == 0x01000000U)
+		{
+			unsigned int addr, save, call;
+
+			if ((ba & 0xFFC00000U) == 0x30800000U)
+				addr = regs->pc + 4 + ((((ba | 0xFFC00000U) ^ 0x00200000U) + 0x00200000U) << 2);
+			else
+				addr = regs->pc + 4 + ((((ba | 0xFFF80000U) ^ 0x00040000U) + 0x00040000U) << 2);
+
+			err = get_user(save, (unsigned int *)addr);
+			err |= get_user(call, (unsigned int *)(addr+4));
+			err |= get_user(nop, (unsigned int *)(addr+8));
+			if (err)
+				break;
+
+#ifdef CONFIG_PAX_DLRESOLVE
+			if (save == 0x9DE3BFA8U &&
+			    (call & 0xC0000000U) == 0x40000000U &&
+			    nop == 0x01000000U)
+			{
+				struct vm_area_struct *vma;
+				unsigned long call_dl_resolve;
+
+				down_read(&current->mm->mmap_sem);
+				call_dl_resolve = current->mm->call_dl_resolve;
+				up_read(&current->mm->mmap_sem);
+				if (likely(call_dl_resolve))
+					goto emulate;
+
+				vma = kmem_cache_zalloc(vm_area_cachep, GFP_KERNEL);
+
+				down_write(&current->mm->mmap_sem);
+				if (current->mm->call_dl_resolve) {
+					call_dl_resolve = current->mm->call_dl_resolve;
+					up_write(&current->mm->mmap_sem);
+					if (vma)
+						kmem_cache_free(vm_area_cachep, vma);
+					goto emulate;
+				}
+
+				call_dl_resolve = get_unmapped_area(NULL, 0UL, PAGE_SIZE, 0UL, MAP_PRIVATE);
+				if (!vma || (call_dl_resolve & ~PAGE_MASK)) {
+					up_write(&current->mm->mmap_sem);
+					if (vma)
+						kmem_cache_free(vm_area_cachep, vma);
+					return 1;
+				}
+
+				if (pax_insert_vma(vma, call_dl_resolve)) {
+					up_write(&current->mm->mmap_sem);
+					kmem_cache_free(vm_area_cachep, vma);
+					return 1;
+				}
+
+				current->mm->call_dl_resolve = call_dl_resolve;
+				up_write(&current->mm->mmap_sem);
+
+emulate:
+				regs->u_regs[UREG_G1] = (sethi & 0x003FFFFFU) << 10;
+				regs->pc = call_dl_resolve;
+				regs->npc = addr+4;
+				return 3;
+			}
+#endif
+
+			/* PaX: glibc 2.4+ generates sethi/jmpl instead of save/call */
+			if ((save & 0xFFC00000U) == 0x05000000U &&
+			    (call & 0xFFFFE000U) == 0x85C0A000U &&
+			    nop == 0x01000000U)
+			{
+				regs->u_regs[UREG_G1] = (sethi & 0x003FFFFFU) << 10;
+				regs->u_regs[UREG_G2] = addr + 4;
+				addr = (save & 0x003FFFFFU) << 10;
+				addr += (((call | 0xFFFFE000U) ^ 0x00001000U) + 0x00001000U);
+				regs->pc = addr;
+				regs->npc = addr+4;
+				return 3;
+			}
+		}
+	} while (0);
+
+	do { /* PaX: unpatched PLT emulation step 2 */
+		unsigned int save, call, nop;
+
+		err = get_user(save, (unsigned int *)(regs->pc-4));
+		err |= get_user(call, (unsigned int *)regs->pc);
+		err |= get_user(nop, (unsigned int *)(regs->pc+4));
+		if (err)
+			break;
+
+		if (save == 0x9DE3BFA8U &&
+		    (call & 0xC0000000U) == 0x40000000U &&
+		    nop == 0x01000000U)
+		{
+			unsigned int dl_resolve = regs->pc + ((((call | 0xC0000000U) ^ 0x20000000U) + 0x20000000U) << 2);
+
+			regs->u_regs[UREG_RETPC] = regs->pc;
+			regs->pc = dl_resolve;
+			regs->npc = dl_resolve+4;
+			return 3;
+		}
+	} while (0);
+#endif
+
+	return 1;
+}
+
+void pax_report_insns(struct pt_regs *regs, void *pc, void *sp)
+{
+	unsigned long i;
+
+	printk(KERN_ERR "PAX: bytes at PC: ");
+	for (i = 0; i < 8; i++) {
+		unsigned int c;
+		if (get_user(c, (unsigned int *)pc+i))
+			printk(KERN_CONT "???????? ");
+		else
+			printk(KERN_CONT "%08x ", c);
+	}
+	printk("\n");
+}
+#endif
+
 static noinline void do_fault_siginfo(int code, int sig, struct pt_regs *regs,
 				      int text_fault)
 {
@@ -280,6 +545,24 @@ good_area:
 		if(!(vma->vm_flags & VM_WRITE))
 			goto bad_area;
 	} else {
+
+#ifdef CONFIG_PAX_PAGEEXEC
+		if ((mm->pax_flags & MF_PAX_PAGEEXEC) && text_fault && !(vma->vm_flags & VM_EXEC)) {
+			up_read(&mm->mmap_sem);
+			switch (pax_handle_fetch_fault(regs)) {
+
+#ifdef CONFIG_PAX_EMUPLT
+			case 2:
+			case 3:
+				return;
+#endif
+
+			}
+			pax_report_fault(regs, (void *)regs->pc, (void *)regs->u_regs[UREG_FP]);
+			do_group_exit(SIGKILL);
+		}
+#endif
+
 		/* Allow reads even for write-only mappings */
 		if(!(vma->vm_flags & (VM_READ | VM_EXEC)))
 			goto bad_area;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/sparc/mm/fault_64.c linux-3.3.8-pax/arch/sparc/mm/fault_64.c
--- linux-3.3.8/arch/sparc/mm/fault_64.c	2011-10-24 12:48:25.847091798 +0200
+++ linux-3.3.8-pax/arch/sparc/mm/fault_64.c	2012-03-19 10:43:43.012034708 +0100
@@ -21,6 +21,9 @@
 #include <linux/kprobes.h>
 #include <linux/kdebug.h>
 #include <linux/percpu.h>
+#include <linux/slab.h>
+#include <linux/pagemap.h>
+#include <linux/compiler.h>
 
 #include <asm/page.h>
 #include <asm/pgtable.h>
@@ -272,6 +275,457 @@ static void noinline __kprobes bogus_32b
 	show_regs(regs);
 }
 
+#ifdef CONFIG_PAX_PAGEEXEC
+#ifdef CONFIG_PAX_DLRESOLVE
+static void pax_emuplt_close(struct vm_area_struct *vma)
+{
+	vma->vm_mm->call_dl_resolve = 0UL;
+}
+
+static int pax_emuplt_fault(struct vm_area_struct *vma, struct vm_fault *vmf)
+{
+	unsigned int *kaddr;
+
+	vmf->page = alloc_page(GFP_HIGHUSER);
+	if (!vmf->page)
+		return VM_FAULT_OOM;
+
+	kaddr = kmap(vmf->page);
+	memset(kaddr, 0, PAGE_SIZE);
+	kaddr[0] = 0x9DE3BFA8U; /* save */
+	flush_dcache_page(vmf->page);
+	kunmap(vmf->page);
+	return VM_FAULT_MAJOR;
+}
+
+static const struct vm_operations_struct pax_vm_ops = {
+	.close = pax_emuplt_close,
+	.fault = pax_emuplt_fault
+};
+
+static int pax_insert_vma(struct vm_area_struct *vma, unsigned long addr)
+{
+	int ret;
+
+	INIT_LIST_HEAD(&vma->anon_vma_chain);
+	vma->vm_mm = current->mm;
+	vma->vm_start = addr;
+	vma->vm_end = addr + PAGE_SIZE;
+	vma->vm_flags = VM_READ | VM_EXEC | VM_MAYREAD | VM_MAYEXEC;
+	vma->vm_page_prot = vm_get_page_prot(vma->vm_flags);
+	vma->vm_ops = &pax_vm_ops;
+
+	ret = insert_vm_struct(current->mm, vma);
+	if (ret)
+		return ret;
+
+	++current->mm->total_vm;
+	return 0;
+}
+#endif
+
+/*
+ * PaX: decide what to do with offenders (regs->tpc = fault address)
+ *
+ * returns 1 when task should be killed
+ *         2 when patched PLT trampoline was detected
+ *         3 when unpatched PLT trampoline was detected
+ */
+static int pax_handle_fetch_fault(struct pt_regs *regs)
+{
+
+#ifdef CONFIG_PAX_EMUPLT
+	int err;
+
+	do { /* PaX: patched PLT emulation #1 */
+		unsigned int sethi1, sethi2, jmpl;
+
+		err = get_user(sethi1, (unsigned int *)regs->tpc);
+		err |= get_user(sethi2, (unsigned int *)(regs->tpc+4));
+		err |= get_user(jmpl, (unsigned int *)(regs->tpc+8));
+
+		if (err)
+			break;
+
+		if ((sethi1 & 0xFFC00000U) == 0x03000000U &&
+		    (sethi2 & 0xFFC00000U) == 0x03000000U &&
+		    (jmpl & 0xFFFFE000U) == 0x81C06000U)
+		{
+			unsigned long addr;
+
+			regs->u_regs[UREG_G1] = (sethi2 & 0x003FFFFFU) << 10;
+			addr = regs->u_regs[UREG_G1];
+			addr += (((jmpl | 0xFFFFFFFFFFFFE000UL) ^ 0x00001000UL) + 0x00001000UL);
+
+			if (test_thread_flag(TIF_32BIT))
+				addr &= 0xFFFFFFFFUL;
+
+			regs->tpc = addr;
+			regs->tnpc = addr+4;
+			return 2;
+		}
+	} while (0);
+
+	{ /* PaX: patched PLT emulation #2 */
+		unsigned int ba;
+
+		err = get_user(ba, (unsigned int *)regs->tpc);
+
+		if (!err && (ba & 0xFFC00000U) == 0x30800000U) {
+			unsigned long addr;
+
+			addr = regs->tpc + ((((ba | 0xFFFFFFFFFFC00000UL) ^ 0x00200000UL) + 0x00200000UL) << 2);
+
+			if (test_thread_flag(TIF_32BIT))
+				addr &= 0xFFFFFFFFUL;
+
+			regs->tpc = addr;
+			regs->tnpc = addr+4;
+			return 2;
+		}
+	}
+
+	do { /* PaX: patched PLT emulation #3 */
+		unsigned int sethi, jmpl, nop;
+
+		err = get_user(sethi, (unsigned int *)regs->tpc);
+		err |= get_user(jmpl, (unsigned int *)(regs->tpc+4));
+		err |= get_user(nop, (unsigned int *)(regs->tpc+8));
+
+		if (err)
+			break;
+
+		if ((sethi & 0xFFC00000U) == 0x03000000U &&
+		    (jmpl & 0xFFFFE000U) == 0x81C06000U &&
+		    nop == 0x01000000U)
+		{
+			unsigned long addr;
+
+			addr = (sethi & 0x003FFFFFU) << 10;
+			regs->u_regs[UREG_G1] = addr;
+			addr += (((jmpl | 0xFFFFFFFFFFFFE000UL) ^ 0x00001000UL) + 0x00001000UL);
+
+			if (test_thread_flag(TIF_32BIT))
+				addr &= 0xFFFFFFFFUL;
+
+			regs->tpc = addr;
+			regs->tnpc = addr+4;
+			return 2;
+		}
+	} while (0);
+
+	do { /* PaX: patched PLT emulation #4 */
+		unsigned int sethi, mov1, call, mov2;
+
+		err = get_user(sethi, (unsigned int *)regs->tpc);
+		err |= get_user(mov1, (unsigned int *)(regs->tpc+4));
+		err |= get_user(call, (unsigned int *)(regs->tpc+8));
+		err |= get_user(mov2, (unsigned int *)(regs->tpc+12));
+
+		if (err)
+			break;
+
+		if ((sethi & 0xFFC00000U) == 0x03000000U &&
+		    mov1 == 0x8210000FU &&
+		    (call & 0xC0000000U) == 0x40000000U &&
+		    mov2 == 0x9E100001U)
+		{
+			unsigned long addr;
+
+			regs->u_regs[UREG_G1] = regs->u_regs[UREG_RETPC];
+			addr = regs->tpc + 4 + ((((call | 0xFFFFFFFFC0000000UL) ^ 0x20000000UL) + 0x20000000UL) << 2);
+
+			if (test_thread_flag(TIF_32BIT))
+				addr &= 0xFFFFFFFFUL;
+
+			regs->tpc = addr;
+			regs->tnpc = addr+4;
+			return 2;
+		}
+	} while (0);
+
+	do { /* PaX: patched PLT emulation #5 */
+		unsigned int sethi, sethi1, sethi2, or1, or2, sllx, jmpl, nop;
+
+		err = get_user(sethi, (unsigned int *)regs->tpc);
+		err |= get_user(sethi1, (unsigned int *)(regs->tpc+4));
+		err |= get_user(sethi2, (unsigned int *)(regs->tpc+8));
+		err |= get_user(or1, (unsigned int *)(regs->tpc+12));
+		err |= get_user(or2, (unsigned int *)(regs->tpc+16));
+		err |= get_user(sllx, (unsigned int *)(regs->tpc+20));
+		err |= get_user(jmpl, (unsigned int *)(regs->tpc+24));
+		err |= get_user(nop, (unsigned int *)(regs->tpc+28));
+
+		if (err)
+			break;
+
+		if ((sethi & 0xFFC00000U) == 0x03000000U &&
+		    (sethi1 & 0xFFC00000U) == 0x03000000U &&
+		    (sethi2 & 0xFFC00000U) == 0x0B000000U &&
+		    (or1 & 0xFFFFE000U) == 0x82106000U &&
+		    (or2 & 0xFFFFE000U) == 0x8A116000U &&
+		    sllx == 0x83287020U &&
+		    jmpl == 0x81C04005U &&
+		    nop == 0x01000000U)
+		{
+			unsigned long addr;
+
+			regs->u_regs[UREG_G1] = ((sethi1 & 0x003FFFFFU) << 10) | (or1 & 0x000003FFU);
+			regs->u_regs[UREG_G1] <<= 32;
+			regs->u_regs[UREG_G5] = ((sethi2 & 0x003FFFFFU) << 10) | (or2 & 0x000003FFU);
+			addr = regs->u_regs[UREG_G1] + regs->u_regs[UREG_G5];
+			regs->tpc = addr;
+			regs->tnpc = addr+4;
+			return 2;
+		}
+	} while (0);
+
+	do { /* PaX: patched PLT emulation #6 */
+		unsigned int sethi, sethi1, sethi2, sllx, or,  jmpl, nop;
+
+		err = get_user(sethi, (unsigned int *)regs->tpc);
+		err |= get_user(sethi1, (unsigned int *)(regs->tpc+4));
+		err |= get_user(sethi2, (unsigned int *)(regs->tpc+8));
+		err |= get_user(sllx, (unsigned int *)(regs->tpc+12));
+		err |= get_user(or, (unsigned int *)(regs->tpc+16));
+		err |= get_user(jmpl, (unsigned int *)(regs->tpc+20));
+		err |= get_user(nop, (unsigned int *)(regs->tpc+24));
+
+		if (err)
+			break;
+
+		if ((sethi & 0xFFC00000U) == 0x03000000U &&
+		    (sethi1 & 0xFFC00000U) == 0x03000000U &&
+		    (sethi2 & 0xFFC00000U) == 0x0B000000U &&
+		    sllx == 0x83287020U &&
+		    (or & 0xFFFFE000U) == 0x8A116000U &&
+		    jmpl == 0x81C04005U &&
+		    nop == 0x01000000U)
+		{
+			unsigned long addr;
+
+			regs->u_regs[UREG_G1] = (sethi1 & 0x003FFFFFU) << 10;
+			regs->u_regs[UREG_G1] <<= 32;
+			regs->u_regs[UREG_G5] = ((sethi2 & 0x003FFFFFU) << 10) | (or & 0x3FFU);
+			addr = regs->u_regs[UREG_G1] + regs->u_regs[UREG_G5];
+			regs->tpc = addr;
+			regs->tnpc = addr+4;
+			return 2;
+		}
+	} while (0);
+
+	do { /* PaX: unpatched PLT emulation step 1 */
+		unsigned int sethi, ba, nop;
+
+		err = get_user(sethi, (unsigned int *)regs->tpc);
+		err |= get_user(ba, (unsigned int *)(regs->tpc+4));
+		err |= get_user(nop, (unsigned int *)(regs->tpc+8));
+
+		if (err)
+			break;
+
+		if ((sethi & 0xFFC00000U) == 0x03000000U &&
+		    ((ba & 0xFFC00000U) == 0x30800000U || (ba & 0xFFF80000U) == 0x30680000U) &&
+		    nop == 0x01000000U)
+		{
+			unsigned long addr;
+			unsigned int save, call;
+			unsigned int sethi1, sethi2, or1, or2, sllx, add, jmpl;
+
+			if ((ba & 0xFFC00000U) == 0x30800000U)
+				addr = regs->tpc + 4 + ((((ba | 0xFFFFFFFFFFC00000UL) ^ 0x00200000UL) + 0x00200000UL) << 2);
+			else
+				addr = regs->tpc + 4 + ((((ba | 0xFFFFFFFFFFF80000UL) ^ 0x00040000UL) + 0x00040000UL) << 2);
+
+			if (test_thread_flag(TIF_32BIT))
+				addr &= 0xFFFFFFFFUL;
+
+			err = get_user(save, (unsigned int *)addr);
+			err |= get_user(call, (unsigned int *)(addr+4));
+			err |= get_user(nop, (unsigned int *)(addr+8));
+			if (err)
+				break;
+
+#ifdef CONFIG_PAX_DLRESOLVE
+			if (save == 0x9DE3BFA8U &&
+			    (call & 0xC0000000U) == 0x40000000U &&
+			    nop == 0x01000000U)
+			{
+				struct vm_area_struct *vma;
+				unsigned long call_dl_resolve;
+
+				down_read(&current->mm->mmap_sem);
+				call_dl_resolve = current->mm->call_dl_resolve;
+				up_read(&current->mm->mmap_sem);
+				if (likely(call_dl_resolve))
+					goto emulate;
+
+				vma = kmem_cache_zalloc(vm_area_cachep, GFP_KERNEL);
+
+				down_write(&current->mm->mmap_sem);
+				if (current->mm->call_dl_resolve) {
+					call_dl_resolve = current->mm->call_dl_resolve;
+					up_write(&current->mm->mmap_sem);
+					if (vma)
+						kmem_cache_free(vm_area_cachep, vma);
+					goto emulate;
+				}
+
+				call_dl_resolve = get_unmapped_area(NULL, 0UL, PAGE_SIZE, 0UL, MAP_PRIVATE);
+				if (!vma || (call_dl_resolve & ~PAGE_MASK)) {
+					up_write(&current->mm->mmap_sem);
+					if (vma)
+						kmem_cache_free(vm_area_cachep, vma);
+					return 1;
+				}
+
+				if (pax_insert_vma(vma, call_dl_resolve)) {
+					up_write(&current->mm->mmap_sem);
+					kmem_cache_free(vm_area_cachep, vma);
+					return 1;
+				}
+
+				current->mm->call_dl_resolve = call_dl_resolve;
+				up_write(&current->mm->mmap_sem);
+
+emulate:
+				regs->u_regs[UREG_G1] = (sethi & 0x003FFFFFU) << 10;
+				regs->tpc = call_dl_resolve;
+				regs->tnpc = addr+4;
+				return 3;
+			}
+#endif
+
+			/* PaX: glibc 2.4+ generates sethi/jmpl instead of save/call */
+			if ((save & 0xFFC00000U) == 0x05000000U &&
+			    (call & 0xFFFFE000U) == 0x85C0A000U &&
+			    nop == 0x01000000U)
+			{
+				regs->u_regs[UREG_G1] = (sethi & 0x003FFFFFU) << 10;
+				regs->u_regs[UREG_G2] = addr + 4;
+				addr = (save & 0x003FFFFFU) << 10;
+				addr += (((call | 0xFFFFFFFFFFFFE000UL) ^ 0x00001000UL) + 0x00001000UL);
+
+				if (test_thread_flag(TIF_32BIT))
+					addr &= 0xFFFFFFFFUL;
+
+				regs->tpc = addr;
+				regs->tnpc = addr+4;
+				return 3;
+			}
+
+			/* PaX: 64-bit PLT stub */
+			err = get_user(sethi1, (unsigned int *)addr);
+			err |= get_user(sethi2, (unsigned int *)(addr+4));
+			err |= get_user(or1, (unsigned int *)(addr+8));
+			err |= get_user(or2, (unsigned int *)(addr+12));
+			err |= get_user(sllx, (unsigned int *)(addr+16));
+			err |= get_user(add, (unsigned int *)(addr+20));
+			err |= get_user(jmpl, (unsigned int *)(addr+24));
+			err |= get_user(nop, (unsigned int *)(addr+28));
+			if (err)
+				break;
+
+			if ((sethi1 & 0xFFC00000U) == 0x09000000U &&
+			    (sethi2 & 0xFFC00000U) == 0x0B000000U &&
+			    (or1 & 0xFFFFE000U) == 0x88112000U &&
+			    (or2 & 0xFFFFE000U) == 0x8A116000U &&
+			    sllx == 0x89293020U &&
+			    add == 0x8A010005U &&
+			    jmpl == 0x89C14000U &&
+			    nop == 0x01000000U)
+			{
+				regs->u_regs[UREG_G1] = (sethi & 0x003FFFFFU) << 10;
+				regs->u_regs[UREG_G4] = ((sethi1 & 0x003FFFFFU) << 10) | (or1 & 0x000003FFU);
+				regs->u_regs[UREG_G4] <<= 32;
+				regs->u_regs[UREG_G5] = ((sethi2 & 0x003FFFFFU) << 10) | (or2 & 0x000003FFU);
+				regs->u_regs[UREG_G5] += regs->u_regs[UREG_G4];
+				regs->u_regs[UREG_G4] = addr + 24;
+				addr = regs->u_regs[UREG_G5];
+				regs->tpc = addr;
+				regs->tnpc = addr+4;
+				return 3;
+			}
+		}
+	} while (0);
+
+#ifdef CONFIG_PAX_DLRESOLVE
+	do { /* PaX: unpatched PLT emulation step 2 */
+		unsigned int save, call, nop;
+
+		err = get_user(save, (unsigned int *)(regs->tpc-4));
+		err |= get_user(call, (unsigned int *)regs->tpc);
+		err |= get_user(nop, (unsigned int *)(regs->tpc+4));
+		if (err)
+			break;
+
+		if (save == 0x9DE3BFA8U &&
+		    (call & 0xC0000000U) == 0x40000000U &&
+		    nop == 0x01000000U)
+		{
+			unsigned long dl_resolve = regs->tpc + ((((call | 0xFFFFFFFFC0000000UL) ^ 0x20000000UL) + 0x20000000UL) << 2);
+
+			if (test_thread_flag(TIF_32BIT))
+				dl_resolve &= 0xFFFFFFFFUL;
+
+			regs->u_regs[UREG_RETPC] = regs->tpc;
+			regs->tpc = dl_resolve;
+			regs->tnpc = dl_resolve+4;
+			return 3;
+		}
+	} while (0);
+#endif
+
+	do { /* PaX: patched PLT emulation #7, must be AFTER the unpatched PLT emulation */
+		unsigned int sethi, ba, nop;
+
+		err = get_user(sethi, (unsigned int *)regs->tpc);
+		err |= get_user(ba, (unsigned int *)(regs->tpc+4));
+		err |= get_user(nop, (unsigned int *)(regs->tpc+8));
+
+		if (err)
+			break;
+
+		if ((sethi & 0xFFC00000U) == 0x03000000U &&
+		    (ba & 0xFFF00000U) == 0x30600000U &&
+		    nop == 0x01000000U)
+		{
+			unsigned long addr;
+
+			addr = (sethi & 0x003FFFFFU) << 10;
+			regs->u_regs[UREG_G1] = addr;
+			addr = regs->tpc + ((((ba | 0xFFFFFFFFFFF80000UL) ^ 0x00040000UL) + 0x00040000UL) << 2);
+
+			if (test_thread_flag(TIF_32BIT))
+				addr &= 0xFFFFFFFFUL;
+
+			regs->tpc = addr;
+			regs->tnpc = addr+4;
+			return 2;
+		}
+	} while (0);
+
+#endif
+
+	return 1;
+}
+
+void pax_report_insns(struct pt_regs *regs, void *pc, void *sp)
+{
+	unsigned long i;
+
+	printk(KERN_ERR "PAX: bytes at PC: ");
+	for (i = 0; i < 8; i++) {
+		unsigned int c;
+		if (get_user(c, (unsigned int *)pc+i))
+			printk(KERN_CONT "???????? ");
+		else
+			printk(KERN_CONT "%08x ", c);
+	}
+	printk("\n");
+}
+#endif
+
 asmlinkage void __kprobes do_sparc64_fault(struct pt_regs *regs)
 {
 	struct mm_struct *mm = current->mm;
@@ -340,6 +794,29 @@ asmlinkage void __kprobes do_sparc64_fau
 	if (!vma)
 		goto bad_area;
 
+#ifdef CONFIG_PAX_PAGEEXEC
+	/* PaX: detect ITLB misses on non-exec pages */
+	if ((mm->pax_flags & MF_PAX_PAGEEXEC) && vma->vm_start <= address &&
+	    !(vma->vm_flags & VM_EXEC) && (fault_code & FAULT_CODE_ITLB))
+	{
+		if (address != regs->tpc)
+			goto good_area;
+
+		up_read(&mm->mmap_sem);
+		switch (pax_handle_fetch_fault(regs)) {
+
+#ifdef CONFIG_PAX_EMUPLT
+		case 2:
+		case 3:
+			return;
+#endif
+
+		}
+		pax_report_fault(regs, (void *)regs->tpc, (void *)(regs->u_regs[UREG_FP] + STACK_BIAS));
+		do_group_exit(SIGKILL);
+	}
+#endif
+
 	/* Pure DTLB misses do not tell us whether the fault causing
 	 * load/store/atomic was a write or not, it only says that there
 	 * was no match.  So in such a case we (carefully) read the
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/sparc/mm/hugetlbpage.c linux-3.3.8-pax/arch/sparc/mm/hugetlbpage.c
--- linux-3.3.8/arch/sparc/mm/hugetlbpage.c	2012-01-08 19:47:48.099473061 +0100
+++ linux-3.3.8-pax/arch/sparc/mm/hugetlbpage.c	2012-03-19 10:43:43.012034708 +0100
@@ -67,7 +67,7 @@ full_search:
 			}
 			return -ENOMEM;
 		}
-		if (likely(!vma || addr + len <= vma->vm_start)) {
+		if (likely(check_heap_stack_gap(vma, addr, len))) {
 			/*
 			 * Remember the place where we stopped the search:
 			 */
@@ -106,7 +106,7 @@ hugetlb_get_unmapped_area_topdown(struct
 	/* make sure it can fit in the remaining address space */
 	if (likely(addr > len)) {
 		vma = find_vma(mm, addr-len);
-		if (!vma || addr <= vma->vm_start) {
+		if (check_heap_stack_gap(vma, addr - len, len)) {
 			/* remember the address as a hint for next time */
 			return (mm->free_area_cache = addr-len);
 		}
@@ -115,16 +115,17 @@ hugetlb_get_unmapped_area_topdown(struct
 	if (unlikely(mm->mmap_base < len))
 		goto bottomup;
 
-	addr = (mm->mmap_base-len) & HPAGE_MASK;
+	addr = mm->mmap_base - len;
 
 	do {
+		addr &= HPAGE_MASK;
 		/*
 		 * Lookup failure means no vma is above this address,
 		 * else if new region fits below vma->vm_start,
 		 * return with success:
 		 */
 		vma = find_vma(mm, addr);
-		if (likely(!vma || addr+len <= vma->vm_start)) {
+		if (likely(check_heap_stack_gap(vma, addr, len))) {
 			/* remember the address as a hint for next time */
 			return (mm->free_area_cache = addr);
 		}
@@ -134,8 +135,8 @@ hugetlb_get_unmapped_area_topdown(struct
  		        mm->cached_hole_size = vma->vm_start - addr;
 
 		/* try just below the current vma->vm_start */
-		addr = (vma->vm_start-len) & HPAGE_MASK;
-	} while (likely(len < vma->vm_start));
+		addr = skip_heap_stack_gap(vma, len);
+	} while (!IS_ERR_VALUE(addr));
 
 bottomup:
 	/*
@@ -181,8 +182,7 @@ hugetlb_get_unmapped_area(struct file *f
 	if (addr) {
 		addr = ALIGN(addr, HPAGE_SIZE);
 		vma = find_vma(mm, addr);
-		if (task_size - len >= addr &&
-		    (!vma || addr + len <= vma->vm_start))
+		if (task_size - len >= addr && check_heap_stack_gap(vma, addr, len))
 			return addr;
 	}
 	if (mm->get_unmapped_area == arch_get_unmapped_area)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/sparc/mm/init_32.c linux-3.3.8-pax/arch/sparc/mm/init_32.c
--- linux-3.3.8/arch/sparc/mm/init_32.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/sparc/mm/init_32.c	2012-03-19 10:43:43.016034702 +0100
@@ -316,6 +316,9 @@ extern void device_scan(void);
 pgprot_t PAGE_SHARED __read_mostly;
 EXPORT_SYMBOL(PAGE_SHARED);
 
+pgprot_t PAGE_SHARED_NOEXEC __read_mostly;
+EXPORT_SYMBOL(PAGE_SHARED_NOEXEC);
+
 void __init paging_init(void)
 {
 	switch(sparc_cpu_model) {
@@ -344,17 +347,17 @@ void __init paging_init(void)
 
 	/* Initialize the protection map with non-constant, MMU dependent values. */
 	protection_map[0] = PAGE_NONE;
-	protection_map[1] = PAGE_READONLY;
-	protection_map[2] = PAGE_COPY;
-	protection_map[3] = PAGE_COPY;
+	protection_map[1] = PAGE_READONLY_NOEXEC;
+	protection_map[2] = PAGE_COPY_NOEXEC;
+	protection_map[3] = PAGE_COPY_NOEXEC;
 	protection_map[4] = PAGE_READONLY;
 	protection_map[5] = PAGE_READONLY;
 	protection_map[6] = PAGE_COPY;
 	protection_map[7] = PAGE_COPY;
 	protection_map[8] = PAGE_NONE;
-	protection_map[9] = PAGE_READONLY;
-	protection_map[10] = PAGE_SHARED;
-	protection_map[11] = PAGE_SHARED;
+	protection_map[9] = PAGE_READONLY_NOEXEC;
+	protection_map[10] = PAGE_SHARED_NOEXEC;
+	protection_map[11] = PAGE_SHARED_NOEXEC;
 	protection_map[12] = PAGE_READONLY;
 	protection_map[13] = PAGE_READONLY;
 	protection_map[14] = PAGE_SHARED;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/sparc/mm/Makefile linux-3.3.8-pax/arch/sparc/mm/Makefile
--- linux-3.3.8/arch/sparc/mm/Makefile	2012-01-08 19:47:47.859473073 +0100
+++ linux-3.3.8-pax/arch/sparc/mm/Makefile	2012-03-19 10:43:43.016034702 +0100
@@ -2,7 +2,7 @@
 #
 
 asflags-y := -ansi
-ccflags-y := -Werror
+#ccflags-y := -Werror
 
 obj-$(CONFIG_SPARC64)   += ultra.o tlb.o tsb.o gup.o
 obj-y                   += fault_$(BITS).o
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/sparc/mm/srmmu.c linux-3.3.8-pax/arch/sparc/mm/srmmu.c
--- linux-3.3.8/arch/sparc/mm/srmmu.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/sparc/mm/srmmu.c	2012-03-19 10:43:43.016034702 +0100
@@ -2200,6 +2200,13 @@ void __init ld_mmu_srmmu(void)
 	PAGE_SHARED = pgprot_val(SRMMU_PAGE_SHARED);
 	BTFIXUPSET_INT(page_copy, pgprot_val(SRMMU_PAGE_COPY));
 	BTFIXUPSET_INT(page_readonly, pgprot_val(SRMMU_PAGE_RDONLY));
+
+#ifdef CONFIG_PAX_PAGEEXEC
+	PAGE_SHARED_NOEXEC = pgprot_val(SRMMU_PAGE_SHARED_NOEXEC);
+	BTFIXUPSET_INT(page_copy_noexec, pgprot_val(SRMMU_PAGE_COPY_NOEXEC));
+	BTFIXUPSET_INT(page_readonly_noexec, pgprot_val(SRMMU_PAGE_RDONLY_NOEXEC));
+#endif
+
 	BTFIXUPSET_INT(page_kernel, pgprot_val(SRMMU_PAGE_KERNEL));
 	page_kernel = pgprot_val(SRMMU_PAGE_KERNEL);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/tile/include/asm/atomic_64.h linux-3.3.8-pax/arch/tile/include/asm/atomic_64.h
--- linux-3.3.8/arch/tile/include/asm/atomic_64.h	2011-10-24 12:48:25.875091795 +0200
+++ linux-3.3.8-pax/arch/tile/include/asm/atomic_64.h	2012-03-19 10:43:43.020034698 +0100
@@ -142,6 +142,16 @@ static inline long atomic64_add_unless(a
 
 #define atomic64_inc_not_zero(v)	atomic64_add_unless((v), 1, 0)
 
+#define atomic64_read_unchecked(v)		atomic64_read(v)
+#define atomic64_set_unchecked(v, i)		atomic64_set((v), (i))
+#define atomic64_add_unchecked(a, v)		atomic64_add((a), (v))
+#define atomic64_add_return_unchecked(a, v)	atomic64_add_return((a), (v))
+#define atomic64_sub_unchecked(a, v)		atomic64_sub((a), (v))
+#define atomic64_inc_unchecked(v)		atomic64_inc(v)
+#define atomic64_inc_return_unchecked(v)	atomic64_inc_return(v)
+#define atomic64_dec_unchecked(v)		atomic64_dec(v)
+#define atomic64_cmpxchg_unchecked(v, o, n)	atomic64_cmpxchg((v), (o), (n))
+
 /* Atomic dec and inc don't implement barrier, so provide them if needed. */
 #define smp_mb__before_atomic_dec()	smp_mb()
 #define smp_mb__after_atomic_dec()	smp_mb()
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/um/include/asm/kmap_types.h linux-3.3.8-pax/arch/um/include/asm/kmap_types.h
--- linux-3.3.8/arch/um/include/asm/kmap_types.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/um/include/asm/kmap_types.h	2012-03-19 10:43:43.020034698 +0100
@@ -23,6 +23,7 @@ enum km_type {
 	KM_IRQ1,
 	KM_SOFTIRQ0,
 	KM_SOFTIRQ1,
+	KM_CLEARPAGE,
 	KM_TYPE_NR
 };
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/um/include/asm/page.h linux-3.3.8-pax/arch/um/include/asm/page.h
--- linux-3.3.8/arch/um/include/asm/page.h	2012-01-08 19:47:48.407473044 +0100
+++ linux-3.3.8-pax/arch/um/include/asm/page.h	2012-03-19 10:43:43.020034698 +0100
@@ -14,6 +14,9 @@
 #define PAGE_SIZE	(_AC(1, UL) << PAGE_SHIFT)
 #define PAGE_MASK	(~(PAGE_SIZE-1))
 
+#define ktla_ktva(addr)			(addr)
+#define ktva_ktla(addr)			(addr)
+
 #ifndef __ASSEMBLY__
 
 struct page;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/um/include/asm/pgtable-3level.h linux-3.3.8-pax/arch/um/include/asm/pgtable-3level.h
--- linux-3.3.8/arch/um/include/asm/pgtable-3level.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/um/include/asm/pgtable-3level.h	2012-05-07 17:16:08.720220515 +0200
@@ -58,6 +58,7 @@
 #define pud_present(x)	(pud_val(x) & _PAGE_PRESENT)
 #define pud_populate(mm, pud, pmd) \
 	set_pud(pud, __pud(_PAGE_TABLE + __pa(pmd)))
+#define pud_populate_kernel(mm, pud, pmd) pud_populate((mm), (pud), (pmd))
 
 #ifdef CONFIG_64BIT
 #define set_pud(pudptr, pudval) set_64bit((u64 *) (pudptr), pud_val(pudval))
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/um/kernel/process.c linux-3.3.8-pax/arch/um/kernel/process.c
--- linux-3.3.8/arch/um/kernel/process.c	2012-03-19 10:38:56.272050014 +0100
+++ linux-3.3.8-pax/arch/um/kernel/process.c	2012-03-19 10:43:43.020034698 +0100
@@ -408,22 +408,6 @@ int singlestepping(void * t)
 	return 2;
 }
 
-/*
- * Only x86 and x86_64 have an arch_align_stack().
- * All other arches have "#define arch_align_stack(x) (x)"
- * in their asm/system.h
- * As this is included in UML from asm-um/system-generic.h,
- * we can use it to behave as the subarch does.
- */
-#ifndef arch_align_stack
-unsigned long arch_align_stack(unsigned long sp)
-{
-	if (!(current->personality & ADDR_NO_RANDOMIZE) && randomize_va_space)
-		sp -= get_random_int() % 8192;
-	return sp & ~0xf;
-}
-#endif
-
 unsigned long get_wchan(struct task_struct *p)
 {
 	unsigned long stack_page, sp, ip;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/um/Makefile linux-3.3.8-pax/arch/um/Makefile
--- linux-3.3.8/arch/um/Makefile	2012-03-19 10:38:56.268050013 +0100
+++ linux-3.3.8-pax/arch/um/Makefile	2012-03-19 10:43:43.020034698 +0100
@@ -61,6 +61,10 @@ USER_CFLAGS = $(patsubst $(KERNEL_DEFINE
 	$(patsubst -I%,,$(KBUILD_CFLAGS)))) $(ARCH_INCLUDE) $(MODE_INCLUDE) \
 	$(filter -I%,$(CFLAGS)) -D_FILE_OFFSET_BITS=64 -idirafter include
 
+ifdef CONSTIFY_PLUGIN
+USER_CFLAGS	+= $(CONSTIFY_PLUGIN) -fplugin-arg-constify_plugin-no-constify
+endif
+
 #This will adjust *FLAGS accordingly to the platform.
 include $(srctree)/$(ARCH_DIR)/Makefile-os-$(OS)
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/boot/bitops.h linux-3.3.8-pax/arch/x86/boot/bitops.h
--- linux-3.3.8/arch/x86/boot/bitops.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/boot/bitops.h	2012-03-19 10:43:43.024034697 +0100
@@ -26,7 +26,7 @@ static inline int variable_test_bit(int
 	u8 v;
 	const u32 *p = (const u32 *)addr;
 
-	asm("btl %2,%1; setc %0" : "=qm" (v) : "m" (*p), "Ir" (nr));
+	asm volatile("btl %2,%1; setc %0" : "=qm" (v) : "m" (*p), "Ir" (nr));
 	return v;
 }
 
@@ -37,7 +37,7 @@ static inline int variable_test_bit(int
 
 static inline void set_bit(int nr, void *addr)
 {
-	asm("btsl %1,%0" : "+m" (*(u32 *)addr) : "Ir" (nr));
+	asm volatile("btsl %1,%0" : "+m" (*(u32 *)addr) : "Ir" (nr));
 }
 
 #endif /* BOOT_BITOPS_H */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/boot/boot.h linux-3.3.8-pax/arch/x86/boot/boot.h
--- linux-3.3.8/arch/x86/boot/boot.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/boot/boot.h	2012-03-19 10:43:43.024034697 +0100
@@ -85,7 +85,7 @@ static inline void io_delay(void)
 static inline u16 ds(void)
 {
 	u16 seg;
-	asm("movw %%ds,%0" : "=rm" (seg));
+	asm volatile("movw %%ds,%0" : "=rm" (seg));
 	return seg;
 }
 
@@ -181,7 +181,7 @@ static inline void wrgs32(u32 v, addr_t
 static inline int memcmp(const void *s1, const void *s2, size_t len)
 {
 	u8 diff;
-	asm("repe; cmpsb; setnz %0"
+	asm volatile("repe; cmpsb; setnz %0"
 	    : "=qm" (diff), "+D" (s1), "+S" (s2), "+c" (len));
 	return diff;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/boot/compressed/eboot.c linux-3.3.8-pax/arch/x86/boot/compressed/eboot.c
--- linux-3.3.8/arch/x86/boot/compressed/eboot.c	2012-05-07 20:26:55.991609318 +0200
+++ linux-3.3.8-pax/arch/x86/boot/compressed/eboot.c	2012-05-07 20:27:02.035608997 +0200
@@ -122,7 +122,6 @@ again:
 		*addr = max_addr;
 	}
 
-free_pool:
 	efi_call_phys1(sys_table->boottime->free_pool, map);
 
 fail:
@@ -186,7 +185,6 @@ static efi_status_t low_alloc(unsigned l
 	if (i == map_size / desc_size)
 		status = EFI_NOT_FOUND;
 
-free_pool:
 	efi_call_phys1(sys_table->boottime->free_pool, map);
 fail:
 	return status;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/boot/compressed/head_32.S linux-3.3.8-pax/arch/x86/boot/compressed/head_32.S
--- linux-3.3.8/arch/x86/boot/compressed/head_32.S	2012-05-07 20:26:55.991609318 +0200
+++ linux-3.3.8-pax/arch/x86/boot/compressed/head_32.S	2012-05-07 20:27:02.035608997 +0200
@@ -106,7 +106,7 @@ preferred_addr:
 	notl	%eax
 	andl    %eax, %ebx
 #else
-	movl	$LOAD_PHYSICAL_ADDR, %ebx
+	movl	$____LOAD_PHYSICAL_ADDR, %ebx
 #endif
 
 	/* Target address to relocate to for decompression */
@@ -192,7 +192,7 @@ relocated:
  * and where it was actually loaded.
  */
 	movl	%ebp, %ebx
-	subl	$LOAD_PHYSICAL_ADDR, %ebx
+	subl	$____LOAD_PHYSICAL_ADDR, %ebx
 	jz	2f	/* Nothing to be done if loaded at compiled addr. */
 /*
  * Process relocations.
@@ -200,8 +200,7 @@ relocated:
 
 1:	subl	$4, %edi
 	movl	(%edi), %ecx
-	testl	%ecx, %ecx
-	jz	2f
+	jecxz	2f
 	addl	%ebx, -__PAGE_OFFSET(%ebx, %ecx)
 	jmp	1b
 2:
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/boot/compressed/head_64.S linux-3.3.8-pax/arch/x86/boot/compressed/head_64.S
--- linux-3.3.8/arch/x86/boot/compressed/head_64.S	2012-05-07 20:26:55.991609318 +0200
+++ linux-3.3.8-pax/arch/x86/boot/compressed/head_64.S	2012-05-07 20:27:02.039608997 +0200
@@ -91,7 +91,7 @@ ENTRY(startup_32)
 	notl	%eax
 	andl	%eax, %ebx
 #else
-	movl	$LOAD_PHYSICAL_ADDR, %ebx
+	movl	$____LOAD_PHYSICAL_ADDR, %ebx
 #endif
 
 	/* Target address to relocate to for decompression */
@@ -263,7 +263,7 @@ preferred_addr:
 	notq	%rax
 	andq	%rax, %rbp
 #else
-	movq	$LOAD_PHYSICAL_ADDR, %rbp
+	movq	$____LOAD_PHYSICAL_ADDR, %rbp
 #endif
 
 	/* Target address to relocate to for decompression */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/boot/compressed/Makefile linux-3.3.8-pax/arch/x86/boot/compressed/Makefile
--- linux-3.3.8/arch/x86/boot/compressed/Makefile	2012-06-11 19:36:38.868445687 +0200
+++ linux-3.3.8-pax/arch/x86/boot/compressed/Makefile	2012-06-11 19:36:45.356446090 +0200
@@ -14,6 +14,9 @@ cflags-$(CONFIG_X86_64) := -mcmodel=smal
 KBUILD_CFLAGS += $(cflags-y)
 KBUILD_CFLAGS += $(call cc-option,-ffreestanding)
 KBUILD_CFLAGS += $(call cc-option,-fno-stack-protector)
+ifdef CONSTIFY_PLUGIN
+KBUILD_CFLAGS += $(CONSTIFY_PLUGIN) -fplugin-arg-constify_plugin-no-constify
+endif
 
 KBUILD_AFLAGS  := $(KBUILD_CFLAGS) -D__ASSEMBLY__
 GCOV_PROFILE := n
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/boot/compressed/misc.c linux-3.3.8-pax/arch/x86/boot/compressed/misc.c
--- linux-3.3.8/arch/x86/boot/compressed/misc.c	2012-03-19 10:38:56.384050008 +0100
+++ linux-3.3.8-pax/arch/x86/boot/compressed/misc.c	2012-03-19 10:43:43.028034701 +0100
@@ -310,7 +310,7 @@ static void parse_elf(void *output)
 		case PT_LOAD:
 #ifdef CONFIG_RELOCATABLE
 			dest = output;
-			dest += (phdr->p_paddr - LOAD_PHYSICAL_ADDR);
+			dest += (phdr->p_paddr - ____LOAD_PHYSICAL_ADDR);
 #else
 			dest = (void *)(phdr->p_paddr);
 #endif
@@ -365,7 +365,7 @@ asmlinkage void decompress_kernel(void *
 		error("Destination address too large");
 #endif
 #ifndef CONFIG_RELOCATABLE
-	if ((unsigned long)output != LOAD_PHYSICAL_ADDR)
+	if ((unsigned long)output != ____LOAD_PHYSICAL_ADDR)
 		error("Wrong destination address");
 #endif
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/boot/cpucheck.c linux-3.3.8-pax/arch/x86/boot/cpucheck.c
--- linux-3.3.8/arch/x86/boot/cpucheck.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/boot/cpucheck.c	2012-03-19 10:43:43.028034701 +0100
@@ -74,7 +74,7 @@ static int has_fpu(void)
 	u16 fcw = -1, fsw = -1;
 	u32 cr0;
 
-	asm("movl %%cr0,%0" : "=r" (cr0));
+	asm volatile("movl %%cr0,%0" : "=r" (cr0));
 	if (cr0 & (X86_CR0_EM|X86_CR0_TS)) {
 		cr0 &= ~(X86_CR0_EM|X86_CR0_TS);
 		asm volatile("movl %0,%%cr0" : : "r" (cr0));
@@ -90,7 +90,7 @@ static int has_eflag(u32 mask)
 {
 	u32 f0, f1;
 
-	asm("pushfl ; "
+	asm volatile("pushfl ; "
 	    "pushfl ; "
 	    "popl %0 ; "
 	    "movl %0,%1 ; "
@@ -115,7 +115,7 @@ static void get_flags(void)
 		set_bit(X86_FEATURE_FPU, cpu.flags);
 
 	if (has_eflag(X86_EFLAGS_ID)) {
-		asm("cpuid"
+		asm volatile("cpuid"
 		    : "=a" (max_intel_level),
 		      "=b" (cpu_vendor[0]),
 		      "=d" (cpu_vendor[1]),
@@ -124,7 +124,7 @@ static void get_flags(void)
 
 		if (max_intel_level >= 0x00000001 &&
 		    max_intel_level <= 0x0000ffff) {
-			asm("cpuid"
+			asm volatile("cpuid"
 			    : "=a" (tfms),
 			      "=c" (cpu.flags[4]),
 			      "=d" (cpu.flags[0])
@@ -136,7 +136,7 @@ static void get_flags(void)
 				cpu.model += ((tfms >> 16) & 0xf) << 4;
 		}
 
-		asm("cpuid"
+		asm volatile("cpuid"
 		    : "=a" (max_amd_level)
 		    : "a" (0x80000000)
 		    : "ebx", "ecx", "edx");
@@ -144,7 +144,7 @@ static void get_flags(void)
 		if (max_amd_level >= 0x80000001 &&
 		    max_amd_level <= 0x8000ffff) {
 			u32 eax = 0x80000001;
-			asm("cpuid"
+			asm volatile("cpuid"
 			    : "+a" (eax),
 			      "=c" (cpu.flags[6]),
 			      "=d" (cpu.flags[1])
@@ -203,9 +203,9 @@ int check_cpu(int *cpu_level_ptr, int *r
 		u32 ecx = MSR_K7_HWCR;
 		u32 eax, edx;
 
-		asm("rdmsr" : "=a" (eax), "=d" (edx) : "c" (ecx));
+		asm volatile("rdmsr" : "=a" (eax), "=d" (edx) : "c" (ecx));
 		eax &= ~(1 << 15);
-		asm("wrmsr" : : "a" (eax), "d" (edx), "c" (ecx));
+		asm volatile("wrmsr" : : "a" (eax), "d" (edx), "c" (ecx));
 
 		get_flags();	/* Make sure it really did something */
 		err = check_flags();
@@ -218,9 +218,9 @@ int check_cpu(int *cpu_level_ptr, int *r
 		u32 ecx = MSR_VIA_FCR;
 		u32 eax, edx;
 
-		asm("rdmsr" : "=a" (eax), "=d" (edx) : "c" (ecx));
+		asm volatile("rdmsr" : "=a" (eax), "=d" (edx) : "c" (ecx));
 		eax |= (1<<1)|(1<<7);
-		asm("wrmsr" : : "a" (eax), "d" (edx), "c" (ecx));
+		asm volatile("wrmsr" : : "a" (eax), "d" (edx), "c" (ecx));
 
 		set_bit(X86_FEATURE_CX8, cpu.flags);
 		err = check_flags();
@@ -231,12 +231,12 @@ int check_cpu(int *cpu_level_ptr, int *r
 		u32 eax, edx;
 		u32 level = 1;
 
-		asm("rdmsr" : "=a" (eax), "=d" (edx) : "c" (ecx));
-		asm("wrmsr" : : "a" (~0), "d" (edx), "c" (ecx));
-		asm("cpuid"
+		asm volatile("rdmsr" : "=a" (eax), "=d" (edx) : "c" (ecx));
+		asm volatile("wrmsr" : : "a" (~0), "d" (edx), "c" (ecx));
+		asm volatile("cpuid"
 		    : "+a" (level), "=d" (cpu.flags[0])
 		    : : "ecx", "ebx");
-		asm("wrmsr" : : "a" (eax), "d" (edx), "c" (ecx));
+		asm volatile("wrmsr" : : "a" (eax), "d" (edx), "c" (ecx));
 
 		err = check_flags();
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/boot/header.S linux-3.3.8-pax/arch/x86/boot/header.S
--- linux-3.3.8/arch/x86/boot/header.S	2012-03-19 10:38:56.384050008 +0100
+++ linux-3.3.8-pax/arch/x86/boot/header.S	2012-03-19 10:43:43.028034701 +0100
@@ -372,7 +372,7 @@ setup_data:		.quad 0			# 64-bit physical
 						# single linked list of
 						# struct setup_data
 
-pref_address:		.quad LOAD_PHYSICAL_ADDR	# preferred load addr
+pref_address:		.quad ____LOAD_PHYSICAL_ADDR	# preferred load addr
 
 #define ZO_INIT_SIZE	(ZO__end - ZO_startup_32 + ZO_z_extract_offset)
 #define VO_INIT_SIZE	(VO__end - VO__text)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/boot/Makefile linux-3.3.8-pax/arch/x86/boot/Makefile
--- linux-3.3.8/arch/x86/boot/Makefile	2012-05-07 20:26:55.935609323 +0200
+++ linux-3.3.8-pax/arch/x86/boot/Makefile	2012-05-07 20:27:02.011608998 +0200
@@ -64,6 +64,9 @@ KBUILD_CFLAGS	:= $(LINUXINCLUDE) -g -Os
 		   $(call cc-option, -fno-stack-protector) \
 		   $(call cc-option, -mpreferred-stack-boundary=2)
 KBUILD_CFLAGS	+= $(call cc-option, -m32)
+ifdef CONSTIFY_PLUGIN
+KBUILD_CFLAGS	+= $(CONSTIFY_PLUGIN) -fplugin-arg-constify_plugin-no-constify
+endif
 KBUILD_AFLAGS	:= $(KBUILD_CFLAGS) -D__ASSEMBLY__
 GCOV_PROFILE := n
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/boot/memory.c linux-3.3.8-pax/arch/x86/boot/memory.c
--- linux-3.3.8/arch/x86/boot/memory.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/boot/memory.c	2012-03-19 10:43:43.032034706 +0100
@@ -19,7 +19,7 @@
 
 static int detect_memory_e820(void)
 {
-	int count = 0;
+	unsigned int count = 0;
 	struct biosregs ireg, oreg;
 	struct e820entry *desc = boot_params.e820_map;
 	static struct e820entry buf; /* static so it is zeroed */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/boot/video.c linux-3.3.8-pax/arch/x86/boot/video.c
--- linux-3.3.8/arch/x86/boot/video.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/boot/video.c	2012-03-19 10:43:43.032034706 +0100
@@ -96,7 +96,7 @@ static void store_mode_params(void)
 static unsigned int get_entry(void)
 {
 	char entry_buf[4];
-	int i, len = 0;
+	unsigned int i, len = 0;
 	int key;
 	unsigned int v;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/boot/video-vesa.c linux-3.3.8-pax/arch/x86/boot/video-vesa.c
--- linux-3.3.8/arch/x86/boot/video-vesa.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/boot/video-vesa.c	2012-03-19 10:43:43.032034706 +0100
@@ -200,6 +200,7 @@ static void vesa_store_pm_info(void)
 
 	boot_params.screen_info.vesapm_seg = oreg.es;
 	boot_params.screen_info.vesapm_off = oreg.di;
+	boot_params.screen_info.vesapm_size = oreg.cx;
 }
 
 /*
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/crypto/aesni-intel_asm.S linux-3.3.8-pax/arch/x86/crypto/aesni-intel_asm.S
--- linux-3.3.8/arch/x86/crypto/aesni-intel_asm.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/crypto/aesni-intel_asm.S	2012-03-19 10:43:43.036034707 +0100
@@ -31,6 +31,7 @@
 
 #include <linux/linkage.h>
 #include <asm/inst.h>
+#include <asm/alternative-asm.h>
 
 #ifdef __x86_64__
 .data
@@ -1436,7 +1437,9 @@ _return_T_done_decrypt:
 	pop	%r14
 	pop	%r13
 	pop	%r12
+	pax_force_retaddr 0, 1
 	ret
+ENDPROC(aesni_gcm_dec)
 
 
 /*****************************************************************************
@@ -1699,7 +1702,9 @@ _return_T_done_encrypt:
 	pop	%r14
 	pop	%r13
 	pop	%r12
+	pax_force_retaddr 0, 1
 	ret
+ENDPROC(aesni_gcm_enc)
 
 #endif
 
@@ -1714,6 +1719,7 @@ _key_expansion_256a:
 	pxor %xmm1, %xmm0
 	movaps %xmm0, (TKEYP)
 	add $0x10, TKEYP
+	pax_force_retaddr_bts
 	ret
 
 .align 4
@@ -1738,6 +1744,7 @@ _key_expansion_192a:
 	shufps $0b01001110, %xmm2, %xmm1
 	movaps %xmm1, 0x10(TKEYP)
 	add $0x20, TKEYP
+	pax_force_retaddr_bts
 	ret
 
 .align 4
@@ -1757,6 +1764,7 @@ _key_expansion_192b:
 
 	movaps %xmm0, (TKEYP)
 	add $0x10, TKEYP
+	pax_force_retaddr_bts
 	ret
 
 .align 4
@@ -1769,6 +1777,7 @@ _key_expansion_256b:
 	pxor %xmm1, %xmm2
 	movaps %xmm2, (TKEYP)
 	add $0x10, TKEYP
+	pax_force_retaddr_bts
 	ret
 
 /*
@@ -1881,7 +1890,9 @@ ENTRY(aesni_set_key)
 #ifndef __x86_64__
 	popl KEYP
 #endif
+	pax_force_retaddr 0, 1
 	ret
+ENDPROC(aesni_set_key)
 
 /*
  * void aesni_enc(struct crypto_aes_ctx *ctx, u8 *dst, const u8 *src)
@@ -1902,7 +1913,9 @@ ENTRY(aesni_enc)
 	popl KLEN
 	popl KEYP
 #endif
+	pax_force_retaddr 0, 1
 	ret
+ENDPROC(aesni_enc)
 
 /*
  * _aesni_enc1:		internal ABI
@@ -1959,6 +1972,7 @@ _aesni_enc1:
 	AESENC KEY STATE
 	movaps 0x70(TKEYP), KEY
 	AESENCLAST KEY STATE
+	pax_force_retaddr_bts
 	ret
 
 /*
@@ -2067,6 +2081,7 @@ _aesni_enc4:
 	AESENCLAST KEY STATE2
 	AESENCLAST KEY STATE3
 	AESENCLAST KEY STATE4
+	pax_force_retaddr_bts
 	ret
 
 /*
@@ -2089,7 +2104,9 @@ ENTRY(aesni_dec)
 	popl KLEN
 	popl KEYP
 #endif
+	pax_force_retaddr 0, 1
 	ret
+ENDPROC(aesni_dec)
 
 /*
  * _aesni_dec1:		internal ABI
@@ -2146,6 +2163,7 @@ _aesni_dec1:
 	AESDEC KEY STATE
 	movaps 0x70(TKEYP), KEY
 	AESDECLAST KEY STATE
+	pax_force_retaddr_bts
 	ret
 
 /*
@@ -2254,6 +2272,7 @@ _aesni_dec4:
 	AESDECLAST KEY STATE2
 	AESDECLAST KEY STATE3
 	AESDECLAST KEY STATE4
+	pax_force_retaddr_bts
 	ret
 
 /*
@@ -2311,7 +2330,9 @@ ENTRY(aesni_ecb_enc)
 	popl KEYP
 	popl LEN
 #endif
+	pax_force_retaddr 0, 1
 	ret
+ENDPROC(aesni_ecb_enc)
 
 /*
  * void aesni_ecb_dec(struct crypto_aes_ctx *ctx, const u8 *dst, u8 *src,
@@ -2369,7 +2390,9 @@ ENTRY(aesni_ecb_dec)
 	popl KEYP
 	popl LEN
 #endif
+	pax_force_retaddr 0, 1
 	ret
+ENDPROC(aesni_ecb_dec)
 
 /*
  * void aesni_cbc_enc(struct crypto_aes_ctx *ctx, const u8 *dst, u8 *src,
@@ -2410,7 +2433,9 @@ ENTRY(aesni_cbc_enc)
 	popl LEN
 	popl IVP
 #endif
+	pax_force_retaddr 0, 1
 	ret
+ENDPROC(aesni_cbc_enc)
 
 /*
  * void aesni_cbc_dec(struct crypto_aes_ctx *ctx, const u8 *dst, u8 *src,
@@ -2498,7 +2523,9 @@ ENTRY(aesni_cbc_dec)
 	popl LEN
 	popl IVP
 #endif
+	pax_force_retaddr 0, 1
 	ret
+ENDPROC(aesni_cbc_dec)
 
 #ifdef __x86_64__
 .align 16
@@ -2524,6 +2551,7 @@ _aesni_inc_init:
 	mov $1, TCTR_LOW
 	MOVQ_R64_XMM TCTR_LOW INC
 	MOVQ_R64_XMM CTR TCTR_LOW
+	pax_force_retaddr_bts
 	ret
 
 /*
@@ -2552,6 +2580,7 @@ _aesni_inc:
 .Linc_low:
 	movaps CTR, IV
 	PSHUFB_XMM BSWAP_MASK IV
+	pax_force_retaddr_bts
 	ret
 
 /*
@@ -2612,5 +2641,7 @@ ENTRY(aesni_ctr_enc)
 .Lctr_enc_ret:
 	movups IV, (IVP)
 .Lctr_enc_just_ret:
+	pax_force_retaddr 0, 1
 	ret
+ENDPROC(aesni_ctr_enc)
 #endif
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/crypto/aes-x86_64-asm_64.S linux-3.3.8-pax/arch/x86/crypto/aes-x86_64-asm_64.S
--- linux-3.3.8/arch/x86/crypto/aes-x86_64-asm_64.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/crypto/aes-x86_64-asm_64.S	2012-03-19 10:43:43.036034707 +0100
@@ -8,6 +8,8 @@
  * including this sentence is retained in full.
  */
 
+#include <asm/alternative-asm.h>
+
 .extern crypto_ft_tab
 .extern crypto_it_tab
 .extern crypto_fl_tab
@@ -71,6 +73,8 @@ FUNC:	movq	r1,r2;			\
 	je	B192;			\
 	leaq	32(r9),r9;
 
+#define ret	pax_force_retaddr 0, 1; ret
+
 #define epilogue(r1,r2,r3,r4,r5,r6,r7,r8,r9) \
 	movq	r1,r2;			\
 	movq	r3,r4;			\
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/crypto/blowfish-x86_64-asm_64.S linux-3.3.8-pax/arch/x86/crypto/blowfish-x86_64-asm_64.S
--- linux-3.3.8/arch/x86/crypto/blowfish-x86_64-asm_64.S	2012-01-08 19:47:49.055473010 +0100
+++ linux-3.3.8-pax/arch/x86/crypto/blowfish-x86_64-asm_64.S	2012-03-19 10:43:43.036034707 +0100
@@ -20,6 +20,8 @@
  *
  */
 
+#include <asm/alternative-asm.h>
+
 .file "blowfish-x86_64-asm.S"
 .text
 
@@ -151,9 +153,11 @@ __blowfish_enc_blk:
 	jnz __enc_xor;
 
 	write_block();
+	pax_force_retaddr 0, 1
 	ret;
 __enc_xor:
 	xor_block();
+	pax_force_retaddr 0, 1
 	ret;
 
 .align 8
@@ -188,6 +192,7 @@ blowfish_dec_blk:
 
 	movq %r11, %rbp;
 
+	pax_force_retaddr 0, 1
 	ret;
 
 /**********************************************************************
@@ -342,6 +347,7 @@ __blowfish_enc_blk_4way:
 
 	popq %rbx;
 	popq %rbp;
+	pax_force_retaddr 0, 1
 	ret;
 
 __enc_xor4:
@@ -349,6 +355,7 @@ __enc_xor4:
 
 	popq %rbx;
 	popq %rbp;
+	pax_force_retaddr 0, 1
 	ret;
 
 .align 8
@@ -386,5 +393,6 @@ blowfish_dec_blk_4way:
 	popq %rbx;
 	popq %rbp;
 
+	pax_force_retaddr 0, 1
 	ret;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/crypto/salsa20-x86_64-asm_64.S linux-3.3.8-pax/arch/x86/crypto/salsa20-x86_64-asm_64.S
--- linux-3.3.8/arch/x86/crypto/salsa20-x86_64-asm_64.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/crypto/salsa20-x86_64-asm_64.S	2012-04-09 16:11:10.708226089 +0200
@@ -1,3 +1,5 @@
+#include <asm/alternative-asm.h>
+
 # enter ECRYPT_encrypt_bytes
 .text
 .p2align 5
@@ -790,6 +792,7 @@ ECRYPT_encrypt_bytes:
 	add	%r11,%rsp
 	mov	%rdi,%rax
 	mov	%rsi,%rdx
+	pax_force_retaddr 0, 1
 	ret
 #   bytesatleast65:
 ._bytesatleast65:
@@ -891,6 +894,7 @@ ECRYPT_keysetup:
 	add	%r11,%rsp
 	mov	%rdi,%rax
 	mov	%rsi,%rdx
+	pax_force_retaddr
 	ret
 # enter ECRYPT_ivsetup
 .text
@@ -917,4 +921,5 @@ ECRYPT_ivsetup:
 	add	%r11,%rsp
 	mov	%rdi,%rax
 	mov	%rsi,%rdx
+	pax_force_retaddr
 	ret
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/crypto/serpent-sse2-x86_64-asm_64.S linux-3.3.8-pax/arch/x86/crypto/serpent-sse2-x86_64-asm_64.S
--- linux-3.3.8/arch/x86/crypto/serpent-sse2-x86_64-asm_64.S	2012-03-19 10:38:56.400050007 +0100
+++ linux-3.3.8-pax/arch/x86/crypto/serpent-sse2-x86_64-asm_64.S	2012-03-19 10:43:43.040034707 +0100
@@ -24,6 +24,8 @@
  *
  */
 
+#include <asm/alternative-asm.h>
+
 .file "serpent-sse2-x86_64-asm_64.S"
 .text
 
@@ -695,12 +697,14 @@ __serpent_enc_blk_8way:
 	write_blocks(%rsi, RA1, RB1, RC1, RD1, RK0, RK1, RK2);
 	write_blocks(%rax, RA2, RB2, RC2, RD2, RK0, RK1, RK2);
 
+	pax_force_retaddr
 	ret;
 
 __enc_xor8:
 	xor_blocks(%rsi, RA1, RB1, RC1, RD1, RK0, RK1, RK2);
 	xor_blocks(%rax, RA2, RB2, RC2, RD2, RK0, RK1, RK2);
 
+	pax_force_retaddr
 	ret;
 
 .align 8
@@ -758,4 +762,5 @@ serpent_dec_blk_8way:
 	write_blocks(%rsi, RC1, RD1, RB1, RE1, RK0, RK1, RK2);
 	write_blocks(%rax, RC2, RD2, RB2, RE2, RK0, RK1, RK2);
 
+	pax_force_retaddr
 	ret;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/crypto/sha1_ssse3_asm.S linux-3.3.8-pax/arch/x86/crypto/sha1_ssse3_asm.S
--- linux-3.3.8/arch/x86/crypto/sha1_ssse3_asm.S	2012-01-08 19:47:49.055473010 +0100
+++ linux-3.3.8-pax/arch/x86/crypto/sha1_ssse3_asm.S	2012-03-19 10:43:43.040034707 +0100
@@ -28,6 +28,8 @@
  * (at your option) any later version.
  */
 
+#include <asm/alternative-asm.h>
+
 #define CTX	%rdi	// arg1
 #define BUF	%rsi	// arg2
 #define CNT	%rdx	// arg3
@@ -104,6 +106,7 @@
 	pop	%r12
 	pop	%rbp
 	pop	%rbx
+	pax_force_retaddr 0, 1
 	ret
 
 	.size	\name, .-\name
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/crypto/twofish-x86_64-asm_64-3way.S linux-3.3.8-pax/arch/x86/crypto/twofish-x86_64-asm_64-3way.S
--- linux-3.3.8/arch/x86/crypto/twofish-x86_64-asm_64-3way.S	2012-01-08 19:47:49.063473009 +0100
+++ linux-3.3.8-pax/arch/x86/crypto/twofish-x86_64-asm_64-3way.S	2012-03-19 10:43:43.040034707 +0100
@@ -20,6 +20,8 @@
  *
  */
 
+#include <asm/alternative-asm.h>
+
 .file "twofish-x86_64-asm-3way.S"
 .text
 
@@ -260,6 +262,7 @@ __twofish_enc_blk_3way:
 	popq %r13;
 	popq %r14;
 	popq %r15;
+	pax_force_retaddr 0, 1
 	ret;
 
 __enc_xor3:
@@ -271,6 +274,7 @@ __enc_xor3:
 	popq %r13;
 	popq %r14;
 	popq %r15;
+	pax_force_retaddr 0, 1
 	ret;
 
 .global twofish_dec_blk_3way
@@ -312,5 +316,6 @@ twofish_dec_blk_3way:
 	popq %r13;
 	popq %r14;
 	popq %r15;
+	pax_force_retaddr 0, 1
 	ret;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/crypto/twofish-x86_64-asm_64.S linux-3.3.8-pax/arch/x86/crypto/twofish-x86_64-asm_64.S
--- linux-3.3.8/arch/x86/crypto/twofish-x86_64-asm_64.S	2012-01-08 19:47:49.063473009 +0100
+++ linux-3.3.8-pax/arch/x86/crypto/twofish-x86_64-asm_64.S	2012-03-19 10:43:43.040034707 +0100
@@ -21,6 +21,7 @@
 .text
 
 #include <asm/asm-offsets.h>
+#include <asm/alternative-asm.h>
 
 #define a_offset	0
 #define b_offset	4
@@ -268,6 +269,7 @@ twofish_enc_blk:
 
 	popq	R1
 	movq	$1,%rax
+	pax_force_retaddr 0, 1
 	ret
 
 twofish_dec_blk:
@@ -319,4 +321,5 @@ twofish_dec_blk:
 
 	popq	R1
 	movq	$1,%rax
+	pax_force_retaddr 0, 1
 	ret
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/ia32/ia32entry.S linux-3.3.8-pax/arch/x86/ia32/ia32entry.S
--- linux-3.3.8/arch/x86/ia32/ia32entry.S	2012-03-19 10:38:56.404050007 +0100
+++ linux-3.3.8-pax/arch/x86/ia32/ia32entry.S	2012-03-19 10:43:43.040034707 +0100
@@ -13,8 +13,10 @@
 #include <asm/thread_info.h>	
 #include <asm/segment.h>
 #include <asm/irqflags.h>
+#include <asm/pgtable.h>
 #include <linux/linkage.h>
 #include <linux/err.h>
+#include <asm/alternative-asm.h>
 
 /* Avoid __ASSEMBLER__'ifying <linux/audit.h> just for this.  */
 #include <linux/elf-em.h>
@@ -94,6 +96,32 @@ ENTRY(native_irq_enable_sysexit)
 ENDPROC(native_irq_enable_sysexit)
 #endif
 
+	.macro pax_enter_kernel_user
+	pax_set_fptr_mask
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	call pax_enter_kernel_user
+#endif
+	.endm
+
+	.macro pax_exit_kernel_user
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	call pax_exit_kernel_user
+#endif
+#ifdef CONFIG_PAX_RANDKSTACK
+	pushq %rax
+	pushq %r11
+	call pax_randomize_kstack
+	popq %r11
+	popq %rax
+#endif
+	.endm
+
+.macro pax_erase_kstack
+#ifdef CONFIG_PAX_MEMORY_STACKLEAK
+	call pax_erase_kstack
+#endif
+.endm
+
 /*
  * 32bit SYSENTER instruction entry.
  *
@@ -120,12 +148,6 @@ ENTRY(ia32_sysenter_target)
 	CFI_REGISTER	rsp,rbp
 	SWAPGS_UNSAFE_STACK
 	movq	PER_CPU_VAR(kernel_stack), %rsp
-	addq	$(KERNEL_STACK_OFFSET),%rsp
-	/*
-	 * No need to follow this irqs on/off section: the syscall
-	 * disabled irqs, here we enable it straight after entry:
-	 */
-	ENABLE_INTERRUPTS(CLBR_NONE)
  	movl	%ebp,%ebp		/* zero extension */
 	pushq_cfi $__USER32_DS
 	/*CFI_REL_OFFSET ss,0*/
@@ -133,24 +155,39 @@ ENTRY(ia32_sysenter_target)
 	CFI_REL_OFFSET rsp,0
 	pushfq_cfi
 	/*CFI_REL_OFFSET rflags,0*/
-	movl	TI_sysenter_return+THREAD_INFO(%rsp,3*8-KERNEL_STACK_OFFSET),%r10d
-	CFI_REGISTER rip,r10
+	orl	$X86_EFLAGS_IF,(%rsp)
+	GET_THREAD_INFO(%r11)
+	movl	TI_sysenter_return(%r11), %r11d
+	CFI_REGISTER rip,r11
 	pushq_cfi $__USER32_CS
 	/*CFI_REL_OFFSET cs,0*/
 	movl	%eax, %eax
-	pushq_cfi %r10
+	pushq_cfi %r11
 	CFI_REL_OFFSET rip,0
 	pushq_cfi %rax
 	cld
 	SAVE_ARGS 0,1,0
+	pax_enter_kernel_user
+	/*
+	 * No need to follow this irqs on/off section: the syscall
+	 * disabled irqs, here we enable it straight after entry:
+	 */
+	ENABLE_INTERRUPTS(CLBR_NONE)
  	/* no need to do an access_ok check here because rbp has been
  	   32bit zero extended */ 
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	mov $PAX_USER_SHADOW_BASE,%r11
+	add %r11,%rbp
+#endif
+
 1:	movl	(%rbp),%ebp
  	.section __ex_table,"a"
  	.quad 1b,ia32_badarg
  	.previous	
-	orl     $TS_COMPAT,TI_status+THREAD_INFO(%rsp,RIP-ARGOFFSET)
-	testl   $_TIF_WORK_SYSCALL_ENTRY,TI_flags+THREAD_INFO(%rsp,RIP-ARGOFFSET)
+	GET_THREAD_INFO(%r11)
+	orl    $TS_COMPAT,TI_status(%r11)
+	testl  $_TIF_WORK_SYSCALL_ENTRY,TI_flags(%r11)
 	CFI_REMEMBER_STATE
 	jnz  sysenter_tracesys
 	cmpq	$(IA32_NR_syscalls-1),%rax
@@ -160,12 +197,15 @@ sysenter_do_call:
 sysenter_dispatch:
 	call	*ia32_sys_call_table(,%rax,8)
 	movq	%rax,RAX-ARGOFFSET(%rsp)
+	GET_THREAD_INFO(%r11)
 	DISABLE_INTERRUPTS(CLBR_NONE)
 	TRACE_IRQS_OFF
-	testl	$_TIF_ALLWORK_MASK,TI_flags+THREAD_INFO(%rsp,RIP-ARGOFFSET)
+	testl	$_TIF_ALLWORK_MASK,TI_flags(%r11)
 	jnz	sysexit_audit
 sysexit_from_sys_call:
-	andl    $~TS_COMPAT,TI_status+THREAD_INFO(%rsp,RIP-ARGOFFSET)
+	pax_exit_kernel_user
+	pax_erase_kstack
+	andl    $~TS_COMPAT,TI_status(%r11)
 	/* clear IF, that popfq doesn't enable interrupts early */
 	andl  $~0x200,EFLAGS-R11(%rsp) 
 	movl	RIP-R11(%rsp),%edx		/* User %eip */
@@ -191,6 +231,9 @@ sysexit_from_sys_call:
 	movl %eax,%esi			/* 2nd arg: syscall number */
 	movl $AUDIT_ARCH_I386,%edi	/* 1st arg: audit arch */
 	call __audit_syscall_entry
+
+	pax_erase_kstack
+
 	movl RAX-ARGOFFSET(%rsp),%eax	/* reload syscall number */
 	cmpq $(IA32_NR_syscalls-1),%rax
 	ja ia32_badsys
@@ -202,7 +245,7 @@ sysexit_from_sys_call:
 	.endm
 
 	.macro auditsys_exit exit
-	testl $(_TIF_ALLWORK_MASK & ~_TIF_SYSCALL_AUDIT),TI_flags+THREAD_INFO(%rsp,RIP-ARGOFFSET)
+	testl $(_TIF_ALLWORK_MASK & ~_TIF_SYSCALL_AUDIT),TI_flags(%r11)
 	jnz ia32_ret_from_sys_call
 	TRACE_IRQS_ON
 	sti
@@ -213,11 +256,12 @@ sysexit_from_sys_call:
 1:	setbe %al		/* 1 if error, 0 if not */
 	movzbl %al,%edi		/* zero-extend that into %edi */
 	call __audit_syscall_exit
+	GET_THREAD_INFO(%r11)
 	movq RAX-ARGOFFSET(%rsp),%rax	/* reload syscall return value */
 	movl $(_TIF_ALLWORK_MASK & ~_TIF_SYSCALL_AUDIT),%edi
 	cli
 	TRACE_IRQS_OFF
-	testl %edi,TI_flags+THREAD_INFO(%rsp,RIP-ARGOFFSET)
+	testl %edi,TI_flags(%r11)
 	jz \exit
 	CLEAR_RREGS -ARGOFFSET
 	jmp int_with_check
@@ -235,7 +279,7 @@ sysexit_audit:
 
 sysenter_tracesys:
 #ifdef CONFIG_AUDITSYSCALL
-	testl	$(_TIF_WORK_SYSCALL_ENTRY & ~_TIF_SYSCALL_AUDIT),TI_flags+THREAD_INFO(%rsp,RIP-ARGOFFSET)
+	testl	$(_TIF_WORK_SYSCALL_ENTRY & ~_TIF_SYSCALL_AUDIT),TI_flags(%r11)
 	jz	sysenter_auditsys
 #endif
 	SAVE_REST
@@ -243,6 +287,9 @@ sysenter_tracesys:
 	movq	$-ENOSYS,RAX(%rsp)/* ptrace can change this for a bad syscall */
 	movq	%rsp,%rdi        /* &pt_regs -> arg1 */
 	call	syscall_trace_enter
+
+	pax_erase_kstack
+
 	LOAD_ARGS32 ARGOFFSET  /* reload args from stack in case ptrace changed it */
 	RESTORE_REST
 	cmpq	$(IA32_NR_syscalls-1),%rax
@@ -274,19 +321,20 @@ ENDPROC(ia32_sysenter_target)
 ENTRY(ia32_cstar_target)
 	CFI_STARTPROC32	simple
 	CFI_SIGNAL_FRAME
-	CFI_DEF_CFA	rsp,KERNEL_STACK_OFFSET
+	CFI_DEF_CFA	rsp,0
 	CFI_REGISTER	rip,rcx
 	/*CFI_REGISTER	rflags,r11*/
 	SWAPGS_UNSAFE_STACK
 	movl	%esp,%r8d
 	CFI_REGISTER	rsp,r8
 	movq	PER_CPU_VAR(kernel_stack),%rsp
+	SAVE_ARGS 8*6,0,0
+	pax_enter_kernel_user
 	/*
 	 * No need to follow this irqs on/off section: the syscall
 	 * disabled irqs and here we enable it straight after entry:
 	 */
 	ENABLE_INTERRUPTS(CLBR_NONE)
-	SAVE_ARGS 8,0,0
 	movl 	%eax,%eax	/* zero extension */
 	movq	%rax,ORIG_RAX-ARGOFFSET(%rsp)
 	movq	%rcx,RIP-ARGOFFSET(%rsp)
@@ -302,12 +350,19 @@ ENTRY(ia32_cstar_target)
 	/* no need to do an access_ok check here because r8 has been
 	   32bit zero extended */ 
 	/* hardware stack frame is complete now */	
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	mov $PAX_USER_SHADOW_BASE,%r11
+	add %r11,%r8
+#endif
+
 1:	movl	(%r8),%r9d
 	.section __ex_table,"a"
 	.quad 1b,ia32_badarg
 	.previous	
-	orl     $TS_COMPAT,TI_status+THREAD_INFO(%rsp,RIP-ARGOFFSET)
-	testl   $_TIF_WORK_SYSCALL_ENTRY,TI_flags+THREAD_INFO(%rsp,RIP-ARGOFFSET)
+	GET_THREAD_INFO(%r11)
+	orl   $TS_COMPAT,TI_status(%r11)
+	testl $_TIF_WORK_SYSCALL_ENTRY,TI_flags(%r11)
 	CFI_REMEMBER_STATE
 	jnz   cstar_tracesys
 	cmpq $IA32_NR_syscalls-1,%rax
@@ -317,12 +372,15 @@ cstar_do_call:
 cstar_dispatch:
 	call *ia32_sys_call_table(,%rax,8)
 	movq %rax,RAX-ARGOFFSET(%rsp)
+	GET_THREAD_INFO(%r11)
 	DISABLE_INTERRUPTS(CLBR_NONE)
 	TRACE_IRQS_OFF
-	testl $_TIF_ALLWORK_MASK,TI_flags+THREAD_INFO(%rsp,RIP-ARGOFFSET)
+	testl $_TIF_ALLWORK_MASK,TI_flags(%r11)
 	jnz sysretl_audit
 sysretl_from_sys_call:
-	andl $~TS_COMPAT,TI_status+THREAD_INFO(%rsp,RIP-ARGOFFSET)
+	pax_exit_kernel_user
+	pax_erase_kstack
+	andl $~TS_COMPAT,TI_status(%r11)
 	RESTORE_ARGS 0,-ARG_SKIP,0,0,0
 	movl RIP-ARGOFFSET(%rsp),%ecx
 	CFI_REGISTER rip,rcx
@@ -350,7 +408,7 @@ sysretl_audit:
 
 cstar_tracesys:
 #ifdef CONFIG_AUDITSYSCALL
-	testl $(_TIF_WORK_SYSCALL_ENTRY & ~_TIF_SYSCALL_AUDIT),TI_flags+THREAD_INFO(%rsp,RIP-ARGOFFSET)
+	testl $(_TIF_WORK_SYSCALL_ENTRY & ~_TIF_SYSCALL_AUDIT),TI_flags(%r11)
 	jz cstar_auditsys
 #endif
 	xchgl %r9d,%ebp
@@ -359,6 +417,9 @@ cstar_tracesys:
 	movq $-ENOSYS,RAX(%rsp)	/* ptrace can change this for a bad syscall */
 	movq %rsp,%rdi        /* &pt_regs -> arg1 */
 	call syscall_trace_enter
+
+	pax_erase_kstack
+
 	LOAD_ARGS32 ARGOFFSET, 1  /* reload args from stack in case ptrace changed it */
 	RESTORE_REST
 	xchgl %ebp,%r9d
@@ -404,19 +465,21 @@ ENTRY(ia32_syscall)
 	CFI_REL_OFFSET	rip,RIP-RIP
 	PARAVIRT_ADJUST_EXCEPTION_FRAME
 	SWAPGS
-	/*
-	 * No need to follow this irqs on/off section: the syscall
-	 * disabled irqs and here we enable it straight after entry:
-	 */
-	ENABLE_INTERRUPTS(CLBR_NONE)
 	movl %eax,%eax
 	pushq_cfi %rax
 	cld
 	/* note the registers are not zero extended to the sf.
 	   this could be a problem. */
 	SAVE_ARGS 0,1,0
-	orl $TS_COMPAT,TI_status+THREAD_INFO(%rsp,RIP-ARGOFFSET)
-	testl $_TIF_WORK_SYSCALL_ENTRY,TI_flags+THREAD_INFO(%rsp,RIP-ARGOFFSET)
+	pax_enter_kernel_user
+	/*
+	 * No need to follow this irqs on/off section: the syscall
+	 * disabled irqs and here we enable it straight after entry:
+	 */
+	ENABLE_INTERRUPTS(CLBR_NONE)
+	GET_THREAD_INFO(%r11)
+	orl   $TS_COMPAT,TI_status(%r11)
+	testl $_TIF_WORK_SYSCALL_ENTRY,TI_flags(%r11)
 	jnz ia32_tracesys
 	cmpq $(IA32_NR_syscalls-1),%rax
 	ja ia32_badsys
@@ -435,6 +498,9 @@ ia32_tracesys:
 	movq $-ENOSYS,RAX(%rsp)	/* ptrace can change this for a bad syscall */
 	movq %rsp,%rdi        /* &pt_regs -> arg1 */
 	call syscall_trace_enter
+
+	pax_erase_kstack
+
 	LOAD_ARGS32 ARGOFFSET  /* reload args from stack in case ptrace changed it */
 	RESTORE_REST
 	cmpq $(IA32_NR_syscalls-1),%rax
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/ia32/ia32_signal.c linux-3.3.8-pax/arch/x86/ia32/ia32_signal.c
--- linux-3.3.8/arch/x86/ia32/ia32_signal.c	2011-10-24 12:48:26.055091783 +0200
+++ linux-3.3.8-pax/arch/x86/ia32/ia32_signal.c	2012-03-19 10:43:43.044034706 +0100
@@ -169,7 +169,7 @@ asmlinkage long sys32_sigaltstack(const
 	}
 	seg = get_fs();
 	set_fs(KERNEL_DS);
-	ret = do_sigaltstack(uss_ptr ? &uss : NULL, &uoss, regs->sp);
+	ret = do_sigaltstack(uss_ptr ? (const stack_t __force_user *)&uss : NULL, (stack_t __force_user *)&uoss, regs->sp);
 	set_fs(seg);
 	if (ret >= 0 && uoss_ptr)  {
 		if (!access_ok(VERIFY_WRITE, uoss_ptr, sizeof(stack_ia32_t)))
@@ -370,7 +370,7 @@ static int ia32_setup_sigcontext(struct
  */
 static void __user *get_sigframe(struct k_sigaction *ka, struct pt_regs *regs,
 				 size_t frame_size,
-				 void **fpstate)
+				 void __user **fpstate)
 {
 	unsigned long sp;
 
@@ -391,7 +391,7 @@ static void __user *get_sigframe(struct
 
 	if (used_math()) {
 		sp = sp - sig_xstate_ia32_size;
-		*fpstate = (struct _fpstate_ia32 *) sp;
+		*fpstate = (struct _fpstate_ia32 __user *) sp;
 		if (save_i387_xstate_ia32(*fpstate) < 0)
 			return (void __user *) -1L;
 	}
@@ -399,7 +399,7 @@ static void __user *get_sigframe(struct
 	sp -= frame_size;
 	/* Align the stack pointer according to the i386 ABI,
 	 * i.e. so that on function entry ((sp + 4) & 15) == 0. */
-	sp = ((sp + 4) & -16ul) - 4;
+	sp = ((sp - 12) & -16ul) - 4;
 	return (void __user *) sp;
 }
 
@@ -457,7 +457,7 @@ int ia32_setup_frame(int sig, struct k_s
 		 * These are actually not used anymore, but left because some
 		 * gdb versions depend on them as a marker.
 		 */
-		put_user_ex(*((u64 *)&code), (u64 *)frame->retcode);
+		put_user_ex(*((const u64 *)&code), (u64 __user *)frame->retcode);
 	} put_user_catch(err);
 
 	if (err)
@@ -499,7 +499,7 @@ int ia32_setup_rt_frame(int sig, struct
 		0xb8,
 		__NR_ia32_rt_sigreturn,
 		0x80cd,
-		0,
+		0
 	};
 
 	frame = get_sigframe(ka, regs, sizeof(*frame), &fpstate);
@@ -529,16 +529,18 @@ int ia32_setup_rt_frame(int sig, struct
 
 		if (ka->sa.sa_flags & SA_RESTORER)
 			restorer = ka->sa.sa_restorer;
+		else if (current->mm->context.vdso)
+			/* Return stub is in 32bit vsyscall page */
+			restorer = VDSO32_SYMBOL(current->mm->context.vdso, rt_sigreturn);
 		else
-			restorer = VDSO32_SYMBOL(current->mm->context.vdso,
-						 rt_sigreturn);
+			restorer = &frame->retcode;
 		put_user_ex(ptr_to_compat(restorer), &frame->pretcode);
 
 		/*
 		 * Not actually used anymore, but left because some gdb
 		 * versions need it.
 		 */
-		put_user_ex(*((u64 *)&code), (u64 *)frame->retcode);
+		put_user_ex(*((const u64 *)&code), (u64 __user *)frame->retcode);
 	} put_user_catch(err);
 
 	if (err)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/ia32/sys_ia32.c linux-3.3.8-pax/arch/x86/ia32/sys_ia32.c
--- linux-3.3.8/arch/x86/ia32/sys_ia32.c	2011-10-24 12:48:26.059091782 +0200
+++ linux-3.3.8-pax/arch/x86/ia32/sys_ia32.c	2012-03-19 10:43:43.044034706 +0100
@@ -69,8 +69,8 @@ asmlinkage long sys32_ftruncate64(unsign
  */
 static int cp_stat64(struct stat64 __user *ubuf, struct kstat *stat)
 {
-	typeof(ubuf->st_uid) uid = 0;
-	typeof(ubuf->st_gid) gid = 0;
+	typeof(((struct stat64 *)0)->st_uid) uid = 0;
+	typeof(((struct stat64 *)0)->st_gid) gid = 0;
 	SET_UID(uid, stat->uid);
 	SET_GID(gid, stat->gid);
 	if (!access_ok(VERIFY_WRITE, ubuf, sizeof(struct stat64)) ||
@@ -308,8 +308,8 @@ asmlinkage long sys32_rt_sigprocmask(int
 	}
 	set_fs(KERNEL_DS);
 	ret = sys_rt_sigprocmask(how,
-				 set ? (sigset_t __user *)&s : NULL,
-				 oset ? (sigset_t __user *)&s : NULL,
+				 set ? (sigset_t __force_user *)&s : NULL,
+				 oset ? (sigset_t __force_user *)&s : NULL,
 				 sigsetsize);
 	set_fs(old_fs);
 	if (ret)
@@ -332,7 +332,7 @@ asmlinkage long sys32_alarm(unsigned int
 	return alarm_setitimer(seconds);
 }
 
-asmlinkage long sys32_waitpid(compat_pid_t pid, unsigned int *stat_addr,
+asmlinkage long sys32_waitpid(compat_pid_t pid, unsigned int __user *stat_addr,
 			      int options)
 {
 	return compat_sys_wait4(pid, stat_addr, options, NULL);
@@ -353,7 +353,7 @@ asmlinkage long sys32_sched_rr_get_inter
 	mm_segment_t old_fs = get_fs();
 
 	set_fs(KERNEL_DS);
-	ret = sys_sched_rr_get_interval(pid, (struct timespec __user *)&t);
+	ret = sys_sched_rr_get_interval(pid, (struct timespec __force_user *)&t);
 	set_fs(old_fs);
 	if (put_compat_timespec(&t, interval))
 		return -EFAULT;
@@ -369,7 +369,7 @@ asmlinkage long sys32_rt_sigpending(comp
 	mm_segment_t old_fs = get_fs();
 
 	set_fs(KERNEL_DS);
-	ret = sys_rt_sigpending((sigset_t __user *)&s, sigsetsize);
+	ret = sys_rt_sigpending((sigset_t __force_user *)&s, sigsetsize);
 	set_fs(old_fs);
 	if (!ret) {
 		switch (_NSIG_WORDS) {
@@ -394,7 +394,7 @@ asmlinkage long sys32_rt_sigqueueinfo(in
 	if (copy_siginfo_from_user32(&info, uinfo))
 		return -EFAULT;
 	set_fs(KERNEL_DS);
-	ret = sys_rt_sigqueueinfo(pid, sig, (siginfo_t __user *)&info);
+	ret = sys_rt_sigqueueinfo(pid, sig, (siginfo_t __force_user *)&info);
 	set_fs(old_fs);
 	return ret;
 }
@@ -439,7 +439,7 @@ asmlinkage long sys32_sendfile(int out_f
 		return -EFAULT;
 
 	set_fs(KERNEL_DS);
-	ret = sys_sendfile(out_fd, in_fd, offset ? (off_t __user *)&of : NULL,
+	ret = sys_sendfile(out_fd, in_fd, offset ? (off_t __force_user *)&of : NULL,
 			   count);
 	set_fs(old_fs);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/alternative-asm.h linux-3.3.8-pax/arch/x86/include/asm/alternative-asm.h
--- linux-3.3.8/arch/x86/include/asm/alternative-asm.h	2012-03-19 10:38:56.416050006 +0100
+++ linux-3.3.8-pax/arch/x86/include/asm/alternative-asm.h	2012-04-09 15:08:49.480210589 +0200
@@ -15,6 +15,45 @@
 	.endm
 #endif
 
+#ifdef KERNEXEC_PLUGIN
+	.macro pax_force_retaddr_bts rip=0
+	btsq $63,\rip(%rsp)
+	.endm
+#ifdef CONFIG_PAX_KERNEXEC_PLUGIN_METHOD_BTS
+	.macro pax_force_retaddr rip=0, reload=0
+	btsq $63,\rip(%rsp)
+	.endm
+	.macro pax_force_fptr ptr
+	btsq $63,\ptr
+	.endm
+	.macro pax_set_fptr_mask
+	.endm
+#endif
+#ifdef CONFIG_PAX_KERNEXEC_PLUGIN_METHOD_OR
+	.macro pax_force_retaddr rip=0, reload=0
+	.if \reload
+	pax_set_fptr_mask
+	.endif
+	orq %r10,\rip(%rsp)
+	.endm
+	.macro pax_force_fptr ptr
+	orq %r10,\ptr
+	.endm
+	.macro pax_set_fptr_mask
+	movabs $0x8000000000000000,%r10
+	.endm
+#endif
+#else
+	.macro pax_force_retaddr rip=0, reload=0
+	.endm
+	.macro pax_force_fptr ptr
+	.endm
+	.macro pax_force_retaddr_bts rip=0
+	.endm
+	.macro pax_set_fptr_mask
+	.endm
+#endif
+
 .macro altinstruction_entry orig alt feature orig_len alt_len
 	.long \orig - .
 	.long \alt - .
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/alternative.h linux-3.3.8-pax/arch/x86/include/asm/alternative.h
--- linux-3.3.8/arch/x86/include/asm/alternative.h	2011-10-24 12:48:26.063091782 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/alternative.h	2012-03-19 10:43:43.048034705 +0100
@@ -89,7 +89,7 @@ static inline int alternatives_text_rese
       ".section .discard,\"aw\",@progbits\n"				\
       "	 .byte 0xff + (664f-663f) - (662b-661b)\n" /* rlen <= slen */	\
       ".previous\n"							\
-      ".section .altinstr_replacement, \"ax\"\n"			\
+      ".section .altinstr_replacement, \"a\"\n"			\
       "663:\n\t" newinstr "\n664:\n"		/* replacement     */	\
       ".previous"
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/apic.h linux-3.3.8-pax/arch/x86/include/asm/apic.h
--- linux-3.3.8/arch/x86/include/asm/apic.h	2012-03-19 10:38:56.416050006 +0100
+++ linux-3.3.8-pax/arch/x86/include/asm/apic.h	2012-03-19 10:43:43.048034705 +0100
@@ -45,7 +45,7 @@ static inline void generic_apic_probe(vo
 
 #ifdef CONFIG_X86_LOCAL_APIC
 
-extern unsigned int apic_verbosity;
+extern int apic_verbosity;
 extern int local_apic_timer_c2_ok;
 
 extern int disable_apic;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/apm.h linux-3.3.8-pax/arch/x86/include/asm/apm.h
--- linux-3.3.8/arch/x86/include/asm/apm.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/apm.h	2012-03-19 10:43:43.048034705 +0100
@@ -34,7 +34,7 @@ static inline void apm_bios_call_asm(u32
 	__asm__ __volatile__(APM_DO_ZERO_SEGS
 		"pushl %%edi\n\t"
 		"pushl %%ebp\n\t"
-		"lcall *%%cs:apm_bios_entry\n\t"
+		"lcall *%%ss:apm_bios_entry\n\t"
 		"setc %%al\n\t"
 		"popl %%ebp\n\t"
 		"popl %%edi\n\t"
@@ -58,7 +58,7 @@ static inline u8 apm_bios_call_simple_as
 	__asm__ __volatile__(APM_DO_ZERO_SEGS
 		"pushl %%edi\n\t"
 		"pushl %%ebp\n\t"
-		"lcall *%%cs:apm_bios_entry\n\t"
+		"lcall *%%ss:apm_bios_entry\n\t"
 		"setc %%bl\n\t"
 		"popl %%ebp\n\t"
 		"popl %%edi\n\t"
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/atomic64_32.h linux-3.3.8-pax/arch/x86/include/asm/atomic64_32.h
--- linux-3.3.8/arch/x86/include/asm/atomic64_32.h	2012-03-19 10:38:56.420050006 +0100
+++ linux-3.3.8-pax/arch/x86/include/asm/atomic64_32.h	2012-03-19 10:43:43.048034705 +0100
@@ -12,6 +12,14 @@ typedef struct {
 	u64 __aligned(8) counter;
 } atomic64_t;
 
+#ifdef CONFIG_PAX_REFCOUNT
+typedef struct {
+	u64 __aligned(8) counter;
+} atomic64_unchecked_t;
+#else
+typedef atomic64_t atomic64_unchecked_t;
+#endif
+
 #define ATOMIC64_INIT(val)	{ (val) }
 
 #ifdef CONFIG_X86_CMPXCHG64
@@ -38,6 +46,21 @@ static inline long long atomic64_cmpxchg
 }
 
 /**
+ * atomic64_cmpxchg_unchecked - cmpxchg atomic64 variable
+ * @p: pointer to type atomic64_unchecked_t
+ * @o: expected value
+ * @n: new value
+ *
+ * Atomically sets @v to @n if it was equal to @o and returns
+ * the old value.
+ */
+
+static inline long long atomic64_cmpxchg_unchecked(atomic64_unchecked_t *v, long long o, long long n)
+{
+	return cmpxchg64(&v->counter, o, n);
+}
+
+/**
  * atomic64_xchg - xchg atomic64 variable
  * @v: pointer to type atomic64_t
  * @n: value to assign
@@ -77,6 +100,24 @@ static inline void atomic64_set(atomic64
 }
 
 /**
+ * atomic64_set_unchecked - set atomic64 variable
+ * @v: pointer to type atomic64_unchecked_t
+ * @n: value to assign
+ *
+ * Atomically sets the value of @v to @n.
+ */
+static inline void atomic64_set_unchecked(atomic64_unchecked_t *v, long long i)
+{
+	unsigned high = (unsigned)(i >> 32);
+	unsigned low = (unsigned)i;
+	asm volatile(ATOMIC64_ALTERNATIVE(set)
+		     : "+b" (low), "+c" (high)
+		     : "S" (v)
+		     : "eax", "edx", "memory"
+		     );
+}
+
+/**
  * atomic64_read - read atomic64 variable
  * @v: pointer to type atomic64_t
  *
@@ -93,6 +134,22 @@ static inline long long atomic64_read(co
  }
 
 /**
+ * atomic64_read_unchecked - read atomic64 variable
+ * @v: pointer to type atomic64_unchecked_t
+ *
+ * Atomically reads the value of @v and returns it.
+ */
+static inline long long atomic64_read_unchecked(atomic64_unchecked_t *v)
+{
+	long long r;
+	asm volatile(ATOMIC64_ALTERNATIVE(read_unchecked)
+		     : "=A" (r), "+c" (v)
+		     : : "memory"
+		     );
+	return r;
+ }
+
+/**
  * atomic64_add_return - add and return
  * @i: integer value to add
  * @v: pointer to type atomic64_t
@@ -108,6 +165,22 @@ static inline long long atomic64_add_ret
 	return i;
 }
 
+/**
+ * atomic64_add_return_unchecked - add and return
+ * @i: integer value to add
+ * @v: pointer to type atomic64_unchecked_t
+ *
+ * Atomically adds @i to @v and returns @i + *@v
+ */
+static inline long long atomic64_add_return_unchecked(long long i, atomic64_unchecked_t *v)
+{
+	asm volatile(ATOMIC64_ALTERNATIVE(add_return_unchecked)
+		     : "+A" (i), "+c" (v)
+		     : : "memory"
+		     );
+	return i;
+}
+
 /*
  * Other variants with different arithmetic operators:
  */
@@ -131,6 +204,17 @@ static inline long long atomic64_inc_ret
 	return a;
 }
 
+static inline long long atomic64_inc_return_unchecked(atomic64_unchecked_t *v)
+{
+	long long a;
+	asm volatile(ATOMIC64_ALTERNATIVE(inc_return_unchecked)
+		     : "=A" (a)
+		     : "S" (v)
+		     : "memory", "ecx"
+		     );
+	return a;
+}
+
 static inline long long atomic64_dec_return(atomic64_t *v)
 {
 	long long a;
@@ -155,6 +239,22 @@ static inline long long atomic64_add(lon
 		     : "+A" (i), "+c" (v)
 		     : : "memory"
 		     );
+	return i;
+}
+
+/**
+ * atomic64_add_unchecked - add integer to atomic64 variable
+ * @i: integer value to add
+ * @v: pointer to type atomic64_unchecked_t
+ *
+ * Atomically adds @i to @v.
+ */
+static inline long long atomic64_add_unchecked(long long i, atomic64_unchecked_t *v)
+{
+	asm volatile(ATOMIC64_ALTERNATIVE_(add_unchecked, add_return_unchecked)
+		     : "+A" (i), "+c" (v)
+		     : : "memory"
+		     );
 	return i;
 }
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/atomic64_64.h linux-3.3.8-pax/arch/x86/include/asm/atomic64_64.h
--- linux-3.3.8/arch/x86/include/asm/atomic64_64.h	2012-01-08 19:47:49.095473007 +0100
+++ linux-3.3.8-pax/arch/x86/include/asm/atomic64_64.h	2012-03-19 10:43:43.048034705 +0100
@@ -18,7 +18,19 @@
  */
 static inline long atomic64_read(const atomic64_t *v)
 {
-	return (*(volatile long *)&(v)->counter);
+	return (*(volatile const long *)&(v)->counter);
+}
+
+/**
+ * atomic64_read_unchecked - read atomic64 variable
+ * @v: pointer of type atomic64_unchecked_t
+ *
+ * Atomically reads the value of @v.
+ * Doesn't imply a read memory barrier.
+ */
+static inline long atomic64_read_unchecked(const atomic64_unchecked_t *v)
+{
+	return (*(volatile const long *)&(v)->counter);
 }
 
 /**
@@ -34,6 +46,18 @@ static inline void atomic64_set(atomic64
 }
 
 /**
+ * atomic64_set_unchecked - set atomic64 variable
+ * @v: pointer to type atomic64_unchecked_t
+ * @i: required value
+ *
+ * Atomically sets the value of @v to @i.
+ */
+static inline void atomic64_set_unchecked(atomic64_unchecked_t *v, long i)
+{
+	v->counter = i;
+}
+
+/**
  * atomic64_add - add integer to atomic64 variable
  * @i: integer value to add
  * @v: pointer to type atomic64_t
@@ -42,6 +66,28 @@ static inline void atomic64_set(atomic64
  */
 static inline void atomic64_add(long i, atomic64_t *v)
 {
+	asm volatile(LOCK_PREFIX "addq %1,%0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     LOCK_PREFIX "subq %1,%0\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
+		     : "=m" (v->counter)
+		     : "er" (i), "m" (v->counter));
+}
+
+/**
+ * atomic64_add_unchecked - add integer to atomic64 variable
+ * @i: integer value to add
+ * @v: pointer to type atomic64_unchecked_t
+ *
+ * Atomically adds @i to @v.
+ */
+static inline void atomic64_add_unchecked(long i, atomic64_unchecked_t *v)
+{
 	asm volatile(LOCK_PREFIX "addq %1,%0"
 		     : "=m" (v->counter)
 		     : "er" (i), "m" (v->counter));
@@ -56,7 +102,29 @@ static inline void atomic64_add(long i,
  */
 static inline void atomic64_sub(long i, atomic64_t *v)
 {
-	asm volatile(LOCK_PREFIX "subq %1,%0"
+	asm volatile(LOCK_PREFIX "subq %1,%0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     LOCK_PREFIX "addq %1,%0\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
+		     : "=m" (v->counter)
+		     : "er" (i), "m" (v->counter));
+}
+
+/**
+ * atomic64_sub_unchecked - subtract the atomic64 variable
+ * @i: integer value to subtract
+ * @v: pointer to type atomic64_unchecked_t
+ *
+ * Atomically subtracts @i from @v.
+ */
+static inline void atomic64_sub_unchecked(long i, atomic64_unchecked_t *v)
+{
+	asm volatile(LOCK_PREFIX "subq %1,%0\n"
 		     : "=m" (v->counter)
 		     : "er" (i), "m" (v->counter));
 }
@@ -74,7 +142,16 @@ static inline int atomic64_sub_and_test(
 {
 	unsigned char c;
 
-	asm volatile(LOCK_PREFIX "subq %2,%0; sete %1"
+	asm volatile(LOCK_PREFIX "subq %2,%0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     LOCK_PREFIX "addq %2,%0\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
+		     "sete %1\n"
 		     : "=m" (v->counter), "=qm" (c)
 		     : "er" (i), "m" (v->counter) : "memory");
 	return c;
@@ -88,6 +165,27 @@ static inline int atomic64_sub_and_test(
  */
 static inline void atomic64_inc(atomic64_t *v)
 {
+	asm volatile(LOCK_PREFIX "incq %0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     LOCK_PREFIX "decq %0\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
+		     : "=m" (v->counter)
+		     : "m" (v->counter));
+}
+
+/**
+ * atomic64_inc_unchecked - increment atomic64 variable
+ * @v: pointer to type atomic64_unchecked_t
+ *
+ * Atomically increments @v by 1.
+ */
+static inline void atomic64_inc_unchecked(atomic64_unchecked_t *v)
+{
 	asm volatile(LOCK_PREFIX "incq %0"
 		     : "=m" (v->counter)
 		     : "m" (v->counter));
@@ -101,7 +199,28 @@ static inline void atomic64_inc(atomic64
  */
 static inline void atomic64_dec(atomic64_t *v)
 {
-	asm volatile(LOCK_PREFIX "decq %0"
+	asm volatile(LOCK_PREFIX "decq %0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     LOCK_PREFIX "incq %0\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
+		     : "=m" (v->counter)
+		     : "m" (v->counter));
+}
+
+/**
+ * atomic64_dec_unchecked - decrement atomic64 variable
+ * @v: pointer to type atomic64_t
+ *
+ * Atomically decrements @v by 1.
+ */
+static inline void atomic64_dec_unchecked(atomic64_unchecked_t *v)
+{
+	asm volatile(LOCK_PREFIX "decq %0\n"
 		     : "=m" (v->counter)
 		     : "m" (v->counter));
 }
@@ -118,7 +237,16 @@ static inline int atomic64_dec_and_test(
 {
 	unsigned char c;
 
-	asm volatile(LOCK_PREFIX "decq %0; sete %1"
+	asm volatile(LOCK_PREFIX "decq %0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     LOCK_PREFIX "incq %0\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
+		     "sete %1\n"
 		     : "=m" (v->counter), "=qm" (c)
 		     : "m" (v->counter) : "memory");
 	return c != 0;
@@ -136,7 +264,16 @@ static inline int atomic64_inc_and_test(
 {
 	unsigned char c;
 
-	asm volatile(LOCK_PREFIX "incq %0; sete %1"
+	asm volatile(LOCK_PREFIX "incq %0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     LOCK_PREFIX "decq %0\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
+		     "sete %1\n"
 		     : "=m" (v->counter), "=qm" (c)
 		     : "m" (v->counter) : "memory");
 	return c != 0;
@@ -155,7 +292,16 @@ static inline int atomic64_add_negative(
 {
 	unsigned char c;
 
-	asm volatile(LOCK_PREFIX "addq %2,%0; sets %1"
+	asm volatile(LOCK_PREFIX "addq %2,%0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     LOCK_PREFIX "subq %2,%0\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
+		     "sets %1\n"
 		     : "=m" (v->counter), "=qm" (c)
 		     : "er" (i), "m" (v->counter) : "memory");
 	return c;
@@ -170,6 +316,18 @@ static inline int atomic64_add_negative(
  */
 static inline long atomic64_add_return(long i, atomic64_t *v)
 {
+	return i + xadd_check_overflow(&v->counter, i);
+}
+
+/**
+ * atomic64_add_return_unchecked - add and return
+ * @i: integer value to add
+ * @v: pointer to type atomic64_unchecked_t
+ *
+ * Atomically adds @i to @v and returns @i + @v
+ */
+static inline long atomic64_add_return_unchecked(long i, atomic64_unchecked_t *v)
+{
 	return i + xadd(&v->counter, i);
 }
 
@@ -179,6 +337,10 @@ static inline long atomic64_sub_return(l
 }
 
 #define atomic64_inc_return(v)  (atomic64_add_return(1, (v)))
+static inline long atomic64_inc_return_unchecked(atomic64_unchecked_t *v)
+{
+	return atomic64_add_return_unchecked(1, v);
+}
 #define atomic64_dec_return(v)  (atomic64_sub_return(1, (v)))
 
 static inline long atomic64_cmpxchg(atomic64_t *v, long old, long new)
@@ -186,6 +348,11 @@ static inline long atomic64_cmpxchg(atom
 	return cmpxchg(&v->counter, old, new);
 }
 
+static inline long atomic64_cmpxchg_unchecked(atomic64_unchecked_t *v, long old, long new)
+{
+	return cmpxchg(&v->counter, old, new);
+}
+
 static inline long atomic64_xchg(atomic64_t *v, long new)
 {
 	return xchg(&v->counter, new);
@@ -202,17 +369,30 @@ static inline long atomic64_xchg(atomic6
  */
 static inline int atomic64_add_unless(atomic64_t *v, long a, long u)
 {
-	long c, old;
+	long c, old, new;
 	c = atomic64_read(v);
 	for (;;) {
-		if (unlikely(c == (u)))
+		if (unlikely(c == u))
 			break;
-		old = atomic64_cmpxchg((v), c, c + (a));
+
+		asm volatile("add %2,%0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+			     "jno 0f\n"
+			     "sub %2,%0\n"
+			     "int $4\n0:\n"
+			     _ASM_EXTABLE(0b, 0b)
+#endif
+
+			     : "=r" (new)
+			     : "0" (c), "ir" (a));
+
+		old = atomic64_cmpxchg(v, c, new);
 		if (likely(old == c))
 			break;
 		c = old;
 	}
-	return c != (u);
+	return c != u;
 }
 
 #define atomic64_inc_not_zero(v) atomic64_add_unless((v), 1, 0)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/atomic.h linux-3.3.8-pax/arch/x86/include/asm/atomic.h
--- linux-3.3.8/arch/x86/include/asm/atomic.h	2012-01-08 19:47:49.091473008 +0100
+++ linux-3.3.8-pax/arch/x86/include/asm/atomic.h	2012-03-19 10:43:43.052034701 +0100
@@ -22,7 +22,18 @@
  */
 static inline int atomic_read(const atomic_t *v)
 {
-	return (*(volatile int *)&(v)->counter);
+	return (*(volatile const int *)&(v)->counter);
+}
+
+/**
+ * atomic_read_unchecked - read atomic variable
+ * @v: pointer of type atomic_unchecked_t
+ *
+ * Atomically reads the value of @v.
+ */
+static inline int atomic_read_unchecked(const atomic_unchecked_t *v)
+{
+	return (*(volatile const int *)&(v)->counter);
 }
 
 /**
@@ -38,6 +49,18 @@ static inline void atomic_set(atomic_t *
 }
 
 /**
+ * atomic_set_unchecked - set atomic variable
+ * @v: pointer of type atomic_unchecked_t
+ * @i: required value
+ *
+ * Atomically sets the value of @v to @i.
+ */
+static inline void atomic_set_unchecked(atomic_unchecked_t *v, int i)
+{
+	v->counter = i;
+}
+
+/**
  * atomic_add - add integer to atomic variable
  * @i: integer value to add
  * @v: pointer of type atomic_t
@@ -46,7 +69,29 @@ static inline void atomic_set(atomic_t *
  */
 static inline void atomic_add(int i, atomic_t *v)
 {
-	asm volatile(LOCK_PREFIX "addl %1,%0"
+	asm volatile(LOCK_PREFIX "addl %1,%0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     LOCK_PREFIX "subl %1,%0\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
+		     : "+m" (v->counter)
+		     : "ir" (i));
+}
+
+/**
+ * atomic_add_unchecked - add integer to atomic variable
+ * @i: integer value to add
+ * @v: pointer of type atomic_unchecked_t
+ *
+ * Atomically adds @i to @v.
+ */
+static inline void atomic_add_unchecked(int i, atomic_unchecked_t *v)
+{
+	asm volatile(LOCK_PREFIX "addl %1,%0\n"
 		     : "+m" (v->counter)
 		     : "ir" (i));
 }
@@ -60,7 +105,29 @@ static inline void atomic_add(int i, ato
  */
 static inline void atomic_sub(int i, atomic_t *v)
 {
-	asm volatile(LOCK_PREFIX "subl %1,%0"
+	asm volatile(LOCK_PREFIX "subl %1,%0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     LOCK_PREFIX "addl %1,%0\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
+		     : "+m" (v->counter)
+		     : "ir" (i));
+}
+
+/**
+ * atomic_sub_unchecked - subtract integer from atomic variable
+ * @i: integer value to subtract
+ * @v: pointer of type atomic_unchecked_t
+ *
+ * Atomically subtracts @i from @v.
+ */
+static inline void atomic_sub_unchecked(int i, atomic_unchecked_t *v)
+{
+	asm volatile(LOCK_PREFIX "subl %1,%0\n"
 		     : "+m" (v->counter)
 		     : "ir" (i));
 }
@@ -78,7 +145,16 @@ static inline int atomic_sub_and_test(in
 {
 	unsigned char c;
 
-	asm volatile(LOCK_PREFIX "subl %2,%0; sete %1"
+	asm volatile(LOCK_PREFIX "subl %2,%0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     LOCK_PREFIX "addl %2,%0\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
+		     "sete %1\n"
 		     : "+m" (v->counter), "=qm" (c)
 		     : "ir" (i) : "memory");
 	return c;
@@ -92,7 +168,27 @@ static inline int atomic_sub_and_test(in
  */
 static inline void atomic_inc(atomic_t *v)
 {
-	asm volatile(LOCK_PREFIX "incl %0"
+	asm volatile(LOCK_PREFIX "incl %0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     LOCK_PREFIX "decl %0\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
+		     : "+m" (v->counter));
+}
+
+/**
+ * atomic_inc_unchecked - increment atomic variable
+ * @v: pointer of type atomic_unchecked_t
+ *
+ * Atomically increments @v by 1.
+ */
+static inline void atomic_inc_unchecked(atomic_unchecked_t *v)
+{
+	asm volatile(LOCK_PREFIX "incl %0\n"
 		     : "+m" (v->counter));
 }
 
@@ -104,7 +200,27 @@ static inline void atomic_inc(atomic_t *
  */
 static inline void atomic_dec(atomic_t *v)
 {
-	asm volatile(LOCK_PREFIX "decl %0"
+	asm volatile(LOCK_PREFIX "decl %0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     LOCK_PREFIX "incl %0\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
+		     : "+m" (v->counter));
+}
+
+/**
+ * atomic_dec_unchecked - decrement atomic variable
+ * @v: pointer of type atomic_unchecked_t
+ *
+ * Atomically decrements @v by 1.
+ */
+static inline void atomic_dec_unchecked(atomic_unchecked_t *v)
+{
+	asm volatile(LOCK_PREFIX "decl %0\n"
 		     : "+m" (v->counter));
 }
 
@@ -120,7 +236,16 @@ static inline int atomic_dec_and_test(at
 {
 	unsigned char c;
 
-	asm volatile(LOCK_PREFIX "decl %0; sete %1"
+	asm volatile(LOCK_PREFIX "decl %0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     LOCK_PREFIX "incl %0\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
+		     "sete %1\n"
 		     : "+m" (v->counter), "=qm" (c)
 		     : : "memory");
 	return c != 0;
@@ -138,7 +263,35 @@ static inline int atomic_inc_and_test(at
 {
 	unsigned char c;
 
-	asm volatile(LOCK_PREFIX "incl %0; sete %1"
+	asm volatile(LOCK_PREFIX "incl %0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     LOCK_PREFIX "decl %0\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
+		     "sete %1\n"
+		     : "+m" (v->counter), "=qm" (c)
+		     : : "memory");
+	return c != 0;
+}
+
+/**
+ * atomic_inc_and_test_unchecked - increment and test
+ * @v: pointer of type atomic_unchecked_t
+ *
+ * Atomically increments @v by 1
+ * and returns true if the result is zero, or false for all
+ * other cases.
+ */
+static inline int atomic_inc_and_test_unchecked(atomic_unchecked_t *v)
+{
+	unsigned char c;
+
+	asm volatile(LOCK_PREFIX "incl %0\n"
+		     "sete %1\n"
 		     : "+m" (v->counter), "=qm" (c)
 		     : : "memory");
 	return c != 0;
@@ -157,7 +310,16 @@ static inline int atomic_add_negative(in
 {
 	unsigned char c;
 
-	asm volatile(LOCK_PREFIX "addl %2,%0; sets %1"
+	asm volatile(LOCK_PREFIX "addl %2,%0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     LOCK_PREFIX "subl %2,%0\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
+		     "sets %1\n"
 		     : "+m" (v->counter), "=qm" (c)
 		     : "ir" (i) : "memory");
 	return c;
@@ -179,7 +341,7 @@ static inline int atomic_add_return(int
 		goto no_xadd;
 #endif
 	/* Modern 486+ processor */
-	return i + xadd(&v->counter, i);
+	return i + xadd_check_overflow(&v->counter, i);
 
 #ifdef CONFIG_M386
 no_xadd: /* Legacy 386 processor */
@@ -192,6 +354,34 @@ no_xadd: /* Legacy 386 processor */
 }
 
 /**
+ * atomic_add_return_unchecked - add integer and return
+ * @i: integer value to add
+ * @v: pointer of type atomic_unchecked_t
+ *
+ * Atomically adds @i to @v and returns @i + @v
+ */
+static inline int atomic_add_return_unchecked(int i, atomic_unchecked_t *v)
+{
+#ifdef CONFIG_M386
+	int __i;
+	unsigned long flags;
+	if (unlikely(boot_cpu_data.x86 <= 3))
+		goto no_xadd;
+#endif
+	/* Modern 486+ processor */
+	return i + xadd(&v->counter, i);
+
+#ifdef CONFIG_M386
+no_xadd: /* Legacy 386 processor */
+	raw_local_irq_save(flags);
+	__i = atomic_read_unchecked(v);
+	atomic_set_unchecked(v, i + __i);
+	raw_local_irq_restore(flags);
+	return i + __i;
+#endif
+}
+
+/**
  * atomic_sub_return - subtract integer and return
  * @v: pointer of type atomic_t
  * @i: integer value to subtract
@@ -204,6 +394,10 @@ static inline int atomic_sub_return(int
 }
 
 #define atomic_inc_return(v)  (atomic_add_return(1, v))
+static inline int atomic_inc_return_unchecked(atomic_unchecked_t *v)
+{
+	return atomic_add_return_unchecked(1, v);
+}
 #define atomic_dec_return(v)  (atomic_sub_return(1, v))
 
 static inline int atomic_cmpxchg(atomic_t *v, int old, int new)
@@ -211,11 +405,21 @@ static inline int atomic_cmpxchg(atomic_
 	return cmpxchg(&v->counter, old, new);
 }
 
+static inline int atomic_cmpxchg_unchecked(atomic_unchecked_t *v, int old, int new)
+{
+	return cmpxchg(&v->counter, old, new);
+}
+
 static inline int atomic_xchg(atomic_t *v, int new)
 {
 	return xchg(&v->counter, new);
 }
 
+static inline int atomic_xchg_unchecked(atomic_unchecked_t *v, int new)
+{
+	return xchg(&v->counter, new);
+}
+
 /**
  * __atomic_add_unless - add unless the number is already a given value
  * @v: pointer of type atomic_t
@@ -227,12 +431,25 @@ static inline int atomic_xchg(atomic_t *
  */
 static inline int __atomic_add_unless(atomic_t *v, int a, int u)
 {
-	int c, old;
+	int c, old, new;
 	c = atomic_read(v);
 	for (;;) {
-		if (unlikely(c == (u)))
+		if (unlikely(c == u))
 			break;
-		old = atomic_cmpxchg((v), c, c + (a));
+
+		asm volatile("addl %2,%0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+			     "jno 0f\n"
+			     "subl %2,%0\n"
+			     "int $4\n0:\n"
+			     _ASM_EXTABLE(0b, 0b)
+#endif
+
+			     : "=r" (new)
+			     : "0" (c), "ir" (a));
+
+		old = atomic_cmpxchg(v, c, new);
 		if (likely(old == c))
 			break;
 		c = old;
@@ -240,6 +457,48 @@ static inline int __atomic_add_unless(at
 	return c;
 }
 
+/**
+ * atomic_inc_not_zero_hint - increment if not null
+ * @v: pointer of type atomic_t
+ * @hint: probable value of the atomic before the increment
+ *
+ * This version of atomic_inc_not_zero() gives a hint of probable
+ * value of the atomic. This helps processor to not read the memory
+ * before doing the atomic read/modify/write cycle, lowering
+ * number of bus transactions on some arches.
+ *
+ * Returns: 0 if increment was not done, 1 otherwise.
+ */
+#define atomic_inc_not_zero_hint atomic_inc_not_zero_hint
+static inline int atomic_inc_not_zero_hint(atomic_t *v, int hint)
+{
+	int val, c = hint, new;
+
+	/* sanity test, should be removed by compiler if hint is a constant */
+	if (!hint)
+		return __atomic_add_unless(v, 1, 0);
+
+	do {
+		asm volatile("incl %0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+			     "jno 0f\n"
+			     "decl %0\n"
+			     "int $4\n0:\n"
+			     _ASM_EXTABLE(0b, 0b)
+#endif
+
+			     : "=r" (new)
+			     : "0" (c));
+
+		val = atomic_cmpxchg(v, c, new);
+		if (val == c)
+			return 1;
+		c = val;
+	} while (c);
+
+	return 0;
+}
 
 /*
  * atomic_dec_if_positive - decrement by 1 if old value positive
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/bitops.h linux-3.3.8-pax/arch/x86/include/asm/bitops.h
--- linux-3.3.8/arch/x86/include/asm/bitops.h	2012-03-19 10:38:56.420050006 +0100
+++ linux-3.3.8-pax/arch/x86/include/asm/bitops.h	2012-03-19 10:43:43.052034701 +0100
@@ -38,7 +38,7 @@
  * a mask operation on a byte.
  */
 #define IS_IMMEDIATE(nr)		(__builtin_constant_p(nr))
-#define CONST_MASK_ADDR(nr, addr)	BITOP_ADDR((void *)(addr) + ((nr)>>3))
+#define CONST_MASK_ADDR(nr, addr)	BITOP_ADDR((volatile void *)(addr) + ((nr)>>3))
 #define CONST_MASK(nr)			(1 << ((nr) & 7))
 
 /**
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/boot.h linux-3.3.8-pax/arch/x86/include/asm/boot.h
--- linux-3.3.8/arch/x86/include/asm/boot.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/boot.h	2012-03-19 10:43:43.052034701 +0100
@@ -11,10 +11,15 @@
 #include <asm/pgtable_types.h>
 
 /* Physical address where kernel should be loaded. */
-#define LOAD_PHYSICAL_ADDR ((CONFIG_PHYSICAL_START \
+#define ____LOAD_PHYSICAL_ADDR ((CONFIG_PHYSICAL_START \
 				+ (CONFIG_PHYSICAL_ALIGN - 1)) \
 				& ~(CONFIG_PHYSICAL_ALIGN - 1))
 
+#ifndef __ASSEMBLY__
+extern unsigned char __LOAD_PHYSICAL_ADDR[];
+#define LOAD_PHYSICAL_ADDR ((unsigned long)__LOAD_PHYSICAL_ADDR)
+#endif
+
 /* Minimum kernel alignment, as a power of two */
 #ifdef CONFIG_X86_64
 #define MIN_KERNEL_ALIGN_LG2	PMD_SHIFT
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/cacheflush.h linux-3.3.8-pax/arch/x86/include/asm/cacheflush.h
--- linux-3.3.8/arch/x86/include/asm/cacheflush.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/cacheflush.h	2012-03-19 10:43:43.052034701 +0100
@@ -26,7 +26,7 @@ static inline unsigned long get_page_mem
 	unsigned long pg_flags = pg->flags & _PGMT_MASK;
 
 	if (pg_flags == _PGMT_DEFAULT)
-		return -1;
+		return ~0UL;
 	else if (pg_flags == _PGMT_WC)
 		return _PAGE_CACHE_WC;
 	else if (pg_flags == _PGMT_UC_MINUS)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/cache.h linux-3.3.8-pax/arch/x86/include/asm/cache.h
--- linux-3.3.8/arch/x86/include/asm/cache.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/cache.h	2012-03-19 10:43:43.056034697 +0100
@@ -5,12 +5,13 @@
 
 /* L1 cache line size */
 #define L1_CACHE_SHIFT	(CONFIG_X86_L1_CACHE_SHIFT)
-#define L1_CACHE_BYTES	(1 << L1_CACHE_SHIFT)
+#define L1_CACHE_BYTES	(_AC(1,UL) << L1_CACHE_SHIFT)
 
 #define __read_mostly __attribute__((__section__(".data..read_mostly")))
+#define __read_only __attribute__((__section__(".data..read_only")))
 
 #define INTERNODE_CACHE_SHIFT CONFIG_X86_INTERNODE_CACHE_SHIFT
-#define INTERNODE_CACHE_BYTES (1 << INTERNODE_CACHE_SHIFT)
+#define INTERNODE_CACHE_BYTES (_AC(1,UL) << INTERNODE_CACHE_SHIFT)
 
 #ifdef CONFIG_X86_VSMP
 #ifdef CONFIG_SMP
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/checksum_32.h linux-3.3.8-pax/arch/x86/include/asm/checksum_32.h
--- linux-3.3.8/arch/x86/include/asm/checksum_32.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/checksum_32.h	2012-03-19 10:43:43.064034698 +0100
@@ -31,6 +31,14 @@ asmlinkage __wsum csum_partial_copy_gene
 					    int len, __wsum sum,
 					    int *src_err_ptr, int *dst_err_ptr);
 
+asmlinkage __wsum csum_partial_copy_generic_to_user(const void *src, void *dst,
+						  int len, __wsum sum,
+						  int *src_err_ptr, int *dst_err_ptr);
+
+asmlinkage __wsum csum_partial_copy_generic_from_user(const void *src, void *dst,
+						  int len, __wsum sum,
+						  int *src_err_ptr, int *dst_err_ptr);
+
 /*
  *	Note: when you get a NULL pointer exception here this means someone
  *	passed in an incorrect kernel address to one of these functions.
@@ -50,7 +58,7 @@ static inline __wsum csum_partial_copy_f
 						 int *err_ptr)
 {
 	might_sleep();
-	return csum_partial_copy_generic((__force void *)src, dst,
+	return csum_partial_copy_generic_from_user((__force void *)src, dst,
 					 len, sum, err_ptr, NULL);
 }
 
@@ -178,7 +186,7 @@ static inline __wsum csum_and_copy_to_us
 {
 	might_sleep();
 	if (access_ok(VERIFY_WRITE, dst, len))
-		return csum_partial_copy_generic(src, (__force void *)dst,
+		return csum_partial_copy_generic_to_user(src, (__force void *)dst,
 						 len, sum, NULL, err_ptr);
 
 	if (len)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/cmpxchg.h linux-3.3.8-pax/arch/x86/include/asm/cmpxchg.h
--- linux-3.3.8/arch/x86/include/asm/cmpxchg.h	2012-04-23 14:06:59.211285816 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/cmpxchg.h	2012-04-13 19:44:23.625018584 +0200
@@ -14,8 +14,12 @@ extern void __cmpxchg_wrong_size(void)
 	__compiletime_error("Bad argument size for cmpxchg");
 extern void __xadd_wrong_size(void)
 	__compiletime_error("Bad argument size for xadd");
+extern void __xadd_check_overflow_wrong_size(void)
+	__compiletime_error("Bad argument size for xadd_check_overflow");
 extern void __add_wrong_size(void)
 	__compiletime_error("Bad argument size for add");
+extern void __add_check_overflow_wrong_size(void)
+	__compiletime_error("Bad argument size for add_check_overflow");
 
 /*
  * Constants for operation sizes. On 32-bit, the 64-bit size it set to
@@ -67,6 +71,34 @@ extern void __add_wrong_size(void)
 		__ret;							\
 	})
 
+#define __xchg_op_check_overflow(ptr, arg, op, lock)			\
+	({								\
+	        __typeof__ (*(ptr)) __ret = (arg);			\
+		switch (sizeof(*(ptr))) {				\
+		case __X86_CASE_L:					\
+			asm volatile (lock #op "l %0, %1\n"		\
+				      "jno 0f\n"			\
+				      "mov %0,%1\n"			\
+				      "int $4\n0:\n"			\
+				      _ASM_EXTABLE(0b, 0b)		\
+				      : "+r" (__ret), "+m" (*(ptr))	\
+				      : : "memory", "cc");		\
+			break;						\
+		case __X86_CASE_Q:					\
+			asm volatile (lock #op "q %q0, %1\n"		\
+				      "jno 0f\n"			\
+				      "mov %0,%1\n"			\
+				      "int $4\n0:\n"			\
+				      _ASM_EXTABLE(0b, 0b)		\
+				      : "+r" (__ret), "+m" (*(ptr))	\
+				      : : "memory", "cc");		\
+			break;						\
+		default:						\
+			__ ## op ## _check_overflow_wrong_size();	\
+		}							\
+		__ret;							\
+	})
+
 /*
  * Note: no "lock" prefix even on SMP: xchg always implies lock anyway.
  * Since this is generally used to protect other memory information, we
@@ -167,6 +199,9 @@ extern void __add_wrong_size(void)
 #define xadd_sync(ptr, inc)	__xadd((ptr), (inc), "lock; ")
 #define xadd_local(ptr, inc)	__xadd((ptr), (inc), "")
 
+#define __xadd_check_overflow(ptr, inc, lock)	__xchg_op_check_overflow((ptr), (inc), xadd, lock)
+#define xadd_check_overflow(ptr, inc)		__xadd_check_overflow((ptr), (inc), LOCK_PREFIX)
+
 #define __add(ptr, inc, lock)						\
 	({								\
 	        __typeof__ (*(ptr)) __ret = (inc);			\
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/cpufeature.h linux-3.3.8-pax/arch/x86/include/asm/cpufeature.h
--- linux-3.3.8/arch/x86/include/asm/cpufeature.h	2012-03-19 10:38:56.424050006 +0100
+++ linux-3.3.8-pax/arch/x86/include/asm/cpufeature.h	2012-03-19 10:43:43.068034700 +0100
@@ -367,7 +367,7 @@ static __always_inline __pure bool __sta
 			     ".section .discard,\"aw\",@progbits\n"
 			     " .byte 0xff + (4f-3f) - (2b-1b)\n" /* size check */
 			     ".previous\n"
-			     ".section .altinstr_replacement,\"ax\"\n"
+			     ".section .altinstr_replacement,\"a\"\n"
 			     "3: movb $1,%0\n"
 			     "4:\n"
 			     ".previous\n"
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/desc_defs.h linux-3.3.8-pax/arch/x86/include/asm/desc_defs.h
--- linux-3.3.8/arch/x86/include/asm/desc_defs.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/desc_defs.h	2012-03-19 10:43:43.068034700 +0100
@@ -31,6 +31,12 @@ struct desc_struct {
 			unsigned base1: 8, type: 4, s: 1, dpl: 2, p: 1;
 			unsigned limit: 4, avl: 1, l: 1, d: 1, g: 1, base2: 8;
 		};
+		struct {
+			u16 offset_low;
+			u16 seg;
+			unsigned reserved: 8, type: 4, s: 1, dpl: 2, p: 1;
+			unsigned offset_high: 16;
+		} gate;
 	};
 } __attribute__((packed));
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/desc.h linux-3.3.8-pax/arch/x86/include/asm/desc.h
--- linux-3.3.8/arch/x86/include/asm/desc.h	2012-03-19 10:38:56.428050005 +0100
+++ linux-3.3.8-pax/arch/x86/include/asm/desc.h	2012-03-19 10:43:43.068034700 +0100
@@ -4,6 +4,7 @@
 #include <asm/desc_defs.h>
 #include <asm/ldt.h>
 #include <asm/mmu.h>
+#include <asm/pgtable.h>
 
 #include <linux/smp.h>
 
@@ -16,6 +17,7 @@ static inline void fill_ldt(struct desc_
 
 	desc->type		= (info->read_exec_only ^ 1) << 1;
 	desc->type	       |= info->contents << 2;
+	desc->type	       |= info->seg_not_present ^ 1;
 
 	desc->s			= 1;
 	desc->dpl		= 0x3;
@@ -34,19 +36,14 @@ static inline void fill_ldt(struct desc_
 }
 
 extern struct desc_ptr idt_descr;
-extern gate_desc idt_table[];
 extern struct desc_ptr nmi_idt_descr;
-extern gate_desc nmi_idt_table[];
-
-struct gdt_page {
-	struct desc_struct gdt[GDT_ENTRIES];
-} __attribute__((aligned(PAGE_SIZE)));
-
-DECLARE_PER_CPU_PAGE_ALIGNED(struct gdt_page, gdt_page);
+extern gate_desc idt_table[256];
+extern gate_desc nmi_idt_table[256];
 
+extern struct desc_struct cpu_gdt_table[NR_CPUS][PAGE_SIZE / sizeof(struct desc_struct)];
 static inline struct desc_struct *get_cpu_gdt_table(unsigned int cpu)
 {
-	return per_cpu(gdt_page, cpu).gdt;
+	return cpu_gdt_table[cpu];
 }
 
 #ifdef CONFIG_X86_64
@@ -71,8 +68,14 @@ static inline void pack_gate(gate_desc *
 			     unsigned long base, unsigned dpl, unsigned flags,
 			     unsigned short seg)
 {
-	gate->a = (seg << 16) | (base & 0xffff);
-	gate->b = (base & 0xffff0000) | (((0x80 | type | (dpl << 5)) & 0xff) << 8);
+	gate->gate.offset_low	= base;
+	gate->gate.seg		= seg;
+	gate->gate.reserved	= 0;
+	gate->gate.type		= type;
+	gate->gate.s		= 0;
+	gate->gate.dpl		= dpl;
+	gate->gate.p		= 1;
+	gate->gate.offset_high	= base >> 16;
 }
 
 #endif
@@ -117,12 +120,16 @@ static inline void paravirt_free_ldt(str
 
 static inline void native_write_idt_entry(gate_desc *idt, int entry, const gate_desc *gate)
 {
+	pax_open_kernel();
 	memcpy(&idt[entry], gate, sizeof(*gate));
+	pax_close_kernel();
 }
 
 static inline void native_write_ldt_entry(struct desc_struct *ldt, int entry, const void *desc)
 {
+	pax_open_kernel();
 	memcpy(&ldt[entry], desc, 8);
+	pax_close_kernel();
 }
 
 static inline void
@@ -136,7 +143,9 @@ native_write_gdt_entry(struct desc_struc
 	default:	size = sizeof(*gdt);		break;
 	}
 
+	pax_open_kernel();
 	memcpy(&gdt[entry], desc, size);
+	pax_close_kernel();
 }
 
 static inline void pack_descriptor(struct desc_struct *desc, unsigned long base,
@@ -209,7 +218,9 @@ static inline void native_set_ldt(const
 
 static inline void native_load_tr_desc(void)
 {
+	pax_open_kernel();
 	asm volatile("ltr %w0"::"q" (GDT_ENTRY_TSS*8));
+	pax_close_kernel();
 }
 
 static inline void native_load_gdt(const struct desc_ptr *dtr)
@@ -246,8 +257,10 @@ static inline void native_load_tls(struc
 	struct desc_struct *gdt = get_cpu_gdt_table(cpu);
 	unsigned int i;
 
+	pax_open_kernel();
 	for (i = 0; i < GDT_ENTRY_TLS_ENTRIES; i++)
 		gdt[GDT_ENTRY_TLS_MIN + i] = t->tls_array[i];
+	pax_close_kernel();
 }
 
 #define _LDT_empty(info)				\
@@ -310,7 +323,7 @@ static inline void set_desc_limit(struct
 }
 
 #ifdef CONFIG_X86_64
-static inline void set_nmi_gate(int gate, void *addr)
+static inline void set_nmi_gate(int gate, const void *addr)
 {
 	gate_desc s;
 
@@ -319,7 +332,7 @@ static inline void set_nmi_gate(int gate
 }
 #endif
 
-static inline void _set_gate(int gate, unsigned type, void *addr,
+static inline void _set_gate(int gate, unsigned type, const void *addr,
 			     unsigned dpl, unsigned ist, unsigned seg)
 {
 	gate_desc s;
@@ -338,7 +351,7 @@ static inline void _set_gate(int gate, u
  * Pentium F0 0F bugfix can have resulted in the mapped
  * IDT being write-protected.
  */
-static inline void set_intr_gate(unsigned int n, void *addr)
+static inline void set_intr_gate(unsigned int n, const void *addr)
 {
 	BUG_ON((unsigned)n > 0xFF);
 	_set_gate(n, GATE_INTERRUPT, addr, 0, 0, __KERNEL_CS);
@@ -368,19 +381,19 @@ static inline void alloc_intr_gate(unsig
 /*
  * This routine sets up an interrupt gate at directory privilege level 3.
  */
-static inline void set_system_intr_gate(unsigned int n, void *addr)
+static inline void set_system_intr_gate(unsigned int n, const void *addr)
 {
 	BUG_ON((unsigned)n > 0xFF);
 	_set_gate(n, GATE_INTERRUPT, addr, 0x3, 0, __KERNEL_CS);
 }
 
-static inline void set_system_trap_gate(unsigned int n, void *addr)
+static inline void set_system_trap_gate(unsigned int n, const void *addr)
 {
 	BUG_ON((unsigned)n > 0xFF);
 	_set_gate(n, GATE_TRAP, addr, 0x3, 0, __KERNEL_CS);
 }
 
-static inline void set_trap_gate(unsigned int n, void *addr)
+static inline void set_trap_gate(unsigned int n, const void *addr)
 {
 	BUG_ON((unsigned)n > 0xFF);
 	_set_gate(n, GATE_TRAP, addr, 0, 0, __KERNEL_CS);
@@ -389,19 +402,31 @@ static inline void set_trap_gate(unsigne
 static inline void set_task_gate(unsigned int n, unsigned int gdt_entry)
 {
 	BUG_ON((unsigned)n > 0xFF);
-	_set_gate(n, GATE_TASK, (void *)0, 0, 0, (gdt_entry<<3));
+	_set_gate(n, GATE_TASK, (const void *)0, 0, 0, (gdt_entry<<3));
 }
 
-static inline void set_intr_gate_ist(int n, void *addr, unsigned ist)
+static inline void set_intr_gate_ist(int n, const void *addr, unsigned ist)
 {
 	BUG_ON((unsigned)n > 0xFF);
 	_set_gate(n, GATE_INTERRUPT, addr, 0, ist, __KERNEL_CS);
 }
 
-static inline void set_system_intr_gate_ist(int n, void *addr, unsigned ist)
+static inline void set_system_intr_gate_ist(int n, const void *addr, unsigned ist)
 {
 	BUG_ON((unsigned)n > 0xFF);
 	_set_gate(n, GATE_INTERRUPT, addr, 0x3, ist, __KERNEL_CS);
 }
 
+#ifdef CONFIG_X86_32
+static inline void set_user_cs(unsigned long base, unsigned long limit, int cpu)
+{
+	struct desc_struct d;
+
+	if (likely(limit))
+		limit = (limit - 1UL) >> PAGE_SHIFT;
+	pack_descriptor(&d, base, limit, 0xFB, 0xC);
+	write_gdt_entry(get_cpu_gdt_table(cpu), GDT_ENTRY_DEFAULT_USER_CS, &d, DESCTYPE_S);
+}
+#endif
+
 #endif /* _ASM_X86_DESC_H */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/e820.h linux-3.3.8-pax/arch/x86/include/asm/e820.h
--- linux-3.3.8/arch/x86/include/asm/e820.h	2012-03-19 10:38:56.428050005 +0100
+++ linux-3.3.8-pax/arch/x86/include/asm/e820.h	2012-03-19 10:43:43.068034700 +0100
@@ -69,7 +69,7 @@ struct e820map {
 #define ISA_START_ADDRESS	0xa0000
 #define ISA_END_ADDRESS		0x100000
 
-#define BIOS_BEGIN		0x000a0000
+#define BIOS_BEGIN		0x000c0000
 #define BIOS_END		0x00100000
 
 #define BIOS_ROM_BASE		0xffe00000
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/elf.h linux-3.3.8-pax/arch/x86/include/asm/elf.h
--- linux-3.3.8/arch/x86/include/asm/elf.h	2012-01-08 19:47:49.123473006 +0100
+++ linux-3.3.8-pax/arch/x86/include/asm/elf.h	2012-03-19 10:43:43.068034701 +0100
@@ -238,7 +238,25 @@ extern int force_personality32;
    the loader.  We need to make sure that it is out of the way of the program
    that it will "exec", and that there is sufficient room for the brk.  */
 
+#ifdef CONFIG_PAX_SEGMEXEC
+#define ELF_ET_DYN_BASE		((current->mm->pax_flags & MF_PAX_SEGMEXEC) ? SEGMEXEC_TASK_SIZE/3*2 : TASK_SIZE/3*2)
+#else
 #define ELF_ET_DYN_BASE		(TASK_SIZE / 3 * 2)
+#endif
+
+#ifdef CONFIG_PAX_ASLR
+#ifdef CONFIG_X86_32
+#define PAX_ELF_ET_DYN_BASE	0x10000000UL
+
+#define PAX_DELTA_MMAP_LEN	(current->mm->pax_flags & MF_PAX_SEGMEXEC ? 15 : 16)
+#define PAX_DELTA_STACK_LEN	(current->mm->pax_flags & MF_PAX_SEGMEXEC ? 15 : 16)
+#else
+#define PAX_ELF_ET_DYN_BASE	0x400000UL
+
+#define PAX_DELTA_MMAP_LEN	((test_thread_flag(TIF_IA32)) ? 16 : TASK_SIZE_MAX_SHIFT - PAGE_SHIFT - 3)
+#define PAX_DELTA_STACK_LEN	((test_thread_flag(TIF_IA32)) ? 16 : TASK_SIZE_MAX_SHIFT - PAGE_SHIFT - 3)
+#endif
+#endif
 
 /* This yields a mask that user programs can use to figure out what
    instruction set this CPU supports.  This could be done in user space,
@@ -291,9 +309,7 @@ do {									\
 
 #define ARCH_DLINFO							\
 do {									\
-	if (vdso_enabled)						\
-		NEW_AUX_ENT(AT_SYSINFO_EHDR,				\
-			    (unsigned long)current->mm->context.vdso);	\
+	NEW_AUX_ENT(AT_SYSINFO_EHDR, current->mm->context.vdso);	\
 } while (0)
 
 #define AT_SYSINFO		32
@@ -304,7 +320,7 @@ do {									\
 
 #endif /* !CONFIG_X86_32 */
 
-#define VDSO_CURRENT_BASE	((unsigned long)current->mm->context.vdso)
+#define VDSO_CURRENT_BASE	(current->mm->context.vdso)
 
 #define VDSO_ENTRY							\
 	((unsigned long)VDSO32_SYMBOL(VDSO_CURRENT_BASE, vsyscall))
@@ -318,9 +334,6 @@ extern int arch_setup_additional_pages(s
 extern int syscall32_setup_pages(struct linux_binprm *, int exstack);
 #define compat_arch_setup_additional_pages	syscall32_setup_pages
 
-extern unsigned long arch_randomize_brk(struct mm_struct *mm);
-#define arch_randomize_brk arch_randomize_brk
-
 /*
  * True on X86_32 or when emulating IA32 on X86_64
  */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/emergency-restart.h linux-3.3.8-pax/arch/x86/include/asm/emergency-restart.h
--- linux-3.3.8/arch/x86/include/asm/emergency-restart.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/emergency-restart.h	2012-03-19 10:43:43.068034701 +0100
@@ -15,6 +15,6 @@ enum reboot_type {
 
 extern enum reboot_type reboot_type;
 
-extern void machine_emergency_restart(void);
+extern void machine_emergency_restart(void) __noreturn;
 
 #endif /* _ASM_X86_EMERGENCY_RESTART_H */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/futex.h linux-3.3.8-pax/arch/x86/include/asm/futex.h
--- linux-3.3.8/arch/x86/include/asm/futex.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/futex.h	2012-03-19 10:43:43.068034701 +0100
@@ -12,16 +12,18 @@
 #include <asm/system.h>
 
 #define __futex_atomic_op1(insn, ret, oldval, uaddr, oparg)	\
+	typecheck(u32 __user *, uaddr);				\
 	asm volatile("1:\t" insn "\n"				\
 		     "2:\t.section .fixup,\"ax\"\n"		\
 		     "3:\tmov\t%3, %1\n"			\
 		     "\tjmp\t2b\n"				\
 		     "\t.previous\n"				\
 		     _ASM_EXTABLE(1b, 3b)			\
-		     : "=r" (oldval), "=r" (ret), "+m" (*uaddr)	\
+		     : "=r" (oldval), "=r" (ret), "+m" (*(u32 __user *)____m(uaddr))\
 		     : "i" (-EFAULT), "0" (oparg), "1" (0))
 
 #define __futex_atomic_op2(insn, ret, oldval, uaddr, oparg)	\
+	typecheck(u32 __user *, uaddr);				\
 	asm volatile("1:\tmovl	%2, %0\n"			\
 		     "\tmovl\t%0, %3\n"				\
 		     "\t" insn "\n"				\
@@ -34,7 +36,7 @@
 		     _ASM_EXTABLE(1b, 4b)			\
 		     _ASM_EXTABLE(2b, 4b)			\
 		     : "=&a" (oldval), "=&r" (ret),		\
-		       "+m" (*uaddr), "=&r" (tem)		\
+		       "+m" (*(u32 __user *)____m(uaddr)), "=&r" (tem)	\
 		     : "r" (oparg), "i" (-EFAULT), "1" (0))
 
 static inline int futex_atomic_op_inuser(int encoded_op, u32 __user *uaddr)
@@ -61,10 +63,10 @@ static inline int futex_atomic_op_inuser
 
 	switch (op) {
 	case FUTEX_OP_SET:
-		__futex_atomic_op1("xchgl %0, %2", ret, oldval, uaddr, oparg);
+		__futex_atomic_op1(__copyuser_seg"xchgl %0, %2", ret, oldval, uaddr, oparg);
 		break;
 	case FUTEX_OP_ADD:
-		__futex_atomic_op1(LOCK_PREFIX "xaddl %0, %2", ret, oldval,
+		__futex_atomic_op1(LOCK_PREFIX __copyuser_seg"xaddl %0, %2", ret, oldval,
 				   uaddr, oparg);
 		break;
 	case FUTEX_OP_OR:
@@ -123,13 +125,13 @@ static inline int futex_atomic_cmpxchg_i
 	if (!access_ok(VERIFY_WRITE, uaddr, sizeof(u32)))
 		return -EFAULT;
 
-	asm volatile("1:\t" LOCK_PREFIX "cmpxchgl %4, %2\n"
+	asm volatile("1:\t" LOCK_PREFIX __copyuser_seg"cmpxchgl %4, %2\n"
 		     "2:\t.section .fixup, \"ax\"\n"
 		     "3:\tmov     %3, %0\n"
 		     "\tjmp     2b\n"
 		     "\t.previous\n"
 		     _ASM_EXTABLE(1b, 3b)
-		     : "+r" (ret), "=a" (oldval), "+m" (*uaddr)
+		     : "+r" (ret), "=a" (oldval), "+m" (*(u32 __user *)____m(uaddr))
 		     : "i" (-EFAULT), "r" (newval), "1" (oldval)
 		     : "memory"
 	);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/hw_irq.h linux-3.3.8-pax/arch/x86/include/asm/hw_irq.h
--- linux-3.3.8/arch/x86/include/asm/hw_irq.h	2012-01-08 19:47:49.127473006 +0100
+++ linux-3.3.8-pax/arch/x86/include/asm/hw_irq.h	2012-03-19 10:43:43.068034701 +0100
@@ -136,8 +136,8 @@ extern void setup_ioapic_dest(void);
 extern void enable_IO_APIC(void);
 
 /* Statistics */
-extern atomic_t irq_err_count;
-extern atomic_t irq_mis_count;
+extern atomic_unchecked_t irq_err_count;
+extern atomic_unchecked_t irq_mis_count;
 
 /* EISA */
 extern void eisa_set_level_irq(unsigned int irq);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/i387.h linux-3.3.8-pax/arch/x86/include/asm/i387.h
--- linux-3.3.8/arch/x86/include/asm/i387.h	2012-03-19 10:38:56.432050005 +0100
+++ linux-3.3.8-pax/arch/x86/include/asm/i387.h	2012-03-19 10:43:43.072034702 +0100
@@ -93,6 +93,11 @@ static inline int fxrstor_checking(struc
 {
 	int err;
 
+#if defined(CONFIG_X86_64) && defined(CONFIG_PAX_MEMORY_UDEREF)
+	if ((unsigned long)fx < PAX_USER_SHADOW_BASE)
+		fx = (struct i387_fxsave_struct __user *)((void *)fx + PAX_USER_SHADOW_BASE);
+#endif
+
 	/* See comment in fxsave() below. */
 #ifdef CONFIG_AS_FXSAVEQ
 	asm volatile("1:  fxrstorq %[fx]\n\t"
@@ -122,6 +127,11 @@ static inline int fxsave_user(struct i38
 {
 	int err;
 
+#if defined(CONFIG_X86_64) && defined(CONFIG_PAX_MEMORY_UDEREF)
+	if ((unsigned long)fx < PAX_USER_SHADOW_BASE)
+		fx = (struct i387_fxsave_struct __user *)((void __user *)fx + PAX_USER_SHADOW_BASE);
+#endif
+
 	/*
 	 * Clear the bytes not touched by the fxsave and reserved
 	 * for the SW usage.
@@ -278,7 +288,7 @@ static inline int restore_fpu_checking(s
 		"emms\n\t"	  	/* clear stack tags */
 		"fildl %P[addr]",	/* set F?P to defined value */
 		X86_FEATURE_FXSAVE_LEAK,
-		[addr] "m" (tsk->thread.fpu.has_fpu));
+		[addr] "m" (init_tss[smp_processor_id()].x86_tss.sp0));
 
 	return fpu_restore_checking(&tsk->thread.fpu);
 }
@@ -445,7 +455,7 @@ static inline bool interrupted_kernel_fp
 static inline bool interrupted_user_mode(void)
 {
 	struct pt_regs *regs = get_irq_regs();
-	return regs && user_mode_vm(regs);
+	return regs && user_mode(regs);
 }
 
 /*
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/io.h linux-3.3.8-pax/arch/x86/include/asm/io.h
--- linux-3.3.8/arch/x86/include/asm/io.h	2011-10-24 12:48:26.091091780 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/io.h	2012-03-19 10:43:43.072034702 +0100
@@ -194,6 +194,17 @@ extern void set_iounmap_nonlazy(void);
 
 #include <linux/vmalloc.h>
 
+#define ARCH_HAS_VALID_PHYS_ADDR_RANGE
+static inline int valid_phys_addr_range(unsigned long addr, size_t count)
+{
+	return ((addr + count + PAGE_SIZE - 1) >> PAGE_SHIFT) < (1ULL << (boot_cpu_data.x86_phys_bits - PAGE_SHIFT)) ? 1 : 0;
+}
+
+static inline int valid_mmap_phys_addr_range(unsigned long pfn, size_t count)
+{
+	return (pfn + (count >> PAGE_SHIFT)) < (1ULL << (boot_cpu_data.x86_phys_bits - PAGE_SHIFT)) ? 1 : 0;
+}
+
 /*
  * Convert a virtual cached pointer to an uncached pointer
  */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/irqflags.h linux-3.3.8-pax/arch/x86/include/asm/irqflags.h
--- linux-3.3.8/arch/x86/include/asm/irqflags.h	2011-10-24 12:48:26.103091782 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/irqflags.h	2012-03-19 10:43:43.072034702 +0100
@@ -141,6 +141,11 @@ static inline notrace unsigned long arch
 	sti;					\
 	sysexit
 
+#define GET_CR0_INTO_RDI		mov %cr0, %rdi
+#define SET_RDI_INTO_CR0		mov %rdi, %cr0
+#define GET_CR3_INTO_RDI		mov %cr3, %rdi
+#define SET_RDI_INTO_CR3		mov %rdi, %cr3
+
 #else
 #define INTERRUPT_RETURN		iret
 #define ENABLE_INTERRUPTS_SYSEXIT	sti; sysexit
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/kprobes.h linux-3.3.8-pax/arch/x86/include/asm/kprobes.h
--- linux-3.3.8/arch/x86/include/asm/kprobes.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/kprobes.h	2012-03-19 10:43:43.072034702 +0100
@@ -37,13 +37,8 @@ typedef u8 kprobe_opcode_t;
 #define RELATIVEJUMP_SIZE 5
 #define RELATIVECALL_OPCODE 0xe8
 #define RELATIVE_ADDR_SIZE 4
-#define MAX_STACK_SIZE 64
-#define MIN_STACK_SIZE(ADDR)					       \
-	(((MAX_STACK_SIZE) < (((unsigned long)current_thread_info()) + \
-			      THREAD_SIZE - (unsigned long)(ADDR)))    \
-	 ? (MAX_STACK_SIZE)					       \
-	 : (((unsigned long)current_thread_info()) +		       \
-	    THREAD_SIZE - (unsigned long)(ADDR)))
+#define MAX_STACK_SIZE 64UL
+#define MIN_STACK_SIZE(ADDR)	min(MAX_STACK_SIZE, current->thread.sp0 - (unsigned long)(ADDR))
 
 #define flush_insn_slot(p)	do { } while (0)
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/kvm_host.h linux-3.3.8-pax/arch/x86/include/asm/kvm_host.h
--- linux-3.3.8/arch/x86/include/asm/kvm_host.h	2012-03-19 10:38:56.440050005 +0100
+++ linux-3.3.8-pax/arch/x86/include/asm/kvm_host.h	2012-05-16 21:21:01.985543429 +0200
@@ -663,7 +663,7 @@ struct kvm_x86_ops {
 	int (*check_intercept)(struct kvm_vcpu *vcpu,
 			       struct x86_instruction_info *info,
 			       enum x86_intercept_stage stage);
-};
+} __do_const;
 
 struct kvm_arch_async_pf {
 	u32 token;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/local.h linux-3.3.8-pax/arch/x86/include/asm/local.h
--- linux-3.3.8/arch/x86/include/asm/local.h	2011-10-24 12:48:26.115091779 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/local.h	2012-03-19 10:43:43.076034702 +0100
@@ -18,26 +18,58 @@ typedef struct {
 
 static inline void local_inc(local_t *l)
 {
-	asm volatile(_ASM_INC "%0"
+	asm volatile(_ASM_INC "%0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     _ASM_DEC "%0\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
 		     : "+m" (l->a.counter));
 }
 
 static inline void local_dec(local_t *l)
 {
-	asm volatile(_ASM_DEC "%0"
+	asm volatile(_ASM_DEC "%0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     _ASM_INC "%0\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
 		     : "+m" (l->a.counter));
 }
 
 static inline void local_add(long i, local_t *l)
 {
-	asm volatile(_ASM_ADD "%1,%0"
+	asm volatile(_ASM_ADD "%1,%0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     _ASM_SUB "%1,%0\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
 		     : "+m" (l->a.counter)
 		     : "ir" (i));
 }
 
 static inline void local_sub(long i, local_t *l)
 {
-	asm volatile(_ASM_SUB "%1,%0"
+	asm volatile(_ASM_SUB "%1,%0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     _ASM_ADD "%1,%0\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
 		     : "+m" (l->a.counter)
 		     : "ir" (i));
 }
@@ -55,7 +87,16 @@ static inline int local_sub_and_test(lon
 {
 	unsigned char c;
 
-	asm volatile(_ASM_SUB "%2,%0; sete %1"
+	asm volatile(_ASM_SUB "%2,%0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     _ASM_ADD "%2,%0\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
+		     "sete %1\n"
 		     : "+m" (l->a.counter), "=qm" (c)
 		     : "ir" (i) : "memory");
 	return c;
@@ -73,7 +114,16 @@ static inline int local_dec_and_test(loc
 {
 	unsigned char c;
 
-	asm volatile(_ASM_DEC "%0; sete %1"
+	asm volatile(_ASM_DEC "%0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     _ASM_INC "%0\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
+		     "sete %1\n"
 		     : "+m" (l->a.counter), "=qm" (c)
 		     : : "memory");
 	return c != 0;
@@ -91,7 +141,16 @@ static inline int local_inc_and_test(loc
 {
 	unsigned char c;
 
-	asm volatile(_ASM_INC "%0; sete %1"
+	asm volatile(_ASM_INC "%0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     _ASM_DEC "%0\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
+		     "sete %1\n"
 		     : "+m" (l->a.counter), "=qm" (c)
 		     : : "memory");
 	return c != 0;
@@ -110,7 +169,16 @@ static inline int local_add_negative(lon
 {
 	unsigned char c;
 
-	asm volatile(_ASM_ADD "%2,%0; sets %1"
+	asm volatile(_ASM_ADD "%2,%0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     _ASM_SUB "%2,%0\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
+		     "sets %1\n"
 		     : "+m" (l->a.counter), "=qm" (c)
 		     : "ir" (i) : "memory");
 	return c;
@@ -133,7 +201,15 @@ static inline long local_add_return(long
 #endif
 	/* Modern 486+ processor */
 	__i = i;
-	asm volatile(_ASM_XADD "%0, %1;"
+	asm volatile(_ASM_XADD "%0, %1\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     _ASM_MOV "%0,%1\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
 		     : "+r" (i), "+m" (l->a.counter)
 		     : : "memory");
 	return i + __i;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/mman.h linux-3.3.8-pax/arch/x86/include/asm/mman.h
--- linux-3.3.8/arch/x86/include/asm/mman.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/mman.h	2012-03-19 10:43:43.076034702 +0100
@@ -5,4 +5,14 @@
 
 #include <asm-generic/mman.h>
 
+#ifdef __KERNEL__
+#ifndef __ASSEMBLY__
+#ifdef CONFIG_X86_32
+#define arch_mmap_check	i386_mmap_check
+int i386_mmap_check(unsigned long addr, unsigned long len,
+		unsigned long flags);
+#endif
+#endif
+#endif
+
 #endif /* _ASM_X86_MMAN_H */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/mmu_context.h linux-3.3.8-pax/arch/x86/include/asm/mmu_context.h
--- linux-3.3.8/arch/x86/include/asm/mmu_context.h	2011-10-24 12:48:26.115091779 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/mmu_context.h	2012-05-26 01:09:47.800792555 +0200
@@ -24,6 +24,18 @@ void destroy_context(struct mm_struct *m
 
 static inline void enter_lazy_tlb(struct mm_struct *mm, struct task_struct *tsk)
 {
+
+#if defined(CONFIG_X86_64) && defined(CONFIG_PAX_MEMORY_UDEREF)
+	unsigned int i;
+	pgd_t *pgd;
+
+	pax_open_kernel();
+	pgd = get_cpu_pgd(smp_processor_id());
+	for (i = USER_PGD_PTRS; i < 2 * USER_PGD_PTRS; ++i)
+		set_pgd_batched(pgd+i, native_make_pgd(0));
+	pax_close_kernel();
+#endif
+
 #ifdef CONFIG_SMP
 	if (percpu_read(cpu_tlbstate.state) == TLBSTATE_OK)
 		percpu_write(cpu_tlbstate.state, TLBSTATE_LAZY);
@@ -34,16 +46,30 @@ static inline void switch_mm(struct mm_s
 			     struct task_struct *tsk)
 {
 	unsigned cpu = smp_processor_id();
+#if defined(CONFIG_X86_32) && defined(CONFIG_SMP) && (defined(CONFIG_PAX_PAGEEXEC) || defined(CONFIG_PAX_SEGMEXEC))
+	int tlbstate = TLBSTATE_OK;
+#endif
 
 	if (likely(prev != next)) {
 #ifdef CONFIG_SMP
+#if defined(CONFIG_X86_32) && (defined(CONFIG_PAX_PAGEEXEC) || defined(CONFIG_PAX_SEGMEXEC))
+		tlbstate = percpu_read(cpu_tlbstate.state);
+#endif
 		percpu_write(cpu_tlbstate.state, TLBSTATE_OK);
 		percpu_write(cpu_tlbstate.active_mm, next);
 #endif
 		cpumask_set_cpu(cpu, mm_cpumask(next));
 
 		/* Re-load page tables */
+#ifdef CONFIG_PAX_PER_CPU_PGD
+		pax_open_kernel();
+		__clone_user_pgds(get_cpu_pgd(cpu), next->pgd);
+		__shadow_user_pgds(get_cpu_pgd(cpu) + USER_PGD_PTRS, next->pgd);
+		pax_close_kernel();
+		load_cr3(get_cpu_pgd(cpu));
+#else
 		load_cr3(next->pgd);
+#endif
 
 		/* stop flush ipis for the previous mm */
 		cpumask_clear_cpu(cpu, mm_cpumask(prev));
@@ -53,9 +79,38 @@ static inline void switch_mm(struct mm_s
 		 */
 		if (unlikely(prev->context.ldt != next->context.ldt))
 			load_LDT_nolock(&next->context);
-	}
+
+#if defined(CONFIG_X86_32) && defined(CONFIG_PAX_PAGEEXEC) && defined(CONFIG_SMP)
+		if (!(__supported_pte_mask & _PAGE_NX)) {
+			smp_mb__before_clear_bit();
+			cpu_clear(cpu, prev->context.cpu_user_cs_mask);
+			smp_mb__after_clear_bit();
+			cpu_set(cpu, next->context.cpu_user_cs_mask);
+		}
+#endif
+
+#if defined(CONFIG_X86_32) && (defined(CONFIG_PAX_PAGEEXEC) || defined(CONFIG_PAX_SEGMEXEC))
+		if (unlikely(prev->context.user_cs_base != next->context.user_cs_base ||
+			     prev->context.user_cs_limit != next->context.user_cs_limit))
+			set_user_cs(next->context.user_cs_base, next->context.user_cs_limit, cpu);
 #ifdef CONFIG_SMP
+		else if (unlikely(tlbstate != TLBSTATE_OK))
+			set_user_cs(next->context.user_cs_base, next->context.user_cs_limit, cpu);
+#endif
+#endif
+
+	}
 	else {
+
+#ifdef CONFIG_PAX_PER_CPU_PGD
+		pax_open_kernel();
+		__clone_user_pgds(get_cpu_pgd(cpu), next->pgd);
+		__shadow_user_pgds(get_cpu_pgd(cpu) + USER_PGD_PTRS, next->pgd);
+		pax_close_kernel();
+		load_cr3(get_cpu_pgd(cpu));
+#endif
+
+#ifdef CONFIG_SMP
 		percpu_write(cpu_tlbstate.state, TLBSTATE_OK);
 		BUG_ON(percpu_read(cpu_tlbstate.active_mm) != next);
 
@@ -64,11 +119,28 @@ static inline void switch_mm(struct mm_s
 			 * tlb flush IPI delivery. We must reload CR3
 			 * to make sure to use no freed page tables.
 			 */
+
+#ifndef CONFIG_PAX_PER_CPU_PGD
 			load_cr3(next->pgd);
+#endif
+
 			load_LDT_nolock(&next->context);
+
+#if defined(CONFIG_X86_32) && defined(CONFIG_PAX_PAGEEXEC)
+			if (!(__supported_pte_mask & _PAGE_NX))
+				cpu_set(cpu, next->context.cpu_user_cs_mask);
+#endif
+
+#if defined(CONFIG_X86_32) && (defined(CONFIG_PAX_PAGEEXEC) || defined(CONFIG_PAX_SEGMEXEC))
+#ifdef CONFIG_PAX_PAGEEXEC
+			if (!((next->pax_flags & MF_PAX_PAGEEXEC) && (__supported_pte_mask & _PAGE_NX)))
+#endif
+				set_user_cs(next->context.user_cs_base, next->context.user_cs_limit, cpu);
+#endif
+
 		}
-	}
 #endif
+	}
 }
 
 #define activate_mm(prev, next)			\
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/mmu.h linux-3.3.8-pax/arch/x86/include/asm/mmu.h
--- linux-3.3.8/arch/x86/include/asm/mmu.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/mmu.h	2012-03-19 10:43:43.076034702 +0100
@@ -9,7 +9,7 @@
  * we put the segment information here.
  */
 typedef struct {
-	void *ldt;
+	struct desc_struct *ldt;
 	int size;
 
 #ifdef CONFIG_X86_64
@@ -18,7 +18,19 @@ typedef struct {
 #endif
 
 	struct mutex lock;
-	void *vdso;
+	unsigned long vdso;
+
+#ifdef CONFIG_X86_32
+#if defined(CONFIG_PAX_PAGEEXEC) || defined(CONFIG_PAX_SEGMEXEC)
+	unsigned long user_cs_base;
+	unsigned long user_cs_limit;
+
+#if defined(CONFIG_PAX_PAGEEXEC) && defined(CONFIG_SMP)
+	cpumask_t cpu_user_cs_mask;
+#endif
+
+#endif
+#endif
 } mm_context_t;
 
 #ifdef CONFIG_SMP
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/module.h linux-3.3.8-pax/arch/x86/include/asm/module.h
--- linux-3.3.8/arch/x86/include/asm/module.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/module.h	2012-03-19 10:43:43.080034702 +0100
@@ -5,6 +5,7 @@
 
 #ifdef CONFIG_X86_64
 /* X86_64 does not define MODULE_PROC_FAMILY */
+#define MODULE_PROC_FAMILY ""
 #elif defined CONFIG_M386
 #define MODULE_PROC_FAMILY "386 "
 #elif defined CONFIG_M486
@@ -59,8 +60,20 @@
 #error unknown processor family
 #endif
 
-#ifdef CONFIG_X86_32
-# define MODULE_ARCH_VERMAGIC MODULE_PROC_FAMILY
+#ifdef CONFIG_PAX_KERNEXEC_PLUGIN_METHOD_BTS
+#define MODULE_PAX_KERNEXEC "KERNEXEC_BTS "
+#elif defined(CONFIG_PAX_KERNEXEC_PLUGIN_METHOD_OR)
+#define MODULE_PAX_KERNEXEC "KERNEXEC_OR "
+#else
+#define MODULE_PAX_KERNEXEC ""
 #endif
 
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+#define MODULE_PAX_UDEREF "UDEREF "
+#else
+#define MODULE_PAX_UDEREF ""
+#endif
+
+#define MODULE_ARCH_VERMAGIC MODULE_PROC_FAMILY MODULE_PAX_KERNEXEC MODULE_PAX_UDEREF
+
 #endif /* _ASM_X86_MODULE_H */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/page_64_types.h linux-3.3.8-pax/arch/x86/include/asm/page_64_types.h
--- linux-3.3.8/arch/x86/include/asm/page_64_types.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/page_64_types.h	2012-03-19 10:43:43.080034702 +0100
@@ -56,7 +56,7 @@ void copy_page(void *to, void *from);
 
 /* duplicated to the one in bootmem.h */
 extern unsigned long max_pfn;
-extern unsigned long phys_base;
+extern const unsigned long phys_base;
 
 extern unsigned long __phys_addr(unsigned long);
 #define __phys_reloc_hide(x)	(x)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/paravirt.h linux-3.3.8-pax/arch/x86/include/asm/paravirt.h
--- linux-3.3.8/arch/x86/include/asm/paravirt.h	2011-10-24 12:48:26.123091780 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/paravirt.h	2012-03-19 10:43:43.080034702 +0100
@@ -667,6 +667,18 @@ static inline void set_pgd(pgd_t *pgdp,
 			    val);
 }
 
+static inline void set_pgd_batched(pgd_t *pgdp, pgd_t pgd)
+{
+	pgdval_t val = native_pgd_val(pgd);
+
+	if (sizeof(pgdval_t) > sizeof(long))
+		PVOP_VCALL3(pv_mmu_ops.set_pgd_batched, pgdp,
+			    val, (u64)val >> 32);
+	else
+		PVOP_VCALL2(pv_mmu_ops.set_pgd_batched, pgdp,
+			    val);
+}
+
 static inline void pgd_clear(pgd_t *pgdp)
 {
 	set_pgd(pgdp, __pgd(0));
@@ -748,6 +760,21 @@ static inline void __set_fixmap(unsigned
 	pv_mmu_ops.set_fixmap(idx, phys, flags);
 }
 
+#ifdef CONFIG_PAX_KERNEXEC
+static inline unsigned long pax_open_kernel(void)
+{
+	return PVOP_CALL0(unsigned long, pv_mmu_ops.pax_open_kernel);
+}
+
+static inline unsigned long pax_close_kernel(void)
+{
+	return PVOP_CALL0(unsigned long, pv_mmu_ops.pax_close_kernel);
+}
+#else
+static inline unsigned long pax_open_kernel(void) { return 0; }
+static inline unsigned long pax_close_kernel(void) { return 0; }
+#endif
+
 #if defined(CONFIG_SMP) && defined(CONFIG_PARAVIRT_SPINLOCKS)
 
 static inline int arch_spin_is_locked(struct arch_spinlock *lock)
@@ -964,7 +991,7 @@ extern void default_banner(void);
 
 #define PARA_PATCH(struct, off)        ((PARAVIRT_PATCH_##struct + (off)) / 4)
 #define PARA_SITE(ptype, clobbers, ops) _PVSITE(ptype, clobbers, ops, .long, 4)
-#define PARA_INDIRECT(addr)	*%cs:addr
+#define PARA_INDIRECT(addr)	*%ss:addr
 #endif
 
 #define INTERRUPT_RETURN						\
@@ -1041,6 +1068,21 @@ extern void default_banner(void);
 	PARA_SITE(PARA_PATCH(pv_cpu_ops, PV_CPU_irq_enable_sysexit),	\
 		  CLBR_NONE,						\
 		  jmp PARA_INDIRECT(pv_cpu_ops+PV_CPU_irq_enable_sysexit))
+
+#define GET_CR0_INTO_RDI				\
+	call PARA_INDIRECT(pv_cpu_ops+PV_CPU_read_cr0);	\
+	mov %rax,%rdi
+
+#define SET_RDI_INTO_CR0				\
+	call PARA_INDIRECT(pv_cpu_ops+PV_CPU_write_cr0)
+
+#define GET_CR3_INTO_RDI				\
+	call PARA_INDIRECT(pv_mmu_ops+PV_MMU_read_cr3);	\
+	mov %rax,%rdi
+
+#define SET_RDI_INTO_CR3				\
+	call PARA_INDIRECT(pv_mmu_ops+PV_MMU_write_cr3)
+
 #endif	/* CONFIG_X86_32 */
 
 #endif /* __ASSEMBLY__ */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/paravirt_types.h linux-3.3.8-pax/arch/x86/include/asm/paravirt_types.h
--- linux-3.3.8/arch/x86/include/asm/paravirt_types.h	2011-10-24 12:48:26.123091780 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/paravirt_types.h	2012-03-19 10:43:43.080034702 +0100
@@ -84,20 +84,20 @@ struct pv_init_ops {
 	 */
 	unsigned (*patch)(u8 type, u16 clobber, void *insnbuf,
 			  unsigned long addr, unsigned len);
-};
+} __no_const;
 
 
 struct pv_lazy_ops {
 	/* Set deferred update mode, used for batching operations. */
 	void (*enter)(void);
 	void (*leave)(void);
-};
+} __no_const;
 
 struct pv_time_ops {
 	unsigned long long (*sched_clock)(void);
 	unsigned long long (*steal_clock)(int cpu);
 	unsigned long (*get_tsc_khz)(void);
-};
+} __no_const;
 
 struct pv_cpu_ops {
 	/* hooks for various privileged instructions */
@@ -193,7 +193,7 @@ struct pv_cpu_ops {
 
 	void (*start_context_switch)(struct task_struct *prev);
 	void (*end_context_switch)(struct task_struct *next);
-};
+} __no_const;
 
 struct pv_irq_ops {
 	/*
@@ -224,7 +224,7 @@ struct pv_apic_ops {
 				 unsigned long start_eip,
 				 unsigned long start_esp);
 #endif
-};
+} __no_const;
 
 struct pv_mmu_ops {
 	unsigned long (*read_cr2)(void);
@@ -313,6 +313,7 @@ struct pv_mmu_ops {
 	struct paravirt_callee_save make_pud;
 
 	void (*set_pgd)(pgd_t *pudp, pgd_t pgdval);
+	void (*set_pgd_batched)(pgd_t *pudp, pgd_t pgdval);
 #endif	/* PAGETABLE_LEVELS == 4 */
 #endif	/* PAGETABLE_LEVELS >= 3 */
 
@@ -324,6 +325,12 @@ struct pv_mmu_ops {
 	   an mfn.  We can tell which is which from the index. */
 	void (*set_fixmap)(unsigned /* enum fixed_addresses */ idx,
 			   phys_addr_t phys, pgprot_t flags);
+
+#ifdef CONFIG_PAX_KERNEXEC
+	unsigned long (*pax_open_kernel)(void);
+	unsigned long (*pax_close_kernel)(void);
+#endif
+
 };
 
 struct arch_spinlock;
@@ -334,7 +341,7 @@ struct pv_lock_ops {
 	void (*spin_lock_flags)(struct arch_spinlock *lock, unsigned long flags);
 	int (*spin_trylock)(struct arch_spinlock *lock);
 	void (*spin_unlock)(struct arch_spinlock *lock);
-};
+} __no_const;
 
 /* This contains all the paravirt structures: we get a convenient
  * number for each function using the offset which we use to indicate
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/pgalloc.h linux-3.3.8-pax/arch/x86/include/asm/pgalloc.h
--- linux-3.3.8/arch/x86/include/asm/pgalloc.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/pgalloc.h	2012-05-02 03:42:11.813294263 +0200
@@ -63,6 +63,13 @@ static inline void pmd_populate_kernel(s
 				       pmd_t *pmd, pte_t *pte)
 {
 	paravirt_alloc_pte(mm, __pa(pte) >> PAGE_SHIFT);
+	set_pmd(pmd, __pmd(__pa(pte) | _KERNPG_TABLE));
+}
+
+static inline void pmd_populate_user(struct mm_struct *mm,
+				       pmd_t *pmd, pte_t *pte)
+{
+	paravirt_alloc_pte(mm, __pa(pte) >> PAGE_SHIFT);
 	set_pmd(pmd, __pmd(__pa(pte) | _PAGE_TABLE));
 }
 
@@ -99,12 +106,22 @@ static inline void __pmd_free_tlb(struct
 
 #ifdef CONFIG_X86_PAE
 extern void pud_populate(struct mm_struct *mm, pud_t *pudp, pmd_t *pmd);
+static inline void pud_populate_kernel(struct mm_struct *mm, pud_t *pudp, pmd_t *pmd)
+{
+	pud_populate(mm, pudp, pmd);
+}
 #else	/* !CONFIG_X86_PAE */
 static inline void pud_populate(struct mm_struct *mm, pud_t *pud, pmd_t *pmd)
 {
 	paravirt_alloc_pmd(mm, __pa(pmd) >> PAGE_SHIFT);
 	set_pud(pud, __pud(_PAGE_TABLE | __pa(pmd)));
 }
+
+static inline void pud_populate_kernel(struct mm_struct *mm, pud_t *pud, pmd_t *pmd)
+{
+	paravirt_alloc_pmd(mm, __pa(pmd) >> PAGE_SHIFT);
+	set_pud(pud, __pud(_KERNPG_TABLE | __pa(pmd)));
+}
 #endif	/* CONFIG_X86_PAE */
 
 #if PAGETABLE_LEVELS > 3
@@ -114,6 +131,12 @@ static inline void pgd_populate(struct m
 	set_pgd(pgd, __pgd(_PAGE_TABLE | __pa(pud)));
 }
 
+static inline void pgd_populate_kernel(struct mm_struct *mm, pgd_t *pgd, pud_t *pud)
+{
+	paravirt_alloc_pud(mm, __pa(pud) >> PAGE_SHIFT);
+	set_pgd(pgd, __pgd(_KERNPG_TABLE | __pa(pud)));
+}
+
 static inline pud_t *pud_alloc_one(struct mm_struct *mm, unsigned long addr)
 {
 	return (pud_t *)get_zeroed_page(GFP_KERNEL|__GFP_REPEAT);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/pgtable-2level.h linux-3.3.8-pax/arch/x86/include/asm/pgtable-2level.h
--- linux-3.3.8/arch/x86/include/asm/pgtable-2level.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/pgtable-2level.h	2012-03-19 10:43:43.084034700 +0100
@@ -18,7 +18,9 @@ static inline void native_set_pte(pte_t
 
 static inline void native_set_pmd(pmd_t *pmdp, pmd_t pmd)
 {
+	pax_open_kernel();
 	*pmdp = pmd;
+	pax_close_kernel();
 }
 
 static inline void native_set_pte_atomic(pte_t *ptep, pte_t pte)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/pgtable_32.h linux-3.3.8-pax/arch/x86/include/asm/pgtable_32.h
--- linux-3.3.8/arch/x86/include/asm/pgtable_32.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/pgtable_32.h	2012-03-19 10:43:43.092034698 +0100
@@ -25,9 +25,6 @@
 struct mm_struct;
 struct vm_area_struct;
 
-extern pgd_t swapper_pg_dir[1024];
-extern pgd_t initial_page_table[1024];
-
 static inline void pgtable_cache_init(void) { }
 static inline void check_pgt_cache(void) { }
 void paging_init(void);
@@ -48,6 +45,12 @@ extern void set_pmd_pfn(unsigned long, u
 # include <asm/pgtable-2level.h>
 #endif
 
+extern pgd_t swapper_pg_dir[PTRS_PER_PGD];
+extern pgd_t initial_page_table[PTRS_PER_PGD];
+#ifdef CONFIG_X86_PAE
+extern pmd_t swapper_pm_dir[PTRS_PER_PGD][PTRS_PER_PMD];
+#endif
+
 #if defined(CONFIG_HIGHPTE)
 #define pte_offset_map(dir, address)					\
 	((pte_t *)kmap_atomic(pmd_page(*(dir))) +		\
@@ -62,7 +65,9 @@ extern void set_pmd_pfn(unsigned long, u
 /* Clear a kernel PTE and flush it from the TLB */
 #define kpte_clear_flush(ptep, vaddr)		\
 do {						\
+	pax_open_kernel();			\
 	pte_clear(&init_mm, (vaddr), (ptep));	\
+	pax_close_kernel();			\
 	__flush_tlb_one((vaddr));		\
 } while (0)
 
@@ -74,6 +79,9 @@ do {						\
 
 #endif /* !__ASSEMBLY__ */
 
+#define HAVE_ARCH_UNMAPPED_AREA
+#define HAVE_ARCH_UNMAPPED_AREA_TOPDOWN
+
 /*
  * kern_addr_valid() is (1) for FLATMEM and (0) for
  * SPARSEMEM and DISCONTIGMEM
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/pgtable_32_types.h linux-3.3.8-pax/arch/x86/include/asm/pgtable_32_types.h
--- linux-3.3.8/arch/x86/include/asm/pgtable_32_types.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/pgtable_32_types.h	2012-03-19 10:43:43.092034698 +0100
@@ -8,7 +8,7 @@
  */
 #ifdef CONFIG_X86_PAE
 # include <asm/pgtable-3level_types.h>
-# define PMD_SIZE	(1UL << PMD_SHIFT)
+# define PMD_SIZE	(_AC(1, UL) << PMD_SHIFT)
 # define PMD_MASK	(~(PMD_SIZE - 1))
 #else
 # include <asm/pgtable-2level_types.h>
@@ -46,6 +46,19 @@ extern bool __vmalloc_start_set; /* set
 # define VMALLOC_END	(FIXADDR_START - 2 * PAGE_SIZE)
 #endif
 
+#ifdef CONFIG_PAX_KERNEXEC
+#ifndef __ASSEMBLY__
+extern unsigned char MODULES_EXEC_VADDR[];
+extern unsigned char MODULES_EXEC_END[];
+#endif
+#include <asm/boot.h>
+#define ktla_ktva(addr)		(addr + LOAD_PHYSICAL_ADDR + PAGE_OFFSET)
+#define ktva_ktla(addr)		(addr - LOAD_PHYSICAL_ADDR - PAGE_OFFSET)
+#else
+#define ktla_ktva(addr)		(addr)
+#define ktva_ktla(addr)		(addr)
+#endif
+
 #define MODULES_VADDR	VMALLOC_START
 #define MODULES_END	VMALLOC_END
 #define MODULES_LEN	(MODULES_VADDR - MODULES_END)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/pgtable-3level.h linux-3.3.8-pax/arch/x86/include/asm/pgtable-3level.h
--- linux-3.3.8/arch/x86/include/asm/pgtable-3level.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/pgtable-3level.h	2012-03-19 10:43:43.096034698 +0100
@@ -38,12 +38,16 @@ static inline void native_set_pte_atomic
 
 static inline void native_set_pmd(pmd_t *pmdp, pmd_t pmd)
 {
+	pax_open_kernel();
 	set_64bit((unsigned long long *)(pmdp), native_pmd_val(pmd));
+	pax_close_kernel();
 }
 
 static inline void native_set_pud(pud_t *pudp, pud_t pud)
 {
+	pax_open_kernel();
 	set_64bit((unsigned long long *)(pudp), native_pud_val(pud));
+	pax_close_kernel();
 }
 
 /*
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/pgtable_64.h linux-3.3.8-pax/arch/x86/include/asm/pgtable_64.h
--- linux-3.3.8/arch/x86/include/asm/pgtable_64.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/pgtable_64.h	2012-05-07 00:32:16.090588415 +0200
@@ -16,10 +16,14 @@
 
 extern pud_t level3_kernel_pgt[512];
 extern pud_t level3_ident_pgt[512];
+extern pud_t level3_vmalloc_start_pgt[512];
+extern pud_t level3_vmalloc_end_pgt[512];
+extern pud_t level3_vmemmap_pgt[512];
+extern pud_t level2_vmemmap_pgt[512];
 extern pmd_t level2_kernel_pgt[512];
 extern pmd_t level2_fixmap_pgt[512];
-extern pmd_t level2_ident_pgt[512];
-extern pgd_t init_level4_pgt[];
+extern pmd_t level2_ident_pgt[512*2];
+extern pgd_t init_level4_pgt[512];
 
 #define swapper_pg_dir init_level4_pgt
 
@@ -61,7 +65,9 @@ static inline void native_set_pte_atomic
 
 static inline void native_set_pmd(pmd_t *pmdp, pmd_t pmd)
 {
+	pax_open_kernel();
 	*pmdp = pmd;
+	pax_close_kernel();
 }
 
 static inline void native_pmd_clear(pmd_t *pmd)
@@ -97,7 +103,9 @@ static inline pmd_t native_pmdp_get_and_
 
 static inline void native_set_pud(pud_t *pudp, pud_t pud)
 {
+	pax_open_kernel();
 	*pudp = pud;
+	pax_close_kernel();
 }
 
 static inline void native_pud_clear(pud_t *pud)
@@ -107,6 +115,13 @@ static inline void native_pud_clear(pud_
 
 static inline void native_set_pgd(pgd_t *pgdp, pgd_t pgd)
 {
+	pax_open_kernel();
+	*pgdp = pgd;
+	pax_close_kernel();
+}
+
+static inline void native_set_pgd_batched(pgd_t *pgdp, pgd_t pgd)
+{
 	*pgdp = pgd;
 }
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/pgtable_64_types.h linux-3.3.8-pax/arch/x86/include/asm/pgtable_64_types.h
--- linux-3.3.8/arch/x86/include/asm/pgtable_64_types.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/pgtable_64_types.h	2012-03-19 10:43:43.100034699 +0100
@@ -59,5 +59,10 @@ typedef struct { pteval_t pte; } pte_t;
 #define MODULES_VADDR    _AC(0xffffffffa0000000, UL)
 #define MODULES_END      _AC(0xffffffffff000000, UL)
 #define MODULES_LEN   (MODULES_END - MODULES_VADDR)
+#define MODULES_EXEC_VADDR MODULES_VADDR
+#define MODULES_EXEC_END MODULES_END
+
+#define ktla_ktva(addr)		(addr)
+#define ktva_ktla(addr)		(addr)
 
 #endif /* _ASM_X86_PGTABLE_64_DEFS_H */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/pgtable.h linux-3.3.8-pax/arch/x86/include/asm/pgtable.h
--- linux-3.3.8/arch/x86/include/asm/pgtable.h	2012-03-19 10:38:56.460050004 +0100
+++ linux-3.3.8-pax/arch/x86/include/asm/pgtable.h	2012-05-26 01:08:40.460796691 +0200
@@ -44,6 +44,7 @@ extern struct mm_struct *pgd_page_get_mm
 
 #ifndef __PAGETABLE_PUD_FOLDED
 #define set_pgd(pgdp, pgd)		native_set_pgd(pgdp, pgd)
+#define set_pgd_batched(pgdp, pgd)	native_set_pgd_batched(pgdp, pgd)
 #define pgd_clear(pgd)			native_pgd_clear(pgd)
 #endif
 
@@ -81,12 +82,51 @@ extern struct mm_struct *pgd_page_get_mm
 
 #define arch_end_context_switch(prev)	do {} while(0)
 
+#define pax_open_kernel()	native_pax_open_kernel()
+#define pax_close_kernel()	native_pax_close_kernel()
 #endif	/* CONFIG_PARAVIRT */
 
+#define  __HAVE_ARCH_PAX_OPEN_KERNEL
+#define  __HAVE_ARCH_PAX_CLOSE_KERNEL
+
+#ifdef CONFIG_PAX_KERNEXEC
+static inline unsigned long native_pax_open_kernel(void)
+{
+	unsigned long cr0;
+
+	preempt_disable();
+	barrier();
+	cr0 = read_cr0() ^ X86_CR0_WP;
+	BUG_ON(unlikely(cr0 & X86_CR0_WP));
+	write_cr0(cr0);
+	return cr0 ^ X86_CR0_WP;
+}
+
+static inline unsigned long native_pax_close_kernel(void)
+{
+	unsigned long cr0;
+
+	cr0 = read_cr0() ^ X86_CR0_WP;
+	BUG_ON(unlikely(!(cr0 & X86_CR0_WP)));
+	write_cr0(cr0);
+	barrier();
+	preempt_enable_no_resched();
+	return cr0 ^ X86_CR0_WP;
+}
+#else
+static inline unsigned long native_pax_open_kernel(void) { return 0; }
+static inline unsigned long native_pax_close_kernel(void) { return 0; }
+#endif
+
 /*
  * The following only work if pte_present() is true.
  * Undefined behaviour if not..
  */
+static inline int pte_user(pte_t pte)
+{
+	return pte_val(pte) & _PAGE_USER;
+}
+
 static inline int pte_dirty(pte_t pte)
 {
 	return pte_flags(pte) & _PAGE_DIRTY;
@@ -196,9 +236,29 @@ static inline pte_t pte_wrprotect(pte_t
 	return pte_clear_flags(pte, _PAGE_RW);
 }
 
+static inline pte_t pte_mkread(pte_t pte)
+{
+	return __pte(pte_val(pte) | _PAGE_USER);
+}
+
 static inline pte_t pte_mkexec(pte_t pte)
 {
-	return pte_clear_flags(pte, _PAGE_NX);
+#ifdef CONFIG_X86_PAE
+	if (__supported_pte_mask & _PAGE_NX)
+		return pte_clear_flags(pte, _PAGE_NX);
+	else
+#endif
+		return pte_set_flags(pte, _PAGE_USER);
+}
+
+static inline pte_t pte_exprotect(pte_t pte)
+{
+#ifdef CONFIG_X86_PAE
+	if (__supported_pte_mask & _PAGE_NX)
+		return pte_set_flags(pte, _PAGE_NX);
+	else
+#endif
+		return pte_clear_flags(pte, _PAGE_USER);
 }
 
 static inline pte_t pte_mkdirty(pte_t pte)
@@ -390,6 +450,15 @@ pte_t *populate_extra_pte(unsigned long
 #endif
 
 #ifndef __ASSEMBLY__
+
+#ifdef CONFIG_PAX_PER_CPU_PGD
+extern pgd_t cpu_pgd[NR_CPUS][PTRS_PER_PGD];
+static inline pgd_t *get_cpu_pgd(unsigned int cpu)
+{
+	return cpu_pgd[cpu];
+}
+#endif
+
 #include <linux/mm_types.h>
 
 static inline int pte_none(pte_t pte)
@@ -560,7 +629,7 @@ static inline pud_t *pud_offset(pgd_t *p
 
 static inline int pgd_bad(pgd_t pgd)
 {
-	return (pgd_flags(pgd) & ~_PAGE_USER) != _KERNPG_TABLE;
+	return (pgd_flags(pgd) & ~(_PAGE_USER | _PAGE_NX)) != _KERNPG_TABLE;
 }
 
 static inline int pgd_none(pgd_t pgd)
@@ -583,7 +652,12 @@ static inline int pgd_none(pgd_t pgd)
  * pgd_offset() returns a (pgd_t *)
  * pgd_index() is used get the offset into the pgd page's array of pgd_t's;
  */
-#define pgd_offset(mm, address) ((mm)->pgd + pgd_index((address)))
+#define pgd_offset(mm, address) ((mm)->pgd + pgd_index(address))
+
+#ifdef CONFIG_PAX_PER_CPU_PGD
+#define pgd_offset_cpu(cpu, address) (get_cpu_pgd(cpu) + pgd_index(address))
+#endif
+
 /*
  * a shortcut which implies the use of the kernel's pgd, instead
  * of a process's
@@ -594,6 +668,20 @@ static inline int pgd_none(pgd_t pgd)
 #define KERNEL_PGD_BOUNDARY	pgd_index(PAGE_OFFSET)
 #define KERNEL_PGD_PTRS		(PTRS_PER_PGD - KERNEL_PGD_BOUNDARY)
 
+#ifdef CONFIG_X86_32
+#define USER_PGD_PTRS		KERNEL_PGD_BOUNDARY
+#else
+#define TASK_SIZE_MAX_SHIFT CONFIG_TASK_SIZE_MAX_SHIFT
+#define USER_PGD_PTRS		(_AC(1,UL) << (TASK_SIZE_MAX_SHIFT - PGDIR_SHIFT))
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+#define PAX_USER_SHADOW_BASE	(_AC(1,UL) << TASK_SIZE_MAX_SHIFT)
+#else
+#define PAX_USER_SHADOW_BASE	(_AC(0,UL))
+#endif
+
+#endif
+
 #ifndef __ASSEMBLY__
 
 extern int direct_gbpages;
@@ -758,11 +846,23 @@ static inline void pmdp_set_wrprotect(st
  * dst and src can be on the same page, but the range must not overlap,
  * and must not cross a page boundary.
  */
-static inline void clone_pgd_range(pgd_t *dst, pgd_t *src, int count)
+static inline void clone_pgd_range(pgd_t *dst, const pgd_t *src, int count)
 {
-       memcpy(dst, src, count * sizeof(pgd_t));
+	pax_open_kernel();
+	while (count--)
+		*dst++ = *src++;
+	pax_close_kernel();
 }
 
+#ifdef CONFIG_PAX_PER_CPU_PGD
+extern void __clone_user_pgds(pgd_t *dst, const pgd_t *src);
+#endif
+
+#if defined(CONFIG_X86_64) && defined(CONFIG_PAX_MEMORY_UDEREF)
+extern void __shadow_user_pgds(pgd_t *dst, const pgd_t *src);
+#else
+static inline void __shadow_user_pgds(pgd_t *dst, const pgd_t *src) {}
+#endif
 
 #include <asm-generic/pgtable.h>
 #endif	/* __ASSEMBLY__ */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/pgtable_types.h linux-3.3.8-pax/arch/x86/include/asm/pgtable_types.h
--- linux-3.3.8/arch/x86/include/asm/pgtable_types.h	2011-10-24 12:48:26.131091781 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/pgtable_types.h	2012-03-19 10:43:43.100034699 +0100
@@ -16,13 +16,12 @@
 #define _PAGE_BIT_PSE		7	/* 4 MB (or 2MB) page */
 #define _PAGE_BIT_PAT		7	/* on 4KB pages */
 #define _PAGE_BIT_GLOBAL	8	/* Global TLB entry PPro+ */
-#define _PAGE_BIT_UNUSED1	9	/* available for programmer */
+#define _PAGE_BIT_SPECIAL	9	/* special mappings, no associated struct page */
 #define _PAGE_BIT_IOMAP		10	/* flag used to indicate IO mapping */
 #define _PAGE_BIT_HIDDEN	11	/* hidden by kmemcheck */
 #define _PAGE_BIT_PAT_LARGE	12	/* On 2MB or 1GB pages */
-#define _PAGE_BIT_SPECIAL	_PAGE_BIT_UNUSED1
-#define _PAGE_BIT_CPA_TEST	_PAGE_BIT_UNUSED1
-#define _PAGE_BIT_SPLITTING	_PAGE_BIT_UNUSED1 /* only valid on a PSE pmd */
+#define _PAGE_BIT_CPA_TEST	_PAGE_BIT_SPECIAL
+#define _PAGE_BIT_SPLITTING	_PAGE_BIT_SPECIAL /* only valid on a PSE pmd */
 #define _PAGE_BIT_NX           63       /* No execute: only valid after cpuid check */
 
 /* If _PAGE_BIT_PRESENT is clear, we use these: */
@@ -40,7 +39,6 @@
 #define _PAGE_DIRTY	(_AT(pteval_t, 1) << _PAGE_BIT_DIRTY)
 #define _PAGE_PSE	(_AT(pteval_t, 1) << _PAGE_BIT_PSE)
 #define _PAGE_GLOBAL	(_AT(pteval_t, 1) << _PAGE_BIT_GLOBAL)
-#define _PAGE_UNUSED1	(_AT(pteval_t, 1) << _PAGE_BIT_UNUSED1)
 #define _PAGE_IOMAP	(_AT(pteval_t, 1) << _PAGE_BIT_IOMAP)
 #define _PAGE_PAT	(_AT(pteval_t, 1) << _PAGE_BIT_PAT)
 #define _PAGE_PAT_LARGE (_AT(pteval_t, 1) << _PAGE_BIT_PAT_LARGE)
@@ -57,8 +55,10 @@
 
 #if defined(CONFIG_X86_64) || defined(CONFIG_X86_PAE)
 #define _PAGE_NX	(_AT(pteval_t, 1) << _PAGE_BIT_NX)
-#else
+#elif defined(CONFIG_KMEMCHECK)
 #define _PAGE_NX	(_AT(pteval_t, 0))
+#else
+#define _PAGE_NX	(_AT(pteval_t, 1) << _PAGE_BIT_HIDDEN)
 #endif
 
 #define _PAGE_FILE	(_AT(pteval_t, 1) << _PAGE_BIT_FILE)
@@ -96,6 +96,9 @@
 #define PAGE_READONLY_EXEC	__pgprot(_PAGE_PRESENT | _PAGE_USER |	\
 					 _PAGE_ACCESSED)
 
+#define PAGE_READONLY_NOEXEC PAGE_READONLY
+#define PAGE_SHARED_NOEXEC PAGE_SHARED
+
 #define __PAGE_KERNEL_EXEC						\
 	(_PAGE_PRESENT | _PAGE_RW | _PAGE_DIRTY | _PAGE_ACCESSED | _PAGE_GLOBAL)
 #define __PAGE_KERNEL		(__PAGE_KERNEL_EXEC | _PAGE_NX)
@@ -106,7 +109,7 @@
 #define __PAGE_KERNEL_WC		(__PAGE_KERNEL | _PAGE_CACHE_WC)
 #define __PAGE_KERNEL_NOCACHE		(__PAGE_KERNEL | _PAGE_PCD | _PAGE_PWT)
 #define __PAGE_KERNEL_UC_MINUS		(__PAGE_KERNEL | _PAGE_PCD)
-#define __PAGE_KERNEL_VSYSCALL		(__PAGE_KERNEL_RX | _PAGE_USER)
+#define __PAGE_KERNEL_VSYSCALL		(__PAGE_KERNEL_RO | _PAGE_USER)
 #define __PAGE_KERNEL_VVAR		(__PAGE_KERNEL_RO | _PAGE_USER)
 #define __PAGE_KERNEL_VVAR_NOCACHE	(__PAGE_KERNEL_VVAR | _PAGE_PCD | _PAGE_PWT)
 #define __PAGE_KERNEL_LARGE		(__PAGE_KERNEL | _PAGE_PSE)
@@ -168,8 +171,8 @@
  * bits are combined, this will alow user to access the high address mapped
  * VDSO in the presence of CONFIG_COMPAT_VDSO
  */
-#define PTE_IDENT_ATTR	 0x003		/* PRESENT+RW */
-#define PDE_IDENT_ATTR	 0x067		/* PRESENT+RW+USER+DIRTY+ACCESSED */
+#define PTE_IDENT_ATTR	 0x063		/* PRESENT+RW+DIRTY+ACCESSED */
+#define PDE_IDENT_ATTR	 0x063		/* PRESENT+RW+DIRTY+ACCESSED */
 #define PGD_IDENT_ATTR	 0x001		/* PRESENT (no other attributes) */
 #endif
 
@@ -207,7 +210,17 @@ static inline pgdval_t pgd_flags(pgd_t p
 {
 	return native_pgd_val(pgd) & PTE_FLAGS_MASK;
 }
+#endif
 
+#if PAGETABLE_LEVELS == 3
+#include <asm-generic/pgtable-nopud.h>
+#endif
+
+#if PAGETABLE_LEVELS == 2
+#include <asm-generic/pgtable-nopmd.h>
+#endif
+
+#ifndef __ASSEMBLY__
 #if PAGETABLE_LEVELS > 3
 typedef struct { pudval_t pud; } pud_t;
 
@@ -221,8 +234,6 @@ static inline pudval_t native_pud_val(pu
 	return pud.pud;
 }
 #else
-#include <asm-generic/pgtable-nopud.h>
-
 static inline pudval_t native_pud_val(pud_t pud)
 {
 	return native_pgd_val(pud.pgd);
@@ -242,8 +253,6 @@ static inline pmdval_t native_pmd_val(pm
 	return pmd.pmd;
 }
 #else
-#include <asm-generic/pgtable-nopmd.h>
-
 static inline pmdval_t native_pmd_val(pmd_t pmd)
 {
 	return native_pgd_val(pmd.pud.pgd);
@@ -283,7 +292,6 @@ typedef struct page *pgtable_t;
 
 extern pteval_t __supported_pte_mask;
 extern void set_nx(void);
-extern int nx_enabled;
 
 #define pgprot_writecombine	pgprot_writecombine
 extern pgprot_t pgprot_writecombine(pgprot_t prot);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/processor.h linux-3.3.8-pax/arch/x86/include/asm/processor.h
--- linux-3.3.8/arch/x86/include/asm/processor.h	2012-03-19 10:38:56.460050004 +0100
+++ linux-3.3.8-pax/arch/x86/include/asm/processor.h	2012-03-19 10:43:43.100034700 +0100
@@ -266,7 +266,7 @@ struct tss_struct {
 
 } ____cacheline_aligned;
 
-DECLARE_PER_CPU_SHARED_ALIGNED(struct tss_struct, init_tss);
+extern struct tss_struct init_tss[NR_CPUS];
 
 /*
  * Save the original ist values for checking stack pointers during debugging
@@ -860,11 +860,18 @@ static inline void spin_lock_prefetch(co
  */
 #define TASK_SIZE		PAGE_OFFSET
 #define TASK_SIZE_MAX		TASK_SIZE
+
+#ifdef CONFIG_PAX_SEGMEXEC
+#define SEGMEXEC_TASK_SIZE	(TASK_SIZE / 2)
+#define STACK_TOP		((current->mm->pax_flags & MF_PAX_SEGMEXEC)?SEGMEXEC_TASK_SIZE:TASK_SIZE)
+#else
 #define STACK_TOP		TASK_SIZE
-#define STACK_TOP_MAX		STACK_TOP
+#endif
+
+#define STACK_TOP_MAX		TASK_SIZE
 
 #define INIT_THREAD  {							  \
-	.sp0			= sizeof(init_stack) + (long)&init_stack, \
+	.sp0			= sizeof(init_stack) + (long)&init_stack - 8, \
 	.vm86_info		= NULL,					  \
 	.sysenter_cs		= __KERNEL_CS,				  \
 	.io_bitmap_ptr		= NULL,					  \
@@ -878,7 +885,7 @@ static inline void spin_lock_prefetch(co
  */
 #define INIT_TSS  {							  \
 	.x86_tss = {							  \
-		.sp0		= sizeof(init_stack) + (long)&init_stack, \
+		.sp0		= sizeof(init_stack) + (long)&init_stack - 8, \
 		.ss0		= __KERNEL_DS,				  \
 		.ss1		= __KERNEL_CS,				  \
 		.io_bitmap_base	= INVALID_IO_BITMAP_OFFSET,		  \
@@ -889,11 +896,7 @@ static inline void spin_lock_prefetch(co
 extern unsigned long thread_saved_pc(struct task_struct *tsk);
 
 #define THREAD_SIZE_LONGS      (THREAD_SIZE/sizeof(unsigned long))
-#define KSTK_TOP(info)                                                 \
-({                                                                     \
-       unsigned long *__ptr = (unsigned long *)(info);                 \
-       (unsigned long)(&__ptr[THREAD_SIZE_LONGS]);                     \
-})
+#define KSTK_TOP(info)         ((container_of(info, struct task_struct, tinfo))->thread.sp0)
 
 /*
  * The below -8 is to reserve 8 bytes on top of the ring0 stack.
@@ -908,7 +911,7 @@ extern unsigned long thread_saved_pc(str
 #define task_pt_regs(task)                                             \
 ({                                                                     \
        struct pt_regs *__regs__;                                       \
-       __regs__ = (struct pt_regs *)(KSTK_TOP(task_stack_page(task))-8); \
+       __regs__ = (struct pt_regs *)((task)->thread.sp0);              \
        __regs__ - 1;                                                   \
 })
 
@@ -918,13 +921,13 @@ extern unsigned long thread_saved_pc(str
 /*
  * User space process size. 47bits minus one guard page.
  */
-#define TASK_SIZE_MAX	((1UL << 47) - PAGE_SIZE)
+#define TASK_SIZE_MAX	((1UL << TASK_SIZE_MAX_SHIFT) - PAGE_SIZE)
 
 /* This decides where the kernel will search for a free chunk of vm
  * space during mmap's.
  */
 #define IA32_PAGE_OFFSET	((current->personality & ADDR_LIMIT_3GB) ? \
-					0xc0000000 : 0xFFFFe000)
+					0xc0000000 : 0xFFFFf000)
 
 #define TASK_SIZE		(test_thread_flag(TIF_IA32) ? \
 					IA32_PAGE_OFFSET : TASK_SIZE_MAX)
@@ -935,11 +938,11 @@ extern unsigned long thread_saved_pc(str
 #define STACK_TOP_MAX		TASK_SIZE_MAX
 
 #define INIT_THREAD  { \
-	.sp0 = (unsigned long)&init_stack + sizeof(init_stack) \
+	.sp0 = (unsigned long)&init_stack + sizeof(init_stack) - 16 \
 }
 
 #define INIT_TSS  { \
-	.x86_tss.sp0 = (unsigned long)&init_stack + sizeof(init_stack) \
+	.x86_tss.sp0 = (unsigned long)&init_stack + sizeof(init_stack) - 16 \
 }
 
 /*
@@ -961,6 +964,10 @@ extern void start_thread(struct pt_regs
  */
 #define TASK_UNMAPPED_BASE	(PAGE_ALIGN(TASK_SIZE / 3))
 
+#ifdef CONFIG_PAX_SEGMEXEC
+#define SEGMEXEC_TASK_UNMAPPED_BASE	(PAGE_ALIGN(SEGMEXEC_TASK_SIZE / 3))
+#endif
+
 #define KSTK_EIP(task)		(task_pt_regs(task)->ip)
 
 /* Get/set a process' ability to use the timestamp counter instruction */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/ptrace.h linux-3.3.8-pax/arch/x86/include/asm/ptrace.h
--- linux-3.3.8/arch/x86/include/asm/ptrace.h	2011-10-24 12:48:26.139091779 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/ptrace.h	2012-03-19 10:43:43.100034700 +0100
@@ -156,28 +156,29 @@ static inline unsigned long regs_return_
 }
 
 /*
- * user_mode_vm(regs) determines whether a register set came from user mode.
+ * user_mode(regs) determines whether a register set came from user mode.
  * This is true if V8086 mode was enabled OR if the register set was from
  * protected mode with RPL-3 CS value.  This tricky test checks that with
  * one comparison.  Many places in the kernel can bypass this full check
- * if they have already ruled out V8086 mode, so user_mode(regs) can be used.
+ * if they have already ruled out V8086 mode, so user_mode_novm(regs) can
+ * be used.
  */
-static inline int user_mode(struct pt_regs *regs)
+static inline int user_mode_novm(struct pt_regs *regs)
 {
 #ifdef CONFIG_X86_32
 	return (regs->cs & SEGMENT_RPL_MASK) == USER_RPL;
 #else
-	return !!(regs->cs & 3);
+	return !!(regs->cs & SEGMENT_RPL_MASK);
 #endif
 }
 
-static inline int user_mode_vm(struct pt_regs *regs)
+static inline int user_mode(struct pt_regs *regs)
 {
 #ifdef CONFIG_X86_32
 	return ((regs->cs & SEGMENT_RPL_MASK) | (regs->flags & X86_VM_MASK)) >=
 		USER_RPL;
 #else
-	return user_mode(regs);
+	return user_mode_novm(regs);
 #endif
 }
 
@@ -193,15 +194,16 @@ static inline int v8086_mode(struct pt_r
 #ifdef CONFIG_X86_64
 static inline bool user_64bit_mode(struct pt_regs *regs)
 {
+	unsigned long cs = regs->cs & 0xffff;
 #ifndef CONFIG_PARAVIRT
 	/*
 	 * On non-paravirt systems, this is the only long mode CPL 3
 	 * selector.  We do not allow long mode selectors in the LDT.
 	 */
-	return regs->cs == __USER_CS;
+	return cs == __USER_CS;
 #else
 	/* Headers are too twisted for this to go in paravirt.h. */
-	return regs->cs == __USER_CS || regs->cs == pv_info.extra_user_64bit_cs;
+	return cs == __USER_CS || cs == pv_info.extra_user_64bit_cs;
 #endif
 }
 #endif
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/reboot.h linux-3.3.8-pax/arch/x86/include/asm/reboot.h
--- linux-3.3.8/arch/x86/include/asm/reboot.h	2012-01-08 19:47:49.199473002 +0100
+++ linux-3.3.8-pax/arch/x86/include/asm/reboot.h	2012-03-19 10:43:43.100034700 +0100
@@ -6,19 +6,19 @@
 struct pt_regs;
 
 struct machine_ops {
-	void (*restart)(char *cmd);
-	void (*halt)(void);
-	void (*power_off)(void);
+	void (* __noreturn restart)(char *cmd);
+	void (* __noreturn halt)(void);
+	void (* __noreturn power_off)(void);
 	void (*shutdown)(void);
 	void (*crash_shutdown)(struct pt_regs *);
-	void (*emergency_restart)(void);
-};
+	void (* __noreturn emergency_restart)(void);
+} __no_const;
 
 extern struct machine_ops machine_ops;
 
 void native_machine_crash_shutdown(struct pt_regs *regs);
 void native_machine_shutdown(void);
-void machine_real_restart(unsigned int type);
+void machine_real_restart(unsigned int type) __noreturn;
 /* These must match dispatch_table in reboot_32.S */
 #define MRR_BIOS	0
 #define MRR_APM		1
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/rwsem.h linux-3.3.8-pax/arch/x86/include/asm/rwsem.h
--- linux-3.3.8/arch/x86/include/asm/rwsem.h	2012-01-08 19:47:49.203473002 +0100
+++ linux-3.3.8-pax/arch/x86/include/asm/rwsem.h	2012-03-19 10:43:43.100034700 +0100
@@ -64,6 +64,14 @@ static inline void __down_read(struct rw
 {
 	asm volatile("# beginning down_read\n\t"
 		     LOCK_PREFIX _ASM_INC "(%1)\n\t"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     LOCK_PREFIX _ASM_DEC "(%1)\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
 		     /* adds 0x00000001 */
 		     "  jns        1f\n"
 		     "  call call_rwsem_down_read_failed\n"
@@ -85,6 +93,14 @@ static inline int __down_read_trylock(st
 		     "1:\n\t"
 		     "  mov          %1,%2\n\t"
 		     "  add          %3,%2\n\t"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     "sub %3,%2\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
 		     "  jle	     2f\n\t"
 		     LOCK_PREFIX "  cmpxchg  %2,%0\n\t"
 		     "  jnz	     1b\n\t"
@@ -104,6 +120,14 @@ static inline void __down_write_nested(s
 	long tmp;
 	asm volatile("# beginning down_write\n\t"
 		     LOCK_PREFIX "  xadd      %1,(%2)\n\t"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     "mov %1,(%2)\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
 		     /* adds 0xffff0001, returns the old value */
 		     "  test      %1,%1\n\t"
 		     /* was the count 0 before? */
@@ -141,6 +165,14 @@ static inline void __up_read(struct rw_s
 	long tmp;
 	asm volatile("# beginning __up_read\n\t"
 		     LOCK_PREFIX "  xadd      %1,(%2)\n\t"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     "mov %1,(%2)\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
 		     /* subtracts 1, returns the old value */
 		     "  jns        1f\n\t"
 		     "  call call_rwsem_wake\n" /* expects old value in %edx */
@@ -159,6 +191,14 @@ static inline void __up_write(struct rw_
 	long tmp;
 	asm volatile("# beginning __up_write\n\t"
 		     LOCK_PREFIX "  xadd      %1,(%2)\n\t"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     "mov %1,(%2)\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
 		     /* subtracts 0xffff0001, returns the old value */
 		     "  jns        1f\n\t"
 		     "  call call_rwsem_wake\n" /* expects old value in %edx */
@@ -176,6 +216,14 @@ static inline void __downgrade_write(str
 {
 	asm volatile("# beginning __downgrade_write\n\t"
 		     LOCK_PREFIX _ASM_ADD "%2,(%1)\n\t"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     LOCK_PREFIX _ASM_SUB "%2,(%1)\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
 		     /*
 		      * transitions 0xZZZZ0001 -> 0xYYYY0001 (i386)
 		      *     0xZZZZZZZZ00000001 -> 0xYYYYYYYY00000001 (x86_64)
@@ -194,7 +242,15 @@ static inline void __downgrade_write(str
  */
 static inline void rwsem_atomic_add(long delta, struct rw_semaphore *sem)
 {
-	asm volatile(LOCK_PREFIX _ASM_ADD "%1,%0"
+	asm volatile(LOCK_PREFIX _ASM_ADD "%1,%0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     LOCK_PREFIX _ASM_SUB "%1,%0\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
 		     : "+m" (sem->count)
 		     : "er" (delta));
 }
@@ -204,7 +260,7 @@ static inline void rwsem_atomic_add(long
  */
 static inline long rwsem_atomic_update(long delta, struct rw_semaphore *sem)
 {
-	return delta + xadd(&sem->count, delta);
+	return delta + xadd_check_overflow(&sem->count, delta);
 }
 
 #endif /* __KERNEL__ */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/segment.h linux-3.3.8-pax/arch/x86/include/asm/segment.h
--- linux-3.3.8/arch/x86/include/asm/segment.h	2011-10-24 12:48:26.143091779 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/segment.h	2012-03-19 10:43:43.104034700 +0100
@@ -64,10 +64,15 @@
  *  26 - ESPFIX small SS
  *  27 - per-cpu			[ offset to per-cpu data area ]
  *  28 - stack_canary-20		[ for stack protector ]
- *  29 - unused
- *  30 - unused
+ *  29 - PCI BIOS CS
+ *  30 - PCI BIOS DS
  *  31 - TSS for double fault handler
  */
+#define GDT_ENTRY_KERNEXEC_EFI_CS	(1)
+#define GDT_ENTRY_KERNEXEC_EFI_DS	(2)
+#define __KERNEXEC_EFI_CS	(GDT_ENTRY_KERNEXEC_EFI_CS*8)
+#define __KERNEXEC_EFI_DS	(GDT_ENTRY_KERNEXEC_EFI_DS*8)
+
 #define GDT_ENTRY_TLS_MIN	6
 #define GDT_ENTRY_TLS_MAX 	(GDT_ENTRY_TLS_MIN + GDT_ENTRY_TLS_ENTRIES - 1)
 
@@ -79,6 +84,8 @@
 
 #define GDT_ENTRY_KERNEL_CS		(GDT_ENTRY_KERNEL_BASE+0)
 
+#define GDT_ENTRY_KERNEXEC_KERNEL_CS	(4)
+
 #define GDT_ENTRY_KERNEL_DS		(GDT_ENTRY_KERNEL_BASE+1)
 
 #define GDT_ENTRY_TSS			(GDT_ENTRY_KERNEL_BASE+4)
@@ -104,6 +111,12 @@
 #define __KERNEL_STACK_CANARY		0
 #endif
 
+#define GDT_ENTRY_PCIBIOS_CS		(GDT_ENTRY_KERNEL_BASE+17)
+#define __PCIBIOS_CS (GDT_ENTRY_PCIBIOS_CS * 8)
+
+#define GDT_ENTRY_PCIBIOS_DS		(GDT_ENTRY_KERNEL_BASE+18)
+#define __PCIBIOS_DS (GDT_ENTRY_PCIBIOS_DS * 8)
+
 #define GDT_ENTRY_DOUBLEFAULT_TSS	31
 
 /*
@@ -141,7 +154,7 @@
  */
 
 /* Matches PNP_CS32 and PNP_CS16 (they must be consecutive) */
-#define SEGMENT_IS_PNP_CODE(x)   (((x) & 0xf4) == GDT_ENTRY_PNPBIOS_BASE * 8)
+#define SEGMENT_IS_PNP_CODE(x)   (((x) & 0xFFFCU) == PNP_CS32 || ((x) & 0xFFFCU) == PNP_CS16)
 
 
 #else
@@ -165,6 +178,8 @@
 #define __USER32_CS   (GDT_ENTRY_DEFAULT_USER32_CS*8+3)
 #define __USER32_DS	__USER_DS
 
+#define GDT_ENTRY_KERNEXEC_KERNEL_CS 7
+
 #define GDT_ENTRY_TSS 8	/* needs two entries */
 #define GDT_ENTRY_LDT 10 /* needs two entries */
 #define GDT_ENTRY_TLS_MIN 12
@@ -185,6 +200,7 @@
 #endif
 
 #define __KERNEL_CS	(GDT_ENTRY_KERNEL_CS*8)
+#define __KERNEXEC_KERNEL_CS	(GDT_ENTRY_KERNEXEC_KERNEL_CS*8)
 #define __KERNEL_DS	(GDT_ENTRY_KERNEL_DS*8)
 #define __USER_DS	(GDT_ENTRY_DEFAULT_USER_DS*8+3)
 #define __USER_CS	(GDT_ENTRY_DEFAULT_USER_CS*8+3)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/smp.h linux-3.3.8-pax/arch/x86/include/asm/smp.h
--- linux-3.3.8/arch/x86/include/asm/smp.h	2012-03-19 10:38:56.464050003 +0100
+++ linux-3.3.8-pax/arch/x86/include/asm/smp.h	2012-03-19 10:43:43.104034700 +0100
@@ -36,7 +36,7 @@ DECLARE_PER_CPU(cpumask_var_t, cpu_core_
 /* cpus sharing the last level cache: */
 DECLARE_PER_CPU(cpumask_var_t, cpu_llc_shared_map);
 DECLARE_PER_CPU(u16, cpu_llc_id);
-DECLARE_PER_CPU(int, cpu_number);
+DECLARE_PER_CPU(unsigned int, cpu_number);
 
 static inline struct cpumask *cpu_sibling_mask(int cpu)
 {
@@ -77,7 +77,7 @@ struct smp_ops {
 
 	void (*send_call_func_ipi)(const struct cpumask *mask);
 	void (*send_call_func_single_ipi)(int cpu);
-};
+} __no_const;
 
 /* Globals due to paravirt */
 extern void set_cpu_sibling_map(int cpu);
@@ -192,14 +192,8 @@ extern unsigned disabled_cpus __cpuinitd
 extern int safe_smp_processor_id(void);
 
 #elif defined(CONFIG_X86_64_SMP)
-#define raw_smp_processor_id() (percpu_read(cpu_number))
-
-#define stack_smp_processor_id()					\
-({								\
-	struct thread_info *ti;						\
-	__asm__("andq %%rsp,%0; ":"=r" (ti) : "0" (CURRENT_MASK));	\
-	ti->cpu;							\
-})
+#define raw_smp_processor_id()		(percpu_read(cpu_number))
+#define stack_smp_processor_id()	raw_smp_processor_id()
 #define safe_smp_processor_id()		smp_processor_id()
 
 #endif
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/spinlock.h linux-3.3.8-pax/arch/x86/include/asm/spinlock.h
--- linux-3.3.8/arch/x86/include/asm/spinlock.h	2012-03-19 10:38:56.464050003 +0100
+++ linux-3.3.8-pax/arch/x86/include/asm/spinlock.h	2012-03-19 10:43:43.104034700 +0100
@@ -175,6 +175,14 @@ static inline int arch_write_can_lock(ar
 static inline void arch_read_lock(arch_rwlock_t *rw)
 {
 	asm volatile(LOCK_PREFIX READ_LOCK_SIZE(dec) " (%0)\n\t"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     LOCK_PREFIX READ_LOCK_SIZE(inc) " (%0)\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
 		     "jns 1f\n"
 		     "call __read_lock_failed\n\t"
 		     "1:\n"
@@ -184,6 +192,14 @@ static inline void arch_read_lock(arch_r
 static inline void arch_write_lock(arch_rwlock_t *rw)
 {
 	asm volatile(LOCK_PREFIX WRITE_LOCK_SUB(%1) "(%0)\n\t"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     LOCK_PREFIX WRITE_LOCK_ADD(%1) "(%0)\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
 		     "jz 1f\n"
 		     "call __write_lock_failed\n\t"
 		     "1:\n"
@@ -213,13 +229,29 @@ static inline int arch_write_trylock(arc
 
 static inline void arch_read_unlock(arch_rwlock_t *rw)
 {
-	asm volatile(LOCK_PREFIX READ_LOCK_SIZE(inc) " %0"
+	asm volatile(LOCK_PREFIX READ_LOCK_SIZE(inc) " %0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     LOCK_PREFIX READ_LOCK_SIZE(dec) " %0\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
 		     :"+m" (rw->lock) : : "memory");
 }
 
 static inline void arch_write_unlock(arch_rwlock_t *rw)
 {
-	asm volatile(LOCK_PREFIX WRITE_LOCK_ADD(%1) "%0"
+	asm volatile(LOCK_PREFIX WRITE_LOCK_ADD(%1) "%0\n"
+
+#ifdef CONFIG_PAX_REFCOUNT
+		     "jno 0f\n"
+		     LOCK_PREFIX WRITE_LOCK_SUB(%1) "%0\n"
+		     "int $4\n0:\n"
+		     _ASM_EXTABLE(0b, 0b)
+#endif
+
 		     : "+m" (rw->write) : "i" (RW_LOCK_BIAS) : "memory");
 }
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/stackprotector.h linux-3.3.8-pax/arch/x86/include/asm/stackprotector.h
--- linux-3.3.8/arch/x86/include/asm/stackprotector.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/stackprotector.h	2012-03-19 10:43:43.104034700 +0100
@@ -48,7 +48,7 @@
  * head_32 for boot CPU and setup_per_cpu_areas() for others.
  */
 #define GDT_STACK_CANARY_INIT						\
-	[GDT_ENTRY_STACK_CANARY] = GDT_ENTRY_INIT(0x4090, 0, 0x18),
+	[GDT_ENTRY_STACK_CANARY] = GDT_ENTRY_INIT(0x4090, 0, 0x17),
 
 /*
  * Initialize the stackprotector canary value.
@@ -113,7 +113,7 @@ static inline void setup_stack_canary_se
 
 static inline void load_stack_canary_segment(void)
 {
-#ifdef CONFIG_X86_32
+#if defined(CONFIG_X86_32) && !defined(CONFIG_PAX_MEMORY_UDEREF)
 	asm volatile ("mov %0, %%gs" : : "r" (0));
 #endif
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/stacktrace.h linux-3.3.8-pax/arch/x86/include/asm/stacktrace.h
--- linux-3.3.8/arch/x86/include/asm/stacktrace.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/stacktrace.h	2012-03-19 10:43:43.104034700 +0100
@@ -11,28 +11,20 @@
 
 extern int kstack_depth_to_print;
 
-struct thread_info;
+struct task_struct;
 struct stacktrace_ops;
 
-typedef unsigned long (*walk_stack_t)(struct thread_info *tinfo,
-				      unsigned long *stack,
-				      unsigned long bp,
-				      const struct stacktrace_ops *ops,
-				      void *data,
-				      unsigned long *end,
-				      int *graph);
-
-extern unsigned long
-print_context_stack(struct thread_info *tinfo,
-		    unsigned long *stack, unsigned long bp,
-		    const struct stacktrace_ops *ops, void *data,
-		    unsigned long *end, int *graph);
-
-extern unsigned long
-print_context_stack_bp(struct thread_info *tinfo,
-		       unsigned long *stack, unsigned long bp,
-		       const struct stacktrace_ops *ops, void *data,
-		       unsigned long *end, int *graph);
+typedef unsigned long walk_stack_t(struct task_struct *task,
+				   void *stack_start,
+				   unsigned long *stack,
+				   unsigned long bp,
+				   const struct stacktrace_ops *ops,
+				   void *data,
+				   unsigned long *end,
+				   int *graph);
+
+extern walk_stack_t print_context_stack;
+extern walk_stack_t print_context_stack_bp;
 
 /* Generic stack tracer with callbacks */
 
@@ -40,7 +32,7 @@ struct stacktrace_ops {
 	void (*address)(void *data, unsigned long address, int reliable);
 	/* On negative return stop dumping */
 	int (*stack)(void *data, char *name);
-	walk_stack_t	walk_stack;
+	walk_stack_t	*walk_stack;
 };
 
 void dump_trace(struct task_struct *tsk, struct pt_regs *regs,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/sys_ia32.h linux-3.3.8-pax/arch/x86/include/asm/sys_ia32.h
--- linux-3.3.8/arch/x86/include/asm/sys_ia32.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/sys_ia32.h	2012-03-19 10:43:43.108034699 +0100
@@ -40,7 +40,7 @@ asmlinkage long sys32_rt_sigprocmask(int
 				     compat_sigset_t __user *, unsigned int);
 asmlinkage long sys32_alarm(unsigned int);
 
-asmlinkage long sys32_waitpid(compat_pid_t, unsigned int *, int);
+asmlinkage long sys32_waitpid(compat_pid_t, unsigned int __user *, int);
 asmlinkage long sys32_sysfs(int, u32, u32);
 
 asmlinkage long sys32_sched_rr_get_interval(compat_pid_t,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/system.h linux-3.3.8-pax/arch/x86/include/asm/system.h
--- linux-3.3.8/arch/x86/include/asm/system.h	2012-01-08 19:47:49.219473001 +0100
+++ linux-3.3.8-pax/arch/x86/include/asm/system.h	2012-03-19 10:43:43.108034699 +0100
@@ -129,7 +129,7 @@ do {									\
 	     "call __switch_to\n\t"					  \
 	     "movq "__percpu_arg([current_task])",%%rsi\n\t"		  \
 	     __switch_canary						  \
-	     "movq %P[thread_info](%%rsi),%%r8\n\t"			  \
+	     "movq "__percpu_arg([thread_info])",%%r8\n\t"		  \
 	     "movq %%rax,%%rdi\n\t" 					  \
 	     "testl  %[_tif_fork],%P[ti_flags](%%r8)\n\t"		  \
 	     "jnz   ret_from_fork\n\t"					  \
@@ -140,7 +140,7 @@ do {									\
 	       [threadrsp] "i" (offsetof(struct task_struct, thread.sp)), \
 	       [ti_flags] "i" (offsetof(struct thread_info, flags)),	  \
 	       [_tif_fork] "i" (_TIF_FORK),			  	  \
-	       [thread_info] "i" (offsetof(struct task_struct, stack)),   \
+	       [thread_info] "m" (current_tinfo),			  \
 	       [current_task] "m" (current_task)			  \
 	       __switch_canary_iparam					  \
 	     : "memory", "cc" __EXTRA_CLOBBER)
@@ -200,7 +200,7 @@ static inline unsigned long get_limit(un
 {
 	unsigned long __limit;
 	asm("lsll %1,%0" : "=r" (__limit) : "r" (segment));
-	return __limit + 1;
+	return __limit;
 }
 
 static inline void native_clts(void)
@@ -397,13 +397,13 @@ void enable_hlt(void);
 
 void cpu_idle_wait(void);
 
-extern unsigned long arch_align_stack(unsigned long sp);
+#define arch_align_stack(x) ((x) & ~0xfUL)
 extern void free_init_pages(char *what, unsigned long begin, unsigned long end);
 
 void default_idle(void);
 bool set_pm_idle_to_default(void);
 
-void stop_this_cpu(void *dummy);
+void stop_this_cpu(void *dummy) __noreturn;
 
 /*
  * Force strict CPU ordering.
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/thread_info.h linux-3.3.8-pax/arch/x86/include/asm/thread_info.h
--- linux-3.3.8/arch/x86/include/asm/thread_info.h	2012-03-19 10:38:56.468050003 +0100
+++ linux-3.3.8-pax/arch/x86/include/asm/thread_info.h	2012-03-19 10:43:43.108034699 +0100
@@ -10,6 +10,7 @@
 #include <linux/compiler.h>
 #include <asm/page.h>
 #include <asm/types.h>
+#include <asm/percpu.h>
 
 /*
  * low level task data that entry.S needs immediate access to
@@ -24,7 +25,6 @@ struct exec_domain;
 #include <linux/atomic.h>
 
 struct thread_info {
-	struct task_struct	*task;		/* main task structure */
 	struct exec_domain	*exec_domain;	/* execution domain */
 	__u32			flags;		/* low level flags */
 	__u32			status;		/* thread synchronous flags */
@@ -34,19 +34,13 @@ struct thread_info {
 	mm_segment_t		addr_limit;
 	struct restart_block    restart_block;
 	void __user		*sysenter_return;
-#ifdef CONFIG_X86_32
-	unsigned long           previous_esp;   /* ESP of the previous stack in
-						   case of nested (IRQ) stacks
-						*/
-	__u8			supervisor_stack[0];
-#endif
+	unsigned long		lowest_stack;
 	unsigned int		sig_on_uaccess_error:1;
 	unsigned int		uaccess_err:1;	/* uaccess failed */
 };
 
-#define INIT_THREAD_INFO(tsk)			\
+#define INIT_THREAD_INFO			\
 {						\
-	.task		= &tsk,			\
 	.exec_domain	= &default_exec_domain,	\
 	.flags		= 0,			\
 	.cpu		= 0,			\
@@ -57,7 +51,7 @@ struct thread_info {
 	},					\
 }
 
-#define init_thread_info	(init_thread_union.thread_info)
+#define init_thread_info	(init_thread_union.stack)
 #define init_stack		(init_thread_union.stack)
 
 #else /* !__ASSEMBLY__ */
@@ -169,6 +163,23 @@ struct thread_info {
 	ret;								\
 })
 
+#ifdef __ASSEMBLY__
+/* how to get the thread information struct from ASM */
+#define GET_THREAD_INFO(reg)	 \
+	mov PER_CPU_VAR(current_tinfo), reg
+
+/* use this one if reg already contains %esp */
+#define GET_THREAD_INFO_WITH_ESP(reg) GET_THREAD_INFO(reg)
+#else
+/* how to get the thread information struct from C */
+DECLARE_PER_CPU(struct thread_info *, current_tinfo);
+
+static __always_inline struct thread_info *current_thread_info(void)
+{
+	return percpu_read_stable(current_tinfo);
+}
+#endif
+
 #ifdef CONFIG_X86_32
 
 #define STACK_WARN	(THREAD_SIZE/8)
@@ -179,35 +190,13 @@ struct thread_info {
  */
 #ifndef __ASSEMBLY__
 
-
 /* how to get the current stack pointer from C */
 register unsigned long current_stack_pointer asm("esp") __used;
 
-/* how to get the thread information struct from C */
-static inline struct thread_info *current_thread_info(void)
-{
-	return (struct thread_info *)
-		(current_stack_pointer & ~(THREAD_SIZE - 1));
-}
-
-#else /* !__ASSEMBLY__ */
-
-/* how to get the thread information struct from ASM */
-#define GET_THREAD_INFO(reg)	 \
-	movl $-THREAD_SIZE, reg; \
-	andl %esp, reg
-
-/* use this one if reg already contains %esp */
-#define GET_THREAD_INFO_WITH_ESP(reg) \
-	andl $-THREAD_SIZE, reg
-
 #endif
 
 #else /* X86_32 */
 
-#include <asm/percpu.h>
-#define KERNEL_STACK_OFFSET (5*8)
-
 /*
  * macros/functions for gaining access to the thread information structure
  * preempt_count needs to be 1 initially, until the scheduler is functional.
@@ -215,27 +204,8 @@ static inline struct thread_info *curren
 #ifndef __ASSEMBLY__
 DECLARE_PER_CPU(unsigned long, kernel_stack);
 
-static inline struct thread_info *current_thread_info(void)
-{
-	struct thread_info *ti;
-	ti = (void *)(percpu_read_stable(kernel_stack) +
-		      KERNEL_STACK_OFFSET - THREAD_SIZE);
-	return ti;
-}
-
-#else /* !__ASSEMBLY__ */
-
-/* how to get the thread information struct from ASM */
-#define GET_THREAD_INFO(reg) \
-	movq PER_CPU_VAR(kernel_stack),reg ; \
-	subq $(THREAD_SIZE-KERNEL_STACK_OFFSET),reg
-
-/*
- * Same if PER_CPU_VAR(kernel_stack) is, perhaps with some offset, already in
- * a certain register (to be used in assembler memory operands).
- */
-#define THREAD_INFO(reg, off) KERNEL_STACK_OFFSET+(off)-THREAD_SIZE(reg)
-
+/* how to get the current stack pointer from C */
+register unsigned long current_stack_pointer asm("rsp") __used;
 #endif
 
 #endif /* !X86_32 */
@@ -269,5 +239,16 @@ extern void arch_task_cache_init(void);
 extern void free_thread_info(struct thread_info *ti);
 extern int arch_dup_task_struct(struct task_struct *dst, struct task_struct *src);
 #define arch_task_cache_init arch_task_cache_init
+
+#define __HAVE_THREAD_FUNCTIONS
+#define task_thread_info(task)	(&(task)->tinfo)
+#define task_stack_page(task)	((task)->stack)
+#define setup_thread_stack(p, org) do {} while (0)
+#define end_of_stack(p) ((unsigned long *)task_stack_page(p) + 1)
+
+#define __HAVE_ARCH_TASK_STRUCT_ALLOCATOR
+extern struct task_struct *alloc_task_struct_node(int node);
+extern void free_task_struct(struct task_struct *);
+
 #endif
 #endif /* _ASM_X86_THREAD_INFO_H */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/uaccess_32.h linux-3.3.8-pax/arch/x86/include/asm/uaccess_32.h
--- linux-3.3.8/arch/x86/include/asm/uaccess_32.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/uaccess_32.h	2012-05-16 21:37:35.577597393 +0200
@@ -11,15 +11,15 @@
 #include <asm/page.h>
 
 unsigned long __must_check __copy_to_user_ll
-		(void __user *to, const void *from, unsigned long n);
+		(void __user *to, const void *from, unsigned long n) __size_overflow(3);
 unsigned long __must_check __copy_from_user_ll
-		(void *to, const void __user *from, unsigned long n);
+		(void *to, const void __user *from, unsigned long n) __size_overflow(3);
 unsigned long __must_check __copy_from_user_ll_nozero
-		(void *to, const void __user *from, unsigned long n);
+		(void *to, const void __user *from, unsigned long n) __size_overflow(3);
 unsigned long __must_check __copy_from_user_ll_nocache
-		(void *to, const void __user *from, unsigned long n);
+		(void *to, const void __user *from, unsigned long n) __size_overflow(3);
 unsigned long __must_check __copy_from_user_ll_nocache_nozero
-		(void *to, const void __user *from, unsigned long n);
+		(void *to, const void __user *from, unsigned long n) __size_overflow(3);
 
 /**
  * __copy_to_user_inatomic: - Copy a block of data into user space, with less checking.
@@ -43,6 +43,9 @@ unsigned long __must_check __copy_from_u
 static __always_inline unsigned long __must_check
 __copy_to_user_inatomic(void __user *to, const void *from, unsigned long n)
 {
+	if ((long)n < 0)
+		return n;
+
 	if (__builtin_constant_p(n)) {
 		unsigned long ret;
 
@@ -61,6 +64,8 @@ __copy_to_user_inatomic(void __user *to,
 			return ret;
 		}
 	}
+	if (!__builtin_constant_p(n))
+		check_object_size(from, n, true);
 	return __copy_to_user_ll(to, from, n);
 }
 
@@ -82,12 +87,16 @@ static __always_inline unsigned long __m
 __copy_to_user(void __user *to, const void *from, unsigned long n)
 {
 	might_fault();
+
 	return __copy_to_user_inatomic(to, from, n);
 }
 
 static __always_inline unsigned long
 __copy_from_user_inatomic(void *to, const void __user *from, unsigned long n)
 {
+	if ((long)n < 0)
+		return n;
+
 	/* Avoid zeroing the tail if the copy fails..
 	 * If 'n' is constant and 1, 2, or 4, we do still zero on a failure,
 	 * but as the zeroing behaviour is only significant when n is not
@@ -137,6 +146,10 @@ static __always_inline unsigned long
 __copy_from_user(void *to, const void __user *from, unsigned long n)
 {
 	might_fault();
+
+	if ((long)n < 0)
+		return n;
+
 	if (__builtin_constant_p(n)) {
 		unsigned long ret;
 
@@ -152,6 +165,8 @@ __copy_from_user(void *to, const void __
 			return ret;
 		}
 	}
+	if (!__builtin_constant_p(n))
+		check_object_size(to, n, false);
 	return __copy_from_user_ll(to, from, n);
 }
 
@@ -159,6 +174,10 @@ static __always_inline unsigned long __c
 				const void __user *from, unsigned long n)
 {
 	might_fault();
+
+	if ((long)n < 0)
+		return n;
+
 	if (__builtin_constant_p(n)) {
 		unsigned long ret;
 
@@ -181,15 +200,19 @@ static __always_inline unsigned long
 __copy_from_user_inatomic_nocache(void *to, const void __user *from,
 				  unsigned long n)
 {
-       return __copy_from_user_ll_nocache_nozero(to, from, n);
-}
+	if ((long)n < 0)
+		return n;
 
-unsigned long __must_check copy_to_user(void __user *to,
-					const void *from, unsigned long n);
-unsigned long __must_check _copy_from_user(void *to,
-					  const void __user *from,
-					  unsigned long n);
+	return __copy_from_user_ll_nocache_nozero(to, from, n);
+}
 
+extern void copy_to_user_overflow(void)
+#ifdef CONFIG_DEBUG_STRICT_USER_COPY_CHECKS
+	__compiletime_error("copy_to_user() buffer size is not provably correct")
+#else
+	__compiletime_warning("copy_to_user() buffer size is not provably correct")
+#endif
+;
 
 extern void copy_from_user_overflow(void)
 #ifdef CONFIG_DEBUG_STRICT_USER_COPY_CHECKS
@@ -199,17 +222,61 @@ extern void copy_from_user_overflow(void
 #endif
 ;
 
-static inline unsigned long __must_check copy_from_user(void *to,
-					  const void __user *from,
-					  unsigned long n)
+/**
+ * copy_to_user: - Copy a block of data into user space.
+ * @to:   Destination address, in user space.
+ * @from: Source address, in kernel space.
+ * @n:    Number of bytes to copy.
+ *
+ * Context: User context only.  This function may sleep.
+ *
+ * Copy data from kernel space to user space.
+ *
+ * Returns number of bytes that could not be copied.
+ * On success, this will be zero.
+ */
+static inline unsigned long __must_check
+copy_to_user(void __user *to, const void *from, unsigned long n)
+{
+	int sz = __compiletime_object_size(from);
+
+	if (unlikely(sz != -1 && sz < n))
+		copy_to_user_overflow();
+	else if (access_ok(VERIFY_WRITE, to, n))
+		n = __copy_to_user(to, from, n);
+	return n;
+}
+
+/**
+ * copy_from_user: - Copy a block of data from user space.
+ * @to:   Destination address, in kernel space.
+ * @from: Source address, in user space.
+ * @n:    Number of bytes to copy.
+ *
+ * Context: User context only.  This function may sleep.
+ *
+ * Copy data from user space to kernel space.
+ *
+ * Returns number of bytes that could not be copied.
+ * On success, this will be zero.
+ *
+ * If some data could not be copied, this function will pad the copied
+ * data to the requested size using zero bytes.
+ */
+static inline unsigned long __must_check
+copy_from_user(void *to, const void __user *from, unsigned long n)
 {
 	int sz = __compiletime_object_size(to);
 
-	if (likely(sz == -1 || sz >= n))
-		n = _copy_from_user(to, from, n);
-	else
+	if (unlikely(sz != -1 && sz < n))
 		copy_from_user_overflow();
-
+	else if (access_ok(VERIFY_READ, from, n))
+		n = __copy_from_user(to, from, n);
+	else if ((long)n > 0) {
+		if (!__builtin_constant_p(n))
+			check_object_size(to, n, false);
+		memset(to, 0, n);
+	}
 	return n;
 }
 
@@ -235,7 +302,7 @@ long __must_check __strncpy_from_user(ch
 #define strlen_user(str) strnlen_user(str, LONG_MAX)
 
 long strnlen_user(const char __user *str, long n);
-unsigned long __must_check clear_user(void __user *mem, unsigned long len);
-unsigned long __must_check __clear_user(void __user *mem, unsigned long len);
+unsigned long __must_check clear_user(void __user *mem, unsigned long len) __size_overflow(2);
+unsigned long __must_check __clear_user(void __user *mem, unsigned long len) __size_overflow(2);
 
 #endif /* _ASM_X86_UACCESS_32_H */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/uaccess_64.h linux-3.3.8-pax/arch/x86/include/asm/uaccess_64.h
--- linux-3.3.8/arch/x86/include/asm/uaccess_64.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/uaccess_64.h	2012-05-20 18:59:32.353097983 +0200
@@ -10,6 +10,9 @@
 #include <asm/alternative.h>
 #include <asm/cpufeature.h>
 #include <asm/page.h>
+#include <asm/pgtable.h>
+
+#define set_fs(x)	(current_thread_info()->addr_limit = (x))
 
 /*
  * Copy To/From Userspace
@@ -17,12 +20,14 @@
 
 /* Handles exceptions in both to and from, but doesn't do access_ok */
 __must_check unsigned long
-copy_user_generic_string(void *to, const void *from, unsigned len);
+copy_user_generic_string(void *to, const void *from, unsigned long len) __size_overflow(3);
 __must_check unsigned long
-copy_user_generic_unrolled(void *to, const void *from, unsigned len);
+copy_user_generic_unrolled(void *to, const void *from, unsigned long len) __size_overflow(3);
 
 static __always_inline __must_check unsigned long
-copy_user_generic(void *to, const void *from, unsigned len)
+copy_user_generic(void *to, const void *from, unsigned long len) __size_overflow(3);
+static __always_inline __must_check unsigned long
+copy_user_generic(void *to, const void *from, unsigned long len)
 {
 	unsigned ret;
 
@@ -32,142 +37,226 @@ copy_user_generic(void *to, const void *
 			 ASM_OUTPUT2("=a" (ret), "=D" (to), "=S" (from),
 				     "=d" (len)),
 			 "1" (to), "2" (from), "3" (len)
-			 : "memory", "rcx", "r8", "r9", "r10", "r11");
+			 : "memory", "rcx", "r8", "r9", "r11");
 	return ret;
 }
 
+static __always_inline __must_check unsigned long
+__copy_to_user(void __user *to, const void *from, unsigned long len) __size_overflow(3);
+static __always_inline __must_check unsigned long
+__copy_from_user(void *to, const void __user *from, unsigned long len) __size_overflow(3);
 __must_check unsigned long
-_copy_to_user(void __user *to, const void *from, unsigned len);
-__must_check unsigned long
-_copy_from_user(void *to, const void __user *from, unsigned len);
-__must_check unsigned long
-copy_in_user(void __user *to, const void __user *from, unsigned len);
+copy_in_user(void __user *to, const void __user *from, unsigned long len) __size_overflow(3);
 
 static inline unsigned long __must_check copy_from_user(void *to,
 					  const void __user *from,
 					  unsigned long n)
 {
-	int sz = __compiletime_object_size(to);
-
 	might_fault();
-	if (likely(sz == -1 || sz >= n))
-		n = _copy_from_user(to, from, n);
-#ifdef CONFIG_DEBUG_VM
-	else
-		WARN(1, "Buffer overflow detected!\n");
-#endif
+
+	if (access_ok(VERIFY_READ, from, n))
+		n = __copy_from_user(to, from, n);
+	else if (n < INT_MAX) {
+		if (!__builtin_constant_p(n))
+			check_object_size(to, n, false);
+		memset(to, 0, n);
+	}
 	return n;
 }
 
 static __always_inline __must_check
-int copy_to_user(void __user *dst, const void *src, unsigned size)
+int copy_to_user(void __user *dst, const void *src, unsigned long size)
 {
 	might_fault();
 
-	return _copy_to_user(dst, src, size);
+	if (access_ok(VERIFY_WRITE, dst, size))
+		size = __copy_to_user(dst, src, size);
+	return size;
 }
 
 static __always_inline __must_check
-int __copy_from_user(void *dst, const void __user *src, unsigned size)
+unsigned long __copy_from_user(void *dst, const void __user *src, unsigned long size)
 {
-	int ret = 0;
+	int sz = __compiletime_object_size(dst);
+	unsigned ret = 0;
 
 	might_fault();
-	if (!__builtin_constant_p(size))
-		return copy_user_generic(dst, (__force void *)src, size);
+
+	if (size > INT_MAX)
+		return size;
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	if (!__access_ok(VERIFY_READ, src, size))
+		return size;
+#endif
+
+	if (unlikely(sz != -1 && sz < size)) {
+#ifdef CONFIG_DEBUG_VM
+		WARN(1, "Buffer overflow detected!\n");
+#endif
+		return size;
+	}
+
+	if (!__builtin_constant_p(size)) {
+		check_object_size(dst, size, false);
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+		if ((unsigned long)src < PAX_USER_SHADOW_BASE)
+			src += PAX_USER_SHADOW_BASE;
+#endif
+
+		return copy_user_generic(dst, (__force_kernel const void *)src, size);
+	}
 	switch (size) {
-	case 1:__get_user_asm(*(u8 *)dst, (u8 __user *)src,
+	case 1:__get_user_asm(*(u8 *)dst, (const u8 __user *)src,
 			      ret, "b", "b", "=q", 1);
 		return ret;
-	case 2:__get_user_asm(*(u16 *)dst, (u16 __user *)src,
+	case 2:__get_user_asm(*(u16 *)dst, (const u16 __user *)src,
 			      ret, "w", "w", "=r", 2);
 		return ret;
-	case 4:__get_user_asm(*(u32 *)dst, (u32 __user *)src,
+	case 4:__get_user_asm(*(u32 *)dst, (const u32 __user *)src,
 			      ret, "l", "k", "=r", 4);
 		return ret;
-	case 8:__get_user_asm(*(u64 *)dst, (u64 __user *)src,
+	case 8:__get_user_asm(*(u64 *)dst, (const u64 __user *)src,
 			      ret, "q", "", "=r", 8);
 		return ret;
 	case 10:
-		__get_user_asm(*(u64 *)dst, (u64 __user *)src,
+		__get_user_asm(*(u64 *)dst, (const u64 __user *)src,
 			       ret, "q", "", "=r", 10);
 		if (unlikely(ret))
 			return ret;
 		__get_user_asm(*(u16 *)(8 + (char *)dst),
-			       (u16 __user *)(8 + (char __user *)src),
+			       (const u16 __user *)(8 + (const char __user *)src),
 			       ret, "w", "w", "=r", 2);
 		return ret;
 	case 16:
-		__get_user_asm(*(u64 *)dst, (u64 __user *)src,
+		__get_user_asm(*(u64 *)dst, (const u64 __user *)src,
 			       ret, "q", "", "=r", 16);
 		if (unlikely(ret))
 			return ret;
 		__get_user_asm(*(u64 *)(8 + (char *)dst),
-			       (u64 __user *)(8 + (char __user *)src),
+			       (const u64 __user *)(8 + (const char __user *)src),
 			       ret, "q", "", "=r", 8);
 		return ret;
 	default:
-		return copy_user_generic(dst, (__force void *)src, size);
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+		if ((unsigned long)src < PAX_USER_SHADOW_BASE)
+			src += PAX_USER_SHADOW_BASE;
+#endif
+
+		return copy_user_generic(dst, (__force_kernel const void *)src, size);
 	}
 }
 
 static __always_inline __must_check
-int __copy_to_user(void __user *dst, const void *src, unsigned size)
+unsigned long __copy_to_user(void __user *dst, const void *src, unsigned long size)
 {
-	int ret = 0;
+	int sz = __compiletime_object_size(src);
+	unsigned ret = 0;
 
 	might_fault();
-	if (!__builtin_constant_p(size))
-		return copy_user_generic((__force void *)dst, src, size);
+
+	if (size > INT_MAX)
+		return size;
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	if (!__access_ok(VERIFY_WRITE, dst, size))
+		return size;
+#endif
+
+	if (unlikely(sz != -1 && sz < size)) {
+#ifdef CONFIG_DEBUG_VM
+		WARN(1, "Buffer overflow detected!\n");
+#endif
+		return size;
+	}
+
+	if (!__builtin_constant_p(size)) {
+		check_object_size(src, size, true);
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+		if ((unsigned long)dst < PAX_USER_SHADOW_BASE)
+			dst += PAX_USER_SHADOW_BASE;
+#endif
+
+		return copy_user_generic((__force_kernel void *)dst, src, size);
+	}
 	switch (size) {
-	case 1:__put_user_asm(*(u8 *)src, (u8 __user *)dst,
+	case 1:__put_user_asm(*(const u8 *)src, (u8 __user *)dst,
 			      ret, "b", "b", "iq", 1);
 		return ret;
-	case 2:__put_user_asm(*(u16 *)src, (u16 __user *)dst,
+	case 2:__put_user_asm(*(const u16 *)src, (u16 __user *)dst,
 			      ret, "w", "w", "ir", 2);
 		return ret;
-	case 4:__put_user_asm(*(u32 *)src, (u32 __user *)dst,
+	case 4:__put_user_asm(*(const u32 *)src, (u32 __user *)dst,
 			      ret, "l", "k", "ir", 4);
 		return ret;
-	case 8:__put_user_asm(*(u64 *)src, (u64 __user *)dst,
+	case 8:__put_user_asm(*(const u64 *)src, (u64 __user *)dst,
 			      ret, "q", "", "er", 8);
 		return ret;
 	case 10:
-		__put_user_asm(*(u64 *)src, (u64 __user *)dst,
+		__put_user_asm(*(const u64 *)src, (u64 __user *)dst,
 			       ret, "q", "", "er", 10);
 		if (unlikely(ret))
 			return ret;
 		asm("":::"memory");
-		__put_user_asm(4[(u16 *)src], 4 + (u16 __user *)dst,
+		__put_user_asm(4[(const u16 *)src], 4 + (u16 __user *)dst,
 			       ret, "w", "w", "ir", 2);
 		return ret;
 	case 16:
-		__put_user_asm(*(u64 *)src, (u64 __user *)dst,
+		__put_user_asm(*(const u64 *)src, (u64 __user *)dst,
 			       ret, "q", "", "er", 16);
 		if (unlikely(ret))
 			return ret;
 		asm("":::"memory");
-		__put_user_asm(1[(u64 *)src], 1 + (u64 __user *)dst,
+		__put_user_asm(1[(const u64 *)src], 1 + (u64 __user *)dst,
 			       ret, "q", "", "er", 8);
 		return ret;
 	default:
-		return copy_user_generic((__force void *)dst, src, size);
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+		if ((unsigned long)dst < PAX_USER_SHADOW_BASE)
+			dst += PAX_USER_SHADOW_BASE;
+#endif
+
+		return copy_user_generic((__force_kernel void *)dst, src, size);
 	}
 }
 
 static __always_inline __must_check
-int __copy_in_user(void __user *dst, const void __user *src, unsigned size)
+unsigned long __copy_in_user(void __user *dst, const void __user *src, unsigned long size)
 {
-	int ret = 0;
+	unsigned ret = 0;
 
 	might_fault();
-	if (!__builtin_constant_p(size))
-		return copy_user_generic((__force void *)dst,
-					 (__force void *)src, size);
+
+	if (size > INT_MAX)
+		return size;
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	if (!__access_ok(VERIFY_READ, src, size))
+		return size;
+	if (!__access_ok(VERIFY_WRITE, dst, size))
+		return size;
+#endif
+
+	if (!__builtin_constant_p(size)) {
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+		if ((unsigned long)src < PAX_USER_SHADOW_BASE)
+			src += PAX_USER_SHADOW_BASE;
+		if ((unsigned long)dst < PAX_USER_SHADOW_BASE)
+			dst += PAX_USER_SHADOW_BASE;
+#endif
+
+		return copy_user_generic((__force_kernel void *)dst,
+					 (__force_kernel const void *)src, size);
+	}
 	switch (size) {
 	case 1: {
 		u8 tmp;
-		__get_user_asm(tmp, (u8 __user *)src,
+		__get_user_asm(tmp, (const u8 __user *)src,
 			       ret, "b", "b", "=q", 1);
 		if (likely(!ret))
 			__put_user_asm(tmp, (u8 __user *)dst,
@@ -176,7 +265,7 @@ int __copy_in_user(void __user *dst, con
 	}
 	case 2: {
 		u16 tmp;
-		__get_user_asm(tmp, (u16 __user *)src,
+		__get_user_asm(tmp, (const u16 __user *)src,
 			       ret, "w", "w", "=r", 2);
 		if (likely(!ret))
 			__put_user_asm(tmp, (u16 __user *)dst,
@@ -186,7 +275,7 @@ int __copy_in_user(void __user *dst, con
 
 	case 4: {
 		u32 tmp;
-		__get_user_asm(tmp, (u32 __user *)src,
+		__get_user_asm(tmp, (const u32 __user *)src,
 			       ret, "l", "k", "=r", 4);
 		if (likely(!ret))
 			__put_user_asm(tmp, (u32 __user *)dst,
@@ -195,7 +284,7 @@ int __copy_in_user(void __user *dst, con
 	}
 	case 8: {
 		u64 tmp;
-		__get_user_asm(tmp, (u64 __user *)src,
+		__get_user_asm(tmp, (const u64 __user *)src,
 			       ret, "q", "", "=r", 8);
 		if (likely(!ret))
 			__put_user_asm(tmp, (u64 __user *)dst,
@@ -203,8 +292,16 @@ int __copy_in_user(void __user *dst, con
 		return ret;
 	}
 	default:
-		return copy_user_generic((__force void *)dst,
-					 (__force void *)src, size);
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+		if ((unsigned long)src < PAX_USER_SHADOW_BASE)
+			src += PAX_USER_SHADOW_BASE;
+		if ((unsigned long)dst < PAX_USER_SHADOW_BASE)
+			dst += PAX_USER_SHADOW_BASE;
+#endif
+
+		return copy_user_generic((__force_kernel void *)dst,
+					 (__force_kernel const void *)src, size);
 	}
 }
 
@@ -215,39 +312,76 @@ __strncpy_from_user(char *dst, const cha
 __must_check long strnlen_user(const char __user *str, long n);
 __must_check long __strnlen_user(const char __user *str, long n);
 __must_check long strlen_user(const char __user *str);
-__must_check unsigned long clear_user(void __user *mem, unsigned long len);
-__must_check unsigned long __clear_user(void __user *mem, unsigned long len);
+__must_check unsigned long clear_user(void __user *mem, unsigned long len) __size_overflow(2);
+__must_check unsigned long __clear_user(void __user *mem, unsigned long len) __size_overflow(2);
 
 static __must_check __always_inline int
-__copy_from_user_inatomic(void *dst, const void __user *src, unsigned size)
+__copy_from_user_inatomic(void *dst, const void __user *src, unsigned long size)
 {
-	return copy_user_generic(dst, (__force const void *)src, size);
+	if (size > INT_MAX)
+		return size;
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	if (!__access_ok(VERIFY_READ, src, size))
+		return size;
+
+	if ((unsigned long)src < PAX_USER_SHADOW_BASE)
+		src += PAX_USER_SHADOW_BASE;
+#endif
+
+	return copy_user_generic(dst, (__force_kernel const void *)src, size);
 }
 
-static __must_check __always_inline int
-__copy_to_user_inatomic(void __user *dst, const void *src, unsigned size)
+static __must_check __always_inline unsigned long
+__copy_to_user_inatomic(void __user *dst, const void *src, unsigned long size)
 {
-	return copy_user_generic((__force void *)dst, src, size);
+	if (size > INT_MAX)
+		return size;
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	if (!__access_ok(VERIFY_WRITE, dst, size))
+		return size;
+
+	if ((unsigned long)dst < PAX_USER_SHADOW_BASE)
+		dst += PAX_USER_SHADOW_BASE;
+#endif
+
+	return copy_user_generic((__force_kernel void *)dst, src, size);
 }
 
-extern long __copy_user_nocache(void *dst, const void __user *src,
-				unsigned size, int zerorest);
+extern unsigned long __copy_user_nocache(void *dst, const void __user *src,
+				unsigned long size, int zerorest) __size_overflow(3);
 
-static inline int
-__copy_from_user_nocache(void *dst, const void __user *src, unsigned size)
+static inline unsigned long __copy_from_user_nocache(void *dst, const void __user *src, unsigned long size)
 {
 	might_sleep();
+
+	if (size > INT_MAX)
+		return size;
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	if (!__access_ok(VERIFY_READ, src, size))
+		return size;
+#endif
+
 	return __copy_user_nocache(dst, src, size, 1);
 }
 
-static inline int
-__copy_from_user_inatomic_nocache(void *dst, const void __user *src,
-				  unsigned size)
+static inline unsigned long __copy_from_user_inatomic_nocache(void *dst, const void __user *src,
+				  unsigned long size)
 {
+	if (size > INT_MAX)
+		return size;
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	if (!__access_ok(VERIFY_READ, src, size))
+		return size;
+#endif
+
 	return __copy_user_nocache(dst, src, size, 0);
 }
 
-unsigned long
-copy_user_handle_tail(char *to, char *from, unsigned len, unsigned zerorest);
+extern unsigned long
+copy_user_handle_tail(char __user *to, char __user *from, unsigned long len, unsigned zerorest) __size_overflow(3);
 
 #endif /* _ASM_X86_UACCESS_64_H */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/uaccess.h linux-3.3.8-pax/arch/x86/include/asm/uaccess.h
--- linux-3.3.8/arch/x86/include/asm/uaccess.h	2012-03-19 10:38:56.468050003 +0100
+++ linux-3.3.8-pax/arch/x86/include/asm/uaccess.h	2012-03-19 10:43:43.112034698 +0100
@@ -7,12 +7,15 @@
 #include <linux/compiler.h>
 #include <linux/thread_info.h>
 #include <linux/string.h>
+#include <linux/sched.h>
 #include <asm/asm.h>
 #include <asm/page.h>
 
 #define VERIFY_READ 0
 #define VERIFY_WRITE 1
 
+extern void check_object_size(const void *ptr, unsigned long n, bool to);
+
 /*
  * The fs value determines whether argument validity checking should be
  * performed or not.  If get_fs() == USER_DS, checking is performed, with
@@ -28,7 +31,12 @@
 
 #define get_ds()	(KERNEL_DS)
 #define get_fs()	(current_thread_info()->addr_limit)
+#if defined(CONFIG_X86_32) && defined(CONFIG_PAX_MEMORY_UDEREF)
+void __set_fs(mm_segment_t x);
+void set_fs(mm_segment_t x);
+#else
 #define set_fs(x)	(current_thread_info()->addr_limit = (x))
+#endif
 
 #define segment_eq(a, b)	((a).seg == (b).seg)
 
@@ -76,7 +84,33 @@
  * checks that the pointer is in the user space range - after calling
  * this function, memory access functions may still return -EFAULT.
  */
-#define access_ok(type, addr, size) (likely(__range_not_ok(addr, size) == 0))
+#define __access_ok(type, addr, size) (likely(__range_not_ok(addr, size) == 0))
+#define access_ok(type, addr, size)					\
+({									\
+	long __size = size;						\
+	unsigned long __addr = (unsigned long)addr;			\
+	unsigned long __addr_ao = __addr & PAGE_MASK;			\
+	unsigned long __end_ao = __addr + __size - 1;			\
+	bool __ret_ao = __range_not_ok(__addr, __size) == 0;		\
+	if (__ret_ao && unlikely((__end_ao ^ __addr_ao) & PAGE_MASK)) {	\
+		while(__addr_ao <= __end_ao) {				\
+			char __c_ao;					\
+			__addr_ao += PAGE_SIZE;				\
+			if (__size > PAGE_SIZE)				\
+				cond_resched();				\
+			if (__get_user(__c_ao, (char __user *)__addr))	\
+				break;					\
+			if (type != VERIFY_WRITE) {			\
+				__addr = __addr_ao;			\
+				continue;				\
+			}						\
+			if (__put_user(__c_ao, (char __user *)__addr))	\
+				break;					\
+			__addr = __addr_ao;				\
+		}							\
+	}								\
+	__ret_ao;							\
+})
 
 /*
  * The exception table consists of pairs of addresses: the first is the
@@ -182,12 +216,20 @@ extern int __get_user_bad(void);
 	asm volatile("call __put_user_" #size : "=a" (__ret_pu)	\
 		     : "0" ((typeof(*(ptr)))(x)), "c" (ptr) : "ebx")
 
-
+#if defined(CONFIG_X86_32) && defined(CONFIG_PAX_MEMORY_UDEREF)
+#define __copyuser_seg "gs;"
+#define __COPYUSER_SET_ES "pushl %%gs; popl %%es\n"
+#define __COPYUSER_RESTORE_ES "pushl %%ss; popl %%es\n"
+#else
+#define __copyuser_seg
+#define __COPYUSER_SET_ES
+#define __COPYUSER_RESTORE_ES
+#endif
 
 #ifdef CONFIG_X86_32
 #define __put_user_asm_u64(x, addr, err, errret)			\
-	asm volatile("1:	movl %%eax,0(%2)\n"			\
-		     "2:	movl %%edx,4(%2)\n"			\
+	asm volatile("1:	"__copyuser_seg"movl %%eax,0(%2)\n"	\
+		     "2:	"__copyuser_seg"movl %%edx,4(%2)\n"	\
 		     "3:\n"						\
 		     ".section .fixup,\"ax\"\n"				\
 		     "4:	movl %3,%0\n"				\
@@ -199,8 +241,8 @@ extern int __get_user_bad(void);
 		     : "A" (x), "r" (addr), "i" (errret), "0" (err))
 
 #define __put_user_asm_ex_u64(x, addr)					\
-	asm volatile("1:	movl %%eax,0(%1)\n"			\
-		     "2:	movl %%edx,4(%1)\n"			\
+	asm volatile("1:	"__copyuser_seg"movl %%eax,0(%1)\n"	\
+		     "2:	"__copyuser_seg"movl %%edx,4(%1)\n"	\
 		     "3:\n"						\
 		     _ASM_EXTABLE(1b, 2b - 1b)				\
 		     _ASM_EXTABLE(2b, 3b - 2b)				\
@@ -252,7 +294,7 @@ extern void __put_user_8(void);
 	__typeof__(*(ptr)) __pu_val;				\
 	__chk_user_ptr(ptr);					\
 	might_fault();						\
-	__pu_val = x;						\
+	__pu_val = (x);						\
 	switch (sizeof(*(ptr))) {				\
 	case 1:							\
 		__put_user_x(1, __pu_val, ptr, __ret_pu);	\
@@ -373,7 +415,7 @@ do {									\
 } while (0)
 
 #define __get_user_asm(x, addr, err, itype, rtype, ltype, errret)	\
-	asm volatile("1:	mov"itype" %2,%"rtype"1\n"		\
+	asm volatile("1:	"__copyuser_seg"mov"itype" %2,%"rtype"1\n"\
 		     "2:\n"						\
 		     ".section .fixup,\"ax\"\n"				\
 		     "3:	mov %3,%0\n"				\
@@ -381,7 +423,7 @@ do {									\
 		     "	jmp 2b\n"					\
 		     ".previous\n"					\
 		     _ASM_EXTABLE(1b, 3b)				\
-		     : "=r" (err), ltype(x)				\
+		     : "=r" (err), ltype (x)				\
 		     : "m" (__m(addr)), "i" (errret), "0" (err))
 
 #define __get_user_size_ex(x, ptr, size)				\
@@ -406,7 +448,7 @@ do {									\
 } while (0)
 
 #define __get_user_asm_ex(x, addr, itype, rtype, ltype)			\
-	asm volatile("1:	mov"itype" %1,%"rtype"0\n"		\
+	asm volatile("1:	"__copyuser_seg"mov"itype" %1,%"rtype"0\n"\
 		     "2:\n"						\
 		     _ASM_EXTABLE(1b, 2b - 1b)				\
 		     : ltype(x) : "m" (__m(addr)))
@@ -423,13 +465,24 @@ do {									\
 	int __gu_err;							\
 	unsigned long __gu_val;						\
 	__get_user_size(__gu_val, (ptr), (size), __gu_err, -EFAULT);	\
-	(x) = (__force __typeof__(*(ptr)))__gu_val;			\
+	(x) = (__typeof__(*(ptr)))__gu_val;				\
 	__gu_err;							\
 })
 
 /* FIXME: this hack is definitely wrong -AK */
 struct __large_struct { unsigned long buf[100]; };
-#define __m(x) (*(struct __large_struct __user *)(x))
+#if defined(CONFIG_X86_64) && defined(CONFIG_PAX_MEMORY_UDEREF)
+#define ____m(x)					\
+({							\
+	unsigned long ____x = (unsigned long)(x);	\
+	if (____x < PAX_USER_SHADOW_BASE)		\
+		____x += PAX_USER_SHADOW_BASE;		\
+	(void __user *)____x;				\
+})
+#else
+#define ____m(x) (x)
+#endif
+#define __m(x) (*(struct __large_struct __user *)____m(x))
 
 /*
  * Tell gcc we read from memory instead of writing: this is because
@@ -437,7 +490,7 @@ struct __large_struct { unsigned long bu
  * aliasing issues.
  */
 #define __put_user_asm(x, addr, err, itype, rtype, ltype, errret)	\
-	asm volatile("1:	mov"itype" %"rtype"1,%2\n"		\
+	asm volatile("1:	"__copyuser_seg"mov"itype" %"rtype"1,%2\n"\
 		     "2:\n"						\
 		     ".section .fixup,\"ax\"\n"				\
 		     "3:	mov %3,%0\n"				\
@@ -445,10 +498,10 @@ struct __large_struct { unsigned long bu
 		     ".previous\n"					\
 		     _ASM_EXTABLE(1b, 3b)				\
 		     : "=r"(err)					\
-		     : ltype(x), "m" (__m(addr)), "i" (errret), "0" (err))
+		     : ltype (x), "m" (__m(addr)), "i" (errret), "0" (err))
 
 #define __put_user_asm_ex(x, addr, itype, rtype, ltype)			\
-	asm volatile("1:	mov"itype" %"rtype"0,%1\n"		\
+	asm volatile("1:	"__copyuser_seg"mov"itype" %"rtype"0,%1\n"\
 		     "2:\n"						\
 		     _ASM_EXTABLE(1b, 2b - 1b)				\
 		     : : ltype(x), "m" (__m(addr)))
@@ -487,8 +540,12 @@ struct __large_struct { unsigned long bu
  * On error, the variable @x is set to zero.
  */
 
+#if defined(CONFIG_X86_64) && defined(CONFIG_PAX_MEMORY_UDEREF)
+#define __get_user(x, ptr)	get_user((x), (ptr))
+#else
 #define __get_user(x, ptr)						\
 	__get_user_nocheck((x), (ptr), sizeof(*(ptr)))
+#endif
 
 /**
  * __put_user: - Write a simple value into user space, with less checking.
@@ -510,8 +567,12 @@ struct __large_struct { unsigned long bu
  * Returns zero on success, or -EFAULT on error.
  */
 
+#if defined(CONFIG_X86_64) && defined(CONFIG_PAX_MEMORY_UDEREF)
+#define __put_user(x, ptr)	put_user((x), (ptr))
+#else
 #define __put_user(x, ptr)						\
 	__put_user_nocheck((__typeof__(*(ptr)))(x), (ptr), sizeof(*(ptr)))
+#endif
 
 #define __get_user_unaligned __get_user
 #define __put_user_unaligned __put_user
@@ -529,7 +590,7 @@ struct __large_struct { unsigned long bu
 #define get_user_ex(x, ptr)	do {					\
 	unsigned long __gue_val;					\
 	__get_user_size_ex((__gue_val), (ptr), (sizeof(*(ptr))));	\
-	(x) = (__force __typeof__(*(ptr)))__gue_val;			\
+	(x) = (__typeof__(*(ptr)))__gue_val;				\
 } while (0)
 
 #ifdef CONFIG_X86_WP_WORKS_OK
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/vdso.h linux-3.3.8-pax/arch/x86/include/asm/vdso.h
--- linux-3.3.8/arch/x86/include/asm/vdso.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/vdso.h	2012-03-19 10:43:43.112034698 +0100
@@ -11,7 +11,7 @@ extern const char VDSO32_PRELINK[];
 #define VDSO32_SYMBOL(base, name)					\
 ({									\
 	extern const char VDSO32_##name[];				\
-	(void *)(VDSO32_##name - VDSO32_PRELINK + (unsigned long)(base)); \
+	(void __user *)(VDSO32_##name - VDSO32_PRELINK + (unsigned long)(base)); \
 })
 #endif
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/x86_init.h linux-3.3.8-pax/arch/x86/include/asm/x86_init.h
--- linux-3.3.8/arch/x86/include/asm/x86_init.h	2012-05-07 20:26:55.995609319 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/x86_init.h	2012-05-07 20:27:02.039608997 +0200
@@ -29,7 +29,7 @@ struct x86_init_mpparse {
 	void (*mpc_oem_bus_info)(struct mpc_bus *m, char *name);
 	void (*find_smp_config)(void);
 	void (*get_smp_config)(unsigned int early);
-};
+} __no_const;
 
 /**
  * struct x86_init_resources - platform specific resource related ops
@@ -43,7 +43,7 @@ struct x86_init_resources {
 	void (*probe_roms)(void);
 	void (*reserve_resources)(void);
 	char *(*memory_setup)(void);
-};
+} __no_const;
 
 /**
  * struct x86_init_irqs - platform specific interrupt setup
@@ -56,7 +56,7 @@ struct x86_init_irqs {
 	void (*pre_vector_init)(void);
 	void (*intr_init)(void);
 	void (*trap_init)(void);
-};
+} __no_const;
 
 /**
  * struct x86_init_oem - oem platform specific customizing functions
@@ -66,7 +66,7 @@ struct x86_init_irqs {
 struct x86_init_oem {
 	void (*arch_setup)(void);
 	void (*banner)(void);
-};
+} __no_const;
 
 /**
  * struct x86_init_mapping - platform specific initial kernel pagetable setup
@@ -77,7 +77,7 @@ struct x86_init_oem {
  */
 struct x86_init_mapping {
 	void (*pagetable_reserve)(u64 start, u64 end);
-};
+} __no_const;
 
 /**
  * struct x86_init_paging - platform specific paging functions
@@ -87,7 +87,7 @@ struct x86_init_mapping {
 struct x86_init_paging {
 	void (*pagetable_setup_start)(pgd_t *base);
 	void (*pagetable_setup_done)(pgd_t *base);
-};
+} __no_const;
 
 /**
  * struct x86_init_timers - platform specific timer setup
@@ -102,7 +102,7 @@ struct x86_init_timers {
 	void (*tsc_pre_init)(void);
 	void (*timer_init)(void);
 	void (*wallclock_init)(void);
-};
+} __no_const;
 
 /**
  * struct x86_init_iommu - platform specific iommu setup
@@ -110,7 +110,7 @@ struct x86_init_timers {
  */
 struct x86_init_iommu {
 	int (*iommu_init)(void);
-};
+} __no_const;
 
 /**
  * struct x86_init_pci - platform specific pci init functions
@@ -124,7 +124,7 @@ struct x86_init_pci {
 	int (*init)(void);
 	void (*init_irq)(void);
 	void (*fixup_irqs)(void);
-};
+} __no_const;
 
 /**
  * struct x86_init_ops - functions for platform specific setup
@@ -140,7 +140,7 @@ struct x86_init_ops {
 	struct x86_init_timers		timers;
 	struct x86_init_iommu		iommu;
 	struct x86_init_pci		pci;
-};
+} __no_const;
 
 /**
  * struct x86_cpuinit_ops - platform specific cpu hotplug setups
@@ -149,7 +149,7 @@ struct x86_init_ops {
 struct x86_cpuinit_ops {
 	void (*setup_percpu_clockev)(void);
 	void (*fixup_cpu_id)(struct cpuinfo_x86 *c, int node);
-};
+} __no_const;
 
 /**
  * struct x86_platform_ops - platform specific runtime functions
@@ -171,7 +171,7 @@ struct x86_platform_ops {
 	void (*nmi_init)(void);
 	unsigned char (*get_nmi_reason)(void);
 	int (*i8042_detect)(void);
-};
+} __no_const;
 
 struct pci_dev;
 
@@ -180,7 +180,7 @@ struct x86_msi_ops {
 	void (*teardown_msi_irq)(unsigned int irq);
 	void (*teardown_msi_irqs)(struct pci_dev *dev);
 	void (*restore_msi_irqs)(struct pci_dev *dev, int irq);
-};
+} __no_const;
 
 extern struct x86_init_ops x86_init;
 extern struct x86_cpuinit_ops x86_cpuinit;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/include/asm/xsave.h linux-3.3.8-pax/arch/x86/include/asm/xsave.h
--- linux-3.3.8/arch/x86/include/asm/xsave.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/include/asm/xsave.h	2012-03-19 10:43:43.116034697 +0100
@@ -65,6 +65,11 @@ static inline int xsave_user(struct xsav
 {
 	int err;
 
+#if defined(CONFIG_X86_64) && defined(CONFIG_PAX_MEMORY_UDEREF)
+	if ((unsigned long)buf < PAX_USER_SHADOW_BASE)
+		buf = (struct xsave_struct __user *)((void __user*)buf + PAX_USER_SHADOW_BASE);
+#endif
+
 	/*
 	 * Clear the xsave header first, so that reserved fields are
 	 * initialized to zero.
@@ -96,10 +101,15 @@ static inline int xsave_user(struct xsav
 static inline int xrestore_user(struct xsave_struct __user *buf, u64 mask)
 {
 	int err;
-	struct xsave_struct *xstate = ((__force struct xsave_struct *)buf);
+	struct xsave_struct *xstate = ((__force_kernel struct xsave_struct *)buf);
 	u32 lmask = mask;
 	u32 hmask = mask >> 32;
 
+#if defined(CONFIG_X86_64) && defined(CONFIG_PAX_MEMORY_UDEREF)
+	if ((unsigned long)xstate < PAX_USER_SHADOW_BASE)
+		xstate = (struct xsave_struct *)((void *)xstate + PAX_USER_SHADOW_BASE);
+#endif
+
 	__asm__ __volatile__("1: .byte " REX_PREFIX "0x0f,0xae,0x2f\n"
 			     "2:\n"
 			     ".section .fixup,\"ax\"\n"
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/Kconfig linux-3.3.8-pax/arch/x86/Kconfig
--- linux-3.3.8/arch/x86/Kconfig	2012-03-19 10:38:56.376050007 +0100
+++ linux-3.3.8-pax/arch/x86/Kconfig	2012-03-19 10:43:43.116034697 +0100
@@ -226,7 +226,7 @@ config X86_HT
 
 config X86_32_LAZY_GS
 	def_bool y
-	depends on X86_32 && !CC_STACKPROTECTOR
+	depends on X86_32 && !CC_STACKPROTECTOR && !PAX_MEMORY_UDEREF
 
 config ARCH_HWEIGHT_CFLAGS
 	string
@@ -1149,7 +1149,7 @@ config PAGE_OFFSET
 	hex
 	default 0xB0000000 if VMSPLIT_3G_OPT
 	default 0x80000000 if VMSPLIT_2G
-	default 0x78000000 if VMSPLIT_2G_OPT
+	default 0x70000000 if VMSPLIT_2G_OPT
 	default 0x40000000 if VMSPLIT_1G
 	default 0xC0000000
 	depends on X86_32
@@ -1539,6 +1539,7 @@ config SECCOMP
 
 config CC_STACKPROTECTOR
 	bool "Enable -fstack-protector buffer overflow detection (EXPERIMENTAL)"
+	depends on X86_64 || !PAX_MEMORY_UDEREF
 	---help---
 	  This option turns on the -fstack-protector GCC feature. This
 	  feature puts, at the beginning of functions, a canary value on
@@ -1596,6 +1597,7 @@ config KEXEC_JUMP
 config PHYSICAL_START
 	hex "Physical address where the kernel is loaded" if (EXPERT || CRASH_DUMP)
 	default "0x1000000"
+	range 0x400000 0x40000000
 	---help---
 	  This gives the physical address where the kernel is loaded.
 
@@ -1659,6 +1661,7 @@ config X86_NEED_RELOCS
 config PHYSICAL_ALIGN
 	hex "Alignment value to which kernel should be aligned" if X86_32
 	default "0x1000000"
+	range 0x400000 0x1000000 if PAX_KERNEXEC
 	range 0x2000 0x1000000
 	---help---
 	  This value puts the alignment restrictions on physical address
@@ -1690,7 +1693,7 @@ config HOTPLUG_CPU
 	  Say N if you want to disable CPU hotplug.
 
 config COMPAT_VDSO
-	def_bool y
+	def_bool n
 	prompt "Compat VDSO support"
 	depends on X86_32 || IA32_EMULATION
 	---help---
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/Kconfig.cpu linux-3.3.8-pax/arch/x86/Kconfig.cpu
--- linux-3.3.8/arch/x86/Kconfig.cpu	2012-03-19 10:38:56.376050007 +0100
+++ linux-3.3.8-pax/arch/x86/Kconfig.cpu	2012-03-19 10:43:43.116034697 +0100
@@ -335,7 +335,7 @@ config X86_PPRO_FENCE
 
 config X86_F00F_BUG
 	def_bool y
-	depends on M586MMX || M586TSC || M586 || M486 || M386
+	depends on (M586MMX || M586TSC || M586 || M486 || M386) && !PAX_KERNEXEC
 
 config X86_INVD_BUG
 	def_bool y
@@ -359,7 +359,7 @@ config X86_POPAD_OK
 
 config X86_ALIGNMENT_16
 	def_bool y
-	depends on MWINCHIP3D || MWINCHIPC6 || MCYRIXIII || MELAN || MK6 || M586MMX || M586TSC || M586 || M486 || MVIAC3_2 || MGEODEGX1
+	depends on MWINCHIP3D || MWINCHIPC6 || MCYRIXIII || X86_ELAN || MK8 || MK7 || MK6 || MCORE2 || MPENTIUM4 || MPENTIUMIII || MPENTIUMII || M686 || M586MMX || M586TSC || M586 || M486 || MVIAC3_2 || MGEODEGX1
 
 config X86_INTEL_USERCOPY
 	def_bool y
@@ -405,7 +405,7 @@ config X86_CMPXCHG64
 # generates cmov.
 config X86_CMOV
 	def_bool y
-	depends on (MK8 || MK7 || MCORE2 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || MVIAC3_2 || MVIAC7 || MCRUSOE || MEFFICEON || X86_64 || MATOM || MGEODE_LX)
+	depends on (MK8 || MK7 || MCORE2 || MPSC || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || MVIAC3_2 || MVIAC7 || MCRUSOE || MEFFICEON || X86_64 || MATOM || MGEODE_LX)
 
 config X86_MINIMUM_CPU_FAMILY
 	int
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/Kconfig.debug linux-3.3.8-pax/arch/x86/Kconfig.debug
--- linux-3.3.8/arch/x86/Kconfig.debug	2012-03-19 10:38:56.376050007 +0100
+++ linux-3.3.8-pax/arch/x86/Kconfig.debug	2012-03-19 10:43:43.120034697 +0100
@@ -84,7 +84,7 @@ config X86_PTDUMP
 config DEBUG_RODATA
 	bool "Write protect kernel read-only data structures"
 	default y
-	depends on DEBUG_KERNEL
+	depends on DEBUG_KERNEL && BROKEN
 	---help---
 	  Mark the kernel read-only data as write-protected in the pagetables,
 	  in order to catch accidental (and incorrect) writes to such const
@@ -102,7 +102,7 @@ config DEBUG_RODATA_TEST
 
 config DEBUG_SET_MODULE_RONX
 	bool "Set loadable kernel module data as NX and text as RO"
-	depends on MODULES
+	depends on MODULES && BROKEN
 	---help---
 	  This option helps catch unintended modifications to loadable
 	  kernel module's text and read-only data. It also prevents execution
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/acpi/realmode/Makefile linux-3.3.8-pax/arch/x86/kernel/acpi/realmode/Makefile
--- linux-3.3.8/arch/x86/kernel/acpi/realmode/Makefile	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/acpi/realmode/Makefile	2012-03-19 10:43:43.120034697 +0100
@@ -41,6 +41,9 @@ KBUILD_CFLAGS	:= $(LINUXINCLUDE) -g -Os
 		   $(call cc-option, -fno-stack-protector) \
 		   $(call cc-option, -mpreferred-stack-boundary=2)
 KBUILD_CFLAGS	+= $(call cc-option, -m32)
+ifdef CONSTIFY_PLUGIN
+KBUILD_CFLAGS	+= $(CONSTIFY_PLUGIN) -fplugin-arg-constify_plugin-no-constify
+endif
 KBUILD_AFLAGS	:= $(KBUILD_CFLAGS) -D__ASSEMBLY__
 GCOV_PROFILE := n
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/acpi/sleep.c linux-3.3.8-pax/arch/x86/kernel/acpi/sleep.c
--- linux-3.3.8/arch/x86/kernel/acpi/sleep.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/acpi/sleep.c	2012-03-19 10:43:43.120034697 +0100
@@ -94,8 +94,12 @@ int acpi_suspend_lowlevel(void)
 	header->trampoline_segment = trampoline_address() >> 4;
 #ifdef CONFIG_SMP
 	stack_start = (unsigned long)temp_stack + sizeof(temp_stack);
+
+	pax_open_kernel();
 	early_gdt_descr.address =
 			(unsigned long)get_cpu_gdt_table(smp_processor_id());
+	pax_close_kernel();
+
 	initial_gs = per_cpu_offset(smp_processor_id());
 #endif
 	initial_code = (unsigned long)wakeup_long64;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/acpi/wakeup_32.S linux-3.3.8-pax/arch/x86/kernel/acpi/wakeup_32.S
--- linux-3.3.8/arch/x86/kernel/acpi/wakeup_32.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/acpi/wakeup_32.S	2012-03-19 10:43:43.120034697 +0100
@@ -30,13 +30,11 @@ wakeup_pmode_return:
 	# and restore the stack ... but you need gdt for this to work
 	movl	saved_context_esp, %esp
 
-	movl	%cs:saved_magic, %eax
-	cmpl	$0x12345678, %eax
+	cmpl	$0x12345678, saved_magic
 	jne	bogus_magic
 
 	# jump to place where we left off
-	movl	saved_eip, %eax
-	jmp	*%eax
+	jmp	*(saved_eip)
 
 bogus_magic:
 	jmp	bogus_magic
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/alternative.c linux-3.3.8-pax/arch/x86/kernel/alternative.c
--- linux-3.3.8/arch/x86/kernel/alternative.c	2012-01-08 19:47:49.287472997 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/alternative.c	2012-03-19 10:43:43.120034697 +0100
@@ -276,6 +276,13 @@ void __init_or_module apply_alternatives
 	 */
 	for (a = start; a < end; a++) {
 		instr = (u8 *)&a->instr_offset + a->instr_offset;
+
+#if defined(CONFIG_X86_32) && defined(CONFIG_PAX_KERNEXEC)
+		instr += ____LOAD_PHYSICAL_ADDR - LOAD_PHYSICAL_ADDR;
+		if (instr < (u8 *)_text || (u8 *)_einittext <= instr)
+			instr -= ____LOAD_PHYSICAL_ADDR - LOAD_PHYSICAL_ADDR;
+#endif
+
 		replacement = (u8 *)&a->repl_offset + a->repl_offset;
 		BUG_ON(a->replacementlen > a->instrlen);
 		BUG_ON(a->instrlen > sizeof(insnbuf));
@@ -307,10 +314,16 @@ static void alternatives_smp_lock(const
 	for (poff = start; poff < end; poff++) {
 		u8 *ptr = (u8 *)poff + *poff;
 
+#if defined(CONFIG_X86_32) && defined(CONFIG_PAX_KERNEXEC)
+		ptr += ____LOAD_PHYSICAL_ADDR - LOAD_PHYSICAL_ADDR;
+		if (ptr < (u8 *)_text || (u8 *)_einittext <= ptr)
+			ptr -= ____LOAD_PHYSICAL_ADDR - LOAD_PHYSICAL_ADDR;
+#endif
+
 		if (!*poff || ptr < text || ptr >= text_end)
 			continue;
 		/* turn DS segment override prefix into lock prefix */
-		if (*ptr == 0x3e)
+		if (*ktla_ktva(ptr) == 0x3e)
 			text_poke(ptr, ((unsigned char []){0xf0}), 1);
 	};
 	mutex_unlock(&text_mutex);
@@ -328,10 +341,16 @@ static void alternatives_smp_unlock(cons
 	for (poff = start; poff < end; poff++) {
 		u8 *ptr = (u8 *)poff + *poff;
 
+#if defined(CONFIG_X86_32) && defined(CONFIG_PAX_KERNEXEC)
+		ptr += ____LOAD_PHYSICAL_ADDR - LOAD_PHYSICAL_ADDR;
+		if (ptr < (u8 *)_text || (u8 *)_einittext <= ptr)
+			ptr -= ____LOAD_PHYSICAL_ADDR - LOAD_PHYSICAL_ADDR;
+#endif
+
 		if (!*poff || ptr < text || ptr >= text_end)
 			continue;
 		/* turn lock prefix into DS segment override prefix */
-		if (*ptr == 0xf0)
+		if (*ktla_ktva(ptr) == 0xf0)
 			text_poke(ptr, ((unsigned char []){0x3E}), 1);
 	};
 	mutex_unlock(&text_mutex);
@@ -500,7 +519,7 @@ void __init_or_module apply_paravirt(str
 
 		BUG_ON(p->len > MAX_PATCH_LEN);
 		/* prep the buffer with the original instructions */
-		memcpy(insnbuf, p->instr, p->len);
+		memcpy(insnbuf, ktla_ktva(p->instr), p->len);
 		used = pv_init_ops.patch(p->instrtype, p->clobbers, insnbuf,
 					 (unsigned long)p->instr, p->len);
 
@@ -568,7 +587,7 @@ void __init alternative_instructions(voi
 	if (smp_alt_once)
 		free_init_pages("SMP alternatives",
 				(unsigned long)__smp_locks,
-				(unsigned long)__smp_locks_end);
+				PAGE_ALIGN((unsigned long)__smp_locks_end));
 
 	restart_nmi();
 }
@@ -585,13 +604,17 @@ void __init alternative_instructions(voi
  * instructions. And on the local CPU you need to be protected again NMI or MCE
  * handlers seeing an inconsistent instruction while you patch.
  */
-void *__init_or_module text_poke_early(void *addr, const void *opcode,
+void *__kprobes text_poke_early(void *addr, const void *opcode,
 					      size_t len)
 {
 	unsigned long flags;
 	local_irq_save(flags);
-	memcpy(addr, opcode, len);
+
+	pax_open_kernel();
+	memcpy(ktla_ktva(addr), opcode, len);
 	sync_core();
+	pax_close_kernel();
+
 	local_irq_restore(flags);
 	/* Could also do a CLFLUSH here to speed up CPU recovery; but
 	   that causes hangs on some VIA CPUs. */
@@ -613,36 +636,22 @@ void *__init_or_module text_poke_early(v
  */
 void *__kprobes text_poke(void *addr, const void *opcode, size_t len)
 {
-	unsigned long flags;
-	char *vaddr;
+	unsigned char *vaddr = ktla_ktva(addr);
 	struct page *pages[2];
-	int i;
+	size_t i;
 
 	if (!core_kernel_text((unsigned long)addr)) {
-		pages[0] = vmalloc_to_page(addr);
-		pages[1] = vmalloc_to_page(addr + PAGE_SIZE);
+		pages[0] = vmalloc_to_page(vaddr);
+		pages[1] = vmalloc_to_page(vaddr + PAGE_SIZE);
 	} else {
-		pages[0] = virt_to_page(addr);
+		pages[0] = virt_to_page(vaddr);
 		WARN_ON(!PageReserved(pages[0]));
-		pages[1] = virt_to_page(addr + PAGE_SIZE);
+		pages[1] = virt_to_page(vaddr + PAGE_SIZE);
 	}
 	BUG_ON(!pages[0]);
-	local_irq_save(flags);
-	set_fixmap(FIX_TEXT_POKE0, page_to_phys(pages[0]));
-	if (pages[1])
-		set_fixmap(FIX_TEXT_POKE1, page_to_phys(pages[1]));
-	vaddr = (char *)fix_to_virt(FIX_TEXT_POKE0);
-	memcpy(&vaddr[(unsigned long)addr & ~PAGE_MASK], opcode, len);
-	clear_fixmap(FIX_TEXT_POKE0);
-	if (pages[1])
-		clear_fixmap(FIX_TEXT_POKE1);
-	local_flush_tlb();
-	sync_core();
-	/* Could also do a CLFLUSH here to speed up CPU recovery; but
-	   that causes hangs on some VIA CPUs. */
+	text_poke_early(addr, opcode, len);
 	for (i = 0; i < len; i++)
-		BUG_ON(((char *)addr)[i] != ((char *)opcode)[i]);
-	local_irq_restore(flags);
+		BUG_ON((vaddr)[i] != ((const unsigned char *)opcode)[i]);
 	return addr;
 }
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/apic/apic.c linux-3.3.8-pax/arch/x86/kernel/apic/apic.c
--- linux-3.3.8/arch/x86/kernel/apic/apic.c	2012-05-07 20:26:55.995609319 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/apic/apic.c	2012-05-07 20:27:02.043608996 +0200
@@ -184,7 +184,7 @@ int first_system_vector = 0xfe;
 /*
  * Debug level, exported for io_apic.c
  */
-unsigned int apic_verbosity;
+int apic_verbosity;
 
 int pic_mode;
 
@@ -1912,7 +1912,7 @@ void smp_error_interrupt(struct pt_regs
 	apic_write(APIC_ESR, 0);
 	v1 = apic_read(APIC_ESR);
 	ack_APIC_irq();
-	atomic_inc(&irq_err_count);
+	atomic_inc_unchecked(&irq_err_count);
 
 	apic_printk(APIC_DEBUG, KERN_DEBUG "APIC error on CPU%d: %02x(%02x)",
 		    smp_processor_id(), v0 , v1);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/apic/io_apic.c linux-3.3.8-pax/arch/x86/kernel/apic/io_apic.c
--- linux-3.3.8/arch/x86/kernel/apic/io_apic.c	2012-04-15 15:08:28.914606209 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/apic/io_apic.c	2012-04-15 15:08:34.526605576 +0200
@@ -1096,7 +1096,7 @@ int IO_APIC_get_PCI_irq_vector(int bus,
 }
 EXPORT_SYMBOL(IO_APIC_get_PCI_irq_vector);
 
-void lock_vector_lock(void)
+void lock_vector_lock(void) __acquires(vector_lock)
 {
 	/* Used to the online set of cpus does not change
 	 * during assign_irq_vector.
@@ -1104,7 +1104,7 @@ void lock_vector_lock(void)
 	raw_spin_lock(&vector_lock);
 }
 
-void unlock_vector_lock(void)
+void unlock_vector_lock(void) __releases(vector_lock)
 {
 	raw_spin_unlock(&vector_lock);
 }
@@ -2510,7 +2510,7 @@ static void ack_apic_edge(struct irq_dat
 	ack_APIC_irq();
 }
 
-atomic_t irq_mis_count;
+atomic_unchecked_t irq_mis_count;
 
 static void ack_apic_level(struct irq_data *data)
 {
@@ -2576,7 +2576,7 @@ static void ack_apic_level(struct irq_da
 	 * at the cpu.
 	 */
 	if (!(v & (1 << (i & 0x1f)))) {
-		atomic_inc(&irq_mis_count);
+		atomic_inc_unchecked(&irq_mis_count);
 
 		eoi_ioapic_irq(irq, cfg);
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/apm_32.c linux-3.3.8-pax/arch/x86/kernel/apm_32.c
--- linux-3.3.8/arch/x86/kernel/apm_32.c	2012-03-19 10:38:56.508050001 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/apm_32.c	2012-03-19 10:43:43.144034697 +0100
@@ -411,7 +411,7 @@ static DEFINE_MUTEX(apm_mutex);
  * This is for buggy BIOS's that refer to (real mode) segment 0x40
  * even though they are called in protected mode.
  */
-static struct desc_struct bad_bios_desc = GDT_ENTRY_INIT(0x4092,
+static const struct desc_struct bad_bios_desc = GDT_ENTRY_INIT(0x4093,
 			(unsigned long)__va(0x400UL), PAGE_SIZE - 0x400 - 1);
 
 static const char driver_version[] = "1.16ac";	/* no spaces */
@@ -589,7 +589,10 @@ static long __apm_bios_call(void *_call)
 	BUG_ON(cpu != 0);
 	gdt = get_cpu_gdt_table(cpu);
 	save_desc_40 = gdt[0x40 / 8];
+
+	pax_open_kernel();
 	gdt[0x40 / 8] = bad_bios_desc;
+	pax_close_kernel();
 
 	apm_irq_save(flags);
 	APM_DO_SAVE_SEGS;
@@ -598,7 +601,11 @@ static long __apm_bios_call(void *_call)
 			  &call->esi);
 	APM_DO_RESTORE_SEGS;
 	apm_irq_restore(flags);
+
+	pax_open_kernel();
 	gdt[0x40 / 8] = save_desc_40;
+	pax_close_kernel();
+
 	put_cpu();
 
 	return call->eax & 0xff;
@@ -665,7 +672,10 @@ static long __apm_bios_call_simple(void
 	BUG_ON(cpu != 0);
 	gdt = get_cpu_gdt_table(cpu);
 	save_desc_40 = gdt[0x40 / 8];
+
+	pax_open_kernel();
 	gdt[0x40 / 8] = bad_bios_desc;
+	pax_close_kernel();
 
 	apm_irq_save(flags);
 	APM_DO_SAVE_SEGS;
@@ -673,7 +683,11 @@ static long __apm_bios_call_simple(void
 					 &call->eax);
 	APM_DO_RESTORE_SEGS;
 	apm_irq_restore(flags);
+
+	pax_open_kernel();
 	gdt[0x40 / 8] = save_desc_40;
+	pax_close_kernel();
+
 	put_cpu();
 	return error;
 }
@@ -2347,12 +2361,15 @@ static int __init apm_init(void)
 	 * code to that CPU.
 	 */
 	gdt = get_cpu_gdt_table(0);
+
+	pax_open_kernel();
 	set_desc_base(&gdt[APM_CS >> 3],
 		 (unsigned long)__va((unsigned long)apm_info.bios.cseg << 4));
 	set_desc_base(&gdt[APM_CS_16 >> 3],
 		 (unsigned long)__va((unsigned long)apm_info.bios.cseg_16 << 4));
 	set_desc_base(&gdt[APM_DS >> 3],
 		 (unsigned long)__va((unsigned long)apm_info.bios.dseg << 4));
+	pax_close_kernel();
 
 	proc_create("apm", 0, NULL, &apm_file_ops);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/asm-offsets_64.c linux-3.3.8-pax/arch/x86/kernel/asm-offsets_64.c
--- linux-3.3.8/arch/x86/kernel/asm-offsets_64.c	2012-03-19 10:38:56.512050001 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/asm-offsets_64.c	2012-03-19 10:43:43.152034696 +0100
@@ -70,6 +70,7 @@ int main(void)
 	BLANK();
 #undef ENTRY
 
+	DEFINE(TSS_size, sizeof(struct tss_struct));
 	OFFSET(TSS_ist, tss_struct, x86_tss.ist);
 	BLANK();
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/asm-offsets.c linux-3.3.8-pax/arch/x86/kernel/asm-offsets.c
--- linux-3.3.8/arch/x86/kernel/asm-offsets.c	2012-03-19 10:38:56.508050001 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/asm-offsets.c	2012-03-19 10:43:43.152034697 +0100
@@ -33,6 +33,8 @@ void common(void) {
 	OFFSET(TI_status, thread_info, status);
 	OFFSET(TI_addr_limit, thread_info, addr_limit);
 	OFFSET(TI_preempt_count, thread_info, preempt_count);
+	OFFSET(TI_lowest_stack, thread_info, lowest_stack);
+	DEFINE(TI_task_thread_sp0, offsetof(struct task_struct, thread.sp0) - offsetof(struct task_struct, tinfo));
 
 	BLANK();
 	OFFSET(crypto_tfm_ctx_offset, crypto_tfm, __crt_ctx);
@@ -53,8 +55,26 @@ void common(void) {
 	OFFSET(PV_CPU_irq_enable_sysexit, pv_cpu_ops, irq_enable_sysexit);
 	OFFSET(PV_CPU_read_cr0, pv_cpu_ops, read_cr0);
 	OFFSET(PV_MMU_read_cr2, pv_mmu_ops, read_cr2);
+
+#ifdef CONFIG_PAX_KERNEXEC
+	OFFSET(PV_CPU_write_cr0, pv_cpu_ops, write_cr0);
+#endif
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	OFFSET(PV_MMU_read_cr3, pv_mmu_ops, read_cr3);
+	OFFSET(PV_MMU_write_cr3, pv_mmu_ops, write_cr3);
+#ifdef CONFIG_X86_64
+	OFFSET(PV_MMU_set_pgd_batched, pv_mmu_ops, set_pgd_batched);
+#endif
 #endif
 
+#endif
+
+	BLANK();
+	DEFINE(PAGE_SIZE_asm, PAGE_SIZE);
+	DEFINE(PAGE_SHIFT_asm, PAGE_SHIFT);
+	DEFINE(THREAD_SIZE_asm, THREAD_SIZE);
+
 #ifdef CONFIG_XEN
 	BLANK();
 	OFFSET(XEN_vcpu_info_mask, vcpu_info, evtchn_upcall_mask);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/cpu/amd.c linux-3.3.8-pax/arch/x86/kernel/cpu/amd.c
--- linux-3.3.8/arch/x86/kernel/cpu/amd.c	2012-05-07 20:26:55.995609319 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/cpu/amd.c	2012-05-07 20:27:02.043608996 +0200
@@ -670,7 +670,7 @@ static unsigned int __cpuinit amd_size_c
 							unsigned int size)
 {
 	/* AMD errata T13 (order #21922) */
-	if ((c->x86 == 6)) {
+	if (c->x86 == 6) {
 		/* Duron Rev A0 */
 		if (c->x86_model == 3 && c->x86_mask == 0)
 			size = 64;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/cpu/common.c linux-3.3.8-pax/arch/x86/kernel/cpu/common.c
--- linux-3.3.8/arch/x86/kernel/cpu/common.c	2012-05-07 20:26:55.999609319 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/cpu/common.c	2012-05-07 20:27:02.047608995 +0200
@@ -84,60 +84,6 @@ static const struct cpu_dev __cpuinitcon
 
 static const struct cpu_dev *this_cpu __cpuinitdata = &default_cpu;
 
-DEFINE_PER_CPU_PAGE_ALIGNED(struct gdt_page, gdt_page) = { .gdt = {
-#ifdef CONFIG_X86_64
-	/*
-	 * We need valid kernel segments for data and code in long mode too
-	 * IRET will check the segment types  kkeil 2000/10/28
-	 * Also sysret mandates a special GDT layout
-	 *
-	 * TLS descriptors are currently at a different place compared to i386.
-	 * Hopefully nobody expects them at a fixed place (Wine?)
-	 */
-	[GDT_ENTRY_KERNEL32_CS]		= GDT_ENTRY_INIT(0xc09b, 0, 0xfffff),
-	[GDT_ENTRY_KERNEL_CS]		= GDT_ENTRY_INIT(0xa09b, 0, 0xfffff),
-	[GDT_ENTRY_KERNEL_DS]		= GDT_ENTRY_INIT(0xc093, 0, 0xfffff),
-	[GDT_ENTRY_DEFAULT_USER32_CS]	= GDT_ENTRY_INIT(0xc0fb, 0, 0xfffff),
-	[GDT_ENTRY_DEFAULT_USER_DS]	= GDT_ENTRY_INIT(0xc0f3, 0, 0xfffff),
-	[GDT_ENTRY_DEFAULT_USER_CS]	= GDT_ENTRY_INIT(0xa0fb, 0, 0xfffff),
-#else
-	[GDT_ENTRY_KERNEL_CS]		= GDT_ENTRY_INIT(0xc09a, 0, 0xfffff),
-	[GDT_ENTRY_KERNEL_DS]		= GDT_ENTRY_INIT(0xc092, 0, 0xfffff),
-	[GDT_ENTRY_DEFAULT_USER_CS]	= GDT_ENTRY_INIT(0xc0fa, 0, 0xfffff),
-	[GDT_ENTRY_DEFAULT_USER_DS]	= GDT_ENTRY_INIT(0xc0f2, 0, 0xfffff),
-	/*
-	 * Segments used for calling PnP BIOS have byte granularity.
-	 * They code segments and data segments have fixed 64k limits,
-	 * the transfer segment sizes are set at run time.
-	 */
-	/* 32-bit code */
-	[GDT_ENTRY_PNPBIOS_CS32]	= GDT_ENTRY_INIT(0x409a, 0, 0xffff),
-	/* 16-bit code */
-	[GDT_ENTRY_PNPBIOS_CS16]	= GDT_ENTRY_INIT(0x009a, 0, 0xffff),
-	/* 16-bit data */
-	[GDT_ENTRY_PNPBIOS_DS]		= GDT_ENTRY_INIT(0x0092, 0, 0xffff),
-	/* 16-bit data */
-	[GDT_ENTRY_PNPBIOS_TS1]		= GDT_ENTRY_INIT(0x0092, 0, 0),
-	/* 16-bit data */
-	[GDT_ENTRY_PNPBIOS_TS2]		= GDT_ENTRY_INIT(0x0092, 0, 0),
-	/*
-	 * The APM segments have byte granularity and their bases
-	 * are set at run time.  All have 64k limits.
-	 */
-	/* 32-bit code */
-	[GDT_ENTRY_APMBIOS_BASE]	= GDT_ENTRY_INIT(0x409a, 0, 0xffff),
-	/* 16-bit code */
-	[GDT_ENTRY_APMBIOS_BASE+1]	= GDT_ENTRY_INIT(0x009a, 0, 0xffff),
-	/* data */
-	[GDT_ENTRY_APMBIOS_BASE+2]	= GDT_ENTRY_INIT(0x4092, 0, 0xffff),
-
-	[GDT_ENTRY_ESPFIX_SS]		= GDT_ENTRY_INIT(0xc092, 0, 0xfffff),
-	[GDT_ENTRY_PERCPU]		= GDT_ENTRY_INIT(0xc092, 0, 0xfffff),
-	GDT_STACK_CANARY_INIT
-#endif
-} };
-EXPORT_PER_CPU_SYMBOL_GPL(gdt_page);
-
 static int __init x86_xsave_setup(char *s)
 {
 	setup_clear_cpu_cap(X86_FEATURE_XSAVE);
@@ -372,7 +318,7 @@ void switch_to_new_gdt(int cpu)
 {
 	struct desc_ptr gdt_descr;
 
-	gdt_descr.address = (long)get_cpu_gdt_table(cpu);
+	gdt_descr.address = (unsigned long)get_cpu_gdt_table(cpu);
 	gdt_descr.size = GDT_SIZE - 1;
 	load_gdt(&gdt_descr);
 	/* Reload the per-cpu base */
@@ -839,6 +785,10 @@ static void __cpuinit identify_cpu(struc
 	/* Filter out anything that depends on CPUID levels we don't have */
 	filter_cpuid_features(c, true);
 
+#if defined(CONFIG_X86_32) && (defined(CONFIG_PAX_SEGMEXEC) || defined(CONFIG_PAX_KERNEXEC) || defined(CONFIG_PAX_MEMORY_UDEREF))
+	setup_clear_cpu_cap(X86_FEATURE_SEP);
+#endif
+
 	/* If the model name is still unset, do table lookup. */
 	if (!c->x86_model_id[0]) {
 		const char *p;
@@ -1019,10 +969,12 @@ static __init int setup_disablecpuid(cha
 }
 __setup("clearcpuid=", setup_disablecpuid);
 
+DEFINE_PER_CPU(struct thread_info *, current_tinfo) = &init_task.tinfo;
+EXPORT_PER_CPU_SYMBOL(current_tinfo);
+
 #ifdef CONFIG_X86_64
 struct desc_ptr idt_descr = { NR_VECTORS * 16 - 1, (unsigned long) idt_table };
-struct desc_ptr nmi_idt_descr = { NR_VECTORS * 16 - 1,
-				    (unsigned long) nmi_idt_table };
+struct desc_ptr nmi_idt_descr = { NR_VECTORS * 16 - 1, (unsigned long) nmi_idt_table };
 
 DEFINE_PER_CPU_FIRST(union irq_stack_union,
 		     irq_stack_union) __aligned(PAGE_SIZE);
@@ -1036,7 +988,7 @@ DEFINE_PER_CPU(struct task_struct *, cur
 EXPORT_PER_CPU_SYMBOL(current_task);
 
 DEFINE_PER_CPU(unsigned long, kernel_stack) =
-	(unsigned long)&init_thread_union - KERNEL_STACK_OFFSET + THREAD_SIZE;
+	(unsigned long)&init_thread_union - 16 + THREAD_SIZE;
 EXPORT_PER_CPU_SYMBOL(kernel_stack);
 
 DEFINE_PER_CPU(char *, irq_stack_ptr) =
@@ -1126,7 +1078,7 @@ struct pt_regs * __cpuinit idle_regs(str
 {
 	memset(regs, 0, sizeof(struct pt_regs));
 	regs->fs = __KERNEL_PERCPU;
-	regs->gs = __KERNEL_STACK_CANARY;
+	savesegment(gs, regs->gs);
 
 	return regs;
 }
@@ -1181,7 +1133,7 @@ void __cpuinit cpu_init(void)
 	int i;
 
 	cpu = stack_smp_processor_id();
-	t = &per_cpu(init_tss, cpu);
+	t = init_tss + cpu;
 	oist = &per_cpu(orig_ist, cpu);
 
 #ifdef CONFIG_NUMA
@@ -1207,7 +1159,7 @@ void __cpuinit cpu_init(void)
 	switch_to_new_gdt(cpu);
 	loadsegment(fs, 0);
 
-	load_idt((const struct desc_ptr *)&idt_descr);
+	load_idt(&idt_descr);
 
 	memset(me->thread.tls_array, 0, GDT_ENTRY_TLS_ENTRIES * 8);
 	syscall_init();
@@ -1216,7 +1168,6 @@ void __cpuinit cpu_init(void)
 	wrmsrl(MSR_KERNEL_GS_BASE, 0);
 	barrier();
 
-	x86_configure_nx();
 	if (cpu != 0)
 		enable_x2apic();
 
@@ -1272,7 +1223,7 @@ void __cpuinit cpu_init(void)
 {
 	int cpu = smp_processor_id();
 	struct task_struct *curr = current;
-	struct tss_struct *t = &per_cpu(init_tss, cpu);
+	struct tss_struct *t = init_tss + cpu;
 	struct thread_struct *thread = &curr->thread;
 
 	if (cpumask_test_and_set_cpu(cpu, cpu_initialized_mask)) {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/cpu/intel.c linux-3.3.8-pax/arch/x86/kernel/cpu/intel.c
--- linux-3.3.8/arch/x86/kernel/cpu/intel.c	2012-03-19 10:38:56.516050001 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/cpu/intel.c	2012-03-19 10:43:43.156034696 +0100
@@ -174,7 +174,7 @@ static void __cpuinit trap_init_f00f_bug
 	 * Update the IDT descriptor and reload the IDT so that
 	 * it uses the read-only mapped virtual address.
 	 */
-	idt_descr.address = fix_to_virt(FIX_F00F_IDT);
+	idt_descr.address = (struct desc_struct *)fix_to_virt(FIX_F00F_IDT);
 	load_idt(&idt_descr);
 }
 #endif
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/cpu/Makefile linux-3.3.8-pax/arch/x86/kernel/cpu/Makefile
--- linux-3.3.8/arch/x86/kernel/cpu/Makefile	2012-01-08 19:47:49.319472995 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/cpu/Makefile	2012-03-19 10:43:43.156034696 +0100
@@ -8,10 +8,6 @@ CFLAGS_REMOVE_common.o = -pg
 CFLAGS_REMOVE_perf_event.o = -pg
 endif
 
-# Make sure load_percpu_segment has no stackprotector
-nostackp := $(call cc-option, -fno-stack-protector)
-CFLAGS_common.o		:= $(nostackp)
-
 obj-y			:= intel_cacheinfo.o scattered.o topology.o
 obj-y			+= proc.o capflags.o powerflags.o common.o
 obj-y			+= vmware.o hypervisor.o sched.o mshyperv.o
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/cpu/mcheck/mce.c linux-3.3.8-pax/arch/x86/kernel/cpu/mcheck/mce.c
--- linux-3.3.8/arch/x86/kernel/cpu/mcheck/mce.c	2012-06-11 19:36:39.724445780 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/cpu/mcheck/mce.c	2012-06-11 19:36:46.128446126 +0200
@@ -42,6 +42,7 @@
 #include <asm/processor.h>
 #include <asm/mce.h>
 #include <asm/msr.h>
+#include <asm/local.h>
 
 #include "mce-internal.h"
 
@@ -250,7 +251,7 @@ static void print_mce(struct mce *m)
 			!(m->mcgstatus & MCG_STATUS_EIPV) ? " !INEXACT!" : "",
 				m->cs, m->ip);
 
-		if (m->cs == __KERNEL_CS)
+		if (m->cs == __KERNEL_CS || m->cs == __KERNEXEC_KERNEL_CS)
 			print_symbol("{%s}", m->ip);
 		pr_cont("\n");
 	}
@@ -283,10 +284,10 @@ static void print_mce(struct mce *m)
 
 #define PANIC_TIMEOUT 5 /* 5 seconds */
 
-static atomic_t mce_paniced;
+static atomic_unchecked_t mce_paniced;
 
 static int fake_panic;
-static atomic_t mce_fake_paniced;
+static atomic_unchecked_t mce_fake_paniced;
 
 /* Panic in progress. Enable interrupts and wait for final IPI */
 static void wait_for_panic(void)
@@ -310,7 +311,7 @@ static void mce_panic(char *msg, struct
 		/*
 		 * Make sure only one CPU runs in machine check panic
 		 */
-		if (atomic_inc_return(&mce_paniced) > 1)
+		if (atomic_inc_return_unchecked(&mce_paniced) > 1)
 			wait_for_panic();
 		barrier();
 
@@ -318,7 +319,7 @@ static void mce_panic(char *msg, struct
 		console_verbose();
 	} else {
 		/* Don't log too much for fake panic */
-		if (atomic_inc_return(&mce_fake_paniced) > 1)
+		if (atomic_inc_return_unchecked(&mce_fake_paniced) > 1)
 			return;
 	}
 	/* First print corrected ones that are still unlogged */
@@ -666,7 +667,7 @@ static int mce_timed_out(u64 *t)
 	 * might have been modified by someone else.
 	 */
 	rmb();
-	if (atomic_read(&mce_paniced))
+	if (atomic_read_unchecked(&mce_paniced))
 		wait_for_panic();
 	if (!monarch_timeout)
 		goto out;
@@ -1454,7 +1455,7 @@ static void unexpected_machine_check(str
 }
 
 /* Call the installed machine check handler for this CPU setup. */
-void (*machine_check_vector)(struct pt_regs *, long error_code) =
+void (*machine_check_vector)(struct pt_regs *, long error_code) __read_only =
 						unexpected_machine_check;
 
 /*
@@ -1477,7 +1478,9 @@ void __cpuinit mcheck_cpu_init(struct cp
 		return;
 	}
 
+	pax_open_kernel();
 	machine_check_vector = do_machine_check;
+	pax_close_kernel();
 
 	__mcheck_cpu_init_generic();
 	__mcheck_cpu_init_vendor(c);
@@ -1491,7 +1494,7 @@ void __cpuinit mcheck_cpu_init(struct cp
  */
 
 static DEFINE_SPINLOCK(mce_chrdev_state_lock);
-static int mce_chrdev_open_count;	/* #times opened */
+static local_t mce_chrdev_open_count;	/* #times opened */
 static int mce_chrdev_open_exclu;	/* already open exclusive? */
 
 static int mce_chrdev_open(struct inode *inode, struct file *file)
@@ -1499,7 +1502,7 @@ static int mce_chrdev_open(struct inode
 	spin_lock(&mce_chrdev_state_lock);
 
 	if (mce_chrdev_open_exclu ||
-	    (mce_chrdev_open_count && (file->f_flags & O_EXCL))) {
+	    (local_read(&mce_chrdev_open_count) && (file->f_flags & O_EXCL))) {
 		spin_unlock(&mce_chrdev_state_lock);
 
 		return -EBUSY;
@@ -1507,7 +1510,7 @@ static int mce_chrdev_open(struct inode
 
 	if (file->f_flags & O_EXCL)
 		mce_chrdev_open_exclu = 1;
-	mce_chrdev_open_count++;
+	local_inc(&mce_chrdev_open_count);
 
 	spin_unlock(&mce_chrdev_state_lock);
 
@@ -1518,7 +1521,7 @@ static int mce_chrdev_release(struct ino
 {
 	spin_lock(&mce_chrdev_state_lock);
 
-	mce_chrdev_open_count--;
+	local_dec(&mce_chrdev_open_count);
 	mce_chrdev_open_exclu = 0;
 
 	spin_unlock(&mce_chrdev_state_lock);
@@ -2237,7 +2240,7 @@ struct dentry *mce_get_debugfs_dir(void)
 static void mce_reset(void)
 {
 	cpu_missing = 0;
-	atomic_set(&mce_fake_paniced, 0);
+	atomic_set_unchecked(&mce_fake_paniced, 0);
 	atomic_set(&mce_executing, 0);
 	atomic_set(&mce_callin, 0);
 	atomic_set(&global_nwo, 0);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/cpu/mcheck/p5.c linux-3.3.8-pax/arch/x86/kernel/cpu/mcheck/p5.c
--- linux-3.3.8/arch/x86/kernel/cpu/mcheck/p5.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/cpu/mcheck/p5.c	2012-03-19 10:43:43.160034696 +0100
@@ -12,6 +12,7 @@
 #include <asm/system.h>
 #include <asm/mce.h>
 #include <asm/msr.h>
+#include <asm/pgtable.h>
 
 /* By default disabled */
 int mce_p5_enabled __read_mostly;
@@ -50,7 +51,9 @@ void intel_p5_mcheck_init(struct cpuinfo
 	if (!cpu_has(c, X86_FEATURE_MCE))
 		return;
 
+	pax_open_kernel();
 	machine_check_vector = pentium_machine_check;
+	pax_close_kernel();
 	/* Make sure the vector pointer is visible before we enable MCEs: */
 	wmb();
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/cpu/mcheck/winchip.c linux-3.3.8-pax/arch/x86/kernel/cpu/mcheck/winchip.c
--- linux-3.3.8/arch/x86/kernel/cpu/mcheck/winchip.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/cpu/mcheck/winchip.c	2012-03-19 10:43:43.160034696 +0100
@@ -11,6 +11,7 @@
 #include <asm/system.h>
 #include <asm/mce.h>
 #include <asm/msr.h>
+#include <asm/pgtable.h>
 
 /* Machine check handler for WinChip C6: */
 static void winchip_machine_check(struct pt_regs *regs, long error_code)
@@ -24,7 +25,9 @@ void winchip_mcheck_init(struct cpuinfo_
 {
 	u32 lo, hi;
 
+	pax_open_kernel();
 	machine_check_vector = winchip_machine_check;
+	pax_close_kernel();
 	/* Make sure the vector pointer is visible before we enable MCEs: */
 	wmb();
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/cpu/mtrr/main.c linux-3.3.8-pax/arch/x86/kernel/cpu/mtrr/main.c
--- linux-3.3.8/arch/x86/kernel/cpu/mtrr/main.c	2011-10-24 12:48:26.227091775 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/cpu/mtrr/main.c	2012-03-19 10:43:43.160034696 +0100
@@ -62,7 +62,7 @@ static DEFINE_MUTEX(mtrr_mutex);
 u64 size_or_mask, size_and_mask;
 static bool mtrr_aps_delayed_init;
 
-static const struct mtrr_ops *mtrr_ops[X86_VENDOR_NUM];
+static const struct mtrr_ops *mtrr_ops[X86_VENDOR_NUM] __read_only;
 
 const struct mtrr_ops *mtrr_if;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/cpu/mtrr/mtrr.h linux-3.3.8-pax/arch/x86/kernel/cpu/mtrr/mtrr.h
--- linux-3.3.8/arch/x86/kernel/cpu/mtrr/mtrr.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/cpu/mtrr/mtrr.h	2012-03-19 10:43:43.164034696 +0100
@@ -25,7 +25,7 @@ struct mtrr_ops {
 	int	(*validate_add_page)(unsigned long base, unsigned long size,
 				     unsigned int type);
 	int	(*have_wrcomb)(void);
-};
+} __do_const;
 
 extern int generic_get_free_region(unsigned long base, unsigned long size,
 				   int replace_reg);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/cpu/perf_event.c linux-3.3.8-pax/arch/x86/kernel/cpu/perf_event.c
--- linux-3.3.8/arch/x86/kernel/cpu/perf_event.c	2012-03-19 10:38:56.524050000 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/cpu/perf_event.c	2012-03-19 10:43:43.164034696 +0100
@@ -1665,7 +1665,7 @@ perf_callchain_user(struct perf_callchai
 			break;
 
 		perf_callchain_store(entry, frame.return_address);
-		fp = frame.next_frame;
+		fp = (const void __force_user *)frame.next_frame;
 	}
 }
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/crash.c linux-3.3.8-pax/arch/x86/kernel/crash.c
--- linux-3.3.8/arch/x86/kernel/crash.c	2012-01-08 19:47:49.395472991 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/crash.c	2012-03-19 10:43:43.164034696 +0100
@@ -36,10 +36,8 @@ static void kdump_nmi_callback(int cpu,
 {
 #ifdef CONFIG_X86_32
 	struct pt_regs fixed_regs;
-#endif
 
-#ifdef CONFIG_X86_32
-	if (!user_mode_vm(regs)) {
+	if (!user_mode(regs)) {
 		crash_fixup_ss_esp(&fixed_regs, regs);
 		regs = &fixed_regs;
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/doublefault_32.c linux-3.3.8-pax/arch/x86/kernel/doublefault_32.c
--- linux-3.3.8/arch/x86/kernel/doublefault_32.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/doublefault_32.c	2012-03-19 10:43:43.164034696 +0100
@@ -11,7 +11,7 @@
 
 #define DOUBLEFAULT_STACKSIZE (1024)
 static unsigned long doublefault_stack[DOUBLEFAULT_STACKSIZE];
-#define STACK_START (unsigned long)(doublefault_stack+DOUBLEFAULT_STACKSIZE)
+#define STACK_START (unsigned long)(doublefault_stack+DOUBLEFAULT_STACKSIZE-2)
 
 #define ptr_ok(x) ((x) > PAGE_OFFSET && (x) < PAGE_OFFSET + MAXMEM)
 
@@ -21,7 +21,7 @@ static void doublefault_fn(void)
 	unsigned long gdt, tss;
 
 	store_gdt(&gdt_desc);
-	gdt = gdt_desc.address;
+	gdt = (unsigned long)gdt_desc.address;
 
 	printk(KERN_EMERG "PANIC: double fault, gdt at %08lx [%d bytes]\n", gdt, gdt_desc.size);
 
@@ -58,10 +58,10 @@ struct tss_struct doublefault_tss __cach
 		/* 0x2 bit is always set */
 		.flags		= X86_EFLAGS_SF | 0x2,
 		.sp		= STACK_START,
-		.es		= __USER_DS,
+		.es		= __KERNEL_DS,
 		.cs		= __KERNEL_CS,
 		.ss		= __KERNEL_DS,
-		.ds		= __USER_DS,
+		.ds		= __KERNEL_DS,
 		.fs		= __KERNEL_PERCPU,
 
 		.__cr3		= __pa_nodebug(swapper_pg_dir),
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/dumpstack_32.c linux-3.3.8-pax/arch/x86/kernel/dumpstack_32.c
--- linux-3.3.8/arch/x86/kernel/dumpstack_32.c	2012-01-08 19:47:49.399472991 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/dumpstack_32.c	2012-03-19 10:43:43.164034696 +0100
@@ -38,15 +38,13 @@ void dump_trace(struct task_struct *task
 		bp = stack_frame(task, regs);
 
 	for (;;) {
-		struct thread_info *context;
+		void *stack_start = (void *)((unsigned long)stack & ~(THREAD_SIZE-1));
 
-		context = (struct thread_info *)
-			((unsigned long)stack & (~(THREAD_SIZE - 1)));
-		bp = ops->walk_stack(context, stack, bp, ops, data, NULL, &graph);
+		bp = ops->walk_stack(task, stack_start, stack, bp, ops, data, NULL, &graph);
 
-		stack = (unsigned long *)context->previous_esp;
-		if (!stack)
+		if (stack_start == task_stack_page(task))
 			break;
+		stack = *(unsigned long **)stack_start;
 		if (ops->stack(data, "IRQ") < 0)
 			break;
 		touch_nmi_watchdog();
@@ -96,21 +94,22 @@ void show_registers(struct pt_regs *regs
 	 * When in-kernel, we also print out the stack and code at the
 	 * time of the fault..
 	 */
-	if (!user_mode_vm(regs)) {
+	if (!user_mode(regs)) {
 		unsigned int code_prologue = code_bytes * 43 / 64;
 		unsigned int code_len = code_bytes;
 		unsigned char c;
 		u8 *ip;
+		unsigned long cs_base = get_desc_base(&get_cpu_gdt_table(smp_processor_id())[(0xffff & regs->cs) >> 3]);
 
 		printk(KERN_EMERG "Stack:\n");
 		show_stack_log_lvl(NULL, regs, &regs->sp, 0, KERN_EMERG);
 
 		printk(KERN_EMERG "Code: ");
 
-		ip = (u8 *)regs->ip - code_prologue;
+		ip = (u8 *)regs->ip - code_prologue + cs_base;
 		if (ip < (u8 *)PAGE_OFFSET || probe_kernel_address(ip, c)) {
 			/* try starting at IP */
-			ip = (u8 *)regs->ip;
+			ip = (u8 *)regs->ip + cs_base;
 			code_len = code_len - code_prologue + 1;
 		}
 		for (i = 0; i < code_len; i++, ip++) {
@@ -119,7 +118,7 @@ void show_registers(struct pt_regs *regs
 				printk(KERN_CONT " Bad EIP value.");
 				break;
 			}
-			if (ip == (u8 *)regs->ip)
+			if (ip == (u8 *)regs->ip + cs_base)
 				printk(KERN_CONT "<%02x> ", c);
 			else
 				printk(KERN_CONT "%02x ", c);
@@ -132,6 +131,7 @@ int is_valid_bugaddr(unsigned long ip)
 {
 	unsigned short ud2;
 
+	ip = ktla_ktva(ip);
 	if (ip < PAGE_OFFSET)
 		return 0;
 	if (probe_kernel_address((unsigned short *)ip, ud2))
@@ -139,3 +139,15 @@ int is_valid_bugaddr(unsigned long ip)
 
 	return ud2 == 0x0b0f;
 }
+
+#ifdef CONFIG_PAX_MEMORY_STACKLEAK
+void pax_check_alloca(unsigned long size)
+{
+	unsigned long sp = (unsigned long)&sp, stack_left;
+
+	/* all kernel stacks are of the same size */
+	stack_left = sp & (THREAD_SIZE - 1);
+	BUG_ON(stack_left < 256 || size >= stack_left - 256);
+}
+EXPORT_SYMBOL(pax_check_alloca);
+#endif
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/dumpstack_64.c linux-3.3.8-pax/arch/x86/kernel/dumpstack_64.c
--- linux-3.3.8/arch/x86/kernel/dumpstack_64.c	2012-03-19 10:38:56.536050000 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/dumpstack_64.c	2012-05-24 00:17:40.351936927 +0200
@@ -119,9 +119,9 @@ void dump_trace(struct task_struct *task
 	unsigned long *irq_stack_end =
 		(unsigned long *)per_cpu(irq_stack_ptr, cpu);
 	unsigned used = 0;
-	struct thread_info *tinfo;
 	int graph = 0;
 	unsigned long dummy;
+	void *stack_start;
 
 	if (!task)
 		task = current;
@@ -142,10 +142,10 @@ void dump_trace(struct task_struct *task
 	 * current stack address. If the stacks consist of nested
 	 * exceptions
 	 */
-	tinfo = task_thread_info(task);
 	for (;;) {
 		char *id;
 		unsigned long *estack_end;
+
 		estack_end = in_exception_stack(cpu, (unsigned long)stack,
 						&used, &id);
 
@@ -153,7 +153,7 @@ void dump_trace(struct task_struct *task
 			if (ops->stack(data, id) < 0)
 				break;
 
-			bp = ops->walk_stack(tinfo, stack, bp, ops,
+			bp = ops->walk_stack(task, estack_end - EXCEPTION_STKSZ, stack, bp, ops,
 					     data, estack_end, &graph);
 			ops->stack(data, "<EOE>");
 			/*
@@ -161,6 +161,8 @@ void dump_trace(struct task_struct *task
 			 * second-to-last pointer (index -2 to end) in the
 			 * exception stack:
 			 */
+			if ((u16)estack_end[-1] != __KERNEL_DS)
+				goto out;
 			stack = (unsigned long *) estack_end[-2];
 			continue;
 		}
@@ -172,7 +174,7 @@ void dump_trace(struct task_struct *task
 			if (in_irq_stack(stack, irq_stack, irq_stack_end)) {
 				if (ops->stack(data, "IRQ") < 0)
 					break;
-				bp = ops->walk_stack(tinfo, stack, bp,
+				bp = ops->walk_stack(task, irq_stack, stack, bp,
 					ops, data, irq_stack_end, &graph);
 				/*
 				 * We link to the next stack (which would be
@@ -191,7 +193,9 @@ void dump_trace(struct task_struct *task
 	/*
 	 * This handles the process stack:
 	 */
-	bp = ops->walk_stack(tinfo, stack, bp, ops, data, NULL, &graph);
+	stack_start = (void *)((unsigned long)stack & ~(THREAD_SIZE-1));
+	bp = ops->walk_stack(task, stack_start, stack, bp, ops, data, NULL, &graph);
+out:
 	put_cpu();
 }
 EXPORT_SYMBOL(dump_trace);
@@ -305,3 +309,50 @@ int is_valid_bugaddr(unsigned long ip)
 
 	return ud2 == 0x0b0f;
 }
+
+#ifdef CONFIG_PAX_MEMORY_STACKLEAK
+void pax_check_alloca(unsigned long size)
+{
+	unsigned long sp = (unsigned long)&sp, stack_start, stack_end;
+	unsigned cpu, used;
+	char *id;
+
+	/* check the process stack first */
+	stack_start = (unsigned long)task_stack_page(current);
+	stack_end = stack_start + THREAD_SIZE;
+	if (likely(stack_start <= sp && sp < stack_end)) {
+		unsigned long stack_left = sp & (THREAD_SIZE - 1);
+		BUG_ON(stack_left < 256 || size >= stack_left - 256);
+		return;
+	}
+
+	cpu = get_cpu();
+
+	/* check the irq stacks */
+	stack_end = (unsigned long)per_cpu(irq_stack_ptr, cpu);
+	stack_start = stack_end - IRQ_STACK_SIZE;
+	if (stack_start <= sp && sp < stack_end) {
+		unsigned long stack_left = sp & (IRQ_STACK_SIZE - 1);
+		put_cpu();
+		BUG_ON(stack_left < 256 || size >= stack_left - 256);
+		return;
+	}
+
+	/* check the exception stacks */
+	used = 0;
+	stack_end = (unsigned long)in_exception_stack(cpu, sp, &used, &id);
+	stack_start = stack_end - EXCEPTION_STKSZ;
+	if (stack_end && stack_start <= sp && sp < stack_end) {
+		unsigned long stack_left = sp & (EXCEPTION_STKSZ - 1);
+		put_cpu();
+		BUG_ON(stack_left < 256 || size >= stack_left - 256);
+		return;
+	}
+
+	put_cpu();
+
+	/* unknown stack */
+	BUG();
+}
+EXPORT_SYMBOL(pax_check_alloca);
+#endif
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/dumpstack.c linux-3.3.8-pax/arch/x86/kernel/dumpstack.c
--- linux-3.3.8/arch/x86/kernel/dumpstack.c	2012-03-19 10:38:56.536050000 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/dumpstack.c	2012-05-22 23:39:20.507419441 +0200
@@ -35,9 +35,8 @@ void printk_address(unsigned long addres
 static void
 print_ftrace_graph_addr(unsigned long addr, void *data,
 			const struct stacktrace_ops *ops,
-			struct thread_info *tinfo, int *graph)
+			struct task_struct *task, int *graph)
 {
-	struct task_struct *task = tinfo->task;
 	unsigned long ret_addr;
 	int index = task->curr_ret_stack;
 
@@ -58,7 +57,7 @@ print_ftrace_graph_addr(unsigned long ad
 static inline void
 print_ftrace_graph_addr(unsigned long addr, void *data,
 			const struct stacktrace_ops *ops,
-			struct thread_info *tinfo, int *graph)
+			struct task_struct *task, int *graph)
 { }
 #endif
 
@@ -69,10 +68,8 @@ print_ftrace_graph_addr(unsigned long ad
  * severe exception (double fault, nmi, stack fault, debug, mce) hardware stack
  */
 
-static inline int valid_stack_ptr(struct thread_info *tinfo,
-			void *p, unsigned int size, void *end)
+static inline int valid_stack_ptr(void *t, void *p, unsigned int size, void *end)
 {
-	void *t = tinfo;
 	if (end) {
 		if (p < end && p >= (end-THREAD_SIZE))
 			return 1;
@@ -83,14 +80,14 @@ static inline int valid_stack_ptr(struct
 }
 
 unsigned long
-print_context_stack(struct thread_info *tinfo,
+print_context_stack(struct task_struct *task, void *stack_start,
 		unsigned long *stack, unsigned long bp,
 		const struct stacktrace_ops *ops, void *data,
 		unsigned long *end, int *graph)
 {
 	struct stack_frame *frame = (struct stack_frame *)bp;
 
-	while (valid_stack_ptr(tinfo, stack, sizeof(*stack), end)) {
+	while (valid_stack_ptr(stack_start, stack, sizeof(*stack), end)) {
 		unsigned long addr;
 
 		addr = *stack;
@@ -102,7 +99,7 @@ print_context_stack(struct thread_info *
 			} else {
 				ops->address(data, addr, 0);
 			}
-			print_ftrace_graph_addr(addr, data, ops, tinfo, graph);
+			print_ftrace_graph_addr(addr, data, ops, task, graph);
 		}
 		stack++;
 	}
@@ -111,7 +108,7 @@ print_context_stack(struct thread_info *
 EXPORT_SYMBOL_GPL(print_context_stack);
 
 unsigned long
-print_context_stack_bp(struct thread_info *tinfo,
+print_context_stack_bp(struct task_struct *task, void *stack_start,
 		       unsigned long *stack, unsigned long bp,
 		       const struct stacktrace_ops *ops, void *data,
 		       unsigned long *end, int *graph)
@@ -119,7 +116,7 @@ print_context_stack_bp(struct thread_inf
 	struct stack_frame *frame = (struct stack_frame *)bp;
 	unsigned long *ret_addr = &frame->return_address;
 
-	while (valid_stack_ptr(tinfo, ret_addr, sizeof(*ret_addr), end)) {
+	while (valid_stack_ptr(stack_start, ret_addr, sizeof(*ret_addr), end)) {
 		unsigned long addr = *ret_addr;
 
 		if (!__kernel_text_address(addr))
@@ -128,7 +125,7 @@ print_context_stack_bp(struct thread_inf
 		ops->address(data, addr, 1);
 		frame = frame->next_frame;
 		ret_addr = &frame->return_address;
-		print_ftrace_graph_addr(addr, data, ops, tinfo, graph);
+		print_ftrace_graph_addr(addr, data, ops, task, graph);
 	}
 
 	return (unsigned long)frame;
@@ -186,7 +183,7 @@ void dump_stack(void)
 
 	bp = stack_frame(current, NULL);
 	printk("Pid: %d, comm: %.20s %s %s %.*s\n",
-		current->pid, current->comm, print_tainted(),
+		task_pid_nr(current), current->comm, print_tainted(),
 		init_utsname()->release,
 		(int)strcspn(init_utsname()->version, " "),
 		init_utsname()->version);
@@ -243,7 +240,7 @@ void __kprobes oops_end(unsigned long fl
 		panic("Fatal exception in interrupt");
 	if (panic_on_oops)
 		panic("Fatal exception");
-	do_exit(signr);
+	do_group_exit(signr);
 }
 
 int __kprobes __die(const char *str, struct pt_regs *regs, long err)
@@ -270,7 +267,7 @@ int __kprobes __die(const char *str, str
 
 	show_registers(regs);
 #ifdef CONFIG_X86_32
-	if (user_mode_vm(regs)) {
+	if (user_mode(regs)) {
 		sp = regs->sp;
 		ss = regs->ss & 0xffff;
 	} else {
@@ -298,7 +295,7 @@ void die(const char *str, struct pt_regs
 	unsigned long flags = oops_begin();
 	int sig = SIGSEGV;
 
-	if (!user_mode_vm(regs))
+	if (!user_mode(regs))
 		report_bug(regs->ip, regs);
 
 	if (__die(str, regs, err))
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/early_printk.c linux-3.3.8-pax/arch/x86/kernel/early_printk.c
--- linux-3.3.8/arch/x86/kernel/early_printk.c	2012-03-19 10:38:56.540049999 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/early_printk.c	2012-03-19 10:43:43.168034696 +0100
@@ -7,6 +7,7 @@
 #include <linux/pci_regs.h>
 #include <linux/pci_ids.h>
 #include <linux/errno.h>
+#include <linux/sched.h>
 #include <asm/io.h>
 #include <asm/processor.h>
 #include <asm/fcntl.h>
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/entry_32.S linux-3.3.8-pax/arch/x86/kernel/entry_32.S
--- linux-3.3.8/arch/x86/kernel/entry_32.S	2012-04-03 22:02:49.234110200 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/entry_32.S	2012-05-11 10:36:22.291201816 +0200
@@ -179,13 +179,146 @@
 	/*CFI_REL_OFFSET gs, PT_GS*/
 .endm
 .macro SET_KERNEL_GS reg
+
+#ifdef CONFIG_CC_STACKPROTECTOR
 	movl $(__KERNEL_STACK_CANARY), \reg
+#elif defined(CONFIG_PAX_MEMORY_UDEREF)
+	movl $(__USER_DS), \reg
+#else
+	xorl \reg, \reg
+#endif
+
 	movl \reg, %gs
 .endm
 
 #endif	/* CONFIG_X86_32_LAZY_GS */
 
-.macro SAVE_ALL
+.macro pax_enter_kernel
+#ifdef CONFIG_PAX_KERNEXEC
+	call pax_enter_kernel
+#endif
+.endm
+
+.macro pax_exit_kernel
+#ifdef CONFIG_PAX_KERNEXEC
+	call pax_exit_kernel
+#endif
+.endm
+
+#ifdef CONFIG_PAX_KERNEXEC
+ENTRY(pax_enter_kernel)
+#ifdef CONFIG_PARAVIRT
+	pushl %eax
+	pushl %ecx
+	call PARA_INDIRECT(pv_cpu_ops+PV_CPU_read_cr0)
+	mov %eax, %esi
+#else
+	mov %cr0, %esi
+#endif
+	bts $16, %esi
+	jnc 1f
+	mov %cs, %esi
+	cmp $__KERNEL_CS, %esi
+	jz 3f
+	ljmp $__KERNEL_CS, $3f
+1:	ljmp $__KERNEXEC_KERNEL_CS, $2f
+2:
+#ifdef CONFIG_PARAVIRT
+	mov %esi, %eax
+	call PARA_INDIRECT(pv_cpu_ops+PV_CPU_write_cr0)
+#else
+	mov %esi, %cr0
+#endif
+3:
+#ifdef CONFIG_PARAVIRT
+	popl %ecx
+	popl %eax
+#endif
+	ret
+ENDPROC(pax_enter_kernel)
+
+ENTRY(pax_exit_kernel)
+#ifdef CONFIG_PARAVIRT
+	pushl %eax
+	pushl %ecx
+#endif
+	mov %cs, %esi
+	cmp $__KERNEXEC_KERNEL_CS, %esi
+	jnz 2f
+#ifdef CONFIG_PARAVIRT
+	call PARA_INDIRECT(pv_cpu_ops+PV_CPU_read_cr0);
+	mov %eax, %esi
+#else
+	mov %cr0, %esi
+#endif
+	btr $16, %esi
+	ljmp $__KERNEL_CS, $1f
+1:
+#ifdef CONFIG_PARAVIRT
+	mov %esi, %eax
+	call PARA_INDIRECT(pv_cpu_ops+PV_CPU_write_cr0);
+#else
+	mov %esi, %cr0
+#endif
+2:
+#ifdef CONFIG_PARAVIRT
+	popl %ecx
+	popl %eax
+#endif
+	ret
+ENDPROC(pax_exit_kernel)
+#endif
+
+.macro pax_erase_kstack
+#ifdef CONFIG_PAX_MEMORY_STACKLEAK
+	call pax_erase_kstack
+#endif
+.endm
+
+#ifdef CONFIG_PAX_MEMORY_STACKLEAK
+/*
+ * ebp: thread_info
+ * ecx, edx: can be clobbered
+ */
+ENTRY(pax_erase_kstack)
+	pushl %edi
+	pushl %eax
+
+	mov TI_lowest_stack(%ebp), %edi
+	mov $0xB4DD00D5, %eax
+	std
+
+1:	mov %edi, %ecx
+	and $THREAD_SIZE_asm - 1, %ecx
+	shr $2, %ecx
+	repne scasl
+	jecxz 2f
+
+	cmp $2*16, %ecx
+	jc 2f
+
+	mov $2*16, %ecx
+	repe scasl
+	jecxz 2f
+	jne 1b
+
+2:	cld
+	mov %esp, %ecx
+	sub %edi, %ecx
+	shr $2, %ecx
+	rep stosl
+
+	mov TI_task_thread_sp0(%ebp), %edi
+	sub $128, %edi
+	mov %edi, TI_lowest_stack(%ebp)
+
+	popl %eax
+	popl %edi
+	ret
+ENDPROC(pax_erase_kstack)
+#endif
+
+.macro __SAVE_ALL _DS
 	cld
 	PUSH_GS
 	pushl_cfi %fs
@@ -208,7 +341,7 @@
 	CFI_REL_OFFSET ecx, 0
 	pushl_cfi %ebx
 	CFI_REL_OFFSET ebx, 0
-	movl $(__USER_DS), %edx
+	movl $\_DS, %edx
 	movl %edx, %ds
 	movl %edx, %es
 	movl $(__KERNEL_PERCPU), %edx
@@ -216,6 +349,15 @@
 	SET_KERNEL_GS %edx
 .endm
 
+.macro SAVE_ALL
+#if defined(CONFIG_PAX_KERNEXEC) || defined(CONFIG_PAX_PAGEEXEC) || defined(CONFIG_PAX_SEGMEXEC) || defined(CONFIG_PAX_MEMORY_UDEREF)
+	__SAVE_ALL __KERNEL_DS
+	pax_enter_kernel
+#else
+	__SAVE_ALL __USER_DS
+#endif
+.endm
+
 .macro RESTORE_INT_REGS
 	popl_cfi %ebx
 	CFI_RESTORE ebx
@@ -301,7 +443,7 @@ ENTRY(ret_from_fork)
 	popfl_cfi
 	jmp syscall_exit
 	CFI_ENDPROC
-END(ret_from_fork)
+ENDPROC(ret_from_fork)
 
 /*
  * Interrupt exit functions should be protected against kprobes
@@ -335,7 +477,15 @@ resume_userspace_sig:
 	andl $SEGMENT_RPL_MASK, %eax
 #endif
 	cmpl $USER_RPL, %eax
+
+#ifdef CONFIG_PAX_KERNEXEC
+	jae resume_userspace
+
+	pax_exit_kernel
+	jmp resume_kernel
+#else
 	jb resume_kernel		# not returning to v8086 or userspace
+#endif
 
 ENTRY(resume_userspace)
 	LOCKDEP_SYS_EXIT
@@ -347,8 +497,8 @@ ENTRY(resume_userspace)
 	andl $_TIF_WORK_MASK, %ecx	# is there any work to be done on
 					# int/exception return?
 	jne work_pending
-	jmp restore_all
-END(ret_from_exception)
+	jmp restore_all_pax
+ENDPROC(ret_from_exception)
 
 #ifdef CONFIG_PREEMPT
 ENTRY(resume_kernel)
@@ -363,7 +513,7 @@ need_resched:
 	jz restore_all
 	call preempt_schedule_irq
 	jmp need_resched
-END(resume_kernel)
+ENDPROC(resume_kernel)
 #endif
 	CFI_ENDPROC
 /*
@@ -397,23 +547,34 @@ sysenter_past_esp:
 	/*CFI_REL_OFFSET cs, 0*/
 	/*
 	 * Push current_thread_info()->sysenter_return to the stack.
-	 * A tiny bit of offset fixup is necessary - 4*4 means the 4 words
-	 * pushed above; +8 corresponds to copy_thread's esp0 setting.
 	 */
-	pushl_cfi ((TI_sysenter_return)-THREAD_SIZE+8+4*4)(%esp)
+	pushl_cfi $0
 	CFI_REL_OFFSET eip, 0
 
 	pushl_cfi %eax
 	SAVE_ALL
+	GET_THREAD_INFO(%ebp)
+	movl TI_sysenter_return(%ebp),%ebp
+	movl %ebp,PT_EIP(%esp)
 	ENABLE_INTERRUPTS(CLBR_NONE)
 
 /*
  * Load the potential sixth argument from user stack.
  * Careful about security.
  */
+	movl PT_OLDESP(%esp),%ebp
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	mov PT_OLDSS(%esp),%ds
+1:	movl %ds:(%ebp),%ebp
+	push %ss
+	pop %ds
+#else
 	cmpl $__PAGE_OFFSET-3,%ebp
 	jae syscall_fault
 1:	movl (%ebp),%ebp
+#endif
+
 	movl %ebp,PT_EBP(%esp)
 .section __ex_table,"a"
 	.align 4
@@ -436,12 +597,24 @@ sysenter_do_call:
 	testl $_TIF_ALLWORK_MASK, %ecx
 	jne sysexit_audit
 sysenter_exit:
+
+#ifdef CONFIG_PAX_RANDKSTACK
+	pushl_cfi %eax
+	movl %esp, %eax
+	call pax_randomize_kstack
+	popl_cfi %eax
+#endif
+
+	pax_erase_kstack
+
 /* if something modifies registers it must also disable sysexit */
 	movl PT_EIP(%esp), %edx
 	movl PT_OLDESP(%esp), %ecx
 	xorl %ebp,%ebp
 	TRACE_IRQS_ON
 1:	mov  PT_FS(%esp), %fs
+2:	mov  PT_DS(%esp), %ds
+3:	mov  PT_ES(%esp), %es
 	PTGS_TO_GS
 	ENABLE_INTERRUPTS_SYSEXIT
 
@@ -458,6 +631,9 @@ sysenter_audit:
 	movl %eax,%edx			/* 2nd arg: syscall number */
 	movl $AUDIT_ARCH_I386,%eax	/* 1st arg: audit arch */
 	call __audit_syscall_entry
+
+	pax_erase_kstack
+
 	pushl_cfi %ebx
 	movl PT_EAX(%esp),%eax		/* reload syscall number */
 	jmp sysenter_do_call
@@ -483,11 +659,17 @@ sysexit_audit:
 
 	CFI_ENDPROC
 .pushsection .fixup,"ax"
-2:	movl $0,PT_FS(%esp)
+4:	movl $0,PT_FS(%esp)
+	jmp 1b
+5:	movl $0,PT_DS(%esp)
+	jmp 1b
+6:	movl $0,PT_ES(%esp)
 	jmp 1b
 .section __ex_table,"a"
 	.align 4
-	.long 1b,2b
+	.long 1b,4b
+	.long 2b,5b
+	.long 3b,6b
 .popsection
 	PTGS_TO_GS_EX
 ENDPROC(ia32_sysenter_target)
@@ -520,6 +702,15 @@ syscall_exit:
 	testl $_TIF_ALLWORK_MASK, %ecx	# current->work
 	jne syscall_exit_work
 
+restore_all_pax:
+
+#ifdef CONFIG_PAX_RANDKSTACK
+	movl %esp, %eax
+	call pax_randomize_kstack
+#endif
+
+	pax_erase_kstack
+
 restore_all:
 	TRACE_IRQS_IRET
 restore_all_notrace:
@@ -579,14 +770,34 @@ ldt_ss:
  * compensating for the offset by changing to the ESPFIX segment with
  * a base address that matches for the difference.
  */
-#define GDT_ESPFIX_SS PER_CPU_VAR(gdt_page) + (GDT_ENTRY_ESPFIX_SS * 8)
+#define GDT_ESPFIX_SS (GDT_ENTRY_ESPFIX_SS * 8)(%ebx)
 	mov %esp, %edx			/* load kernel esp */
 	mov PT_OLDESP(%esp), %eax	/* load userspace esp */
 	mov %dx, %ax			/* eax: new kernel esp */
 	sub %eax, %edx			/* offset (low word is 0) */
+#ifdef CONFIG_SMP
+	movl PER_CPU_VAR(cpu_number), %ebx
+	shll $PAGE_SHIFT_asm, %ebx
+	addl $cpu_gdt_table, %ebx
+#else
+	movl $cpu_gdt_table, %ebx
+#endif
 	shr $16, %edx
-	mov %dl, GDT_ESPFIX_SS + 4 /* bits 16..23 */
-	mov %dh, GDT_ESPFIX_SS + 7 /* bits 24..31 */
+
+#ifdef CONFIG_PAX_KERNEXEC
+	mov %cr0, %esi
+	btr $16, %esi
+	mov %esi, %cr0
+#endif
+
+	mov %dl, 4 + GDT_ESPFIX_SS /* bits 16..23 */
+	mov %dh, 7 + GDT_ESPFIX_SS /* bits 24..31 */
+
+#ifdef CONFIG_PAX_KERNEXEC
+	bts $16, %esi
+	mov %esi, %cr0
+#endif
+
 	pushl_cfi $__ESPFIX_SS
 	pushl_cfi %eax			/* new kernel esp */
 	/* Disable interrupts, but do not irqtrace this section: we
@@ -615,38 +826,30 @@ work_resched:
 	movl TI_flags(%ebp), %ecx
 	andl $_TIF_WORK_MASK, %ecx	# is there any work to be done other
 					# than syscall tracing?
-	jz restore_all
+	jz restore_all_pax
 	testb $_TIF_NEED_RESCHED, %cl
 	jnz work_resched
 
 work_notifysig:				# deal with pending signals and
 					# notify-resume requests
+	movl %esp, %eax
 #ifdef CONFIG_VM86
 	testl $X86_EFLAGS_VM, PT_EFLAGS(%esp)
-	movl %esp, %eax
-	jne work_notifysig_v86		# returning to kernel-space or
+	jz 1f				# returning to kernel-space or
 					# vm86-space
-	TRACE_IRQS_ON
-	ENABLE_INTERRUPTS(CLBR_NONE)
-	xorl %edx, %edx
-	call do_notify_resume
-	jmp resume_userspace_sig
 
-	ALIGN
-work_notifysig_v86:
 	pushl_cfi %ecx			# save ti_flags for do_notify_resume
 	call save_v86_state		# %eax contains pt_regs pointer
 	popl_cfi %ecx
 	movl %eax, %esp
-#else
-	movl %esp, %eax
+1:
 #endif
 	TRACE_IRQS_ON
 	ENABLE_INTERRUPTS(CLBR_NONE)
 	xorl %edx, %edx
 	call do_notify_resume
 	jmp resume_userspace_sig
-END(work_pending)
+ENDPROC(work_pending)
 
 	# perform syscall exit tracing
 	ALIGN
@@ -654,11 +857,14 @@ syscall_trace_entry:
 	movl $-ENOSYS,PT_EAX(%esp)
 	movl %esp, %eax
 	call syscall_trace_enter
+
+	pax_erase_kstack
+
 	/* What it returned is what we'll actually use.  */
 	cmpl $(NR_syscalls), %eax
 	jnae syscall_call
 	jmp syscall_exit
-END(syscall_trace_entry)
+ENDPROC(syscall_trace_entry)
 
 	# perform syscall exit tracing
 	ALIGN
@@ -671,20 +877,24 @@ syscall_exit_work:
 	movl %esp, %eax
 	call syscall_trace_leave
 	jmp resume_userspace
-END(syscall_exit_work)
+ENDPROC(syscall_exit_work)
 	CFI_ENDPROC
 
 	RING0_INT_FRAME			# can't unwind into user space anyway
 syscall_fault:
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	push %ss
+	pop %ds
+#endif
 	GET_THREAD_INFO(%ebp)
 	movl $-EFAULT,PT_EAX(%esp)
 	jmp resume_userspace
-END(syscall_fault)
+ENDPROC(syscall_fault)
 
 syscall_badsys:
 	movl $-ENOSYS,PT_EAX(%esp)
 	jmp resume_userspace
-END(syscall_badsys)
+ENDPROC(syscall_badsys)
 	CFI_ENDPROC
 /*
  * End of kprobes section
@@ -756,6 +966,36 @@ ENTRY(ptregs_clone)
 	CFI_ENDPROC
 ENDPROC(ptregs_clone)
 
+	ALIGN;
+ENTRY(kernel_execve)
+	CFI_STARTPROC
+	pushl_cfi %ebp
+	sub $PT_OLDSS+4,%esp
+	pushl_cfi %edi
+	pushl_cfi %ecx
+	pushl_cfi %eax
+	lea 3*4(%esp),%edi
+	mov $PT_OLDSS/4+1,%ecx
+	xorl %eax,%eax
+	rep stosl
+	popl_cfi %eax
+	popl_cfi %ecx
+	popl_cfi %edi
+	movl $X86_EFLAGS_IF,PT_EFLAGS(%esp)
+	pushl_cfi %esp
+	call sys_execve
+	add $4,%esp
+	CFI_ADJUST_CFA_OFFSET -4
+	GET_THREAD_INFO(%ebp)
+	test %eax,%eax
+	jz syscall_exit
+	add $PT_OLDSS+4,%esp
+	CFI_ADJUST_CFA_OFFSET -PT_OLDSS-4
+	popl_cfi %ebp
+	ret
+	CFI_ENDPROC
+ENDPROC(kernel_execve)
+
 .macro FIXUP_ESPFIX_STACK
 /*
  * Switch back for ESPFIX stack to the normal zerobased stack
@@ -765,8 +1005,15 @@ ENDPROC(ptregs_clone)
  * normal stack and adjusts ESP with the matching offset.
  */
 	/* fixup the stack */
-	mov GDT_ESPFIX_SS + 4, %al /* bits 16..23 */
-	mov GDT_ESPFIX_SS + 7, %ah /* bits 24..31 */
+#ifdef CONFIG_SMP
+	movl PER_CPU_VAR(cpu_number), %ebx
+	shll $PAGE_SHIFT_asm, %ebx
+	addl $cpu_gdt_table, %ebx
+#else
+	movl $cpu_gdt_table, %ebx
+#endif
+	mov 4 + GDT_ESPFIX_SS, %al /* bits 16..23 */
+	mov 7 + GDT_ESPFIX_SS, %ah /* bits 24..31 */
 	shl $16, %eax
 	addl %esp, %eax			/* the adjusted stack pointer */
 	pushl_cfi $__KERNEL_DS
@@ -819,7 +1066,7 @@ vector=vector+1
   .endr
 2:	jmp common_interrupt
 .endr
-END(irq_entries_start)
+ENDPROC(irq_entries_start)
 
 .previous
 END(interrupt)
@@ -867,7 +1114,7 @@ ENTRY(coprocessor_error)
 	pushl_cfi $do_coprocessor_error
 	jmp error_code
 	CFI_ENDPROC
-END(coprocessor_error)
+ENDPROC(coprocessor_error)
 
 ENTRY(simd_coprocessor_error)
 	RING0_INT_FRAME
@@ -888,7 +1135,7 @@ ENTRY(simd_coprocessor_error)
 #endif
 	jmp error_code
 	CFI_ENDPROC
-END(simd_coprocessor_error)
+ENDPROC(simd_coprocessor_error)
 
 ENTRY(device_not_available)
 	RING0_INT_FRAME
@@ -896,7 +1143,7 @@ ENTRY(device_not_available)
 	pushl_cfi $do_device_not_available
 	jmp error_code
 	CFI_ENDPROC
-END(device_not_available)
+ENDPROC(device_not_available)
 
 #ifdef CONFIG_PARAVIRT
 ENTRY(native_iret)
@@ -905,12 +1152,12 @@ ENTRY(native_iret)
 	.align 4
 	.long native_iret, iret_exc
 .previous
-END(native_iret)
+ENDPROC(native_iret)
 
 ENTRY(native_irq_enable_sysexit)
 	sti
 	sysexit
-END(native_irq_enable_sysexit)
+ENDPROC(native_irq_enable_sysexit)
 #endif
 
 ENTRY(overflow)
@@ -919,7 +1166,7 @@ ENTRY(overflow)
 	pushl_cfi $do_overflow
 	jmp error_code
 	CFI_ENDPROC
-END(overflow)
+ENDPROC(overflow)
 
 ENTRY(bounds)
 	RING0_INT_FRAME
@@ -927,7 +1174,7 @@ ENTRY(bounds)
 	pushl_cfi $do_bounds
 	jmp error_code
 	CFI_ENDPROC
-END(bounds)
+ENDPROC(bounds)
 
 ENTRY(invalid_op)
 	RING0_INT_FRAME
@@ -935,7 +1182,7 @@ ENTRY(invalid_op)
 	pushl_cfi $do_invalid_op
 	jmp error_code
 	CFI_ENDPROC
-END(invalid_op)
+ENDPROC(invalid_op)
 
 ENTRY(coprocessor_segment_overrun)
 	RING0_INT_FRAME
@@ -943,35 +1190,35 @@ ENTRY(coprocessor_segment_overrun)
 	pushl_cfi $do_coprocessor_segment_overrun
 	jmp error_code
 	CFI_ENDPROC
-END(coprocessor_segment_overrun)
+ENDPROC(coprocessor_segment_overrun)
 
 ENTRY(invalid_TSS)
 	RING0_EC_FRAME
 	pushl_cfi $do_invalid_TSS
 	jmp error_code
 	CFI_ENDPROC
-END(invalid_TSS)
+ENDPROC(invalid_TSS)
 
 ENTRY(segment_not_present)
 	RING0_EC_FRAME
 	pushl_cfi $do_segment_not_present
 	jmp error_code
 	CFI_ENDPROC
-END(segment_not_present)
+ENDPROC(segment_not_present)
 
 ENTRY(stack_segment)
 	RING0_EC_FRAME
 	pushl_cfi $do_stack_segment
 	jmp error_code
 	CFI_ENDPROC
-END(stack_segment)
+ENDPROC(stack_segment)
 
 ENTRY(alignment_check)
 	RING0_EC_FRAME
 	pushl_cfi $do_alignment_check
 	jmp error_code
 	CFI_ENDPROC
-END(alignment_check)
+ENDPROC(alignment_check)
 
 ENTRY(divide_error)
 	RING0_INT_FRAME
@@ -979,7 +1226,7 @@ ENTRY(divide_error)
 	pushl_cfi $do_divide_error
 	jmp error_code
 	CFI_ENDPROC
-END(divide_error)
+ENDPROC(divide_error)
 
 #ifdef CONFIG_X86_MCE
 ENTRY(machine_check)
@@ -988,7 +1235,7 @@ ENTRY(machine_check)
 	pushl_cfi machine_check_vector
 	jmp error_code
 	CFI_ENDPROC
-END(machine_check)
+ENDPROC(machine_check)
 #endif
 
 ENTRY(spurious_interrupt_bug)
@@ -997,7 +1244,7 @@ ENTRY(spurious_interrupt_bug)
 	pushl_cfi $do_spurious_interrupt_bug
 	jmp error_code
 	CFI_ENDPROC
-END(spurious_interrupt_bug)
+ENDPROC(spurious_interrupt_bug)
 /*
  * End of kprobes section
  */
@@ -1112,7 +1359,7 @@ BUILD_INTERRUPT3(xen_hvm_callback_vector
 
 ENTRY(mcount)
 	ret
-END(mcount)
+ENDPROC(mcount)
 
 ENTRY(ftrace_caller)
 	cmpl $0, function_trace_stop
@@ -1141,7 +1388,7 @@ ftrace_graph_call:
 .globl ftrace_stub
 ftrace_stub:
 	ret
-END(ftrace_caller)
+ENDPROC(ftrace_caller)
 
 #else /* ! CONFIG_DYNAMIC_FTRACE */
 
@@ -1177,7 +1424,7 @@ trace:
 	popl %ecx
 	popl %eax
 	jmp ftrace_stub
-END(mcount)
+ENDPROC(mcount)
 #endif /* CONFIG_DYNAMIC_FTRACE */
 #endif /* CONFIG_FUNCTION_TRACER */
 
@@ -1198,7 +1445,7 @@ ENTRY(ftrace_graph_caller)
 	popl %ecx
 	popl %eax
 	ret
-END(ftrace_graph_caller)
+ENDPROC(ftrace_graph_caller)
 
 .globl return_to_handler
 return_to_handler:
@@ -1253,15 +1500,18 @@ error_code:
 	movl $-1, PT_ORIG_EAX(%esp)	# no syscall to restart
 	REG_TO_PTGS %ecx
 	SET_KERNEL_GS %ecx
-	movl $(__USER_DS), %ecx
+	movl $(__KERNEL_DS), %ecx
 	movl %ecx, %ds
 	movl %ecx, %es
+
+	pax_enter_kernel
+
 	TRACE_IRQS_OFF
 	movl %esp,%eax			# pt_regs pointer
 	call *%edi
 	jmp ret_from_exception
 	CFI_ENDPROC
-END(page_fault)
+ENDPROC(page_fault)
 
 /*
  * Debug traps and NMI can happen at the one SYSENTER instruction
@@ -1303,7 +1553,7 @@ debug_stack_correct:
 	call do_debug
 	jmp ret_from_exception
 	CFI_ENDPROC
-END(debug)
+ENDPROC(debug)
 
 /*
  * NMI is doubly nasty. It can happen _while_ we're handling
@@ -1340,6 +1590,9 @@ nmi_stack_correct:
 	xorl %edx,%edx		# zero error code
 	movl %esp,%eax		# pt_regs pointer
 	call do_nmi
+
+	pax_exit_kernel
+
 	jmp restore_all_notrace
 	CFI_ENDPROC
 
@@ -1376,12 +1629,15 @@ nmi_espfix_stack:
 	FIXUP_ESPFIX_STACK		# %eax == %esp
 	xorl %edx,%edx			# zero error code
 	call do_nmi
+
+	pax_exit_kernel
+
 	RESTORE_REGS
 	lss 12+4(%esp), %esp		# back to espfix stack
 	CFI_ADJUST_CFA_OFFSET -24
 	jmp irq_return
 	CFI_ENDPROC
-END(nmi)
+ENDPROC(nmi)
 
 ENTRY(int3)
 	RING0_INT_FRAME
@@ -1393,14 +1649,14 @@ ENTRY(int3)
 	call do_int3
 	jmp ret_from_exception
 	CFI_ENDPROC
-END(int3)
+ENDPROC(int3)
 
 ENTRY(general_protection)
 	RING0_EC_FRAME
 	pushl_cfi $do_general_protection
 	jmp error_code
 	CFI_ENDPROC
-END(general_protection)
+ENDPROC(general_protection)
 
 #ifdef CONFIG_KVM_GUEST
 ENTRY(async_page_fault)
@@ -1408,7 +1664,7 @@ ENTRY(async_page_fault)
 	pushl_cfi $do_async_page_fault
 	jmp error_code
 	CFI_ENDPROC
-END(async_page_fault)
+ENDPROC(async_page_fault)
 #endif
 
 /*
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/entry_64.S linux-3.3.8-pax/arch/x86/kernel/entry_64.S
--- linux-3.3.8/arch/x86/kernel/entry_64.S	2012-03-19 10:38:56.540049999 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/entry_64.S	2012-03-19 10:43:43.172034695 +0100
@@ -56,6 +56,8 @@
 #include <asm/ftrace.h>
 #include <asm/percpu.h>
 #include <linux/err.h>
+#include <asm/pgtable.h>
+#include <asm/alternative-asm.h>
 
 /* Avoid __ASSEMBLER__'ifying <linux/audit.h> just for this.  */
 #include <linux/elf-em.h>
@@ -69,8 +71,9 @@
 #ifdef CONFIG_FUNCTION_TRACER
 #ifdef CONFIG_DYNAMIC_FTRACE
 ENTRY(mcount)
+	pax_force_retaddr
 	retq
-END(mcount)
+ENDPROC(mcount)
 
 ENTRY(ftrace_caller)
 	cmpl $0, function_trace_stop
@@ -93,8 +96,9 @@ GLOBAL(ftrace_graph_call)
 #endif
 
 GLOBAL(ftrace_stub)
+	pax_force_retaddr
 	retq
-END(ftrace_caller)
+ENDPROC(ftrace_caller)
 
 #else /* ! CONFIG_DYNAMIC_FTRACE */
 ENTRY(mcount)
@@ -113,6 +117,7 @@ ENTRY(mcount)
 #endif
 
 GLOBAL(ftrace_stub)
+	pax_force_retaddr
 	retq
 
 trace:
@@ -122,12 +127,13 @@ trace:
 	movq 8(%rbp), %rsi
 	subq $MCOUNT_INSN_SIZE, %rdi
 
+	pax_force_fptr ftrace_trace_function
 	call   *ftrace_trace_function
 
 	MCOUNT_RESTORE_FRAME
 
 	jmp ftrace_stub
-END(mcount)
+ENDPROC(mcount)
 #endif /* CONFIG_DYNAMIC_FTRACE */
 #endif /* CONFIG_FUNCTION_TRACER */
 
@@ -147,8 +153,9 @@ ENTRY(ftrace_graph_caller)
 
 	MCOUNT_RESTORE_FRAME
 
+	pax_force_retaddr
 	retq
-END(ftrace_graph_caller)
+ENDPROC(ftrace_graph_caller)
 
 GLOBAL(return_to_handler)
 	subq  $24, %rsp
@@ -164,6 +171,7 @@ GLOBAL(return_to_handler)
 	movq 8(%rsp), %rdx
 	movq (%rsp), %rax
 	addq $24, %rsp
+	pax_force_fptr %rdi
 	jmp *%rdi
 #endif
 
@@ -179,6 +187,282 @@ ENTRY(native_usergs_sysret64)
 ENDPROC(native_usergs_sysret64)
 #endif /* CONFIG_PARAVIRT */
 
+	.macro ljmpq sel, off
+#if defined(CONFIG_MPSC) || defined(CONFIG_MCORE2) || defined (CONFIG_MATOM)
+	.byte 0x48; ljmp *1234f(%rip)
+	.pushsection .rodata
+	.align 16
+	1234: .quad \off; .word \sel
+	.popsection
+#else
+	pushq $\sel
+	pushq $\off
+	lretq
+#endif
+	.endm
+
+	.macro pax_enter_kernel
+	pax_set_fptr_mask
+#ifdef CONFIG_PAX_KERNEXEC
+	call pax_enter_kernel
+#endif
+	.endm
+
+	.macro pax_exit_kernel
+#ifdef CONFIG_PAX_KERNEXEC
+	call pax_exit_kernel
+#endif
+	.endm
+
+#ifdef CONFIG_PAX_KERNEXEC
+ENTRY(pax_enter_kernel)
+	pushq %rdi
+
+#ifdef CONFIG_PARAVIRT
+	PV_SAVE_REGS(CLBR_RDI)
+#endif
+
+	GET_CR0_INTO_RDI
+	bts $16,%rdi
+	jnc 3f
+	mov %cs,%edi
+	cmp $__KERNEL_CS,%edi
+	jnz 2f
+1:
+
+#ifdef CONFIG_PARAVIRT
+	PV_RESTORE_REGS(CLBR_RDI)
+#endif
+
+	popq %rdi
+	pax_force_retaddr
+	retq
+
+2:	ljmpq __KERNEL_CS,1f
+3:	ljmpq __KERNEXEC_KERNEL_CS,4f
+4:	SET_RDI_INTO_CR0
+	jmp 1b
+ENDPROC(pax_enter_kernel)
+
+ENTRY(pax_exit_kernel)
+	pushq %rdi
+
+#ifdef CONFIG_PARAVIRT
+	PV_SAVE_REGS(CLBR_RDI)
+#endif
+
+	mov %cs,%rdi
+	cmp $__KERNEXEC_KERNEL_CS,%edi
+	jz 2f
+1:
+
+#ifdef CONFIG_PARAVIRT
+	PV_RESTORE_REGS(CLBR_RDI);
+#endif
+
+	popq %rdi
+	pax_force_retaddr
+	retq
+
+2:	GET_CR0_INTO_RDI
+	btr $16,%rdi
+	ljmpq __KERNEL_CS,3f
+3:	SET_RDI_INTO_CR0
+	jmp 1b
+#ifdef CONFIG_PARAVIRT
+	PV_RESTORE_REGS(CLBR_RDI);
+#endif
+
+	popq %rdi
+	pax_force_retaddr
+	retq
+ENDPROC(pax_exit_kernel)
+#endif
+
+	.macro pax_enter_kernel_user
+	pax_set_fptr_mask
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	call pax_enter_kernel_user
+#endif
+	.endm
+
+	.macro pax_exit_kernel_user
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	call pax_exit_kernel_user
+#endif
+#ifdef CONFIG_PAX_RANDKSTACK
+	pushq %rax
+	call pax_randomize_kstack
+	popq %rax
+#endif
+	.endm
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+ENTRY(pax_enter_kernel_user)
+	pushq %rdi
+	pushq %rbx
+
+#ifdef CONFIG_PARAVIRT
+	PV_SAVE_REGS(CLBR_RDI)
+#endif
+
+	GET_CR3_INTO_RDI
+	mov %rdi,%rbx
+	add $__START_KERNEL_map,%rbx
+	sub phys_base(%rip),%rbx
+
+#ifdef CONFIG_PARAVIRT
+	pushq %rdi
+	cmpl $0, pv_info+PARAVIRT_enabled
+	jz 1f
+	i = 0
+	.rept USER_PGD_PTRS
+	mov i*8(%rbx),%rsi
+	mov $0,%sil
+	lea i*8(%rbx),%rdi
+	call PARA_INDIRECT(pv_mmu_ops+PV_MMU_set_pgd_batched)
+	i = i + 1
+	.endr
+	jmp 2f
+1:
+#endif
+
+	i = 0
+	.rept USER_PGD_PTRS
+	movb $0,i*8(%rbx)
+	i = i + 1
+	.endr
+
+#ifdef CONFIG_PARAVIRT
+2:	popq %rdi
+#endif
+	SET_RDI_INTO_CR3
+
+#ifdef CONFIG_PAX_KERNEXEC
+	GET_CR0_INTO_RDI
+	bts $16,%rdi
+	SET_RDI_INTO_CR0
+#endif
+
+#ifdef CONFIG_PARAVIRT
+	PV_RESTORE_REGS(CLBR_RDI)
+#endif
+
+	popq %rbx
+	popq %rdi
+	pax_force_retaddr
+	retq
+ENDPROC(pax_enter_kernel_user)
+
+ENTRY(pax_exit_kernel_user)
+	push %rdi
+
+#ifdef CONFIG_PARAVIRT
+	pushq %rbx
+	PV_SAVE_REGS(CLBR_RDI)
+#endif
+
+#ifdef CONFIG_PAX_KERNEXEC
+	GET_CR0_INTO_RDI
+	btr $16,%rdi
+	SET_RDI_INTO_CR0
+#endif
+
+	GET_CR3_INTO_RDI
+	add $__START_KERNEL_map,%rdi
+	sub phys_base(%rip),%rdi
+
+#ifdef CONFIG_PARAVIRT
+	cmpl $0, pv_info+PARAVIRT_enabled
+	jz 1f
+	mov %rdi,%rbx
+	i = 0
+	.rept USER_PGD_PTRS
+	mov i*8(%rbx),%rsi
+	mov $0x67,%sil
+	lea i*8(%rbx),%rdi
+	call PARA_INDIRECT(pv_mmu_ops+PV_MMU_set_pgd_batched)
+	i = i + 1
+	.endr
+	jmp 2f
+1:
+#endif
+
+	i = 0
+	.rept USER_PGD_PTRS
+	movb $0x67,i*8(%rdi)
+	i = i + 1
+	.endr
+
+#ifdef CONFIG_PARAVIRT
+2:	PV_RESTORE_REGS(CLBR_RDI)
+	popq %rbx
+#endif
+
+	popq %rdi
+	pax_force_retaddr
+	retq
+ENDPROC(pax_exit_kernel_user)
+#endif
+
+.macro pax_erase_kstack
+#ifdef CONFIG_PAX_MEMORY_STACKLEAK
+	call pax_erase_kstack
+#endif
+.endm
+
+#ifdef CONFIG_PAX_MEMORY_STACKLEAK
+/*
+ * r11: thread_info
+ * rcx, rdx: can be clobbered
+ */
+ENTRY(pax_erase_kstack)
+	pushq %rdi
+	pushq %rax
+	pushq %r11
+
+	GET_THREAD_INFO(%r11)
+	mov TI_lowest_stack(%r11), %rdi
+	mov $0xB4DD00D5BADBABE5, %rax
+	std
+
+1:	mov %edi, %ecx
+	and $THREAD_SIZE_asm - 1, %ecx
+	shr $3, %ecx
+	repne scasq
+	jecxz 2f
+
+	cmp $2*8, %ecx
+	jc 2f
+
+	mov $2*8, %ecx
+	repe scasq
+	jecxz 2f
+	jne 1b
+
+2:	cld
+	mov %esp, %ecx
+	sub %edi, %ecx
+
+	cmp $THREAD_SIZE_asm, %rcx
+	jb 3f
+	ud2
+3:
+
+	shr $3, %ecx
+	rep stosq
+
+	mov TI_task_thread_sp0(%r11), %rdi
+	sub $256, %rdi
+	mov %rdi, TI_lowest_stack(%r11)
+
+	popq %r11
+	popq %rax
+	popq %rdi
+	pax_force_retaddr
+	ret
+ENDPROC(pax_erase_kstack)
+#endif
 
 .macro TRACE_IRQS_IRETQ offset=ARGOFFSET
 #ifdef CONFIG_TRACE_IRQFLAGS
@@ -232,8 +516,8 @@ ENDPROC(native_usergs_sysret64)
 	.endm
 
 	.macro UNFAKE_STACK_FRAME
-	addq $8*6, %rsp
-	CFI_ADJUST_CFA_OFFSET	-(6*8)
+	addq $8*6 + ARG_SKIP, %rsp
+	CFI_ADJUST_CFA_OFFSET	-(6*8 + ARG_SKIP)
 	.endm
 
 /*
@@ -320,7 +604,7 @@ ENDPROC(native_usergs_sysret64)
 	movq %rsp, %rsi
 
 	leaq -RBP(%rsp),%rdi	/* arg1 for handler */
-	testl $3, CS(%rdi)
+	testb $3, CS(%rdi)
 	je 1f
 	SWAPGS
 	/*
@@ -356,9 +640,10 @@ ENTRY(save_rest)
 	movq_cfi r15, R15+16
 	movq %r11, 8(%rsp)	/* return address */
 	FIXUP_TOP_OF_STACK %r11, 16
+	pax_force_retaddr
 	ret
 	CFI_ENDPROC
-END(save_rest)
+ENDPROC(save_rest)
 
 /* save complete stack frame */
 	.pushsection .kprobes.text, "ax"
@@ -387,9 +672,10 @@ ENTRY(save_paranoid)
 	js 1f	/* negative -> in kernel */
 	SWAPGS
 	xorl %ebx,%ebx
-1:	ret
+1:	pax_force_retaddr_bts
+	ret
 	CFI_ENDPROC
-END(save_paranoid)
+ENDPROC(save_paranoid)
 	.popsection
 
 /*
@@ -411,7 +697,7 @@ ENTRY(ret_from_fork)
 
 	RESTORE_REST
 
-	testl $3, CS-ARGOFFSET(%rsp)		# from kernel_thread?
+	testb $3, CS-ARGOFFSET(%rsp)		# from kernel_thread?
 	jz   retint_restore_args
 
 	testl $_TIF_IA32, TI_flags(%rcx)	# 32-bit compat task needs IRET
@@ -421,7 +707,7 @@ ENTRY(ret_from_fork)
 	jmp ret_from_sys_call			# go to the SYSRET fastpath
 
 	CFI_ENDPROC
-END(ret_from_fork)
+ENDPROC(ret_from_fork)
 
 /*
  * System call entry. Up to 6 arguments in registers are supported.
@@ -457,7 +743,7 @@ END(ret_from_fork)
 ENTRY(system_call)
 	CFI_STARTPROC	simple
 	CFI_SIGNAL_FRAME
-	CFI_DEF_CFA	rsp,KERNEL_STACK_OFFSET
+	CFI_DEF_CFA	rsp,0
 	CFI_REGISTER	rip,rcx
 	/*CFI_REGISTER	rflags,r11*/
 	SWAPGS_UNSAFE_STACK
@@ -470,21 +756,23 @@ GLOBAL(system_call_after_swapgs)
 
 	movq	%rsp,PER_CPU_VAR(old_rsp)
 	movq	PER_CPU_VAR(kernel_stack),%rsp
+	SAVE_ARGS 8*6,0
+	pax_enter_kernel_user
 	/*
 	 * No need to follow this irqs off/on section - it's straight
 	 * and short:
 	 */
 	ENABLE_INTERRUPTS(CLBR_NONE)
-	SAVE_ARGS 8,0
 	movq  %rax,ORIG_RAX-ARGOFFSET(%rsp)
 	movq  %rcx,RIP-ARGOFFSET(%rsp)
 	CFI_REL_OFFSET rip,RIP-ARGOFFSET
-	testl $_TIF_WORK_SYSCALL_ENTRY,TI_flags+THREAD_INFO(%rsp,RIP-ARGOFFSET)
+	GET_THREAD_INFO(%rcx)
+	testl $_TIF_WORK_SYSCALL_ENTRY,TI_flags(%rcx)
 	jnz tracesys
 system_call_fastpath:
 	cmpq $__NR_syscall_max,%rax
 	ja badsys
-	movq %r10,%rcx
+	movq R10-ARGOFFSET(%rsp),%rcx
 	call *sys_call_table(,%rax,8)  # XXX:	 rip relative
 	movq %rax,RAX-ARGOFFSET(%rsp)
 /*
@@ -498,10 +786,13 @@ sysret_check:
 	LOCKDEP_SYS_EXIT
 	DISABLE_INTERRUPTS(CLBR_NONE)
 	TRACE_IRQS_OFF
-	movl TI_flags+THREAD_INFO(%rsp,RIP-ARGOFFSET),%edx
+	GET_THREAD_INFO(%rcx)
+	movl TI_flags(%rcx),%edx
 	andl %edi,%edx
 	jnz  sysret_careful
 	CFI_REMEMBER_STATE
+	pax_exit_kernel_user
+	pax_erase_kstack
 	/*
 	 * sysretq will re-enable interrupts:
 	 */
@@ -553,14 +844,18 @@ badsys:
 	 * jump back to the normal fast path.
 	 */
 auditsys:
-	movq %r10,%r9			/* 6th arg: 4th syscall arg */
+	movq R10-ARGOFFSET(%rsp),%r9	/* 6th arg: 4th syscall arg */
 	movq %rdx,%r8			/* 5th arg: 3rd syscall arg */
 	movq %rsi,%rcx			/* 4th arg: 2nd syscall arg */
 	movq %rdi,%rdx			/* 3rd arg: 1st syscall arg */
 	movq %rax,%rsi			/* 2nd arg: syscall number */
 	movl $AUDIT_ARCH_X86_64,%edi	/* 1st arg: audit arch */
 	call __audit_syscall_entry
+
+	pax_erase_kstack
+
 	LOAD_ARGS 0		/* reload call-clobbered registers */
+	pax_set_fptr_mask
 	jmp system_call_fastpath
 
 	/*
@@ -581,7 +876,7 @@ sysret_audit:
 	/* Do syscall tracing */
 tracesys:
 #ifdef CONFIG_AUDITSYSCALL
-	testl $(_TIF_WORK_SYSCALL_ENTRY & ~_TIF_SYSCALL_AUDIT),TI_flags+THREAD_INFO(%rsp,RIP-ARGOFFSET)
+	testl $(_TIF_WORK_SYSCALL_ENTRY & ~_TIF_SYSCALL_AUDIT),TI_flags(%rcx)
 	jz auditsys
 #endif
 	SAVE_REST
@@ -589,16 +884,20 @@ tracesys:
 	FIXUP_TOP_OF_STACK %rdi
 	movq %rsp,%rdi
 	call syscall_trace_enter
+
+	pax_erase_kstack
+
 	/*
 	 * Reload arg registers from stack in case ptrace changed them.
 	 * We don't reload %rax because syscall_trace_enter() returned
 	 * the value it wants us to use in the table lookup.
 	 */
 	LOAD_ARGS ARGOFFSET, 1
+	pax_set_fptr_mask
 	RESTORE_REST
 	cmpq $__NR_syscall_max,%rax
 	ja   int_ret_from_sys_call	/* RAX(%rsp) set to -ENOSYS above */
-	movq %r10,%rcx	/* fixup for C */
+	movq R10-ARGOFFSET(%rsp),%rcx	/* fixup for C */
 	call *sys_call_table(,%rax,8)
 	movq %rax,RAX-ARGOFFSET(%rsp)
 	/* Use IRET because user could have changed frame */
@@ -619,6 +918,7 @@ GLOBAL(int_with_check)
 	andl %edi,%edx
 	jnz   int_careful
 	andl    $~TS_COMPAT,TI_status(%rcx)
+	pax_erase_kstack
 	jmp   retint_swapgs
 
 	/* Either reschedule or signal or syscall exit tracking needed. */
@@ -665,7 +965,7 @@ int_restore_rest:
 	TRACE_IRQS_OFF
 	jmp int_with_check
 	CFI_ENDPROC
-END(system_call)
+ENDPROC(system_call)
 
 /*
  * Certain special system calls that need to save a complete full stack frame.
@@ -681,7 +981,7 @@ ENTRY(\label)
 	call \func
 	jmp ptregscall_common
 	CFI_ENDPROC
-END(\label)
+ENDPROC(\label)
 	.endm
 
 	PTREGSCALL stub_clone, sys_clone, %r8
@@ -699,9 +999,10 @@ ENTRY(ptregscall_common)
 	movq_cfi_restore R12+8, r12
 	movq_cfi_restore RBP+8, rbp
 	movq_cfi_restore RBX+8, rbx
+	pax_force_retaddr
 	ret $REST_SKIP		/* pop extended registers */
 	CFI_ENDPROC
-END(ptregscall_common)
+ENDPROC(ptregscall_common)
 
 ENTRY(stub_execve)
 	CFI_STARTPROC
@@ -716,7 +1017,7 @@ ENTRY(stub_execve)
 	RESTORE_REST
 	jmp int_ret_from_sys_call
 	CFI_ENDPROC
-END(stub_execve)
+ENDPROC(stub_execve)
 
 /*
  * sigreturn is special because it needs to restore all registers on return.
@@ -734,7 +1035,7 @@ ENTRY(stub_rt_sigreturn)
 	RESTORE_REST
 	jmp int_ret_from_sys_call
 	CFI_ENDPROC
-END(stub_rt_sigreturn)
+ENDPROC(stub_rt_sigreturn)
 
 /*
  * Build the entry stubs and pointer table with some assembler magic.
@@ -769,7 +1070,7 @@ vector=vector+1
 2:	jmp common_interrupt
 .endr
 	CFI_ENDPROC
-END(irq_entries_start)
+ENDPROC(irq_entries_start)
 
 .previous
 END(interrupt)
@@ -789,6 +1090,16 @@ END(interrupt)
 	subq $ORIG_RAX-RBP, %rsp
 	CFI_ADJUST_CFA_OFFSET ORIG_RAX-RBP
 	SAVE_ARGS_IRQ
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	testb $3, CS(%rdi)
+	jnz 1f
+	pax_enter_kernel
+	jmp 2f
+1:	pax_enter_kernel_user
+2:
+#else
+	pax_enter_kernel
+#endif
 	call \func
 	.endm
 
@@ -820,7 +1131,7 @@ ret_from_intr:
 
 exit_intr:
 	GET_THREAD_INFO(%rcx)
-	testl $3,CS-ARGOFFSET(%rsp)
+	testb $3,CS-ARGOFFSET(%rsp)
 	je retint_kernel
 
 	/* Interrupt came from user space */
@@ -842,12 +1153,15 @@ retint_swapgs:		/* return to user-space
 	 * The iretq could re-enable interrupts:
 	 */
 	DISABLE_INTERRUPTS(CLBR_ANY)
+	pax_exit_kernel_user
 	TRACE_IRQS_IRETQ
 	SWAPGS
 	jmp restore_args
 
 retint_restore_args:	/* return to kernel space */
 	DISABLE_INTERRUPTS(CLBR_ANY)
+	pax_exit_kernel
+	pax_force_retaddr RIP-ARGOFFSET
 	/*
 	 * The iretq could re-enable interrupts:
 	 */
@@ -936,7 +1250,7 @@ ENTRY(retint_kernel)
 #endif
 
 	CFI_ENDPROC
-END(common_interrupt)
+ENDPROC(common_interrupt)
 /*
  * End of kprobes section
  */
@@ -953,7 +1267,7 @@ ENTRY(\sym)
 	interrupt \do_sym
 	jmp ret_from_intr
 	CFI_ENDPROC
-END(\sym)
+ENDPROC(\sym)
 .endm
 
 #ifdef CONFIG_SMP
@@ -1026,12 +1340,22 @@ ENTRY(\sym)
 	CFI_ADJUST_CFA_OFFSET ORIG_RAX-R15
 	call error_entry
 	DEFAULT_FRAME 0
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	testb $3, CS(%rsp)
+	jnz 1f
+	pax_enter_kernel
+	jmp 2f
+1:	pax_enter_kernel_user
+2:
+#else
+	pax_enter_kernel
+#endif
 	movq %rsp,%rdi		/* pt_regs pointer */
 	xorl %esi,%esi		/* no error code */
 	call \do_sym
 	jmp error_exit		/* %ebx: no swapgs flag */
 	CFI_ENDPROC
-END(\sym)
+ENDPROC(\sym)
 .endm
 
 .macro paranoidzeroentry sym do_sym
@@ -1043,15 +1367,25 @@ ENTRY(\sym)
 	CFI_ADJUST_CFA_OFFSET ORIG_RAX-R15
 	call save_paranoid
 	TRACE_IRQS_OFF
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	testb $3, CS(%rsp)
+	jnz 1f
+	pax_enter_kernel
+	jmp 2f
+1:	pax_enter_kernel_user
+2:
+#else
+	pax_enter_kernel
+#endif
 	movq %rsp,%rdi		/* pt_regs pointer */
 	xorl %esi,%esi		/* no error code */
 	call \do_sym
 	jmp paranoid_exit	/* %ebx: no swapgs flag */
 	CFI_ENDPROC
-END(\sym)
+ENDPROC(\sym)
 .endm
 
-#define INIT_TSS_IST(x) PER_CPU_VAR(init_tss) + (TSS_ist + ((x) - 1) * 8)
+#define INIT_TSS_IST(x) (TSS_ist + ((x) - 1) * 8)(%r12)
 .macro paranoidzeroentry_ist sym do_sym ist
 ENTRY(\sym)
 	INTR_FRAME
@@ -1061,14 +1395,30 @@ ENTRY(\sym)
 	CFI_ADJUST_CFA_OFFSET ORIG_RAX-R15
 	call save_paranoid
 	TRACE_IRQS_OFF
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	testb $3, CS(%rsp)
+	jnz 1f
+	pax_enter_kernel
+	jmp 2f
+1:	pax_enter_kernel_user
+2:
+#else
+	pax_enter_kernel
+#endif
 	movq %rsp,%rdi		/* pt_regs pointer */
 	xorl %esi,%esi		/* no error code */
+#ifdef CONFIG_SMP
+	imul $TSS_size, PER_CPU_VAR(cpu_number), %r12d
+	lea init_tss(%r12), %r12
+#else
+	lea init_tss(%rip), %r12
+#endif
 	subq $EXCEPTION_STKSZ, INIT_TSS_IST(\ist)
 	call \do_sym
 	addq $EXCEPTION_STKSZ, INIT_TSS_IST(\ist)
 	jmp paranoid_exit	/* %ebx: no swapgs flag */
 	CFI_ENDPROC
-END(\sym)
+ENDPROC(\sym)
 .endm
 
 .macro errorentry sym do_sym
@@ -1079,13 +1429,23 @@ ENTRY(\sym)
 	CFI_ADJUST_CFA_OFFSET ORIG_RAX-R15
 	call error_entry
 	DEFAULT_FRAME 0
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	testb $3, CS(%rsp)
+	jnz 1f
+	pax_enter_kernel
+	jmp 2f
+1:	pax_enter_kernel_user
+2:
+#else
+	pax_enter_kernel
+#endif
 	movq %rsp,%rdi			/* pt_regs pointer */
 	movq ORIG_RAX(%rsp),%rsi	/* get error code */
 	movq $-1,ORIG_RAX(%rsp)		/* no syscall to restart */
 	call \do_sym
 	jmp error_exit			/* %ebx: no swapgs flag */
 	CFI_ENDPROC
-END(\sym)
+ENDPROC(\sym)
 .endm
 
 	/* error code is on the stack already */
@@ -1098,13 +1458,23 @@ ENTRY(\sym)
 	call save_paranoid
 	DEFAULT_FRAME 0
 	TRACE_IRQS_OFF
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	testb $3, CS(%rsp)
+	jnz 1f
+	pax_enter_kernel
+	jmp 2f
+1:	pax_enter_kernel_user
+2:
+#else
+	pax_enter_kernel
+#endif
 	movq %rsp,%rdi			/* pt_regs pointer */
 	movq ORIG_RAX(%rsp),%rsi	/* get error code */
 	movq $-1,ORIG_RAX(%rsp)		/* no syscall to restart */
 	call \do_sym
 	jmp paranoid_exit		/* %ebx: no swapgs flag */
 	CFI_ENDPROC
-END(\sym)
+ENDPROC(\sym)
 .endm
 
 zeroentry divide_error do_divide_error
@@ -1134,9 +1504,10 @@ gs_change:
 2:	mfence		/* workaround */
 	SWAPGS
 	popfq_cfi
+	pax_force_retaddr
 	ret
 	CFI_ENDPROC
-END(native_load_gs_index)
+ENDPROC(native_load_gs_index)
 
 	.section __ex_table,"a"
 	.align 8
@@ -1158,13 +1529,14 @@ ENTRY(kernel_thread_helper)
 	 * Here we are in the child and the registers are set as they were
 	 * at kernel_thread() invocation in the parent.
 	 */
+	pax_force_fptr %rsi
 	call *%rsi
 	# exit
 	mov %eax, %edi
 	call do_exit
 	ud2			# padding for call trace
 	CFI_ENDPROC
-END(kernel_thread_helper)
+ENDPROC(kernel_thread_helper)
 
 /*
  * execve(). This function needs to use IRET, not SYSRET, to set up all state properly.
@@ -1191,11 +1563,11 @@ ENTRY(kernel_execve)
 	RESTORE_REST
 	testq %rax,%rax
 	je int_ret_from_sys_call
-	RESTORE_ARGS
 	UNFAKE_STACK_FRAME
+	pax_force_retaddr
 	ret
 	CFI_ENDPROC
-END(kernel_execve)
+ENDPROC(kernel_execve)
 
 /* Call softirq on interrupt stack. Interrupts are off. */
 ENTRY(call_softirq)
@@ -1213,9 +1585,10 @@ ENTRY(call_softirq)
 	CFI_DEF_CFA_REGISTER	rsp
 	CFI_ADJUST_CFA_OFFSET   -8
 	decl PER_CPU_VAR(irq_count)
+	pax_force_retaddr
 	ret
 	CFI_ENDPROC
-END(call_softirq)
+ENDPROC(call_softirq)
 
 #ifdef CONFIG_XEN
 zeroentry xen_hypervisor_callback xen_do_hypervisor_callback
@@ -1253,7 +1626,7 @@ ENTRY(xen_do_hypervisor_callback)   # do
 	decl PER_CPU_VAR(irq_count)
 	jmp  error_exit
 	CFI_ENDPROC
-END(xen_do_hypervisor_callback)
+ENDPROC(xen_do_hypervisor_callback)
 
 /*
  * Hypervisor uses this for application faults while it executes.
@@ -1312,7 +1685,7 @@ ENTRY(xen_failsafe_callback)
 	SAVE_ALL
 	jmp error_exit
 	CFI_ENDPROC
-END(xen_failsafe_callback)
+ENDPROC(xen_failsafe_callback)
 
 apicinterrupt XEN_HVM_EVTCHN_CALLBACK \
 	xen_hvm_callback_vector xen_evtchn_do_upcall
@@ -1361,16 +1734,31 @@ ENTRY(paranoid_exit)
 	TRACE_IRQS_OFF
 	testl %ebx,%ebx				/* swapgs needed? */
 	jnz paranoid_restore
-	testl $3,CS(%rsp)
+	testb $3,CS(%rsp)
 	jnz   paranoid_userspace
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	pax_exit_kernel
+	TRACE_IRQS_IRETQ 0
+	SWAPGS_UNSAFE_STACK
+	RESTORE_ALL 8
+	pax_force_retaddr_bts
+	jmp irq_return
+#endif
 paranoid_swapgs:
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	pax_exit_kernel_user
+#else
+	pax_exit_kernel
+#endif
 	TRACE_IRQS_IRETQ 0
 	SWAPGS_UNSAFE_STACK
 	RESTORE_ALL 8
 	jmp irq_return
 paranoid_restore:
+	pax_exit_kernel
 	TRACE_IRQS_IRETQ 0
 	RESTORE_ALL 8
+	pax_force_retaddr_bts
 	jmp irq_return
 paranoid_userspace:
 	GET_THREAD_INFO(%rcx)
@@ -1399,7 +1787,7 @@ paranoid_schedule:
 	TRACE_IRQS_OFF
 	jmp paranoid_userspace
 	CFI_ENDPROC
-END(paranoid_exit)
+ENDPROC(paranoid_exit)
 
 /*
  * Exception entry point. This expects an error code/orig_rax on the stack.
@@ -1426,12 +1814,13 @@ ENTRY(error_entry)
 	movq_cfi r14, R14+8
 	movq_cfi r15, R15+8
 	xorl %ebx,%ebx
-	testl $3,CS+8(%rsp)
+	testb $3,CS+8(%rsp)
 	je error_kernelspace
 error_swapgs:
 	SWAPGS
 error_sti:
 	TRACE_IRQS_OFF
+	pax_force_retaddr_bts
 	ret
 
 /*
@@ -1458,7 +1847,7 @@ bstep_iret:
 	movq %rcx,RIP+8(%rsp)
 	jmp error_swapgs
 	CFI_ENDPROC
-END(error_entry)
+ENDPROC(error_entry)
 
 
 /* ebx:	no swapgs flag (1: don't need swapgs, 0: need it) */
@@ -1478,7 +1867,7 @@ ENTRY(error_exit)
 	jnz retint_careful
 	jmp retint_swapgs
 	CFI_ENDPROC
-END(error_exit)
+ENDPROC(error_exit)
 
 /*
  * Test if a given stack is an NMI stack or not.
@@ -1535,9 +1924,11 @@ ENTRY(nmi)
 	 * If %cs was not the kernel segment, then the NMI triggered in user
 	 * space, which means it is definitely not nested.
 	 */
+	cmpl $__KERNEXEC_KERNEL_CS, 16(%rsp)
+	je 1f
 	cmpl $__KERNEL_CS, 16(%rsp)
 	jne first_nmi
-
+1:
 	/*
 	 * Check the special variable on the stack to see if NMIs are
 	 * executing.
@@ -1659,6 +2050,16 @@ restart_nmi:
 	 */
 	call save_paranoid
 	DEFAULT_FRAME 0
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	testb $3, CS(%rsp)
+	jnz 1f
+	pax_enter_kernel
+	jmp 2f
+1:	pax_enter_kernel_user
+2:
+#else
+	pax_enter_kernel
+#endif
 	/* paranoidentry do_nmi, 0; without TRACE_IRQS_OFF */
 	movq %rsp,%rdi
 	movq $-1,%rsi
@@ -1666,14 +2067,25 @@ restart_nmi:
 	testl %ebx,%ebx				/* swapgs needed? */
 	jnz nmi_restore
 nmi_swapgs:
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	pax_exit_kernel_user
+#else
+	pax_exit_kernel
+#endif
 	SWAPGS_UNSAFE_STACK
+	RESTORE_ALL 8
+	/* Clear the NMI executing stack variable */
+	movq $0, 10*8(%rsp)
+	jmp irq_return
 nmi_restore:
+	pax_exit_kernel
 	RESTORE_ALL 8
+	pax_force_retaddr_bts
 	/* Clear the NMI executing stack variable */
 	movq $0, 10*8(%rsp)
 	jmp irq_return
 	CFI_ENDPROC
-END(nmi)
+ENDPROC(nmi)
 
 	/*
 	 * If an NMI hit an iret because of an exception or breakpoint,
@@ -1700,7 +2112,7 @@ ENTRY(ignore_sysret)
 	mov $-ENOSYS,%eax
 	sysret
 	CFI_ENDPROC
-END(ignore_sysret)
+ENDPROC(ignore_sysret)
 
 /*
  * End of kprobes section
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/ftrace.c linux-3.3.8-pax/arch/x86/kernel/ftrace.c
--- linux-3.3.8/arch/x86/kernel/ftrace.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/ftrace.c	2012-03-19 10:43:43.172034695 +0100
@@ -126,7 +126,7 @@ static void *mod_code_ip;		/* holds the
 static const void *mod_code_newcode;	/* holds the text to write to the IP */
 
 static unsigned nmi_wait_count;
-static atomic_t nmi_update_count = ATOMIC_INIT(0);
+static atomic_unchecked_t nmi_update_count = ATOMIC_INIT(0);
 
 int ftrace_arch_read_dyn_info(char *buf, int size)
 {
@@ -134,7 +134,7 @@ int ftrace_arch_read_dyn_info(char *buf,
 
 	r = snprintf(buf, size, "%u %u",
 		     nmi_wait_count,
-		     atomic_read(&nmi_update_count));
+		     atomic_read_unchecked(&nmi_update_count));
 	return r;
 }
 
@@ -177,8 +177,10 @@ void ftrace_nmi_enter(void)
 
 	if (atomic_inc_return(&nmi_running) & MOD_CODE_WRITE_FLAG) {
 		smp_rmb();
+		pax_open_kernel();
 		ftrace_mod_code();
-		atomic_inc(&nmi_update_count);
+		pax_close_kernel();
+		atomic_inc_unchecked(&nmi_update_count);
 	}
 	/* Must have previous changes seen before executions */
 	smp_mb();
@@ -271,6 +273,8 @@ ftrace_modify_code(unsigned long ip, uns
 {
 	unsigned char replaced[MCOUNT_INSN_SIZE];
 
+	ip = ktla_ktva(ip);
+
 	/*
 	 * Note: Due to modules and __init, code can
 	 *  disappear and change, we need to protect against faulting
@@ -327,7 +331,7 @@ int ftrace_update_ftrace_func(ftrace_fun
 	unsigned char old[MCOUNT_INSN_SIZE], *new;
 	int ret;
 
-	memcpy(old, &ftrace_call, MCOUNT_INSN_SIZE);
+	memcpy(old, (void *)ktla_ktva((unsigned long)ftrace_call), MCOUNT_INSN_SIZE);
 	new = ftrace_call_replace(ip, (unsigned long)func);
 	ret = ftrace_modify_code(ip, old, new);
 
@@ -353,6 +357,8 @@ static int ftrace_mod_jmp(unsigned long
 {
 	unsigned char code[MCOUNT_INSN_SIZE];
 
+	ip = ktla_ktva(ip);
+
 	if (probe_kernel_read(code, (void *)ip, MCOUNT_INSN_SIZE))
 		return -EFAULT;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/head32.c linux-3.3.8-pax/arch/x86/kernel/head32.c
--- linux-3.3.8/arch/x86/kernel/head32.c	2012-03-19 10:38:56.544049999 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/head32.c	2012-03-19 10:43:43.172034695 +0100
@@ -19,6 +19,7 @@
 #include <asm/io_apic.h>
 #include <asm/bios_ebda.h>
 #include <asm/tlbflush.h>
+#include <asm/boot.h>
 
 static void __init i386_default_early_setup(void)
 {
@@ -31,8 +32,7 @@ static void __init i386_default_early_se
 
 void __init i386_start_kernel(void)
 {
-	memblock_reserve(__pa_symbol(&_text),
-			 __pa_symbol(&__bss_stop) - __pa_symbol(&_text));
+	memblock_reserve(LOAD_PHYSICAL_ADDR, __pa_symbol(&__bss_stop) - LOAD_PHYSICAL_ADDR);
 
 #ifdef CONFIG_BLK_DEV_INITRD
 	/* Reserve INITRD */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/head_32.S linux-3.3.8-pax/arch/x86/kernel/head_32.S
--- linux-3.3.8/arch/x86/kernel/head_32.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/head_32.S	2012-03-19 10:43:43.176034695 +0100
@@ -25,6 +25,12 @@
 /* Physical address */
 #define pa(X) ((X) - __PAGE_OFFSET)
 
+#ifdef CONFIG_PAX_KERNEXEC
+#define ta(X) (X)
+#else
+#define ta(X) ((X) - __PAGE_OFFSET)
+#endif
+
 /*
  * References to members of the new_cpu_data structure.
  */
@@ -54,11 +60,7 @@
  * and small than max_low_pfn, otherwise will waste some page table entries
  */
 
-#if PTRS_PER_PMD > 1
-#define PAGE_TABLE_SIZE(pages) (((pages) / PTRS_PER_PMD) + PTRS_PER_PGD)
-#else
-#define PAGE_TABLE_SIZE(pages) ((pages) / PTRS_PER_PGD)
-#endif
+#define PAGE_TABLE_SIZE(pages) ((pages) / PTRS_PER_PTE)
 
 /* Number of possible pages in the lowmem region */
 LOWMEM_PAGES = (((1<<32) - __PAGE_OFFSET) >> PAGE_SHIFT)
@@ -77,6 +79,12 @@ INIT_MAP_SIZE = PAGE_TABLE_SIZE(KERNEL_P
 RESERVE_BRK(pagetables, INIT_MAP_SIZE)
 
 /*
+ * Real beginning of normal "text" segment
+ */
+ENTRY(stext)
+ENTRY(_stext)
+
+/*
  * 32-bit kernel entrypoint; only used by the boot CPU.  On entry,
  * %esi points to the real-mode code as a 32-bit pointer.
  * CS and DS must be 4 GB flat segments, but we don't depend on
@@ -84,6 +92,13 @@ RESERVE_BRK(pagetables, INIT_MAP_SIZE)
  * can.
  */
 __HEAD
+
+#ifdef CONFIG_PAX_KERNEXEC
+	jmp startup_32
+/* PaX: fill first page in .text with int3 to catch NULL derefs in kernel mode */
+.fill PAGE_SIZE-5,1,0xcc
+#endif
+
 ENTRY(startup_32)
 	movl pa(stack_start),%ecx
 	
@@ -105,6 +120,57 @@ ENTRY(startup_32)
 2:
 	leal -__PAGE_OFFSET(%ecx),%esp
 
+#ifdef CONFIG_SMP
+	movl $pa(cpu_gdt_table),%edi
+	movl $__per_cpu_load,%eax
+	movw %ax,__KERNEL_PERCPU + 2(%edi)
+	rorl $16,%eax
+	movb %al,__KERNEL_PERCPU + 4(%edi)
+	movb %ah,__KERNEL_PERCPU + 7(%edi)
+	movl $__per_cpu_end - 1,%eax
+	subl $__per_cpu_start,%eax
+	movw %ax,__KERNEL_PERCPU + 0(%edi)
+#endif
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	movl $NR_CPUS,%ecx
+	movl $pa(cpu_gdt_table),%edi
+1:
+	movl $((((__PAGE_OFFSET-1) & 0xf0000000) >> 12) | 0x00c09700),GDT_ENTRY_KERNEL_DS * 8 + 4(%edi)
+	movl $((((__PAGE_OFFSET-1) & 0xf0000000) >> 12) | 0x00c0fb00),GDT_ENTRY_DEFAULT_USER_CS * 8 + 4(%edi)
+	movl $((((__PAGE_OFFSET-1) & 0xf0000000) >> 12) | 0x00c0f300),GDT_ENTRY_DEFAULT_USER_DS * 8 + 4(%edi)
+	addl $PAGE_SIZE_asm,%edi
+	loop 1b
+#endif
+
+#ifdef CONFIG_PAX_KERNEXEC
+	movl $pa(boot_gdt),%edi
+	movl $__LOAD_PHYSICAL_ADDR,%eax
+	movw %ax,__BOOT_CS + 2(%edi)
+	rorl $16,%eax
+	movb %al,__BOOT_CS + 4(%edi)
+	movb %ah,__BOOT_CS + 7(%edi)
+	rorl $16,%eax
+
+	ljmp $(__BOOT_CS),$1f
+1:
+
+	movl $NR_CPUS,%ecx
+	movl $pa(cpu_gdt_table),%edi
+	addl $__PAGE_OFFSET,%eax
+1:
+	movw %ax,__KERNEL_CS + 2(%edi)
+	movw %ax,__KERNEXEC_KERNEL_CS + 2(%edi)
+	rorl $16,%eax
+	movb %al,__KERNEL_CS + 4(%edi)
+	movb %al,__KERNEXEC_KERNEL_CS + 4(%edi)
+	movb %ah,__KERNEL_CS + 7(%edi)
+	movb %ah,__KERNEXEC_KERNEL_CS + 7(%edi)
+	rorl $16,%eax
+	addl $PAGE_SIZE_asm,%edi
+	loop 1b
+#endif
+
 /*
  * Clear BSS first so that there are no surprises...
  */
@@ -195,8 +261,11 @@ ENTRY(startup_32)
 	movl %eax, pa(max_pfn_mapped)
 
 	/* Do early initialization of the fixmap area */
-	movl $pa(initial_pg_fixmap)+PDE_IDENT_ATTR,%eax
-	movl %eax,pa(initial_pg_pmd+0x1000*KPMDS-8)
+#ifdef CONFIG_COMPAT_VDSO
+	movl $pa(initial_pg_fixmap)+PDE_IDENT_ATTR+_PAGE_USER,pa(initial_pg_pmd+0x1000*KPMDS-8)
+#else
+	movl $pa(initial_pg_fixmap)+PDE_IDENT_ATTR,pa(initial_pg_pmd+0x1000*KPMDS-8)
+#endif
 #else	/* Not PAE */
 
 page_pde_offset = (__PAGE_OFFSET >> 20);
@@ -226,8 +295,11 @@ page_pde_offset = (__PAGE_OFFSET >> 20);
 	movl %eax, pa(max_pfn_mapped)
 
 	/* Do early initialization of the fixmap area */
-	movl $pa(initial_pg_fixmap)+PDE_IDENT_ATTR,%eax
-	movl %eax,pa(initial_page_table+0xffc)
+#ifdef CONFIG_COMPAT_VDSO
+	movl $pa(initial_pg_fixmap)+PDE_IDENT_ATTR+_PAGE_USER,pa(initial_page_table+0xffc)
+#else
+	movl $pa(initial_pg_fixmap)+PDE_IDENT_ATTR,pa(initial_page_table+0xffc)
+#endif
 #endif
 
 #ifdef CONFIG_PARAVIRT
@@ -241,9 +313,7 @@ page_pde_offset = (__PAGE_OFFSET >> 20);
 	cmpl $num_subarch_entries, %eax
 	jae bad_subarch
 
-	movl pa(subarch_entries)(,%eax,4), %eax
-	subl $__PAGE_OFFSET, %eax
-	jmp *%eax
+	jmp *pa(subarch_entries)(,%eax,4)
 
 bad_subarch:
 WEAK(lguest_entry)
@@ -255,10 +325,10 @@ WEAK(xen_entry)
 	__INITDATA
 
 subarch_entries:
-	.long default_entry		/* normal x86/PC */
-	.long lguest_entry		/* lguest hypervisor */
-	.long xen_entry			/* Xen hypervisor */
-	.long default_entry		/* Moorestown MID */
+	.long ta(default_entry)		/* normal x86/PC */
+	.long ta(lguest_entry)		/* lguest hypervisor */
+	.long ta(xen_entry)		/* Xen hypervisor */
+	.long ta(default_entry)		/* Moorestown MID */
 num_subarch_entries = (. - subarch_entries) / 4
 .previous
 #else
@@ -312,6 +382,7 @@ default_entry:
 	orl %edx,%eax
 	movl %eax,%cr4
 
+#ifdef CONFIG_X86_PAE
 	testb $X86_CR4_PAE, %al		# check if PAE is enabled
 	jz 6f
 
@@ -340,6 +411,9 @@ default_entry:
 	/* Make changes effective */
 	wrmsr
 
+	btsl $_PAGE_BIT_NX-32,pa(__supported_pte_mask+4)
+#endif
+
 6:
 
 /*
@@ -443,7 +517,7 @@ is386:	movl $2,%ecx		# set MP
 1:	movl $(__KERNEL_DS),%eax	# reload all the segment registers
 	movl %eax,%ss			# after changing gdt.
 
-	movl $(__USER_DS),%eax		# DS/ES contains default USER segment
+#	movl $(__KERNEL_DS),%eax	# DS/ES contains default KERNEL segment
 	movl %eax,%ds
 	movl %eax,%es
 
@@ -457,15 +531,22 @@ is386:	movl $2,%ecx		# set MP
 	 */
 	cmpb $0,ready
 	jne 1f
-	movl $gdt_page,%eax
+	movl $cpu_gdt_table,%eax
 	movl $stack_canary,%ecx
+#ifdef CONFIG_SMP
+	addl $__per_cpu_load,%ecx
+#endif
 	movw %cx, 8 * GDT_ENTRY_STACK_CANARY + 2(%eax)
 	shrl $16, %ecx
 	movb %cl, 8 * GDT_ENTRY_STACK_CANARY + 4(%eax)
 	movb %ch, 8 * GDT_ENTRY_STACK_CANARY + 7(%eax)
 1:
-#endif
 	movl $(__KERNEL_STACK_CANARY),%eax
+#elif defined(CONFIG_PAX_MEMORY_UDEREF)
+	movl $(__USER_DS),%eax
+#else
+	xorl %eax,%eax
+#endif
 	movl %eax,%gs
 
 	xorl %eax,%eax			# Clear LDT
@@ -558,22 +639,22 @@ early_page_fault:
 	jmp early_fault
 
 early_fault:
-	cld
 #ifdef CONFIG_PRINTK
+	cmpl $1,%ss:early_recursion_flag
+	je hlt_loop
+	incl %ss:early_recursion_flag
+	cld
 	pusha
 	movl $(__KERNEL_DS),%eax
 	movl %eax,%ds
 	movl %eax,%es
-	cmpl $2,early_recursion_flag
-	je hlt_loop
-	incl early_recursion_flag
 	movl %cr2,%eax
 	pushl %eax
 	pushl %edx		/* trapno */
 	pushl $fault_msg
 	call printk
+;	call dump_stack
 #endif
-	call dump_stack
 hlt_loop:
 	hlt
 	jmp hlt_loop
@@ -581,8 +662,11 @@ hlt_loop:
 /* This is the default interrupt "handler" :-) */
 	ALIGN
 ignore_int:
-	cld
 #ifdef CONFIG_PRINTK
+	cmpl $2,%ss:early_recursion_flag
+	je hlt_loop
+	incl %ss:early_recursion_flag
+	cld
 	pushl %eax
 	pushl %ecx
 	pushl %edx
@@ -591,9 +675,6 @@ ignore_int:
 	movl $(__KERNEL_DS),%eax
 	movl %eax,%ds
 	movl %eax,%es
-	cmpl $2,early_recursion_flag
-	je hlt_loop
-	incl early_recursion_flag
 	pushl 16(%esp)
 	pushl 24(%esp)
 	pushl 32(%esp)
@@ -622,29 +703,43 @@ ENTRY(initial_code)
 /*
  * BSS section
  */
-__PAGE_ALIGNED_BSS
-	.align PAGE_SIZE
 #ifdef CONFIG_X86_PAE
+.section .initial_pg_pmd,"a",@progbits
 initial_pg_pmd:
 	.fill 1024*KPMDS,4,0
 #else
+.section .initial_page_table,"a",@progbits
 ENTRY(initial_page_table)
 	.fill 1024,4,0
 #endif
+.section .initial_pg_fixmap,"a",@progbits
 initial_pg_fixmap:
 	.fill 1024,4,0
+.section .empty_zero_page,"a",@progbits
 ENTRY(empty_zero_page)
 	.fill 4096,1,0
+.section .swapper_pg_dir,"a",@progbits
 ENTRY(swapper_pg_dir)
+#ifdef CONFIG_X86_PAE
+	.fill 4,8,0
+#else
 	.fill 1024,4,0
+#endif
+
+/*
+ * The IDT has to be page-aligned to simplify the Pentium
+ * F0 0F bug workaround.. We have a special link segment
+ * for this.
+ */
+.section .idt,"a",@progbits
+ENTRY(idt_table)
+	.fill 256,8,0
 
 /*
  * This starts the data section.
  */
 #ifdef CONFIG_X86_PAE
-__PAGE_ALIGNED_DATA
-	/* Page-aligned for the benefit of paravirt? */
-	.align PAGE_SIZE
+.section .initial_page_table,"a",@progbits
 ENTRY(initial_page_table)
 	.long	pa(initial_pg_pmd+PGD_IDENT_ATTR),0	/* low identity map */
 # if KPMDS == 3
@@ -663,18 +758,27 @@ ENTRY(initial_page_table)
 #  error "Kernel PMDs should be 1, 2 or 3"
 # endif
 	.align PAGE_SIZE		/* needs to be page-sized too */
+
+#ifdef CONFIG_PAX_PER_CPU_PGD
+ENTRY(cpu_pgd)
+	.rept NR_CPUS
+	.fill	4,8,0
+	.endr
+#endif
+
 #endif
 
 .data
 .balign 4
 ENTRY(stack_start)
-	.long init_thread_union+THREAD_SIZE
+	.long init_thread_union+THREAD_SIZE-8
+
+ready:	.byte 0
 
+.section .rodata,"a",@progbits
 early_recursion_flag:
 	.long 0
 
-ready:	.byte 0
-
 int_msg:
 	.asciz "Unknown interrupt or fault at: %p %p %p\n"
 
@@ -707,7 +811,7 @@ fault_msg:
 	.word 0				# 32 bit align gdt_desc.address
 boot_gdt_descr:
 	.word __BOOT_DS+7
-	.long boot_gdt - __PAGE_OFFSET
+	.long pa(boot_gdt)
 
 	.word 0				# 32-bit align idt_desc.address
 idt_descr:
@@ -718,7 +822,7 @@ idt_descr:
 	.word 0				# 32 bit align gdt_desc.address
 ENTRY(early_gdt_descr)
 	.word GDT_ENTRIES*8-1
-	.long gdt_page			/* Overwritten for secondary CPUs */
+	.long cpu_gdt_table		/* Overwritten for secondary CPUs */
 
 /*
  * The boot_gdt must mirror the equivalent in setup.S and is
@@ -727,5 +831,65 @@ ENTRY(early_gdt_descr)
 	.align L1_CACHE_BYTES
 ENTRY(boot_gdt)
 	.fill GDT_ENTRY_BOOT_CS,8,0
-	.quad 0x00cf9a000000ffff	/* kernel 4GB code at 0x00000000 */
-	.quad 0x00cf92000000ffff	/* kernel 4GB data at 0x00000000 */
+	.quad 0x00cf9b000000ffff	/* kernel 4GB code at 0x00000000 */
+	.quad 0x00cf93000000ffff	/* kernel 4GB data at 0x00000000 */
+
+	.align PAGE_SIZE_asm
+ENTRY(cpu_gdt_table)
+	.rept NR_CPUS
+	.quad 0x0000000000000000	/* NULL descriptor */
+	.quad 0x0000000000000000	/* 0x0b reserved */
+	.quad 0x0000000000000000	/* 0x13 reserved */
+	.quad 0x0000000000000000	/* 0x1b reserved */
+
+#ifdef CONFIG_PAX_KERNEXEC
+	.quad 0x00cf9b000000ffff	/* 0x20 alternate kernel 4GB code at 0x00000000 */
+#else
+	.quad 0x0000000000000000	/* 0x20 unused */
+#endif
+
+	.quad 0x0000000000000000	/* 0x28 unused */
+	.quad 0x0000000000000000	/* 0x33 TLS entry 1 */
+	.quad 0x0000000000000000	/* 0x3b TLS entry 2 */
+	.quad 0x0000000000000000	/* 0x43 TLS entry 3 */
+	.quad 0x0000000000000000	/* 0x4b reserved */
+	.quad 0x0000000000000000	/* 0x53 reserved */
+	.quad 0x0000000000000000	/* 0x5b reserved */
+
+	.quad 0x00cf9b000000ffff	/* 0x60 kernel 4GB code at 0x00000000 */
+	.quad 0x00cf93000000ffff	/* 0x68 kernel 4GB data at 0x00000000 */
+	.quad 0x00cffb000000ffff	/* 0x73 user 4GB code at 0x00000000 */
+	.quad 0x00cff3000000ffff	/* 0x7b user 4GB data at 0x00000000 */
+
+	.quad 0x0000000000000000	/* 0x80 TSS descriptor */
+	.quad 0x0000000000000000	/* 0x88 LDT descriptor */
+
+	/*
+	 * Segments used for calling PnP BIOS have byte granularity.
+	 * The code segments and data segments have fixed 64k limits,
+	 * the transfer segment sizes are set at run time.
+	 */
+	.quad 0x00409b000000ffff	/* 0x90 32-bit code */
+	.quad 0x00009b000000ffff	/* 0x98 16-bit code */
+	.quad 0x000093000000ffff	/* 0xa0 16-bit data */
+	.quad 0x0000930000000000	/* 0xa8 16-bit data */
+	.quad 0x0000930000000000	/* 0xb0 16-bit data */
+
+	/*
+	 * The APM segments have byte granularity and their bases
+	 * are set at run time.  All have 64k limits.
+	 */
+	.quad 0x00409b000000ffff	/* 0xb8 APM CS    code */
+	.quad 0x00009b000000ffff	/* 0xc0 APM CS 16 code (16 bit) */
+	.quad 0x004093000000ffff	/* 0xc8 APM DS    data */
+
+	.quad 0x00c0930000000000	/* 0xd0 - ESPFIX SS */
+	.quad 0x0040930000000000	/* 0xd8 - PERCPU */
+	.quad 0x0040910000000017	/* 0xe0 - STACK_CANARY */
+	.quad 0x0000000000000000	/* 0xe8 - PCIBIOS_CS */
+	.quad 0x0000000000000000	/* 0xf0 - PCIBIOS_DS */
+	.quad 0x0000000000000000	/* 0xf8 - GDT entry 31: double-fault TSS */
+
+	/* Be sure this is zeroed to avoid false validations in Xen */
+	.fill PAGE_SIZE_asm - GDT_SIZE,1,0
+	.endr
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/head_64.S linux-3.3.8-pax/arch/x86/kernel/head_64.S
--- linux-3.3.8/arch/x86/kernel/head_64.S	2012-03-19 10:38:56.544049999 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/head_64.S	2012-04-26 17:37:20.894011302 +0200
@@ -19,6 +19,8 @@
 #include <asm/cache.h>
 #include <asm/processor-flags.h>
 #include <asm/percpu.h>
+#include <asm/cpufeature.h>
+#include <asm/alternative-asm.h>
 
 #ifdef CONFIG_PARAVIRT
 #include <asm/asm-offsets.h>
@@ -38,6 +40,12 @@ L4_PAGE_OFFSET = pgd_index(__PAGE_OFFSET
 L3_PAGE_OFFSET = pud_index(__PAGE_OFFSET)
 L4_START_KERNEL = pgd_index(__START_KERNEL_map)
 L3_START_KERNEL = pud_index(__START_KERNEL_map)
+L4_VMALLOC_START = pgd_index(VMALLOC_START)
+L3_VMALLOC_START = pud_index(VMALLOC_START)
+L4_VMALLOC_END = pgd_index(VMALLOC_END)
+L3_VMALLOC_END = pud_index(VMALLOC_END)
+L4_VMEMMAP_START = pgd_index(VMEMMAP_START)
+L3_VMEMMAP_START = pud_index(VMEMMAP_START)
 
 	.text
 	__HEAD
@@ -85,35 +93,23 @@ startup_64:
 	 */
 	addq	%rbp, init_level4_pgt + 0(%rip)
 	addq	%rbp, init_level4_pgt + (L4_PAGE_OFFSET*8)(%rip)
+	addq	%rbp, init_level4_pgt + (L4_VMALLOC_START*8)(%rip)
+	addq	%rbp, init_level4_pgt + (L4_VMALLOC_END*8)(%rip)
+	addq	%rbp, init_level4_pgt + (L4_VMEMMAP_START*8)(%rip)
 	addq	%rbp, init_level4_pgt + (L4_START_KERNEL*8)(%rip)
 
 	addq	%rbp, level3_ident_pgt + 0(%rip)
+#ifndef CONFIG_XEN
+	addq	%rbp, level3_ident_pgt + 8(%rip)
+#endif
 
-	addq	%rbp, level3_kernel_pgt + (510*8)(%rip)
-	addq	%rbp, level3_kernel_pgt + (511*8)(%rip)
+	addq	%rbp, level3_vmemmap_pgt + (L3_VMEMMAP_START*8)(%rip)
 
-	addq	%rbp, level2_fixmap_pgt + (506*8)(%rip)
+	addq	%rbp, level3_kernel_pgt + (L3_START_KERNEL*8)(%rip)
+	addq	%rbp, level3_kernel_pgt + (L3_START_KERNEL*8+8)(%rip)
 
-	/* Add an Identity mapping if I am above 1G */
-	leaq	_text(%rip), %rdi
-	andq	$PMD_PAGE_MASK, %rdi
-
-	movq	%rdi, %rax
-	shrq	$PUD_SHIFT, %rax
-	andq	$(PTRS_PER_PUD - 1), %rax
-	jz	ident_complete
-
-	leaq	(level2_spare_pgt - __START_KERNEL_map + _KERNPG_TABLE)(%rbp), %rdx
-	leaq	level3_ident_pgt(%rip), %rbx
-	movq	%rdx, 0(%rbx, %rax, 8)
-
-	movq	%rdi, %rax
-	shrq	$PMD_SHIFT, %rax
-	andq	$(PTRS_PER_PMD - 1), %rax
-	leaq	__PAGE_KERNEL_IDENT_LARGE_EXEC(%rdi), %rdx
-	leaq	level2_spare_pgt(%rip), %rbx
-	movq	%rdx, 0(%rbx, %rax, 8)
-ident_complete:
+	addq	%rbp, level2_fixmap_pgt + (506*8)(%rip)
+	addq	%rbp, level2_fixmap_pgt + (507*8)(%rip)
 
 	/*
 	 * Fixup the kernel text+data virtual addresses. Note that
@@ -160,8 +156,8 @@ ENTRY(secondary_startup_64)
 	 * after the boot processor executes this code.
 	 */
 
-	/* Enable PAE mode and PGE */
-	movl	$(X86_CR4_PAE | X86_CR4_PGE), %eax
+	/* Enable PAE mode and PSE/PGE */
+	movl	$(X86_CR4_PSE | X86_CR4_PAE | X86_CR4_PGE), %eax
 	movq	%rax, %cr4
 
 	/* Setup early boot stage 4 level pagetables. */
@@ -183,9 +179,17 @@ ENTRY(secondary_startup_64)
 	movl	$MSR_EFER, %ecx
 	rdmsr
 	btsl	$_EFER_SCE, %eax	/* Enable System Call */
-	btl	$20,%edi		/* No Execute supported? */
+	btl	$(X86_FEATURE_NX & 31),%edi	/* No Execute supported? */
 	jnc     1f
 	btsl	$_EFER_NX, %eax
+	leaq	init_level4_pgt(%rip), %rdi
+#ifndef CONFIG_EFI
+	btsq	$_PAGE_BIT_NX, 8*L4_PAGE_OFFSET(%rdi)
+#endif
+	btsq	$_PAGE_BIT_NX, 8*L4_VMALLOC_START(%rdi)
+	btsq	$_PAGE_BIT_NX, 8*L4_VMALLOC_END(%rdi)
+	btsq	$_PAGE_BIT_NX, 8*L4_VMEMMAP_START(%rdi)
+	btsq	$_PAGE_BIT_NX, __supported_pte_mask(%rip)
 1:	wrmsr				/* Make changes effective */
 
 	/* Setup cr0 */
@@ -247,6 +251,7 @@ ENTRY(secondary_startup_64)
 	 * jump.  In addition we need to ensure %cs is set so we make this
 	 * a far return.
 	 */
+	pax_set_fptr_mask
 	movq	initial_code(%rip),%rax
 	pushq	$0		# fake return address to stop unwinder
 	pushq	$__KERNEL_CS	# set correct cs
@@ -269,7 +274,7 @@ ENTRY(secondary_startup_64)
 bad_address:
 	jmp bad_address
 
-	.section ".init.text","ax"
+	__INIT
 #ifdef CONFIG_EARLY_PRINTK
 	.globl early_idt_handlers
 early_idt_handlers:
@@ -314,18 +319,23 @@ ENTRY(early_idt_handler)
 #endif /* EARLY_PRINTK */
 1:	hlt
 	jmp 1b
+	.previous
 
 #ifdef CONFIG_EARLY_PRINTK
+	__INITDATA
 early_recursion_flag:
 	.long 0
+	.previous
 
+	.section .rodata,"a",@progbits
 early_idt_msg:
 	.asciz "PANIC: early exception %02lx rip %lx:%lx error %lx cr2 %lx\n"
 early_idt_ripmsg:
 	.asciz "RIP %s\n"
-#endif /* CONFIG_EARLY_PRINTK */
 	.previous
+#endif /* CONFIG_EARLY_PRINTK */
 
+	.section .rodata,"a",@progbits
 #define NEXT_PAGE(name) \
 	.balign	PAGE_SIZE; \
 ENTRY(name)
@@ -338,7 +348,6 @@ ENTRY(name)
 	i = i + 1 ;					\
 	.endr
 
-	.data
 	/*
 	 * This default setting generates an ident mapping at address 0x100000
 	 * and a mapping for the kernel that precisely maps virtual address
@@ -349,13 +358,41 @@ NEXT_PAGE(init_level4_pgt)
 	.quad	level3_ident_pgt - __START_KERNEL_map + _KERNPG_TABLE
 	.org	init_level4_pgt + L4_PAGE_OFFSET*8, 0
 	.quad	level3_ident_pgt - __START_KERNEL_map + _KERNPG_TABLE
+	.org	init_level4_pgt + L4_VMALLOC_START*8, 0
+	.quad	level3_vmalloc_start_pgt - __START_KERNEL_map + _KERNPG_TABLE
+	.org	init_level4_pgt + L4_VMALLOC_END*8, 0
+	.quad	level3_vmalloc_end_pgt - __START_KERNEL_map + _KERNPG_TABLE
+	.org	init_level4_pgt + L4_VMEMMAP_START*8, 0
+	.quad	level3_vmemmap_pgt - __START_KERNEL_map + _KERNPG_TABLE
 	.org	init_level4_pgt + L4_START_KERNEL*8, 0
 	/* (2^48-(2*1024*1024*1024))/(2^39) = 511 */
 	.quad	level3_kernel_pgt - __START_KERNEL_map + _PAGE_TABLE
 
+#ifdef CONFIG_PAX_PER_CPU_PGD
+NEXT_PAGE(cpu_pgd)
+	.rept NR_CPUS
+	.fill	512,8,0
+	.endr
+#endif
+
 NEXT_PAGE(level3_ident_pgt)
 	.quad	level2_ident_pgt - __START_KERNEL_map + _KERNPG_TABLE
+#ifdef CONFIG_XEN
 	.fill	511,8,0
+#else
+	.quad	level2_ident_pgt + PAGE_SIZE - __START_KERNEL_map + _KERNPG_TABLE
+	.fill	510,8,0
+#endif
+
+NEXT_PAGE(level3_vmalloc_start_pgt)
+	.fill	512,8,0
+
+NEXT_PAGE(level3_vmalloc_end_pgt)
+	.fill	512,8,0
+
+NEXT_PAGE(level3_vmemmap_pgt)
+	.fill	L3_VMEMMAP_START,8,0
+	.quad	level2_vmemmap_pgt - __START_KERNEL_map + _KERNPG_TABLE
 
 NEXT_PAGE(level3_kernel_pgt)
 	.fill	L3_START_KERNEL,8,0
@@ -363,20 +400,23 @@ NEXT_PAGE(level3_kernel_pgt)
 	.quad	level2_kernel_pgt - __START_KERNEL_map + _KERNPG_TABLE
 	.quad	level2_fixmap_pgt - __START_KERNEL_map + _PAGE_TABLE
 
+NEXT_PAGE(level2_vmemmap_pgt)
+	.fill	512,8,0
+
 NEXT_PAGE(level2_fixmap_pgt)
-	.fill	506,8,0
-	.quad	level1_fixmap_pgt - __START_KERNEL_map + _PAGE_TABLE
-	/* 8MB reserved for vsyscalls + a 2MB hole = 4 + 1 entries */
-	.fill	5,8,0
+	.fill	507,8,0
+	.quad	level1_vsyscall_pgt - __START_KERNEL_map + _PAGE_TABLE
+	/* 6MB reserved for vsyscalls + a 2MB hole = 3 + 1 entries */
+	.fill	4,8,0
 
-NEXT_PAGE(level1_fixmap_pgt)
+NEXT_PAGE(level1_vsyscall_pgt)
 	.fill	512,8,0
 
-NEXT_PAGE(level2_ident_pgt)
-	/* Since I easily can, map the first 1G.
+	/* Since I easily can, map the first 2G.
 	 * Don't set NX because code runs from these pages.
 	 */
-	PMDS(0, __PAGE_KERNEL_IDENT_LARGE_EXEC, PTRS_PER_PMD)
+NEXT_PAGE(level2_ident_pgt)
+	PMDS(0, __PAGE_KERNEL_IDENT_LARGE_EXEC, 2*PTRS_PER_PMD)
 
 NEXT_PAGE(level2_kernel_pgt)
 	/*
@@ -389,37 +429,59 @@ NEXT_PAGE(level2_kernel_pgt)
 	 *  If you want to increase this then increase MODULES_VADDR
 	 *  too.)
 	 */
-	PMDS(0, __PAGE_KERNEL_LARGE_EXEC,
-		KERNEL_IMAGE_SIZE/PMD_SIZE)
-
-NEXT_PAGE(level2_spare_pgt)
-	.fill   512, 8, 0
+	PMDS(0, __PAGE_KERNEL_LARGE_EXEC, KERNEL_IMAGE_SIZE/PMD_SIZE)
 
 #undef PMDS
 #undef NEXT_PAGE
 
-	.data
+	.align PAGE_SIZE
+ENTRY(cpu_gdt_table)
+	.rept NR_CPUS
+	.quad	0x0000000000000000	/* NULL descriptor */
+	.quad	0x00cf9b000000ffff	/* __KERNEL32_CS */
+	.quad	0x00af9b000000ffff	/* __KERNEL_CS */
+	.quad	0x00cf93000000ffff	/* __KERNEL_DS */
+	.quad	0x00cffb000000ffff	/* __USER32_CS */
+	.quad	0x00cff3000000ffff	/* __USER_DS, __USER32_DS  */
+	.quad	0x00affb000000ffff	/* __USER_CS */
+
+#ifdef CONFIG_PAX_KERNEXEC
+	.quad	0x00af9b000000ffff	/* __KERNEXEC_KERNEL_CS */
+#else
+	.quad	0x0			/* unused */
+#endif
+
+	.quad	0,0			/* TSS */
+	.quad	0,0			/* LDT */
+	.quad	0,0,0			/* three TLS descriptors */
+	.quad	0x0000f40000000000	/* node/CPU stored in limit */
+	/* asm/segment.h:GDT_ENTRIES must match this */
+
+	/* zero the remaining page */
+	.fill PAGE_SIZE / 8 - GDT_ENTRIES,8,0
+	.endr
+
 	.align 16
 	.globl early_gdt_descr
 early_gdt_descr:
 	.word	GDT_ENTRIES*8-1
 early_gdt_descr_base:
-	.quad	INIT_PER_CPU_VAR(gdt_page)
+	.quad	cpu_gdt_table
 
 ENTRY(phys_base)
 	/* This must match the first entry in level2_kernel_pgt */
 	.quad   0x0000000000000000
 
 #include "../../x86/xen/xen-head.S"
-	
-	.section .bss, "aw", @nobits
+
+	.section .rodata,"a",@progbits
 	.align L1_CACHE_BYTES
 ENTRY(idt_table)
-	.skip IDT_ENTRIES * 16
+	.fill 512,8,0
 
 	.align L1_CACHE_BYTES
 ENTRY(nmi_idt_table)
-	.skip IDT_ENTRIES * 16
+	.fill 512,8,0
 
 	__PAGE_ALIGNED_BSS
 	.align PAGE_SIZE
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/i386_ksyms_32.c linux-3.3.8-pax/arch/x86/kernel/i386_ksyms_32.c
--- linux-3.3.8/arch/x86/kernel/i386_ksyms_32.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/i386_ksyms_32.c	2012-03-19 10:43:43.176034695 +0100
@@ -20,8 +20,12 @@ extern void cmpxchg8b_emu(void);
 EXPORT_SYMBOL(cmpxchg8b_emu);
 #endif
 
+EXPORT_SYMBOL_GPL(cpu_gdt_table);
+
 /* Networking helper routines. */
 EXPORT_SYMBOL(csum_partial_copy_generic);
+EXPORT_SYMBOL(csum_partial_copy_generic_to_user);
+EXPORT_SYMBOL(csum_partial_copy_generic_from_user);
 
 EXPORT_SYMBOL(__get_user_1);
 EXPORT_SYMBOL(__get_user_2);
@@ -36,3 +40,7 @@ EXPORT_SYMBOL(strstr);
 
 EXPORT_SYMBOL(csum_partial);
 EXPORT_SYMBOL(empty_zero_page);
+
+#ifdef CONFIG_PAX_KERNEXEC
+EXPORT_SYMBOL(__LOAD_PHYSICAL_ADDR);
+#endif
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/i8259.c linux-3.3.8-pax/arch/x86/kernel/i8259.c
--- linux-3.3.8/arch/x86/kernel/i8259.c	2011-10-24 12:48:26.251091774 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/i8259.c	2012-03-19 10:43:43.176034695 +0100
@@ -210,7 +210,7 @@ spurious_8259A_irq:
 			       "spurious 8259A interrupt: IRQ%d.\n", irq);
 			spurious_irq_mask |= irqmask;
 		}
-		atomic_inc(&irq_err_count);
+		atomic_inc_unchecked(&irq_err_count);
 		/*
 		 * Theoretically we do not have to handle this IRQ,
 		 * but in Linux this does not cause problems and is
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/init_task.c linux-3.3.8-pax/arch/x86/kernel/init_task.c
--- linux-3.3.8/arch/x86/kernel/init_task.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/init_task.c	2012-03-19 10:43:43.180034695 +0100
@@ -20,8 +20,7 @@ static struct sighand_struct init_sighan
  * way process stacks are handled. This is done by having a special
  * "init_task" linker map entry..
  */
-union thread_union init_thread_union __init_task_data =
-	{ INIT_THREAD_INFO(init_task) };
+union thread_union init_thread_union __init_task_data;
 
 /*
  * Initial task structure.
@@ -38,5 +37,5 @@ EXPORT_SYMBOL(init_task);
  * section. Since TSS's are completely CPU-local, we want them
  * on exact cacheline boundaries, to eliminate cacheline ping-pong.
  */
-DEFINE_PER_CPU_SHARED_ALIGNED(struct tss_struct, init_tss) = INIT_TSS;
-
+struct tss_struct init_tss[NR_CPUS] ____cacheline_internodealigned_in_smp = { [0 ... NR_CPUS-1] = INIT_TSS };
+EXPORT_SYMBOL(init_tss);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/ioport.c linux-3.3.8-pax/arch/x86/kernel/ioport.c
--- linux-3.3.8/arch/x86/kernel/ioport.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/ioport.c	2012-03-19 10:43:43.180034695 +0100
@@ -54,7 +54,7 @@ asmlinkage long sys_ioperm(unsigned long
 	 * because the ->io_bitmap_max value must match the bitmap
 	 * contents:
 	 */
-	tss = &per_cpu(init_tss, get_cpu());
+	tss = init_tss + get_cpu();
 
 	if (turn_on)
 		bitmap_clear(t->io_bitmap_ptr, from, num);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/irq_32.c linux-3.3.8-pax/arch/x86/kernel/irq_32.c
--- linux-3.3.8/arch/x86/kernel/irq_32.c	2012-03-19 10:38:56.548049999 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/irq_32.c	2012-03-19 10:43:43.180034695 +0100
@@ -39,7 +39,7 @@ static int check_stack_overflow(void)
 	__asm__ __volatile__("andl %%esp,%0" :
 			     "=r" (sp) : "0" (THREAD_SIZE - 1));
 
-	return sp < (sizeof(struct thread_info) + STACK_WARN);
+	return sp < STACK_WARN;
 }
 
 static void print_stack_overflow(void)
@@ -59,8 +59,8 @@ static inline void print_stack_overflow(
  * per-CPU IRQ handling contexts (thread information and stack)
  */
 union irq_ctx {
-	struct thread_info      tinfo;
-	u32                     stack[THREAD_SIZE/sizeof(u32)];
+	unsigned long		previous_esp;
+	u32			stack[THREAD_SIZE/sizeof(u32)];
 } __attribute__((aligned(THREAD_SIZE)));
 
 static DEFINE_PER_CPU(union irq_ctx *, hardirq_ctx);
@@ -80,10 +80,9 @@ static void call_on_stack(void *func, vo
 static inline int
 execute_on_irq_stack(int overflow, struct irq_desc *desc, int irq)
 {
-	union irq_ctx *curctx, *irqctx;
+	union irq_ctx *irqctx;
 	u32 *isp, arg1, arg2;
 
-	curctx = (union irq_ctx *) current_thread_info();
 	irqctx = __this_cpu_read(hardirq_ctx);
 
 	/*
@@ -92,21 +91,16 @@ execute_on_irq_stack(int overflow, struc
 	 * handler) we can't do that and just have to keep using the
 	 * current stack (which is the irq stack already after all)
 	 */
-	if (unlikely(curctx == irqctx))
+	if (unlikely((void *)current_stack_pointer - (void *)irqctx < THREAD_SIZE))
 		return 0;
 
 	/* build the stack frame on the IRQ stack */
-	isp = (u32 *) ((char *)irqctx + sizeof(*irqctx));
-	irqctx->tinfo.task = curctx->tinfo.task;
-	irqctx->tinfo.previous_esp = current_stack_pointer;
+	isp = (u32 *) ((char *)irqctx + sizeof(*irqctx) - 8);
+	irqctx->previous_esp = current_stack_pointer;
 
-	/*
-	 * Copy the softirq bits in preempt_count so that the
-	 * softirq checks work in the hardirq context.
-	 */
-	irqctx->tinfo.preempt_count =
-		(irqctx->tinfo.preempt_count & ~SOFTIRQ_MASK) |
-		(curctx->tinfo.preempt_count & SOFTIRQ_MASK);
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	__set_fs(MAKE_MM_SEG(0));
+#endif
 
 	if (unlikely(overflow))
 		call_on_stack(print_stack_overflow, isp);
@@ -118,6 +112,11 @@ execute_on_irq_stack(int overflow, struc
 		     :  "0" (irq),   "1" (desc),  "2" (isp),
 			"D" (desc->handle_irq)
 		     : "memory", "cc", "ecx");
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	__set_fs(current_thread_info()->addr_limit);
+#endif
+
 	return 1;
 }
 
@@ -126,29 +125,11 @@ execute_on_irq_stack(int overflow, struc
  */
 void __cpuinit irq_ctx_init(int cpu)
 {
-	union irq_ctx *irqctx;
-
 	if (per_cpu(hardirq_ctx, cpu))
 		return;
 
-	irqctx = page_address(alloc_pages_node(cpu_to_node(cpu),
-					       THREAD_FLAGS,
-					       THREAD_ORDER));
-	memset(&irqctx->tinfo, 0, sizeof(struct thread_info));
-	irqctx->tinfo.cpu		= cpu;
-	irqctx->tinfo.preempt_count	= HARDIRQ_OFFSET;
-	irqctx->tinfo.addr_limit	= MAKE_MM_SEG(0);
-
-	per_cpu(hardirq_ctx, cpu) = irqctx;
-
-	irqctx = page_address(alloc_pages_node(cpu_to_node(cpu),
-					       THREAD_FLAGS,
-					       THREAD_ORDER));
-	memset(&irqctx->tinfo, 0, sizeof(struct thread_info));
-	irqctx->tinfo.cpu		= cpu;
-	irqctx->tinfo.addr_limit	= MAKE_MM_SEG(0);
-
-	per_cpu(softirq_ctx, cpu) = irqctx;
+	per_cpu(hardirq_ctx, cpu) = page_address(alloc_pages_node(cpu_to_node(cpu), THREAD_FLAGS, THREAD_ORDER));
+	per_cpu(softirq_ctx, cpu) = page_address(alloc_pages_node(cpu_to_node(cpu), THREAD_FLAGS, THREAD_ORDER));
 
 	printk(KERN_DEBUG "CPU %u irqstacks, hard=%p soft=%p\n",
 	       cpu, per_cpu(hardirq_ctx, cpu),  per_cpu(softirq_ctx, cpu));
@@ -157,7 +138,6 @@ void __cpuinit irq_ctx_init(int cpu)
 asmlinkage void do_softirq(void)
 {
 	unsigned long flags;
-	struct thread_info *curctx;
 	union irq_ctx *irqctx;
 	u32 *isp;
 
@@ -167,15 +147,22 @@ asmlinkage void do_softirq(void)
 	local_irq_save(flags);
 
 	if (local_softirq_pending()) {
-		curctx = current_thread_info();
 		irqctx = __this_cpu_read(softirq_ctx);
-		irqctx->tinfo.task = curctx->task;
-		irqctx->tinfo.previous_esp = current_stack_pointer;
+		irqctx->previous_esp = current_stack_pointer;
 
 		/* build the stack frame on the softirq stack */
-		isp = (u32 *) ((char *)irqctx + sizeof(*irqctx));
+		isp = (u32 *) ((char *)irqctx + sizeof(*irqctx) - 8);
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+		__set_fs(MAKE_MM_SEG(0));
+#endif
 
 		call_on_stack(__do_softirq, isp);
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+		__set_fs(current_thread_info()->addr_limit);
+#endif
+
 		/*
 		 * Shouldn't happen, we returned above if in_interrupt():
 		 */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/irq_64.c linux-3.3.8-pax/arch/x86/kernel/irq_64.c
--- linux-3.3.8/arch/x86/kernel/irq_64.c	2012-03-19 10:38:56.548049999 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/irq_64.c	2012-03-19 10:43:43.180034695 +0100
@@ -44,7 +44,7 @@ static inline void stack_overflow_check(
 	u64 estack_top, estack_bottom;
 	u64 curbase = (u64)task_stack_page(current);
 
-	if (user_mode_vm(regs))
+	if (user_mode(regs))
 		return;
 
 	if (regs->sp >= curbase + sizeof(struct thread_info) +
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/irq.c linux-3.3.8-pax/arch/x86/kernel/irq.c
--- linux-3.3.8/arch/x86/kernel/irq.c	2012-03-19 10:38:56.548049999 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/irq.c	2012-03-19 10:43:43.180034695 +0100
@@ -18,7 +18,7 @@
 #include <asm/mce.h>
 #include <asm/hw_irq.h>
 
-atomic_t irq_err_count;
+atomic_unchecked_t irq_err_count;
 
 /* Function pointer for generic interrupt vector handling */
 void (*x86_platform_ipi_callback)(void) = NULL;
@@ -121,9 +121,9 @@ int arch_show_interrupts(struct seq_file
 		seq_printf(p, "%10u ", per_cpu(mce_poll_count, j));
 	seq_printf(p, "  Machine check polls\n");
 #endif
-	seq_printf(p, "%*s: %10u\n", prec, "ERR", atomic_read(&irq_err_count));
+	seq_printf(p, "%*s: %10u\n", prec, "ERR", atomic_read_unchecked(&irq_err_count));
 #if defined(CONFIG_X86_IO_APIC)
-	seq_printf(p, "%*s: %10u\n", prec, "MIS", atomic_read(&irq_mis_count));
+	seq_printf(p, "%*s: %10u\n", prec, "MIS", atomic_read_unchecked(&irq_mis_count));
 #endif
 	return 0;
 }
@@ -164,10 +164,10 @@ u64 arch_irq_stat_cpu(unsigned int cpu)
 
 u64 arch_irq_stat(void)
 {
-	u64 sum = atomic_read(&irq_err_count);
+	u64 sum = atomic_read_unchecked(&irq_err_count);
 
 #ifdef CONFIG_X86_IO_APIC
-	sum += atomic_read(&irq_mis_count);
+	sum += atomic_read_unchecked(&irq_mis_count);
 #endif
 	return sum;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/kdebugfs.c linux-3.3.8-pax/arch/x86/kernel/kdebugfs.c
--- linux-3.3.8/arch/x86/kernel/kdebugfs.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/kdebugfs.c	2012-04-08 23:55:36.432293103 +0200
@@ -28,6 +28,8 @@ struct setup_data_node {
 };
 
 static ssize_t setup_data_read(struct file *file, char __user *user_buf,
+			       size_t count, loff_t *ppos) __size_overflow(3);
+static ssize_t setup_data_read(struct file *file, char __user *user_buf,
 			       size_t count, loff_t *ppos)
 {
 	struct setup_data_node *node = file->private_data;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/kgdb.c linux-3.3.8-pax/arch/x86/kernel/kgdb.c
--- linux-3.3.8/arch/x86/kernel/kgdb.c	2012-04-15 15:08:29.006606367 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/kgdb.c	2012-04-15 15:08:34.562606007 +0200
@@ -126,11 +126,11 @@ char *dbg_get_reg(int regno, void *mem,
 #ifdef CONFIG_X86_32
 	switch (regno) {
 	case GDB_SS:
-		if (!user_mode_vm(regs))
+		if (!user_mode(regs))
 			*(unsigned long *)mem = __KERNEL_DS;
 		break;
 	case GDB_SP:
-		if (!user_mode_vm(regs))
+		if (!user_mode(regs))
 			*(unsigned long *)mem = kernel_stack_pointer(regs);
 		break;
 	case GDB_GS:
@@ -475,12 +475,12 @@ int kgdb_arch_handle_exception(int e_vec
 	case 'k':
 		/* clear the trace bit */
 		linux_regs->flags &= ~X86_EFLAGS_TF;
-		atomic_set(&kgdb_cpu_doing_single_step, -1);
+		atomic_set_unchecked(&kgdb_cpu_doing_single_step, -1);
 
 		/* set the trace bit if we're stepping */
 		if (remcomInBuffer[0] == 's') {
 			linux_regs->flags |= X86_EFLAGS_TF;
-			atomic_set(&kgdb_cpu_doing_single_step,
+			atomic_set_unchecked(&kgdb_cpu_doing_single_step,
 				   raw_smp_processor_id());
 		}
 
@@ -545,7 +545,7 @@ static int __kgdb_notify(struct die_args
 
 	switch (cmd) {
 	case DIE_DEBUG:
-		if (atomic_read(&kgdb_cpu_doing_single_step) != -1) {
+		if (atomic_read_unchecked(&kgdb_cpu_doing_single_step) != -1) {
 			if (user_mode(regs))
 				return single_step_cont(regs, args);
 			break;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/kprobes.c linux-3.3.8-pax/arch/x86/kernel/kprobes.c
--- linux-3.3.8/arch/x86/kernel/kprobes.c	2012-01-08 19:47:49.471472987 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/kprobes.c	2012-03-19 10:43:43.420034681 +0100
@@ -118,8 +118,11 @@ static void __kprobes __synthesize_relat
 	} __attribute__((packed)) *insn;
 
 	insn = (struct __arch_relative_insn *)from;
+
+	pax_open_kernel();
 	insn->raddr = (s32)((long)(to) - ((long)(from) + 5));
 	insn->op = op;
+	pax_close_kernel();
 }
 
 /* Insert a jump instruction at address 'from', which jumps to address 'to'.*/
@@ -156,7 +159,7 @@ static int __kprobes can_boost(kprobe_op
 	kprobe_opcode_t opcode;
 	kprobe_opcode_t *orig_opcodes = opcodes;
 
-	if (search_exception_tables((unsigned long)opcodes))
+	if (search_exception_tables(ktva_ktla((unsigned long)opcodes)))
 		return 0;	/* Page fault may occur on this address. */
 
 retry:
@@ -317,7 +320,9 @@ static int __kprobes __copy_instruction(
 		}
 	}
 	insn_get_length(&insn);
+	pax_open_kernel();
 	memcpy(dest, insn.kaddr, insn.length);
+	pax_close_kernel();
 
 #ifdef CONFIG_X86_64
 	if (insn_rip_relative(&insn)) {
@@ -341,7 +346,9 @@ static int __kprobes __copy_instruction(
 			  (u8 *) dest;
 		BUG_ON((s64) (s32) newdisp != newdisp); /* Sanity check.  */
 		disp = (u8 *) dest + insn_offset_displacement(&insn);
+		pax_open_kernel();
 		*(s32 *) disp = (s32) newdisp;
+		pax_close_kernel();
 	}
 #endif
 	return insn.length;
@@ -355,12 +362,12 @@ static void __kprobes arch_copy_kprobe(s
 	 */
 	__copy_instruction(p->ainsn.insn, p->addr, 0);
 
-	if (can_boost(p->addr))
+	if (can_boost(ktla_ktva(p->addr)))
 		p->ainsn.boostable = 0;
 	else
 		p->ainsn.boostable = -1;
 
-	p->opcode = *p->addr;
+	p->opcode = *(ktla_ktva(p->addr));
 }
 
 int __kprobes arch_prepare_kprobe(struct kprobe *p)
@@ -477,7 +484,7 @@ static void __kprobes setup_singlestep(s
 		 * nor set current_kprobe, because it doesn't use single
 		 * stepping.
 		 */
-		regs->ip = (unsigned long)p->ainsn.insn;
+		regs->ip = ktva_ktla((unsigned long)p->ainsn.insn);
 		preempt_enable_no_resched();
 		return;
 	}
@@ -496,7 +503,7 @@ static void __kprobes setup_singlestep(s
 	if (p->opcode == BREAKPOINT_INSTRUCTION)
 		regs->ip = (unsigned long)p->addr;
 	else
-		regs->ip = (unsigned long)p->ainsn.insn;
+		regs->ip = ktva_ktla((unsigned long)p->ainsn.insn);
 }
 
 /*
@@ -575,7 +582,7 @@ static int __kprobes kprobe_handler(stru
 				setup_singlestep(p, regs, kcb, 0);
 			return 1;
 		}
-	} else if (*addr != BREAKPOINT_INSTRUCTION) {
+	} else if (*(kprobe_opcode_t *)ktla_ktva((unsigned long)addr) != BREAKPOINT_INSTRUCTION) {
 		/*
 		 * The breakpoint instruction was removed right
 		 * after we hit it.  Another cpu has removed
@@ -683,6 +690,9 @@ static void __used __kprobes kretprobe_t
 			"	movq %rax, 152(%rsp)\n"
 			RESTORE_REGS_STRING
 			"	popfq\n"
+#ifdef KERNEXEC_PLUGIN
+			"	btsq $63,(%rsp)\n"
+#endif
 #else
 			"	pushf\n"
 			SAVE_REGS_STRING
@@ -820,7 +830,7 @@ static void __kprobes resume_execution(s
 		struct pt_regs *regs, struct kprobe_ctlblk *kcb)
 {
 	unsigned long *tos = stack_addr(regs);
-	unsigned long copy_ip = (unsigned long)p->ainsn.insn;
+	unsigned long copy_ip = ktva_ktla((unsigned long)p->ainsn.insn);
 	unsigned long orig_ip = (unsigned long)p->addr;
 	kprobe_opcode_t *insn = p->ainsn.insn;
 
@@ -1002,7 +1012,7 @@ int __kprobes kprobe_exceptions_notify(s
 	struct die_args *args = data;
 	int ret = NOTIFY_DONE;
 
-	if (args->regs && user_mode_vm(args->regs))
+	if (args->regs && user_mode(args->regs))
 		return ret;
 
 	switch (val) {
@@ -1384,7 +1394,7 @@ int __kprobes arch_prepare_optimized_kpr
 	 * Verify if the address gap is in 2GB range, because this uses
 	 * a relative jump.
 	 */
-	rel = (long)op->optinsn.insn - (long)op->kp.addr + RELATIVEJUMP_SIZE;
+	rel = (long)op->optinsn.insn - ktla_ktva((long)op->kp.addr) + RELATIVEJUMP_SIZE;
 	if (abs(rel) > 0x7fffffff)
 		return -ERANGE;
 
@@ -1405,11 +1415,11 @@ int __kprobes arch_prepare_optimized_kpr
 	synthesize_set_arg1(buf + TMPL_MOVE_IDX, (unsigned long)op);
 
 	/* Set probe function call */
-	synthesize_relcall(buf + TMPL_CALL_IDX, optimized_callback);
+	synthesize_relcall(buf + TMPL_CALL_IDX, ktla_ktva(optimized_callback));
 
 	/* Set returning jmp instruction at the tail of out-of-line buffer */
 	synthesize_reljump(buf + TMPL_END_IDX + op->optinsn.size,
-			   (u8 *)op->kp.addr + op->optinsn.size);
+			   (u8 *)ktla_ktva(op->kp.addr) + op->optinsn.size);
 
 	flush_icache_range((unsigned long) buf,
 			   (unsigned long) buf + TMPL_END_IDX +
@@ -1431,7 +1441,7 @@ static void __kprobes setup_optimize_kpr
 			((long)op->kp.addr + RELATIVEJUMP_SIZE));
 
 	/* Backup instructions which will be replaced by jump address */
-	memcpy(op->optinsn.copied_insn, op->kp.addr + INT3_SIZE,
+	memcpy(op->optinsn.copied_insn, ktla_ktva(op->kp.addr) + INT3_SIZE,
 	       RELATIVE_ADDR_SIZE);
 
 	insn_buf[0] = RELATIVEJUMP_OPCODE;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/ldt.c linux-3.3.8-pax/arch/x86/kernel/ldt.c
--- linux-3.3.8/arch/x86/kernel/ldt.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/ldt.c	2012-05-16 21:21:02.073543434 +0200
@@ -67,13 +67,13 @@ static int alloc_ldt(mm_context_t *pc, i
 	if (reload) {
 #ifdef CONFIG_SMP
 		preempt_disable();
-		load_LDT(pc);
+		load_LDT_nolock(pc);
 		if (!cpumask_equal(mm_cpumask(current->mm),
 				   cpumask_of(smp_processor_id())))
 			smp_call_function(flush_ldt, current->mm, 1);
 		preempt_enable();
 #else
-		load_LDT(pc);
+		load_LDT_nolock(pc);
 #endif
 	}
 	if (oldsize) {
@@ -95,7 +95,7 @@ static inline int copy_ldt(mm_context_t
 		return err;
 
 	for (i = 0; i < old->size; i++)
-		write_ldt_entry(new->ldt, i, old->ldt + i * LDT_ENTRY_SIZE);
+		write_ldt_entry(new->ldt, i, old->ldt + i);
 	return 0;
 }
 
@@ -116,6 +116,24 @@ int init_new_context(struct task_struct
 		retval = copy_ldt(&mm->context, &old_mm->context);
 		mutex_unlock(&old_mm->context.lock);
 	}
+
+	if (tsk == current) {
+		mm->context.vdso = 0;
+
+#ifdef CONFIG_X86_32
+#if defined(CONFIG_PAX_PAGEEXEC) || defined(CONFIG_PAX_SEGMEXEC)
+		mm->context.user_cs_base = 0UL;
+		mm->context.user_cs_limit = ~0UL;
+
+#if defined(CONFIG_PAX_PAGEEXEC) && defined(CONFIG_SMP)
+		cpus_clear(mm->context.cpu_user_cs_mask);
+#endif
+
+#endif
+#endif
+
+	}
+
 	return retval;
 }
 
@@ -230,6 +248,13 @@ static int write_ldt(void __user *ptr, u
 		}
 	}
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	if ((mm->pax_flags & MF_PAX_SEGMEXEC) && (ldt_info.contents & MODIFY_LDT_CONTENTS_CODE)) {
+		error = -EINVAL;
+		goto out_unlock;
+	}
+#endif
+
 	fill_ldt(&ldt, &ldt_info);
 	if (oldmode)
 		ldt.avl = 0;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/machine_kexec_32.c linux-3.3.8-pax/arch/x86/kernel/machine_kexec_32.c
--- linux-3.3.8/arch/x86/kernel/machine_kexec_32.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/machine_kexec_32.c	2012-03-19 10:43:43.420034682 +0100
@@ -27,7 +27,7 @@
 #include <asm/cacheflush.h>
 #include <asm/debugreg.h>
 
-static void set_idt(void *newidt, __u16 limit)
+static void set_idt(struct desc_struct *newidt, __u16 limit)
 {
 	struct desc_ptr curidt;
 
@@ -39,7 +39,7 @@ static void set_idt(void *newidt, __u16
 }
 
 
-static void set_gdt(void *newgdt, __u16 limit)
+static void set_gdt(struct desc_struct *newgdt, __u16 limit)
 {
 	struct desc_ptr curgdt;
 
@@ -217,7 +217,7 @@ void machine_kexec(struct kimage *image)
 	}
 
 	control_page = page_address(image->control_code_page);
-	memcpy(control_page, relocate_kernel, KEXEC_CONTROL_CODE_MAX_SIZE);
+	memcpy(control_page, (void *)ktla_ktva((unsigned long)relocate_kernel), KEXEC_CONTROL_CODE_MAX_SIZE);
 
 	relocate_kernel_ptr = control_page;
 	page_list[PA_CONTROL_PAGE] = __pa(control_page);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/microcode_intel.c linux-3.3.8-pax/arch/x86/kernel/microcode_intel.c
--- linux-3.3.8/arch/x86/kernel/microcode_intel.c	2012-01-08 19:47:49.483472987 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/microcode_intel.c	2012-05-16 21:29:45.601571868 +0200
@@ -436,13 +436,13 @@ static enum ucode_state request_microcod
 
 static int get_ucode_user(void *to, const void *from, size_t n)
 {
-	return copy_from_user(to, from, n);
+	return copy_from_user(to, (const void __force_user *)from, n);
 }
 
 static enum ucode_state
 request_microcode_user(int cpu, const void __user *buf, size_t size)
 {
-	return generic_load_microcode(cpu, (void *)buf, size, &get_ucode_user);
+	return generic_load_microcode(cpu, (__force_kernel void *)buf, size, &get_ucode_user);
 }
 
 static void microcode_fini_cpu(int cpu)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/module.c linux-3.3.8-pax/arch/x86/kernel/module.c
--- linux-3.3.8/arch/x86/kernel/module.c	2011-10-24 12:48:26.259091773 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/module.c	2012-05-16 21:31:46.585578439 +0200
@@ -36,15 +36,60 @@
 #define DEBUGP(fmt...)
 #endif
 
-void *module_alloc(unsigned long size)
+static inline void *__module_alloc(unsigned long size, pgprot_t prot)
 {
-	if (PAGE_ALIGN(size) > MODULES_LEN)
+	if (size == 0 || PAGE_ALIGN(size) > MODULES_LEN)
 		return NULL;
 	return __vmalloc_node_range(size, 1, MODULES_VADDR, MODULES_END,
-				GFP_KERNEL | __GFP_HIGHMEM, PAGE_KERNEL_EXEC,
+				GFP_KERNEL | __GFP_HIGHMEM | __GFP_ZERO, prot,
 				-1, __builtin_return_address(0));
 }
 
+void *module_alloc(unsigned long size)
+{
+
+#ifdef CONFIG_PAX_KERNEXEC
+	return __module_alloc(size, PAGE_KERNEL);
+#else
+	return __module_alloc(size, PAGE_KERNEL_EXEC);
+#endif
+
+}
+
+#ifdef CONFIG_PAX_KERNEXEC
+#ifdef CONFIG_X86_32
+void *module_alloc_exec(unsigned long size)
+{
+	struct vm_struct *area;
+
+	if (size == 0)
+		return NULL;
+
+	area = __get_vm_area(size, VM_ALLOC, (unsigned long)&MODULES_EXEC_VADDR, (unsigned long)&MODULES_EXEC_END);
+	return area ? area->addr : NULL;
+}
+EXPORT_SYMBOL(module_alloc_exec);
+
+void module_free_exec(struct module *mod, void *module_region)
+{
+	vunmap(module_region);
+}
+EXPORT_SYMBOL(module_free_exec);
+#else
+void module_free_exec(struct module *mod, void *module_region)
+{
+	module_free(mod, module_region);
+}
+EXPORT_SYMBOL(module_free_exec);
+
+void *module_alloc_exec(unsigned long size)
+{
+	return __module_alloc(size, PAGE_KERNEL_RX);
+}
+EXPORT_SYMBOL(module_alloc_exec);
+#endif
+#endif
+
 #ifdef CONFIG_X86_32
 int apply_relocate(Elf32_Shdr *sechdrs,
 		   const char *strtab,
@@ -55,14 +100,16 @@ int apply_relocate(Elf32_Shdr *sechdrs,
 	unsigned int i;
 	Elf32_Rel *rel = (void *)sechdrs[relsec].sh_addr;
 	Elf32_Sym *sym;
-	uint32_t *location;
+	uint32_t *plocation, location;
 
 	DEBUGP("Applying relocate section %u to %u\n", relsec,
 	       sechdrs[relsec].sh_info);
 	for (i = 0; i < sechdrs[relsec].sh_size / sizeof(*rel); i++) {
 		/* This is where to make the change */
-		location = (void *)sechdrs[sechdrs[relsec].sh_info].sh_addr
-			+ rel[i].r_offset;
+		plocation = (void *)sechdrs[sechdrs[relsec].sh_info].sh_addr + rel[i].r_offset;
+		location = (uint32_t)plocation;
+		if (sechdrs[sechdrs[relsec].sh_info].sh_flags & SHF_EXECINSTR)
+			plocation = ktla_ktva((void *)plocation);
 		/* This is the symbol it is referring to.  Note that all
 		   undefined symbols have been resolved.  */
 		sym = (Elf32_Sym *)sechdrs[symindex].sh_addr
@@ -71,11 +118,15 @@ int apply_relocate(Elf32_Shdr *sechdrs,
 		switch (ELF32_R_TYPE(rel[i].r_info)) {
 		case R_386_32:
 			/* We add the value into the location given */
-			*location += sym->st_value;
+			pax_open_kernel();
+			*plocation += sym->st_value;
+			pax_close_kernel();
 			break;
 		case R_386_PC32:
 			/* Add the value, subtract its postition */
-			*location += sym->st_value - (uint32_t)location;
+			pax_open_kernel();
+			*plocation += sym->st_value - location;
+			pax_close_kernel();
 			break;
 		default:
 			printk(KERN_ERR "module %s: Unknown relocation: %u\n",
@@ -120,21 +171,30 @@ int apply_relocate_add(Elf64_Shdr *sechd
 		case R_X86_64_NONE:
 			break;
 		case R_X86_64_64:
+			pax_open_kernel();
 			*(u64 *)loc = val;
+			pax_close_kernel();
 			break;
 		case R_X86_64_32:
+			pax_open_kernel();
 			*(u32 *)loc = val;
+			pax_close_kernel();
 			if (val != *(u32 *)loc)
 				goto overflow;
 			break;
 		case R_X86_64_32S:
+			pax_open_kernel();
 			*(s32 *)loc = val;
+			pax_close_kernel();
 			if ((s64)val != *(s32 *)loc)
 				goto overflow;
 			break;
 		case R_X86_64_PC32:
 			val -= (u64)loc;
+			pax_open_kernel();
 			*(u32 *)loc = val;
+			pax_close_kernel();
+
 #if 0
 			if ((s64)val != *(s32 *)loc)
 				goto overflow;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/nmi.c linux-3.3.8-pax/arch/x86/kernel/nmi.c
--- linux-3.3.8/arch/x86/kernel/nmi.c	2012-03-19 10:38:56.556049998 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/nmi.c	2012-03-19 10:43:43.420034682 +0100
@@ -505,6 +505,17 @@ static inline void nmi_nesting_postproce
 dotraplinkage notrace __kprobes void
 do_nmi(struct pt_regs *regs, long error_code)
 {
+
+#if defined(CONFIG_X86_32) && defined(CONFIG_PAX_KERNEXEC)
+	if (!user_mode(regs)) {
+		unsigned long cs = regs->cs & 0xFFFF;
+		unsigned long ip = ktva_ktla(regs->ip);
+
+		if ((cs == __KERNEL_CS || cs == __KERNEXEC_KERNEL_CS) && ip <= (unsigned long)_etext)
+			regs->ip = ip;
+	}
+#endif
+
 	nmi_nesting_preprocess(regs);
 
 	nmi_enter();
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/paravirt.c linux-3.3.8-pax/arch/x86/kernel/paravirt.c
--- linux-3.3.8/arch/x86/kernel/paravirt.c	2011-10-24 12:48:26.259091773 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/paravirt.c	2012-03-19 10:43:43.428034682 +0100
@@ -53,6 +53,9 @@ u64 _paravirt_ident_64(u64 x)
 {
 	return x;
 }
+#if defined(CONFIG_X86_32) && defined(CONFIG_X86_PAE)
+PV_CALLEE_SAVE_REGS_THUNK(_paravirt_ident_64);
+#endif
 
 void __init default_banner(void)
 {
@@ -145,15 +148,19 @@ unsigned paravirt_patch_default(u8 type,
 	if (opfunc == NULL)
 		/* If there's no function, patch it with a ud2a (BUG) */
 		ret = paravirt_patch_insns(insnbuf, len, ud2a, ud2a+sizeof(ud2a));
-	else if (opfunc == _paravirt_nop)
+	else if (opfunc == (void *)_paravirt_nop)
 		/* If the operation is a nop, then nop the callsite */
 		ret = paravirt_patch_nop();
 
 	/* identity functions just return their single argument */
-	else if (opfunc == _paravirt_ident_32)
+	else if (opfunc == (void *)_paravirt_ident_32)
 		ret = paravirt_patch_ident_32(insnbuf, len);
-	else if (opfunc == _paravirt_ident_64)
+	else if (opfunc == (void *)_paravirt_ident_64)
+		ret = paravirt_patch_ident_64(insnbuf, len);
+#if defined(CONFIG_X86_32) && defined(CONFIG_X86_PAE)
+	else if (opfunc == (void *)__raw_callee_save__paravirt_ident_64)
 		ret = paravirt_patch_ident_64(insnbuf, len);
+#endif
 
 	else if (type == PARAVIRT_PATCH(pv_cpu_ops.iret) ||
 		 type == PARAVIRT_PATCH(pv_cpu_ops.irq_enable_sysexit) ||
@@ -178,7 +185,7 @@ unsigned paravirt_patch_insns(void *insn
 	if (insn_len > len || start == NULL)
 		insn_len = len;
 	else
-		memcpy(insnbuf, start, insn_len);
+		memcpy(insnbuf, ktla_ktva(start), insn_len);
 
 	return insn_len;
 }
@@ -302,7 +309,7 @@ void arch_flush_lazy_mmu_mode(void)
 	preempt_enable();
 }
 
-struct pv_info pv_info = {
+struct pv_info pv_info __read_only = {
 	.name = "bare hardware",
 	.paravirt_enabled = 0,
 	.kernel_rpl = 0,
@@ -313,16 +320,16 @@ struct pv_info pv_info = {
 #endif
 };
 
-struct pv_init_ops pv_init_ops = {
+struct pv_init_ops pv_init_ops __read_only = {
 	.patch = native_patch,
 };
 
-struct pv_time_ops pv_time_ops = {
+struct pv_time_ops pv_time_ops __read_only = {
 	.sched_clock = native_sched_clock,
 	.steal_clock = native_steal_clock,
 };
 
-struct pv_irq_ops pv_irq_ops = {
+struct pv_irq_ops pv_irq_ops __read_only = {
 	.save_fl = __PV_IS_CALLEE_SAVE(native_save_fl),
 	.restore_fl = __PV_IS_CALLEE_SAVE(native_restore_fl),
 	.irq_disable = __PV_IS_CALLEE_SAVE(native_irq_disable),
@@ -334,7 +341,7 @@ struct pv_irq_ops pv_irq_ops = {
 #endif
 };
 
-struct pv_cpu_ops pv_cpu_ops = {
+struct pv_cpu_ops pv_cpu_ops __read_only = {
 	.cpuid = native_cpuid,
 	.get_debugreg = native_get_debugreg,
 	.set_debugreg = native_set_debugreg,
@@ -395,21 +402,26 @@ struct pv_cpu_ops pv_cpu_ops = {
 	.end_context_switch = paravirt_nop,
 };
 
-struct pv_apic_ops pv_apic_ops = {
+struct pv_apic_ops pv_apic_ops __read_only = {
 #ifdef CONFIG_X86_LOCAL_APIC
 	.startup_ipi_hook = paravirt_nop,
 #endif
 };
 
-#if defined(CONFIG_X86_32) && !defined(CONFIG_X86_PAE)
+#ifdef CONFIG_X86_32
+#ifdef CONFIG_X86_PAE
+/* 64-bit pagetable entries */
+#define PTE_IDENT	PV_CALLEE_SAVE(_paravirt_ident_64)
+#else
 /* 32-bit pagetable entries */
 #define PTE_IDENT	__PV_IS_CALLEE_SAVE(_paravirt_ident_32)
+#endif
 #else
 /* 64-bit pagetable entries */
 #define PTE_IDENT	__PV_IS_CALLEE_SAVE(_paravirt_ident_64)
 #endif
 
-struct pv_mmu_ops pv_mmu_ops = {
+struct pv_mmu_ops pv_mmu_ops __read_only = {
 
 	.read_cr2 = native_read_cr2,
 	.write_cr2 = native_write_cr2,
@@ -459,6 +471,7 @@ struct pv_mmu_ops pv_mmu_ops = {
 	.make_pud = PTE_IDENT,
 
 	.set_pgd = native_set_pgd,
+	.set_pgd_batched = native_set_pgd_batched,
 #endif
 #endif /* PAGETABLE_LEVELS >= 3 */
 
@@ -478,6 +491,12 @@ struct pv_mmu_ops pv_mmu_ops = {
 	},
 
 	.set_fixmap = native_set_fixmap,
+
+#ifdef CONFIG_PAX_KERNEXEC
+	.pax_open_kernel = native_pax_open_kernel,
+	.pax_close_kernel = native_pax_close_kernel,
+#endif
+
 };
 
 EXPORT_SYMBOL_GPL(pv_time_ops);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/paravirt-spinlocks.c linux-3.3.8-pax/arch/x86/kernel/paravirt-spinlocks.c
--- linux-3.3.8/arch/x86/kernel/paravirt-spinlocks.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/paravirt-spinlocks.c	2012-03-19 10:43:43.428034682 +0100
@@ -13,7 +13,7 @@ default_spin_lock_flags(arch_spinlock_t
 	arch_spin_lock(lock);
 }
 
-struct pv_lock_ops pv_lock_ops = {
+struct pv_lock_ops pv_lock_ops __read_only = {
 #ifdef CONFIG_SMP
 	.spin_is_locked = __ticket_spin_is_locked,
 	.spin_is_contended = __ticket_spin_is_contended,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/pci-iommu_table.c linux-3.3.8-pax/arch/x86/kernel/pci-iommu_table.c
--- linux-3.3.8/arch/x86/kernel/pci-iommu_table.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/pci-iommu_table.c	2012-03-19 10:43:43.428034682 +0100
@@ -2,7 +2,7 @@
 #include <asm/iommu_table.h>
 #include <linux/string.h>
 #include <linux/kallsyms.h>
-
+#include <linux/sched.h>
 
 #define DEBUG 1
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/process_32.c linux-3.3.8-pax/arch/x86/kernel/process_32.c
--- linux-3.3.8/arch/x86/kernel/process_32.c	2012-03-19 10:38:56.560049998 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/process_32.c	2012-03-19 10:43:43.428034682 +0100
@@ -67,6 +67,7 @@ asmlinkage void ret_from_fork(void) __as
 unsigned long thread_saved_pc(struct task_struct *tsk)
 {
 	return ((unsigned long *)tsk->thread.sp)[3];
+//XXX	return tsk->thread.eip;
 }
 
 #ifndef CONFIG_SMP
@@ -132,15 +133,14 @@ void __show_regs(struct pt_regs *regs, i
 	unsigned long sp;
 	unsigned short ss, gs;
 
-	if (user_mode_vm(regs)) {
+	if (user_mode(regs)) {
 		sp = regs->sp;
 		ss = regs->ss & 0xffff;
-		gs = get_user_gs(regs);
 	} else {
 		sp = kernel_stack_pointer(regs);
 		savesegment(ss, ss);
-		savesegment(gs, gs);
 	}
+	gs = get_user_gs(regs);
 
 	show_regs_common();
 
@@ -202,13 +202,14 @@ int copy_thread(unsigned long clone_flag
 	struct task_struct *tsk;
 	int err;
 
-	childregs = task_pt_regs(p);
+	childregs = task_stack_page(p) + THREAD_SIZE - sizeof(struct pt_regs) - 8;
 	*childregs = *regs;
 	childregs->ax = 0;
 	childregs->sp = sp;
 
 	p->thread.sp = (unsigned long) childregs;
 	p->thread.sp0 = (unsigned long) (childregs+1);
+	p->tinfo.lowest_stack = (unsigned long)task_stack_page(p);
 
 	p->thread.ip = (unsigned long) ret_from_fork;
 
@@ -299,7 +300,7 @@ __switch_to(struct task_struct *prev_p,
 	struct thread_struct *prev = &prev_p->thread,
 				 *next = &next_p->thread;
 	int cpu = smp_processor_id();
-	struct tss_struct *tss = &per_cpu(init_tss, cpu);
+	struct tss_struct *tss = init_tss + cpu;
 	fpu_switch_t fpu;
 
 	/* never put a printk in __switch_to... printk() calls wake_up*() indirectly */
@@ -323,6 +324,10 @@ __switch_to(struct task_struct *prev_p,
 	 */
 	lazy_save_gs(prev->gs);
 
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	__set_fs(task_thread_info(next_p)->addr_limit);
+#endif
+
 	/*
 	 * Load the per-thread Thread-Local Storage descriptor.
 	 */
@@ -353,6 +358,9 @@ __switch_to(struct task_struct *prev_p,
 	 */
 	arch_end_context_switch(next_p);
 
+	percpu_write(current_task, next_p);
+	percpu_write(current_tinfo, &next_p->tinfo);
+
 	/*
 	 * Restore %gs if needed (which is common)
 	 */
@@ -361,8 +369,6 @@ __switch_to(struct task_struct *prev_p,
 
 	switch_fpu_finish(next_p, fpu);
 
-	percpu_write(current_task, next_p);
-
 	return prev_p;
 }
 
@@ -392,4 +398,3 @@ unsigned long get_wchan(struct task_stru
 	} while (count++ < 16);
 	return 0;
 }
-
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/process_64.c linux-3.3.8-pax/arch/x86/kernel/process_64.c
--- linux-3.3.8/arch/x86/kernel/process_64.c	2012-03-19 10:38:56.560049998 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/process_64.c	2012-03-19 10:43:43.428034682 +0100
@@ -89,7 +89,7 @@ static void __exit_idle(void)
 void exit_idle(void)
 {
 	/* idle loop has pid 0 */
-	if (current->pid)
+	if (task_pid_nr(current))
 		return;
 	__exit_idle();
 }
@@ -270,8 +270,7 @@ int copy_thread(unsigned long clone_flag
 	struct pt_regs *childregs;
 	struct task_struct *me = current;
 
-	childregs = ((struct pt_regs *)
-			(THREAD_SIZE + task_stack_page(p))) - 1;
+	childregs = task_stack_page(p) + THREAD_SIZE - sizeof(struct pt_regs) - 16;
 	*childregs = *regs;
 
 	childregs->ax = 0;
@@ -283,6 +282,7 @@ int copy_thread(unsigned long clone_flag
 	p->thread.sp = (unsigned long) childregs;
 	p->thread.sp0 = (unsigned long) (childregs+1);
 	p->thread.usersp = me->thread.usersp;
+	p->tinfo.lowest_stack = (unsigned long)task_stack_page(p);
 
 	set_tsk_thread_flag(p, TIF_FORK);
 
@@ -385,7 +385,7 @@ __switch_to(struct task_struct *prev_p,
 	struct thread_struct *prev = &prev_p->thread;
 	struct thread_struct *next = &next_p->thread;
 	int cpu = smp_processor_id();
-	struct tss_struct *tss = &per_cpu(init_tss, cpu);
+	struct tss_struct *tss = init_tss + cpu;
 	unsigned fsindex, gsindex;
 	fpu_switch_t fpu;
 
@@ -467,10 +467,9 @@ __switch_to(struct task_struct *prev_p,
 	prev->usersp = percpu_read(old_rsp);
 	percpu_write(old_rsp, next->usersp);
 	percpu_write(current_task, next_p);
+	percpu_write(current_tinfo, &next_p->tinfo);
 
-	percpu_write(kernel_stack,
-		  (unsigned long)task_stack_page(next_p) +
-		  THREAD_SIZE - KERNEL_STACK_OFFSET);
+	percpu_write(kernel_stack, next->sp0);
 
 	/*
 	 * Now maybe reload the debug registers and handle I/O bitmaps
@@ -525,12 +524,11 @@ unsigned long get_wchan(struct task_stru
 	if (!p || p == current || p->state == TASK_RUNNING)
 		return 0;
 	stack = (unsigned long)task_stack_page(p);
-	if (p->thread.sp < stack || p->thread.sp >= stack+THREAD_SIZE)
+	if (p->thread.sp < stack || p->thread.sp > stack+THREAD_SIZE-16-sizeof(u64))
 		return 0;
 	fp = *(u64 *)(p->thread.sp);
 	do {
-		if (fp < (unsigned long)stack ||
-		    fp >= (unsigned long)stack+THREAD_SIZE)
+		if (fp < stack || fp > stack+THREAD_SIZE-16-sizeof(u64))
 			return 0;
 		ip = *(u64 *)(fp+8);
 		if (!in_sched_functions(ip))
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/process.c linux-3.3.8-pax/arch/x86/kernel/process.c
--- linux-3.3.8/arch/x86/kernel/process.c	2012-03-19 10:38:56.556049998 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/process.c	2012-03-19 10:43:43.428034683 +0100
@@ -48,16 +48,33 @@ void free_thread_xstate(struct task_stru
 
 void free_thread_info(struct thread_info *ti)
 {
-	free_thread_xstate(ti->task);
 	free_pages((unsigned long)ti, THREAD_ORDER);
 }
 
+static struct kmem_cache *task_struct_cachep;
+
 void arch_task_cache_init(void)
 {
-        task_xstate_cachep =
-        	kmem_cache_create("task_xstate", xstate_size,
+	/* create a slab on which task_structs can be allocated */
+	task_struct_cachep =
+		kmem_cache_create("task_struct", sizeof(struct task_struct),
+			ARCH_MIN_TASKALIGN, SLAB_PANIC | SLAB_NOTRACK, NULL);
+
+	task_xstate_cachep =
+		kmem_cache_create("task_xstate", xstate_size,
 				  __alignof__(union thread_xstate),
-				  SLAB_PANIC | SLAB_NOTRACK, NULL);
+				  SLAB_PANIC | SLAB_NOTRACK | SLAB_USERCOPY, NULL);
+}
+
+struct task_struct *alloc_task_struct_node(int node)
+{
+	return kmem_cache_alloc_node(task_struct_cachep, GFP_KERNEL, node);
+}
+
+void free_task_struct(struct task_struct *task)
+{
+	free_thread_xstate(task);
+	kmem_cache_free(task_struct_cachep, task);
 }
 
 /*
@@ -70,7 +87,7 @@ void exit_thread(void)
 	unsigned long *bp = t->io_bitmap_ptr;
 
 	if (bp) {
-		struct tss_struct *tss = &per_cpu(init_tss, get_cpu());
+		struct tss_struct *tss = init_tss + get_cpu();
 
 		t->io_bitmap_ptr = NULL;
 		clear_thread_flag(TIF_IO_BITMAP);
@@ -106,7 +123,7 @@ void show_regs_common(void)
 
 	printk(KERN_CONT "\n");
 	printk(KERN_DEFAULT "Pid: %d, comm: %.20s %s %s %.*s",
-		current->pid, current->comm, print_tainted(),
+		task_pid_nr(current), current->comm, print_tainted(),
 		init_utsname()->release,
 		(int)strcspn(init_utsname()->version, " "),
 		init_utsname()->version);
@@ -120,6 +137,9 @@ void flush_thread(void)
 {
 	struct task_struct *tsk = current;
 
+#if defined(CONFIG_X86_32) && !defined(CONFIG_CC_STACKPROTECTOR) && !defined(CONFIG_PAX_MEMORY_UDEREF)
+	loadsegment(gs, 0);
+#endif
 	flush_ptrace_hw_breakpoint(tsk);
 	memset(tsk->thread.tls_array, 0, sizeof(tsk->thread.tls_array));
 	/*
@@ -282,10 +302,10 @@ int kernel_thread(int (*fn)(void *), voi
 	regs.di = (unsigned long) arg;
 
 #ifdef CONFIG_X86_32
-	regs.ds = __USER_DS;
-	regs.es = __USER_DS;
+	regs.ds = __KERNEL_DS;
+	regs.es = __KERNEL_DS;
 	regs.fs = __KERNEL_PERCPU;
-	regs.gs = __KERNEL_STACK_CANARY;
+	savesegment(gs, regs.gs);
 #else
 	regs.ss = __KERNEL_DS;
 #endif
@@ -411,7 +431,7 @@ bool set_pm_idle_to_default(void)
 
 	return ret;
 }
-void stop_this_cpu(void *dummy)
+__noreturn void stop_this_cpu(void *dummy)
 {
 	local_irq_disable();
 	/*
@@ -653,16 +673,37 @@ static int __init idle_setup(char *str)
 }
 early_param("idle", idle_setup);
 
-unsigned long arch_align_stack(unsigned long sp)
+#ifdef CONFIG_PAX_RANDKSTACK
+void pax_randomize_kstack(struct pt_regs *regs)
 {
-	if (!(current->personality & ADDR_NO_RANDOMIZE) && randomize_va_space)
-		sp -= get_random_int() % 8192;
-	return sp & ~0xf;
-}
+	struct thread_struct *thread = &current->thread;
+	unsigned long time;
 
-unsigned long arch_randomize_brk(struct mm_struct *mm)
-{
-	unsigned long range_end = mm->brk + 0x02000000;
-	return randomize_range(mm->brk, range_end, 0) ? : mm->brk;
-}
+	if (!randomize_va_space)
+		return;
+
+	if (v8086_mode(regs))
+		return;
 
+	rdtscl(time);
+
+	/* P4 seems to return a 0 LSB, ignore it */
+#ifdef CONFIG_MPENTIUM4
+	time &= 0x3EUL;
+	time <<= 2;
+#elif defined(CONFIG_X86_64)
+	time &= 0xFUL;
+	time <<= 4;
+#else
+	time &= 0x1FUL;
+	time <<= 3;
+#endif
+
+	thread->sp0 ^= time;
+	load_sp0(init_tss + smp_processor_id(), thread);
+
+#ifdef CONFIG_X86_64
+	percpu_write(kernel_stack, thread->sp0);
+#endif
+}
+#endif
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/ptrace.c linux-3.3.8-pax/arch/x86/kernel/ptrace.c
--- linux-3.3.8/arch/x86/kernel/ptrace.c	2012-03-19 10:38:56.560049998 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/ptrace.c	2012-05-16 21:21:02.105543435 +0200
@@ -823,7 +823,7 @@ long arch_ptrace(struct task_struct *chi
 		 unsigned long addr, unsigned long data)
 {
 	int ret;
-	unsigned long __user *datap = (unsigned long __user *)data;
+	unsigned long __user *datap = (__force unsigned long __user *)data;
 
 	switch (request) {
 	/* read the word at location addr in the USER area. */
@@ -908,14 +908,14 @@ long arch_ptrace(struct task_struct *chi
 		if ((int) addr < 0)
 			return -EIO;
 		ret = do_get_thread_area(child, addr,
-					(struct user_desc __user *)data);
+					(__force struct user_desc __user *) data);
 		break;
 
 	case PTRACE_SET_THREAD_AREA:
 		if ((int) addr < 0)
 			return -EIO;
 		ret = do_set_thread_area(child, addr,
-					(struct user_desc __user *)data, 0);
+					(__force struct user_desc __user *) data, 0);
 		break;
 #endif
 
@@ -1332,7 +1332,7 @@ static void fill_sigtrap_info(struct tas
 	memset(info, 0, sizeof(*info));
 	info->si_signo = SIGTRAP;
 	info->si_code = si_code;
-	info->si_addr = user_mode_vm(regs) ? (void __user *)regs->ip : NULL;
+	info->si_addr = user_mode(regs) ? (__force void __user *)regs->ip : NULL;
 }
 
 void user_single_step_siginfo(struct task_struct *tsk,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/pvclock.c linux-3.3.8-pax/arch/x86/kernel/pvclock.c
--- linux-3.3.8/arch/x86/kernel/pvclock.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/pvclock.c	2012-03-19 10:43:43.428034683 +0100
@@ -81,11 +81,11 @@ unsigned long pvclock_tsc_khz(struct pvc
 	return pv_tsc_khz;
 }
 
-static atomic64_t last_value = ATOMIC64_INIT(0);
+static atomic64_unchecked_t last_value = ATOMIC64_INIT(0);
 
 void pvclock_resume(void)
 {
-	atomic64_set(&last_value, 0);
+	atomic64_set_unchecked(&last_value, 0);
 }
 
 cycle_t pvclock_clocksource_read(struct pvclock_vcpu_time_info *src)
@@ -121,11 +121,11 @@ cycle_t pvclock_clocksource_read(struct
 	 * updating at the same time, and one of them could be slightly behind,
 	 * making the assumption that last_value always go forward fail to hold.
 	 */
-	last = atomic64_read(&last_value);
+	last = atomic64_read_unchecked(&last_value);
 	do {
 		if (ret < last)
 			return last;
-		last = atomic64_cmpxchg(&last_value, last, ret);
+		last = atomic64_cmpxchg_unchecked(&last_value, last, ret);
 	} while (unlikely(last != ret));
 
 	return ret;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/reboot.c linux-3.3.8-pax/arch/x86/kernel/reboot.c
--- linux-3.3.8/arch/x86/kernel/reboot.c	2012-03-19 10:38:56.564049998 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/reboot.c	2012-03-19 10:43:43.428034683 +0100
@@ -35,7 +35,7 @@ void (*pm_power_off)(void);
 EXPORT_SYMBOL(pm_power_off);
 
 static const struct desc_ptr no_idt = {};
-static int reboot_mode;
+static unsigned short reboot_mode;
 enum reboot_type reboot_type = BOOT_ACPI;
 int reboot_force;
 
@@ -335,13 +335,17 @@ core_initcall(reboot_init);
 extern const unsigned char machine_real_restart_asm[];
 extern const u64 machine_real_restart_gdt[3];
 
-void machine_real_restart(unsigned int type)
+__noreturn void machine_real_restart(unsigned int type)
 {
 	void *restart_va;
 	unsigned long restart_pa;
-	void (*restart_lowmem)(unsigned int);
+	void (* __noreturn restart_lowmem)(unsigned int);
 	u64 *lowmem_gdt;
 
+#if defined(CONFIG_X86_32) && (defined(CONFIG_PAX_KERNEXEC) || defined(CONFIG_PAX_MEMORY_UDEREF))
+	struct desc_struct *gdt;
+#endif
+
 	local_irq_disable();
 
 	/* Write zero to CMOS register number 0x0f, which the BIOS POST
@@ -367,14 +371,14 @@ void machine_real_restart(unsigned int t
 	   boot)".  This seems like a fairly standard thing that gets set by
 	   REBOOT.COM programs, and the previous reset routine did this
 	   too. */
-	*((unsigned short *)0x472) = reboot_mode;
+	*(unsigned short *)(__va(0x472)) = reboot_mode;
 
 	/* Patch the GDT in the low memory trampoline */
 	lowmem_gdt = TRAMPOLINE_SYM(machine_real_restart_gdt);
 
 	restart_va = TRAMPOLINE_SYM(machine_real_restart_asm);
 	restart_pa = virt_to_phys(restart_va);
-	restart_lowmem = (void (*)(unsigned int))restart_pa;
+	restart_lowmem = (void *)restart_pa;
 
 	/* GDT[0]: GDT self-pointer */
 	lowmem_gdt[0] =
@@ -385,7 +389,33 @@ void machine_real_restart(unsigned int t
 		GDT_ENTRY(0x009b, restart_pa, 0xffff);
 
 	/* Jump to the identity-mapped low memory code */
+
+#if defined(CONFIG_X86_32) && (defined(CONFIG_PAX_KERNEXEC) || defined(CONFIG_PAX_MEMORY_UDEREF))
+	gdt = get_cpu_gdt_table(smp_processor_id());
+	pax_open_kernel();
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	gdt[GDT_ENTRY_KERNEL_DS].type = 3;
+	gdt[GDT_ENTRY_KERNEL_DS].limit = 0xf;
+	asm("mov %0, %%ds; mov %0, %%es; mov %0, %%ss" : : "r" (__KERNEL_DS) : "memory");
+#endif
+#ifdef CONFIG_PAX_KERNEXEC
+	gdt[GDT_ENTRY_KERNEL_CS].base0 = 0;
+	gdt[GDT_ENTRY_KERNEL_CS].base1 = 0;
+	gdt[GDT_ENTRY_KERNEL_CS].base2 = 0;
+	gdt[GDT_ENTRY_KERNEL_CS].limit0 = 0xffff;
+	gdt[GDT_ENTRY_KERNEL_CS].limit = 0xf;
+	gdt[GDT_ENTRY_KERNEL_CS].g = 1;
+#endif
+	pax_close_kernel();
+#endif
+
+#if defined(CONFIG_X86_32) && defined(CONFIG_PAX_KERNEXEC)
+	asm volatile("push %0; push %1; lret\n" : : "i" (__KERNEL_CS), "rm" (restart_lowmem), "a" (type));
+	unreachable();
+#else
 	restart_lowmem(type);
+#endif
+
 }
 #ifdef CONFIG_APM_MODULE
 EXPORT_SYMBOL(machine_real_restart);
@@ -556,7 +586,7 @@ void __attribute__((weak)) mach_reboot_f
  * try to force a triple fault and then cycle between hitting the keyboard
  * controller and doing that
  */
-static void native_machine_emergency_restart(void)
+__noreturn static void native_machine_emergency_restart(void)
 {
 	int i;
 	int attempt = 0;
@@ -680,13 +710,13 @@ void native_machine_shutdown(void)
 #endif
 }
 
-static void __machine_emergency_restart(int emergency)
+static __noreturn void __machine_emergency_restart(int emergency)
 {
 	reboot_emergency = emergency;
 	machine_ops.emergency_restart();
 }
 
-static void native_machine_restart(char *__unused)
+static __noreturn void native_machine_restart(char *__unused)
 {
 	printk("machine restart\n");
 
@@ -695,7 +725,7 @@ static void native_machine_restart(char
 	__machine_emergency_restart(0);
 }
 
-static void native_machine_halt(void)
+static __noreturn void native_machine_halt(void)
 {
 	/* stop other cpus and apics */
 	machine_shutdown();
@@ -706,7 +736,7 @@ static void native_machine_halt(void)
 	stop_this_cpu(NULL);
 }
 
-static void native_machine_power_off(void)
+__noreturn static void native_machine_power_off(void)
 {
 	if (pm_power_off) {
 		if (!reboot_force)
@@ -715,6 +745,7 @@ static void native_machine_power_off(voi
 	}
 	/* a fallback in case there is no PM info available */
 	tboot_shutdown(TB_SHUTDOWN_HALT);
+	unreachable();
 }
 
 struct machine_ops machine_ops = {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/relocate_kernel_64.S linux-3.3.8-pax/arch/x86/kernel/relocate_kernel_64.S
--- linux-3.3.8/arch/x86/kernel/relocate_kernel_64.S	2011-10-24 12:48:26.271091772 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/relocate_kernel_64.S	2012-03-19 10:43:43.432034683 +0100
@@ -11,6 +11,7 @@
 #include <asm/kexec.h>
 #include <asm/processor-flags.h>
 #include <asm/pgtable_types.h>
+#include <asm/alternative-asm.h>
 
 /*
  * Must be relocatable PIC code callable as a C function
@@ -160,13 +161,14 @@ identity_mapped:
 	xorq    %rbp, %rbp
 	xorq	%r8,  %r8
 	xorq	%r9,  %r9
-	xorq	%r10, %r9
+	xorq	%r10, %r10
 	xorq	%r11, %r11
 	xorq	%r12, %r12
 	xorq	%r13, %r13
 	xorq	%r14, %r14
 	xorq	%r15, %r15
 
+	pax_force_retaddr 0, 1
 	ret
 
 1:
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/setup.c linux-3.3.8-pax/arch/x86/kernel/setup.c
--- linux-3.3.8/arch/x86/kernel/setup.c	2012-03-19 10:38:56.564049998 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/setup.c	2012-03-19 10:43:43.432034683 +0100
@@ -448,7 +448,7 @@ static void __init parse_setup_data(void
 
 		switch (data->type) {
 		case SETUP_E820_EXT:
-			parse_e820_ext(data);
+			parse_e820_ext((struct setup_data __force_kernel *)data);
 			break;
 		case SETUP_DTB:
 			add_dtb(pa_data);
@@ -649,7 +649,7 @@ static void __init trim_bios_range(void)
 	 * area (640->1Mb) as ram even though it is not.
 	 * take them out.
 	 */
-	e820_remove_range(BIOS_BEGIN, BIOS_END - BIOS_BEGIN, E820_RAM, 1);
+	e820_remove_range(ISA_START_ADDRESS, ISA_END_ADDRESS - ISA_START_ADDRESS, E820_RAM, 1);
 	sanitize_e820_map(e820.map, ARRAY_SIZE(e820.map), &e820.nr_map);
 }
 
@@ -767,14 +767,14 @@ void __init setup_arch(char **cmdline_p)
 
 	if (!boot_params.hdr.root_flags)
 		root_mountflags &= ~MS_RDONLY;
-	init_mm.start_code = (unsigned long) _text;
-	init_mm.end_code = (unsigned long) _etext;
+	init_mm.start_code = ktla_ktva((unsigned long) _text);
+	init_mm.end_code = ktla_ktva((unsigned long) _etext);
 	init_mm.end_data = (unsigned long) _edata;
 	init_mm.brk = _brk_end;
 
-	code_resource.start = virt_to_phys(_text);
-	code_resource.end = virt_to_phys(_etext)-1;
-	data_resource.start = virt_to_phys(_etext);
+	code_resource.start = virt_to_phys(ktla_ktva(_text));
+	code_resource.end = virt_to_phys(ktla_ktva(_etext))-1;
+	data_resource.start = virt_to_phys(_sdata);
 	data_resource.end = virt_to_phys(_edata)-1;
 	bss_resource.start = virt_to_phys(&__bss_start);
 	bss_resource.end = virt_to_phys(&__bss_stop)-1;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/setup_percpu.c linux-3.3.8-pax/arch/x86/kernel/setup_percpu.c
--- linux-3.3.8/arch/x86/kernel/setup_percpu.c	2012-05-12 22:26:33.640957819 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/setup_percpu.c	2012-05-16 21:21:02.105543435 +0200
@@ -21,19 +21,17 @@
 #include <asm/cpu.h>
 #include <asm/stackprotector.h>
 
-DEFINE_PER_CPU(int, cpu_number);
+#ifdef CONFIG_SMP
+DEFINE_PER_CPU(unsigned int, cpu_number);
 EXPORT_PER_CPU_SYMBOL(cpu_number);
+#endif
 
-#ifdef CONFIG_X86_64
 #define BOOT_PERCPU_OFFSET ((unsigned long)__per_cpu_load)
-#else
-#define BOOT_PERCPU_OFFSET 0
-#endif
 
 DEFINE_PER_CPU(unsigned long, this_cpu_off) = BOOT_PERCPU_OFFSET;
 EXPORT_PER_CPU_SYMBOL(this_cpu_off);
 
-unsigned long __per_cpu_offset[NR_CPUS] __read_mostly = {
+unsigned long __per_cpu_offset[NR_CPUS] __read_only = {
 	[0 ... NR_CPUS-1] = BOOT_PERCPU_OFFSET,
 };
 EXPORT_SYMBOL(__per_cpu_offset);
@@ -155,10 +153,10 @@ static inline void setup_percpu_segment(
 {
 #ifdef CONFIG_X86_32
 	struct desc_struct gdt;
+	unsigned long base = per_cpu_offset(cpu);
 
-	pack_descriptor(&gdt, per_cpu_offset(cpu), 0xFFFFF,
-			0x2 | DESCTYPE_S, 0x8);
-	gdt.s = 1;
+	pack_descriptor(&gdt, base, (VMALLOC_END - base - 1) >> PAGE_SHIFT,
+			0x83 | DESCTYPE_S, 0xC);
 	write_gdt_entry(get_cpu_gdt_table(cpu),
 			GDT_ENTRY_PERCPU, &gdt, DESCTYPE_S);
 #endif
@@ -219,6 +217,11 @@ void __init setup_per_cpu_areas(void)
 	/* alrighty, percpu areas up and running */
 	delta = (unsigned long)pcpu_base_addr - (unsigned long)__per_cpu_start;
 	for_each_possible_cpu(cpu) {
+#ifdef CONFIG_CC_STACKPROTECTOR
+#ifdef CONFIG_X86_32
+		unsigned long canary = per_cpu(stack_canary.canary, cpu);
+#endif
+#endif
 		per_cpu_offset(cpu) = delta + pcpu_unit_offsets[cpu];
 		per_cpu(this_cpu_off, cpu) = per_cpu_offset(cpu);
 		per_cpu(cpu_number, cpu) = cpu;
@@ -259,6 +262,12 @@ void __init setup_per_cpu_areas(void)
 		 */
 		set_cpu_numa_node(cpu, early_cpu_to_node(cpu));
 #endif
+#ifdef CONFIG_CC_STACKPROTECTOR
+#ifdef CONFIG_X86_32
+		if (!cpu)
+			per_cpu(stack_canary.canary, cpu) = canary;
+#endif
+#endif
 		/*
 		 * Up to this point, the boot CPU has been using .init.data
 		 * area.  Reload any changed state for the boot CPU.
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/signal.c linux-3.3.8-pax/arch/x86/kernel/signal.c
--- linux-3.3.8/arch/x86/kernel/signal.c	2012-03-19 10:38:56.564049998 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/signal.c	2012-03-19 10:43:43.432034683 +0100
@@ -198,7 +198,7 @@ static unsigned long align_sigframe(unsi
 	 * Align the stack pointer according to the i386 ABI,
 	 * i.e. so that on function entry ((sp + 4) & 15) == 0.
 	 */
-	sp = ((sp + 4) & -16ul) - 4;
+	sp = ((sp - 12) & -16ul) - 4;
 #else /* !CONFIG_X86_32 */
 	sp = round_down(sp, 16) - 8;
 #endif
@@ -249,11 +249,11 @@ get_sigframe(struct k_sigaction *ka, str
 	 * Return an always-bogus address instead so we will die with SIGSEGV.
 	 */
 	if (onsigstack && !likely(on_sig_stack(sp)))
-		return (void __user *)-1L;
+		return (__force void __user *)-1L;
 
 	/* save i387 state */
 	if (used_math() && save_i387_xstate(*fpstate) < 0)
-		return (void __user *)-1L;
+		return (__force void __user *)-1L;
 
 	return (void __user *)sp;
 }
@@ -308,9 +308,9 @@ __setup_frame(int sig, struct k_sigactio
 	}
 
 	if (current->mm->context.vdso)
-		restorer = VDSO32_SYMBOL(current->mm->context.vdso, sigreturn);
+		restorer = (__force void __user *)VDSO32_SYMBOL(current->mm->context.vdso, sigreturn);
 	else
-		restorer = &frame->retcode;
+		restorer = (void __user *)&frame->retcode;
 	if (ka->sa.sa_flags & SA_RESTORER)
 		restorer = ka->sa.sa_restorer;
 
@@ -324,7 +324,7 @@ __setup_frame(int sig, struct k_sigactio
 	 * reasons and because gdb uses it as a signature to notice
 	 * signal handler stack frames.
 	 */
-	err |= __put_user(*((u64 *)&retcode), (u64 *)frame->retcode);
+	err |= __put_user(*((u64 *)&retcode), (u64 __user *)frame->retcode);
 
 	if (err)
 		return -EFAULT;
@@ -378,7 +378,10 @@ static int __setup_rt_frame(int sig, str
 		err |= __copy_to_user(&frame->uc.uc_sigmask, set, sizeof(*set));
 
 		/* Set up to return from userspace.  */
-		restorer = VDSO32_SYMBOL(current->mm->context.vdso, rt_sigreturn);
+		if (current->mm->context.vdso)
+			restorer = (__force void __user *)VDSO32_SYMBOL(current->mm->context.vdso, rt_sigreturn);
+		else
+			restorer = (void __user *)&frame->retcode;
 		if (ka->sa.sa_flags & SA_RESTORER)
 			restorer = ka->sa.sa_restorer;
 		put_user_ex(restorer, &frame->pretcode);
@@ -390,7 +393,7 @@ static int __setup_rt_frame(int sig, str
 		 * reasons and because gdb uses it as a signature to notice
 		 * signal handler stack frames.
 		 */
-		put_user_ex(*((u64 *)&rt_retcode), (u64 *)frame->retcode);
+		put_user_ex(*((u64 *)&rt_retcode), (u64 __user *)frame->retcode);
 	} put_user_catch(err);
 
 	if (err)
@@ -765,7 +768,7 @@ static void do_signal(struct pt_regs *re
 	 * X86_32: vm86 regs switched out by assembly code before reaching
 	 * here, so testing against kernel CS suffices.
 	 */
-	if (!user_mode(regs))
+	if (!user_mode_novm(regs))
 		return;
 
 	signr = get_signal_to_deliver(&info, &ka, regs, NULL);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/smpboot.c linux-3.3.8-pax/arch/x86/kernel/smpboot.c
--- linux-3.3.8/arch/x86/kernel/smpboot.c	2012-03-19 10:38:56.568049998 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/smpboot.c	2012-03-19 10:43:43.436034681 +0100
@@ -715,17 +715,20 @@ static int __cpuinit do_boot_cpu(int api
 	set_idle_for_cpu(cpu, c_idle.idle);
 do_rest:
 	per_cpu(current_task, cpu) = c_idle.idle;
+	per_cpu(current_tinfo, cpu) = &c_idle.idle->tinfo;
 #ifdef CONFIG_X86_32
 	/* Stack for startup_32 can be just as for start_secondary onwards */
 	irq_ctx_init(cpu);
 #else
 	clear_tsk_thread_flag(c_idle.idle, TIF_FORK);
 	initial_gs = per_cpu_offset(cpu);
-	per_cpu(kernel_stack, cpu) =
-		(unsigned long)task_stack_page(c_idle.idle) -
-		KERNEL_STACK_OFFSET + THREAD_SIZE;
+	per_cpu(kernel_stack, cpu) = (unsigned long)task_stack_page(c_idle.idle) - 16 + THREAD_SIZE;
 #endif
+
+	pax_open_kernel();
 	early_gdt_descr.address = (unsigned long)get_cpu_gdt_table(cpu);
+	pax_close_kernel();
+
 	initial_code = (unsigned long)start_secondary;
 	stack_start  = c_idle.idle->thread.sp;
 
@@ -868,6 +871,12 @@ int __cpuinit native_cpu_up(unsigned int
 
 	per_cpu(cpu_state, cpu) = CPU_UP_PREPARE;
 
+#ifdef CONFIG_PAX_PER_CPU_PGD
+	clone_pgd_range(get_cpu_pgd(cpu) + KERNEL_PGD_BOUNDARY,
+			swapper_pg_dir + KERNEL_PGD_BOUNDARY,
+			KERNEL_PGD_PTRS);
+#endif
+
 	err = do_boot_cpu(apicid, cpu);
 	if (err) {
 		pr_debug("do_boot_cpu failed %d\n", err);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/step.c linux-3.3.8-pax/arch/x86/kernel/step.c
--- linux-3.3.8/arch/x86/kernel/step.c	2011-10-24 12:48:26.279091772 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/step.c	2012-03-19 10:43:43.436034681 +0100
@@ -27,10 +27,10 @@ unsigned long convert_ip_to_linear(struc
 		struct desc_struct *desc;
 		unsigned long base;
 
-		seg &= ~7UL;
+		seg >>= 3;
 
 		mutex_lock(&child->mm->context.lock);
-		if (unlikely((seg >> 3) >= child->mm->context.size))
+		if (unlikely(seg >= child->mm->context.size))
 			addr = -1L; /* bogus selector, access would fault */
 		else {
 			desc = child->mm->context.ldt + seg;
@@ -42,7 +42,8 @@ unsigned long convert_ip_to_linear(struc
 			addr += base;
 		}
 		mutex_unlock(&child->mm->context.lock);
-	}
+	} else if (seg == __KERNEL_CS || seg == __KERNEXEC_KERNEL_CS)
+		addr = ktla_ktva(addr);
 
 	return addr;
 }
@@ -53,6 +54,9 @@ static int is_setting_trap_flag(struct t
 	unsigned char opcode[15];
 	unsigned long addr = convert_ip_to_linear(child, regs);
 
+	if (addr == -EINVAL)
+		return 0;
+
 	copied = access_process_vm(child, addr, opcode, sizeof(opcode), 0);
 	for (i = 0; i < copied; i++) {
 		switch (opcode[i]) {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/sys_i386_32.c linux-3.3.8-pax/arch/x86/kernel/sys_i386_32.c
--- linux-3.3.8/arch/x86/kernel/sys_i386_32.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/sys_i386_32.c	2012-03-19 10:43:43.436034681 +0100
@@ -24,17 +24,224 @@
 
 #include <asm/syscalls.h>
 
-/*
- * Do a system call from kernel instead of calling sys_execve so we
- * end up with proper pt_regs.
- */
-int kernel_execve(const char *filename,
-		  const char *const argv[],
-		  const char *const envp[])
+int i386_mmap_check(unsigned long addr, unsigned long len, unsigned long flags)
 {
-	long __res;
-	asm volatile ("int $0x80"
-	: "=a" (__res)
-	: "0" (__NR_execve), "b" (filename), "c" (argv), "d" (envp) : "memory");
-	return __res;
+	unsigned long pax_task_size = TASK_SIZE;
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (current->mm->pax_flags & MF_PAX_SEGMEXEC)
+		pax_task_size = SEGMEXEC_TASK_SIZE;
+#endif
+
+	if (len > pax_task_size || addr > pax_task_size - len)
+		return -EINVAL;
+
+	return 0;
+}
+
+unsigned long
+arch_get_unmapped_area(struct file *filp, unsigned long addr,
+		unsigned long len, unsigned long pgoff, unsigned long flags)
+{
+	struct mm_struct *mm = current->mm;
+	struct vm_area_struct *vma;
+	unsigned long start_addr, pax_task_size = TASK_SIZE;
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (mm->pax_flags & MF_PAX_SEGMEXEC)
+		pax_task_size = SEGMEXEC_TASK_SIZE;
+#endif
+
+	pax_task_size -= PAGE_SIZE;
+
+	if (len > pax_task_size)
+		return -ENOMEM;
+
+	if (flags & MAP_FIXED)
+		return addr;
+
+#ifdef CONFIG_PAX_RANDMMAP
+	if (!(mm->pax_flags & MF_PAX_RANDMMAP))
+#endif
+
+	if (addr) {
+		addr = PAGE_ALIGN(addr);
+		if (pax_task_size - len >= addr) {
+			vma = find_vma(mm, addr);
+			if (check_heap_stack_gap(vma, addr, len))
+				return addr;
+		}
+	}
+	if (len > mm->cached_hole_size) {
+		start_addr = addr = mm->free_area_cache;
+	} else {
+		start_addr = addr = mm->mmap_base;
+		mm->cached_hole_size = 0;
+	}
+
+#ifdef CONFIG_PAX_PAGEEXEC
+	if (!(__supported_pte_mask & _PAGE_NX) && (mm->pax_flags & MF_PAX_PAGEEXEC) && (flags & MAP_EXECUTABLE) && start_addr >= mm->mmap_base) {
+		start_addr = 0x00110000UL;
+
+#ifdef CONFIG_PAX_RANDMMAP
+		if (mm->pax_flags & MF_PAX_RANDMMAP)
+			start_addr += mm->delta_mmap & 0x03FFF000UL;
+#endif
+
+		if (mm->start_brk <= start_addr && start_addr < mm->mmap_base)
+			start_addr = addr = mm->mmap_base;
+		else
+			addr = start_addr;
+	}
+#endif
+
+full_search:
+	for (vma = find_vma(mm, addr); ; vma = vma->vm_next) {
+		/* At this point:  (!vma || addr < vma->vm_end). */
+		if (pax_task_size - len < addr) {
+			/*
+			 * Start a new search - just in case we missed
+			 * some holes.
+			 */
+			if (start_addr != mm->mmap_base) {
+				start_addr = addr = mm->mmap_base;
+				mm->cached_hole_size = 0;
+				goto full_search;
+			}
+			return -ENOMEM;
+		}
+		if (check_heap_stack_gap(vma, addr, len))
+			break;
+		if (addr + mm->cached_hole_size < vma->vm_start)
+			mm->cached_hole_size = vma->vm_start - addr;
+		addr = vma->vm_end;
+		if (mm->start_brk <= addr && addr < mm->mmap_base) {
+			start_addr = addr = mm->mmap_base;
+			mm->cached_hole_size = 0;
+			goto full_search;
+		}
+	}
+
+	/*
+	 * Remember the place where we stopped the search:
+	 */
+	mm->free_area_cache = addr + len;
+	return addr;
+}
+
+unsigned long
+arch_get_unmapped_area_topdown(struct file *filp, const unsigned long addr0,
+			  const unsigned long len, const unsigned long pgoff,
+			  const unsigned long flags)
+{
+	struct vm_area_struct *vma;
+	struct mm_struct *mm = current->mm;
+	unsigned long base = mm->mmap_base, addr = addr0, pax_task_size = TASK_SIZE;
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (mm->pax_flags & MF_PAX_SEGMEXEC)
+		pax_task_size = SEGMEXEC_TASK_SIZE;
+#endif
+
+	pax_task_size -= PAGE_SIZE;
+
+	/* requested length too big for entire address space */
+	if (len > pax_task_size)
+		return -ENOMEM;
+
+	if (flags & MAP_FIXED)
+		return addr;
+
+#ifdef CONFIG_PAX_PAGEEXEC
+	if (!(__supported_pte_mask & _PAGE_NX) && (mm->pax_flags & MF_PAX_PAGEEXEC) && (flags & MAP_EXECUTABLE))
+		goto bottomup;
+#endif
+
+#ifdef CONFIG_PAX_RANDMMAP
+	if (!(mm->pax_flags & MF_PAX_RANDMMAP))
+#endif
+
+	/* requesting a specific address */
+	if (addr) {
+		addr = PAGE_ALIGN(addr);
+		if (pax_task_size - len >= addr) {
+			vma = find_vma(mm, addr);
+			if (check_heap_stack_gap(vma, addr, len))
+				return addr;
+		}
+	}
+
+	/* check if free_area_cache is useful for us */
+	if (len <= mm->cached_hole_size) {
+		mm->cached_hole_size = 0;
+		mm->free_area_cache = mm->mmap_base;
+	}
+
+	/* either no address requested or can't fit in requested address hole */
+	addr = mm->free_area_cache;
+
+	/* make sure it can fit in the remaining address space */
+	if (addr > len) {
+		vma = find_vma(mm, addr-len);
+		if (check_heap_stack_gap(vma, addr - len, len))
+			/* remember the address as a hint for next time */
+			return (mm->free_area_cache = addr-len);
+	}
+
+	if (mm->mmap_base < len)
+		goto bottomup;
+
+	addr = mm->mmap_base-len;
+
+	do {
+		/*
+		 * Lookup failure means no vma is above this address,
+		 * else if new region fits below vma->vm_start,
+		 * return with success:
+		 */
+		vma = find_vma(mm, addr);
+		if (check_heap_stack_gap(vma, addr, len))
+			/* remember the address as a hint for next time */
+			return (mm->free_area_cache = addr);
+
+		/* remember the largest hole we saw so far */
+		if (addr + mm->cached_hole_size < vma->vm_start)
+			mm->cached_hole_size = vma->vm_start - addr;
+
+		/* try just below the current vma->vm_start */
+		addr = skip_heap_stack_gap(vma, len);
+	} while (!IS_ERR_VALUE(addr));
+
+bottomup:
+	/*
+	 * A failed mmap() very likely causes application failure,
+	 * so fall back to the bottom-up function here. This scenario
+	 * can happen with large stack limits and large mmap()
+	 * allocations.
+	 */
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (mm->pax_flags & MF_PAX_SEGMEXEC)
+		mm->mmap_base = SEGMEXEC_TASK_UNMAPPED_BASE;
+	else
+#endif
+
+	mm->mmap_base = TASK_UNMAPPED_BASE;
+
+#ifdef CONFIG_PAX_RANDMMAP
+	if (mm->pax_flags & MF_PAX_RANDMMAP)
+		mm->mmap_base += mm->delta_mmap;
+#endif
+
+	mm->free_area_cache = mm->mmap_base;
+	mm->cached_hole_size = ~0UL;
+	addr = arch_get_unmapped_area(filp, addr0, len, pgoff, flags);
+	/*
+	 * Restore the topdown base:
+	 */
+	mm->mmap_base = base;
+	mm->free_area_cache = base;
+	mm->cached_hole_size = ~0UL;
+
+	return addr;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/sys_x86_64.c linux-3.3.8-pax/arch/x86/kernel/sys_x86_64.c
--- linux-3.3.8/arch/x86/kernel/sys_x86_64.c	2012-01-08 19:47:49.623472979 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/sys_x86_64.c	2012-03-19 10:43:43.436034681 +0100
@@ -95,8 +95,8 @@ out:
 	return error;
 }
 
-static void find_start_end(unsigned long flags, unsigned long *begin,
-			   unsigned long *end)
+static void find_start_end(struct mm_struct *mm, unsigned long flags,
+			   unsigned long *begin, unsigned long *end)
 {
 	if (!test_thread_flag(TIF_IA32) && (flags & MAP_32BIT)) {
 		unsigned long new_begin;
@@ -115,7 +115,7 @@ static void find_start_end(unsigned long
 				*begin = new_begin;
 		}
 	} else {
-		*begin = TASK_UNMAPPED_BASE;
+		*begin = mm->mmap_base;
 		*end = TASK_SIZE;
 	}
 }
@@ -132,16 +132,19 @@ arch_get_unmapped_area(struct file *filp
 	if (flags & MAP_FIXED)
 		return addr;
 
-	find_start_end(flags, &begin, &end);
+	find_start_end(mm, flags, &begin, &end);
 
 	if (len > end)
 		return -ENOMEM;
 
+#ifdef CONFIG_PAX_RANDMMAP
+	if (!(mm->pax_flags & MF_PAX_RANDMMAP))
+#endif
+
 	if (addr) {
 		addr = PAGE_ALIGN(addr);
 		vma = find_vma(mm, addr);
-		if (end - len >= addr &&
-		    (!vma || addr + len <= vma->vm_start))
+		if (end - len >= addr && check_heap_stack_gap(vma, addr, len))
 			return addr;
 	}
 	if (((flags & MAP_32BIT) || test_thread_flag(TIF_IA32))
@@ -172,7 +175,7 @@ full_search:
 			}
 			return -ENOMEM;
 		}
-		if (!vma || addr + len <= vma->vm_start) {
+		if (check_heap_stack_gap(vma, addr, len)) {
 			/*
 			 * Remember the place where we stopped the search:
 			 */
@@ -195,7 +198,7 @@ arch_get_unmapped_area_topdown(struct fi
 {
 	struct vm_area_struct *vma;
 	struct mm_struct *mm = current->mm;
-	unsigned long addr = addr0;
+	unsigned long base = mm->mmap_base, addr = addr0;
 
 	/* requested length too big for entire address space */
 	if (len > TASK_SIZE)
@@ -208,13 +211,18 @@ arch_get_unmapped_area_topdown(struct fi
 	if (!test_thread_flag(TIF_IA32) && (flags & MAP_32BIT))
 		goto bottomup;
 
+#ifdef CONFIG_PAX_RANDMMAP
+	if (!(mm->pax_flags & MF_PAX_RANDMMAP))
+#endif
+
 	/* requesting a specific address */
 	if (addr) {
 		addr = PAGE_ALIGN(addr);
-		vma = find_vma(mm, addr);
-		if (TASK_SIZE - len >= addr &&
-				(!vma || addr + len <= vma->vm_start))
-			return addr;
+		if (TASK_SIZE - len >= addr) {
+			vma = find_vma(mm, addr);
+			if (check_heap_stack_gap(vma, addr, len))
+				return addr;
+		}
 	}
 
 	/* check if free_area_cache is useful for us */
@@ -232,7 +240,7 @@ arch_get_unmapped_area_topdown(struct fi
 						    ALIGN_TOPDOWN);
 
 		vma = find_vma(mm, tmp_addr);
-		if (!vma || tmp_addr + len <= vma->vm_start)
+		if (check_heap_stack_gap(vma, tmp_addr, len))
 			/* remember the address as a hint for next time */
 			return mm->free_area_cache = tmp_addr;
 	}
@@ -251,7 +259,7 @@ arch_get_unmapped_area_topdown(struct fi
 		 * return with success:
 		 */
 		vma = find_vma(mm, addr);
-		if (!vma || addr+len <= vma->vm_start)
+		if (check_heap_stack_gap(vma, addr, len))
 			/* remember the address as a hint for next time */
 			return mm->free_area_cache = addr;
 
@@ -260,8 +268,8 @@ arch_get_unmapped_area_topdown(struct fi
 			mm->cached_hole_size = vma->vm_start - addr;
 
 		/* try just below the current vma->vm_start */
-		addr = vma->vm_start-len;
-	} while (len < vma->vm_start);
+		addr = skip_heap_stack_gap(vma, len);
+	} while (!IS_ERR_VALUE(addr));
 
 bottomup:
 	/*
@@ -270,13 +278,21 @@ bottomup:
 	 * can happen with large stack limits and large mmap()
 	 * allocations.
 	 */
+	mm->mmap_base = TASK_UNMAPPED_BASE;
+
+#ifdef CONFIG_PAX_RANDMMAP
+	if (mm->pax_flags & MF_PAX_RANDMMAP)
+		mm->mmap_base += mm->delta_mmap;
+#endif
+
+	mm->free_area_cache = mm->mmap_base;
 	mm->cached_hole_size = ~0UL;
-	mm->free_area_cache = TASK_UNMAPPED_BASE;
 	addr = arch_get_unmapped_area(filp, addr0, len, pgoff, flags);
 	/*
 	 * Restore the topdown base:
 	 */
-	mm->free_area_cache = mm->mmap_base;
+	mm->mmap_base = base;
+	mm->free_area_cache = base;
 	mm->cached_hole_size = ~0UL;
 
 	return addr;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/tboot.c linux-3.3.8-pax/arch/x86/kernel/tboot.c
--- linux-3.3.8/arch/x86/kernel/tboot.c	2012-01-08 19:47:49.631472979 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/tboot.c	2012-03-19 10:43:43.440034679 +0100
@@ -219,7 +219,7 @@ static int tboot_setup_sleep(void)
 
 void tboot_shutdown(u32 shutdown_type)
 {
-	void (*shutdown)(void);
+	void (* __noreturn shutdown)(void);
 
 	if (!tboot_enabled())
 		return;
@@ -241,7 +241,7 @@ void tboot_shutdown(u32 shutdown_type)
 
 	switch_to_tboot_pt();
 
-	shutdown = (void(*)(void))(unsigned long)tboot->shutdown_entry;
+	shutdown = (void *)tboot->shutdown_entry;
 	shutdown();
 
 	/* should not reach here */
@@ -298,7 +298,7 @@ void tboot_sleep(u8 sleep_state, u32 pm1
 	tboot_shutdown(acpi_shutdown_map[sleep_state]);
 }
 
-static atomic_t ap_wfs_count;
+static atomic_unchecked_t ap_wfs_count;
 
 static int tboot_wait_for_aps(int num_aps)
 {
@@ -322,9 +322,9 @@ static int __cpuinit tboot_cpu_callback(
 {
 	switch (action) {
 	case CPU_DYING:
-		atomic_inc(&ap_wfs_count);
+		atomic_inc_unchecked(&ap_wfs_count);
 		if (num_online_cpus() == 1)
-			if (tboot_wait_for_aps(atomic_read(&ap_wfs_count)))
+			if (tboot_wait_for_aps(atomic_read_unchecked(&ap_wfs_count)))
 				return NOTIFY_BAD;
 		break;
 	}
@@ -343,7 +343,7 @@ static __init int tboot_late_init(void)
 
 	tboot_create_trampoline();
 
-	atomic_set(&ap_wfs_count, 0);
+	atomic_set_unchecked(&ap_wfs_count, 0);
 	register_hotcpu_notifier(&tboot_cpu_notifier);
 	return 0;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/time.c linux-3.3.8-pax/arch/x86/kernel/time.c
--- linux-3.3.8/arch/x86/kernel/time.c	2012-01-08 19:47:49.631472979 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/time.c	2012-03-19 10:43:43.440034679 +0100
@@ -31,9 +31,9 @@ unsigned long profile_pc(struct pt_regs
 {
 	unsigned long pc = instruction_pointer(regs);
 
-	if (!user_mode_vm(regs) && in_lock_functions(pc)) {
+	if (!user_mode(regs) && in_lock_functions(pc)) {
 #ifdef CONFIG_FRAME_POINTER
-		return *(unsigned long *)(regs->bp + sizeof(long));
+		return ktla_ktva(*(unsigned long *)(regs->bp + sizeof(long)));
 #else
 		unsigned long *sp =
 			(unsigned long *)kernel_stack_pointer(regs);
@@ -42,11 +42,17 @@ unsigned long profile_pc(struct pt_regs
 		 * or above a saved flags. Eflags has bits 22-31 zero,
 		 * kernel addresses don't.
 		 */
+
+#ifdef CONFIG_PAX_KERNEXEC
+		return ktla_ktva(sp[0]);
+#else
 		if (sp[0] >> 22)
 			return sp[0];
 		if (sp[1] >> 22)
 			return sp[1];
 #endif
+
+#endif
 	}
 	return pc;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/tls.c linux-3.3.8-pax/arch/x86/kernel/tls.c
--- linux-3.3.8/arch/x86/kernel/tls.c	2012-04-03 22:02:49.234110200 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/tls.c	2012-04-01 12:45:13.927659893 +0200
@@ -85,6 +85,11 @@ int do_set_thread_area(struct task_struc
 	if (idx < GDT_ENTRY_TLS_MIN || idx > GDT_ENTRY_TLS_MAX)
 		return -EINVAL;
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	if ((p->mm->pax_flags & MF_PAX_SEGMEXEC) && (info.contents & MODIFY_LDT_CONTENTS_CODE))
+		return -EINVAL;
+#endif
+
 	set_tls_desc(p, idx, &info, 1);
 
 	return 0;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/trampoline_32.S linux-3.3.8-pax/arch/x86/kernel/trampoline_32.S
--- linux-3.3.8/arch/x86/kernel/trampoline_32.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/trampoline_32.S	2012-03-19 10:43:43.440034679 +0100
@@ -32,6 +32,12 @@
 #include <asm/segment.h>
 #include <asm/page_types.h>
 
+#ifdef CONFIG_PAX_KERNEXEC
+#define ta(X) (X)
+#else
+#define ta(X) ((X) - __PAGE_OFFSET)
+#endif
+
 #ifdef CONFIG_SMP
 
 	.section ".x86_trampoline","a"
@@ -62,7 +68,7 @@ r_base = .
 	inc	%ax		# protected mode (PE) bit
 	lmsw	%ax		# into protected mode
 	# flush prefetch and jump to startup_32_smp in arch/i386/kernel/head.S
-	ljmpl	$__BOOT_CS, $(startup_32_smp-__PAGE_OFFSET)
+	ljmpl	$__BOOT_CS, $ta(startup_32_smp)
 
 	# These need to be in the same 64K segment as the above;
 	# hence we don't use the boot_gdt_descr defined in head.S
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/trampoline_64.S linux-3.3.8-pax/arch/x86/kernel/trampoline_64.S
--- linux-3.3.8/arch/x86/kernel/trampoline_64.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/trampoline_64.S	2012-03-19 10:43:43.440034679 +0100
@@ -90,7 +90,7 @@ startup_32:
 	movl	$__KERNEL_DS, %eax	# Initialize the %ds segment register
 	movl	%eax, %ds
 
-	movl	$X86_CR4_PAE, %eax
+	movl	$(X86_CR4_PSE | X86_CR4_PAE | X86_CR4_PGE), %eax
 	movl	%eax, %cr4		# Enable PAE mode
 
 					# Setup trampoline 4 level pagetables
@@ -138,7 +138,7 @@ tidt:
 	# so the kernel can live anywhere
 	.balign 4
 tgdt:
-	.short	tgdt_end - tgdt		# gdt limit
+	.short	tgdt_end - tgdt - 1	# gdt limit
 	.long	tgdt - r_base
 	.short 0
 	.quad	0x00cf9b000000ffff	# __KERNEL32_CS
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/traps.c linux-3.3.8-pax/arch/x86/kernel/traps.c
--- linux-3.3.8/arch/x86/kernel/traps.c	2012-03-19 10:38:56.572049998 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/traps.c	2012-03-19 10:43:43.444034679 +0100
@@ -70,12 +70,6 @@ asmlinkage int system_call(void);
 
 /* Do we ignore FPU interrupts ? */
 char ignore_fpu_irq;
-
-/*
- * The IDT has to be page-aligned to simplify the Pentium
- * F0 0F bug workaround.
- */
-gate_desc idt_table[NR_VECTORS] __page_aligned_data = { { { { 0, 0 } } }, };
 #endif
 
 DECLARE_BITMAP(used_vectors, NR_VECTORS);
@@ -108,13 +102,13 @@ static inline void preempt_conditional_c
 }
 
 static void __kprobes
-do_trap(int trapnr, int signr, char *str, struct pt_regs *regs,
+do_trap(int trapnr, int signr, const char *str, struct pt_regs *regs,
 	long error_code, siginfo_t *info)
 {
 	struct task_struct *tsk = current;
 
 #ifdef CONFIG_X86_32
-	if (regs->flags & X86_VM_MASK) {
+	if (v8086_mode(regs)) {
 		/*
 		 * traps 0, 1, 3, 4, and 5 should be forwarded to vm86.
 		 * On nmi (interrupt 2), do_trap should not be called.
@@ -125,7 +119,7 @@ do_trap(int trapnr, int signr, char *str
 	}
 #endif
 
-	if (!user_mode(regs))
+	if (!user_mode_novm(regs))
 		goto kernel_trap;
 
 #ifdef CONFIG_X86_32
@@ -148,7 +142,7 @@ trap_signal:
 	    printk_ratelimit()) {
 		printk(KERN_INFO
 		       "%s[%d] trap %s ip:%lx sp:%lx error:%lx",
-		       tsk->comm, tsk->pid, str,
+		       tsk->comm, task_pid_nr(tsk), str,
 		       regs->ip, regs->sp, error_code);
 		print_vma_addr(" in ", regs->ip);
 		printk("\n");
@@ -165,8 +159,20 @@ kernel_trap:
 	if (!fixup_exception(regs)) {
 		tsk->thread.error_code = error_code;
 		tsk->thread.trap_no = trapnr;
+
+#if defined(CONFIG_X86_32) && defined(CONFIG_PAX_KERNEXEC)
+		if (trapnr == 12 && ((regs->cs & 0xFFFF) == __KERNEL_CS || (regs->cs & 0xFFFF) == __KERNEXEC_KERNEL_CS))
+			str = "PAX: suspicious stack segment fault";
+#endif
+
 		die(str, regs, error_code);
 	}
+
+#ifdef CONFIG_PAX_REFCOUNT
+	if (trapnr == 4)
+		pax_report_refcount_overflow(regs);
+#endif
+
 	return;
 
 #ifdef CONFIG_X86_32
@@ -255,14 +261,30 @@ do_general_protection(struct pt_regs *re
 	conditional_sti(regs);
 
 #ifdef CONFIG_X86_32
-	if (regs->flags & X86_VM_MASK)
+	if (v8086_mode(regs))
 		goto gp_in_vm86;
 #endif
 
 	tsk = current;
-	if (!user_mode(regs))
+	if (!user_mode_novm(regs))
 		goto gp_in_kernel;
 
+#if defined(CONFIG_X86_32) && defined(CONFIG_PAX_PAGEEXEC)
+	if (!(__supported_pte_mask & _PAGE_NX) && tsk->mm && (tsk->mm->pax_flags & MF_PAX_PAGEEXEC)) {
+		struct mm_struct *mm = tsk->mm;
+		unsigned long limit;
+
+		down_write(&mm->mmap_sem);
+		limit = mm->context.user_cs_limit;
+		if (limit < TASK_SIZE) {
+			track_exec_limit(mm, limit, TASK_SIZE, VM_EXEC);
+			up_write(&mm->mmap_sem);
+			return;
+		}
+		up_write(&mm->mmap_sem);
+	}
+#endif
+
 	tsk->thread.error_code = error_code;
 	tsk->thread.trap_no = 13;
 
@@ -295,6 +317,13 @@ gp_in_kernel:
 	if (notify_die(DIE_GPF, "general protection fault", regs,
 				error_code, 13, SIGSEGV) == NOTIFY_STOP)
 		return;
+
+#if defined(CONFIG_X86_32) && defined(CONFIG_PAX_KERNEXEC)
+	if ((regs->cs & 0xFFFF) == __KERNEL_CS || (regs->cs & 0xFFFF) == __KERNEXEC_KERNEL_CS)
+		die("PAX: suspicious general protection fault", regs, error_code);
+	else
+#endif
+
 	die("general protection fault", regs, error_code);
 }
 
@@ -421,7 +450,7 @@ dotraplinkage void __kprobes do_debug(st
 	/* It's safe to allow irq's after DR6 has been saved */
 	preempt_conditional_sti(regs);
 
-	if (regs->flags & X86_VM_MASK) {
+	if (v8086_mode(regs)) {
 		handle_vm86_trap((struct kernel_vm86_regs *) regs,
 				error_code, 1);
 		preempt_conditional_cli(regs);
@@ -436,7 +465,7 @@ dotraplinkage void __kprobes do_debug(st
 	 * We already checked v86 mode above, so we can check for kernel mode
 	 * by just checking the CPL of CS.
 	 */
-	if ((dr6 & DR_STEP) && !user_mode(regs)) {
+	if ((dr6 & DR_STEP) && !user_mode_novm(regs)) {
 		tsk->thread.debugreg6 &= ~DR_STEP;
 		set_tsk_thread_flag(tsk, TIF_SINGLESTEP);
 		regs->flags &= ~X86_EFLAGS_TF;
@@ -466,7 +495,7 @@ void math_error(struct pt_regs *regs, in
 		return;
 	conditional_sti(regs);
 
-	if (!user_mode_vm(regs))
+	if (!user_mode(regs))
 	{
 		if (!fixup_exception(regs)) {
 			task->thread.error_code = error_code;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/vm86_32.c linux-3.3.8-pax/arch/x86/kernel/vm86_32.c
--- linux-3.3.8/arch/x86/kernel/vm86_32.c	2012-04-03 22:02:49.234110200 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/vm86_32.c	2012-05-16 21:21:02.113543436 +0200
@@ -148,7 +148,7 @@ struct pt_regs *save_v86_state(struct ke
 		do_exit(SIGSEGV);
 	}
 
-	tss = &per_cpu(init_tss, get_cpu());
+	tss = init_tss + get_cpu();
 	current->thread.sp0 = current->thread.saved_sp0;
 	current->thread.sysenter_cs = __KERNEL_CS;
 	load_sp0(tss, &current->thread);
@@ -326,7 +326,7 @@ static void do_sys_vm86(struct kernel_vm
 	tsk->thread.saved_fs = info->regs32->fs;
 	tsk->thread.saved_gs = get_user_gs(info->regs32);
 
-	tss = &per_cpu(init_tss, get_cpu());
+	tss = init_tss + get_cpu();
 	tsk->thread.sp0 = (unsigned long) &info->VM86_TSS_ESP0;
 	if (cpu_has_sep)
 		tsk->thread.sysenter_cs = 0;
@@ -533,7 +533,7 @@ static void do_int(struct kernel_vm86_re
 		goto cannot_handle;
 	if (i == 0x21 && is_revectored(AH(regs), &KVM86->int21_revectored))
 		goto cannot_handle;
-	intr_ptr = (unsigned long __user *) (i << 2);
+	intr_ptr = (__force unsigned long __user *) (i << 2);
 	if (get_user(segoffs, intr_ptr))
 		goto cannot_handle;
 	if ((segoffs >> 16) == BIOSSEG)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/vmlinux.lds.S linux-3.3.8-pax/arch/x86/kernel/vmlinux.lds.S
--- linux-3.3.8/arch/x86/kernel/vmlinux.lds.S	2011-10-24 12:48:26.291091771 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/vmlinux.lds.S	2012-03-19 10:43:43.444034679 +0100
@@ -26,6 +26,13 @@
 #include <asm/page_types.h>
 #include <asm/cache.h>
 #include <asm/boot.h>
+#include <asm/segment.h>
+
+#if defined(CONFIG_X86_32) && defined(CONFIG_PAX_KERNEXEC)
+#define __KERNEL_TEXT_OFFSET	(LOAD_OFFSET + ____LOAD_PHYSICAL_ADDR)
+#else
+#define __KERNEL_TEXT_OFFSET	0
+#endif
 
 #undef i386     /* in case the preprocessor is a 32bit one */
 
@@ -69,30 +76,43 @@ jiffies_64 = jiffies;
 
 PHDRS {
 	text PT_LOAD FLAGS(5);          /* R_E */
+#ifdef CONFIG_X86_32
+	module PT_LOAD FLAGS(5);        /* R_E */
+#endif
+#ifdef CONFIG_XEN
+	rodata PT_LOAD FLAGS(5);        /* R_E */
+#else
+	rodata PT_LOAD FLAGS(4);        /* R__ */
+#endif
 	data PT_LOAD FLAGS(6);          /* RW_ */
-#ifdef CONFIG_X86_64
+	init.begin PT_LOAD FLAGS(6);    /* RW_ */
 #ifdef CONFIG_SMP
 	percpu PT_LOAD FLAGS(6);        /* RW_ */
 #endif
+	text.init PT_LOAD FLAGS(5);     /* R_E */
+	text.exit PT_LOAD FLAGS(5);     /* R_E */
 	init PT_LOAD FLAGS(7);          /* RWE */
-#endif
 	note PT_NOTE FLAGS(0);          /* ___ */
 }
 
 SECTIONS
 {
 #ifdef CONFIG_X86_32
-        . = LOAD_OFFSET + LOAD_PHYSICAL_ADDR;
-        phys_startup_32 = startup_32 - LOAD_OFFSET;
+	. = LOAD_OFFSET + ____LOAD_PHYSICAL_ADDR;
 #else
-        . = __START_KERNEL;
-        phys_startup_64 = startup_64 - LOAD_OFFSET;
+	. = __START_KERNEL;
 #endif
 
 	/* Text and read-only data */
-	.text :  AT(ADDR(.text) - LOAD_OFFSET) {
-		_text = .;
+	.text (. - __KERNEL_TEXT_OFFSET): AT(ADDR(.text) - LOAD_OFFSET + __KERNEL_TEXT_OFFSET) {
 		/* bootstrapping code */
+#ifdef CONFIG_X86_32
+		phys_startup_32 = startup_32 - LOAD_OFFSET + __KERNEL_TEXT_OFFSET;
+#else
+		phys_startup_64 = startup_64 - LOAD_OFFSET + __KERNEL_TEXT_OFFSET;
+#endif
+		__LOAD_PHYSICAL_ADDR = . - LOAD_OFFSET + __KERNEL_TEXT_OFFSET;
+		_text = .;
 		HEAD_TEXT
 #ifdef CONFIG_X86_32
 		. = ALIGN(PAGE_SIZE);
@@ -108,13 +128,47 @@ SECTIONS
 		IRQENTRY_TEXT
 		*(.fixup)
 		*(.gnu.warning)
-		/* End of text section */
-		_etext = .;
 	} :text = 0x9090
 
-	NOTES :text :note
+	. += __KERNEL_TEXT_OFFSET;
+
+#ifdef CONFIG_X86_32
+	. = ALIGN(PAGE_SIZE);
+	.module.text : AT(ADDR(.module.text) - LOAD_OFFSET) {
+
+#if defined(CONFIG_PAX_KERNEXEC) && defined(CONFIG_MODULES)
+		MODULES_EXEC_VADDR = .;
+		BYTE(0)
+		. += (CONFIG_PAX_KERNEXEC_MODULE_TEXT * 1024 * 1024);
+		. = ALIGN(HPAGE_SIZE);
+		MODULES_EXEC_END = . - 1;
+#endif
+
+	} :module
+#endif
+
+	.text.end : AT(ADDR(.text.end) - LOAD_OFFSET) {
+		/* End of text section */
+		_etext = . - __KERNEL_TEXT_OFFSET;
+	}
+
+#ifdef CONFIG_X86_32
+	. = ALIGN(PAGE_SIZE);
+	.rodata.page_aligned : AT(ADDR(.rodata.page_aligned) - LOAD_OFFSET) {
+		*(.idt)
+		. = ALIGN(PAGE_SIZE);
+		*(.empty_zero_page)
+		*(.initial_pg_fixmap)
+		*(.initial_pg_pmd)
+		*(.initial_page_table)
+		*(.swapper_pg_dir)
+	} :rodata
+#endif
+
+	. = ALIGN(PAGE_SIZE);
+	NOTES :rodata :note
 
-	EXCEPTION_TABLE(16) :text = 0x9090
+	EXCEPTION_TABLE(16) :rodata
 
 #if defined(CONFIG_DEBUG_RODATA)
 	/* .text should occupy whole number of pages */
@@ -126,16 +180,20 @@ SECTIONS
 
 	/* Data */
 	.data : AT(ADDR(.data) - LOAD_OFFSET) {
+
+#ifdef CONFIG_PAX_KERNEXEC
+		. = ALIGN(HPAGE_SIZE);
+#else
+		. = ALIGN(PAGE_SIZE);
+#endif
+
 		/* Start of data section */
 		_sdata = .;
 
 		/* init_task */
 		INIT_TASK_DATA(THREAD_SIZE)
 
-#ifdef CONFIG_X86_32
-		/* 32 bit has nosave before _edata */
 		NOSAVE_DATA
-#endif
 
 		PAGE_ALIGNED_DATA(PAGE_SIZE)
 
@@ -176,12 +234,19 @@ SECTIONS
 #endif /* CONFIG_X86_64 */
 
 	/* Init code and data - will be freed after init */
-	. = ALIGN(PAGE_SIZE);
 	.init.begin : AT(ADDR(.init.begin) - LOAD_OFFSET) {
+		BYTE(0)
+
+#ifdef CONFIG_PAX_KERNEXEC
+		. = ALIGN(HPAGE_SIZE);
+#else
+		. = ALIGN(PAGE_SIZE);
+#endif
+
 		__init_begin = .; /* paired with __init_end */
-	}
+	} :init.begin
 
-#if defined(CONFIG_X86_64) && defined(CONFIG_SMP)
+#ifdef CONFIG_SMP
 	/*
 	 * percpu offsets are zero-based on SMP.  PERCPU_VADDR() changes the
 	 * output PHDR, so the next output section - .init.text - should
@@ -190,12 +255,27 @@ SECTIONS
 	PERCPU_VADDR(INTERNODE_CACHE_BYTES, 0, :percpu)
 #endif
 
-	INIT_TEXT_SECTION(PAGE_SIZE)
-#ifdef CONFIG_X86_64
-	:init
-#endif
+	. = ALIGN(PAGE_SIZE);
+	init_begin = .;
+	.init.text (. - __KERNEL_TEXT_OFFSET): AT(init_begin - LOAD_OFFSET) {
+		VMLINUX_SYMBOL(_sinittext) = .;
+		INIT_TEXT
+		VMLINUX_SYMBOL(_einittext) = .;
+		. = ALIGN(PAGE_SIZE);
+	} :text.init
 
-	INIT_DATA_SECTION(16)
+	/*
+	 * .exit.text is discard at runtime, not link time, to deal with
+	 *  references from .altinstructions and .eh_frame
+	 */
+	.exit.text : AT(ADDR(.exit.text) - LOAD_OFFSET + __KERNEL_TEXT_OFFSET) {
+		EXIT_TEXT
+		. = ALIGN(16);
+	} :text.exit
+	. = init_begin + SIZEOF(.init.text) + SIZEOF(.exit.text);
+
+	. = ALIGN(PAGE_SIZE);
+	INIT_DATA_SECTION(16) :init
 
 	/*
 	 * Code and data for a variety of lowlevel trampolines, to be
@@ -269,19 +349,12 @@ SECTIONS
 	}
 
 	. = ALIGN(8);
-	/*
-	 * .exit.text is discard at runtime, not link time, to deal with
-	 *  references from .altinstructions and .eh_frame
-	 */
-	.exit.text : AT(ADDR(.exit.text) - LOAD_OFFSET) {
-		EXIT_TEXT
-	}
 
 	.exit.data : AT(ADDR(.exit.data) - LOAD_OFFSET) {
 		EXIT_DATA
 	}
 
-#if !defined(CONFIG_X86_64) || !defined(CONFIG_SMP)
+#ifndef CONFIG_SMP
 	PERCPU_SECTION(INTERNODE_CACHE_BYTES)
 #endif
 
@@ -300,16 +373,10 @@ SECTIONS
 	.smp_locks : AT(ADDR(.smp_locks) - LOAD_OFFSET) {
 		__smp_locks = .;
 		*(.smp_locks)
-		. = ALIGN(PAGE_SIZE);
 		__smp_locks_end = .;
+		. = ALIGN(PAGE_SIZE);
 	}
 
-#ifdef CONFIG_X86_64
-	.data_nosave : AT(ADDR(.data_nosave) - LOAD_OFFSET) {
-		NOSAVE_DATA
-	}
-#endif
-
 	/* BSS */
 	. = ALIGN(PAGE_SIZE);
 	.bss : AT(ADDR(.bss) - LOAD_OFFSET) {
@@ -325,6 +392,7 @@ SECTIONS
 		__brk_base = .;
 		. += 64 * 1024;		/* 64k alignment slop space */
 		*(.brk_reservation)	/* areas brk users have reserved */
+		. = ALIGN(HPAGE_SIZE);
 		__brk_limit = .;
 	}
 
@@ -351,13 +419,12 @@ SECTIONS
  * for the boot processor.
  */
 #define INIT_PER_CPU(x) init_per_cpu__##x = x + __per_cpu_load
-INIT_PER_CPU(gdt_page);
 INIT_PER_CPU(irq_stack_union);
 
 /*
  * Build-time check on the image size:
  */
-. = ASSERT((_end - _text <= KERNEL_IMAGE_SIZE),
+. = ASSERT((_end - _text - __KERNEL_TEXT_OFFSET <= KERNEL_IMAGE_SIZE),
 	   "kernel image bigger than KERNEL_IMAGE_SIZE");
 
 #ifdef CONFIG_SMP
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/vsyscall_64.c linux-3.3.8-pax/arch/x86/kernel/vsyscall_64.c
--- linux-3.3.8/arch/x86/kernel/vsyscall_64.c	2012-03-19 10:38:56.576049997 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/vsyscall_64.c	2012-03-19 10:43:43.444034679 +0100
@@ -57,15 +57,13 @@ DEFINE_VVAR(struct vsyscall_gtod_data, v
 	.lock = __SEQLOCK_UNLOCKED(__vsyscall_gtod_data.lock),
 };
 
-static enum { EMULATE, NATIVE, NONE } vsyscall_mode = EMULATE;
+static enum { EMULATE, NONE } vsyscall_mode = EMULATE;
 
 static int __init vsyscall_setup(char *str)
 {
 	if (str) {
 		if (!strcmp("emulate", str))
 			vsyscall_mode = EMULATE;
-		else if (!strcmp("native", str))
-			vsyscall_mode = NATIVE;
 		else if (!strcmp("none", str))
 			vsyscall_mode = NONE;
 		else
@@ -207,7 +205,7 @@ bool emulate_vsyscall(struct pt_regs *re
 
 	tsk = current;
 	if (seccomp_mode(&tsk->seccomp))
-		do_exit(SIGKILL);
+		do_group_exit(SIGKILL);
 
 	/*
 	 * With a real vsyscall, page faults cause SIGSEGV.  We want to
@@ -279,8 +277,7 @@ bool emulate_vsyscall(struct pt_regs *re
 	return true;
 
 sigsegv:
-	force_sig(SIGSEGV, current);
-	return true;
+	do_group_exit(SIGKILL);
 }
 
 /*
@@ -333,10 +330,7 @@ void __init map_vsyscall(void)
 	extern char __vvar_page;
 	unsigned long physaddr_vvar_page = __pa_symbol(&__vvar_page);
 
-	__set_fixmap(VSYSCALL_FIRST_PAGE, physaddr_vsyscall,
-		     vsyscall_mode == NATIVE
-		     ? PAGE_KERNEL_VSYSCALL
-		     : PAGE_KERNEL_VVAR);
+	__set_fixmap(VSYSCALL_FIRST_PAGE, physaddr_vsyscall, PAGE_KERNEL_VVAR);
 	BUILD_BUG_ON((unsigned long)__fix_to_virt(VSYSCALL_FIRST_PAGE) !=
 		     (unsigned long)VSYSCALL_START);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/x8664_ksyms_64.c linux-3.3.8-pax/arch/x86/kernel/x8664_ksyms_64.c
--- linux-3.3.8/arch/x86/kernel/x8664_ksyms_64.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/kernel/x8664_ksyms_64.c	2012-03-19 10:43:43.448034680 +0100
@@ -29,8 +29,6 @@ EXPORT_SYMBOL(__put_user_8);
 EXPORT_SYMBOL(copy_user_generic_string);
 EXPORT_SYMBOL(copy_user_generic_unrolled);
 EXPORT_SYMBOL(__copy_user_nocache);
-EXPORT_SYMBOL(_copy_from_user);
-EXPORT_SYMBOL(_copy_to_user);
 
 EXPORT_SYMBOL(copy_page);
 EXPORT_SYMBOL(clear_page);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kernel/xsave.c linux-3.3.8-pax/arch/x86/kernel/xsave.c
--- linux-3.3.8/arch/x86/kernel/xsave.c	2012-03-19 10:38:56.576049997 +0100
+++ linux-3.3.8-pax/arch/x86/kernel/xsave.c	2012-03-19 10:43:43.448034680 +0100
@@ -130,7 +130,7 @@ int check_for_xstate(struct i387_fxsave_
 	    fx_sw_user->xstate_size > fx_sw_user->extended_size)
 		return -EINVAL;
 
-	err = __get_user(magic2, (__u32 *) (((void *)fpstate) +
+	err = __get_user(magic2, (__u32 __user *) (((void __user *)fpstate) +
 					    fx_sw_user->extended_size -
 					    FP_XSTATE_MAGIC2_SIZE));
 	if (err)
@@ -266,7 +266,7 @@ fx_only:
 	 * the other extended state.
 	 */
 	xrstor_state(init_xstate_buf, pcntxt_mask & ~XSTATE_FPSSE);
-	return fxrstor_checking((__force struct i387_fxsave_struct *)buf);
+	return fxrstor_checking((struct i387_fxsave_struct __force_kernel *)buf);
 }
 
 /*
@@ -295,7 +295,7 @@ int restore_i387_xstate(void __user *buf
 	if (use_xsave())
 		err = restore_user_xstate(buf);
 	else
-		err = fxrstor_checking((__force struct i387_fxsave_struct *)
+		err = fxrstor_checking((struct i387_fxsave_struct __force_kernel *)
 				       buf);
 	if (unlikely(err)) {
 		/*
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kvm/cpuid.c linux-3.3.8-pax/arch/x86/kvm/cpuid.c
--- linux-3.3.8/arch/x86/kvm/cpuid.c	2012-03-19 10:38:56.608049996 +0100
+++ linux-3.3.8-pax/arch/x86/kvm/cpuid.c	2012-03-19 10:43:43.448034680 +0100
@@ -124,15 +124,20 @@ int kvm_vcpu_ioctl_set_cpuid2(struct kvm
 			      struct kvm_cpuid2 *cpuid,
 			      struct kvm_cpuid_entry2 __user *entries)
 {
-	int r;
+	int r, i;
 
 	r = -E2BIG;
 	if (cpuid->nent > KVM_MAX_CPUID_ENTRIES)
 		goto out;
 	r = -EFAULT;
-	if (copy_from_user(&vcpu->arch.cpuid_entries, entries,
-			   cpuid->nent * sizeof(struct kvm_cpuid_entry2)))
+	if (!access_ok(VERIFY_READ, entries, cpuid->nent * sizeof(struct kvm_cpuid_entry2)))
 		goto out;
+	for (i = 0; i < cpuid->nent; ++i) {
+		struct kvm_cpuid_entry2 cpuid_entry;
+		if (__copy_from_user(&cpuid_entry, entries + i, sizeof(cpuid_entry)))
+			goto out;
+		vcpu->arch.cpuid_entries[i] = cpuid_entry;
+	}
 	vcpu->arch.cpuid_nent = cpuid->nent;
 	kvm_apic_set_version(vcpu);
 	kvm_x86_ops->cpuid_update(vcpu);
@@ -147,15 +152,19 @@ int kvm_vcpu_ioctl_get_cpuid2(struct kvm
 			      struct kvm_cpuid2 *cpuid,
 			      struct kvm_cpuid_entry2 __user *entries)
 {
-	int r;
+	int r, i;
 
 	r = -E2BIG;
 	if (cpuid->nent < vcpu->arch.cpuid_nent)
 		goto out;
 	r = -EFAULT;
-	if (copy_to_user(entries, &vcpu->arch.cpuid_entries,
-			 vcpu->arch.cpuid_nent * sizeof(struct kvm_cpuid_entry2)))
+	if (!access_ok(VERIFY_WRITE, entries, vcpu->arch.cpuid_nent * sizeof(struct kvm_cpuid_entry2)))
 		goto out;
+	for (i = 0; i < vcpu->arch.cpuid_nent; ++i) {
+		struct kvm_cpuid_entry2 cpuid_entry = vcpu->arch.cpuid_entries[i];
+		if (__copy_to_user(entries + i, &cpuid_entry, sizeof(cpuid_entry)))
+			goto out;
+	}
 	return 0;
 
 out:
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kvm/emulate.c linux-3.3.8-pax/arch/x86/kvm/emulate.c
--- linux-3.3.8/arch/x86/kvm/emulate.c	2012-03-19 10:38:56.608049996 +0100
+++ linux-3.3.8-pax/arch/x86/kvm/emulate.c	2012-03-19 10:43:43.452034681 +0100
@@ -250,6 +250,7 @@ struct gprefix {
 
 #define ____emulate_2op(ctxt, _op, _x, _y, _suffix, _dsttype)	\
 	do {								\
+		unsigned long _tmp;					\
 		__asm__ __volatile__ (					\
 			_PRE_EFLAGS("0", "4", "2")			\
 			_op _suffix " %"_x"3,%1; "			\
@@ -264,8 +265,6 @@ struct gprefix {
 /* Raw emulation: instruction has two explicit operands. */
 #define __emulate_2op_nobyte(ctxt,_op,_wx,_wy,_lx,_ly,_qx,_qy)		\
 	do {								\
-		unsigned long _tmp;					\
-									\
 		switch ((ctxt)->dst.bytes) {				\
 		case 2:							\
 			____emulate_2op(ctxt,_op,_wx,_wy,"w",u16);	\
@@ -281,7 +280,6 @@ struct gprefix {
 
 #define __emulate_2op(ctxt,_op,_bx,_by,_wx,_wy,_lx,_ly,_qx,_qy)		     \
 	do {								     \
-		unsigned long _tmp;					     \
 		switch ((ctxt)->dst.bytes) {				     \
 		case 1:							     \
 			____emulate_2op(ctxt,_op,_bx,_by,"b",u8);	     \
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kvm/lapic.c linux-3.3.8-pax/arch/x86/kvm/lapic.c
--- linux-3.3.8/arch/x86/kvm/lapic.c	2012-03-19 10:38:56.612049995 +0100
+++ linux-3.3.8-pax/arch/x86/kvm/lapic.c	2012-03-19 10:43:43.452034681 +0100
@@ -54,7 +54,7 @@
 #define APIC_BUS_CYCLE_NS 1
 
 /* #define apic_debug(fmt,arg...) printk(KERN_WARNING fmt,##arg) */
-#define apic_debug(fmt, arg...)
+#define apic_debug(fmt, arg...) do {} while (0)
 
 #define APIC_LVT_NUM			6
 /* 14 is the version for Xeon and Pentium 8.4.8*/
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kvm/paging_tmpl.h linux-3.3.8-pax/arch/x86/kvm/paging_tmpl.h
--- linux-3.3.8/arch/x86/kvm/paging_tmpl.h	2012-03-19 10:38:56.620049994 +0100
+++ linux-3.3.8-pax/arch/x86/kvm/paging_tmpl.h	2012-03-19 10:43:43.452034681 +0100
@@ -197,7 +197,7 @@ retry_walk:
 		if (unlikely(kvm_is_error_hva(host_addr)))
 			goto error;
 
-		ptep_user = (pt_element_t __user *)((void *)host_addr + offset);
+		ptep_user = (pt_element_t __force_user *)((void *)host_addr + offset);
 		if (unlikely(__copy_from_user(&pte, ptep_user, sizeof(pte))))
 			goto error;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kvm/svm.c linux-3.3.8-pax/arch/x86/kvm/svm.c
--- linux-3.3.8/arch/x86/kvm/svm.c	2012-03-19 10:38:56.620049994 +0100
+++ linux-3.3.8-pax/arch/x86/kvm/svm.c	2012-04-16 12:37:50.122344110 +0200
@@ -3420,7 +3420,11 @@ static void reload_tss(struct kvm_vcpu *
 	int cpu = raw_smp_processor_id();
 
 	struct svm_cpu_data *sd = per_cpu(svm_data, cpu);
+
+	pax_open_kernel();
 	sd->tss_desc->type = 9; /* available 32/64-bit TSS */
+	pax_close_kernel();
+
 	load_TR_desc();
 }
 
@@ -3798,6 +3802,10 @@ static void svm_vcpu_run(struct kvm_vcpu
 #endif
 #endif
 
+#if defined(CONFIG_X86_32) && defined(CONFIG_PAX_MEMORY_UDEREF)
+	__set_fs(current_thread_info()->addr_limit);
+#endif
+
 	reload_tss(vcpu);
 
 	local_irq_disable();
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kvm/vmx.c linux-3.3.8-pax/arch/x86/kvm/vmx.c
--- linux-3.3.8/arch/x86/kvm/vmx.c	2012-05-12 22:26:33.652957826 +0200
+++ linux-3.3.8-pax/arch/x86/kvm/vmx.c	2012-05-12 22:26:42.720957333 +0200
@@ -1306,7 +1306,11 @@ static void reload_tss(void)
 	struct desc_struct *descs;
 
 	descs = (void *)gdt->address;
+
+	pax_open_kernel();
 	descs[GDT_ENTRY_TSS].type = 9; /* available TSS */
+	pax_close_kernel();
+
 	load_TR_desc();
 }
 
@@ -2637,8 +2641,11 @@ static __init int hardware_setup(void)
 	if (!cpu_has_vmx_flexpriority())
 		flexpriority_enabled = 0;
 
-	if (!cpu_has_vmx_tpr_shadow())
-		kvm_x86_ops->update_cr8_intercept = NULL;
+	if (!cpu_has_vmx_tpr_shadow()) {
+		pax_open_kernel();
+		*(void **)&kvm_x86_ops->update_cr8_intercept = NULL;
+		pax_close_kernel();
+	}
 
 	if (enable_ept && !cpu_has_vmx_ept_2m_page())
 		kvm_disable_largepages();
@@ -3654,7 +3661,7 @@ static void vmx_set_constant_host_state(
 	vmcs_writel(HOST_IDTR_BASE, dt.address);   /* 22.2.4 */
 
 	asm("mov $.Lkvm_vmx_return, %0" : "=r"(tmpl));
-	vmcs_writel(HOST_RIP, tmpl); /* 22.2.5 */
+	vmcs_writel(HOST_RIP, ktla_ktva(tmpl)); /* 22.2.5 */
 
 	rdmsr(MSR_IA32_SYSENTER_CS, low32, high32);
 	vmcs_write32(HOST_IA32_SYSENTER_CS, low32);
@@ -6192,6 +6199,12 @@ static void __noclone vmx_vcpu_run(struc
 		"jmp .Lkvm_vmx_return \n\t"
 		".Llaunched: " __ex(ASM_VMX_VMRESUME) "\n\t"
 		".Lkvm_vmx_return: "
+
+#if defined(CONFIG_X86_32) && defined(CONFIG_PAX_KERNEXEC)
+		"ljmp %[cs],$.Lkvm_vmx_return2\n\t"
+		".Lkvm_vmx_return2: "
+#endif
+
 		/* Save guest registers, load host registers, keep flags */
 		"mov %0, %c[wordsize](%%"R"sp) \n\t"
 		"pop %0 \n\t"
@@ -6240,6 +6253,11 @@ static void __noclone vmx_vcpu_run(struc
 #endif
 		[cr2]"i"(offsetof(struct vcpu_vmx, vcpu.arch.cr2)),
 		[wordsize]"i"(sizeof(ulong))
+
+#if defined(CONFIG_X86_32) && defined(CONFIG_PAX_KERNEXEC)
+		,[cs]"i"(__KERNEL_CS)
+#endif
+
 	      : "cc", "memory"
 		, R"ax", R"bx", R"di", R"si"
 #ifdef CONFIG_X86_64
@@ -6268,7 +6286,16 @@ static void __noclone vmx_vcpu_run(struc
 		}
 	}
 
-	asm("mov %0, %%ds; mov %0, %%es" : : "r"(__USER_DS));
+	asm("mov %0, %%ds; mov %0, %%es; mov %0, %%ss" : : "r"(__KERNEL_DS));
+
+#if defined(CONFIG_X86_32) && defined(CONFIG_PAX_KERNEXEC)
+	loadsegment(fs, __KERNEL_PERCPU);
+#endif
+
+#if defined(CONFIG_X86_32) && defined(CONFIG_PAX_MEMORY_UDEREF)
+	__set_fs(current_thread_info()->addr_limit);
+#endif
+
 	vmx->loaded_vmcs->launched = 1;
 
 	vmx->exit_reason = vmcs_read32(VM_EXIT_REASON);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/kvm/x86.c linux-3.3.8-pax/arch/x86/kvm/x86.c
--- linux-3.3.8/arch/x86/kvm/x86.c	2012-05-12 22:26:33.660957818 +0200
+++ linux-3.3.8-pax/arch/x86/kvm/x86.c	2012-05-16 21:21:02.121543436 +0200
@@ -1311,8 +1311,8 @@ static int xen_hvm_config(struct kvm_vcp
 {
 	struct kvm *kvm = vcpu->kvm;
 	int lm = is_long_mode(vcpu);
-	u8 *blob_addr = lm ? (u8 *)(long)kvm->arch.xen_hvm_config.blob_addr_64
-		: (u8 *)(long)kvm->arch.xen_hvm_config.blob_addr_32;
+	u8 __user *blob_addr = lm ? (u8 __user *)(long)kvm->arch.xen_hvm_config.blob_addr_64
+		: (u8 __user *)(long)kvm->arch.xen_hvm_config.blob_addr_32;
 	u8 blob_size = lm ? kvm->arch.xen_hvm_config.blob_size_64
 		: kvm->arch.xen_hvm_config.blob_size_32;
 	u32 page_num = data & ~PAGE_MASK;
@@ -2145,6 +2145,8 @@ long kvm_arch_dev_ioctl(struct file *fil
 		if (n < msr_list.nmsrs)
 			goto out;
 		r = -EFAULT;
+		if (num_msrs_to_save > ARRAY_SIZE(msrs_to_save))
+			goto out;
 		if (copy_to_user(user_msr_list->indices, &msrs_to_save,
 				 num_msrs_to_save * sizeof(u32)))
 			goto out;
@@ -2266,7 +2268,7 @@ static int kvm_vcpu_ioctl_set_lapic(stru
 static int kvm_vcpu_ioctl_interrupt(struct kvm_vcpu *vcpu,
 				    struct kvm_interrupt *irq)
 {
-	if (irq->irq < 0 || irq->irq >= 256)
+	if (irq->irq >= 256)
 		return -EINVAL;
 	if (irqchip_in_kernel(vcpu->kvm))
 		return -ENXIO;
@@ -4782,7 +4784,7 @@ static void kvm_set_mmio_spte_mask(void)
 	kvm_mmu_set_mmio_spte_mask(mask);
 }
 
-int kvm_arch_init(void *opaque)
+int kvm_arch_init(const void *opaque)
 {
 	int r;
 	struct kvm_x86_ops *ops = (struct kvm_x86_ops *)opaque;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/lguest/boot.c linux-3.3.8-pax/arch/x86/lguest/boot.c
--- linux-3.3.8/arch/x86/lguest/boot.c	2012-03-19 10:38:56.640049994 +0100
+++ linux-3.3.8-pax/arch/x86/lguest/boot.c	2012-03-19 10:43:43.464034679 +0100
@@ -1200,9 +1200,10 @@ static __init int early_put_chars(u32 vt
  * Rebooting also tells the Host we're finished, but the RESTART flag tells the
  * Launcher to reboot us.
  */
-static void lguest_restart(char *reason)
+static __noreturn void lguest_restart(char *reason)
 {
 	hcall(LHCALL_SHUTDOWN, __pa(reason), LGUEST_SHUTDOWN_RESTART, 0, 0);
+	BUG();
 }
 
 /*G:050
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/lib/atomic64_32.c linux-3.3.8-pax/arch/x86/lib/atomic64_32.c
--- linux-3.3.8/arch/x86/lib/atomic64_32.c	2011-10-24 12:48:26.347091768 +0200
+++ linux-3.3.8-pax/arch/x86/lib/atomic64_32.c	2012-03-19 10:43:43.464034679 +0100
@@ -8,18 +8,30 @@
 
 long long atomic64_read_cx8(long long, const atomic64_t *v);
 EXPORT_SYMBOL(atomic64_read_cx8);
+long long atomic64_read_unchecked_cx8(long long, const atomic64_unchecked_t *v);
+EXPORT_SYMBOL(atomic64_read_unchecked_cx8);
 long long atomic64_set_cx8(long long, const atomic64_t *v);
 EXPORT_SYMBOL(atomic64_set_cx8);
+long long atomic64_set_unchecked_cx8(long long, const atomic64_unchecked_t *v);
+EXPORT_SYMBOL(atomic64_set_unchecked_cx8);
 long long atomic64_xchg_cx8(long long, unsigned high);
 EXPORT_SYMBOL(atomic64_xchg_cx8);
 long long atomic64_add_return_cx8(long long a, atomic64_t *v);
 EXPORT_SYMBOL(atomic64_add_return_cx8);
+long long atomic64_add_return_unchecked_cx8(long long a, atomic64_unchecked_t *v);
+EXPORT_SYMBOL(atomic64_add_return_unchecked_cx8);
 long long atomic64_sub_return_cx8(long long a, atomic64_t *v);
 EXPORT_SYMBOL(atomic64_sub_return_cx8);
+long long atomic64_sub_return_unchecked_cx8(long long a, atomic64_unchecked_t *v);
+EXPORT_SYMBOL(atomic64_sub_return_unchecked_cx8);
 long long atomic64_inc_return_cx8(long long a, atomic64_t *v);
 EXPORT_SYMBOL(atomic64_inc_return_cx8);
+long long atomic64_inc_return_unchecked_cx8(long long a, atomic64_unchecked_t *v);
+EXPORT_SYMBOL(atomic64_inc_return_unchecked_cx8);
 long long atomic64_dec_return_cx8(long long a, atomic64_t *v);
 EXPORT_SYMBOL(atomic64_dec_return_cx8);
+long long atomic64_dec_return_unchecked_cx8(long long a, atomic64_unchecked_t *v);
+EXPORT_SYMBOL(atomic64_dec_return_unchecked_cx8);
 long long atomic64_dec_if_positive_cx8(atomic64_t *v);
 EXPORT_SYMBOL(atomic64_dec_if_positive_cx8);
 int atomic64_inc_not_zero_cx8(atomic64_t *v);
@@ -30,26 +42,46 @@ EXPORT_SYMBOL(atomic64_add_unless_cx8);
 #ifndef CONFIG_X86_CMPXCHG64
 long long atomic64_read_386(long long, const atomic64_t *v);
 EXPORT_SYMBOL(atomic64_read_386);
+long long atomic64_read_unchecked_386(long long, const atomic64_unchecked_t *v);
+EXPORT_SYMBOL(atomic64_read_unchecked_386);
 long long atomic64_set_386(long long, const atomic64_t *v);
 EXPORT_SYMBOL(atomic64_set_386);
+long long atomic64_set_unchecked_386(long long, const atomic64_unchecked_t *v);
+EXPORT_SYMBOL(atomic64_set_unchecked_386);
 long long atomic64_xchg_386(long long, unsigned high);
 EXPORT_SYMBOL(atomic64_xchg_386);
 long long atomic64_add_return_386(long long a, atomic64_t *v);
 EXPORT_SYMBOL(atomic64_add_return_386);
+long long atomic64_add_return_unchecked_386(long long a, atomic64_unchecked_t *v);
+EXPORT_SYMBOL(atomic64_add_return_unchecked_386);
 long long atomic64_sub_return_386(long long a, atomic64_t *v);
 EXPORT_SYMBOL(atomic64_sub_return_386);
+long long atomic64_sub_return_unchecked_386(long long a, atomic64_unchecked_t *v);
+EXPORT_SYMBOL(atomic64_sub_return_unchecked_386);
 long long atomic64_inc_return_386(long long a, atomic64_t *v);
 EXPORT_SYMBOL(atomic64_inc_return_386);
+long long atomic64_inc_return_unchecked_386(long long a, atomic64_unchecked_t *v);
+EXPORT_SYMBOL(atomic64_inc_return_unchecked_386);
 long long atomic64_dec_return_386(long long a, atomic64_t *v);
 EXPORT_SYMBOL(atomic64_dec_return_386);
+long long atomic64_dec_return_unchecked_386(long long a, atomic64_unchecked_t *v);
+EXPORT_SYMBOL(atomic64_dec_return_unchecked_386);
 long long atomic64_add_386(long long a, atomic64_t *v);
 EXPORT_SYMBOL(atomic64_add_386);
+long long atomic64_add_unchecked_386(long long a, atomic64_unchecked_t *v);
+EXPORT_SYMBOL(atomic64_add_unchecked_386);
 long long atomic64_sub_386(long long a, atomic64_t *v);
 EXPORT_SYMBOL(atomic64_sub_386);
+long long atomic64_sub_unchecked_386(long long a, atomic64_unchecked_t *v);
+EXPORT_SYMBOL(atomic64_sub_unchecked_386);
 long long atomic64_inc_386(long long a, atomic64_t *v);
 EXPORT_SYMBOL(atomic64_inc_386);
+long long atomic64_inc_unchecked_386(long long a, atomic64_unchecked_t *v);
+EXPORT_SYMBOL(atomic64_inc_unchecked_386);
 long long atomic64_dec_386(long long a, atomic64_t *v);
 EXPORT_SYMBOL(atomic64_dec_386);
+long long atomic64_dec_unchecked_386(long long a, atomic64_unchecked_t *v);
+EXPORT_SYMBOL(atomic64_dec_unchecked_386);
 long long atomic64_dec_if_positive_386(atomic64_t *v);
 EXPORT_SYMBOL(atomic64_dec_if_positive_386);
 int atomic64_inc_not_zero_386(atomic64_t *v);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/lib/atomic64_386_32.S linux-3.3.8-pax/arch/x86/lib/atomic64_386_32.S
--- linux-3.3.8/arch/x86/lib/atomic64_386_32.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/lib/atomic64_386_32.S	2012-03-19 10:43:43.468034678 +0100
@@ -48,6 +48,10 @@ BEGIN(read)
 	movl  (v), %eax
 	movl 4(v), %edx
 RET_ENDP
+BEGIN(read_unchecked)
+	movl  (v), %eax
+	movl 4(v), %edx
+RET_ENDP
 #undef v
 
 #define v %esi
@@ -55,6 +59,10 @@ BEGIN(set)
 	movl %ebx,  (v)
 	movl %ecx, 4(v)
 RET_ENDP
+BEGIN(set_unchecked)
+	movl %ebx,  (v)
+	movl %ecx, 4(v)
+RET_ENDP
 #undef v
 
 #define v  %esi
@@ -70,6 +78,20 @@ RET_ENDP
 BEGIN(add)
 	addl %eax,  (v)
 	adcl %edx, 4(v)
+
+#ifdef CONFIG_PAX_REFCOUNT
+	jno 0f
+	subl %eax,  (v)
+	sbbl %edx, 4(v)
+	int $4
+0:
+	_ASM_EXTABLE(0b, 0b)
+#endif
+
+RET_ENDP
+BEGIN(add_unchecked)
+	addl %eax,  (v)
+	adcl %edx, 4(v)
 RET_ENDP
 #undef v
 
@@ -77,6 +99,24 @@ RET_ENDP
 BEGIN(add_return)
 	addl  (v), %eax
 	adcl 4(v), %edx
+
+#ifdef CONFIG_PAX_REFCOUNT
+	into
+1234:
+	_ASM_EXTABLE(1234b, 2f)
+#endif
+
+	movl %eax,  (v)
+	movl %edx, 4(v)
+
+#ifdef CONFIG_PAX_REFCOUNT
+2:
+#endif
+
+RET_ENDP
+BEGIN(add_return_unchecked)
+	addl  (v), %eax
+	adcl 4(v), %edx
 	movl %eax,  (v)
 	movl %edx, 4(v)
 RET_ENDP
@@ -86,6 +126,20 @@ RET_ENDP
 BEGIN(sub)
 	subl %eax,  (v)
 	sbbl %edx, 4(v)
+
+#ifdef CONFIG_PAX_REFCOUNT
+	jno 0f
+	addl %eax,  (v)
+	adcl %edx, 4(v)
+	int $4
+0:
+	_ASM_EXTABLE(0b, 0b)
+#endif
+
+RET_ENDP
+BEGIN(sub_unchecked)
+	subl %eax,  (v)
+	sbbl %edx, 4(v)
 RET_ENDP
 #undef v
 
@@ -96,6 +150,27 @@ BEGIN(sub_return)
 	sbbl $0, %edx
 	addl  (v), %eax
 	adcl 4(v), %edx
+
+#ifdef CONFIG_PAX_REFCOUNT
+	into
+1234:
+	_ASM_EXTABLE(1234b, 2f)
+#endif
+
+	movl %eax,  (v)
+	movl %edx, 4(v)
+
+#ifdef CONFIG_PAX_REFCOUNT
+2:
+#endif
+
+RET_ENDP
+BEGIN(sub_return_unchecked)
+	negl %edx
+	negl %eax
+	sbbl $0, %edx
+	addl  (v), %eax
+	adcl 4(v), %edx
 	movl %eax,  (v)
 	movl %edx, 4(v)
 RET_ENDP
@@ -105,6 +180,20 @@ RET_ENDP
 BEGIN(inc)
 	addl $1,  (v)
 	adcl $0, 4(v)
+
+#ifdef CONFIG_PAX_REFCOUNT
+	jno 0f
+	subl $1,  (v)
+	sbbl $0, 4(v)
+	int $4
+0:
+	_ASM_EXTABLE(0b, 0b)
+#endif
+
+RET_ENDP
+BEGIN(inc_unchecked)
+	addl $1,  (v)
+	adcl $0, 4(v)
 RET_ENDP
 #undef v
 
@@ -114,6 +203,26 @@ BEGIN(inc_return)
 	movl 4(v), %edx
 	addl $1, %eax
 	adcl $0, %edx
+
+#ifdef CONFIG_PAX_REFCOUNT
+	into
+1234:
+	_ASM_EXTABLE(1234b, 2f)
+#endif
+
+	movl %eax,  (v)
+	movl %edx, 4(v)
+
+#ifdef CONFIG_PAX_REFCOUNT
+2:
+#endif
+
+RET_ENDP
+BEGIN(inc_return_unchecked)
+	movl  (v), %eax
+	movl 4(v), %edx
+	addl $1, %eax
+	adcl $0, %edx
 	movl %eax,  (v)
 	movl %edx, 4(v)
 RET_ENDP
@@ -123,6 +232,20 @@ RET_ENDP
 BEGIN(dec)
 	subl $1,  (v)
 	sbbl $0, 4(v)
+
+#ifdef CONFIG_PAX_REFCOUNT
+	jno 0f
+	addl $1,  (v)
+	adcl $0, 4(v)
+	int $4
+0:
+	_ASM_EXTABLE(0b, 0b)
+#endif
+
+RET_ENDP
+BEGIN(dec_unchecked)
+	subl $1,  (v)
+	sbbl $0, 4(v)
 RET_ENDP
 #undef v
 
@@ -132,6 +255,26 @@ BEGIN(dec_return)
 	movl 4(v), %edx
 	subl $1, %eax
 	sbbl $0, %edx
+
+#ifdef CONFIG_PAX_REFCOUNT
+	into
+1234:
+	_ASM_EXTABLE(1234b, 2f)
+#endif
+
+	movl %eax,  (v)
+	movl %edx, 4(v)
+
+#ifdef CONFIG_PAX_REFCOUNT
+2:
+#endif
+
+RET_ENDP
+BEGIN(dec_return_unchecked)
+	movl  (v), %eax
+	movl 4(v), %edx
+	subl $1, %eax
+	sbbl $0, %edx
 	movl %eax,  (v)
 	movl %edx, 4(v)
 RET_ENDP
@@ -143,6 +286,13 @@ BEGIN(add_unless)
 	adcl %edx, %edi
 	addl  (v), %eax
 	adcl 4(v), %edx
+
+#ifdef CONFIG_PAX_REFCOUNT
+	into
+1234:
+	_ASM_EXTABLE(1234b, 2f)
+#endif
+
 	cmpl %eax, %esi
 	je 3f
 1:
@@ -168,6 +318,13 @@ BEGIN(inc_not_zero)
 1:
 	addl $1, %eax
 	adcl $0, %edx
+
+#ifdef CONFIG_PAX_REFCOUNT
+	into
+1234:
+	_ASM_EXTABLE(1234b, 2f)
+#endif
+
 	movl %eax,  (v)
 	movl %edx, 4(v)
 	movl $1, %eax
@@ -186,6 +343,13 @@ BEGIN(dec_if_positive)
 	movl 4(v), %edx
 	subl $1, %eax
 	sbbl $0, %edx
+
+#ifdef CONFIG_PAX_REFCOUNT
+	into
+1234:
+	_ASM_EXTABLE(1234b, 1f)
+#endif
+
 	js 1f
 	movl %eax,  (v)
 	movl %edx, 4(v)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/lib/atomic64_cx8_32.S linux-3.3.8-pax/arch/x86/lib/atomic64_cx8_32.S
--- linux-3.3.8/arch/x86/lib/atomic64_cx8_32.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/lib/atomic64_cx8_32.S	2012-05-11 15:27:33.266269165 +0200
@@ -35,10 +35,20 @@ ENTRY(atomic64_read_cx8)
 	CFI_STARTPROC
 
 	read64 %ecx
+	pax_force_retaddr
 	ret
 	CFI_ENDPROC
 ENDPROC(atomic64_read_cx8)
 
+ENTRY(atomic64_read_unchecked_cx8)
+	CFI_STARTPROC
+
+	read64 %ecx
+	pax_force_retaddr
+	ret
+	CFI_ENDPROC
+ENDPROC(atomic64_read_unchecked_cx8)
+
 ENTRY(atomic64_set_cx8)
 	CFI_STARTPROC
 
@@ -48,10 +58,25 @@ ENTRY(atomic64_set_cx8)
 	cmpxchg8b (%esi)
 	jne 1b
 
+	pax_force_retaddr
 	ret
 	CFI_ENDPROC
 ENDPROC(atomic64_set_cx8)
 
+ENTRY(atomic64_set_unchecked_cx8)
+	CFI_STARTPROC
+
+1:
+/* we don't need LOCK_PREFIX since aligned 64-bit writes
+ * are atomic on 586 and newer */
+	cmpxchg8b (%esi)
+	jne 1b
+
+	pax_force_retaddr
+	ret
+	CFI_ENDPROC
+ENDPROC(atomic64_set_unchecked_cx8)
+
 ENTRY(atomic64_xchg_cx8)
 	CFI_STARTPROC
 
@@ -62,12 +87,13 @@ ENTRY(atomic64_xchg_cx8)
 	cmpxchg8b (%esi)
 	jne 1b
 
+	pax_force_retaddr
 	ret
 	CFI_ENDPROC
 ENDPROC(atomic64_xchg_cx8)
 
-.macro addsub_return func ins insc
-ENTRY(atomic64_\func\()_return_cx8)
+.macro addsub_return func ins insc unchecked=""
+ENTRY(atomic64_\func\()_return\unchecked\()_cx8)
 	CFI_STARTPROC
 	SAVE ebp
 	SAVE ebx
@@ -84,27 +110,44 @@ ENTRY(atomic64_\func\()_return_cx8)
 	movl %edx, %ecx
 	\ins\()l %esi, %ebx
 	\insc\()l %edi, %ecx
+
+.ifb \unchecked
+#ifdef CONFIG_PAX_REFCOUNT
+	into
+2:
+	_ASM_EXTABLE(2b, 3f)
+#endif
+.endif
+
 	LOCK_PREFIX
 	cmpxchg8b (%ebp)
 	jne 1b
-
-10:
 	movl %ebx, %eax
 	movl %ecx, %edx
+
+.ifb \unchecked
+#ifdef CONFIG_PAX_REFCOUNT
+3:
+#endif
+.endif
+
 	RESTORE edi
 	RESTORE esi
 	RESTORE ebx
 	RESTORE ebp
+	pax_force_retaddr
 	ret
 	CFI_ENDPROC
-ENDPROC(atomic64_\func\()_return_cx8)
+ENDPROC(atomic64_\func\()_return\unchecked\()_cx8)
 .endm
 
 addsub_return add add adc
 addsub_return sub sub sbb
+addsub_return add add adc _unchecked
+addsub_return sub sub sbb _unchecked
 
-.macro incdec_return func ins insc
-ENTRY(atomic64_\func\()_return_cx8)
+.macro incdec_return func ins insc unchecked=""
+ENTRY(atomic64_\func\()_return\unchecked\()_cx8)
 	CFI_STARTPROC
 	SAVE ebx
 
@@ -114,21 +157,39 @@ ENTRY(atomic64_\func\()_return_cx8)
 	movl %edx, %ecx
 	\ins\()l $1, %ebx
 	\insc\()l $0, %ecx
+
+.ifb \unchecked
+#ifdef CONFIG_PAX_REFCOUNT
+	into
+2:
+	_ASM_EXTABLE(2b, 3f)
+#endif
+.endif
+
 	LOCK_PREFIX
 	cmpxchg8b (%esi)
 	jne 1b
 
-10:
 	movl %ebx, %eax
 	movl %ecx, %edx
+
+.ifb \unchecked
+#ifdef CONFIG_PAX_REFCOUNT
+3:
+#endif
+.endif
+
 	RESTORE ebx
+	pax_force_retaddr
 	ret
 	CFI_ENDPROC
-ENDPROC(atomic64_\func\()_return_cx8)
+ENDPROC(atomic64_\func\()_return\unchecked\()_cx8)
 .endm
 
 incdec_return inc add adc
 incdec_return dec sub sbb
+incdec_return inc add adc _unchecked
+incdec_return dec sub sbb _unchecked
 
 ENTRY(atomic64_dec_if_positive_cx8)
 	CFI_STARTPROC
@@ -140,6 +201,13 @@ ENTRY(atomic64_dec_if_positive_cx8)
 	movl %edx, %ecx
 	subl $1, %ebx
 	sbb $0, %ecx
+
+#ifdef CONFIG_PAX_REFCOUNT
+	into
+1234:
+	_ASM_EXTABLE(1234b, 2f)
+#endif
+
 	js 2f
 	LOCK_PREFIX
 	cmpxchg8b (%esi)
@@ -149,6 +217,7 @@ ENTRY(atomic64_dec_if_positive_cx8)
 	movl %ebx, %eax
 	movl %ecx, %edx
 	RESTORE ebx
+	pax_force_retaddr
 	ret
 	CFI_ENDPROC
 ENDPROC(atomic64_dec_if_positive_cx8)
@@ -174,6 +243,13 @@ ENTRY(atomic64_add_unless_cx8)
 	movl %edx, %ecx
 	addl %esi, %ebx
 	adcl %edi, %ecx
+
+#ifdef CONFIG_PAX_REFCOUNT
+	into
+1234:
+	_ASM_EXTABLE(1234b, 3f)
+#endif
+
 	LOCK_PREFIX
 	cmpxchg8b (%ebp)
 	jne 1b
@@ -184,6 +260,7 @@ ENTRY(atomic64_add_unless_cx8)
 	CFI_ADJUST_CFA_OFFSET -8
 	RESTORE ebx
 	RESTORE ebp
+	pax_force_retaddr
 	ret
 4:
 	cmpl %edx, 4(%esp)
@@ -206,6 +283,13 @@ ENTRY(atomic64_inc_not_zero_cx8)
 	movl %edx, %ecx
 	addl $1, %ebx
 	adcl $0, %ecx
+
+#ifdef CONFIG_PAX_REFCOUNT
+	into
+1234:
+	_ASM_EXTABLE(1234b, 3f)
+#endif
+
 	LOCK_PREFIX
 	cmpxchg8b (%esi)
 	jne 1b
@@ -213,6 +297,7 @@ ENTRY(atomic64_inc_not_zero_cx8)
 	movl $1, %eax
 3:
 	RESTORE ebx
+	pax_force_retaddr
 	ret
 4:
 	testl %edx, %edx
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/lib/checksum_32.S linux-3.3.8-pax/arch/x86/lib/checksum_32.S
--- linux-3.3.8/arch/x86/lib/checksum_32.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/lib/checksum_32.S	2012-03-19 10:43:43.468034678 +0100
@@ -28,7 +28,8 @@
 #include <linux/linkage.h>
 #include <asm/dwarf2.h>
 #include <asm/errno.h>
-				
+#include <asm/segment.h>
+
 /*
  * computes a partial checksum, e.g. for TCP/UDP fragments
  */
@@ -296,9 +297,24 @@ unsigned int csum_partial_copy_generic (
 
 #define ARGBASE 16		
 #define FP		12
-		
-ENTRY(csum_partial_copy_generic)
+
+ENTRY(csum_partial_copy_generic_to_user)
 	CFI_STARTPROC
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	pushl_cfi %gs
+	popl_cfi %es
+	jmp csum_partial_copy_generic
+#endif
+
+ENTRY(csum_partial_copy_generic_from_user)
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	pushl_cfi %gs
+	popl_cfi %ds
+#endif
+
+ENTRY(csum_partial_copy_generic)
 	subl  $4,%esp	
 	CFI_ADJUST_CFA_OFFSET 4
 	pushl_cfi %edi
@@ -320,7 +336,7 @@ ENTRY(csum_partial_copy_generic)
 	jmp 4f
 SRC(1:	movw (%esi), %bx	)
 	addl $2, %esi
-DST(	movw %bx, (%edi)	)
+DST(	movw %bx, %es:(%edi)	)
 	addl $2, %edi
 	addw %bx, %ax	
 	adcl $0, %eax
@@ -332,30 +348,30 @@ DST(	movw %bx, (%edi)	)
 SRC(1:	movl (%esi), %ebx	)
 SRC(	movl 4(%esi), %edx	)
 	adcl %ebx, %eax
-DST(	movl %ebx, (%edi)	)
+DST(	movl %ebx, %es:(%edi)	)
 	adcl %edx, %eax
-DST(	movl %edx, 4(%edi)	)
+DST(	movl %edx, %es:4(%edi)	)
 
 SRC(	movl 8(%esi), %ebx	)
 SRC(	movl 12(%esi), %edx	)
 	adcl %ebx, %eax
-DST(	movl %ebx, 8(%edi)	)
+DST(	movl %ebx, %es:8(%edi)	)
 	adcl %edx, %eax
-DST(	movl %edx, 12(%edi)	)
+DST(	movl %edx, %es:12(%edi)	)
 
 SRC(	movl 16(%esi), %ebx 	)
 SRC(	movl 20(%esi), %edx	)
 	adcl %ebx, %eax
-DST(	movl %ebx, 16(%edi)	)
+DST(	movl %ebx, %es:16(%edi)	)
 	adcl %edx, %eax
-DST(	movl %edx, 20(%edi)	)
+DST(	movl %edx, %es:20(%edi)	)
 
 SRC(	movl 24(%esi), %ebx	)
 SRC(	movl 28(%esi), %edx	)
 	adcl %ebx, %eax
-DST(	movl %ebx, 24(%edi)	)
+DST(	movl %ebx, %es:24(%edi)	)
 	adcl %edx, %eax
-DST(	movl %edx, 28(%edi)	)
+DST(	movl %edx, %es:28(%edi)	)
 
 	lea 32(%esi), %esi
 	lea 32(%edi), %edi
@@ -369,7 +385,7 @@ DST(	movl %edx, 28(%edi)	)
 	shrl $2, %edx			# This clears CF
 SRC(3:	movl (%esi), %ebx	)
 	adcl %ebx, %eax
-DST(	movl %ebx, (%edi)	)
+DST(	movl %ebx, %es:(%edi)	)
 	lea 4(%esi), %esi
 	lea 4(%edi), %edi
 	dec %edx
@@ -381,12 +397,12 @@ DST(	movl %ebx, (%edi)	)
 	jb 5f
 SRC(	movw (%esi), %cx	)
 	leal 2(%esi), %esi
-DST(	movw %cx, (%edi)	)
+DST(	movw %cx, %es:(%edi)	)
 	leal 2(%edi), %edi
 	je 6f
 	shll $16,%ecx
 SRC(5:	movb (%esi), %cl	)
-DST(	movb %cl, (%edi)	)
+DST(	movb %cl, %es:(%edi)	)
 6:	addl %ecx, %eax
 	adcl $0, %eax
 7:
@@ -397,7 +413,7 @@ DST(	movb %cl, (%edi)	)
 
 6001:
 	movl ARGBASE+20(%esp), %ebx	# src_err_ptr
-	movl $-EFAULT, (%ebx)
+	movl $-EFAULT, %ss:(%ebx)
 
 	# zero the complete destination - computing the rest
 	# is too much work 
@@ -410,11 +426,15 @@ DST(	movb %cl, (%edi)	)
 
 6002:
 	movl ARGBASE+24(%esp), %ebx	# dst_err_ptr
-	movl $-EFAULT,(%ebx)
+	movl $-EFAULT,%ss:(%ebx)
 	jmp 5000b
 
 .previous
 
+	pushl_cfi %ss
+	popl_cfi %ds
+	pushl_cfi %ss
+	popl_cfi %es
 	popl_cfi %ebx
 	CFI_RESTORE ebx
 	popl_cfi %esi
@@ -424,26 +444,43 @@ DST(	movb %cl, (%edi)	)
 	popl_cfi %ecx			# equivalent to addl $4,%esp
 	ret	
 	CFI_ENDPROC
-ENDPROC(csum_partial_copy_generic)
+ENDPROC(csum_partial_copy_generic_to_user)
 
 #else
 
 /* Version for PentiumII/PPro */
 
 #define ROUND1(x) \
+	nop; nop; nop;				\
 	SRC(movl x(%esi), %ebx	)	;	\
 	addl %ebx, %eax			;	\
-	DST(movl %ebx, x(%edi)	)	; 
+	DST(movl %ebx, %es:x(%edi))	;
 
 #define ROUND(x) \
+	nop; nop; nop;				\
 	SRC(movl x(%esi), %ebx	)	;	\
 	adcl %ebx, %eax			;	\
-	DST(movl %ebx, x(%edi)	)	;
+	DST(movl %ebx, %es:x(%edi))	;
 
 #define ARGBASE 12
-		
-ENTRY(csum_partial_copy_generic)
+
+ENTRY(csum_partial_copy_generic_to_user)
 	CFI_STARTPROC
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	pushl_cfi %gs
+	popl_cfi %es
+	jmp csum_partial_copy_generic
+#endif
+
+ENTRY(csum_partial_copy_generic_from_user)
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	pushl_cfi %gs
+	popl_cfi %ds
+#endif
+
+ENTRY(csum_partial_copy_generic)
 	pushl_cfi %ebx
 	CFI_REL_OFFSET ebx, 0
 	pushl_cfi %edi
@@ -464,7 +501,7 @@ ENTRY(csum_partial_copy_generic)
 	subl %ebx, %edi  
 	lea  -1(%esi),%edx
 	andl $-32,%edx
-	lea 3f(%ebx,%ebx), %ebx
+	lea 3f(%ebx,%ebx,2), %ebx
 	testl %esi, %esi 
 	jmp *%ebx
 1:	addl $64,%esi
@@ -485,19 +522,19 @@ ENTRY(csum_partial_copy_generic)
 	jb 5f
 SRC(	movw (%esi), %dx         )
 	leal 2(%esi), %esi
-DST(	movw %dx, (%edi)         )
+DST(	movw %dx, %es:(%edi)     )
 	leal 2(%edi), %edi
 	je 6f
 	shll $16,%edx
 5:
 SRC(	movb (%esi), %dl         )
-DST(	movb %dl, (%edi)         )
+DST(	movb %dl, %es:(%edi)     )
 6:	addl %edx, %eax
 	adcl $0, %eax
 7:
 .section .fixup, "ax"
 6001:	movl	ARGBASE+20(%esp), %ebx	# src_err_ptr	
-	movl $-EFAULT, (%ebx)
+	movl $-EFAULT, %ss:(%ebx)
 	# zero the complete destination (computing the rest is too much work)
 	movl ARGBASE+8(%esp),%edi	# dst
 	movl ARGBASE+12(%esp),%ecx	# len
@@ -505,10 +542,17 @@ DST(	movb %dl, (%edi)         )
 	rep; stosb
 	jmp 7b
 6002:	movl ARGBASE+24(%esp), %ebx	# dst_err_ptr
-	movl $-EFAULT, (%ebx)
+	movl $-EFAULT, %ss:(%ebx)
 	jmp  7b			
 .previous				
 
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	pushl_cfi %ss
+	popl_cfi %ds
+	pushl_cfi %ss
+	popl_cfi %es
+#endif
+
 	popl_cfi %esi
 	CFI_RESTORE esi
 	popl_cfi %edi
@@ -517,7 +561,7 @@ DST(	movb %dl, (%edi)         )
 	CFI_RESTORE ebx
 	ret
 	CFI_ENDPROC
-ENDPROC(csum_partial_copy_generic)
+ENDPROC(csum_partial_copy_generic_to_user)
 				
 #undef ROUND
 #undef ROUND1		
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/lib/clear_page_64.S linux-3.3.8-pax/arch/x86/lib/clear_page_64.S
--- linux-3.3.8/arch/x86/lib/clear_page_64.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/lib/clear_page_64.S	2012-03-19 10:43:43.468034678 +0100
@@ -11,6 +11,7 @@ ENTRY(clear_page_c)
 	movl $4096/8,%ecx
 	xorl %eax,%eax
 	rep stosq
+	pax_force_retaddr
 	ret
 	CFI_ENDPROC
 ENDPROC(clear_page_c)
@@ -20,6 +21,7 @@ ENTRY(clear_page_c_e)
 	movl $4096,%ecx
 	xorl %eax,%eax
 	rep stosb
+	pax_force_retaddr
 	ret
 	CFI_ENDPROC
 ENDPROC(clear_page_c_e)
@@ -43,6 +45,7 @@ ENTRY(clear_page)
 	leaq	64(%rdi),%rdi
 	jnz	.Lloop
 	nop
+	pax_force_retaddr
 	ret
 	CFI_ENDPROC
 .Lclear_page_end:
@@ -58,7 +61,7 @@ ENDPROC(clear_page)
 
 #include <asm/cpufeature.h>
 
-	.section .altinstr_replacement,"ax"
+	.section .altinstr_replacement,"a"
 1:	.byte 0xeb					/* jmp <disp8> */
 	.byte (clear_page_c - clear_page) - (2f - 1b)	/* offset */
 2:	.byte 0xeb					/* jmp <disp8> */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/lib/cmpxchg16b_emu.S linux-3.3.8-pax/arch/x86/lib/cmpxchg16b_emu.S
--- linux-3.3.8/arch/x86/lib/cmpxchg16b_emu.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/lib/cmpxchg16b_emu.S	2012-03-19 10:43:43.472034678 +0100
@@ -53,11 +53,13 @@ this_cpu_cmpxchg16b_emu:
 
 	popf
 	mov $1, %al
+	pax_force_retaddr
 	ret
 
  not_same:
 	popf
 	xor %al,%al
+	pax_force_retaddr
 	ret
 
 CFI_ENDPROC
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/lib/copy_page_64.S linux-3.3.8-pax/arch/x86/lib/copy_page_64.S
--- linux-3.3.8/arch/x86/lib/copy_page_64.S	2011-10-24 12:48:26.351091768 +0200
+++ linux-3.3.8-pax/arch/x86/lib/copy_page_64.S	2012-05-14 16:44:24.592657698 +0200
@@ -9,6 +9,7 @@ copy_page_c:
 	CFI_STARTPROC
 	movl $4096/8,%ecx
 	rep movsq
+	pax_force_retaddr
 	ret
 	CFI_ENDPROC
 ENDPROC(copy_page_c)
@@ -39,7 +40,7 @@ ENTRY(copy_page)
 	movq     16 (%rsi), %rdx
 	movq     24 (%rsi), %r8
 	movq     32 (%rsi), %r9
-	movq     40 (%rsi), %r10
+	movq     40 (%rsi), %r13
 	movq     48 (%rsi), %r11
 	movq     56 (%rsi), %r12
 
@@ -50,7 +51,7 @@ ENTRY(copy_page)
 	movq     %rdx, 16 (%rdi)
 	movq     %r8,  24 (%rdi)
 	movq     %r9,  32 (%rdi)
-	movq     %r10, 40 (%rdi)
+	movq     %r13, 40 (%rdi)
 	movq     %r11, 48 (%rdi)
 	movq     %r12, 56 (%rdi)
 
@@ -69,7 +70,7 @@ ENTRY(copy_page)
 	movq     16 (%rsi), %rdx
 	movq     24 (%rsi), %r8
 	movq     32 (%rsi), %r9
-	movq     40 (%rsi), %r10
+	movq     40 (%rsi), %r13
 	movq     48 (%rsi), %r11
 	movq     56 (%rsi), %r12
 
@@ -78,7 +79,7 @@ ENTRY(copy_page)
 	movq     %rdx, 16 (%rdi)
 	movq     %r8,  24 (%rdi)
 	movq     %r9,  32 (%rdi)
-	movq     %r10, 40 (%rdi)
+	movq     %r13, 40 (%rdi)
 	movq     %r11, 48 (%rdi)
 	movq     %r12, 56 (%rdi)
 
@@ -95,6 +96,7 @@ ENTRY(copy_page)
 	CFI_RESTORE r13
 	addq	$3*8,%rsp
 	CFI_ADJUST_CFA_OFFSET -3*8
+	pax_force_retaddr
 	ret
 .Lcopy_page_end:
 	CFI_ENDPROC
@@ -105,7 +107,7 @@ ENDPROC(copy_page)
 
 #include <asm/cpufeature.h>
 
-	.section .altinstr_replacement,"ax"
+	.section .altinstr_replacement,"a"
 1:	.byte 0xeb					/* jmp <disp8> */
 	.byte (copy_page_c - copy_page) - (2f - 1b)	/* offset */
 2:
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/lib/copy_user_64.S linux-3.3.8-pax/arch/x86/lib/copy_user_64.S
--- linux-3.3.8/arch/x86/lib/copy_user_64.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/lib/copy_user_64.S	2012-03-19 10:43:43.472034678 +0100
@@ -16,6 +16,7 @@
 #include <asm/thread_info.h>
 #include <asm/cpufeature.h>
 #include <asm/alternative-asm.h>
+#include <asm/pgtable.h>
 
 /*
  * By placing feature2 after feature1 in altinstructions section, we logically
@@ -29,7 +30,7 @@
 	.byte 0xe9	/* 32bit jump */
 	.long \orig-1f	/* by default jump to orig */
 1:
-	.section .altinstr_replacement,"ax"
+	.section .altinstr_replacement,"a"
 2:	.byte 0xe9			/* near jump with 32bit immediate */
 	.long \alt1-1b /* offset */   /* or alternatively to alt1 */
 3:	.byte 0xe9			/* near jump with 32bit immediate */
@@ -71,47 +72,20 @@
 #endif
 	.endm
 
-/* Standard copy_to_user with segment limit checking */
-ENTRY(_copy_to_user)
-	CFI_STARTPROC
-	GET_THREAD_INFO(%rax)
-	movq %rdi,%rcx
-	addq %rdx,%rcx
-	jc bad_to_user
-	cmpq TI_addr_limit(%rax),%rcx
-	ja bad_to_user
-	ALTERNATIVE_JUMP X86_FEATURE_REP_GOOD,X86_FEATURE_ERMS,	\
-		copy_user_generic_unrolled,copy_user_generic_string,	\
-		copy_user_enhanced_fast_string
-	CFI_ENDPROC
-ENDPROC(_copy_to_user)
-
-/* Standard copy_from_user with segment limit checking */
-ENTRY(_copy_from_user)
-	CFI_STARTPROC
-	GET_THREAD_INFO(%rax)
-	movq %rsi,%rcx
-	addq %rdx,%rcx
-	jc bad_from_user
-	cmpq TI_addr_limit(%rax),%rcx
-	ja bad_from_user
-	ALTERNATIVE_JUMP X86_FEATURE_REP_GOOD,X86_FEATURE_ERMS,	\
-		copy_user_generic_unrolled,copy_user_generic_string,	\
-		copy_user_enhanced_fast_string
-	CFI_ENDPROC
-ENDPROC(_copy_from_user)
-
 	.section .fixup,"ax"
 	/* must zero dest */
 ENTRY(bad_from_user)
 bad_from_user:
 	CFI_STARTPROC
+	testl %edx,%edx
+	js bad_to_user
 	movl %edx,%ecx
 	xorl %eax,%eax
 	rep
 	stosb
 bad_to_user:
 	movl %edx,%eax
+	pax_force_retaddr
 	ret
 	CFI_ENDPROC
 ENDPROC(bad_from_user)
@@ -141,19 +115,19 @@ ENTRY(copy_user_generic_unrolled)
 	jz 17f
 1:	movq (%rsi),%r8
 2:	movq 1*8(%rsi),%r9
-3:	movq 2*8(%rsi),%r10
+3:	movq 2*8(%rsi),%rax
 4:	movq 3*8(%rsi),%r11
 5:	movq %r8,(%rdi)
 6:	movq %r9,1*8(%rdi)
-7:	movq %r10,2*8(%rdi)
+7:	movq %rax,2*8(%rdi)
 8:	movq %r11,3*8(%rdi)
 9:	movq 4*8(%rsi),%r8
 10:	movq 5*8(%rsi),%r9
-11:	movq 6*8(%rsi),%r10
+11:	movq 6*8(%rsi),%rax
 12:	movq 7*8(%rsi),%r11
 13:	movq %r8,4*8(%rdi)
 14:	movq %r9,5*8(%rdi)
-15:	movq %r10,6*8(%rdi)
+15:	movq %rax,6*8(%rdi)
 16:	movq %r11,7*8(%rdi)
 	leaq 64(%rsi),%rsi
 	leaq 64(%rdi),%rdi
@@ -179,6 +153,7 @@ ENTRY(copy_user_generic_unrolled)
 	decl %ecx
 	jnz 21b
 23:	xor %eax,%eax
+	pax_force_retaddr
 	ret
 
 	.section .fixup,"ax"
@@ -251,6 +226,7 @@ ENTRY(copy_user_generic_string)
 3:	rep
 	movsb
 4:	xorl %eax,%eax
+	pax_force_retaddr
 	ret
 
 	.section .fixup,"ax"
@@ -287,6 +263,7 @@ ENTRY(copy_user_enhanced_fast_string)
 1:	rep
 	movsb
 2:	xorl %eax,%eax
+	pax_force_retaddr
 	ret
 
 	.section .fixup,"ax"
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/lib/copy_user_nocache_64.S linux-3.3.8-pax/arch/x86/lib/copy_user_nocache_64.S
--- linux-3.3.8/arch/x86/lib/copy_user_nocache_64.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/lib/copy_user_nocache_64.S	2012-03-19 10:43:43.472034678 +0100
@@ -8,12 +8,14 @@
 
 #include <linux/linkage.h>
 #include <asm/dwarf2.h>
+#include <asm/alternative-asm.h>
 
 #define FIX_ALIGNMENT 1
 
 #include <asm/current.h>
 #include <asm/asm-offsets.h>
 #include <asm/thread_info.h>
+#include <asm/pgtable.h>
 
 	.macro ALIGN_DESTINATION
 #ifdef FIX_ALIGNMENT
@@ -50,6 +52,15 @@
  */
 ENTRY(__copy_user_nocache)
 	CFI_STARTPROC
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	mov $PAX_USER_SHADOW_BASE,%rcx
+	cmp %rcx,%rsi
+	jae 1f
+	add %rcx,%rsi
+1:
+#endif
+
 	cmpl $8,%edx
 	jb 20f		/* less then 8 bytes, go to byte copy loop */
 	ALIGN_DESTINATION
@@ -59,19 +70,19 @@ ENTRY(__copy_user_nocache)
 	jz 17f
 1:	movq (%rsi),%r8
 2:	movq 1*8(%rsi),%r9
-3:	movq 2*8(%rsi),%r10
+3:	movq 2*8(%rsi),%rax
 4:	movq 3*8(%rsi),%r11
 5:	movnti %r8,(%rdi)
 6:	movnti %r9,1*8(%rdi)
-7:	movnti %r10,2*8(%rdi)
+7:	movnti %rax,2*8(%rdi)
 8:	movnti %r11,3*8(%rdi)
 9:	movq 4*8(%rsi),%r8
 10:	movq 5*8(%rsi),%r9
-11:	movq 6*8(%rsi),%r10
+11:	movq 6*8(%rsi),%rax
 12:	movq 7*8(%rsi),%r11
 13:	movnti %r8,4*8(%rdi)
 14:	movnti %r9,5*8(%rdi)
-15:	movnti %r10,6*8(%rdi)
+15:	movnti %rax,6*8(%rdi)
 16:	movnti %r11,7*8(%rdi)
 	leaq 64(%rsi),%rsi
 	leaq 64(%rdi),%rdi
@@ -98,6 +109,7 @@ ENTRY(__copy_user_nocache)
 	jnz 21b
 23:	xorl %eax,%eax
 	sfence
+	pax_force_retaddr
 	ret
 
 	.section .fixup,"ax"
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/lib/csum-copy_64.S linux-3.3.8-pax/arch/x86/lib/csum-copy_64.S
--- linux-3.3.8/arch/x86/lib/csum-copy_64.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/lib/csum-copy_64.S	2012-03-19 10:43:43.472034678 +0100
@@ -8,6 +8,7 @@
 #include <linux/linkage.h>
 #include <asm/dwarf2.h>
 #include <asm/errno.h>
+#include <asm/alternative-asm.h>
 
 /*
  * Checksum copy with exception handling.
@@ -228,6 +229,7 @@ ENTRY(csum_partial_copy_generic)
 	CFI_RESTORE rbp
 	addq $7*8, %rsp
 	CFI_ADJUST_CFA_OFFSET -7*8
+	pax_force_retaddr 0, 1
 	ret
 	CFI_RESTORE_STATE
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/lib/csum-wrappers_64.c linux-3.3.8-pax/arch/x86/lib/csum-wrappers_64.c
--- linux-3.3.8/arch/x86/lib/csum-wrappers_64.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/lib/csum-wrappers_64.c	2012-03-19 10:43:43.476034679 +0100
@@ -52,7 +52,13 @@ csum_partial_copy_from_user(const void _
 			len -= 2;
 		}
 	}
-	isum = csum_partial_copy_generic((__force const void *)src,
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	if ((unsigned long)src < PAX_USER_SHADOW_BASE)
+		src += PAX_USER_SHADOW_BASE;
+#endif
+
+	isum = csum_partial_copy_generic((const void __force_kernel *)src,
 				dst, len, isum, errp, NULL);
 	if (unlikely(*errp))
 		goto out_err;
@@ -105,7 +111,13 @@ csum_partial_copy_to_user(const void *sr
 	}
 
 	*errp = 0;
-	return csum_partial_copy_generic(src, (void __force *)dst,
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	if ((unsigned long)dst < PAX_USER_SHADOW_BASE)
+		dst += PAX_USER_SHADOW_BASE;
+#endif
+
+	return csum_partial_copy_generic(src, (void __force_kernel *)dst,
 					 len, isum, NULL, errp);
 }
 EXPORT_SYMBOL(csum_partial_copy_to_user);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/lib/getuser.S linux-3.3.8-pax/arch/x86/lib/getuser.S
--- linux-3.3.8/arch/x86/lib/getuser.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/lib/getuser.S	2012-03-19 10:43:43.476034679 +0100
@@ -33,15 +33,38 @@
 #include <asm/asm-offsets.h>
 #include <asm/thread_info.h>
 #include <asm/asm.h>
+#include <asm/segment.h>
+#include <asm/pgtable.h>
+#include <asm/alternative-asm.h>
+
+#if defined(CONFIG_X86_32) && defined(CONFIG_PAX_MEMORY_UDEREF)
+#define __copyuser_seg gs;
+#else
+#define __copyuser_seg
+#endif
 
 	.text
 ENTRY(__get_user_1)
 	CFI_STARTPROC
+
+#if !defined(CONFIG_X86_32) || !defined(CONFIG_PAX_MEMORY_UDEREF)
 	GET_THREAD_INFO(%_ASM_DX)
 	cmp TI_addr_limit(%_ASM_DX),%_ASM_AX
 	jae bad_get_user
-1:	movzb (%_ASM_AX),%edx
+
+#if defined(CONFIG_X86_64) && defined(CONFIG_PAX_MEMORY_UDEREF)
+	mov $PAX_USER_SHADOW_BASE,%_ASM_DX
+	cmp %_ASM_DX,%_ASM_AX
+	jae 1234f
+	add %_ASM_DX,%_ASM_AX
+1234:
+#endif
+
+#endif
+
+1:	__copyuser_seg movzb (%_ASM_AX),%edx
 	xor %eax,%eax
+	pax_force_retaddr
 	ret
 	CFI_ENDPROC
 ENDPROC(__get_user_1)
@@ -49,12 +72,26 @@ ENDPROC(__get_user_1)
 ENTRY(__get_user_2)
 	CFI_STARTPROC
 	add $1,%_ASM_AX
+
+#if !defined(CONFIG_X86_32) || !defined(CONFIG_PAX_MEMORY_UDEREF)
 	jc bad_get_user
 	GET_THREAD_INFO(%_ASM_DX)
 	cmp TI_addr_limit(%_ASM_DX),%_ASM_AX
 	jae bad_get_user
-2:	movzwl -1(%_ASM_AX),%edx
+
+#if defined(CONFIG_X86_64) && defined(CONFIG_PAX_MEMORY_UDEREF)
+	mov $PAX_USER_SHADOW_BASE,%_ASM_DX
+	cmp %_ASM_DX,%_ASM_AX
+	jae 1234f
+	add %_ASM_DX,%_ASM_AX
+1234:
+#endif
+
+#endif
+
+2:	__copyuser_seg movzwl -1(%_ASM_AX),%edx
 	xor %eax,%eax
+	pax_force_retaddr
 	ret
 	CFI_ENDPROC
 ENDPROC(__get_user_2)
@@ -62,12 +99,26 @@ ENDPROC(__get_user_2)
 ENTRY(__get_user_4)
 	CFI_STARTPROC
 	add $3,%_ASM_AX
+
+#if !defined(CONFIG_X86_32) || !defined(CONFIG_PAX_MEMORY_UDEREF)
 	jc bad_get_user
 	GET_THREAD_INFO(%_ASM_DX)
 	cmp TI_addr_limit(%_ASM_DX),%_ASM_AX
 	jae bad_get_user
-3:	mov -3(%_ASM_AX),%edx
+
+#if defined(CONFIG_X86_64) && defined(CONFIG_PAX_MEMORY_UDEREF)
+	mov $PAX_USER_SHADOW_BASE,%_ASM_DX
+	cmp %_ASM_DX,%_ASM_AX
+	jae 1234f
+	add %_ASM_DX,%_ASM_AX
+1234:
+#endif
+
+#endif
+
+3:	__copyuser_seg mov -3(%_ASM_AX),%edx
 	xor %eax,%eax
+	pax_force_retaddr
 	ret
 	CFI_ENDPROC
 ENDPROC(__get_user_4)
@@ -80,8 +131,18 @@ ENTRY(__get_user_8)
 	GET_THREAD_INFO(%_ASM_DX)
 	cmp TI_addr_limit(%_ASM_DX),%_ASM_AX
 	jae	bad_get_user
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	mov $PAX_USER_SHADOW_BASE,%_ASM_DX
+	cmp %_ASM_DX,%_ASM_AX
+	jae 1234f
+	add %_ASM_DX,%_ASM_AX
+1234:
+#endif
+
 4:	movq -7(%_ASM_AX),%_ASM_DX
 	xor %eax,%eax
+	pax_force_retaddr
 	ret
 	CFI_ENDPROC
 ENDPROC(__get_user_8)
@@ -91,6 +152,7 @@ bad_get_user:
 	CFI_STARTPROC
 	xor %edx,%edx
 	mov $(-EFAULT),%_ASM_AX
+	pax_force_retaddr
 	ret
 	CFI_ENDPROC
 END(bad_get_user)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/lib/insn.c linux-3.3.8-pax/arch/x86/lib/insn.c
--- linux-3.3.8/arch/x86/lib/insn.c	2012-03-19 10:38:56.652049993 +0100
+++ linux-3.3.8-pax/arch/x86/lib/insn.c	2012-03-19 10:43:43.476034679 +0100
@@ -21,6 +21,11 @@
 #include <linux/string.h>
 #include <asm/inat.h>
 #include <asm/insn.h>
+#ifdef __KERNEL__
+#include <asm/pgtable_types.h>
+#else
+#define ktla_ktva(addr) addr
+#endif
 
 /* Verify next sizeof(t) bytes can be on the same instruction */
 #define validate_next(t, insn, n)	\
@@ -49,8 +54,8 @@
 void insn_init(struct insn *insn, const void *kaddr, int x86_64)
 {
 	memset(insn, 0, sizeof(*insn));
-	insn->kaddr = kaddr;
-	insn->next_byte = kaddr;
+	insn->kaddr = ktla_ktva(kaddr);
+	insn->next_byte = ktla_ktva(kaddr);
 	insn->x86_64 = x86_64 ? 1 : 0;
 	insn->opnd_bytes = 4;
 	if (x86_64)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/lib/iomap_copy_64.S linux-3.3.8-pax/arch/x86/lib/iomap_copy_64.S
--- linux-3.3.8/arch/x86/lib/iomap_copy_64.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/lib/iomap_copy_64.S	2012-03-19 10:43:43.476034679 +0100
@@ -17,6 +17,7 @@
 
 #include <linux/linkage.h>
 #include <asm/dwarf2.h>
+#include <asm/alternative-asm.h>
 
 /*
  * override generic version in lib/iomap_copy.c
@@ -25,6 +26,7 @@ ENTRY(__iowrite32_copy)
 	CFI_STARTPROC
 	movl %edx,%ecx
 	rep movsd
+	pax_force_retaddr
 	ret
 	CFI_ENDPROC
 ENDPROC(__iowrite32_copy)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/lib/memcpy_64.S linux-3.3.8-pax/arch/x86/lib/memcpy_64.S
--- linux-3.3.8/arch/x86/lib/memcpy_64.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/lib/memcpy_64.S	2012-03-19 10:43:43.476034679 +0100
@@ -34,6 +34,7 @@
 	rep movsq
 	movl %edx, %ecx
 	rep movsb
+	pax_force_retaddr
 	ret
 .Lmemcpy_e:
 	.previous
@@ -51,6 +52,7 @@
 
 	movl %edx, %ecx
 	rep movsb
+	pax_force_retaddr
 	ret
 .Lmemcpy_e_e:
 	.previous
@@ -81,13 +83,13 @@ ENTRY(memcpy)
 	 */
 	movq 0*8(%rsi),	%r8
 	movq 1*8(%rsi),	%r9
-	movq 2*8(%rsi),	%r10
+	movq 2*8(%rsi),	%rcx
 	movq 3*8(%rsi),	%r11
 	leaq 4*8(%rsi),	%rsi
 
 	movq %r8,	0*8(%rdi)
 	movq %r9,	1*8(%rdi)
-	movq %r10,	2*8(%rdi)
+	movq %rcx,	2*8(%rdi)
 	movq %r11,	3*8(%rdi)
 	leaq 4*8(%rdi),	%rdi
 	jae  .Lcopy_forward_loop
@@ -110,12 +112,12 @@ ENTRY(memcpy)
 	subq $0x20,	%rdx
 	movq -1*8(%rsi),	%r8
 	movq -2*8(%rsi),	%r9
-	movq -3*8(%rsi),	%r10
+	movq -3*8(%rsi),	%rcx
 	movq -4*8(%rsi),	%r11
 	leaq -4*8(%rsi),	%rsi
 	movq %r8,		-1*8(%rdi)
 	movq %r9,		-2*8(%rdi)
-	movq %r10,		-3*8(%rdi)
+	movq %rcx,		-3*8(%rdi)
 	movq %r11,		-4*8(%rdi)
 	leaq -4*8(%rdi),	%rdi
 	jae  .Lcopy_backward_loop
@@ -135,12 +137,13 @@ ENTRY(memcpy)
 	 */
 	movq 0*8(%rsi), %r8
 	movq 1*8(%rsi),	%r9
-	movq -2*8(%rsi, %rdx),	%r10
+	movq -2*8(%rsi, %rdx),	%rcx
 	movq -1*8(%rsi, %rdx),	%r11
 	movq %r8,	0*8(%rdi)
 	movq %r9,	1*8(%rdi)
-	movq %r10,	-2*8(%rdi, %rdx)
+	movq %rcx,	-2*8(%rdi, %rdx)
 	movq %r11,	-1*8(%rdi, %rdx)
+	pax_force_retaddr
 	retq
 	.p2align 4
 .Lless_16bytes:
@@ -153,6 +156,7 @@ ENTRY(memcpy)
 	movq -1*8(%rsi, %rdx),	%r9
 	movq %r8,	0*8(%rdi)
 	movq %r9,	-1*8(%rdi, %rdx)
+	pax_force_retaddr
 	retq
 	.p2align 4
 .Lless_8bytes:
@@ -166,6 +170,7 @@ ENTRY(memcpy)
 	movl -4(%rsi, %rdx), %r8d
 	movl %ecx, (%rdi)
 	movl %r8d, -4(%rdi, %rdx)
+	pax_force_retaddr
 	retq
 	.p2align 4
 .Lless_3bytes:
@@ -183,6 +188,7 @@ ENTRY(memcpy)
 	jnz .Lloop_1
 
 .Lend:
+	pax_force_retaddr
 	retq
 	CFI_ENDPROC
 ENDPROC(memcpy)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/lib/memmove_64.S linux-3.3.8-pax/arch/x86/lib/memmove_64.S
--- linux-3.3.8/arch/x86/lib/memmove_64.S	2011-10-24 12:48:26.351091768 +0200
+++ linux-3.3.8-pax/arch/x86/lib/memmove_64.S	2012-03-19 10:43:43.480034680 +0100
@@ -61,13 +61,13 @@ ENTRY(memmove)
 5:
 	sub $0x20, %rdx
 	movq 0*8(%rsi), %r11
-	movq 1*8(%rsi), %r10
+	movq 1*8(%rsi), %rcx
 	movq 2*8(%rsi), %r9
 	movq 3*8(%rsi), %r8
 	leaq 4*8(%rsi), %rsi
 
 	movq %r11, 0*8(%rdi)
-	movq %r10, 1*8(%rdi)
+	movq %rcx, 1*8(%rdi)
 	movq %r9, 2*8(%rdi)
 	movq %r8, 3*8(%rdi)
 	leaq 4*8(%rdi), %rdi
@@ -81,10 +81,10 @@ ENTRY(memmove)
 4:
 	movq %rdx, %rcx
 	movq -8(%rsi, %rdx), %r11
-	lea -8(%rdi, %rdx), %r10
+	lea -8(%rdi, %rdx), %r9
 	shrq $3, %rcx
 	rep movsq
-	movq %r11, (%r10)
+	movq %r11, (%r9)
 	jmp 13f
 .Lmemmove_end_forward:
 
@@ -95,14 +95,14 @@ ENTRY(memmove)
 7:
 	movq %rdx, %rcx
 	movq (%rsi), %r11
-	movq %rdi, %r10
+	movq %rdi, %r9
 	leaq -8(%rsi, %rdx), %rsi
 	leaq -8(%rdi, %rdx), %rdi
 	shrq $3, %rcx
 	std
 	rep movsq
 	cld
-	movq %r11, (%r10)
+	movq %r11, (%r9)
 	jmp 13f
 
 	/*
@@ -127,13 +127,13 @@ ENTRY(memmove)
 8:
 	subq $0x20, %rdx
 	movq -1*8(%rsi), %r11
-	movq -2*8(%rsi), %r10
+	movq -2*8(%rsi), %rcx
 	movq -3*8(%rsi), %r9
 	movq -4*8(%rsi), %r8
 	leaq -4*8(%rsi), %rsi
 
 	movq %r11, -1*8(%rdi)
-	movq %r10, -2*8(%rdi)
+	movq %rcx, -2*8(%rdi)
 	movq %r9, -3*8(%rdi)
 	movq %r8, -4*8(%rdi)
 	leaq -4*8(%rdi), %rdi
@@ -151,11 +151,11 @@ ENTRY(memmove)
 	 * Move data from 16 bytes to 31 bytes.
 	 */
 	movq 0*8(%rsi), %r11
-	movq 1*8(%rsi), %r10
+	movq 1*8(%rsi), %rcx
 	movq -2*8(%rsi, %rdx), %r9
 	movq -1*8(%rsi, %rdx), %r8
 	movq %r11, 0*8(%rdi)
-	movq %r10, 1*8(%rdi)
+	movq %rcx, 1*8(%rdi)
 	movq %r9, -2*8(%rdi, %rdx)
 	movq %r8, -1*8(%rdi, %rdx)
 	jmp 13f
@@ -167,9 +167,9 @@ ENTRY(memmove)
 	 * Move data from 8 bytes to 15 bytes.
 	 */
 	movq 0*8(%rsi), %r11
-	movq -1*8(%rsi, %rdx), %r10
+	movq -1*8(%rsi, %rdx), %r9
 	movq %r11, 0*8(%rdi)
-	movq %r10, -1*8(%rdi, %rdx)
+	movq %r9, -1*8(%rdi, %rdx)
 	jmp 13f
 10:
 	cmpq $4, %rdx
@@ -178,9 +178,9 @@ ENTRY(memmove)
 	 * Move data from 4 bytes to 7 bytes.
 	 */
 	movl (%rsi), %r11d
-	movl -4(%rsi, %rdx), %r10d
+	movl -4(%rsi, %rdx), %r9d
 	movl %r11d, (%rdi)
-	movl %r10d, -4(%rdi, %rdx)
+	movl %r9d, -4(%rdi, %rdx)
 	jmp 13f
 11:
 	cmp $2, %rdx
@@ -189,9 +189,9 @@ ENTRY(memmove)
 	 * Move data from 2 bytes to 3 bytes.
 	 */
 	movw (%rsi), %r11w
-	movw -2(%rsi, %rdx), %r10w
+	movw -2(%rsi, %rdx), %r9w
 	movw %r11w, (%rdi)
-	movw %r10w, -2(%rdi, %rdx)
+	movw %r9w, -2(%rdi, %rdx)
 	jmp 13f
 12:
 	cmp $1, %rdx
@@ -202,6 +202,7 @@ ENTRY(memmove)
 	movb (%rsi), %r11b
 	movb %r11b, (%rdi)
 13:
+	pax_force_retaddr
 	retq
 	CFI_ENDPROC
 
@@ -210,6 +211,7 @@ ENTRY(memmove)
 	/* Forward moving data. */
 	movq %rdx, %rcx
 	rep movsb
+	pax_force_retaddr
 	retq
 .Lmemmove_end_forward_efs:
 	.previous
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/lib/memset_64.S linux-3.3.8-pax/arch/x86/lib/memset_64.S
--- linux-3.3.8/arch/x86/lib/memset_64.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/lib/memset_64.S	2012-03-19 10:43:43.480034680 +0100
@@ -31,6 +31,7 @@
 	movl %r8d,%ecx
 	rep stosb
 	movq %r9,%rax
+	pax_force_retaddr
 	ret
 .Lmemset_e:
 	.previous
@@ -53,6 +54,7 @@
 	movl %edx,%ecx
 	rep stosb
 	movq %r9,%rax
+	pax_force_retaddr
 	ret
 .Lmemset_e_e:
 	.previous
@@ -60,13 +62,13 @@
 ENTRY(memset)
 ENTRY(__memset)
 	CFI_STARTPROC
-	movq %rdi,%r10
 	movq %rdx,%r11
 
 	/* expand byte value  */
 	movzbl %sil,%ecx
 	movabs $0x0101010101010101,%rax
 	mul    %rcx		/* with rax, clobbers rdx */
+	movq  %rdi,%rdx
 
 	/* align dst */
 	movl  %edi,%r9d
@@ -120,7 +122,8 @@ ENTRY(__memset)
 	jnz     .Lloop_1
 
 .Lende:
-	movq	%r10,%rax
+	movq	%rdx,%rax
+	pax_force_retaddr
 	ret
 
 	CFI_RESTORE_STATE
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/lib/mmx_32.c linux-3.3.8-pax/arch/x86/lib/mmx_32.c
--- linux-3.3.8/arch/x86/lib/mmx_32.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/lib/mmx_32.c	2012-03-19 10:43:43.480034680 +0100
@@ -29,6 +29,7 @@ void *_mmx_memcpy(void *to, const void *
 {
 	void *p;
 	int i;
+	unsigned long cr0;
 
 	if (unlikely(in_interrupt()))
 		return __memcpy(to, from, len);
@@ -39,44 +40,72 @@ void *_mmx_memcpy(void *to, const void *
 	kernel_fpu_begin();
 
 	__asm__ __volatile__ (
-		"1: prefetch (%0)\n"		/* This set is 28 bytes */
-		"   prefetch 64(%0)\n"
-		"   prefetch 128(%0)\n"
-		"   prefetch 192(%0)\n"
-		"   prefetch 256(%0)\n"
+		"1: prefetch (%1)\n"		/* This set is 28 bytes */
+		"   prefetch 64(%1)\n"
+		"   prefetch 128(%1)\n"
+		"   prefetch 192(%1)\n"
+		"   prefetch 256(%1)\n"
 		"2:  \n"
 		".section .fixup, \"ax\"\n"
-		"3: movw $0x1AEB, 1b\n"	/* jmp on 26 bytes */
+		"3:  \n"
+
+#ifdef CONFIG_PAX_KERNEXEC
+		"   movl %%cr0, %0\n"
+		"   movl %0, %%eax\n"
+		"   andl $0xFFFEFFFF, %%eax\n"
+		"   movl %%eax, %%cr0\n"
+#endif
+
+		"   movw $0x1AEB, 1b\n"	/* jmp on 26 bytes */
+
+#ifdef CONFIG_PAX_KERNEXEC
+		"   movl %0, %%cr0\n"
+#endif
+
 		"   jmp 2b\n"
 		".previous\n"
 			_ASM_EXTABLE(1b, 3b)
-			: : "r" (from));
+			: "=&r" (cr0) : "r" (from) : "ax");
 
 	for ( ; i > 5; i--) {
 		__asm__ __volatile__ (
-		"1:  prefetch 320(%0)\n"
-		"2:  movq (%0), %%mm0\n"
-		"  movq 8(%0), %%mm1\n"
-		"  movq 16(%0), %%mm2\n"
-		"  movq 24(%0), %%mm3\n"
-		"  movq %%mm0, (%1)\n"
-		"  movq %%mm1, 8(%1)\n"
-		"  movq %%mm2, 16(%1)\n"
-		"  movq %%mm3, 24(%1)\n"
-		"  movq 32(%0), %%mm0\n"
-		"  movq 40(%0), %%mm1\n"
-		"  movq 48(%0), %%mm2\n"
-		"  movq 56(%0), %%mm3\n"
-		"  movq %%mm0, 32(%1)\n"
-		"  movq %%mm1, 40(%1)\n"
-		"  movq %%mm2, 48(%1)\n"
-		"  movq %%mm3, 56(%1)\n"
+		"1:  prefetch 320(%1)\n"
+		"2:  movq (%1), %%mm0\n"
+		"  movq 8(%1), %%mm1\n"
+		"  movq 16(%1), %%mm2\n"
+		"  movq 24(%1), %%mm3\n"
+		"  movq %%mm0, (%2)\n"
+		"  movq %%mm1, 8(%2)\n"
+		"  movq %%mm2, 16(%2)\n"
+		"  movq %%mm3, 24(%2)\n"
+		"  movq 32(%1), %%mm0\n"
+		"  movq 40(%1), %%mm1\n"
+		"  movq 48(%1), %%mm2\n"
+		"  movq 56(%1), %%mm3\n"
+		"  movq %%mm0, 32(%2)\n"
+		"  movq %%mm1, 40(%2)\n"
+		"  movq %%mm2, 48(%2)\n"
+		"  movq %%mm3, 56(%2)\n"
 		".section .fixup, \"ax\"\n"
-		"3: movw $0x05EB, 1b\n"	/* jmp on 5 bytes */
+		"3:\n"
+
+#ifdef CONFIG_PAX_KERNEXEC
+		"   movl %%cr0, %0\n"
+		"   movl %0, %%eax\n"
+		"   andl $0xFFFEFFFF, %%eax\n"
+		"   movl %%eax, %%cr0\n"
+#endif
+
+		"   movw $0x05EB, 1b\n"	/* jmp on 5 bytes */
+
+#ifdef CONFIG_PAX_KERNEXEC
+		"   movl %0, %%cr0\n"
+#endif
+
 		"   jmp 2b\n"
 		".previous\n"
 			_ASM_EXTABLE(1b, 3b)
-			: : "r" (from), "r" (to) : "memory");
+			: "=&r" (cr0) : "r" (from), "r" (to) : "memory", "ax");
 
 		from += 64;
 		to += 64;
@@ -158,6 +187,7 @@ static void fast_clear_page(void *page)
 static void fast_copy_page(void *to, void *from)
 {
 	int i;
+	unsigned long cr0;
 
 	kernel_fpu_begin();
 
@@ -166,42 +196,70 @@ static void fast_copy_page(void *to, voi
 	 * but that is for later. -AV
 	 */
 	__asm__ __volatile__(
-		"1: prefetch (%0)\n"
-		"   prefetch 64(%0)\n"
-		"   prefetch 128(%0)\n"
-		"   prefetch 192(%0)\n"
-		"   prefetch 256(%0)\n"
+		"1: prefetch (%1)\n"
+		"   prefetch 64(%1)\n"
+		"   prefetch 128(%1)\n"
+		"   prefetch 192(%1)\n"
+		"   prefetch 256(%1)\n"
 		"2:  \n"
 		".section .fixup, \"ax\"\n"
-		"3: movw $0x1AEB, 1b\n"	/* jmp on 26 bytes */
+		"3:  \n"
+
+#ifdef CONFIG_PAX_KERNEXEC
+		"   movl %%cr0, %0\n"
+		"   movl %0, %%eax\n"
+		"   andl $0xFFFEFFFF, %%eax\n"
+		"   movl %%eax, %%cr0\n"
+#endif
+
+		"   movw $0x1AEB, 1b\n"	/* jmp on 26 bytes */
+
+#ifdef CONFIG_PAX_KERNEXEC
+		"   movl %0, %%cr0\n"
+#endif
+
 		"   jmp 2b\n"
 		".previous\n"
-			_ASM_EXTABLE(1b, 3b) : : "r" (from));
+			_ASM_EXTABLE(1b, 3b) : "=&r" (cr0) : "r" (from) : "ax");
 
 	for (i = 0; i < (4096-320)/64; i++) {
 		__asm__ __volatile__ (
-		"1: prefetch 320(%0)\n"
-		"2: movq (%0), %%mm0\n"
-		"   movntq %%mm0, (%1)\n"
-		"   movq 8(%0), %%mm1\n"
-		"   movntq %%mm1, 8(%1)\n"
-		"   movq 16(%0), %%mm2\n"
-		"   movntq %%mm2, 16(%1)\n"
-		"   movq 24(%0), %%mm3\n"
-		"   movntq %%mm3, 24(%1)\n"
-		"   movq 32(%0), %%mm4\n"
-		"   movntq %%mm4, 32(%1)\n"
-		"   movq 40(%0), %%mm5\n"
-		"   movntq %%mm5, 40(%1)\n"
-		"   movq 48(%0), %%mm6\n"
-		"   movntq %%mm6, 48(%1)\n"
-		"   movq 56(%0), %%mm7\n"
-		"   movntq %%mm7, 56(%1)\n"
+		"1: prefetch 320(%1)\n"
+		"2: movq (%1), %%mm0\n"
+		"   movntq %%mm0, (%2)\n"
+		"   movq 8(%1), %%mm1\n"
+		"   movntq %%mm1, 8(%2)\n"
+		"   movq 16(%1), %%mm2\n"
+		"   movntq %%mm2, 16(%2)\n"
+		"   movq 24(%1), %%mm3\n"
+		"   movntq %%mm3, 24(%2)\n"
+		"   movq 32(%1), %%mm4\n"
+		"   movntq %%mm4, 32(%2)\n"
+		"   movq 40(%1), %%mm5\n"
+		"   movntq %%mm5, 40(%2)\n"
+		"   movq 48(%1), %%mm6\n"
+		"   movntq %%mm6, 48(%2)\n"
+		"   movq 56(%1), %%mm7\n"
+		"   movntq %%mm7, 56(%2)\n"
 		".section .fixup, \"ax\"\n"
-		"3: movw $0x05EB, 1b\n"	/* jmp on 5 bytes */
+		"3:\n"
+
+#ifdef CONFIG_PAX_KERNEXEC
+		"   movl %%cr0, %0\n"
+		"   movl %0, %%eax\n"
+		"   andl $0xFFFEFFFF, %%eax\n"
+		"   movl %%eax, %%cr0\n"
+#endif
+
+		"   movw $0x05EB, 1b\n"	/* jmp on 5 bytes */
+
+#ifdef CONFIG_PAX_KERNEXEC
+		"   movl %0, %%cr0\n"
+#endif
+
 		"   jmp 2b\n"
 		".previous\n"
-		_ASM_EXTABLE(1b, 3b) : : "r" (from), "r" (to) : "memory");
+		_ASM_EXTABLE(1b, 3b) : "=&r" (cr0) : "r" (from), "r" (to) : "memory", "ax");
 
 		from += 64;
 		to += 64;
@@ -280,47 +338,76 @@ static void fast_clear_page(void *page)
 static void fast_copy_page(void *to, void *from)
 {
 	int i;
+	unsigned long cr0;
 
 	kernel_fpu_begin();
 
 	__asm__ __volatile__ (
-		"1: prefetch (%0)\n"
-		"   prefetch 64(%0)\n"
-		"   prefetch 128(%0)\n"
-		"   prefetch 192(%0)\n"
-		"   prefetch 256(%0)\n"
+		"1: prefetch (%1)\n"
+		"   prefetch 64(%1)\n"
+		"   prefetch 128(%1)\n"
+		"   prefetch 192(%1)\n"
+		"   prefetch 256(%1)\n"
 		"2:  \n"
 		".section .fixup, \"ax\"\n"
-		"3: movw $0x1AEB, 1b\n"	/* jmp on 26 bytes */
+		"3:  \n"
+
+#ifdef CONFIG_PAX_KERNEXEC
+		"   movl %%cr0, %0\n"
+		"   movl %0, %%eax\n"
+		"   andl $0xFFFEFFFF, %%eax\n"
+		"   movl %%eax, %%cr0\n"
+#endif
+
+		"   movw $0x1AEB, 1b\n"	/* jmp on 26 bytes */
+
+#ifdef CONFIG_PAX_KERNEXEC
+		"   movl %0, %%cr0\n"
+#endif
+
 		"   jmp 2b\n"
 		".previous\n"
-			_ASM_EXTABLE(1b, 3b) : : "r" (from));
+			_ASM_EXTABLE(1b, 3b) : "=&r" (cr0) : "r" (from) : "ax");
 
 	for (i = 0; i < 4096/64; i++) {
 		__asm__ __volatile__ (
-		"1: prefetch 320(%0)\n"
-		"2: movq (%0), %%mm0\n"
-		"   movq 8(%0), %%mm1\n"
-		"   movq 16(%0), %%mm2\n"
-		"   movq 24(%0), %%mm3\n"
-		"   movq %%mm0, (%1)\n"
-		"   movq %%mm1, 8(%1)\n"
-		"   movq %%mm2, 16(%1)\n"
-		"   movq %%mm3, 24(%1)\n"
-		"   movq 32(%0), %%mm0\n"
-		"   movq 40(%0), %%mm1\n"
-		"   movq 48(%0), %%mm2\n"
-		"   movq 56(%0), %%mm3\n"
-		"   movq %%mm0, 32(%1)\n"
-		"   movq %%mm1, 40(%1)\n"
-		"   movq %%mm2, 48(%1)\n"
-		"   movq %%mm3, 56(%1)\n"
+		"1: prefetch 320(%1)\n"
+		"2: movq (%1), %%mm0\n"
+		"   movq 8(%1), %%mm1\n"
+		"   movq 16(%1), %%mm2\n"
+		"   movq 24(%1), %%mm3\n"
+		"   movq %%mm0, (%2)\n"
+		"   movq %%mm1, 8(%2)\n"
+		"   movq %%mm2, 16(%2)\n"
+		"   movq %%mm3, 24(%2)\n"
+		"   movq 32(%1), %%mm0\n"
+		"   movq 40(%1), %%mm1\n"
+		"   movq 48(%1), %%mm2\n"
+		"   movq 56(%1), %%mm3\n"
+		"   movq %%mm0, 32(%2)\n"
+		"   movq %%mm1, 40(%2)\n"
+		"   movq %%mm2, 48(%2)\n"
+		"   movq %%mm3, 56(%2)\n"
 		".section .fixup, \"ax\"\n"
-		"3: movw $0x05EB, 1b\n"	/* jmp on 5 bytes */
+		"3:\n"
+
+#ifdef CONFIG_PAX_KERNEXEC
+		"   movl %%cr0, %0\n"
+		"   movl %0, %%eax\n"
+		"   andl $0xFFFEFFFF, %%eax\n"
+		"   movl %%eax, %%cr0\n"
+#endif
+
+		"   movw $0x05EB, 1b\n"	/* jmp on 5 bytes */
+
+#ifdef CONFIG_PAX_KERNEXEC
+		"   movl %0, %%cr0\n"
+#endif
+
 		"   jmp 2b\n"
 		".previous\n"
 			_ASM_EXTABLE(1b, 3b)
-			: : "r" (from), "r" (to) : "memory");
+			: "=&r" (cr0) : "r" (from), "r" (to) : "memory", "ax");
 
 		from += 64;
 		to += 64;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/lib/msr-reg.S linux-3.3.8-pax/arch/x86/lib/msr-reg.S
--- linux-3.3.8/arch/x86/lib/msr-reg.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/lib/msr-reg.S	2012-03-19 10:43:43.480034680 +0100
@@ -3,6 +3,7 @@
 #include <asm/dwarf2.h>
 #include <asm/asm.h>
 #include <asm/msr.h>
+#include <asm/alternative-asm.h>
 
 #ifdef CONFIG_X86_64
 /*
@@ -16,7 +17,7 @@ ENTRY(native_\op\()_safe_regs)
 	CFI_STARTPROC
 	pushq_cfi %rbx
 	pushq_cfi %rbp
-	movq	%rdi, %r10	/* Save pointer */
+	movq	%rdi, %r9	/* Save pointer */
 	xorl	%r11d, %r11d	/* Return value */
 	movl    (%rdi), %eax
 	movl    4(%rdi), %ecx
@@ -27,16 +28,17 @@ ENTRY(native_\op\()_safe_regs)
 	movl    28(%rdi), %edi
 	CFI_REMEMBER_STATE
 1:	\op
-2:	movl    %eax, (%r10)
+2:	movl    %eax, (%r9)
 	movl	%r11d, %eax	/* Return value */
-	movl    %ecx, 4(%r10)
-	movl    %edx, 8(%r10)
-	movl    %ebx, 12(%r10)
-	movl    %ebp, 20(%r10)
-	movl    %esi, 24(%r10)
-	movl    %edi, 28(%r10)
+	movl    %ecx, 4(%r9)
+	movl    %edx, 8(%r9)
+	movl    %ebx, 12(%r9)
+	movl    %ebp, 20(%r9)
+	movl    %esi, 24(%r9)
+	movl    %edi, 28(%r9)
 	popq_cfi %rbp
 	popq_cfi %rbx
+	pax_force_retaddr
 	ret
 3:
 	CFI_RESTORE_STATE
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/lib/putuser.S linux-3.3.8-pax/arch/x86/lib/putuser.S
--- linux-3.3.8/arch/x86/lib/putuser.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/lib/putuser.S	2012-03-19 10:43:43.484034680 +0100
@@ -15,7 +15,9 @@
 #include <asm/thread_info.h>
 #include <asm/errno.h>
 #include <asm/asm.h>
-
+#include <asm/segment.h>
+#include <asm/pgtable.h>
+#include <asm/alternative-asm.h>
 
 /*
  * __put_user_X
@@ -29,52 +31,119 @@
  * as they get called from within inline assembly.
  */
 
-#define ENTER	CFI_STARTPROC ; \
-		GET_THREAD_INFO(%_ASM_BX)
-#define EXIT	ret ; \
+#define ENTER	CFI_STARTPROC
+#define EXIT	pax_force_retaddr; ret ; \
 		CFI_ENDPROC
 
+#if defined(CONFIG_X86_64) && defined(CONFIG_PAX_MEMORY_UDEREF)
+#define _DEST %_ASM_CX,%_ASM_BX
+#else
+#define _DEST %_ASM_CX
+#endif
+
+#if defined(CONFIG_X86_32) && defined(CONFIG_PAX_MEMORY_UDEREF)
+#define __copyuser_seg gs;
+#else
+#define __copyuser_seg
+#endif
+
 .text
 ENTRY(__put_user_1)
 	ENTER
+
+#if !defined(CONFIG_X86_32) || !defined(CONFIG_PAX_MEMORY_UDEREF)
+	GET_THREAD_INFO(%_ASM_BX)
 	cmp TI_addr_limit(%_ASM_BX),%_ASM_CX
 	jae bad_put_user
-1:	movb %al,(%_ASM_CX)
+
+#if defined(CONFIG_X86_64) && defined(CONFIG_PAX_MEMORY_UDEREF)
+	mov $PAX_USER_SHADOW_BASE,%_ASM_BX
+	cmp %_ASM_BX,%_ASM_CX
+	jb 1234f
+	xor %ebx,%ebx
+1234:
+#endif
+
+#endif
+
+1:	__copyuser_seg movb %al,(_DEST)
 	xor %eax,%eax
 	EXIT
 ENDPROC(__put_user_1)
 
 ENTRY(__put_user_2)
 	ENTER
+
+#if !defined(CONFIG_X86_32) || !defined(CONFIG_PAX_MEMORY_UDEREF)
+	GET_THREAD_INFO(%_ASM_BX)
 	mov TI_addr_limit(%_ASM_BX),%_ASM_BX
 	sub $1,%_ASM_BX
 	cmp %_ASM_BX,%_ASM_CX
 	jae bad_put_user
-2:	movw %ax,(%_ASM_CX)
+
+#if defined(CONFIG_X86_64) && defined(CONFIG_PAX_MEMORY_UDEREF)
+	mov $PAX_USER_SHADOW_BASE,%_ASM_BX
+	cmp %_ASM_BX,%_ASM_CX
+	jb 1234f
+	xor %ebx,%ebx
+1234:
+#endif
+
+#endif
+
+2:	__copyuser_seg movw %ax,(_DEST)
 	xor %eax,%eax
 	EXIT
 ENDPROC(__put_user_2)
 
 ENTRY(__put_user_4)
 	ENTER
+
+#if !defined(CONFIG_X86_32) || !defined(CONFIG_PAX_MEMORY_UDEREF)
+	GET_THREAD_INFO(%_ASM_BX)
 	mov TI_addr_limit(%_ASM_BX),%_ASM_BX
 	sub $3,%_ASM_BX
 	cmp %_ASM_BX,%_ASM_CX
 	jae bad_put_user
-3:	movl %eax,(%_ASM_CX)
+
+#if defined(CONFIG_X86_64) && defined(CONFIG_PAX_MEMORY_UDEREF)
+	mov $PAX_USER_SHADOW_BASE,%_ASM_BX
+	cmp %_ASM_BX,%_ASM_CX
+	jb 1234f
+	xor %ebx,%ebx
+1234:
+#endif
+
+#endif
+
+3:	__copyuser_seg movl %eax,(_DEST)
 	xor %eax,%eax
 	EXIT
 ENDPROC(__put_user_4)
 
 ENTRY(__put_user_8)
 	ENTER
+
+#if !defined(CONFIG_X86_32) || !defined(CONFIG_PAX_MEMORY_UDEREF)
+	GET_THREAD_INFO(%_ASM_BX)
 	mov TI_addr_limit(%_ASM_BX),%_ASM_BX
 	sub $7,%_ASM_BX
 	cmp %_ASM_BX,%_ASM_CX
 	jae bad_put_user
-4:	mov %_ASM_AX,(%_ASM_CX)
+
+#if defined(CONFIG_X86_64) && defined(CONFIG_PAX_MEMORY_UDEREF)
+	mov $PAX_USER_SHADOW_BASE,%_ASM_BX
+	cmp %_ASM_BX,%_ASM_CX
+	jb 1234f
+	xor %ebx,%ebx
+1234:
+#endif
+
+#endif
+
+4:	__copyuser_seg mov %_ASM_AX,(_DEST)
 #ifdef CONFIG_X86_32
-5:	movl %edx,4(%_ASM_CX)
+5:	__copyuser_seg movl %edx,4(_DEST)
 #endif
 	xor %eax,%eax
 	EXIT
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/lib/rwlock.S linux-3.3.8-pax/arch/x86/lib/rwlock.S
--- linux-3.3.8/arch/x86/lib/rwlock.S	2011-10-24 12:48:26.351091768 +0200
+++ linux-3.3.8-pax/arch/x86/lib/rwlock.S	2012-03-19 10:43:43.484034680 +0100
@@ -16,13 +16,34 @@ ENTRY(__write_lock_failed)
 	FRAME
 0:	LOCK_PREFIX
 	WRITE_LOCK_ADD($RW_LOCK_BIAS) (%__lock_ptr)
+
+#ifdef CONFIG_PAX_REFCOUNT
+	jno 1234f
+	LOCK_PREFIX
+	WRITE_LOCK_SUB($RW_LOCK_BIAS) (%__lock_ptr)
+	int $4
+1234:
+	_ASM_EXTABLE(1234b, 1234b)
+#endif
+
 1:	rep; nop
 	cmpl	$WRITE_LOCK_CMP, (%__lock_ptr)
 	jne	1b
 	LOCK_PREFIX
 	WRITE_LOCK_SUB($RW_LOCK_BIAS) (%__lock_ptr)
+
+#ifdef CONFIG_PAX_REFCOUNT
+	jno 1234f
+	LOCK_PREFIX
+	WRITE_LOCK_ADD($RW_LOCK_BIAS) (%__lock_ptr)
+	int $4
+1234:
+	_ASM_EXTABLE(1234b, 1234b)
+#endif
+
 	jnz	0b
 	ENDFRAME
+	pax_force_retaddr
 	ret
 	CFI_ENDPROC
 END(__write_lock_failed)
@@ -32,13 +53,34 @@ ENTRY(__read_lock_failed)
 	FRAME
 0:	LOCK_PREFIX
 	READ_LOCK_SIZE(inc) (%__lock_ptr)
+
+#ifdef CONFIG_PAX_REFCOUNT
+	jno 1234f
+	LOCK_PREFIX
+	READ_LOCK_SIZE(dec) (%__lock_ptr)
+	int $4
+1234:
+	_ASM_EXTABLE(1234b, 1234b)
+#endif
+
 1:	rep; nop
 	READ_LOCK_SIZE(cmp) $1, (%__lock_ptr)
 	js	1b
 	LOCK_PREFIX
 	READ_LOCK_SIZE(dec) (%__lock_ptr)
+
+#ifdef CONFIG_PAX_REFCOUNT
+	jno 1234f
+	LOCK_PREFIX
+	READ_LOCK_SIZE(inc) (%__lock_ptr)
+	int $4
+1234:
+	_ASM_EXTABLE(1234b, 1234b)
+#endif
+
 	js	0b
 	ENDFRAME
+	pax_force_retaddr
 	ret
 	CFI_ENDPROC
 END(__read_lock_failed)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/lib/rwsem.S linux-3.3.8-pax/arch/x86/lib/rwsem.S
--- linux-3.3.8/arch/x86/lib/rwsem.S	2011-10-24 12:48:26.355091768 +0200
+++ linux-3.3.8-pax/arch/x86/lib/rwsem.S	2012-03-19 10:43:43.484034680 +0100
@@ -94,6 +94,7 @@ ENTRY(call_rwsem_down_read_failed)
 	__ASM_SIZE(pop,_cfi) %__ASM_REG(dx)
 	CFI_RESTORE __ASM_REG(dx)
 	restore_common_regs
+	pax_force_retaddr
 	ret
 	CFI_ENDPROC
 ENDPROC(call_rwsem_down_read_failed)
@@ -104,6 +105,7 @@ ENTRY(call_rwsem_down_write_failed)
 	movq %rax,%rdi
 	call rwsem_down_write_failed
 	restore_common_regs
+	pax_force_retaddr
 	ret
 	CFI_ENDPROC
 ENDPROC(call_rwsem_down_write_failed)
@@ -117,7 +119,8 @@ ENTRY(call_rwsem_wake)
 	movq %rax,%rdi
 	call rwsem_wake
 	restore_common_regs
-1:	ret
+1:	pax_force_retaddr
+	ret
 	CFI_ENDPROC
 ENDPROC(call_rwsem_wake)
 
@@ -131,6 +134,7 @@ ENTRY(call_rwsem_downgrade_wake)
 	__ASM_SIZE(pop,_cfi) %__ASM_REG(dx)
 	CFI_RESTORE __ASM_REG(dx)
 	restore_common_regs
+	pax_force_retaddr
 	ret
 	CFI_ENDPROC
 ENDPROC(call_rwsem_downgrade_wake)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/lib/thunk_64.S linux-3.3.8-pax/arch/x86/lib/thunk_64.S
--- linux-3.3.8/arch/x86/lib/thunk_64.S	2011-10-24 12:48:26.359091768 +0200
+++ linux-3.3.8-pax/arch/x86/lib/thunk_64.S	2012-03-19 10:43:43.484034680 +0100
@@ -8,6 +8,7 @@
 #include <linux/linkage.h>
 #include <asm/dwarf2.h>
 #include <asm/calling.h>
+#include <asm/alternative-asm.h>
 
 	/* rdi:	arg1 ... normal C conventions. rax is saved/restored. */
 	.macro THUNK name, func, put_ret_addr_in_rdi=0
@@ -41,5 +42,6 @@
 	SAVE_ARGS
 restore:
 	RESTORE_ARGS
+	pax_force_retaddr
 	ret
 	CFI_ENDPROC
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/lib/usercopy_32.c linux-3.3.8-pax/arch/x86/lib/usercopy_32.c
--- linux-3.3.8/arch/x86/lib/usercopy_32.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/lib/usercopy_32.c	2012-03-26 18:40:40.911935267 +0200
@@ -43,7 +43,7 @@ do {									   \
 	__asm__ __volatile__(						   \
 		"	testl %1,%1\n"					   \
 		"	jz 2f\n"					   \
-		"0:	lodsb\n"					   \
+		"0:	"__copyuser_seg"lodsb\n"			   \
 		"	stosb\n"					   \
 		"	testb %%al,%%al\n"				   \
 		"	jz 1f\n"					   \
@@ -128,10 +128,12 @@ do {									\
 	int __d0;							\
 	might_fault();							\
 	__asm__ __volatile__(						\
+		__COPYUSER_SET_ES					\
 		"0:	rep; stosl\n"					\
 		"	movl %2,%0\n"					\
 		"1:	rep; stosb\n"					\
 		"2:\n"							\
+		__COPYUSER_RESTORE_ES					\
 		".section .fixup,\"ax\"\n"				\
 		"3:	lea 0(%2,%0,4),%0\n"				\
 		"	jmp 2b\n"					\
@@ -200,6 +202,7 @@ long strnlen_user(const char __user *s,
 	might_fault();
 
 	__asm__ __volatile__(
+		__COPYUSER_SET_ES
 		"	testl %0, %0\n"
 		"	jz 3f\n"
 		"	andl %0,%%ecx\n"
@@ -208,6 +211,7 @@ long strnlen_user(const char __user *s,
 		"	subl %%ecx,%0\n"
 		"	addl %0,%%eax\n"
 		"1:\n"
+		__COPYUSER_RESTORE_ES
 		".section .fixup,\"ax\"\n"
 		"2:	xorl %%eax,%%eax\n"
 		"	jmp 1b\n"
@@ -227,7 +231,7 @@ EXPORT_SYMBOL(strnlen_user);
 
 #ifdef CONFIG_X86_INTEL_USERCOPY
 static unsigned long
-__copy_user_intel(void __user *to, const void *from, unsigned long size)
+__generic_copy_to_user_intel(void __user *to, const void *from, unsigned long size)
 {
 	int d0, d1;
 	__asm__ __volatile__(
@@ -239,36 +243,36 @@ __copy_user_intel(void __user *to, const
 		       "       .align 2,0x90\n"
 		       "3:     movl 0(%4), %%eax\n"
 		       "4:     movl 4(%4), %%edx\n"
-		       "5:     movl %%eax, 0(%3)\n"
-		       "6:     movl %%edx, 4(%3)\n"
+		       "5:     "__copyuser_seg" movl %%eax, 0(%3)\n"
+		       "6:     "__copyuser_seg" movl %%edx, 4(%3)\n"
 		       "7:     movl 8(%4), %%eax\n"
 		       "8:     movl 12(%4),%%edx\n"
-		       "9:     movl %%eax, 8(%3)\n"
-		       "10:    movl %%edx, 12(%3)\n"
+		       "9:     "__copyuser_seg" movl %%eax, 8(%3)\n"
+		       "10:    "__copyuser_seg" movl %%edx, 12(%3)\n"
 		       "11:    movl 16(%4), %%eax\n"
 		       "12:    movl 20(%4), %%edx\n"
-		       "13:    movl %%eax, 16(%3)\n"
-		       "14:    movl %%edx, 20(%3)\n"
+		       "13:    "__copyuser_seg" movl %%eax, 16(%3)\n"
+		       "14:    "__copyuser_seg" movl %%edx, 20(%3)\n"
 		       "15:    movl 24(%4), %%eax\n"
 		       "16:    movl 28(%4), %%edx\n"
-		       "17:    movl %%eax, 24(%3)\n"
-		       "18:    movl %%edx, 28(%3)\n"
+		       "17:    "__copyuser_seg" movl %%eax, 24(%3)\n"
+		       "18:    "__copyuser_seg" movl %%edx, 28(%3)\n"
 		       "19:    movl 32(%4), %%eax\n"
 		       "20:    movl 36(%4), %%edx\n"
-		       "21:    movl %%eax, 32(%3)\n"
-		       "22:    movl %%edx, 36(%3)\n"
+		       "21:    "__copyuser_seg" movl %%eax, 32(%3)\n"
+		       "22:    "__copyuser_seg" movl %%edx, 36(%3)\n"
 		       "23:    movl 40(%4), %%eax\n"
 		       "24:    movl 44(%4), %%edx\n"
-		       "25:    movl %%eax, 40(%3)\n"
-		       "26:    movl %%edx, 44(%3)\n"
+		       "25:    "__copyuser_seg" movl %%eax, 40(%3)\n"
+		       "26:    "__copyuser_seg" movl %%edx, 44(%3)\n"
 		       "27:    movl 48(%4), %%eax\n"
 		       "28:    movl 52(%4), %%edx\n"
-		       "29:    movl %%eax, 48(%3)\n"
-		       "30:    movl %%edx, 52(%3)\n"
+		       "29:    "__copyuser_seg" movl %%eax, 48(%3)\n"
+		       "30:    "__copyuser_seg" movl %%edx, 52(%3)\n"
 		       "31:    movl 56(%4), %%eax\n"
 		       "32:    movl 60(%4), %%edx\n"
-		       "33:    movl %%eax, 56(%3)\n"
-		       "34:    movl %%edx, 60(%3)\n"
+		       "33:    "__copyuser_seg" movl %%eax, 56(%3)\n"
+		       "34:    "__copyuser_seg" movl %%edx, 60(%3)\n"
 		       "       addl $-64, %0\n"
 		       "       addl $64, %4\n"
 		       "       addl $64, %3\n"
@@ -278,10 +282,119 @@ __copy_user_intel(void __user *to, const
 		       "       shrl  $2, %0\n"
 		       "       andl  $3, %%eax\n"
 		       "       cld\n"
+		       __COPYUSER_SET_ES
 		       "99:    rep; movsl\n"
 		       "36:    movl %%eax, %0\n"
 		       "37:    rep; movsb\n"
 		       "100:\n"
+		       __COPYUSER_RESTORE_ES
+		       ".section .fixup,\"ax\"\n"
+		       "101:   lea 0(%%eax,%0,4),%0\n"
+		       "       jmp 100b\n"
+		       ".previous\n"
+		       ".section __ex_table,\"a\"\n"
+		       "       .align 4\n"
+		       "       .long 1b,100b\n"
+		       "       .long 2b,100b\n"
+		       "       .long 3b,100b\n"
+		       "       .long 4b,100b\n"
+		       "       .long 5b,100b\n"
+		       "       .long 6b,100b\n"
+		       "       .long 7b,100b\n"
+		       "       .long 8b,100b\n"
+		       "       .long 9b,100b\n"
+		       "       .long 10b,100b\n"
+		       "       .long 11b,100b\n"
+		       "       .long 12b,100b\n"
+		       "       .long 13b,100b\n"
+		       "       .long 14b,100b\n"
+		       "       .long 15b,100b\n"
+		       "       .long 16b,100b\n"
+		       "       .long 17b,100b\n"
+		       "       .long 18b,100b\n"
+		       "       .long 19b,100b\n"
+		       "       .long 20b,100b\n"
+		       "       .long 21b,100b\n"
+		       "       .long 22b,100b\n"
+		       "       .long 23b,100b\n"
+		       "       .long 24b,100b\n"
+		       "       .long 25b,100b\n"
+		       "       .long 26b,100b\n"
+		       "       .long 27b,100b\n"
+		       "       .long 28b,100b\n"
+		       "       .long 29b,100b\n"
+		       "       .long 30b,100b\n"
+		       "       .long 31b,100b\n"
+		       "       .long 32b,100b\n"
+		       "       .long 33b,100b\n"
+		       "       .long 34b,100b\n"
+		       "       .long 35b,100b\n"
+		       "       .long 36b,100b\n"
+		       "       .long 37b,100b\n"
+		       "       .long 99b,101b\n"
+		       ".previous"
+		       : "=&c"(size), "=&D" (d0), "=&S" (d1)
+		       :  "1"(to), "2"(from), "0"(size)
+		       : "eax", "edx", "memory");
+	return size;
+}
+
+static unsigned long
+__generic_copy_from_user_intel(void *to, const void __user *from, unsigned long size)
+{
+	int d0, d1;
+	__asm__ __volatile__(
+		       "       .align 2,0x90\n"
+		       "1:     "__copyuser_seg" movl 32(%4), %%eax\n"
+		       "       cmpl $67, %0\n"
+		       "       jbe 3f\n"
+		       "2:     "__copyuser_seg" movl 64(%4), %%eax\n"
+		       "       .align 2,0x90\n"
+		       "3:     "__copyuser_seg" movl 0(%4), %%eax\n"
+		       "4:     "__copyuser_seg" movl 4(%4), %%edx\n"
+		       "5:     movl %%eax, 0(%3)\n"
+		       "6:     movl %%edx, 4(%3)\n"
+		       "7:     "__copyuser_seg" movl 8(%4), %%eax\n"
+		       "8:     "__copyuser_seg" movl 12(%4),%%edx\n"
+		       "9:     movl %%eax, 8(%3)\n"
+		       "10:    movl %%edx, 12(%3)\n"
+		       "11:    "__copyuser_seg" movl 16(%4), %%eax\n"
+		       "12:    "__copyuser_seg" movl 20(%4), %%edx\n"
+		       "13:    movl %%eax, 16(%3)\n"
+		       "14:    movl %%edx, 20(%3)\n"
+		       "15:    "__copyuser_seg" movl 24(%4), %%eax\n"
+		       "16:    "__copyuser_seg" movl 28(%4), %%edx\n"
+		       "17:    movl %%eax, 24(%3)\n"
+		       "18:    movl %%edx, 28(%3)\n"
+		       "19:    "__copyuser_seg" movl 32(%4), %%eax\n"
+		       "20:    "__copyuser_seg" movl 36(%4), %%edx\n"
+		       "21:    movl %%eax, 32(%3)\n"
+		       "22:    movl %%edx, 36(%3)\n"
+		       "23:    "__copyuser_seg" movl 40(%4), %%eax\n"
+		       "24:    "__copyuser_seg" movl 44(%4), %%edx\n"
+		       "25:    movl %%eax, 40(%3)\n"
+		       "26:    movl %%edx, 44(%3)\n"
+		       "27:    "__copyuser_seg" movl 48(%4), %%eax\n"
+		       "28:    "__copyuser_seg" movl 52(%4), %%edx\n"
+		       "29:    movl %%eax, 48(%3)\n"
+		       "30:    movl %%edx, 52(%3)\n"
+		       "31:    "__copyuser_seg" movl 56(%4), %%eax\n"
+		       "32:    "__copyuser_seg" movl 60(%4), %%edx\n"
+		       "33:    movl %%eax, 56(%3)\n"
+		       "34:    movl %%edx, 60(%3)\n"
+		       "       addl $-64, %0\n"
+		       "       addl $64, %4\n"
+		       "       addl $64, %3\n"
+		       "       cmpl $63, %0\n"
+		       "       ja  1b\n"
+		       "35:    movl  %0, %%eax\n"
+		       "       shrl  $2, %0\n"
+		       "       andl  $3, %%eax\n"
+		       "       cld\n"
+		       "99:    rep; "__copyuser_seg" movsl\n"
+		       "36:    movl %%eax, %0\n"
+		       "37:    rep; "__copyuser_seg" movsb\n"
+		       "100:\n"
 		       ".section .fixup,\"ax\"\n"
 		       "101:   lea 0(%%eax,%0,4),%0\n"
 		       "       jmp 100b\n"
@@ -334,46 +447,48 @@ __copy_user_intel(void __user *to, const
 }
 
 static unsigned long
+__copy_user_zeroing_intel(void *to, const void __user *from, unsigned long size) __size_overflow(3);
+static unsigned long
 __copy_user_zeroing_intel(void *to, const void __user *from, unsigned long size)
 {
 	int d0, d1;
 	__asm__ __volatile__(
 		       "        .align 2,0x90\n"
-		       "0:      movl 32(%4), %%eax\n"
+		       "0:      "__copyuser_seg" movl 32(%4), %%eax\n"
 		       "        cmpl $67, %0\n"
 		       "        jbe 2f\n"
-		       "1:      movl 64(%4), %%eax\n"
+		       "1:      "__copyuser_seg" movl 64(%4), %%eax\n"
 		       "        .align 2,0x90\n"
-		       "2:      movl 0(%4), %%eax\n"
-		       "21:     movl 4(%4), %%edx\n"
+		       "2:      "__copyuser_seg" movl 0(%4), %%eax\n"
+		       "21:     "__copyuser_seg" movl 4(%4), %%edx\n"
 		       "        movl %%eax, 0(%3)\n"
 		       "        movl %%edx, 4(%3)\n"
-		       "3:      movl 8(%4), %%eax\n"
-		       "31:     movl 12(%4),%%edx\n"
+		       "3:      "__copyuser_seg" movl 8(%4), %%eax\n"
+		       "31:     "__copyuser_seg" movl 12(%4),%%edx\n"
 		       "        movl %%eax, 8(%3)\n"
 		       "        movl %%edx, 12(%3)\n"
-		       "4:      movl 16(%4), %%eax\n"
-		       "41:     movl 20(%4), %%edx\n"
+		       "4:      "__copyuser_seg" movl 16(%4), %%eax\n"
+		       "41:     "__copyuser_seg" movl 20(%4), %%edx\n"
 		       "        movl %%eax, 16(%3)\n"
 		       "        movl %%edx, 20(%3)\n"
-		       "10:     movl 24(%4), %%eax\n"
-		       "51:     movl 28(%4), %%edx\n"
+		       "10:     "__copyuser_seg" movl 24(%4), %%eax\n"
+		       "51:     "__copyuser_seg" movl 28(%4), %%edx\n"
 		       "        movl %%eax, 24(%3)\n"
 		       "        movl %%edx, 28(%3)\n"
-		       "11:     movl 32(%4), %%eax\n"
-		       "61:     movl 36(%4), %%edx\n"
+		       "11:     "__copyuser_seg" movl 32(%4), %%eax\n"
+		       "61:     "__copyuser_seg" movl 36(%4), %%edx\n"
 		       "        movl %%eax, 32(%3)\n"
 		       "        movl %%edx, 36(%3)\n"
-		       "12:     movl 40(%4), %%eax\n"
-		       "71:     movl 44(%4), %%edx\n"
+		       "12:     "__copyuser_seg" movl 40(%4), %%eax\n"
+		       "71:     "__copyuser_seg" movl 44(%4), %%edx\n"
 		       "        movl %%eax, 40(%3)\n"
 		       "        movl %%edx, 44(%3)\n"
-		       "13:     movl 48(%4), %%eax\n"
-		       "81:     movl 52(%4), %%edx\n"
+		       "13:     "__copyuser_seg" movl 48(%4), %%eax\n"
+		       "81:     "__copyuser_seg" movl 52(%4), %%edx\n"
 		       "        movl %%eax, 48(%3)\n"
 		       "        movl %%edx, 52(%3)\n"
-		       "14:     movl 56(%4), %%eax\n"
-		       "91:     movl 60(%4), %%edx\n"
+		       "14:     "__copyuser_seg" movl 56(%4), %%eax\n"
+		       "91:     "__copyuser_seg" movl 60(%4), %%edx\n"
 		       "        movl %%eax, 56(%3)\n"
 		       "        movl %%edx, 60(%3)\n"
 		       "        addl $-64, %0\n"
@@ -385,9 +500,9 @@ __copy_user_zeroing_intel(void *to, cons
 		       "        shrl  $2, %0\n"
 		       "        andl $3, %%eax\n"
 		       "        cld\n"
-		       "6:      rep; movsl\n"
+		       "6:      rep; "__copyuser_seg" movsl\n"
 		       "        movl %%eax,%0\n"
-		       "7:      rep; movsb\n"
+		       "7:      rep; "__copyuser_seg" movsb\n"
 		       "8:\n"
 		       ".section .fixup,\"ax\"\n"
 		       "9:      lea 0(%%eax,%0,4),%0\n"
@@ -434,47 +549,49 @@ __copy_user_zeroing_intel(void *to, cons
  */
 
 static unsigned long __copy_user_zeroing_intel_nocache(void *to,
+				const void __user *from, unsigned long size) __size_overflow(3);
+static unsigned long __copy_user_zeroing_intel_nocache(void *to,
 				const void __user *from, unsigned long size)
 {
 	int d0, d1;
 
 	__asm__ __volatile__(
 	       "        .align 2,0x90\n"
-	       "0:      movl 32(%4), %%eax\n"
+	       "0:      "__copyuser_seg" movl 32(%4), %%eax\n"
 	       "        cmpl $67, %0\n"
 	       "        jbe 2f\n"
-	       "1:      movl 64(%4), %%eax\n"
+	       "1:      "__copyuser_seg" movl 64(%4), %%eax\n"
 	       "        .align 2,0x90\n"
-	       "2:      movl 0(%4), %%eax\n"
-	       "21:     movl 4(%4), %%edx\n"
+	       "2:      "__copyuser_seg" movl 0(%4), %%eax\n"
+	       "21:     "__copyuser_seg" movl 4(%4), %%edx\n"
 	       "        movnti %%eax, 0(%3)\n"
 	       "        movnti %%edx, 4(%3)\n"
-	       "3:      movl 8(%4), %%eax\n"
-	       "31:     movl 12(%4),%%edx\n"
+	       "3:      "__copyuser_seg" movl 8(%4), %%eax\n"
+	       "31:     "__copyuser_seg" movl 12(%4),%%edx\n"
 	       "        movnti %%eax, 8(%3)\n"
 	       "        movnti %%edx, 12(%3)\n"
-	       "4:      movl 16(%4), %%eax\n"
-	       "41:     movl 20(%4), %%edx\n"
+	       "4:      "__copyuser_seg" movl 16(%4), %%eax\n"
+	       "41:     "__copyuser_seg" movl 20(%4), %%edx\n"
 	       "        movnti %%eax, 16(%3)\n"
 	       "        movnti %%edx, 20(%3)\n"
-	       "10:     movl 24(%4), %%eax\n"
-	       "51:     movl 28(%4), %%edx\n"
+	       "10:     "__copyuser_seg" movl 24(%4), %%eax\n"
+	       "51:     "__copyuser_seg" movl 28(%4), %%edx\n"
 	       "        movnti %%eax, 24(%3)\n"
 	       "        movnti %%edx, 28(%3)\n"
-	       "11:     movl 32(%4), %%eax\n"
-	       "61:     movl 36(%4), %%edx\n"
+	       "11:     "__copyuser_seg" movl 32(%4), %%eax\n"
+	       "61:     "__copyuser_seg" movl 36(%4), %%edx\n"
 	       "        movnti %%eax, 32(%3)\n"
 	       "        movnti %%edx, 36(%3)\n"
-	       "12:     movl 40(%4), %%eax\n"
-	       "71:     movl 44(%4), %%edx\n"
+	       "12:     "__copyuser_seg" movl 40(%4), %%eax\n"
+	       "71:     "__copyuser_seg" movl 44(%4), %%edx\n"
 	       "        movnti %%eax, 40(%3)\n"
 	       "        movnti %%edx, 44(%3)\n"
-	       "13:     movl 48(%4), %%eax\n"
-	       "81:     movl 52(%4), %%edx\n"
+	       "13:     "__copyuser_seg" movl 48(%4), %%eax\n"
+	       "81:     "__copyuser_seg" movl 52(%4), %%edx\n"
 	       "        movnti %%eax, 48(%3)\n"
 	       "        movnti %%edx, 52(%3)\n"
-	       "14:     movl 56(%4), %%eax\n"
-	       "91:     movl 60(%4), %%edx\n"
+	       "14:     "__copyuser_seg" movl 56(%4), %%eax\n"
+	       "91:     "__copyuser_seg" movl 60(%4), %%edx\n"
 	       "        movnti %%eax, 56(%3)\n"
 	       "        movnti %%edx, 60(%3)\n"
 	       "        addl $-64, %0\n"
@@ -487,9 +604,9 @@ static unsigned long __copy_user_zeroing
 	       "        shrl  $2, %0\n"
 	       "        andl $3, %%eax\n"
 	       "        cld\n"
-	       "6:      rep; movsl\n"
+	       "6:      rep; "__copyuser_seg" movsl\n"
 	       "        movl %%eax,%0\n"
-	       "7:      rep; movsb\n"
+	       "7:      rep; "__copyuser_seg" movsb\n"
 	       "8:\n"
 	       ".section .fixup,\"ax\"\n"
 	       "9:      lea 0(%%eax,%0,4),%0\n"
@@ -531,47 +648,49 @@ static unsigned long __copy_user_zeroing
 }
 
 static unsigned long __copy_user_intel_nocache(void *to,
+				const void __user *from, unsigned long size) __size_overflow(3);
+static unsigned long __copy_user_intel_nocache(void *to,
 				const void __user *from, unsigned long size)
 {
 	int d0, d1;
 
 	__asm__ __volatile__(
 	       "        .align 2,0x90\n"
-	       "0:      movl 32(%4), %%eax\n"
+	       "0:      "__copyuser_seg" movl 32(%4), %%eax\n"
 	       "        cmpl $67, %0\n"
 	       "        jbe 2f\n"
-	       "1:      movl 64(%4), %%eax\n"
+	       "1:      "__copyuser_seg" movl 64(%4), %%eax\n"
 	       "        .align 2,0x90\n"
-	       "2:      movl 0(%4), %%eax\n"
-	       "21:     movl 4(%4), %%edx\n"
+	       "2:      "__copyuser_seg" movl 0(%4), %%eax\n"
+	       "21:     "__copyuser_seg" movl 4(%4), %%edx\n"
 	       "        movnti %%eax, 0(%3)\n"
 	       "        movnti %%edx, 4(%3)\n"
-	       "3:      movl 8(%4), %%eax\n"
-	       "31:     movl 12(%4),%%edx\n"
+	       "3:      "__copyuser_seg" movl 8(%4), %%eax\n"
+	       "31:     "__copyuser_seg" movl 12(%4),%%edx\n"
 	       "        movnti %%eax, 8(%3)\n"
 	       "        movnti %%edx, 12(%3)\n"
-	       "4:      movl 16(%4), %%eax\n"
-	       "41:     movl 20(%4), %%edx\n"
+	       "4:      "__copyuser_seg" movl 16(%4), %%eax\n"
+	       "41:     "__copyuser_seg" movl 20(%4), %%edx\n"
 	       "        movnti %%eax, 16(%3)\n"
 	       "        movnti %%edx, 20(%3)\n"
-	       "10:     movl 24(%4), %%eax\n"
-	       "51:     movl 28(%4), %%edx\n"
+	       "10:     "__copyuser_seg" movl 24(%4), %%eax\n"
+	       "51:     "__copyuser_seg" movl 28(%4), %%edx\n"
 	       "        movnti %%eax, 24(%3)\n"
 	       "        movnti %%edx, 28(%3)\n"
-	       "11:     movl 32(%4), %%eax\n"
-	       "61:     movl 36(%4), %%edx\n"
+	       "11:     "__copyuser_seg" movl 32(%4), %%eax\n"
+	       "61:     "__copyuser_seg" movl 36(%4), %%edx\n"
 	       "        movnti %%eax, 32(%3)\n"
 	       "        movnti %%edx, 36(%3)\n"
-	       "12:     movl 40(%4), %%eax\n"
-	       "71:     movl 44(%4), %%edx\n"
+	       "12:     "__copyuser_seg" movl 40(%4), %%eax\n"
+	       "71:     "__copyuser_seg" movl 44(%4), %%edx\n"
 	       "        movnti %%eax, 40(%3)\n"
 	       "        movnti %%edx, 44(%3)\n"
-	       "13:     movl 48(%4), %%eax\n"
-	       "81:     movl 52(%4), %%edx\n"
+	       "13:     "__copyuser_seg" movl 48(%4), %%eax\n"
+	       "81:     "__copyuser_seg" movl 52(%4), %%edx\n"
 	       "        movnti %%eax, 48(%3)\n"
 	       "        movnti %%edx, 52(%3)\n"
-	       "14:     movl 56(%4), %%eax\n"
-	       "91:     movl 60(%4), %%edx\n"
+	       "14:     "__copyuser_seg" movl 56(%4), %%eax\n"
+	       "91:     "__copyuser_seg" movl 60(%4), %%edx\n"
 	       "        movnti %%eax, 56(%3)\n"
 	       "        movnti %%edx, 60(%3)\n"
 	       "        addl $-64, %0\n"
@@ -584,9 +703,9 @@ static unsigned long __copy_user_intel_n
 	       "        shrl  $2, %0\n"
 	       "        andl $3, %%eax\n"
 	       "        cld\n"
-	       "6:      rep; movsl\n"
+	       "6:      rep; "__copyuser_seg" movsl\n"
 	       "        movl %%eax,%0\n"
-	       "7:      rep; movsb\n"
+	       "7:      rep; "__copyuser_seg" movsb\n"
 	       "8:\n"
 	       ".section .fixup,\"ax\"\n"
 	       "9:      lea 0(%%eax,%0,4),%0\n"
@@ -629,32 +748,36 @@ static unsigned long __copy_user_intel_n
  */
 unsigned long __copy_user_zeroing_intel(void *to, const void __user *from,
 					unsigned long size);
-unsigned long __copy_user_intel(void __user *to, const void *from,
+unsigned long __generic_copy_to_user_intel(void __user *to, const void *from,
+					unsigned long size);
+unsigned long __generic_copy_from_user_intel(void *to, const void __user *from,
 					unsigned long size);
 unsigned long __copy_user_zeroing_intel_nocache(void *to,
 				const void __user *from, unsigned long size);
 #endif /* CONFIG_X86_INTEL_USERCOPY */
 
 /* Generic arbitrary sized copy.  */
-#define __copy_user(to, from, size)					\
+#define __copy_user(to, from, size, prefix, set, restore)		\
 do {									\
 	int __d0, __d1, __d2;						\
 	__asm__ __volatile__(						\
+		set							\
 		"	cmp  $7,%0\n"					\
 		"	jbe  1f\n"					\
 		"	movl %1,%0\n"					\
 		"	negl %0\n"					\
 		"	andl $7,%0\n"					\
 		"	subl %0,%3\n"					\
-		"4:	rep; movsb\n"					\
+		"4:	rep; "prefix"movsb\n"				\
 		"	movl %3,%0\n"					\
 		"	shrl $2,%0\n"					\
 		"	andl $3,%3\n"					\
 		"	.align 2,0x90\n"				\
-		"0:	rep; movsl\n"					\
+		"0:	rep; "prefix"movsl\n"				\
 		"	movl %3,%0\n"					\
-		"1:	rep; movsb\n"					\
+		"1:	rep; "prefix"movsb\n"				\
 		"2:\n"							\
+		restore							\
 		".section .fixup,\"ax\"\n"				\
 		"5:	addl %3,%0\n"					\
 		"	jmp 2b\n"					\
@@ -682,14 +805,14 @@ do {									\
 		"	negl %0\n"					\
 		"	andl $7,%0\n"					\
 		"	subl %0,%3\n"					\
-		"4:	rep; movsb\n"					\
+		"4:	rep; "__copyuser_seg"movsb\n"			\
 		"	movl %3,%0\n"					\
 		"	shrl $2,%0\n"					\
 		"	andl $3,%3\n"					\
 		"	.align 2,0x90\n"				\
-		"0:	rep; movsl\n"					\
+		"0:	rep; "__copyuser_seg"movsl\n"			\
 		"	movl %3,%0\n"					\
-		"1:	rep; movsb\n"					\
+		"1:	rep; "__copyuser_seg"movsb\n"			\
 		"2:\n"							\
 		".section .fixup,\"ax\"\n"				\
 		"5:	addl %3,%0\n"					\
@@ -775,9 +898,9 @@ survive:
 	}
 #endif
 	if (movsl_is_ok(to, from, n))
-		__copy_user(to, from, n);
+		__copy_user(to, from, n, "", __COPYUSER_SET_ES, __COPYUSER_RESTORE_ES);
 	else
-		n = __copy_user_intel(to, from, n);
+		n = __generic_copy_to_user_intel(to, from, n);
 	return n;
 }
 EXPORT_SYMBOL(__copy_to_user_ll);
@@ -797,10 +920,9 @@ unsigned long __copy_from_user_ll_nozero
 					 unsigned long n)
 {
 	if (movsl_is_ok(to, from, n))
-		__copy_user(to, from, n);
+		__copy_user(to, from, n, __copyuser_seg, "", "");
 	else
-		n = __copy_user_intel((void __user *)to,
-				      (const void *)from, n);
+		n = __generic_copy_from_user_intel(to, from, n);
 	return n;
 }
 EXPORT_SYMBOL(__copy_from_user_ll_nozero);
@@ -827,65 +949,50 @@ unsigned long __copy_from_user_ll_nocach
 	if (n > 64 && cpu_has_xmm2)
 		n = __copy_user_intel_nocache(to, from, n);
 	else
-		__copy_user(to, from, n);
+		__copy_user(to, from, n, __copyuser_seg, "", "");
 #else
-	__copy_user(to, from, n);
+	__copy_user(to, from, n, __copyuser_seg, "", "");
 #endif
 	return n;
 }
 EXPORT_SYMBOL(__copy_from_user_ll_nocache_nozero);
 
-/**
- * copy_to_user: - Copy a block of data into user space.
- * @to:   Destination address, in user space.
- * @from: Source address, in kernel space.
- * @n:    Number of bytes to copy.
- *
- * Context: User context only.  This function may sleep.
- *
- * Copy data from kernel space to user space.
- *
- * Returns number of bytes that could not be copied.
- * On success, this will be zero.
- */
-unsigned long
-copy_to_user(void __user *to, const void *from, unsigned long n)
+void copy_from_user_overflow(void)
 {
-	if (access_ok(VERIFY_WRITE, to, n))
-		n = __copy_to_user(to, from, n);
-	return n;
+	WARN(1, "Buffer overflow detected!\n");
 }
-EXPORT_SYMBOL(copy_to_user);
+EXPORT_SYMBOL(copy_from_user_overflow);
 
-/**
- * copy_from_user: - Copy a block of data from user space.
- * @to:   Destination address, in kernel space.
- * @from: Source address, in user space.
- * @n:    Number of bytes to copy.
- *
- * Context: User context only.  This function may sleep.
- *
- * Copy data from user space to kernel space.
- *
- * Returns number of bytes that could not be copied.
- * On success, this will be zero.
- *
- * If some data could not be copied, this function will pad the copied
- * data to the requested size using zero bytes.
- */
-unsigned long
-_copy_from_user(void *to, const void __user *from, unsigned long n)
+void copy_to_user_overflow(void)
 {
-	if (access_ok(VERIFY_READ, from, n))
-		n = __copy_from_user(to, from, n);
-	else
-		memset(to, 0, n);
-	return n;
+	WARN(1, "Buffer overflow detected!\n");
 }
-EXPORT_SYMBOL(_copy_from_user);
+EXPORT_SYMBOL(copy_to_user_overflow);
 
-void copy_from_user_overflow(void)
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+void __set_fs(mm_segment_t x)
 {
-	WARN(1, "Buffer overflow detected!\n");
+	switch (x.seg) {
+	case 0:
+		loadsegment(gs, 0);
+		break;
+	case TASK_SIZE_MAX:
+		loadsegment(gs, __USER_DS);
+		break;
+	case -1UL:
+		loadsegment(gs, __KERNEL_DS);
+		break;
+	default:
+		BUG();
+	}
+	return;
 }
-EXPORT_SYMBOL(copy_from_user_overflow);
+EXPORT_SYMBOL(__set_fs);
+
+void set_fs(mm_segment_t x)
+{
+	current_thread_info()->addr_limit = x;
+	__set_fs(x);
+}
+EXPORT_SYMBOL(set_fs);
+#endif
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/lib/usercopy_64.c linux-3.3.8-pax/arch/x86/lib/usercopy_64.c
--- linux-3.3.8/arch/x86/lib/usercopy_64.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/lib/usercopy_64.c	2012-03-22 11:30:35.780264603 +0100
@@ -42,6 +42,12 @@ long
 __strncpy_from_user(char *dst, const char __user *src, long count)
 {
 	long res;
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	if ((unsigned long)src < PAX_USER_SHADOW_BASE)
+		src += PAX_USER_SHADOW_BASE;
+#endif
+
 	__do_strncpy_from_user(dst, src, count, res);
 	return res;
 }
@@ -65,6 +71,12 @@ unsigned long __clear_user(void __user *
 {
 	long __d0;
 	might_fault();
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+	if ((unsigned long)addr < PAX_USER_SHADOW_BASE)
+		addr += PAX_USER_SHADOW_BASE;
+#endif
+
 	/* no memory constraint because it doesn't change any memory gcc knows
 	   about */
 	asm volatile(
@@ -149,12 +161,20 @@ long strlen_user(const char __user *s)
 }
 EXPORT_SYMBOL(strlen_user);
 
-unsigned long copy_in_user(void __user *to, const void __user *from, unsigned len)
+unsigned long copy_in_user(void __user *to, const void __user *from, unsigned long len)
 {
-	if (access_ok(VERIFY_WRITE, to, len) && access_ok(VERIFY_READ, from, len)) { 
-		return copy_user_generic((__force void *)to, (__force void *)from, len);
-	} 
-	return len;		
+	if (access_ok(VERIFY_WRITE, to, len) && access_ok(VERIFY_READ, from, len)) {
+
+#ifdef CONFIG_PAX_MEMORY_UDEREF
+		if ((unsigned long)to < PAX_USER_SHADOW_BASE)
+			to += PAX_USER_SHADOW_BASE;
+		if ((unsigned long)from < PAX_USER_SHADOW_BASE)
+			from += PAX_USER_SHADOW_BASE;
+#endif
+
+		return copy_user_generic((void __force_kernel *)to, (void __force_kernel *)from, len);
+	}
+	return len;
 }
 EXPORT_SYMBOL(copy_in_user);
 
@@ -164,7 +184,7 @@ EXPORT_SYMBOL(copy_in_user);
  * it is not necessary to optimize tail handling.
  */
 unsigned long
-copy_user_handle_tail(char *to, char *from, unsigned len, unsigned zerorest)
+copy_user_handle_tail(char __user *to, char __user *from, unsigned long len, unsigned zerorest)
 {
 	char c;
 	unsigned zero_len;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/Makefile linux-3.3.8-pax/arch/x86/Makefile
--- linux-3.3.8/arch/x86/Makefile	2012-06-11 19:36:39.680445777 +0200
+++ linux-3.3.8-pax/arch/x86/Makefile	2012-06-11 19:36:46.080446124 +0200
@@ -46,6 +46,7 @@ else
         UTS_MACHINE := x86_64
         CHECKFLAGS += -D__x86_64__ -m64
 
+        biarch := $(call cc-option,-m64)
         KBUILD_AFLAGS += -m64
         KBUILD_CFLAGS += -m64
 
@@ -205,3 +206,12 @@ define archhelp
   echo  '                  FDARGS="..."  arguments for the booted kernel'
   echo  '                  FDINITRD=file initrd for the booted kernel'
 endef
+
+define OLD_LD
+
+*** ${VERSION}.${PATCHLEVEL} PaX kernels no longer build correctly with old versions of binutils.
+*** Please upgrade your binutils to 2.18 or newer
+endef
+
+archprepare:
+	$(if $(LDFLAGS_BUILD_ID),,$(error $(OLD_LD)))
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/mm/extable.c linux-3.3.8-pax/arch/x86/mm/extable.c
--- linux-3.3.8/arch/x86/mm/extable.c	2012-03-19 10:38:56.684049992 +0100
+++ linux-3.3.8-pax/arch/x86/mm/extable.c	2012-03-19 10:43:43.488034680 +0100
@@ -8,7 +8,7 @@ int fixup_exception(struct pt_regs *regs
 	const struct exception_table_entry *fixup;
 
 #ifdef CONFIG_PNPBIOS
-	if (unlikely(SEGMENT_IS_PNP_CODE(regs->cs))) {
+	if (unlikely(!v8086_mode(regs) && SEGMENT_IS_PNP_CODE(regs->cs))) {
 		extern u32 pnp_bios_fault_eip, pnp_bios_fault_esp;
 		extern u32 pnp_bios_is_utter_crap;
 		pnp_bios_is_utter_crap = 1;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/mm/fault.c linux-3.3.8-pax/arch/x86/mm/fault.c
--- linux-3.3.8/arch/x86/mm/fault.c	2012-03-19 10:38:56.684049992 +0100
+++ linux-3.3.8-pax/arch/x86/mm/fault.c	2012-03-19 10:43:43.488034680 +0100
@@ -13,11 +13,18 @@
 #include <linux/perf_event.h>		/* perf_sw_event		*/
 #include <linux/hugetlb.h>		/* hstate_index_to_shift	*/
 #include <linux/prefetch.h>		/* prefetchw			*/
+#include <linux/unistd.h>
+#include <linux/compiler.h>
 
 #include <asm/traps.h>			/* dotraplinkage, ...		*/
 #include <asm/pgalloc.h>		/* pgd_*(), ...			*/
 #include <asm/kmemcheck.h>		/* kmemcheck_*(), ...		*/
 #include <asm/fixmap.h>			/* VSYSCALL_START		*/
+#include <asm/tlbflush.h>
+
+#if defined(CONFIG_X86_64) && defined(CONFIG_PAX_MEMORY_UDEREF)
+#include <asm/stacktrace.h>
+#endif
 
 /*
  * Page fault error code bits:
@@ -55,7 +62,7 @@ static inline int __kprobes notify_page_
 	int ret = 0;
 
 	/* kprobe_running() needs smp_processor_id() */
-	if (kprobes_built_in() && !user_mode_vm(regs)) {
+	if (kprobes_built_in() && !user_mode(regs)) {
 		preempt_disable();
 		if (kprobe_running() && kprobe_fault_handler(regs, 14))
 			ret = 1;
@@ -116,7 +123,10 @@ check_prefetch_opcode(struct pt_regs *re
 		return !instr_lo || (instr_lo>>1) == 1;
 	case 0x00:
 		/* Prefetch instruction is 0x0F0D or 0x0F18 */
-		if (probe_kernel_address(instr, opcode))
+		if (user_mode(regs)) {
+			if (__copy_from_user_inatomic(&opcode, (unsigned char __force_user *)(instr), 1))
+				return 0;
+		} else if (probe_kernel_address(instr, opcode))
 			return 0;
 
 		*prefetch = (instr_lo == 0xF) &&
@@ -150,7 +160,10 @@ is_prefetch(struct pt_regs *regs, unsign
 	while (instr < max_instr) {
 		unsigned char opcode;
 
-		if (probe_kernel_address(instr, opcode))
+		if (user_mode(regs)) {
+			if (__copy_from_user_inatomic(&opcode, (unsigned char __force_user *)(instr), 1))
+				break;
+		} else if (probe_kernel_address(instr, opcode))
 			break;
 
 		instr++;
@@ -181,6 +194,34 @@ force_sig_info_fault(int si_signo, int s
 	force_sig_info(si_signo, &info, tsk);
 }
 
+#if defined(CONFIG_PAX_PAGEEXEC) || defined(CONFIG_PAX_SEGMEXEC)
+static bool pax_is_fetch_fault(struct pt_regs *regs, unsigned long error_code, unsigned long address);
+#endif
+
+#ifdef CONFIG_PAX_EMUTRAMP
+static int pax_handle_fetch_fault(struct pt_regs *regs);
+#endif
+
+#ifdef CONFIG_PAX_PAGEEXEC
+static inline pmd_t * pax_get_pmd(struct mm_struct *mm, unsigned long address)
+{
+	pgd_t *pgd;
+	pud_t *pud;
+	pmd_t *pmd;
+
+	pgd = pgd_offset(mm, address);
+	if (!pgd_present(*pgd))
+		return NULL;
+	pud = pud_offset(pgd, address);
+	if (!pud_present(*pud))
+		return NULL;
+	pmd = pmd_offset(pud, address);
+	if (!pmd_present(*pmd))
+		return NULL;
+	return pmd;
+}
+#endif
+
 DEFINE_SPINLOCK(pgd_lock);
 LIST_HEAD(pgd_list);
 
@@ -231,10 +272,22 @@ void vmalloc_sync_all(void)
 	for (address = VMALLOC_START & PMD_MASK;
 	     address >= TASK_SIZE && address < FIXADDR_TOP;
 	     address += PMD_SIZE) {
+
+#ifdef CONFIG_PAX_PER_CPU_PGD
+		unsigned long cpu;
+#else
 		struct page *page;
+#endif
 
 		spin_lock(&pgd_lock);
+
+#ifdef CONFIG_PAX_PER_CPU_PGD
+		for (cpu = 0; cpu < nr_cpu_ids; ++cpu) {
+			pgd_t *pgd = get_cpu_pgd(cpu);
+			pmd_t *ret;
+#else
 		list_for_each_entry(page, &pgd_list, lru) {
+			pgd_t *pgd = page_address(page);
 			spinlock_t *pgt_lock;
 			pmd_t *ret;
 
@@ -242,8 +295,13 @@ void vmalloc_sync_all(void)
 			pgt_lock = &pgd_page_get_mm(page)->page_table_lock;
 
 			spin_lock(pgt_lock);
-			ret = vmalloc_sync_one(page_address(page), address);
+#endif
+
+			ret = vmalloc_sync_one(pgd, address);
+
+#ifndef CONFIG_PAX_PER_CPU_PGD
 			spin_unlock(pgt_lock);
+#endif
 
 			if (!ret)
 				break;
@@ -277,6 +335,11 @@ static noinline __kprobes int vmalloc_fa
 	 * an interrupt in the middle of a task switch..
 	 */
 	pgd_paddr = read_cr3();
+
+#ifdef CONFIG_PAX_PER_CPU_PGD
+	BUG_ON(__pa(get_cpu_pgd(smp_processor_id())) != (pgd_paddr & PHYSICAL_PAGE_MASK));
+#endif
+
 	pmd_k = vmalloc_sync_one(__va(pgd_paddr), address);
 	if (!pmd_k)
 		return -1;
@@ -372,7 +435,14 @@ static noinline __kprobes int vmalloc_fa
 	 * happen within a race in page table update. In the later
 	 * case just flush:
 	 */
+
+#ifdef CONFIG_PAX_PER_CPU_PGD
+	BUG_ON(__pa(get_cpu_pgd(smp_processor_id())) != (read_cr3() & PHYSICAL_PAGE_MASK));
+	pgd = pgd_offset_cpu(smp_processor_id(), address);
+#else
 	pgd = pgd_offset(current->active_mm, address);
+#endif
+
 	pgd_ref = pgd_offset_k(address);
 	if (pgd_none(*pgd_ref))
 		return -1;
@@ -540,7 +610,7 @@ static int is_errata93(struct pt_regs *r
 static int is_errata100(struct pt_regs *regs, unsigned long address)
 {
 #ifdef CONFIG_X86_64
-	if ((regs->cs == __USER32_CS || (regs->cs & (1<<2))) && (address >> 32))
+	if ((regs->cs == __USER32_CS || (regs->cs & SEGMENT_LDT)) && (address >> 32))
 		return 1;
 #endif
 	return 0;
@@ -567,7 +637,7 @@ static int is_f00f_bug(struct pt_regs *r
 }
 
 static const char nx_warning[] = KERN_CRIT
-"kernel tried to execute NX-protected page - exploit attempt? (uid: %d)\n";
+"kernel tried to execute NX-protected page - exploit attempt? (uid: %d, task: %s, pid: %d)\n";
 
 static void
 show_fault_oops(struct pt_regs *regs, unsigned long error_code,
@@ -576,15 +646,21 @@ show_fault_oops(struct pt_regs *regs, un
 	if (!oops_may_print())
 		return;
 
-	if (error_code & PF_INSTR) {
+	if ((__supported_pte_mask & _PAGE_NX) && (error_code & PF_INSTR)) {
 		unsigned int level;
 
 		pte_t *pte = lookup_address(address, &level);
 
 		if (pte && pte_present(*pte) && !pte_exec(*pte))
-			printk(nx_warning, current_uid());
+			printk(nx_warning, current_uid(), current->comm, task_pid_nr(current));
 	}
 
+#ifdef CONFIG_PAX_KERNEXEC
+	if (init_mm.start_code <= address && address < init_mm.end_code)
+		printk(KERN_ERR "PAX: %s:%d, uid/euid: %u/%u, attempted to modify kernel code\n",
+				 current->comm, task_pid_nr(current), current_uid(), current_euid());
+#endif
+
 	printk(KERN_ALERT "BUG: unable to handle kernel ");
 	if (address < PAGE_SIZE)
 		printk(KERN_CONT "NULL pointer dereference");
@@ -748,6 +824,21 @@ __bad_area_nosemaphore(struct pt_regs *r
 		}
 #endif
 
+#if defined(CONFIG_PAX_PAGEEXEC) || defined(CONFIG_PAX_SEGMEXEC)
+		if (pax_is_fetch_fault(regs, error_code, address)) {
+
+#ifdef CONFIG_PAX_EMUTRAMP
+			switch (pax_handle_fetch_fault(regs)) {
+			case 2:
+				return;
+			}
+#endif
+
+			pax_report_fault(regs, (void *)regs->ip, (void *)regs->sp);
+			do_group_exit(SIGKILL);
+		}
+#endif
+
 		if (unlikely(show_unhandled_signals))
 			show_signal_msg(regs, error_code, address, tsk);
 
@@ -844,7 +935,7 @@ do_sigbus(struct pt_regs *regs, unsigned
 	if (fault & (VM_FAULT_HWPOISON|VM_FAULT_HWPOISON_LARGE)) {
 		printk(KERN_ERR
 	"MCE: Killing %s:%d due to hardware memory corruption fault at %lx\n",
-			tsk->comm, tsk->pid, address);
+			tsk->comm, task_pid_nr(tsk), address);
 		code = BUS_MCEERR_AR;
 	}
 #endif
@@ -900,6 +991,99 @@ static int spurious_fault_check(unsigned
 	return 1;
 }
 
+#if defined(CONFIG_X86_32) && defined(CONFIG_PAX_PAGEEXEC)
+static int pax_handle_pageexec_fault(struct pt_regs *regs, struct mm_struct *mm, unsigned long address, unsigned long error_code)
+{
+	pte_t *pte;
+	pmd_t *pmd;
+	spinlock_t *ptl;
+	unsigned char pte_mask;
+
+	if ((__supported_pte_mask & _PAGE_NX) || (error_code & (PF_PROT|PF_USER)) != (PF_PROT|PF_USER) || v8086_mode(regs) ||
+	    !(mm->pax_flags & MF_PAX_PAGEEXEC))
+		return 0;
+
+	/* PaX: it's our fault, let's handle it if we can */
+
+	/* PaX: take a look at read faults before acquiring any locks */
+	if (unlikely(!(error_code & PF_WRITE) && (regs->ip == address))) {
+		/* instruction fetch attempt from a protected page in user mode */
+		up_read(&mm->mmap_sem);
+
+#ifdef CONFIG_PAX_EMUTRAMP
+		switch (pax_handle_fetch_fault(regs)) {
+		case 2:
+			return 1;
+		}
+#endif
+
+		pax_report_fault(regs, (void *)regs->ip, (void *)regs->sp);
+		do_group_exit(SIGKILL);
+	}
+
+	pmd = pax_get_pmd(mm, address);
+	if (unlikely(!pmd))
+		return 0;
+
+	pte = pte_offset_map_lock(mm, pmd, address, &ptl);
+	if (unlikely(!(pte_val(*pte) & _PAGE_PRESENT) || pte_user(*pte))) {
+		pte_unmap_unlock(pte, ptl);
+		return 0;
+	}
+
+	if (unlikely((error_code & PF_WRITE) && !pte_write(*pte))) {
+		/* write attempt to a protected page in user mode */
+		pte_unmap_unlock(pte, ptl);
+		return 0;
+	}
+
+#ifdef CONFIG_SMP
+	if (likely(address > get_limit(regs->cs) && cpu_isset(smp_processor_id(), mm->context.cpu_user_cs_mask)))
+#else
+	if (likely(address > get_limit(regs->cs)))
+#endif
+	{
+		set_pte(pte, pte_mkread(*pte));
+		__flush_tlb_one(address);
+		pte_unmap_unlock(pte, ptl);
+		up_read(&mm->mmap_sem);
+		return 1;
+	}
+
+	pte_mask = _PAGE_ACCESSED | _PAGE_USER | ((error_code & PF_WRITE) << (_PAGE_BIT_DIRTY-1));
+
+	/*
+	 * PaX: fill DTLB with user rights and retry
+	 */
+	__asm__ __volatile__ (
+		"orb %2,(%1)\n"
+#if defined(CONFIG_M586) || defined(CONFIG_M586TSC)
+/*
+ * PaX: let this uncommented 'invlpg' remind us on the behaviour of Intel's
+ * (and AMD's) TLBs. namely, they do not cache PTEs that would raise *any*
+ * page fault when examined during a TLB load attempt. this is true not only
+ * for PTEs holding a non-present entry but also present entries that will
+ * raise a page fault (such as those set up by PaX, or the copy-on-write
+ * mechanism). in effect it means that we do *not* need to flush the TLBs
+ * for our target pages since their PTEs are simply not in the TLBs at all.
+
+ * the best thing in omitting it is that we gain around 15-20% speed in the
+ * fast path of the page fault handler and can get rid of tracing since we
+ * can no longer flush unintended entries.
+ */
+		"invlpg (%0)\n"
+#endif
+		__copyuser_seg"testb $0,(%0)\n"
+		"xorb %3,(%1)\n"
+		:
+		: "r" (address), "r" (pte), "q" (pte_mask), "i" (_PAGE_USER)
+		: "memory", "cc");
+	pte_unmap_unlock(pte, ptl);
+	up_read(&mm->mmap_sem);
+	return 1;
+}
+#endif
+
 /*
  * Handle a spurious fault caused by a stale TLB entry.
  *
@@ -972,6 +1156,9 @@ int show_unhandled_signals = 1;
 static inline int
 access_error(unsigned long error_code, struct vm_area_struct *vma)
 {
+	if ((__supported_pte_mask & _PAGE_NX) && (error_code & PF_INSTR) && !(vma->vm_flags & VM_EXEC))
+		return 1;
+
 	if (error_code & PF_WRITE) {
 		/* write, present and write, not present: */
 		if (unlikely(!(vma->vm_flags & VM_WRITE)))
@@ -1005,19 +1192,33 @@ do_page_fault(struct pt_regs *regs, unsi
 {
 	struct vm_area_struct *vma;
 	struct task_struct *tsk;
-	unsigned long address;
 	struct mm_struct *mm;
 	int fault;
 	int write = error_code & PF_WRITE;
 	unsigned int flags = FAULT_FLAG_ALLOW_RETRY | FAULT_FLAG_KILLABLE |
 					(write ? FAULT_FLAG_WRITE : 0);
 
+	/* Get the faulting address: */
+	unsigned long address = read_cr2();
+
+#if defined(CONFIG_X86_64) && defined(CONFIG_PAX_MEMORY_UDEREF)
+	if (!user_mode(regs) && address < 2 * PAX_USER_SHADOW_BASE) {
+		if (!search_exception_tables(regs->ip)) {
+			bad_area_nosemaphore(regs, error_code, address);
+			return;
+		}
+		if (address < PAX_USER_SHADOW_BASE) {
+			printk(KERN_ERR "PAX: please report this to pageexec@freemail.hu\n");
+			printk(KERN_ERR "PAX: faulting IP: %pS\n", (void *)regs->ip);
+			show_trace_log_lvl(NULL, NULL, (void *)regs->sp, regs->bp, KERN_ERR);
+		} else
+			address -= PAX_USER_SHADOW_BASE;
+	}
+#endif
+
 	tsk = current;
 	mm = tsk->mm;
 
-	/* Get the faulting address: */
-	address = read_cr2();
-
 	/*
 	 * Detect and handle instructions that would cause a page fault for
 	 * both a tracked kernel page and a userspace page.
@@ -1077,7 +1278,7 @@ do_page_fault(struct pt_regs *regs, unsi
 	 * User-mode registers count as a user access even for any
 	 * potential system fault or CPU buglet:
 	 */
-	if (user_mode_vm(regs)) {
+	if (user_mode(regs)) {
 		local_irq_enable();
 		error_code |= PF_USER;
 	} else {
@@ -1132,6 +1333,11 @@ retry:
 		might_sleep();
 	}
 
+#if defined(CONFIG_X86_32) && defined(CONFIG_PAX_PAGEEXEC)
+	if (pax_handle_pageexec_fault(regs, mm, address, error_code))
+		return;
+#endif
+
 	vma = find_vma(mm, address);
 	if (unlikely(!vma)) {
 		bad_area(regs, error_code, address);
@@ -1143,18 +1349,24 @@ retry:
 		bad_area(regs, error_code, address);
 		return;
 	}
-	if (error_code & PF_USER) {
-		/*
-		 * Accessing the stack below %sp is always a bug.
-		 * The large cushion allows instructions like enter
-		 * and pusha to work. ("enter $65535, $31" pushes
-		 * 32 pointers and then decrements %sp by 65535.)
-		 */
-		if (unlikely(address + 65536 + 32 * sizeof(unsigned long) < regs->sp)) {
-			bad_area(regs, error_code, address);
-			return;
-		}
+	/*
+	 * Accessing the stack below %sp is always a bug.
+	 * The large cushion allows instructions like enter
+	 * and pusha to work. ("enter $65535, $31" pushes
+	 * 32 pointers and then decrements %sp by 65535.)
+	 */
+	if (unlikely(address + 65536 + 32 * sizeof(unsigned long) < task_pt_regs(tsk)->sp)) {
+		bad_area(regs, error_code, address);
+		return;
 	}
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (unlikely((mm->pax_flags & MF_PAX_SEGMEXEC) && vma->vm_end - SEGMEXEC_TASK_SIZE - 1 < address - SEGMEXEC_TASK_SIZE - 1)) {
+		bad_area(regs, error_code, address);
+		return;
+	}
+#endif
+
 	if (unlikely(expand_stack(vma, address))) {
 		bad_area(regs, error_code, address);
 		return;
@@ -1209,3 +1421,292 @@ good_area:
 
 	up_read(&mm->mmap_sem);
 }
+
+#if defined(CONFIG_PAX_PAGEEXEC) || defined(CONFIG_PAX_SEGMEXEC)
+static bool pax_is_fetch_fault(struct pt_regs *regs, unsigned long error_code, unsigned long address)
+{
+	struct mm_struct *mm = current->mm;
+	unsigned long ip = regs->ip;
+
+	if (v8086_mode(regs))
+		ip = ((regs->cs & 0xffff) << 4) + (ip & 0xffff);
+
+#ifdef CONFIG_PAX_PAGEEXEC
+	if (mm->pax_flags & MF_PAX_PAGEEXEC) {
+		if ((__supported_pte_mask & _PAGE_NX) && (error_code & PF_INSTR))
+			return true;
+		if (!(error_code & (PF_PROT | PF_WRITE)) && ip == address)
+			return true;
+		return false;
+	}
+#endif
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (mm->pax_flags & MF_PAX_SEGMEXEC) {
+		if (!(error_code & (PF_PROT | PF_WRITE)) && (ip + SEGMEXEC_TASK_SIZE == address))
+			return true;
+		return false;
+	}
+#endif
+
+	return false;
+}
+#endif
+
+#ifdef CONFIG_PAX_EMUTRAMP
+static int pax_handle_fetch_fault_32(struct pt_regs *regs)
+{
+	int err;
+
+	do { /* PaX: libffi trampoline emulation */
+		unsigned char mov, jmp;
+		unsigned int addr1, addr2;
+
+#ifdef CONFIG_X86_64
+		if ((regs->ip + 9) >> 32)
+			break;
+#endif
+
+		err = get_user(mov, (unsigned char __user *)regs->ip);
+		err |= get_user(addr1, (unsigned int __user *)(regs->ip + 1));
+		err |= get_user(jmp, (unsigned char __user *)(regs->ip + 5));
+		err |= get_user(addr2, (unsigned int __user *)(regs->ip + 6));
+
+		if (err)
+			break;
+
+		if (mov == 0xB8 && jmp == 0xE9) {
+			regs->ax = addr1;
+			regs->ip = (unsigned int)(regs->ip + addr2 + 10);
+			return 2;
+		}
+	} while (0);
+
+	do { /* PaX: gcc trampoline emulation #1 */
+		unsigned char mov1, mov2;
+		unsigned short jmp;
+		unsigned int addr1, addr2;
+
+#ifdef CONFIG_X86_64
+		if ((regs->ip + 11) >> 32)
+			break;
+#endif
+
+		err = get_user(mov1, (unsigned char __user *)regs->ip);
+		err |= get_user(addr1, (unsigned int __user *)(regs->ip + 1));
+		err |= get_user(mov2, (unsigned char __user *)(regs->ip + 5));
+		err |= get_user(addr2, (unsigned int __user *)(regs->ip + 6));
+		err |= get_user(jmp, (unsigned short __user *)(regs->ip + 10));
+
+		if (err)
+			break;
+
+		if (mov1 == 0xB9 && mov2 == 0xB8 && jmp == 0xE0FF) {
+			regs->cx = addr1;
+			regs->ax = addr2;
+			regs->ip = addr2;
+			return 2;
+		}
+	} while (0);
+
+	do { /* PaX: gcc trampoline emulation #2 */
+		unsigned char mov, jmp;
+		unsigned int addr1, addr2;
+
+#ifdef CONFIG_X86_64
+		if ((regs->ip + 9) >> 32)
+			break;
+#endif
+
+		err = get_user(mov, (unsigned char __user *)regs->ip);
+		err |= get_user(addr1, (unsigned int __user *)(regs->ip + 1));
+		err |= get_user(jmp, (unsigned char __user *)(regs->ip + 5));
+		err |= get_user(addr2, (unsigned int __user *)(regs->ip + 6));
+
+		if (err)
+			break;
+
+		if (mov == 0xB9 && jmp == 0xE9) {
+			regs->cx = addr1;
+			regs->ip = (unsigned int)(regs->ip + addr2 + 10);
+			return 2;
+		}
+	} while (0);
+
+	return 1; /* PaX in action */
+}
+
+#ifdef CONFIG_X86_64
+static int pax_handle_fetch_fault_64(struct pt_regs *regs)
+{
+	int err;
+
+	do { /* PaX: libffi trampoline emulation */
+		unsigned short mov1, mov2, jmp1;
+		unsigned char stcclc, jmp2;
+		unsigned long addr1, addr2;
+
+		err = get_user(mov1, (unsigned short __user *)regs->ip);
+		err |= get_user(addr1, (unsigned long __user *)(regs->ip + 2));
+		err |= get_user(mov2, (unsigned short __user *)(regs->ip + 10));
+		err |= get_user(addr2, (unsigned long __user *)(regs->ip + 12));
+		err |= get_user(stcclc, (unsigned char __user *)(regs->ip + 20));
+		err |= get_user(jmp1, (unsigned short __user *)(regs->ip + 21));
+		err |= get_user(jmp2, (unsigned char __user *)(regs->ip + 23));
+
+		if (err)
+			break;
+
+		if (mov1 == 0xBB49 && mov2 == 0xBA49 && (stcclc == 0xF8 || stcclc == 0xF9) && jmp1 == 0xFF49 && jmp2 == 0xE3) {
+			regs->r11 = addr1;
+			regs->r10 = addr2;
+			if (stcclc == 0xF8)
+				regs->flags &= ~X86_EFLAGS_CF;
+			else
+				regs->flags |= X86_EFLAGS_CF;
+			regs->ip = addr1;
+			return 2;
+		}
+	} while (0);
+
+	do { /* PaX: gcc trampoline emulation #1 */
+		unsigned short mov1, mov2, jmp1;
+		unsigned char jmp2;
+		unsigned int addr1;
+		unsigned long addr2;
+
+		err = get_user(mov1, (unsigned short __user *)regs->ip);
+		err |= get_user(addr1, (unsigned int __user *)(regs->ip + 2));
+		err |= get_user(mov2, (unsigned short __user *)(regs->ip + 6));
+		err |= get_user(addr2, (unsigned long __user *)(regs->ip + 8));
+		err |= get_user(jmp1, (unsigned short __user *)(regs->ip + 16));
+		err |= get_user(jmp2, (unsigned char __user *)(regs->ip + 18));
+
+		if (err)
+			break;
+
+		if (mov1 == 0xBB41 && mov2 == 0xBA49 && jmp1 == 0xFF49 && jmp2 == 0xE3) {
+			regs->r11 = addr1;
+			regs->r10 = addr2;
+			regs->ip = addr1;
+			return 2;
+		}
+	} while (0);
+
+	do { /* PaX: gcc trampoline emulation #2 */
+		unsigned short mov1, mov2, jmp1;
+		unsigned char jmp2;
+		unsigned long addr1, addr2;
+
+		err = get_user(mov1, (unsigned short __user *)regs->ip);
+		err |= get_user(addr1, (unsigned long __user *)(regs->ip + 2));
+		err |= get_user(mov2, (unsigned short __user *)(regs->ip + 10));
+		err |= get_user(addr2, (unsigned long __user *)(regs->ip + 12));
+		err |= get_user(jmp1, (unsigned short __user *)(regs->ip + 20));
+		err |= get_user(jmp2, (unsigned char __user *)(regs->ip + 22));
+
+		if (err)
+			break;
+
+		if (mov1 == 0xBB49 && mov2 == 0xBA49 && jmp1 == 0xFF49 && jmp2 == 0xE3) {
+			regs->r11 = addr1;
+			regs->r10 = addr2;
+			regs->ip = addr1;
+			return 2;
+		}
+	} while (0);
+
+	return 1; /* PaX in action */
+}
+#endif
+
+/*
+ * PaX: decide what to do with offenders (regs->ip = fault address)
+ *
+ * returns 1 when task should be killed
+ *         2 when gcc trampoline was detected
+ */
+static int pax_handle_fetch_fault(struct pt_regs *regs)
+{
+	if (v8086_mode(regs))
+		return 1;
+
+	if (!(current->mm->pax_flags & MF_PAX_EMUTRAMP))
+		return 1;
+
+#ifdef CONFIG_X86_32
+	return pax_handle_fetch_fault_32(regs);
+#else
+	if (regs->cs == __USER32_CS || (regs->cs & SEGMENT_LDT))
+		return pax_handle_fetch_fault_32(regs);
+	else
+		return pax_handle_fetch_fault_64(regs);
+#endif
+}
+#endif
+
+#if defined(CONFIG_PAX_PAGEEXEC) || defined(CONFIG_PAX_SEGMEXEC)
+void pax_report_insns(struct pt_regs *regs, void *pc, void *sp)
+{
+	long i;
+
+	printk(KERN_ERR "PAX: bytes at PC: ");
+	for (i = 0; i < 20; i++) {
+		unsigned char c;
+		if (get_user(c, (unsigned char __force_user *)pc+i))
+			printk(KERN_CONT "?? ");
+		else
+			printk(KERN_CONT "%02x ", c);
+	}
+	printk("\n");
+
+	printk(KERN_ERR "PAX: bytes at SP-%lu: ", (unsigned long)sizeof(long));
+	for (i = -1; i < 80 / (long)sizeof(long); i++) {
+		unsigned long c;
+		if (get_user(c, (unsigned long __force_user *)sp+i)) {
+#ifdef CONFIG_X86_32
+			printk(KERN_CONT "???????? ");
+#else
+			if ((regs->cs == __USER32_CS || (regs->cs & SEGMENT_LDT)))
+				printk(KERN_CONT "???????? ???????? ");
+			else
+				printk(KERN_CONT "???????????????? ");
+#endif
+		} else {
+#ifdef CONFIG_X86_64
+			if ((regs->cs == __USER32_CS || (regs->cs & SEGMENT_LDT))) {
+				printk(KERN_CONT "%08x ", (unsigned int)c);
+				printk(KERN_CONT "%08x ", (unsigned int)(c >> 32));
+			} else
+#endif
+				printk(KERN_CONT "%0*lx ", 2 * (int)sizeof(long), c);
+		}
+	}
+	printk("\n");
+}
+#endif
+
+/**
+ * probe_kernel_write(): safely attempt to write to a location
+ * @dst: address to write to
+ * @src: pointer to the data that shall be written
+ * @size: size of the data chunk
+ *
+ * Safely write to address @dst from the buffer at @src.  If a kernel fault
+ * happens, handle that and return -EFAULT.
+ */
+long notrace probe_kernel_write(void *dst, const void *src, size_t size)
+{
+	long ret;
+	mm_segment_t old_fs = get_fs();
+
+	set_fs(KERNEL_DS);
+	pagefault_disable();
+	pax_open_kernel();
+	ret = __copy_to_user_inatomic((void __force_user *)dst, src, size);
+	pax_close_kernel();
+	pagefault_enable();
+	set_fs(old_fs);
+
+	return ret ? -EFAULT : 0;
+}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/mm/gup.c linux-3.3.8-pax/arch/x86/mm/gup.c
--- linux-3.3.8/arch/x86/mm/gup.c	2012-01-08 19:47:49.779472971 +0100
+++ linux-3.3.8-pax/arch/x86/mm/gup.c	2012-03-19 10:43:43.492034678 +0100
@@ -255,7 +255,7 @@ int __get_user_pages_fast(unsigned long
 	addr = start;
 	len = (unsigned long) nr_pages << PAGE_SHIFT;
 	end = start + len;
-	if (unlikely(!access_ok(write ? VERIFY_WRITE : VERIFY_READ,
+	if (unlikely(!__access_ok(write ? VERIFY_WRITE : VERIFY_READ,
 					(void __user *)start, len)))
 		return 0;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/mm/highmem_32.c linux-3.3.8-pax/arch/x86/mm/highmem_32.c
--- linux-3.3.8/arch/x86/mm/highmem_32.c	2012-01-08 19:47:49.779472971 +0100
+++ linux-3.3.8-pax/arch/x86/mm/highmem_32.c	2012-03-19 10:43:43.492034678 +0100
@@ -44,7 +44,11 @@ void *kmap_atomic_prot(struct page *page
 	idx = type + KM_TYPE_NR*smp_processor_id();
 	vaddr = __fix_to_virt(FIX_KMAP_BEGIN + idx);
 	BUG_ON(!pte_none(*(kmap_pte-idx)));
+
+	pax_open_kernel();
 	set_pte(kmap_pte-idx, mk_pte(page, prot));
+	pax_close_kernel();
+
 	arch_flush_lazy_mmu_mode();
 
 	return (void *)vaddr;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/mm/hugetlbpage.c linux-3.3.8-pax/arch/x86/mm/hugetlbpage.c
--- linux-3.3.8/arch/x86/mm/hugetlbpage.c	2012-03-19 10:38:56.684049992 +0100
+++ linux-3.3.8-pax/arch/x86/mm/hugetlbpage.c	2012-05-08 02:34:49.966430803 +0200
@@ -266,13 +266,20 @@ static unsigned long hugetlb_get_unmappe
 	struct hstate *h = hstate_file(file);
 	struct mm_struct *mm = current->mm;
 	struct vm_area_struct *vma;
-	unsigned long start_addr;
+	unsigned long start_addr, pax_task_size = TASK_SIZE;
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (mm->pax_flags & MF_PAX_SEGMEXEC)
+		pax_task_size = SEGMEXEC_TASK_SIZE;
+#endif
+
+	pax_task_size -= PAGE_SIZE;
 
 	if (len > mm->cached_hole_size) {
-	        start_addr = mm->free_area_cache;
+		start_addr = mm->free_area_cache;
 	} else {
-	        start_addr = TASK_UNMAPPED_BASE;
-	        mm->cached_hole_size = 0;
+		start_addr = mm->mmap_base;
+		mm->cached_hole_size = 0;
 	}
 
 full_search:
@@ -280,26 +287,27 @@ full_search:
 
 	for (vma = find_vma(mm, addr); ; vma = vma->vm_next) {
 		/* At this point:  (!vma || addr < vma->vm_end). */
-		if (TASK_SIZE - len < addr) {
+		if (pax_task_size - len < addr) {
 			/*
 			 * Start a new search - just in case we missed
 			 * some holes.
 			 */
-			if (start_addr != TASK_UNMAPPED_BASE) {
-				start_addr = TASK_UNMAPPED_BASE;
+			if (start_addr != mm->mmap_base) {
+				start_addr = mm->mmap_base;
 				mm->cached_hole_size = 0;
 				goto full_search;
 			}
 			return -ENOMEM;
 		}
-		if (!vma || addr + len <= vma->vm_start) {
-			mm->free_area_cache = addr + len;
-			return addr;
-		}
+		if (check_heap_stack_gap(vma, addr, len))
+			break;
 		if (addr + mm->cached_hole_size < vma->vm_start)
 		        mm->cached_hole_size = vma->vm_start - addr;
 		addr = ALIGN(vma->vm_end, huge_page_size(h));
 	}
+
+	mm->free_area_cache = addr + len;
+	return addr;
 }
 
 static unsigned long hugetlb_get_unmapped_area_topdown(struct file *file,
@@ -308,10 +316,9 @@ static unsigned long hugetlb_get_unmappe
 {
 	struct hstate *h = hstate_file(file);
 	struct mm_struct *mm = current->mm;
-	struct vm_area_struct *vma, *prev_vma;
-	unsigned long base = mm->mmap_base, addr = addr0;
+	struct vm_area_struct *vma;
+	unsigned long base = mm->mmap_base, addr;
 	unsigned long largest_hole = mm->cached_hole_size;
-	int first_time = 1;
 
 	/* don't allow allocations above current base */
 	if (mm->free_area_cache > base)
@@ -321,14 +328,15 @@ static unsigned long hugetlb_get_unmappe
 	        largest_hole = 0;
 		mm->free_area_cache  = base;
 	}
-try_again:
+
 	/* make sure it can fit in the remaining address space */
 	if (mm->free_area_cache < len)
 		goto fail;
 
 	/* either no address requested or can't fit in requested address hole */
-	addr = (mm->free_area_cache - len) & huge_page_mask(h);
+	addr = (mm->free_area_cache - len);
 	do {
+		addr &= huge_page_mask(h);
 		/*
 		 * Lookup failure means no vma is above this address,
 		 * i.e. return with success:
@@ -341,46 +349,47 @@ try_again:
 		 * new region fits between prev_vma->vm_end and
 		 * vma->vm_start, use it:
 		 */
-		prev_vma = vma->vm_prev;
-		if (addr + len <= vma->vm_start &&
-		            (!prev_vma || (addr >= prev_vma->vm_end))) {
+		if (check_heap_stack_gap(vma, addr, len)) {
 			/* remember the address as a hint for next time */
-		        mm->cached_hole_size = largest_hole;
-		        return (mm->free_area_cache = addr);
-		} else {
-			/* pull free_area_cache down to the first hole */
-		        if (mm->free_area_cache == vma->vm_end) {
-				mm->free_area_cache = vma->vm_start;
-				mm->cached_hole_size = largest_hole;
-			}
+			mm->cached_hole_size = largest_hole;
+			return (mm->free_area_cache = addr);
+		}
+		/* pull free_area_cache down to the first hole */
+		if (mm->free_area_cache == vma->vm_end) {
+			mm->free_area_cache = vma->vm_start;
+			mm->cached_hole_size = largest_hole;
 		}
 
 		/* remember the largest hole we saw so far */
 		if (addr + largest_hole < vma->vm_start)
-		        largest_hole = vma->vm_start - addr;
+			largest_hole = vma->vm_start - addr;
 
 		/* try just below the current vma->vm_start */
-		addr = (vma->vm_start - len) & huge_page_mask(h);
-	} while (len <= vma->vm_start);
+		addr = skip_heap_stack_gap(vma, len);
+	} while (!IS_ERR_VALUE(addr));
 
 fail:
 	/*
-	 * if hint left us with no space for the requested
-	 * mapping then try again:
-	 */
-	if (first_time) {
-		mm->free_area_cache = base;
-		largest_hole = 0;
-		first_time = 0;
-		goto try_again;
-	}
-	/*
 	 * A failed mmap() very likely causes application failure,
 	 * so fall back to the bottom-up function here. This scenario
 	 * can happen with large stack limits and large mmap()
 	 * allocations.
 	 */
-	mm->free_area_cache = TASK_UNMAPPED_BASE;
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (mm->pax_flags & MF_PAX_SEGMEXEC)
+		mm->mmap_base = SEGMEXEC_TASK_UNMAPPED_BASE;
+	else
+#endif
+
+	mm->mmap_base = TASK_UNMAPPED_BASE;
+
+#ifdef CONFIG_PAX_RANDMMAP
+	if (mm->pax_flags & MF_PAX_RANDMMAP)
+		mm->mmap_base += mm->delta_mmap;
+#endif
+
+	mm->free_area_cache = mm->mmap_base;
 	mm->cached_hole_size = ~0UL;
 	addr = hugetlb_get_unmapped_area_bottomup(file, addr0,
 			len, pgoff, flags);
@@ -388,6 +397,7 @@ fail:
 	/*
 	 * Restore the topdown base:
 	 */
+	mm->mmap_base = base;
 	mm->free_area_cache = base;
 	mm->cached_hole_size = ~0UL;
 
@@ -401,10 +411,19 @@ hugetlb_get_unmapped_area(struct file *f
 	struct hstate *h = hstate_file(file);
 	struct mm_struct *mm = current->mm;
 	struct vm_area_struct *vma;
+	unsigned long pax_task_size = TASK_SIZE;
 
 	if (len & ~huge_page_mask(h))
 		return -EINVAL;
-	if (len > TASK_SIZE)
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (mm->pax_flags & MF_PAX_SEGMEXEC)
+		pax_task_size = SEGMEXEC_TASK_SIZE;
+#endif
+
+	pax_task_size -= PAGE_SIZE;
+
+	if (len > pax_task_size)
 		return -ENOMEM;
 
 	if (flags & MAP_FIXED) {
@@ -416,8 +435,7 @@ hugetlb_get_unmapped_area(struct file *f
 	if (addr) {
 		addr = ALIGN(addr, huge_page_size(h));
 		vma = find_vma(mm, addr);
-		if (TASK_SIZE - len >= addr &&
-		    (!vma || addr + len <= vma->vm_start))
+		if (pax_task_size - len >= addr && check_heap_stack_gap(vma, addr, len))
 			return addr;
 	}
 	if (mm->get_unmapped_area == arch_get_unmapped_area)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/mm/init_32.c linux-3.3.8-pax/arch/x86/mm/init_32.c
--- linux-3.3.8/arch/x86/mm/init_32.c	2012-03-19 10:38:56.688049991 +0100
+++ linux-3.3.8-pax/arch/x86/mm/init_32.c	2012-03-19 10:43:43.492034678 +0100
@@ -74,36 +74,6 @@ static __init void *alloc_low_page(void)
 }
 
 /*
- * Creates a middle page table and puts a pointer to it in the
- * given global directory entry. This only returns the gd entry
- * in non-PAE compilation mode, since the middle layer is folded.
- */
-static pmd_t * __init one_md_table_init(pgd_t *pgd)
-{
-	pud_t *pud;
-	pmd_t *pmd_table;
-
-#ifdef CONFIG_X86_PAE
-	if (!(pgd_val(*pgd) & _PAGE_PRESENT)) {
-		if (after_bootmem)
-			pmd_table = (pmd_t *)alloc_bootmem_pages(PAGE_SIZE);
-		else
-			pmd_table = (pmd_t *)alloc_low_page();
-		paravirt_alloc_pmd(&init_mm, __pa(pmd_table) >> PAGE_SHIFT);
-		set_pgd(pgd, __pgd(__pa(pmd_table) | _PAGE_PRESENT));
-		pud = pud_offset(pgd, 0);
-		BUG_ON(pmd_table != pmd_offset(pud, 0));
-
-		return pmd_table;
-	}
-#endif
-	pud = pud_offset(pgd, 0);
-	pmd_table = pmd_offset(pud, 0);
-
-	return pmd_table;
-}
-
-/*
  * Create a page table and place a pointer to it in a middle page
  * directory entry:
  */
@@ -123,13 +93,28 @@ static pte_t * __init one_page_table_ini
 			page_table = (pte_t *)alloc_low_page();
 
 		paravirt_alloc_pte(&init_mm, __pa(page_table) >> PAGE_SHIFT);
+#if defined(CONFIG_PAX_PAGEEXEC) || defined(CONFIG_PAX_SEGMEXEC)
+		set_pmd(pmd, __pmd(__pa(page_table) | _KERNPG_TABLE));
+#else
 		set_pmd(pmd, __pmd(__pa(page_table) | _PAGE_TABLE));
+#endif
 		BUG_ON(page_table != pte_offset_kernel(pmd, 0));
 	}
 
 	return pte_offset_kernel(pmd, 0);
 }
 
+static pmd_t * __init one_md_table_init(pgd_t *pgd)
+{
+	pud_t *pud;
+	pmd_t *pmd_table;
+
+	pud = pud_offset(pgd, 0);
+	pmd_table = pmd_offset(pud, 0);
+
+	return pmd_table;
+}
+
 pmd_t * __init populate_extra_pmd(unsigned long vaddr)
 {
 	int pgd_idx = pgd_index(vaddr);
@@ -203,6 +188,7 @@ page_table_range_init(unsigned long star
 	int pgd_idx, pmd_idx;
 	unsigned long vaddr;
 	pgd_t *pgd;
+	pud_t *pud;
 	pmd_t *pmd;
 	pte_t *pte = NULL;
 
@@ -212,8 +198,13 @@ page_table_range_init(unsigned long star
 	pgd = pgd_base + pgd_idx;
 
 	for ( ; (pgd_idx < PTRS_PER_PGD) && (vaddr != end); pgd++, pgd_idx++) {
-		pmd = one_md_table_init(pgd);
-		pmd = pmd + pmd_index(vaddr);
+		pud = pud_offset(pgd, vaddr);
+		pmd = pmd_offset(pud, vaddr);
+
+#ifdef CONFIG_X86_PAE
+		paravirt_alloc_pmd(&init_mm, __pa(pmd) >> PAGE_SHIFT);
+#endif
+
 		for (; (pmd_idx < PTRS_PER_PMD) && (vaddr != end);
 							pmd++, pmd_idx++) {
 			pte = page_table_kmap_check(one_page_table_init(pmd),
@@ -225,11 +216,20 @@ page_table_range_init(unsigned long star
 	}
 }
 
-static inline int is_kernel_text(unsigned long addr)
+static inline int is_kernel_text(unsigned long start, unsigned long end)
 {
-	if (addr >= (unsigned long)_text && addr <= (unsigned long)__init_end)
-		return 1;
-	return 0;
+	if ((start > ktla_ktva((unsigned long)_etext) ||
+	     end <= ktla_ktva((unsigned long)_stext)) &&
+	    (start > ktla_ktva((unsigned long)_einittext) ||
+	     end <= ktla_ktva((unsigned long)_sinittext)) &&
+
+#ifdef CONFIG_ACPI_SLEEP
+	    (start > (unsigned long)__va(acpi_wakeup_address) + 0x4000 || end <= (unsigned long)__va(acpi_wakeup_address)) &&
+#endif
+
+	    (start > (unsigned long)__va(0xfffff) || end <= (unsigned long)__va(0xc0000)))
+		return 0;
+	return 1;
 }
 
 /*
@@ -246,9 +246,10 @@ kernel_physical_mapping_init(unsigned lo
 	unsigned long last_map_addr = end;
 	unsigned long start_pfn, end_pfn;
 	pgd_t *pgd_base = swapper_pg_dir;
-	int pgd_idx, pmd_idx, pte_ofs;
+	unsigned int pgd_idx, pmd_idx, pte_ofs;
 	unsigned long pfn;
 	pgd_t *pgd;
+	pud_t *pud;
 	pmd_t *pmd;
 	pte_t *pte;
 	unsigned pages_2m, pages_4k;
@@ -281,8 +282,13 @@ repeat:
 	pfn = start_pfn;
 	pgd_idx = pgd_index((pfn<<PAGE_SHIFT) + PAGE_OFFSET);
 	pgd = pgd_base + pgd_idx;
-	for (; pgd_idx < PTRS_PER_PGD; pgd++, pgd_idx++) {
-		pmd = one_md_table_init(pgd);
+	for (; pgd_idx < PTRS_PER_PGD && pfn < max_low_pfn; pgd++, pgd_idx++) {
+		pud = pud_offset(pgd, 0);
+		pmd = pmd_offset(pud, 0);
+
+#ifdef CONFIG_X86_PAE
+		paravirt_alloc_pmd(&init_mm, __pa(pmd) >> PAGE_SHIFT);
+#endif
 
 		if (pfn >= end_pfn)
 			continue;
@@ -294,14 +300,13 @@ repeat:
 #endif
 		for (; pmd_idx < PTRS_PER_PMD && pfn < end_pfn;
 		     pmd++, pmd_idx++) {
-			unsigned int addr = pfn * PAGE_SIZE + PAGE_OFFSET;
+			unsigned long address = pfn * PAGE_SIZE + PAGE_OFFSET;
 
 			/*
 			 * Map with big pages if possible, otherwise
 			 * create normal page tables:
 			 */
 			if (use_pse) {
-				unsigned int addr2;
 				pgprot_t prot = PAGE_KERNEL_LARGE;
 				/*
 				 * first pass will use the same initial
@@ -311,11 +316,7 @@ repeat:
 					__pgprot(PTE_IDENT_ATTR |
 						 _PAGE_PSE);
 
-				addr2 = (pfn + PTRS_PER_PTE-1) * PAGE_SIZE +
-					PAGE_OFFSET + PAGE_SIZE-1;
-
-				if (is_kernel_text(addr) ||
-				    is_kernel_text(addr2))
+				if (is_kernel_text(address, address + PMD_SIZE))
 					prot = PAGE_KERNEL_LARGE_EXEC;
 
 				pages_2m++;
@@ -332,7 +333,7 @@ repeat:
 			pte_ofs = pte_index((pfn<<PAGE_SHIFT) + PAGE_OFFSET);
 			pte += pte_ofs;
 			for (; pte_ofs < PTRS_PER_PTE && pfn < end_pfn;
-			     pte++, pfn++, pte_ofs++, addr += PAGE_SIZE) {
+			     pte++, pfn++, pte_ofs++, address += PAGE_SIZE) {
 				pgprot_t prot = PAGE_KERNEL;
 				/*
 				 * first pass will use the same initial
@@ -340,7 +341,7 @@ repeat:
 				 */
 				pgprot_t init_prot = __pgprot(PTE_IDENT_ATTR);
 
-				if (is_kernel_text(addr))
+				if (is_kernel_text(address, address + PAGE_SIZE))
 					prot = PAGE_KERNEL_EXEC;
 
 				pages_4k++;
@@ -466,7 +467,7 @@ void __init native_pagetable_setup_start
 
 		pud = pud_offset(pgd, va);
 		pmd = pmd_offset(pud, va);
-		if (!pmd_present(*pmd))
+		if (!pmd_present(*pmd) || pmd_huge(*pmd))
 			break;
 
 		pte = pte_offset_kernel(pmd, va);
@@ -518,12 +519,10 @@ void __init early_ioremap_page_table_ran
 
 static void __init pagetable_init(void)
 {
-	pgd_t *pgd_base = swapper_pg_dir;
-
-	permanent_kmaps_init(pgd_base);
+	permanent_kmaps_init(swapper_pg_dir);
 }
 
-pteval_t __supported_pte_mask __read_mostly = ~(_PAGE_NX | _PAGE_GLOBAL | _PAGE_IOMAP);
+pteval_t __supported_pte_mask __read_only = ~(_PAGE_NX | _PAGE_GLOBAL | _PAGE_IOMAP);
 EXPORT_SYMBOL_GPL(__supported_pte_mask);
 
 /* user-defined highmem size */
@@ -735,6 +734,12 @@ void __init mem_init(void)
 
 	pci_iommu_alloc();
 
+#ifdef CONFIG_PAX_PER_CPU_PGD
+	clone_pgd_range(get_cpu_pgd(0) + KERNEL_PGD_BOUNDARY,
+			swapper_pg_dir + KERNEL_PGD_BOUNDARY,
+			KERNEL_PGD_PTRS);
+#endif
+
 #ifdef CONFIG_FLATMEM
 	BUG_ON(!mem_map);
 #endif
@@ -761,7 +766,7 @@ void __init mem_init(void)
 			reservedpages++;
 
 	codesize =  (unsigned long) &_etext - (unsigned long) &_text;
-	datasize =  (unsigned long) &_edata - (unsigned long) &_etext;
+	datasize =  (unsigned long) &_edata - (unsigned long) &_sdata;
 	initsize =  (unsigned long) &__init_end - (unsigned long) &__init_begin;
 
 	printk(KERN_INFO "Memory: %luk/%luk available (%dk kernel code, "
@@ -802,10 +807,10 @@ void __init mem_init(void)
 		((unsigned long)&__init_end -
 		 (unsigned long)&__init_begin) >> 10,
 
-		(unsigned long)&_etext, (unsigned long)&_edata,
-		((unsigned long)&_edata - (unsigned long)&_etext) >> 10,
+		(unsigned long)&_sdata, (unsigned long)&_edata,
+		((unsigned long)&_edata - (unsigned long)&_sdata) >> 10,
 
-		(unsigned long)&_text, (unsigned long)&_etext,
+		ktla_ktva((unsigned long)&_text), ktla_ktva((unsigned long)&_etext),
 		((unsigned long)&_etext - (unsigned long)&_text) >> 10);
 
 	/*
@@ -883,6 +888,7 @@ void set_kernel_text_rw(void)
 	if (!kernel_set_to_readonly)
 		return;
 
+	start = ktla_ktva(start);
 	pr_debug("Set kernel text: %lx - %lx for read write\n",
 		 start, start+size);
 
@@ -897,6 +903,7 @@ void set_kernel_text_ro(void)
 	if (!kernel_set_to_readonly)
 		return;
 
+	start = ktla_ktva(start);
 	pr_debug("Set kernel text: %lx - %lx for read only\n",
 		 start, start+size);
 
@@ -925,6 +932,7 @@ void mark_rodata_ro(void)
 	unsigned long start = PFN_ALIGN(_text);
 	unsigned long size = PFN_ALIGN(_etext) - start;
 
+	start = ktla_ktva(start);
 	set_pages_ro(virt_to_page(start), size >> PAGE_SHIFT);
 	printk(KERN_INFO "Write protecting the kernel text: %luk\n",
 		size >> 10);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/mm/init_64.c linux-3.3.8-pax/arch/x86/mm/init_64.c
--- linux-3.3.8/arch/x86/mm/init_64.c	2012-03-19 10:38:56.688049991 +0100
+++ linux-3.3.8-pax/arch/x86/mm/init_64.c	2012-05-08 19:05:49.766884711 +0200
@@ -75,7 +75,7 @@ early_param("gbpages", parse_direct_gbpa
  * around without checking the pgd every time.
  */
 
-pteval_t __supported_pte_mask __read_mostly = ~_PAGE_IOMAP;
+pteval_t __supported_pte_mask __read_only = ~(_PAGE_NX | _PAGE_IOMAP);
 EXPORT_SYMBOL_GPL(__supported_pte_mask);
 
 int force_personality32;
@@ -108,12 +108,22 @@ void sync_global_pgds(unsigned long star
 
 	for (address = start; address <= end; address += PGDIR_SIZE) {
 		const pgd_t *pgd_ref = pgd_offset_k(address);
+
+#ifdef CONFIG_PAX_PER_CPU_PGD
+		unsigned long cpu;
+#else
 		struct page *page;
+#endif
 
 		if (pgd_none(*pgd_ref))
 			continue;
 
 		spin_lock(&pgd_lock);
+
+#ifdef CONFIG_PAX_PER_CPU_PGD
+		for (cpu = 0; cpu < nr_cpu_ids; ++cpu) {
+			pgd_t *pgd = pgd_offset_cpu(cpu, address);
+#else
 		list_for_each_entry(page, &pgd_list, lru) {
 			pgd_t *pgd;
 			spinlock_t *pgt_lock;
@@ -122,6 +132,7 @@ void sync_global_pgds(unsigned long star
 			/* the pgt_lock only for Xen */
 			pgt_lock = &pgd_page_get_mm(page)->page_table_lock;
 			spin_lock(pgt_lock);
+#endif
 
 			if (pgd_none(*pgd))
 				set_pgd(pgd, *pgd_ref);
@@ -129,7 +140,10 @@ void sync_global_pgds(unsigned long star
 				BUG_ON(pgd_page_vaddr(*pgd)
 				       != pgd_page_vaddr(*pgd_ref));
 
+#ifndef CONFIG_PAX_PER_CPU_PGD
 			spin_unlock(pgt_lock);
+#endif
+
 		}
 		spin_unlock(&pgd_lock);
 	}
@@ -162,7 +176,7 @@ static pud_t *fill_pud(pgd_t *pgd, unsig
 {
 	if (pgd_none(*pgd)) {
 		pud_t *pud = (pud_t *)spp_getpage();
-		pgd_populate(&init_mm, pgd, pud);
+		pgd_populate_kernel(&init_mm, pgd, pud);
 		if (pud != pud_offset(pgd, 0))
 			printk(KERN_ERR "PAGETABLE BUG #00! %p <-> %p\n",
 			       pud, pud_offset(pgd, 0));
@@ -174,7 +188,7 @@ static pmd_t *fill_pmd(pud_t *pud, unsig
 {
 	if (pud_none(*pud)) {
 		pmd_t *pmd = (pmd_t *) spp_getpage();
-		pud_populate(&init_mm, pud, pmd);
+		pud_populate_kernel(&init_mm, pud, pmd);
 		if (pmd != pmd_offset(pud, 0))
 			printk(KERN_ERR "PAGETABLE BUG #01! %p <-> %p\n",
 			       pmd, pmd_offset(pud, 0));
@@ -203,7 +217,9 @@ void set_pte_vaddr_pud(pud_t *pud_page,
 	pmd = fill_pmd(pud, vaddr);
 	pte = fill_pte(pmd, vaddr);
 
+	pax_open_kernel();
 	set_pte(pte, new_pte);
+	pax_close_kernel();
 
 	/*
 	 * It's enough to flush this one mapping.
@@ -262,14 +278,12 @@ static void __init __init_extra_mapping(
 		pgd = pgd_offset_k((unsigned long)__va(phys));
 		if (pgd_none(*pgd)) {
 			pud = (pud_t *) spp_getpage();
-			set_pgd(pgd, __pgd(__pa(pud) | _KERNPG_TABLE |
-						_PAGE_USER));
+			set_pgd(pgd, __pgd(__pa(pud) | _PAGE_TABLE));
 		}
 		pud = pud_offset(pgd, (unsigned long)__va(phys));
 		if (pud_none(*pud)) {
 			pmd = (pmd_t *) spp_getpage();
-			set_pud(pud, __pud(__pa(pmd) | _KERNPG_TABLE |
-						_PAGE_USER));
+			set_pud(pud, __pud(__pa(pmd) | _PAGE_TABLE));
 		}
 		pmd = pmd_offset(pud, phys);
 		BUG_ON(!pmd_none(*pmd));
@@ -330,7 +344,7 @@ static __ref void *alloc_low_page(unsign
 	if (pfn >= pgt_buf_top)
 		panic("alloc_low_page: ran out of memory");
 
-	adr = early_memremap(pfn * PAGE_SIZE, PAGE_SIZE);
+	adr = (void __force_kernel *)early_memremap(pfn * PAGE_SIZE, PAGE_SIZE);
 	clear_page(adr);
 	*phys  = pfn * PAGE_SIZE;
 	return adr;
@@ -346,7 +360,7 @@ static __ref void *map_low_page(void *vi
 
 	phys = __pa(virt);
 	left = phys & (PAGE_SIZE - 1);
-	adr = early_memremap(phys & PAGE_MASK, PAGE_SIZE);
+	adr = (void __force_kernel *)early_memremap(phys & PAGE_MASK, PAGE_SIZE);
 	adr = (void *)(((unsigned long)adr) | left);
 
 	return adr;
@@ -546,7 +560,7 @@ phys_pud_init(pud_t *pud_page, unsigned
 		unmap_low_page(pmd);
 
 		spin_lock(&init_mm.page_table_lock);
-		pud_populate(&init_mm, pud, __va(pmd_phys));
+		pud_populate_kernel(&init_mm, pud, __va(pmd_phys));
 		spin_unlock(&init_mm.page_table_lock);
 	}
 	__flush_tlb_all();
@@ -592,7 +606,7 @@ kernel_physical_mapping_init(unsigned lo
 		unmap_low_page(pud);
 
 		spin_lock(&init_mm.page_table_lock);
-		pgd_populate(&init_mm, pgd, __va(pud_phys));
+		pgd_populate_kernel(&init_mm, pgd, __va(pud_phys));
 		spin_unlock(&init_mm.page_table_lock);
 		pgd_changed = true;
 	}
@@ -684,6 +698,12 @@ void __init mem_init(void)
 
 	pci_iommu_alloc();
 
+#ifdef CONFIG_PAX_PER_CPU_PGD
+	clone_pgd_range(get_cpu_pgd(0) + KERNEL_PGD_BOUNDARY,
+			swapper_pg_dir + KERNEL_PGD_BOUNDARY,
+			KERNEL_PGD_PTRS);
+#endif
+
 	/* clear_bss() already clear the empty_zero_page */
 
 	reservedpages = 0;
@@ -844,8 +864,8 @@ int kern_addr_valid(unsigned long addr)
 static struct vm_area_struct gate_vma = {
 	.vm_start	= VSYSCALL_START,
 	.vm_end		= VSYSCALL_START + (VSYSCALL_MAPPED_PAGES * PAGE_SIZE),
-	.vm_page_prot	= PAGE_READONLY_EXEC,
-	.vm_flags	= VM_READ | VM_EXEC
+	.vm_page_prot	= PAGE_READONLY,
+	.vm_flags	= VM_READ
 };
 
 struct vm_area_struct *get_gate_vma(struct mm_struct *mm)
@@ -879,7 +899,7 @@ int in_gate_area_no_mm(unsigned long add
 
 const char *arch_vma_name(struct vm_area_struct *vma)
 {
-	if (vma->vm_mm && vma->vm_start == (long)vma->vm_mm->context.vdso)
+	if (vma->vm_mm && vma->vm_start == vma->vm_mm->context.vdso)
 		return "[vdso]";
 	if (vma == &gate_vma)
 		return "[vsyscall]";
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/mm/init.c linux-3.3.8-pax/arch/x86/mm/init.c
--- linux-3.3.8/arch/x86/mm/init.c	2012-03-19 10:38:56.688049991 +0100
+++ linux-3.3.8-pax/arch/x86/mm/init.c	2012-03-19 10:43:43.496034676 +0100
@@ -17,6 +17,7 @@
 #include <asm/tlb.h>
 #include <asm/proto.h>
 #include <asm/dma.h>		/* for MAX_DMA_PFN */
+#include <asm/desc.h>
 
 unsigned long __initdata pgt_buf_start;
 unsigned long __meminitdata pgt_buf_end;
@@ -33,7 +34,7 @@ int direct_gbpages
 static void __init find_early_table_space(unsigned long end, int use_pse,
 					  int use_gbpages)
 {
-	unsigned long puds, pmds, ptes, tables, start = 0, good_end = end;
+	unsigned long puds, pmds, ptes, tables, start = 0x100000, good_end = end;
 	phys_addr_t base;
 
 	puds = (end + PUD_SIZE - 1) >> PUD_SHIFT;
@@ -314,7 +315,13 @@ unsigned long __init_refok init_memory_m
  */
 int devmem_is_allowed(unsigned long pagenr)
 {
-	if (pagenr <= 256)
+	if (!pagenr)
+		return 1;
+#ifdef CONFIG_VM86
+	if (pagenr < (ISA_START_ADDRESS >> PAGE_SHIFT))
+		return 1;
+#endif
+	if ((ISA_START_ADDRESS >> PAGE_SHIFT) <= pagenr && pagenr < (ISA_END_ADDRESS >> PAGE_SHIFT))
 		return 1;
 	if (iomem_is_exclusive(pagenr << PAGE_SHIFT))
 		return 0;
@@ -374,6 +381,86 @@ void free_init_pages(char *what, unsigne
 
 void free_initmem(void)
 {
+
+#ifdef CONFIG_PAX_KERNEXEC
+#ifdef CONFIG_X86_32
+	/* PaX: limit KERNEL_CS to actual size */
+	unsigned long addr, limit;
+	struct desc_struct d;
+	int cpu;
+
+	limit = paravirt_enabled() ? ktva_ktla(0xffffffff) : (unsigned long)&_etext;
+	limit = (limit - 1UL) >> PAGE_SHIFT;
+
+	memset(__LOAD_PHYSICAL_ADDR + PAGE_OFFSET, POISON_FREE_INITMEM, PAGE_SIZE);
+	for (cpu = 0; cpu < nr_cpu_ids; cpu++) {
+		pack_descriptor(&d, get_desc_base(&get_cpu_gdt_table(cpu)[GDT_ENTRY_KERNEL_CS]), limit, 0x9B, 0xC);
+		write_gdt_entry(get_cpu_gdt_table(cpu), GDT_ENTRY_KERNEL_CS, &d, DESCTYPE_S);
+	}
+
+	/* PaX: make KERNEL_CS read-only */
+	addr = PFN_ALIGN(ktla_ktva((unsigned long)&_text));
+	if (!paravirt_enabled())
+		set_memory_ro(addr, (PFN_ALIGN(_sdata) - addr) >> PAGE_SHIFT);
+/*
+		for (addr = ktla_ktva((unsigned long)&_text); addr < (unsigned long)&_sdata; addr += PMD_SIZE) {
+			pgd = pgd_offset_k(addr);
+			pud = pud_offset(pgd, addr);
+			pmd = pmd_offset(pud, addr);
+			set_pmd(pmd, __pmd(pmd_val(*pmd) & ~_PAGE_RW));
+		}
+*/
+#ifdef CONFIG_X86_PAE
+	set_memory_nx(PFN_ALIGN(__init_begin), (PFN_ALIGN(__init_end) - PFN_ALIGN(__init_begin)) >> PAGE_SHIFT);
+/*
+	for (addr = (unsigned long)&__init_begin; addr < (unsigned long)&__init_end; addr += PMD_SIZE) {
+		pgd = pgd_offset_k(addr);
+		pud = pud_offset(pgd, addr);
+		pmd = pmd_offset(pud, addr);
+		set_pmd(pmd, __pmd(pmd_val(*pmd) | (_PAGE_NX & __supported_pte_mask)));
+	}
+*/
+#endif
+
+#ifdef CONFIG_MODULES
+	set_memory_4k((unsigned long)MODULES_EXEC_VADDR, (MODULES_EXEC_END - MODULES_EXEC_VADDR) >> PAGE_SHIFT);
+#endif
+
+#else
+	pgd_t *pgd;
+	pud_t *pud;
+	pmd_t *pmd;
+	unsigned long addr, end;
+
+	/* PaX: make kernel code/rodata read-only, rest non-executable */
+	for (addr = __START_KERNEL_map; addr < __START_KERNEL_map + KERNEL_IMAGE_SIZE; addr += PMD_SIZE) {
+		pgd = pgd_offset_k(addr);
+		pud = pud_offset(pgd, addr);
+		pmd = pmd_offset(pud, addr);
+		if (!pmd_present(*pmd))
+			continue;
+		if ((unsigned long)_text <= addr && addr < (unsigned long)_sdata)
+			set_pmd(pmd, __pmd(pmd_val(*pmd) & ~_PAGE_RW));
+		else
+			set_pmd(pmd, __pmd(pmd_val(*pmd) | (_PAGE_NX & __supported_pte_mask)));
+	}
+
+	addr = (unsigned long)__va(__pa(__START_KERNEL_map));
+	end = addr + KERNEL_IMAGE_SIZE;
+	for (; addr < end; addr += PMD_SIZE) {
+		pgd = pgd_offset_k(addr);
+		pud = pud_offset(pgd, addr);
+		pmd = pmd_offset(pud, addr);
+		if (!pmd_present(*pmd))
+			continue;
+		if ((unsigned long)__va(__pa(_text)) <= addr && addr < (unsigned long)__va(__pa(_sdata)))
+			set_pmd(pmd, __pmd(pmd_val(*pmd) & ~_PAGE_RW));
+	}
+#endif
+
+	flush_tlb_all();
+#endif
+
 	free_init_pages("unused kernel memory",
 			(unsigned long)(&__init_begin),
 			(unsigned long)(&__init_end));
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/mm/iomap_32.c linux-3.3.8-pax/arch/x86/mm/iomap_32.c
--- linux-3.3.8/arch/x86/mm/iomap_32.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/mm/iomap_32.c	2012-03-19 10:43:43.496034676 +0100
@@ -64,7 +64,11 @@ void *kmap_atomic_prot_pfn(unsigned long
 	type = kmap_atomic_idx_push();
 	idx = type + KM_TYPE_NR * smp_processor_id();
 	vaddr = __fix_to_virt(FIX_KMAP_BEGIN + idx);
+
+	pax_open_kernel();
 	set_pte(kmap_pte - idx, pfn_pte(pfn, prot));
+	pax_close_kernel();
+
 	arch_flush_lazy_mmu_mode();
 
 	return (void *)vaddr;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/mm/ioremap.c linux-3.3.8-pax/arch/x86/mm/ioremap.c
--- linux-3.3.8/arch/x86/mm/ioremap.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/mm/ioremap.c	2012-03-19 10:43:43.496034676 +0100
@@ -97,7 +97,7 @@ static void __iomem *__ioremap_caller(re
 	for (pfn = phys_addr >> PAGE_SHIFT; pfn <= last_pfn; pfn++) {
 		int is_ram = page_is_ram(pfn);
 
-		if (is_ram && pfn_valid(pfn) && !PageReserved(pfn_to_page(pfn)))
+		if (is_ram && pfn_valid(pfn) && (pfn >= 0x100 || !PageReserved(pfn_to_page(pfn))))
 			return NULL;
 		WARN_ON_ONCE(is_ram);
 	}
@@ -315,6 +315,9 @@ void *xlate_dev_mem_ptr(unsigned long ph
 
 	/* If page is RAM, we can use __va. Otherwise ioremap and unmap. */
 	if (page_is_ram(start >> PAGE_SHIFT))
+#ifdef CONFIG_HIGHMEM
+	if ((start >> PAGE_SHIFT) < max_low_pfn)
+#endif
 		return __va(phys);
 
 	addr = (void __force *)ioremap_cache(start, PAGE_SIZE);
@@ -344,7 +347,7 @@ static int __init early_ioremap_debug_se
 early_param("early_ioremap_debug", early_ioremap_debug_setup);
 
 static __initdata int after_paging_init;
-static pte_t bm_pte[PAGE_SIZE/sizeof(pte_t)] __page_aligned_bss;
+static pte_t bm_pte[PAGE_SIZE/sizeof(pte_t)] __read_only __aligned(PAGE_SIZE);
 
 static inline pmd_t * __init early_ioremap_pmd(unsigned long addr)
 {
@@ -381,8 +384,7 @@ void __init early_ioremap_init(void)
 		slot_virt[i] = __fix_to_virt(FIX_BTMAP_BEGIN - NR_FIX_BTMAPS*i);
 
 	pmd = early_ioremap_pmd(fix_to_virt(FIX_BTMAP_BEGIN));
-	memset(bm_pte, 0, sizeof(bm_pte));
-	pmd_populate_kernel(&init_mm, pmd, bm_pte);
+	pmd_populate_user(&init_mm, pmd, bm_pte);
 
 	/*
 	 * The boot-ioremap range spans multiple pmds, for which
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/mm/kmemcheck/kmemcheck.c linux-3.3.8-pax/arch/x86/mm/kmemcheck/kmemcheck.c
--- linux-3.3.8/arch/x86/mm/kmemcheck/kmemcheck.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/mm/kmemcheck/kmemcheck.c	2012-03-19 10:43:43.500034676 +0100
@@ -622,9 +622,9 @@ bool kmemcheck_fault(struct pt_regs *reg
 	 * memory (e.g. tracked pages)? For now, we need this to avoid
 	 * invoking kmemcheck for PnP BIOS calls.
 	 */
-	if (regs->flags & X86_VM_MASK)
+	if (v8086_mode(regs))
 		return false;
-	if (regs->cs != __KERNEL_CS)
+	if (regs->cs != __KERNEL_CS && regs->cs != __KERNEXEC_KERNEL_CS)
 		return false;
 
 	pte = kmemcheck_pte_lookup(address);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/mm/mmap.c linux-3.3.8-pax/arch/x86/mm/mmap.c
--- linux-3.3.8/arch/x86/mm/mmap.c	2012-03-19 10:38:56.692049991 +0100
+++ linux-3.3.8-pax/arch/x86/mm/mmap.c	2012-03-19 10:43:43.500034676 +0100
@@ -52,7 +52,7 @@ static unsigned int stack_maxrandom_size
  * Leave an at least ~128 MB hole with possible stack randomization.
  */
 #define MIN_GAP (128*1024*1024UL + stack_maxrandom_size())
-#define MAX_GAP (TASK_SIZE/6*5)
+#define MAX_GAP (pax_task_size/6*5)
 
 static int mmap_is_legacy(void)
 {
@@ -82,27 +82,40 @@ static unsigned long mmap_rnd(void)
 	return rnd << PAGE_SHIFT;
 }
 
-static unsigned long mmap_base(void)
+static unsigned long mmap_base(struct mm_struct *mm)
 {
 	unsigned long gap = rlimit(RLIMIT_STACK);
+	unsigned long pax_task_size = TASK_SIZE;
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (mm->pax_flags & MF_PAX_SEGMEXEC)
+		pax_task_size = SEGMEXEC_TASK_SIZE;
+#endif
 
 	if (gap < MIN_GAP)
 		gap = MIN_GAP;
 	else if (gap > MAX_GAP)
 		gap = MAX_GAP;
 
-	return PAGE_ALIGN(TASK_SIZE - gap - mmap_rnd());
+	return PAGE_ALIGN(pax_task_size - gap - mmap_rnd());
 }
 
 /*
  * Bottom-up (legacy) layout on X86_32 did not support randomization, X86_64
  * does, but not when emulating X86_32
  */
-static unsigned long mmap_legacy_base(void)
+static unsigned long mmap_legacy_base(struct mm_struct *mm)
 {
-	if (mmap_is_ia32())
+	if (mmap_is_ia32()) {
+
+#ifdef CONFIG_PAX_SEGMEXEC
+		if (mm->pax_flags & MF_PAX_SEGMEXEC)
+			return SEGMEXEC_TASK_UNMAPPED_BASE;
+		else
+#endif
+
 		return TASK_UNMAPPED_BASE;
-	else
+	} else
 		return TASK_UNMAPPED_BASE + mmap_rnd();
 }
 
@@ -113,11 +126,23 @@ static unsigned long mmap_legacy_base(vo
 void arch_pick_mmap_layout(struct mm_struct *mm)
 {
 	if (mmap_is_legacy()) {
-		mm->mmap_base = mmap_legacy_base();
+		mm->mmap_base = mmap_legacy_base(mm);
+
+#ifdef CONFIG_PAX_RANDMMAP
+		if (mm->pax_flags & MF_PAX_RANDMMAP)
+			mm->mmap_base += mm->delta_mmap;
+#endif
+
 		mm->get_unmapped_area = arch_get_unmapped_area;
 		mm->unmap_area = arch_unmap_area;
 	} else {
-		mm->mmap_base = mmap_base();
+		mm->mmap_base = mmap_base(mm);
+
+#ifdef CONFIG_PAX_RANDMMAP
+		if (mm->pax_flags & MF_PAX_RANDMMAP)
+			mm->mmap_base -= mm->delta_mmap + mm->delta_stack;
+#endif
+
 		mm->get_unmapped_area = arch_get_unmapped_area_topdown;
 		mm->unmap_area = arch_unmap_area_topdown;
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/mm/mmio-mod.c linux-3.3.8-pax/arch/x86/mm/mmio-mod.c
--- linux-3.3.8/arch/x86/mm/mmio-mod.c	2012-03-19 10:38:56.692049991 +0100
+++ linux-3.3.8-pax/arch/x86/mm/mmio-mod.c	2012-03-19 10:43:43.500034676 +0100
@@ -194,7 +194,7 @@ static void pre(struct kmmio_probe *p, s
 		break;
 	default:
 		{
-			unsigned char *ip = (unsigned char *)instptr;
+			unsigned char *ip = (unsigned char *)ktla_ktva(instptr);
 			my_trace->opcode = MMIO_UNKNOWN_OP;
 			my_trace->width = 0;
 			my_trace->value = (*ip) << 16 | *(ip + 1) << 8 |
@@ -234,7 +234,7 @@ static void post(struct kmmio_probe *p,
 static void ioremap_trace_core(resource_size_t offset, unsigned long size,
 							void __iomem *addr)
 {
-	static atomic_t next_id;
+	static atomic_unchecked_t next_id;
 	struct remap_trace *trace = kmalloc(sizeof(*trace), GFP_KERNEL);
 	/* These are page-unaligned. */
 	struct mmiotrace_map map = {
@@ -258,7 +258,7 @@ static void ioremap_trace_core(resource_
 			.private = trace
 		},
 		.phys = offset,
-		.id = atomic_inc_return(&next_id)
+		.id = atomic_inc_return_unchecked(&next_id)
 	};
 	map.map_id = trace->id;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/mm/pageattr.c linux-3.3.8-pax/arch/x86/mm/pageattr.c
--- linux-3.3.8/arch/x86/mm/pageattr.c	2012-03-19 10:38:56.696049991 +0100
+++ linux-3.3.8-pax/arch/x86/mm/pageattr.c	2012-03-19 10:43:43.500034676 +0100
@@ -261,7 +261,7 @@ static inline pgprot_t static_protection
 	 */
 #ifdef CONFIG_PCI_BIOS
 	if (pcibios_enabled && within(pfn, BIOS_BEGIN >> PAGE_SHIFT, BIOS_END >> PAGE_SHIFT))
-		pgprot_val(forbidden) |= _PAGE_NX;
+		pgprot_val(forbidden) |= _PAGE_NX & __supported_pte_mask;
 #endif
 
 	/*
@@ -269,9 +269,10 @@ static inline pgprot_t static_protection
 	 * Does not cover __inittext since that is gone later on. On
 	 * 64bit we do not enforce !NX on the low mapping
 	 */
-	if (within(address, (unsigned long)_text, (unsigned long)_etext))
-		pgprot_val(forbidden) |= _PAGE_NX;
+	if (within(address, ktla_ktva((unsigned long)_text), ktla_ktva((unsigned long)_etext)))
+		pgprot_val(forbidden) |= _PAGE_NX & __supported_pte_mask;
 
+#ifdef CONFIG_DEBUG_RODATA
 	/*
 	 * The .rodata section needs to be read-only. Using the pfn
 	 * catches all aliases.
@@ -279,6 +280,7 @@ static inline pgprot_t static_protection
 	if (within(pfn, __pa((unsigned long)__start_rodata) >> PAGE_SHIFT,
 		   __pa((unsigned long)__end_rodata) >> PAGE_SHIFT))
 		pgprot_val(forbidden) |= _PAGE_RW;
+#endif
 
 #if defined(CONFIG_X86_64) && defined(CONFIG_DEBUG_RODATA)
 	/*
@@ -317,6 +319,13 @@ static inline pgprot_t static_protection
 	}
 #endif
 
+#ifdef CONFIG_PAX_KERNEXEC
+	if (within(pfn, __pa((unsigned long)&_text), __pa((unsigned long)&_sdata))) {
+		pgprot_val(forbidden) |= _PAGE_RW;
+		pgprot_val(forbidden) |= _PAGE_NX & __supported_pte_mask;
+	}
+#endif
+
 	prot = __pgprot(pgprot_val(prot) & ~pgprot_val(forbidden));
 
 	return prot;
@@ -369,23 +378,37 @@ EXPORT_SYMBOL_GPL(lookup_address);
 static void __set_pmd_pte(pte_t *kpte, unsigned long address, pte_t pte)
 {
 	/* change init_mm */
+	pax_open_kernel();
 	set_pte_atomic(kpte, pte);
+
 #ifdef CONFIG_X86_32
 	if (!SHARED_KERNEL_PMD) {
+
+#ifdef CONFIG_PAX_PER_CPU_PGD
+		unsigned long cpu;
+#else
 		struct page *page;
+#endif
 
+#ifdef CONFIG_PAX_PER_CPU_PGD
+		for (cpu = 0; cpu < nr_cpu_ids; ++cpu) {
+			pgd_t *pgd = get_cpu_pgd(cpu);
+#else
 		list_for_each_entry(page, &pgd_list, lru) {
-			pgd_t *pgd;
+			pgd_t *pgd = (pgd_t *)page_address(page);
+#endif
+
 			pud_t *pud;
 			pmd_t *pmd;
 
-			pgd = (pgd_t *)page_address(page) + pgd_index(address);
+			pgd += pgd_index(address);
 			pud = pud_offset(pgd, address);
 			pmd = pmd_offset(pud, address);
 			set_pte_atomic((pte_t *)pmd, pte);
 		}
 	}
 #endif
+	pax_close_kernel();
 }
 
 static int
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/mm/pageattr-test.c linux-3.3.8-pax/arch/x86/mm/pageattr-test.c
--- linux-3.3.8/arch/x86/mm/pageattr-test.c	2011-10-24 12:48:26.371091767 +0200
+++ linux-3.3.8-pax/arch/x86/mm/pageattr-test.c	2012-03-19 10:43:43.504034677 +0100
@@ -36,7 +36,7 @@ enum {
 
 static int pte_testbit(pte_t pte)
 {
-	return pte_flags(pte) & _PAGE_UNUSED1;
+	return pte_flags(pte) & _PAGE_CPA_TEST;
 }
 
 struct split_state {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/mm/pat.c linux-3.3.8-pax/arch/x86/mm/pat.c
--- linux-3.3.8/arch/x86/mm/pat.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/mm/pat.c	2012-03-19 10:43:43.504034677 +0100
@@ -361,7 +361,7 @@ int free_memtype(u64 start, u64 end)
 
 	if (!entry) {
 		printk(KERN_INFO "%s:%d freeing invalid memtype %Lx-%Lx\n",
-			current->comm, current->pid, start, end);
+			current->comm, task_pid_nr(current), start, end);
 		return -EINVAL;
 	}
 
@@ -492,8 +492,8 @@ static inline int range_is_allowed(unsig
 	while (cursor < to) {
 		if (!devmem_is_allowed(pfn)) {
 			printk(KERN_INFO
-		"Program %s tried to access /dev/mem between %Lx->%Lx.\n",
-				current->comm, from, to);
+		"Program %s tried to access /dev/mem between %Lx->%Lx (%Lx).\n",
+				current->comm, from, to, cursor);
 			return 0;
 		}
 		cursor += PAGE_SIZE;
@@ -557,7 +557,7 @@ int kernel_map_sync_memtype(u64 base, un
 		printk(KERN_INFO
 			"%s:%d ioremap_change_attr failed %s "
 			"for %Lx-%Lx\n",
-			current->comm, current->pid,
+			current->comm, task_pid_nr(current),
 			cattr_name(flags),
 			base, (unsigned long long)(base + size));
 		return -EINVAL;
@@ -593,7 +593,7 @@ static int reserve_pfn_range(u64 paddr,
 		if (want_flags != flags) {
 			printk(KERN_WARNING
 			"%s:%d map pfn RAM range req %s for %Lx-%Lx, got %s\n",
-				current->comm, current->pid,
+				current->comm, task_pid_nr(current),
 				cattr_name(want_flags),
 				(unsigned long long)paddr,
 				(unsigned long long)(paddr + size),
@@ -615,7 +615,7 @@ static int reserve_pfn_range(u64 paddr,
 			free_memtype(paddr, paddr + size);
 			printk(KERN_ERR "%s:%d map pfn expected mapping type %s"
 				" for %Lx-%Lx, got %s\n",
-				current->comm, current->pid,
+				current->comm, task_pid_nr(current),
 				cattr_name(want_flags),
 				(unsigned long long)paddr,
 				(unsigned long long)(paddr + size),
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/mm/pf_in.c linux-3.3.8-pax/arch/x86/mm/pf_in.c
--- linux-3.3.8/arch/x86/mm/pf_in.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/mm/pf_in.c	2012-03-19 10:43:43.504034677 +0100
@@ -148,7 +148,7 @@ enum reason_type get_ins_type(unsigned l
 	int i;
 	enum reason_type rv = OTHERS;
 
-	p = (unsigned char *)ins_addr;
+	p = (unsigned char *)ktla_ktva(ins_addr);
 	p += skip_prefix(p, &prf);
 	p += get_opcode(p, &opcode);
 
@@ -168,7 +168,7 @@ static unsigned int get_ins_reg_width(un
 	struct prefix_bits prf;
 	int i;
 
-	p = (unsigned char *)ins_addr;
+	p = (unsigned char *)ktla_ktva(ins_addr);
 	p += skip_prefix(p, &prf);
 	p += get_opcode(p, &opcode);
 
@@ -191,7 +191,7 @@ unsigned int get_ins_mem_width(unsigned
 	struct prefix_bits prf;
 	int i;
 
-	p = (unsigned char *)ins_addr;
+	p = (unsigned char *)ktla_ktva(ins_addr);
 	p += skip_prefix(p, &prf);
 	p += get_opcode(p, &opcode);
 
@@ -415,7 +415,7 @@ unsigned long get_ins_reg_val(unsigned l
 	struct prefix_bits prf;
 	int i;
 
-	p = (unsigned char *)ins_addr;
+	p = (unsigned char *)ktla_ktva(ins_addr);
 	p += skip_prefix(p, &prf);
 	p += get_opcode(p, &opcode);
 	for (i = 0; i < ARRAY_SIZE(reg_rop); i++)
@@ -470,7 +470,7 @@ unsigned long get_ins_imm_val(unsigned l
 	struct prefix_bits prf;
 	int i;
 
-	p = (unsigned char *)ins_addr;
+	p = (unsigned char *)ktla_ktva(ins_addr);
 	p += skip_prefix(p, &prf);
 	p += get_opcode(p, &opcode);
 	for (i = 0; i < ARRAY_SIZE(imm_wop); i++)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/mm/pgtable_32.c linux-3.3.8-pax/arch/x86/mm/pgtable_32.c
--- linux-3.3.8/arch/x86/mm/pgtable_32.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/mm/pgtable_32.c	2012-03-19 10:43:43.504034677 +0100
@@ -48,10 +48,13 @@ void set_pte_vaddr(unsigned long vaddr,
 		return;
 	}
 	pte = pte_offset_kernel(pmd, vaddr);
+
+	pax_open_kernel();
 	if (pte_val(pteval))
 		set_pte_at(&init_mm, vaddr, pte, pteval);
 	else
 		pte_clear(&init_mm, vaddr, pte);
+	pax_close_kernel();
 
 	/*
 	 * It's enough to flush this one mapping.
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/mm/pgtable.c linux-3.3.8-pax/arch/x86/mm/pgtable.c
--- linux-3.3.8/arch/x86/mm/pgtable.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/mm/pgtable.c	2012-05-26 01:09:59.892791845 +0200
@@ -84,10 +84,64 @@ static inline void pgd_list_del(pgd_t *p
 	list_del(&page->lru);
 }
 
-#define UNSHARED_PTRS_PER_PGD				\
-	(SHARED_KERNEL_PMD ? KERNEL_PGD_BOUNDARY : PTRS_PER_PGD)
+#if defined(CONFIG_X86_64) && defined(CONFIG_PAX_MEMORY_UDEREF)
+pgdval_t clone_pgd_mask __read_only = ~_PAGE_PRESENT;
 
+void __shadow_user_pgds(pgd_t *dst, const pgd_t *src)
+{
+	unsigned int count = USER_PGD_PTRS;
+
+	while (count--)
+		*dst++ = __pgd((pgd_val(*src++) | (_PAGE_NX & __supported_pte_mask)) & ~_PAGE_USER);
+}
+#endif
+
+#ifdef CONFIG_PAX_PER_CPU_PGD
+void __clone_user_pgds(pgd_t *dst, const pgd_t *src)
+{
+	unsigned int count = USER_PGD_PTRS;
+
+	while (count--) {
+		pgd_t pgd;
+
+#ifdef CONFIG_X86_64
+		pgd = __pgd(pgd_val(*src++) | _PAGE_USER);
+#else
+		pgd = *src++;
+#endif
 
+#if defined(CONFIG_X86_64) && defined(CONFIG_PAX_MEMORY_UDEREF)
+		pgd = __pgd(pgd_val(pgd) & clone_pgd_mask);
+#endif
+
+		*dst++ = pgd;
+	}
+
+}
+#endif
+
+#ifdef CONFIG_X86_64
+#define pxd_t				pud_t
+#define pyd_t				pgd_t
+#define paravirt_release_pxd(pfn)	paravirt_release_pud(pfn)
+#define pxd_free(mm, pud)		pud_free((mm), (pud))
+#define pyd_populate(mm, pgd, pud)	pgd_populate((mm), (pgd), (pud))
+#define pyd_offset(mm, address)		pgd_offset((mm), (address))
+#define PYD_SIZE			PGDIR_SIZE
+#else
+#define pxd_t				pmd_t
+#define pyd_t				pud_t
+#define paravirt_release_pxd(pfn)	paravirt_release_pmd(pfn)
+#define pxd_free(mm, pud)		pmd_free((mm), (pud))
+#define pyd_populate(mm, pgd, pud)	pud_populate((mm), (pgd), (pud))
+#define pyd_offset(mm, address)		pud_offset((mm), (address))
+#define PYD_SIZE			PUD_SIZE
+#endif
+
+#ifdef CONFIG_PAX_PER_CPU_PGD
+static inline void pgd_ctor(struct mm_struct *mm, pgd_t *pgd) {}
+static inline void pgd_dtor(pgd_t *pgd) {}
+#else
 static void pgd_set_mm(pgd_t *pgd, struct mm_struct *mm)
 {
 	BUILD_BUG_ON(sizeof(virt_to_page(pgd)->index) < sizeof(mm));
@@ -128,6 +182,7 @@ static void pgd_dtor(pgd_t *pgd)
 	pgd_list_del(pgd);
 	spin_unlock(&pgd_lock);
 }
+#endif
 
 /*
  * List of all pgd's needed for non-PAE so it can invalidate entries
@@ -140,7 +195,7 @@ static void pgd_dtor(pgd_t *pgd)
  * -- wli
  */
 
-#ifdef CONFIG_X86_PAE
+#if defined(CONFIG_X86_32) && defined(CONFIG_X86_PAE)
 /*
  * In PAE mode, we need to do a cr3 reload (=tlb flush) when
  * updating the top-level pagetable entries to guarantee the
@@ -152,7 +207,7 @@ static void pgd_dtor(pgd_t *pgd)
  * not shared between pagetables (!SHARED_KERNEL_PMDS), we allocate
  * and initialize the kernel pmds here.
  */
-#define PREALLOCATED_PMDS	UNSHARED_PTRS_PER_PGD
+#define PREALLOCATED_PXDS	(SHARED_KERNEL_PMD ? KERNEL_PGD_BOUNDARY : PTRS_PER_PGD)
 
 void pud_populate(struct mm_struct *mm, pud_t *pudp, pmd_t *pmd)
 {
@@ -170,36 +225,38 @@ void pud_populate(struct mm_struct *mm,
 	 */
 	flush_tlb_mm(mm);
 }
+#elif defined(CONFIG_X86_64) && defined(CONFIG_PAX_PER_CPU_PGD)
+#define PREALLOCATED_PXDS	USER_PGD_PTRS
 #else  /* !CONFIG_X86_PAE */
 
 /* No need to prepopulate any pagetable entries in non-PAE modes. */
-#define PREALLOCATED_PMDS	0
+#define PREALLOCATED_PXDS	0
 
 #endif	/* CONFIG_X86_PAE */
 
-static void free_pmds(pmd_t *pmds[])
+static void free_pxds(pxd_t *pxds[])
 {
 	int i;
 
-	for(i = 0; i < PREALLOCATED_PMDS; i++)
-		if (pmds[i])
-			free_page((unsigned long)pmds[i]);
+	for(i = 0; i < PREALLOCATED_PXDS; i++)
+		if (pxds[i])
+			free_page((unsigned long)pxds[i]);
 }
 
-static int preallocate_pmds(pmd_t *pmds[])
+static int preallocate_pxds(pxd_t *pxds[])
 {
 	int i;
 	bool failed = false;
 
-	for(i = 0; i < PREALLOCATED_PMDS; i++) {
-		pmd_t *pmd = (pmd_t *)__get_free_page(PGALLOC_GFP);
-		if (pmd == NULL)
+	for(i = 0; i < PREALLOCATED_PXDS; i++) {
+		pxd_t *pxd = (pxd_t *)__get_free_page(PGALLOC_GFP);
+		if (pxd == NULL)
 			failed = true;
-		pmds[i] = pmd;
+		pxds[i] = pxd;
 	}
 
 	if (failed) {
-		free_pmds(pmds);
+		free_pxds(pxds);
 		return -ENOMEM;
 	}
 
@@ -212,51 +269,55 @@ static int preallocate_pmds(pmd_t *pmds[
  * preallocate which never got a corresponding vma will need to be
  * freed manually.
  */
-static void pgd_mop_up_pmds(struct mm_struct *mm, pgd_t *pgdp)
+static void pgd_mop_up_pxds(struct mm_struct *mm, pgd_t *pgdp)
 {
 	int i;
 
-	for(i = 0; i < PREALLOCATED_PMDS; i++) {
+	for(i = 0; i < PREALLOCATED_PXDS; i++) {
 		pgd_t pgd = pgdp[i];
 
 		if (pgd_val(pgd) != 0) {
-			pmd_t *pmd = (pmd_t *)pgd_page_vaddr(pgd);
+			pxd_t *pxd = (pxd_t *)pgd_page_vaddr(pgd);
 
-			pgdp[i] = native_make_pgd(0);
+			set_pgd(pgdp + i, native_make_pgd(0));
 
-			paravirt_release_pmd(pgd_val(pgd) >> PAGE_SHIFT);
-			pmd_free(mm, pmd);
+			paravirt_release_pxd(pgd_val(pgd) >> PAGE_SHIFT);
+			pxd_free(mm, pxd);
 		}
 	}
 }
 
-static void pgd_prepopulate_pmd(struct mm_struct *mm, pgd_t *pgd, pmd_t *pmds[])
+static void pgd_prepopulate_pxd(struct mm_struct *mm, pgd_t *pgd, pxd_t *pxds[])
 {
-	pud_t *pud;
+	pyd_t *pyd;
 	unsigned long addr;
 	int i;
 
-	if (PREALLOCATED_PMDS == 0) /* Work around gcc-3.4.x bug */
+	if (PREALLOCATED_PXDS == 0) /* Work around gcc-3.4.x bug */
 		return;
 
-	pud = pud_offset(pgd, 0);
-
- 	for (addr = i = 0; i < PREALLOCATED_PMDS;
-	     i++, pud++, addr += PUD_SIZE) {
-		pmd_t *pmd = pmds[i];
+#ifdef CONFIG_X86_64
+	pyd = pyd_offset(mm, 0L);
+#else
+	pyd = pyd_offset(pgd, 0L);
+#endif
+
+ 	for (addr = i = 0; i < PREALLOCATED_PXDS;
+	     i++, pyd++, addr += PYD_SIZE) {
+		pxd_t *pxd = pxds[i];
 
 		if (i >= KERNEL_PGD_BOUNDARY)
-			memcpy(pmd, (pmd_t *)pgd_page_vaddr(swapper_pg_dir[i]),
-			       sizeof(pmd_t) * PTRS_PER_PMD);
+			memcpy(pxd, (pxd_t *)pgd_page_vaddr(swapper_pg_dir[i]),
+			       sizeof(pxd_t) * PTRS_PER_PMD);
 
-		pud_populate(mm, pud, pmd);
+		pyd_populate(mm, pyd, pxd);
 	}
 }
 
 pgd_t *pgd_alloc(struct mm_struct *mm)
 {
 	pgd_t *pgd;
-	pmd_t *pmds[PREALLOCATED_PMDS];
+	pxd_t *pxds[PREALLOCATED_PXDS];
 
 	pgd = (pgd_t *)__get_free_page(PGALLOC_GFP);
 
@@ -265,11 +326,11 @@ pgd_t *pgd_alloc(struct mm_struct *mm)
 
 	mm->pgd = pgd;
 
-	if (preallocate_pmds(pmds) != 0)
+	if (preallocate_pxds(pxds) != 0)
 		goto out_free_pgd;
 
 	if (paravirt_pgd_alloc(mm) != 0)
-		goto out_free_pmds;
+		goto out_free_pxds;
 
 	/*
 	 * Make sure that pre-populating the pmds is atomic with
@@ -279,14 +340,14 @@ pgd_t *pgd_alloc(struct mm_struct *mm)
 	spin_lock(&pgd_lock);
 
 	pgd_ctor(mm, pgd);
-	pgd_prepopulate_pmd(mm, pgd, pmds);
+	pgd_prepopulate_pxd(mm, pgd, pxds);
 
 	spin_unlock(&pgd_lock);
 
 	return pgd;
 
-out_free_pmds:
-	free_pmds(pmds);
+out_free_pxds:
+	free_pxds(pxds);
 out_free_pgd:
 	free_page((unsigned long)pgd);
 out:
@@ -295,7 +356,7 @@ out:
 
 void pgd_free(struct mm_struct *mm, pgd_t *pgd)
 {
-	pgd_mop_up_pmds(mm, pgd);
+	pgd_mop_up_pxds(mm, pgd);
 	pgd_dtor(pgd);
 	paravirt_pgd_free(mm, pgd);
 	free_page((unsigned long)pgd);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/mm/setup_nx.c linux-3.3.8-pax/arch/x86/mm/setup_nx.c
--- linux-3.3.8/arch/x86/mm/setup_nx.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/mm/setup_nx.c	2012-03-19 10:43:43.508034678 +0100
@@ -5,8 +5,10 @@
 #include <asm/pgtable.h>
 #include <asm/proto.h>
 
+#if defined(CONFIG_X86_64) || defined(CONFIG_X86_PAE)
 static int disable_nx __cpuinitdata;
 
+#ifndef CONFIG_PAX_PAGEEXEC
 /*
  * noexec = on|off
  *
@@ -28,12 +30,17 @@ static int __init noexec_setup(char *str
 	return 0;
 }
 early_param("noexec", noexec_setup);
+#endif
+
+#endif
 
 void __cpuinit x86_configure_nx(void)
 {
+#if defined(CONFIG_X86_64) || defined(CONFIG_X86_PAE)
 	if (cpu_has_nx && !disable_nx)
 		__supported_pte_mask |= _PAGE_NX;
 	else
+#endif
 		__supported_pte_mask &= ~_PAGE_NX;
 }
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/mm/tlb.c linux-3.3.8-pax/arch/x86/mm/tlb.c
--- linux-3.3.8/arch/x86/mm/tlb.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/mm/tlb.c	2012-03-19 10:43:43.508034678 +0100
@@ -65,7 +65,11 @@ void leave_mm(int cpu)
 		BUG();
 	cpumask_clear_cpu(cpu,
 			  mm_cpumask(percpu_read(cpu_tlbstate.active_mm)));
+
+#ifndef CONFIG_PAX_PER_CPU_PGD
 	load_cr3(swapper_pg_dir);
+#endif
+
 }
 EXPORT_SYMBOL_GPL(leave_mm);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/net/bpf_jit_comp.c linux-3.3.8-pax/arch/x86/net/bpf_jit_comp.c
--- linux-3.3.8/arch/x86/net/bpf_jit_comp.c	2012-04-15 15:08:28.914606209 +0200
+++ linux-3.3.8-pax/arch/x86/net/bpf_jit_comp.c	2012-04-15 15:08:34.530605726 +0200
@@ -117,6 +117,10 @@ static inline void bpf_flush_icache(void
 	set_fs(old_fs);
 }
 
+struct bpf_jit_work {
+	struct work_struct work;
+	void *image;
+};
 
 void bpf_jit_compile(struct sk_filter *fp)
 {
@@ -141,6 +145,10 @@ void bpf_jit_compile(struct sk_filter *f
 	if (addrs == NULL)
 		return;
 
+	fp->work = kmalloc(sizeof(*fp->work), GFP_KERNEL);
+	if (!fp->work)
+		goto out;
+
 	/* Before first pass, make a rough estimation of addrs[]
 	 * each bpf instruction is translated to less than 64 bytes
 	 */
@@ -477,7 +485,7 @@ void bpf_jit_compile(struct sk_filter *f
 common_load:			seen |= SEEN_DATAREF;
 				if ((int)K < 0) {
 					/* Abort the JIT because __load_pointer() is needed. */
-					goto out;
+					goto error;
 				}
 				t_offset = func - (image + addrs[i]);
 				EMIT1_off32(0xbe, K); /* mov imm32,%esi */
@@ -492,7 +500,7 @@ common_load:			seen |= SEEN_DATAREF;
 			case BPF_S_LDX_B_MSH:
 				if ((int)K < 0) {
 					/* Abort the JIT because __load_pointer() is needed. */
-					goto out;
+					goto error;
 				}
 				seen |= SEEN_DATAREF | SEEN_XREG;
 				t_offset = sk_load_byte_msh - (image + addrs[i]);
@@ -582,17 +590,18 @@ cond_branch:			f_offset = addrs[i + filt
 				break;
 			default:
 				/* hmm, too complex filter, give up with jit compiler */
-				goto out;
+				goto error;
 			}
 			ilen = prog - temp;
 			if (image) {
 				if (unlikely(proglen + ilen > oldproglen)) {
 					pr_err("bpb_jit_compile fatal error\n");
-					kfree(addrs);
-					module_free(NULL, image);
-					return;
+					module_free_exec(NULL, image);
+					goto error;
 				}
+				pax_open_kernel();
 				memcpy(image + proglen, temp, ilen);
+				pax_close_kernel();
 			}
 			proglen += ilen;
 			addrs[i] = proglen;
@@ -613,11 +622,9 @@ cond_branch:			f_offset = addrs[i + filt
 			break;
 		}
 		if (proglen == oldproglen) {
-			image = module_alloc(max_t(unsigned int,
-						   proglen,
-						   sizeof(struct work_struct)));
+			image = module_alloc_exec(proglen);
 			if (!image)
-				goto out;
+				goto error;
 		}
 		oldproglen = proglen;
 	}
@@ -633,7 +640,10 @@ cond_branch:			f_offset = addrs[i + filt
 		bpf_flush_icache(image, image + proglen);
 
 		fp->bpf_func = (void *)image;
-	}
+	} else
+error:
+		kfree(fp->work);
+
 out:
 	kfree(addrs);
 	return;
@@ -641,18 +651,20 @@ out:
 
 static void jit_free_defer(struct work_struct *arg)
 {
-	module_free(NULL, arg);
+	module_free_exec(NULL, ((struct bpf_jit_work *)arg)->image);
+	kfree(arg);
 }
 
 /* run from softirq, we must use a work_struct to call
- * module_free() from process context
+ * module_free_exec() from process context
  */
 void bpf_jit_free(struct sk_filter *fp)
 {
 	if (fp->bpf_func != sk_run_filter) {
-		struct work_struct *work = (struct work_struct *)fp->bpf_func;
+		struct work_struct *work = &fp->work->work;
 
 		INIT_WORK(work, jit_free_defer);
+		fp->work->image = fp->bpf_func;
 		schedule_work(work);
 	}
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/net/bpf_jit.S linux-3.3.8-pax/arch/x86/net/bpf_jit.S
--- linux-3.3.8/arch/x86/net/bpf_jit.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/net/bpf_jit.S	2012-03-19 10:43:43.508034678 +0100
@@ -9,6 +9,7 @@
  */
 #include <linux/linkage.h>
 #include <asm/dwarf2.h>
+#include <asm/alternative-asm.h>
 
 /*
  * Calling convention :
@@ -35,6 +36,7 @@ sk_load_word:
 	jle	bpf_slow_path_word
 	mov     (SKBDATA,%rsi),%eax
 	bswap   %eax  			/* ntohl() */
+	pax_force_retaddr
 	ret
 
 
@@ -53,6 +55,7 @@ sk_load_half:
 	jle	bpf_slow_path_half
 	movzwl	(SKBDATA,%rsi),%eax
 	rol	$8,%ax			# ntohs()
+	pax_force_retaddr
 	ret
 
 sk_load_byte_ind:
@@ -66,6 +69,7 @@ sk_load_byte:
 	cmp	%esi,%r9d   /* if (offset >= hlen) goto bpf_slow_path_byte */
 	jle	bpf_slow_path_byte
 	movzbl	(SKBDATA,%rsi),%eax
+	pax_force_retaddr
 	ret
 
 /**
@@ -82,6 +86,7 @@ ENTRY(sk_load_byte_msh)
 	movzbl	(SKBDATA,%rsi),%ebx
 	and	$15,%bl
 	shl	$2,%bl
+	pax_force_retaddr
 	ret
 	CFI_ENDPROC
 ENDPROC(sk_load_byte_msh)
@@ -91,6 +96,7 @@ bpf_error:
 	xor		%eax,%eax
 	mov		-8(%rbp),%rbx
 	leaveq
+	pax_force_retaddr
 	ret
 
 /* rsi contains offset and can be scratched */
@@ -113,6 +119,7 @@ bpf_slow_path_word:
 	js	bpf_error
 	mov	-12(%rbp),%eax
 	bswap	%eax
+	pax_force_retaddr
 	ret
 
 bpf_slow_path_half:
@@ -121,12 +128,14 @@ bpf_slow_path_half:
 	mov	-12(%rbp),%ax
 	rol	$8,%ax
 	movzwl	%ax,%eax
+	pax_force_retaddr
 	ret
 
 bpf_slow_path_byte:
 	bpf_slow_path_common(1)
 	js	bpf_error
 	movzbl	-12(%rbp),%eax
+	pax_force_retaddr
 	ret
 
 bpf_slow_path_byte_msh:
@@ -137,4 +146,5 @@ bpf_slow_path_byte_msh:
 	and	$15,%al
 	shl	$2,%al
 	xchg	%eax,%ebx
+	pax_force_retaddr
 	ret
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/oprofile/backtrace.c linux-3.3.8-pax/arch/x86/oprofile/backtrace.c
--- linux-3.3.8/arch/x86/oprofile/backtrace.c	2011-10-24 12:48:26.371091767 +0200
+++ linux-3.3.8-pax/arch/x86/oprofile/backtrace.c	2012-03-19 10:43:43.512034678 +0100
@@ -46,11 +46,11 @@ dump_user_backtrace_32(struct stack_fram
 	struct stack_frame_ia32 *fp;
 	unsigned long bytes;
 
-	bytes = copy_from_user_nmi(bufhead, head, sizeof(bufhead));
+	bytes = copy_from_user_nmi(bufhead, (const char __force_user *)head, sizeof(bufhead));
 	if (bytes != sizeof(bufhead))
 		return NULL;
 
-	fp = (struct stack_frame_ia32 *) compat_ptr(bufhead[0].next_frame);
+	fp = (struct stack_frame_ia32 __force_kernel *) compat_ptr(bufhead[0].next_frame);
 
 	oprofile_add_trace(bufhead[0].return_address);
 
@@ -92,7 +92,7 @@ static struct stack_frame *dump_user_bac
 	struct stack_frame bufhead[2];
 	unsigned long bytes;
 
-	bytes = copy_from_user_nmi(bufhead, head, sizeof(bufhead));
+	bytes = copy_from_user_nmi(bufhead, (const char __force_user *)head, sizeof(bufhead));
 	if (bytes != sizeof(bufhead))
 		return NULL;
 
@@ -111,7 +111,7 @@ x86_backtrace(struct pt_regs * const reg
 {
 	struct stack_frame *head = (struct stack_frame *)frame_pointer(regs);
 
-	if (!user_mode_vm(regs)) {
+	if (!user_mode(regs)) {
 		unsigned long stack = kernel_stack_pointer(regs);
 		if (depth)
 			dump_trace(NULL, regs, (unsigned long *)stack, 0,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/pci/mrst.c linux-3.3.8-pax/arch/x86/pci/mrst.c
--- linux-3.3.8/arch/x86/pci/mrst.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/pci/mrst.c	2012-03-19 10:43:43.512034678 +0100
@@ -234,7 +234,9 @@ int __init pci_mrst_init(void)
 	printk(KERN_INFO "Moorestown platform detected, using MRST PCI ops\n");
 	pci_mmcfg_late_init();
 	pcibios_enable_irq = mrst_pci_irq_enable;
-	pci_root_ops = pci_mrst_ops;
+	pax_open_kernel();
+	memcpy((void *)&pci_root_ops, &pci_mrst_ops, sizeof(pci_mrst_ops));
+	pax_close_kernel();
 	/* Continue with standard init */
 	return 1;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/pci/pcbios.c linux-3.3.8-pax/arch/x86/pci/pcbios.c
--- linux-3.3.8/arch/x86/pci/pcbios.c	2012-03-19 10:38:56.712049990 +0100
+++ linux-3.3.8-pax/arch/x86/pci/pcbios.c	2012-03-19 10:43:43.512034678 +0100
@@ -79,50 +79,93 @@ union bios32 {
 static struct {
 	unsigned long address;
 	unsigned short segment;
-} bios32_indirect = { 0, __KERNEL_CS };
+} bios32_indirect __read_only = { 0, __PCIBIOS_CS };
 
 /*
  * Returns the entry point for the given service, NULL on error
  */
 
-static unsigned long bios32_service(unsigned long service)
+static unsigned long __devinit bios32_service(unsigned long service)
 {
 	unsigned char return_code;	/* %al */
 	unsigned long address;		/* %ebx */
 	unsigned long length;		/* %ecx */
 	unsigned long entry;		/* %edx */
 	unsigned long flags;
+	struct desc_struct d, *gdt;
 
 	local_irq_save(flags);
-	__asm__("lcall *(%%edi); cld"
+
+	gdt = get_cpu_gdt_table(smp_processor_id());
+
+	pack_descriptor(&d, 0UL, 0xFFFFFUL, 0x9B, 0xC);
+	write_gdt_entry(gdt, GDT_ENTRY_PCIBIOS_CS, &d, DESCTYPE_S);
+	pack_descriptor(&d, 0UL, 0xFFFFFUL, 0x93, 0xC);
+	write_gdt_entry(gdt, GDT_ENTRY_PCIBIOS_DS, &d, DESCTYPE_S);
+
+	__asm__("movw %w7, %%ds; lcall *(%%edi); push %%ss; pop %%ds; cld"
 		: "=a" (return_code),
 		  "=b" (address),
 		  "=c" (length),
 		  "=d" (entry)
 		: "0" (service),
 		  "1" (0),
-		  "D" (&bios32_indirect));
+		  "D" (&bios32_indirect),
+		  "r"(__PCIBIOS_DS)
+		: "memory");
+
+	pax_open_kernel();
+	gdt[GDT_ENTRY_PCIBIOS_CS].a = 0;
+	gdt[GDT_ENTRY_PCIBIOS_CS].b = 0;
+	gdt[GDT_ENTRY_PCIBIOS_DS].a = 0;
+	gdt[GDT_ENTRY_PCIBIOS_DS].b = 0;
+	pax_close_kernel();
+
 	local_irq_restore(flags);
 
 	switch (return_code) {
-		case 0:
-			return address + entry;
-		case 0x80:	/* Not present */
-			printk(KERN_WARNING "bios32_service(0x%lx): not present\n", service);
-			return 0;
-		default: /* Shouldn't happen */
-			printk(KERN_WARNING "bios32_service(0x%lx): returned 0x%x -- BIOS bug!\n",
-				service, return_code);
+	case 0: {
+		int cpu;
+		unsigned char flags;
+
+		printk(KERN_INFO "bios32_service: base:%08lx length:%08lx entry:%08lx\n", address, length, entry);
+		if (address >= 0xFFFF0 || length > 0x100000 - address || length <= entry) {
+			printk(KERN_WARNING "bios32_service: not valid\n");
 			return 0;
+		}
+		address = address + PAGE_OFFSET;
+		length += 16UL; /* some BIOSs underreport this... */
+		flags = 4;
+		if (length >= 64*1024*1024) {
+			length >>= PAGE_SHIFT;
+			flags |= 8;
+		}
+
+		for (cpu = 0; cpu < nr_cpu_ids; cpu++) {
+			gdt = get_cpu_gdt_table(cpu);
+			pack_descriptor(&d, address, length, 0x9b, flags);
+			write_gdt_entry(gdt, GDT_ENTRY_PCIBIOS_CS, &d, DESCTYPE_S);
+			pack_descriptor(&d, address, length, 0x93, flags);
+			write_gdt_entry(gdt, GDT_ENTRY_PCIBIOS_DS, &d, DESCTYPE_S);
+		}
+		return entry;
+	}
+	case 0x80:	/* Not present */
+		printk(KERN_WARNING "bios32_service(0x%lx): not present\n", service);
+		return 0;
+	default: /* Shouldn't happen */
+		printk(KERN_WARNING "bios32_service(0x%lx): returned 0x%x -- BIOS bug!\n",
+			service, return_code);
+		return 0;
 	}
 }
 
 static struct {
 	unsigned long address;
 	unsigned short segment;
-} pci_indirect = { 0, __KERNEL_CS };
+} pci_indirect __read_only = { 0, __PCIBIOS_CS };
 
-static int pci_bios_present;
+static int pci_bios_present __read_only;
 
 static int __devinit check_pcibios(void)
 {
@@ -131,11 +174,13 @@ static int __devinit check_pcibios(void)
 	unsigned long flags, pcibios_entry;
 
 	if ((pcibios_entry = bios32_service(PCI_SERVICE))) {
-		pci_indirect.address = pcibios_entry + PAGE_OFFSET;
+		pci_indirect.address = pcibios_entry;
 
 		local_irq_save(flags);
-		__asm__(
-			"lcall *(%%edi); cld\n\t"
+		__asm__("movw %w6, %%ds\n\t"
+			"lcall *%%ss:(%%edi); cld\n\t"
+			"push %%ss\n\t"
+			"pop %%ds\n\t"
 			"jc 1f\n\t"
 			"xor %%ah, %%ah\n"
 			"1:"
@@ -144,7 +189,8 @@ static int __devinit check_pcibios(void)
 			  "=b" (ebx),
 			  "=c" (ecx)
 			: "1" (PCIBIOS_PCI_BIOS_PRESENT),
-			  "D" (&pci_indirect)
+			  "D" (&pci_indirect),
+			  "r" (__PCIBIOS_DS)
 			: "memory");
 		local_irq_restore(flags);
 
@@ -189,7 +235,10 @@ static int pci_bios_read(unsigned int se
 
 	switch (len) {
 	case 1:
-		__asm__("lcall *(%%esi); cld\n\t"
+		__asm__("movw %w6, %%ds\n\t"
+			"lcall *%%ss:(%%esi); cld\n\t"
+			"push %%ss\n\t"
+			"pop %%ds\n\t"
 			"jc 1f\n\t"
 			"xor %%ah, %%ah\n"
 			"1:"
@@ -198,7 +247,8 @@ static int pci_bios_read(unsigned int se
 			: "1" (PCIBIOS_READ_CONFIG_BYTE),
 			  "b" (bx),
 			  "D" ((long)reg),
-			  "S" (&pci_indirect));
+			  "S" (&pci_indirect),
+			  "r" (__PCIBIOS_DS));
 		/*
 		 * Zero-extend the result beyond 8 bits, do not trust the
 		 * BIOS having done it:
@@ -206,7 +256,10 @@ static int pci_bios_read(unsigned int se
 		*value &= 0xff;
 		break;
 	case 2:
-		__asm__("lcall *(%%esi); cld\n\t"
+		__asm__("movw %w6, %%ds\n\t"
+			"lcall *%%ss:(%%esi); cld\n\t"
+			"push %%ss\n\t"
+			"pop %%ds\n\t"
 			"jc 1f\n\t"
 			"xor %%ah, %%ah\n"
 			"1:"
@@ -215,7 +268,8 @@ static int pci_bios_read(unsigned int se
 			: "1" (PCIBIOS_READ_CONFIG_WORD),
 			  "b" (bx),
 			  "D" ((long)reg),
-			  "S" (&pci_indirect));
+			  "S" (&pci_indirect),
+			  "r" (__PCIBIOS_DS));
 		/*
 		 * Zero-extend the result beyond 16 bits, do not trust the
 		 * BIOS having done it:
@@ -223,7 +277,10 @@ static int pci_bios_read(unsigned int se
 		*value &= 0xffff;
 		break;
 	case 4:
-		__asm__("lcall *(%%esi); cld\n\t"
+		__asm__("movw %w6, %%ds\n\t"
+			"lcall *%%ss:(%%esi); cld\n\t"
+			"push %%ss\n\t"
+			"pop %%ds\n\t"
 			"jc 1f\n\t"
 			"xor %%ah, %%ah\n"
 			"1:"
@@ -232,7 +289,8 @@ static int pci_bios_read(unsigned int se
 			: "1" (PCIBIOS_READ_CONFIG_DWORD),
 			  "b" (bx),
 			  "D" ((long)reg),
-			  "S" (&pci_indirect));
+			  "S" (&pci_indirect),
+			  "r" (__PCIBIOS_DS));
 		break;
 	}
 
@@ -256,7 +314,10 @@ static int pci_bios_write(unsigned int s
 
 	switch (len) {
 	case 1:
-		__asm__("lcall *(%%esi); cld\n\t"
+		__asm__("movw %w6, %%ds\n\t"
+			"lcall *%%ss:(%%esi); cld\n\t"
+			"push %%ss\n\t"
+			"pop %%ds\n\t"
 			"jc 1f\n\t"
 			"xor %%ah, %%ah\n"
 			"1:"
@@ -265,10 +326,14 @@ static int pci_bios_write(unsigned int s
 			  "c" (value),
 			  "b" (bx),
 			  "D" ((long)reg),
-			  "S" (&pci_indirect));
+			  "S" (&pci_indirect),
+			  "r" (__PCIBIOS_DS));
 		break;
 	case 2:
-		__asm__("lcall *(%%esi); cld\n\t"
+		__asm__("movw %w6, %%ds\n\t"
+			"lcall *%%ss:(%%esi); cld\n\t"
+			"push %%ss\n\t"
+			"pop %%ds\n\t"
 			"jc 1f\n\t"
 			"xor %%ah, %%ah\n"
 			"1:"
@@ -277,10 +342,14 @@ static int pci_bios_write(unsigned int s
 			  "c" (value),
 			  "b" (bx),
 			  "D" ((long)reg),
-			  "S" (&pci_indirect));
+			  "S" (&pci_indirect),
+			  "r" (__PCIBIOS_DS));
 		break;
 	case 4:
-		__asm__("lcall *(%%esi); cld\n\t"
+		__asm__("movw %w6, %%ds\n\t"
+			"lcall *%%ss:(%%esi); cld\n\t"
+			"push %%ss\n\t"
+			"pop %%ds\n\t"
 			"jc 1f\n\t"
 			"xor %%ah, %%ah\n"
 			"1:"
@@ -289,7 +358,8 @@ static int pci_bios_write(unsigned int s
 			  "c" (value),
 			  "b" (bx),
 			  "D" ((long)reg),
-			  "S" (&pci_indirect));
+			  "S" (&pci_indirect),
+			  "r" (__PCIBIOS_DS));
 		break;
 	}
 
@@ -394,10 +464,13 @@ struct irq_routing_table * pcibios_get_i
 
 	DBG("PCI: Fetching IRQ routing table... ");
 	__asm__("push %%es\n\t"
+		"movw %w8, %%ds\n\t"
 		"push %%ds\n\t"
 		"pop  %%es\n\t"
-		"lcall *(%%esi); cld\n\t"
+		"lcall *%%ss:(%%esi); cld\n\t"
 		"pop %%es\n\t"
+		"push %%ss\n\t"
+		"pop %%ds\n"
 		"jc 1f\n\t"
 		"xor %%ah, %%ah\n"
 		"1:"
@@ -408,7 +481,8 @@ struct irq_routing_table * pcibios_get_i
 		  "1" (0),
 		  "D" ((long) &opt),
 		  "S" (&pci_indirect),
-		  "m" (opt)
+		  "m" (opt),
+		  "r" (__PCIBIOS_DS)
 		: "memory");
 	DBG("OK  ret=%d, size=%d, map=%x\n", ret, opt.size, map);
 	if (ret & 0xff00)
@@ -432,7 +506,10 @@ int pcibios_set_irq_routing(struct pci_d
 {
 	int ret;
 
-	__asm__("lcall *(%%esi); cld\n\t"
+	__asm__("movw %w5, %%ds\n\t"
+		"lcall *%%ss:(%%esi); cld\n\t"
+		"push %%ss\n\t"
+		"pop %%ds\n"
 		"jc 1f\n\t"
 		"xor %%ah, %%ah\n"
 		"1:"
@@ -440,7 +517,8 @@ int pcibios_set_irq_routing(struct pci_d
 		: "0" (PCIBIOS_SET_PCI_HW_INT),
 		  "b" ((dev->bus->number << 8) | dev->devfn),
 		  "c" ((irq << 8) | (pin + 10)),
-		  "S" (&pci_indirect));
+		  "S" (&pci_indirect),
+		  "r" (__PCIBIOS_DS));
 	return !(ret & 0xff00);
 }
 EXPORT_SYMBOL(pcibios_set_irq_routing);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/platform/efi/efi_32.c linux-3.3.8-pax/arch/x86/platform/efi/efi_32.c
--- linux-3.3.8/arch/x86/platform/efi/efi_32.c	2012-01-08 19:47:49.851472967 +0100
+++ linux-3.3.8-pax/arch/x86/platform/efi/efi_32.c	2012-03-19 10:43:43.512034678 +0100
@@ -44,11 +44,22 @@ void efi_call_phys_prelog(void)
 {
 	struct desc_ptr gdt_descr;
 
+#ifdef CONFIG_PAX_KERNEXEC
+	struct desc_struct d;
+#endif
+
 	local_irq_save(efi_rt_eflags);
 
 	load_cr3(initial_page_table);
 	__flush_tlb_all();
 
+#ifdef CONFIG_PAX_KERNEXEC
+	pack_descriptor(&d, 0, 0xFFFFF, 0x9B, 0xC);
+	write_gdt_entry(get_cpu_gdt_table(0), GDT_ENTRY_KERNEXEC_EFI_CS, &d, DESCTYPE_S);
+	pack_descriptor(&d, 0, 0xFFFFF, 0x93, 0xC);
+	write_gdt_entry(get_cpu_gdt_table(0), GDT_ENTRY_KERNEXEC_EFI_DS, &d, DESCTYPE_S);
+#endif
+
 	gdt_descr.address = __pa(get_cpu_gdt_table(0));
 	gdt_descr.size = GDT_SIZE - 1;
 	load_gdt(&gdt_descr);
@@ -58,6 +69,14 @@ void efi_call_phys_epilog(void)
 {
 	struct desc_ptr gdt_descr;
 
+#ifdef CONFIG_PAX_KERNEXEC
+	struct desc_struct d;
+
+	memset(&d, 0, sizeof d);
+	write_gdt_entry(get_cpu_gdt_table(0), GDT_ENTRY_KERNEXEC_EFI_CS, &d, DESCTYPE_S);
+	write_gdt_entry(get_cpu_gdt_table(0), GDT_ENTRY_KERNEXEC_EFI_DS, &d, DESCTYPE_S);
+#endif
+
 	gdt_descr.address = (unsigned long)get_cpu_gdt_table(0);
 	gdt_descr.size = GDT_SIZE - 1;
 	load_gdt(&gdt_descr);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/platform/efi/efi_stub_32.S linux-3.3.8-pax/arch/x86/platform/efi/efi_stub_32.S
--- linux-3.3.8/arch/x86/platform/efi/efi_stub_32.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/platform/efi/efi_stub_32.S	2012-03-19 10:43:43.516034677 +0100
@@ -6,7 +6,9 @@
  */
 
 #include <linux/linkage.h>
+#include <linux/init.h>
 #include <asm/page_types.h>
+#include <asm/segment.h>
 
 /*
  * efi_call_phys(void *, ...) is a function with variable parameters.
@@ -20,7 +22,7 @@
  * service functions will comply with gcc calling convention, too.
  */
 
-.text
+__INIT
 ENTRY(efi_call_phys)
 	/*
 	 * 0. The function can only be called in Linux kernel. So CS has been
@@ -36,9 +38,11 @@ ENTRY(efi_call_phys)
 	 * The mapping of lower virtual memory has been created in prelog and
 	 * epilog.
 	 */
-	movl	$1f, %edx
-	subl	$__PAGE_OFFSET, %edx
-	jmp	*%edx
+	movl	$(__KERNEXEC_EFI_DS), %edx
+	mov	%edx, %ds
+	mov	%edx, %es
+	mov	%edx, %ss
+	ljmp $(__KERNEXEC_EFI_CS),$1f-__PAGE_OFFSET
 1:
 
 	/*
@@ -47,14 +51,8 @@ ENTRY(efi_call_phys)
 	 * parameter 2, ..., param n. To make things easy, we save the return
 	 * address of efi_call_phys in a global variable.
 	 */
-	popl	%edx
-	movl	%edx, saved_return_addr
-	/* get the function pointer into ECX*/
-	popl	%ecx
-	movl	%ecx, efi_rt_function_ptr
-	movl	$2f, %edx
-	subl	$__PAGE_OFFSET, %edx
-	pushl	%edx
+	popl	(saved_return_addr)
+	popl	(efi_rt_function_ptr)
 
 	/*
 	 * 3. Clear PG bit in %CR0.
@@ -73,9 +71,8 @@ ENTRY(efi_call_phys)
 	/*
 	 * 5. Call the physical function.
 	 */
-	jmp	*%ecx
+	call	*(efi_rt_function_ptr-__PAGE_OFFSET)
 
-2:
 	/*
 	 * 6. After EFI runtime service returns, control will return to
 	 * following instruction. We'd better readjust stack pointer first.
@@ -88,35 +85,32 @@ ENTRY(efi_call_phys)
 	movl	%cr0, %edx
 	orl	$0x80000000, %edx
 	movl	%edx, %cr0
-	jmp	1f
-1:
+
 	/*
 	 * 8. Now restore the virtual mode from flat mode by
 	 * adding EIP with PAGE_OFFSET.
 	 */
-	movl	$1f, %edx
-	jmp	*%edx
+	ljmp $(__KERNEL_CS),$1f+__PAGE_OFFSET
 1:
+	movl	$(__KERNEL_DS), %edx
+	mov	%edx, %ds
+	mov	%edx, %es
+	mov	%edx, %ss
 
 	/*
 	 * 9. Balance the stack. And because EAX contain the return value,
 	 * we'd better not clobber it.
 	 */
-	leal	efi_rt_function_ptr, %edx
-	movl	(%edx), %ecx
-	pushl	%ecx
+	pushl	(efi_rt_function_ptr)
 
 	/*
-	 * 10. Push the saved return address onto the stack and return.
+	 * 10. Return to the saved return address.
 	 */
-	leal	saved_return_addr, %edx
-	movl	(%edx), %ecx
-	pushl	%ecx
-	ret
+	jmpl	*(saved_return_addr)
 ENDPROC(efi_call_phys)
 .previous
 
-.data
+__INITDATA
 saved_return_addr:
 	.long 0
 efi_rt_function_ptr:
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/platform/efi/efi_stub_64.S linux-3.3.8-pax/arch/x86/platform/efi/efi_stub_64.S
--- linux-3.3.8/arch/x86/platform/efi/efi_stub_64.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/platform/efi/efi_stub_64.S	2012-03-19 10:43:43.516034677 +0100
@@ -7,6 +7,7 @@
  */
 
 #include <linux/linkage.h>
+#include <asm/alternative-asm.h>
 
 #define SAVE_XMM			\
 	mov %rsp, %rax;			\
@@ -40,6 +41,7 @@ ENTRY(efi_call0)
 	call *%rdi
 	addq $32, %rsp
 	RESTORE_XMM
+	pax_force_retaddr 0, 1
 	ret
 ENDPROC(efi_call0)
 
@@ -50,6 +52,7 @@ ENTRY(efi_call1)
 	call *%rdi
 	addq $32, %rsp
 	RESTORE_XMM
+	pax_force_retaddr 0, 1
 	ret
 ENDPROC(efi_call1)
 
@@ -60,6 +63,7 @@ ENTRY(efi_call2)
 	call *%rdi
 	addq $32, %rsp
 	RESTORE_XMM
+	pax_force_retaddr 0, 1
 	ret
 ENDPROC(efi_call2)
 
@@ -71,6 +75,7 @@ ENTRY(efi_call3)
 	call *%rdi
 	addq $32, %rsp
 	RESTORE_XMM
+	pax_force_retaddr 0, 1
 	ret
 ENDPROC(efi_call3)
 
@@ -83,6 +88,7 @@ ENTRY(efi_call4)
 	call *%rdi
 	addq $32, %rsp
 	RESTORE_XMM
+	pax_force_retaddr 0, 1
 	ret
 ENDPROC(efi_call4)
 
@@ -96,6 +102,7 @@ ENTRY(efi_call5)
 	call *%rdi
 	addq $48, %rsp
 	RESTORE_XMM
+	pax_force_retaddr 0, 1
 	ret
 ENDPROC(efi_call5)
 
@@ -112,5 +119,6 @@ ENTRY(efi_call6)
 	call *%rdi
 	addq $48, %rsp
 	RESTORE_XMM
+	pax_force_retaddr 0, 1
 	ret
 ENDPROC(efi_call6)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/platform/mrst/mrst.c linux-3.3.8-pax/arch/x86/platform/mrst/mrst.c
--- linux-3.3.8/arch/x86/platform/mrst/mrst.c	2012-03-19 10:38:56.764049987 +0100
+++ linux-3.3.8-pax/arch/x86/platform/mrst/mrst.c	2012-03-19 10:43:43.516034677 +0100
@@ -76,18 +76,20 @@ struct sfi_rtc_table_entry sfi_mrtc_arra
 EXPORT_SYMBOL_GPL(sfi_mrtc_array);
 int sfi_mrtc_num;
 
-static void mrst_power_off(void)
+static __noreturn void mrst_power_off(void)
 {
 	if (__mrst_cpu_chip == MRST_CPU_CHIP_LINCROFT)
 		intel_scu_ipc_simple_command(IPCMSG_COLD_RESET, 1);
+	BUG();
 }
 
-static void mrst_reboot(void)
+static __noreturn void mrst_reboot(void)
 {
 	if (__mrst_cpu_chip == MRST_CPU_CHIP_LINCROFT)
 		intel_scu_ipc_simple_command(IPCMSG_COLD_RESET, 0);
 	else
 		intel_scu_ipc_simple_command(IPCMSG_COLD_BOOT, 0);
+	BUG();
 }
 
 /* parse all the mtimer info to a static mtimer array */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/power/cpu.c linux-3.3.8-pax/arch/x86/power/cpu.c
--- linux-3.3.8/arch/x86/power/cpu.c	2012-01-08 19:47:49.875472966 +0100
+++ linux-3.3.8-pax/arch/x86/power/cpu.c	2012-03-19 10:43:43.516034677 +0100
@@ -131,7 +131,7 @@ static void do_fpu_end(void)
 static void fix_processor_context(void)
 {
 	int cpu = smp_processor_id();
-	struct tss_struct *t = &per_cpu(init_tss, cpu);
+	struct tss_struct *t = init_tss + cpu;
 
 	set_tss_desc(cpu, t);	/*
 				 * This just modifies memory; should not be
@@ -141,7 +141,9 @@ static void fix_processor_context(void)
 				 */
 
 #ifdef CONFIG_X86_64
+	pax_open_kernel();
 	get_cpu_gdt_table(cpu)[GDT_ENTRY_TSS].type = 9;
+	pax_close_kernel();
 
 	syscall_init();				/* This sets MSR_*STAR and related */
 #endif
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/tools/relocs.c linux-3.3.8-pax/arch/x86/tools/relocs.c
--- linux-3.3.8/arch/x86/tools/relocs.c	2012-06-11 19:36:39.760445784 +0200
+++ linux-3.3.8-pax/arch/x86/tools/relocs.c	2012-06-11 19:12:43.952367801 +0200
@@ -12,10 +12,13 @@
 #include <regex.h>
 #include <tools/le_byteshift.h>
 
+#include "../../../include/generated/autoconf.h"
+
 static void die(char *fmt, ...);
 
 #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))
 static Elf32_Ehdr ehdr;
+static Elf32_Phdr *phdr;
 static unsigned long reloc_count, reloc_idx;
 static unsigned long *relocs;
 static unsigned long reloc16_count, reloc16_idx;
@@ -323,9 +326,39 @@ static void read_ehdr(FILE *fp)
 	}
 }
 
+static void read_phdrs(FILE *fp)
+{
+	unsigned int i;
+
+	phdr = calloc(ehdr.e_phnum, sizeof(Elf32_Phdr));
+	if (!phdr) {
+		die("Unable to allocate %d program headers\n",
+		    ehdr.e_phnum);
+	}
+	if (fseek(fp, ehdr.e_phoff, SEEK_SET) < 0) {
+		die("Seek to %d failed: %s\n",
+			ehdr.e_phoff, strerror(errno));
+	}
+	if (fread(phdr, sizeof(*phdr), ehdr.e_phnum, fp) != ehdr.e_phnum) {
+		die("Cannot read ELF program headers: %s\n",
+			strerror(errno));
+	}
+	for(i = 0; i < ehdr.e_phnum; i++) {
+		phdr[i].p_type      = elf32_to_cpu(phdr[i].p_type);
+		phdr[i].p_offset    = elf32_to_cpu(phdr[i].p_offset);
+		phdr[i].p_vaddr     = elf32_to_cpu(phdr[i].p_vaddr);
+		phdr[i].p_paddr     = elf32_to_cpu(phdr[i].p_paddr);
+		phdr[i].p_filesz    = elf32_to_cpu(phdr[i].p_filesz);
+		phdr[i].p_memsz     = elf32_to_cpu(phdr[i].p_memsz);
+		phdr[i].p_flags     = elf32_to_cpu(phdr[i].p_flags);
+		phdr[i].p_align     = elf32_to_cpu(phdr[i].p_align);
+	}
+
+}
+
 static void read_shdrs(FILE *fp)
 {
-	int i;
+	unsigned int i;
 	Elf32_Shdr shdr;
 
 	secs = calloc(ehdr.e_shnum, sizeof(struct section));
@@ -360,7 +393,7 @@ static void read_shdrs(FILE *fp)
 
 static void read_strtabs(FILE *fp)
 {
-	int i;
+	unsigned int i;
 	for (i = 0; i < ehdr.e_shnum; i++) {
 		struct section *sec = &secs[i];
 		if (sec->shdr.sh_type != SHT_STRTAB) {
@@ -385,7 +418,7 @@ static void read_strtabs(FILE *fp)
 
 static void read_symtabs(FILE *fp)
 {
-	int i,j;
+	unsigned int i,j;
 	for (i = 0; i < ehdr.e_shnum; i++) {
 		struct section *sec = &secs[i];
 		if (sec->shdr.sh_type != SHT_SYMTAB) {
@@ -418,7 +451,9 @@ static void read_symtabs(FILE *fp)
 
 static void read_relocs(FILE *fp)
 {
-	int i,j;
+	unsigned int i,j;
+	uint32_t base;
+
 	for (i = 0; i < ehdr.e_shnum; i++) {
 		struct section *sec = &secs[i];
 		if (sec->shdr.sh_type != SHT_REL) {
@@ -438,9 +473,22 @@ static void read_relocs(FILE *fp)
 			die("Cannot read symbol table: %s\n",
 				strerror(errno));
 		}
+		base = 0;
+
+#if defined(CONFIG_PAX_KERNEXEC) && defined(CONFIG_X86_32)
+		for (j = 0; j < ehdr.e_phnum; j++) {
+			if (phdr[j].p_type != PT_LOAD )
+				continue;
+			if (secs[sec->shdr.sh_info].shdr.sh_offset < phdr[j].p_offset || secs[sec->shdr.sh_info].shdr.sh_offset >= phdr[j].p_offset + phdr[j].p_filesz)
+				continue;
+			base = CONFIG_PAGE_OFFSET + phdr[j].p_paddr - phdr[j].p_vaddr;
+			break;
+		}
+#endif
+
 		for (j = 0; j < sec->shdr.sh_size/sizeof(Elf32_Rel); j++) {
 			Elf32_Rel *rel = &sec->reltab[j];
-			rel->r_offset = elf32_to_cpu(rel->r_offset);
+			rel->r_offset = elf32_to_cpu(rel->r_offset) + base;
 			rel->r_info   = elf32_to_cpu(rel->r_info);
 		}
 	}
@@ -449,13 +497,13 @@ static void read_relocs(FILE *fp)
 
 static void print_absolute_symbols(void)
 {
-	int i;
+	unsigned int i;
 	printf("Absolute symbols\n");
 	printf(" Num:    Value Size  Type       Bind        Visibility  Name\n");
 	for (i = 0; i < ehdr.e_shnum; i++) {
 		struct section *sec = &secs[i];
 		char *sym_strtab;
-		int j;
+		unsigned int j;
 
 		if (sec->shdr.sh_type != SHT_SYMTAB) {
 			continue;
@@ -482,7 +530,7 @@ static void print_absolute_symbols(void)
 
 static void print_absolute_relocs(void)
 {
-	int i, printed = 0;
+	unsigned int i, printed = 0;
 
 	for (i = 0; i < ehdr.e_shnum; i++) {
 		struct section *sec = &secs[i];
@@ -551,7 +599,7 @@ static void print_absolute_relocs(void)
 static void walk_relocs(void (*visit)(Elf32_Rel *rel, Elf32_Sym *sym),
 			int use_real_mode)
 {
-	int i;
+	unsigned int i;
 	/* Walk through the relocations */
 	for (i = 0; i < ehdr.e_shnum; i++) {
 		char *sym_strtab;
@@ -581,6 +629,22 @@ static void walk_relocs(void (*visit)(El
 			sym = &sh_symtab[ELF32_R_SYM(rel->r_info)];
 			r_type = ELF32_R_TYPE(rel->r_info);
 
+			/* Don't relocate actual per-cpu variables, they are absolute indices, not addresses */
+			if (!strcmp(sec_name(sym->st_shndx), ".data..percpu") && strcmp(sym_name(sym_strtab, sym), "__per_cpu_load"))
+				continue;
+
+#if defined(CONFIG_PAX_KERNEXEC) && defined(CONFIG_X86_32)
+			/* Don't relocate actual code, they are relocated implicitly by the base address of KERNEL_CS */
+			if (!strcmp(sec_name(sym->st_shndx), ".module.text") && !strcmp(sym_name(sym_strtab, sym), "_etext"))
+				continue;
+			if (!strcmp(sec_name(sym->st_shndx), ".init.text"))
+				continue;
+			if (!strcmp(sec_name(sym->st_shndx), ".exit.text"))
+				continue;
+			if (!strcmp(sec_name(sym->st_shndx), ".text") && strcmp(sym_name(sym_strtab, sym), "__LOAD_PHYSICAL_ADDR"))
+				continue;
+#endif
+
 			shn_abs = sym->st_shndx == SHN_ABS;
 
 			switch (r_type) {
@@ -674,7 +738,7 @@ static int write32(unsigned int v, FILE
 
 static void emit_relocs(int as_text, int use_real_mode)
 {
-	int i;
+	unsigned int i;
 	/* Count how many relocations I have and allocate space for them. */
 	reloc_count = 0;
 	walk_relocs(count_reloc, use_real_mode);
@@ -801,6 +865,7 @@ int main(int argc, char **argv)
 			fname, strerror(errno));
 	}
 	read_ehdr(fp);
+	read_phdrs(fp);
 	read_shdrs(fp);
 	read_strtabs(fp);
 	read_symtabs(fp);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/vdso/Makefile linux-3.3.8-pax/arch/x86/vdso/Makefile
--- linux-3.3.8/arch/x86/vdso/Makefile	2011-10-24 12:48:26.403091765 +0200
+++ linux-3.3.8-pax/arch/x86/vdso/Makefile	2012-03-19 10:43:43.520034676 +0100
@@ -137,7 +137,7 @@ quiet_cmd_vdso = VDSO    $@
 		       -Wl,-T,$(filter %.lds,$^) $(filter %.o,$^) && \
 		 sh $(srctree)/$(src)/checkundef.sh '$(NM)' '$@'
 
-VDSO_LDFLAGS = -fPIC -shared $(call cc-ldoption, -Wl$(comma)--hash-style=sysv)
+VDSO_LDFLAGS = -fPIC -shared -Wl,--no-undefined $(call cc-ldoption, -Wl$(comma)--hash-style=sysv)
 GCOV_PROFILE := n
 
 #
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/vdso/vdso32-setup.c linux-3.3.8-pax/arch/x86/vdso/vdso32-setup.c
--- linux-3.3.8/arch/x86/vdso/vdso32-setup.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/vdso/vdso32-setup.c	2012-03-19 10:43:43.520034676 +0100
@@ -25,6 +25,7 @@
 #include <asm/tlbflush.h>
 #include <asm/vdso.h>
 #include <asm/proto.h>
+#include <asm/mman.h>
 
 enum {
 	VDSO_DISABLED = 0,
@@ -226,7 +227,7 @@ static inline void map_compat_vdso(int m
 void enable_sep_cpu(void)
 {
 	int cpu = get_cpu();
-	struct tss_struct *tss = &per_cpu(init_tss, cpu);
+	struct tss_struct *tss = init_tss + cpu;
 
 	if (!boot_cpu_has(X86_FEATURE_SEP)) {
 		put_cpu();
@@ -249,7 +250,7 @@ static int __init gate_vma_init(void)
 	gate_vma.vm_start = FIXADDR_USER_START;
 	gate_vma.vm_end = FIXADDR_USER_END;
 	gate_vma.vm_flags = VM_READ | VM_MAYREAD | VM_EXEC | VM_MAYEXEC;
-	gate_vma.vm_page_prot = __P101;
+	gate_vma.vm_page_prot = vm_get_page_prot(gate_vma.vm_flags);
 	/*
 	 * Make sure the vDSO gets into every core dump.
 	 * Dumping its contents makes post-mortem fully interpretable later
@@ -331,14 +332,14 @@ int arch_setup_additional_pages(struct l
 	if (compat)
 		addr = VDSO_HIGH_BASE;
 	else {
-		addr = get_unmapped_area(NULL, 0, PAGE_SIZE, 0, 0);
+		addr = get_unmapped_area(NULL, 0, PAGE_SIZE, 0, MAP_EXECUTABLE);
 		if (IS_ERR_VALUE(addr)) {
 			ret = addr;
 			goto up_fail;
 		}
 	}
 
-	current->mm->context.vdso = (void *)addr;
+	current->mm->context.vdso = addr;
 
 	if (compat_uses_vma || !compat) {
 		/*
@@ -361,11 +362,11 @@ int arch_setup_additional_pages(struct l
 	}
 
 	current_thread_info()->sysenter_return =
-		VDSO32_SYMBOL(addr, SYSENTER_RETURN);
+		(__force void __user *)VDSO32_SYMBOL(addr, SYSENTER_RETURN);
 
   up_fail:
 	if (ret)
-		current->mm->context.vdso = NULL;
+		current->mm->context.vdso = 0;
 
 	up_write(&mm->mmap_sem);
 
@@ -412,8 +413,14 @@ __initcall(ia32_binfmt_init);
 
 const char *arch_vma_name(struct vm_area_struct *vma)
 {
-	if (vma->vm_mm && vma->vm_start == (long)vma->vm_mm->context.vdso)
+	if (vma->vm_mm && vma->vm_start == vma->vm_mm->context.vdso)
 		return "[vdso]";
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (vma->vm_mm && vma->vm_mirror && vma->vm_mirror->vm_start == vma->vm_mm->context.vdso)
+		return "[vdso]";
+#endif
+
 	return NULL;
 }
 
@@ -423,7 +430,7 @@ struct vm_area_struct *get_gate_vma(stru
 	 * Check to see if the corresponding task was created in compat vdso
 	 * mode.
 	 */
-	if (mm && mm->context.vdso == (void *)VDSO_HIGH_BASE)
+	if (mm && mm->context.vdso == VDSO_HIGH_BASE)
 		return &gate_vma;
 	return NULL;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/vdso/vma.c linux-3.3.8-pax/arch/x86/vdso/vma.c
--- linux-3.3.8/arch/x86/vdso/vma.c	2012-01-08 19:47:50.019472958 +0100
+++ linux-3.3.8-pax/arch/x86/vdso/vma.c	2012-03-19 10:43:43.520034676 +0100
@@ -16,8 +16,6 @@
 #include <asm/vdso.h>
 #include <asm/page.h>
 
-unsigned int __read_mostly vdso_enabled = 1;
-
 extern char vdso_start[], vdso_end[];
 extern unsigned short vdso_sync_cpuid;
 
@@ -96,7 +94,6 @@ static unsigned long vdso_addr(unsigned
 	 * unaligned here as a result of stack start randomization.
 	 */
 	addr = PAGE_ALIGN(addr);
-	addr = align_addr(addr, NULL, ALIGN_VDSO);
 
 	return addr;
 }
@@ -106,40 +103,35 @@ static unsigned long vdso_addr(unsigned
 int arch_setup_additional_pages(struct linux_binprm *bprm, int uses_interp)
 {
 	struct mm_struct *mm = current->mm;
-	unsigned long addr;
+	unsigned long addr = 0;
 	int ret;
 
-	if (!vdso_enabled)
-		return 0;
-
 	down_write(&mm->mmap_sem);
+
+#ifdef CONFIG_PAX_RANDMMAP
+	if (!(mm->pax_flags & MF_PAX_RANDMMAP))
+#endif
+
 	addr = vdso_addr(mm->start_stack, vdso_size);
+	addr = align_addr(addr, NULL, ALIGN_VDSO);
 	addr = get_unmapped_area(NULL, addr, vdso_size, 0, 0);
 	if (IS_ERR_VALUE(addr)) {
 		ret = addr;
 		goto up_fail;
 	}
 
-	current->mm->context.vdso = (void *)addr;
+	mm->context.vdso = addr;
 
 	ret = install_special_mapping(mm, addr, vdso_size,
 				      VM_READ|VM_EXEC|
 				      VM_MAYREAD|VM_MAYWRITE|VM_MAYEXEC|
 				      VM_ALWAYSDUMP,
 				      vdso_pages);
-	if (ret) {
-		current->mm->context.vdso = NULL;
-		goto up_fail;
-	}
+
+	if (ret)
+		mm->context.vdso = 0;
 
 up_fail:
 	up_write(&mm->mmap_sem);
 	return ret;
 }
-
-static __init int vdso_setup(char *s)
-{
-	vdso_enabled = simple_strtoul(s, NULL, 0);
-	return 0;
-}
-__setup("vdso=", vdso_setup);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/xen/enlighten.c linux-3.3.8-pax/arch/x86/xen/enlighten.c
--- linux-3.3.8/arch/x86/xen/enlighten.c	2012-05-12 22:26:33.668957813 +0200
+++ linux-3.3.8-pax/arch/x86/xen/enlighten.c	2012-05-12 22:26:42.728957331 +0200
@@ -86,8 +86,6 @@ EXPORT_SYMBOL_GPL(xen_start_info);
 
 struct shared_info xen_dummy_shared_info;
 
-void *xen_initial_gdt;
-
 RESERVE_BRK(shared_info_page_brk, PAGE_SIZE);
 __read_mostly int xen_have_vector_callback;
 EXPORT_SYMBOL_GPL(xen_have_vector_callback);
@@ -1030,30 +1028,30 @@ static const struct pv_apic_ops xen_apic
 #endif
 };
 
-static void xen_reboot(int reason)
+static __noreturn void xen_reboot(int reason)
 {
 	struct sched_shutdown r = { .reason = reason };
 
-	if (HYPERVISOR_sched_op(SCHEDOP_shutdown, &r))
-		BUG();
+	HYPERVISOR_sched_op(SCHEDOP_shutdown, &r);
+	BUG();
 }
 
-static void xen_restart(char *msg)
+static __noreturn void xen_restart(char *msg)
 {
 	xen_reboot(SHUTDOWN_reboot);
 }
 
-static void xen_emergency_restart(void)
+static __noreturn void xen_emergency_restart(void)
 {
 	xen_reboot(SHUTDOWN_reboot);
 }
 
-static void xen_machine_halt(void)
+static __noreturn void xen_machine_halt(void)
 {
 	xen_reboot(SHUTDOWN_poweroff);
 }
 
-static void xen_machine_power_off(void)
+static __noreturn void xen_machine_power_off(void)
 {
 	if (pm_power_off)
 		pm_power_off();
@@ -1156,7 +1154,17 @@ asmlinkage void __init xen_start_kernel(
 	__userpte_alloc_gfp &= ~__GFP_HIGHMEM;
 
 	/* Work out if we support NX */
-	x86_configure_nx();
+#if defined(CONFIG_X86_64) || defined(CONFIG_X86_PAE)
+	if ((cpuid_eax(0x80000000) & 0xffff0000) == 0x80000000 &&
+	    (cpuid_edx(0x80000001) & (1U << (X86_FEATURE_NX & 31)))) {
+		unsigned l, h;
+
+		__supported_pte_mask |= _PAGE_NX;
+		rdmsr(MSR_EFER, l, h);
+		l |= EFER_NX;
+		wrmsr(MSR_EFER, l, h);
+	}
+#endif
 
 	xen_setup_features();
 
@@ -1187,13 +1195,6 @@ asmlinkage void __init xen_start_kernel(
 
 	machine_ops = xen_machine_ops;
 
-	/*
-	 * The only reliable way to retain the initial address of the
-	 * percpu gdt_page is to remember it here, so we can go and
-	 * mark it RW later, when the initial percpu area is freed.
-	 */
-	xen_initial_gdt = &per_cpu(gdt_page, 0);
-
 	xen_smp_init();
 
 #ifdef CONFIG_ACPI_NUMA
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/xen/mmu.c linux-3.3.8-pax/arch/x86/xen/mmu.c
--- linux-3.3.8/arch/x86/xen/mmu.c	2012-05-12 22:26:33.676957816 +0200
+++ linux-3.3.8-pax/arch/x86/xen/mmu.c	2012-05-12 22:26:42.728957331 +0200
@@ -1738,6 +1738,9 @@ pgd_t * __init xen_setup_kernel_pagetabl
 	convert_pfn_mfn(init_level4_pgt);
 	convert_pfn_mfn(level3_ident_pgt);
 	convert_pfn_mfn(level3_kernel_pgt);
+	convert_pfn_mfn(level3_vmalloc_start_pgt);
+	convert_pfn_mfn(level3_vmalloc_end_pgt);
+	convert_pfn_mfn(level3_vmemmap_pgt);
 
 	l3 = m2v(pgd[pgd_index(__START_KERNEL_map)].pgd);
 	l2 = m2v(l3[pud_index(__START_KERNEL_map)].pud);
@@ -1756,7 +1759,11 @@ pgd_t * __init xen_setup_kernel_pagetabl
 	set_page_prot(init_level4_pgt, PAGE_KERNEL_RO);
 	set_page_prot(level3_ident_pgt, PAGE_KERNEL_RO);
 	set_page_prot(level3_kernel_pgt, PAGE_KERNEL_RO);
+	set_page_prot(level3_vmalloc_start_pgt, PAGE_KERNEL_RO);
+	set_page_prot(level3_vmalloc_end_pgt, PAGE_KERNEL_RO);
+	set_page_prot(level3_vmemmap_pgt, PAGE_KERNEL_RO);
 	set_page_prot(level3_user_vsyscall, PAGE_KERNEL_RO);
+	set_page_prot(level2_vmemmap_pgt, PAGE_KERNEL_RO);
 	set_page_prot(level2_kernel_pgt, PAGE_KERNEL_RO);
 	set_page_prot(level2_fixmap_pgt, PAGE_KERNEL_RO);
 
@@ -1963,6 +1970,7 @@ static void __init xen_post_allocator_in
 	pv_mmu_ops.set_pud = xen_set_pud;
 #if PAGETABLE_LEVELS == 4
 	pv_mmu_ops.set_pgd = xen_set_pgd;
+	pv_mmu_ops.set_pgd_batched = xen_set_pgd;
 #endif
 
 	/* This will work as long as patching hasn't happened yet
@@ -2044,6 +2052,7 @@ static const struct pv_mmu_ops xen_mmu_o
 	.pud_val = PV_CALLEE_SAVE(xen_pud_val),
 	.make_pud = PV_CALLEE_SAVE(xen_make_pud),
 	.set_pgd = xen_set_pgd_hyper,
+	.set_pgd_batched = xen_set_pgd_hyper,
 
 	.alloc_pud = xen_alloc_pmd_init,
 	.release_pud = xen_release_pmd_init,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/xen/smp.c linux-3.3.8-pax/arch/x86/xen/smp.c
--- linux-3.3.8/arch/x86/xen/smp.c	2012-05-07 20:26:56.003609319 +0200
+++ linux-3.3.8-pax/arch/x86/xen/smp.c	2012-05-07 20:27:02.051608995 +0200
@@ -209,11 +209,6 @@ static void __init xen_smp_prepare_boot_
 {
 	BUG_ON(smp_processor_id() != 0);
 	native_smp_prepare_boot_cpu();
-
-	/* We've switched to the "real" per-cpu gdt, so make sure the
-	   old memory can be recycled */
-	make_lowmem_page_readwrite(xen_initial_gdt);
-
 	xen_filter_cpu_maps();
 	xen_setup_vcpu_info_placement();
 }
@@ -290,12 +285,12 @@ cpu_initialize_context(unsigned int cpu,
 	gdt = get_cpu_gdt_table(cpu);
 
 	ctxt->flags = VGCF_IN_KERNEL;
-	ctxt->user_regs.ds = __USER_DS;
-	ctxt->user_regs.es = __USER_DS;
+	ctxt->user_regs.ds = __KERNEL_DS;
+	ctxt->user_regs.es = __KERNEL_DS;
 	ctxt->user_regs.ss = __KERNEL_DS;
 #ifdef CONFIG_X86_32
 	ctxt->user_regs.fs = __KERNEL_PERCPU;
-	ctxt->user_regs.gs = __KERNEL_STACK_CANARY;
+	savesegment(gs, ctxt->user_regs.gs);
 #else
 	ctxt->gs_base_kernel = per_cpu_offset(cpu);
 #endif
@@ -346,13 +341,12 @@ static int __cpuinit xen_cpu_up(unsigned
 	int rc;
 
 	per_cpu(current_task, cpu) = idle;
+	per_cpu(current_tinfo, cpu) = &idle->tinfo;
 #ifdef CONFIG_X86_32
 	irq_ctx_init(cpu);
 #else
 	clear_tsk_thread_flag(idle, TIF_FORK);
-	per_cpu(kernel_stack, cpu) =
-		(unsigned long)task_stack_page(idle) -
-		KERNEL_STACK_OFFSET + THREAD_SIZE;
+	per_cpu(kernel_stack, cpu) = (unsigned long)task_stack_page(idle) - 16 + THREAD_SIZE;
 #endif
 	xen_setup_runstate_info(cpu);
 	xen_setup_timer(cpu);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/xen/xen-asm_32.S linux-3.3.8-pax/arch/x86/xen/xen-asm_32.S
--- linux-3.3.8/arch/x86/xen/xen-asm_32.S	2011-10-24 12:48:26.419091764 +0200
+++ linux-3.3.8-pax/arch/x86/xen/xen-asm_32.S	2012-03-19 10:43:43.524034675 +0100
@@ -83,14 +83,14 @@ ENTRY(xen_iret)
 	ESP_OFFSET=4	# bytes pushed onto stack
 
 	/*
-	 * Store vcpu_info pointer for easy access.  Do it this way to
-	 * avoid having to reload %fs
+	 * Store vcpu_info pointer for easy access.
 	 */
 #ifdef CONFIG_SMP
-	GET_THREAD_INFO(%eax)
-	movl TI_cpu(%eax), %eax
-	movl __per_cpu_offset(,%eax,4), %eax
-	mov xen_vcpu(%eax), %eax
+	push %fs
+	mov $(__KERNEL_PERCPU), %eax
+	mov %eax, %fs
+	mov PER_CPU_VAR(xen_vcpu), %eax
+	pop %fs
 #else
 	movl xen_vcpu, %eax
 #endif
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/xen/xen-head.S linux-3.3.8-pax/arch/x86/xen/xen-head.S
--- linux-3.3.8/arch/x86/xen/xen-head.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/arch/x86/xen/xen-head.S	2012-03-19 10:43:43.524034675 +0100
@@ -19,6 +19,17 @@ ENTRY(startup_xen)
 #ifdef CONFIG_X86_32
 	mov %esi,xen_start_info
 	mov $init_thread_union+THREAD_SIZE,%esp
+#ifdef CONFIG_SMP
+	movl $cpu_gdt_table,%edi
+	movl $__per_cpu_load,%eax
+	movw %ax,__KERNEL_PERCPU + 2(%edi)
+	rorl $16,%eax
+	movb %al,__KERNEL_PERCPU + 4(%edi)
+	movb %ah,__KERNEL_PERCPU + 7(%edi)
+	movl $__per_cpu_end - 1,%eax
+	subl $__per_cpu_start,%eax
+	movw %ax,__KERNEL_PERCPU + 0(%edi)
+#endif
 #else
 	mov %rsi,xen_start_info
 	mov $init_thread_union+THREAD_SIZE,%rsp
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/arch/x86/xen/xen-ops.h linux-3.3.8-pax/arch/x86/xen/xen-ops.h
--- linux-3.3.8/arch/x86/xen/xen-ops.h	2011-10-24 12:48:26.419091764 +0200
+++ linux-3.3.8-pax/arch/x86/xen/xen-ops.h	2012-03-19 10:43:43.528034675 +0100
@@ -10,8 +10,6 @@
 extern const char xen_hypervisor_callback[];
 extern const char xen_failsafe_callback[];
 
-extern void *xen_initial_gdt;
-
 struct trap_info;
 void xen_copy_trap_info(struct trap_info *traps);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/block/blk-iopoll.c linux-3.3.8-pax/block/blk-iopoll.c
--- linux-3.3.8/block/blk-iopoll.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/block/blk-iopoll.c	2012-03-19 10:43:43.528034675 +0100
@@ -77,7 +77,7 @@ void blk_iopoll_complete(struct blk_iopo
 }
 EXPORT_SYMBOL(blk_iopoll_complete);
 
-static void blk_iopoll_softirq(struct softirq_action *h)
+static void blk_iopoll_softirq(void)
 {
 	struct list_head *list = &__get_cpu_var(blk_cpu_iopoll);
 	int rearm = 0, budget = blk_iopoll_budget;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/block/blk-map.c linux-3.3.8-pax/block/blk-map.c
--- linux-3.3.8/block/blk-map.c	2012-01-08 19:47:50.103472954 +0100
+++ linux-3.3.8-pax/block/blk-map.c	2012-03-19 10:43:43.528034675 +0100
@@ -302,7 +302,7 @@ int blk_rq_map_kern(struct request_queue
 	if (!len || !kbuf)
 		return -EINVAL;
 
-	do_copy = !blk_rq_aligned(q, addr, len) || object_is_on_stack(kbuf);
+	do_copy = !blk_rq_aligned(q, addr, len) || object_starts_on_stack(kbuf);
 	if (do_copy)
 		bio = bio_copy_kern(q, kbuf, len, gfp_mask, reading);
 	else
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/block/blk-softirq.c linux-3.3.8-pax/block/blk-softirq.c
--- linux-3.3.8/block/blk-softirq.c	2011-10-24 12:48:26.463091762 +0200
+++ linux-3.3.8-pax/block/blk-softirq.c	2012-03-19 10:43:43.528034675 +0100
@@ -17,7 +17,7 @@ static DEFINE_PER_CPU(struct list_head,
  * Softirq action handler - move entries to local list and loop over them
  * while passing them to the queue registered handler.
  */
-static void blk_done_softirq(struct softirq_action *h)
+static void blk_done_softirq(void)
 {
 	struct list_head *cpu_list, local_list;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/block/bsg.c linux-3.3.8-pax/block/bsg.c
--- linux-3.3.8/block/bsg.c	2012-03-19 10:38:56.976049975 +0100
+++ linux-3.3.8-pax/block/bsg.c	2012-03-19 10:43:43.528034675 +0100
@@ -176,16 +176,24 @@ static int blk_fill_sgv4_hdr_rq(struct r
 				struct sg_io_v4 *hdr, struct bsg_device *bd,
 				fmode_t has_write_perm)
 {
+	unsigned char tmpcmd[sizeof(rq->__cmd)];
+	unsigned char *cmdptr;
+
 	if (hdr->request_len > BLK_MAX_CDB) {
 		rq->cmd = kzalloc(hdr->request_len, GFP_KERNEL);
 		if (!rq->cmd)
 			return -ENOMEM;
-	}
+		cmdptr = rq->cmd;
+	} else
+		cmdptr = tmpcmd;
 
-	if (copy_from_user(rq->cmd, (void __user *)(unsigned long)hdr->request,
+	if (copy_from_user(cmdptr, (void __user *)(unsigned long)hdr->request,
 			   hdr->request_len))
 		return -EFAULT;
 
+	if (cmdptr != rq->cmd)
+		memcpy(rq->cmd, cmdptr, hdr->request_len);
+
 	if (hdr->subprotocol == BSG_SUB_PROTOCOL_SCSI_CMD) {
 		if (blk_verify_command(rq->cmd, has_write_perm))
 			return -EPERM;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/block/compat_ioctl.c linux-3.3.8-pax/block/compat_ioctl.c
--- linux-3.3.8/block/compat_ioctl.c	2012-03-19 10:38:56.980049975 +0100
+++ linux-3.3.8-pax/block/compat_ioctl.c	2012-03-19 10:43:43.532034676 +0100
@@ -340,7 +340,7 @@ static int compat_fd_ioctl(struct block_
 		err |= __get_user(f->spec1, &uf->spec1);
 		err |= __get_user(f->fmt_gap, &uf->fmt_gap);
 		err |= __get_user(name, &uf->name);
-		f->name = compat_ptr(name);
+		f->name = (void __force_kernel *)compat_ptr(name);
 		if (err) {
 			err = -EFAULT;
 			goto out;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/block/partitions/efi.c linux-3.3.8-pax/block/partitions/efi.c
--- linux-3.3.8/block/partitions/efi.c	2012-03-19 10:38:56.992049975 +0100
+++ linux-3.3.8-pax/block/partitions/efi.c	2012-03-19 10:43:43.532034676 +0100
@@ -234,14 +234,14 @@ static gpt_entry *alloc_read_gpt_entries
 	if (!gpt)
 		return NULL;
 
-	count = le32_to_cpu(gpt->num_partition_entries) *
-                le32_to_cpu(gpt->sizeof_partition_entry);
-	if (!count)
+	if (!le32_to_cpu(gpt->num_partition_entries))
 		return NULL;
-	pte = kzalloc(count, GFP_KERNEL);
+	pte = kcalloc(le32_to_cpu(gpt->num_partition_entries), le32_to_cpu(gpt->sizeof_partition_entry), GFP_KERNEL);
 	if (!pte)
 		return NULL;
 
+	count = le32_to_cpu(gpt->num_partition_entries) *
+                le32_to_cpu(gpt->sizeof_partition_entry);
 	if (read_lba(state, le64_to_cpu(gpt->partition_entry_lba),
                      (u8 *) pte,
 		     count) < count) {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/block/scsi_ioctl.c linux-3.3.8-pax/block/scsi_ioctl.c
--- linux-3.3.8/block/scsi_ioctl.c	2012-03-19 10:38:57.004049975 +0100
+++ linux-3.3.8-pax/block/scsi_ioctl.c	2012-03-19 10:43:43.532034676 +0100
@@ -223,8 +223,20 @@ EXPORT_SYMBOL(blk_verify_command);
 static int blk_fill_sghdr_rq(struct request_queue *q, struct request *rq,
 			     struct sg_io_hdr *hdr, fmode_t mode)
 {
-	if (copy_from_user(rq->cmd, hdr->cmdp, hdr->cmd_len))
+	unsigned char tmpcmd[sizeof(rq->__cmd)];
+	unsigned char *cmdptr;
+
+	if (rq->cmd != rq->__cmd)
+		cmdptr = rq->cmd;
+	else
+		cmdptr = tmpcmd;
+
+	if (copy_from_user(cmdptr, hdr->cmdp, hdr->cmd_len))
 		return -EFAULT;
+
+	if (cmdptr != rq->cmd)
+		memcpy(rq->cmd, cmdptr, hdr->cmd_len);
+
 	if (blk_verify_command(rq->cmd, mode & FMODE_WRITE))
 		return -EPERM;
 
@@ -433,6 +445,8 @@ int sg_scsi_ioctl(struct request_queue *
 	int err;
 	unsigned int in_len, out_len, bytes, opcode, cmdlen;
 	char *buffer = NULL, sense[SCSI_SENSE_BUFFERSIZE];
+	unsigned char tmpcmd[sizeof(rq->__cmd)];
+	unsigned char *cmdptr;
 
 	if (!sic)
 		return -EINVAL;
@@ -466,9 +480,18 @@ int sg_scsi_ioctl(struct request_queue *
 	 */
 	err = -EFAULT;
 	rq->cmd_len = cmdlen;
-	if (copy_from_user(rq->cmd, sic->data, cmdlen))
+
+	if (rq->cmd != rq->__cmd)
+		cmdptr = rq->cmd;
+	else
+		cmdptr = tmpcmd;
+
+	if (copy_from_user(cmdptr, sic->data, cmdlen))
 		goto error;
 
+	if (rq->cmd != cmdptr)
+		memcpy(rq->cmd, cmdptr, cmdlen);
+
 	if (in_len && copy_from_user(buffer, sic->data + cmdlen, in_len))
 		goto error;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/crypto/cryptd.c linux-3.3.8-pax/crypto/cryptd.c
--- linux-3.3.8/crypto/cryptd.c	2012-01-08 19:47:50.187472949 +0100
+++ linux-3.3.8-pax/crypto/cryptd.c	2012-03-19 10:43:43.532034676 +0100
@@ -63,7 +63,7 @@ struct cryptd_blkcipher_ctx {
 
 struct cryptd_blkcipher_request_ctx {
 	crypto_completion_t complete;
-};
+} __no_const;
 
 struct cryptd_hash_ctx {
 	struct crypto_shash *child;
@@ -80,7 +80,7 @@ struct cryptd_aead_ctx {
 
 struct cryptd_aead_request_ctx {
 	crypto_completion_t complete;
-};
+} __no_const;
 
 static void cryptd_queue_worker(struct work_struct *work);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/Documentation/dontdiff linux-3.3.8-pax/Documentation/dontdiff
--- linux-3.3.8/Documentation/dontdiff	2012-03-19 10:38:37.724051002 +0100
+++ linux-3.3.8-pax/Documentation/dontdiff	2012-03-29 23:09:32.894341004 +0200
@@ -2,9 +2,11 @@
 *.aux
 *.bin
 *.bz2
+*.c.[012]*.*
 *.cis
 *.cpio
 *.csp
+*.dbg
 *.dsp
 *.dvi
 *.elf
@@ -14,6 +16,7 @@
 *.gcov
 *.gen.S
 *.gif
+*.gmo
 *.grep
 *.grp
 *.gz
@@ -48,9 +51,11 @@
 *.tab.h
 *.tex
 *.ver
+*.vim
 *.xml
 *.xz
 *_MODULES
+*_reg_safe.h
 *_vga16.c
 *~
 \#*#
@@ -69,6 +74,7 @@ Image
 Module.markers
 Module.symvers
 PENDING
+PERF*
 SCCS
 System.map*
 TAGS
@@ -92,19 +98,24 @@ bounds.h
 bsetup
 btfixupprep
 build
+builtin-policy.h
 bvmlinux
 bzImage*
 capability_names.h
 capflags.c
 classlist.h*
+clut_vga16.c
+common-cmds.h
 comp*.log
 compile.h*
 conf
 config
 config-*
 config_data.h*
+config.c
 config.mak
 config.mak.autogen
+config.tmp
 conmakehash
 consolemap_deftbl.c*
 cpustr.h
@@ -115,9 +126,11 @@ devlist.h*
 dnotify_test
 docproc
 dslm
+dtc-lexer.lex.c
 elf2ecoff
 elfconfig.h*
 evergreen_reg_safe.h
+exception_policy.conf
 fixdep
 flask.h
 fore200e_mkfirm
@@ -125,12 +138,15 @@ fore200e_pca_fw.c*
 gconf
 gconf.glade.h
 gen-devlist
+gen-kdb_cmds.c
 gen_crc32table
 gen_init_cpio
 generated
 genheaders
 genksyms
 *_gray256.c
+hash
+hid-example
 hpet_example
 hugepage-mmap
 hugepage-shm
@@ -145,7 +161,7 @@ int32.c
 int4.c
 int8.c
 kallsyms
-kconfig
+kern_constants.h
 keywords.c
 ksym.c*
 ksym.h*
@@ -153,7 +169,7 @@ kxgettext
 lkc_defs.h
 lex.c
 lex.*.c
-linux
+lib1funcs.S
 logo_*.c
 logo_*_clut224.c
 logo_*_mono.c
@@ -165,14 +181,15 @@ machtypes.h
 map
 map_hugetlb
 maui_boot.h
-media
 mconf
+mdp
 miboot*
 mk_elfconfig
 mkboot
 mkbugboot
 mkcpustr
 mkdep
+mkpiggy
 mkprep
 mkregtable
 mktables
@@ -208,6 +225,7 @@ r300_reg_safe.h
 r420_reg_safe.h
 r600_reg_safe.h
 recordmcount
+regdb.c
 relocs
 rlim_names.h
 rn50_reg_safe.h
@@ -218,6 +236,7 @@ setup
 setup.bin
 setup.elf
 sImage
+slabinfo
 sm_tbl*
 split-include
 syscalltab.h
@@ -228,6 +247,7 @@ tftpboot.img
 timeconst.h
 times.h*
 trix_boot.h
+user_constants.h
 utsrelease.h*
 vdso-syms.lds
 vdso.lds
@@ -245,7 +265,9 @@ vmlinux
 vmlinux-*
 vmlinux.aout
 vmlinux.bin.all
+vmlinux.bin.bz2
 vmlinux.lds
+vmlinux.relocs
 vmlinuz
 voffset.h
 vsyscall.lds
@@ -253,9 +275,11 @@ vsyscall_32.lds
 wanxlfw.inc
 uImage
 unifdef
+utsrelease.h
 wakeup.bin
 wakeup.elf
 wakeup.lds
 zImage*
 zconf.hash.c
+zconf.lex.c
 zoffset.h
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/Documentation/kernel-parameters.txt linux-3.3.8-pax/Documentation/kernel-parameters.txt
--- linux-3.3.8/Documentation/kernel-parameters.txt	2012-03-19 10:38:38.048050986 +0100
+++ linux-3.3.8-pax/Documentation/kernel-parameters.txt	2012-03-19 10:43:43.536034677 +0100
@@ -1977,6 +1977,13 @@ bytes respectively. Such letter suffixes
 			the specified number of seconds.  This is to be used if
 			your oopses keep scrolling off the screen.
 
+	pax_nouderef	[X86] disables UDEREF.  Most likely needed under certain
+			virtualization environments that don't cope well with the
+			expand down segment used by UDEREF on X86-32 or the frequent
+			page table updates on X86-64.
+
+	pax_softmode=	0/1 to disable/enable PaX softmode on boot already.
+
 	pcbit=		[HW,ISDN]
 
 	pcd.		[PARIDE]
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/acpi/apei/cper.c linux-3.3.8-pax/drivers/acpi/apei/cper.c
--- linux-3.3.8/drivers/acpi/apei/cper.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/acpi/apei/cper.c	2012-03-19 10:43:43.536034677 +0100
@@ -38,12 +38,12 @@
  */
 u64 cper_next_record_id(void)
 {
-	static atomic64_t seq;
+	static atomic64_unchecked_t seq;
 
-	if (!atomic64_read(&seq))
-		atomic64_set(&seq, ((u64)get_seconds()) << 32);
+	if (!atomic64_read_unchecked(&seq))
+		atomic64_set_unchecked(&seq, ((u64)get_seconds()) << 32);
 
-	return atomic64_inc_return(&seq);
+	return atomic64_inc_return_unchecked(&seq);
 }
 EXPORT_SYMBOL_GPL(cper_next_record_id);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/acpi/ec_sys.c linux-3.3.8-pax/drivers/acpi/ec_sys.c
--- linux-3.3.8/drivers/acpi/ec_sys.c	2012-03-19 10:38:57.860049930 +0100
+++ linux-3.3.8-pax/drivers/acpi/ec_sys.c	2012-03-19 10:43:43.540034677 +0100
@@ -12,6 +12,7 @@
 #include <linux/acpi.h>
 #include <linux/debugfs.h>
 #include <linux/module.h>
+#include <linux/uaccess.h>
 #include "internal.h"
 
 MODULE_AUTHOR("Thomas Renninger <trenn@suse.de>");
@@ -40,7 +41,7 @@ static ssize_t acpi_ec_read_io(struct fi
 	 * struct acpi_ec *ec = ((struct seq_file *)f->private_data)->private;
 	 */
 	unsigned int size = EC_SPACE_SIZE;
-	u8 *data = (u8 *) buf;
+	u8 data;
 	loff_t init_off = *off;
 	int err = 0;
 
@@ -53,9 +54,11 @@ static ssize_t acpi_ec_read_io(struct fi
 		size = count;
 
 	while (size) {
-		err = ec_read(*off, &data[*off - init_off]);
+		err = ec_read(*off, &data);
 		if (err)
 			return err;
+		if (put_user(data, &buf[*off - init_off]))
+			return -EFAULT;
 		*off += 1;
 		size--;
 	}
@@ -71,7 +74,6 @@ static ssize_t acpi_ec_write_io(struct f
 
 	unsigned int size = count;
 	loff_t init_off = *off;
-	u8 *data = (u8 *) buf;
 	int err = 0;
 
 	if (*off >= EC_SPACE_SIZE)
@@ -82,7 +84,9 @@ static ssize_t acpi_ec_write_io(struct f
 	}
 
 	while (size) {
-		u8 byte_write = data[*off - init_off];
+		u8 byte_write;
+		if (get_user(byte_write, &buf[*off - init_off]))
+			return -EFAULT;
 		err = ec_write(*off, byte_write);
 		if (err)
 			return err;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/acpi/proc.c linux-3.3.8-pax/drivers/acpi/proc.c
--- linux-3.3.8/drivers/acpi/proc.c	2012-01-08 19:47:50.571472929 +0100
+++ linux-3.3.8-pax/drivers/acpi/proc.c	2012-03-19 10:43:43.540034677 +0100
@@ -343,19 +343,13 @@ acpi_system_write_wakeup_device(struct f
 				size_t count, loff_t * ppos)
 {
 	struct list_head *node, *next;
-	char strbuf[5];
-	char str[5] = "";
-	unsigned int len = count;
+	char strbuf[5] = {0};
 
-	if (len > 4)
-		len = 4;
-	if (len < 0)
+	if (count > 4)
+		count = 4;
+	if (copy_from_user(strbuf, buffer, count))
 		return -EFAULT;
-
-	if (copy_from_user(strbuf, buffer, len))
-		return -EFAULT;
-	strbuf[len] = '\0';
-	sscanf(strbuf, "%s", str);
+	strbuf[count] = '\0';
 
 	mutex_lock(&acpi_device_lock);
 	list_for_each_safe(node, next, &acpi_wakeup_device_list) {
@@ -364,7 +358,7 @@ acpi_system_write_wakeup_device(struct f
 		if (!dev->wakeup.flags.valid)
 			continue;
 
-		if (!strncmp(dev->pnp.bus_id, str, 4)) {
+		if (!strncmp(dev->pnp.bus_id, strbuf, 4)) {
 			if (device_can_wakeup(&dev->dev)) {
 				bool enable = !device_may_wakeup(&dev->dev);
 				device_set_wakeup_enable(&dev->dev, enable);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/acpi/processor_driver.c linux-3.3.8-pax/drivers/acpi/processor_driver.c
--- linux-3.3.8/drivers/acpi/processor_driver.c	2012-03-19 10:38:57.864049929 +0100
+++ linux-3.3.8-pax/drivers/acpi/processor_driver.c	2012-03-19 10:43:43.540034677 +0100
@@ -555,7 +555,7 @@ static int __cpuinit acpi_processor_add(
 		return 0;
 #endif
 
-	BUG_ON((pr->id >= nr_cpu_ids) || (pr->id < 0));
+	BUG_ON(pr->id >= nr_cpu_ids);
 
 	/*
 	 * Buggy BIOS check
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ata/libata-core.c linux-3.3.8-pax/drivers/ata/libata-core.c
--- linux-3.3.8/drivers/ata/libata-core.c	2012-03-19 10:38:57.896049928 +0100
+++ linux-3.3.8-pax/drivers/ata/libata-core.c	2012-03-19 10:43:43.544034677 +0100
@@ -4736,7 +4736,7 @@ void ata_qc_free(struct ata_queued_cmd *
 	struct ata_port *ap;
 	unsigned int tag;
 
-	WARN_ON_ONCE(qc == NULL); /* ata_qc_from_tag _might_ return NULL */
+	BUG_ON(qc == NULL); /* ata_qc_from_tag _might_ return NULL */
 	ap = qc->ap;
 
 	qc->flags = 0;
@@ -4752,7 +4752,7 @@ void __ata_qc_complete(struct ata_queued
 	struct ata_port *ap;
 	struct ata_link *link;
 
-	WARN_ON_ONCE(qc == NULL); /* ata_qc_from_tag _might_ return NULL */
+	BUG_ON(qc == NULL); /* ata_qc_from_tag _might_ return NULL */
 	WARN_ON_ONCE(!(qc->flags & ATA_QCFLAG_ACTIVE));
 	ap = qc->ap;
 	link = qc->dev->link;
@@ -5816,6 +5816,7 @@ static void ata_finalize_port_ops(struct
 		return;
 
 	spin_lock(&lock);
+	pax_open_kernel();
 
 	for (cur = ops->inherits; cur; cur = cur->inherits) {
 		void **inherit = (void **)cur;
@@ -5829,8 +5830,9 @@ static void ata_finalize_port_ops(struct
 		if (IS_ERR(*pp))
 			*pp = NULL;
 
-	ops->inherits = NULL;
+	*(struct ata_port_operations **)&ops->inherits = NULL;
 
+	pax_close_kernel();
 	spin_unlock(&lock);
 }
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ata/pata_arasan_cf.c linux-3.3.8-pax/drivers/ata/pata_arasan_cf.c
--- linux-3.3.8/drivers/ata/pata_arasan_cf.c	2012-03-19 10:38:57.908049923 +0100
+++ linux-3.3.8-pax/drivers/ata/pata_arasan_cf.c	2012-03-19 10:43:43.544034677 +0100
@@ -862,7 +862,9 @@ static int __devinit arasan_cf_probe(str
 	/* Handle platform specific quirks */
 	if (pdata->quirk) {
 		if (pdata->quirk & CF_BROKEN_PIO) {
-			ap->ops->set_piomode = NULL;
+			pax_open_kernel();
+			*(void **)&ap->ops->set_piomode = NULL;
+			pax_close_kernel();
 			ap->pio_mask = 0;
 		}
 		if (pdata->quirk & CF_BROKEN_MWDMA)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/atm/adummy.c linux-3.3.8-pax/drivers/atm/adummy.c
--- linux-3.3.8/drivers/atm/adummy.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/atm/adummy.c	2012-03-19 10:43:43.548034675 +0100
@@ -114,7 +114,7 @@ adummy_send(struct atm_vcc *vcc, struct
 		vcc->pop(vcc, skb);
 	else
 		dev_kfree_skb_any(skb);
-	atomic_inc(&vcc->stats->tx);
+	atomic_inc_unchecked(&vcc->stats->tx);
 
 	return 0;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/atm/ambassador.c linux-3.3.8-pax/drivers/atm/ambassador.c
--- linux-3.3.8/drivers/atm/ambassador.c	2011-10-24 12:48:27.047091731 +0200
+++ linux-3.3.8-pax/drivers/atm/ambassador.c	2012-03-19 10:43:43.548034675 +0100
@@ -454,7 +454,7 @@ static void tx_complete (amb_dev * dev,
   PRINTD (DBG_FLOW|DBG_TX, "tx_complete %p %p", dev, tx);
   
   // VC layer stats
-  atomic_inc(&ATM_SKB(skb)->vcc->stats->tx);
+  atomic_inc_unchecked(&ATM_SKB(skb)->vcc->stats->tx);
   
   // free the descriptor
   kfree (tx_descr);
@@ -495,7 +495,7 @@ static void rx_complete (amb_dev * dev,
 	  dump_skb ("<<<", vc, skb);
 	  
 	  // VC layer stats
-	  atomic_inc(&atm_vcc->stats->rx);
+	  atomic_inc_unchecked(&atm_vcc->stats->rx);
 	  __net_timestamp(skb);
 	  // end of our responsibility
 	  atm_vcc->push (atm_vcc, skb);
@@ -510,7 +510,7 @@ static void rx_complete (amb_dev * dev,
       } else {
       	PRINTK (KERN_INFO, "dropped over-size frame");
 	// should we count this?
-	atomic_inc(&atm_vcc->stats->rx_drop);
+	atomic_inc_unchecked(&atm_vcc->stats->rx_drop);
       }
       
     } else {
@@ -1338,7 +1338,7 @@ static int amb_send (struct atm_vcc * at
   }
   
   if (check_area (skb->data, skb->len)) {
-    atomic_inc(&atm_vcc->stats->tx_err);
+    atomic_inc_unchecked(&atm_vcc->stats->tx_err);
     return -ENOMEM; // ?
   }
   
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/atm/atmtcp.c linux-3.3.8-pax/drivers/atm/atmtcp.c
--- linux-3.3.8/drivers/atm/atmtcp.c	2011-10-24 12:48:27.067091730 +0200
+++ linux-3.3.8-pax/drivers/atm/atmtcp.c	2012-03-19 10:43:43.548034675 +0100
@@ -207,7 +207,7 @@ static int atmtcp_v_send(struct atm_vcc
 		if (vcc->pop) vcc->pop(vcc,skb);
 		else dev_kfree_skb(skb);
 		if (dev_data) return 0;
-		atomic_inc(&vcc->stats->tx_err);
+		atomic_inc_unchecked(&vcc->stats->tx_err);
 		return -ENOLINK;
 	}
 	size = skb->len+sizeof(struct atmtcp_hdr);
@@ -215,7 +215,7 @@ static int atmtcp_v_send(struct atm_vcc
 	if (!new_skb) {
 		if (vcc->pop) vcc->pop(vcc,skb);
 		else dev_kfree_skb(skb);
-		atomic_inc(&vcc->stats->tx_err);
+		atomic_inc_unchecked(&vcc->stats->tx_err);
 		return -ENOBUFS;
 	}
 	hdr = (void *) skb_put(new_skb,sizeof(struct atmtcp_hdr));
@@ -226,8 +226,8 @@ static int atmtcp_v_send(struct atm_vcc
 	if (vcc->pop) vcc->pop(vcc,skb);
 	else dev_kfree_skb(skb);
 	out_vcc->push(out_vcc,new_skb);
-	atomic_inc(&vcc->stats->tx);
-	atomic_inc(&out_vcc->stats->rx);
+	atomic_inc_unchecked(&vcc->stats->tx);
+	atomic_inc_unchecked(&out_vcc->stats->rx);
 	return 0;
 }
 
@@ -301,7 +301,7 @@ static int atmtcp_c_send(struct atm_vcc
 	out_vcc = find_vcc(dev, ntohs(hdr->vpi), ntohs(hdr->vci));
 	read_unlock(&vcc_sklist_lock);
 	if (!out_vcc) {
-		atomic_inc(&vcc->stats->tx_err);
+		atomic_inc_unchecked(&vcc->stats->tx_err);
 		goto done;
 	}
 	skb_pull(skb,sizeof(struct atmtcp_hdr));
@@ -313,8 +313,8 @@ static int atmtcp_c_send(struct atm_vcc
 	__net_timestamp(new_skb);
 	skb_copy_from_linear_data(skb, skb_put(new_skb, skb->len), skb->len);
 	out_vcc->push(out_vcc,new_skb);
-	atomic_inc(&vcc->stats->tx);
-	atomic_inc(&out_vcc->stats->rx);
+	atomic_inc_unchecked(&vcc->stats->tx);
+	atomic_inc_unchecked(&out_vcc->stats->rx);
 done:
 	if (vcc->pop) vcc->pop(vcc,skb);
 	else dev_kfree_skb(skb);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/atm/eni.c linux-3.3.8-pax/drivers/atm/eni.c
--- linux-3.3.8/drivers/atm/eni.c	2012-01-08 19:47:51.223472894 +0100
+++ linux-3.3.8-pax/drivers/atm/eni.c	2012-03-19 10:43:43.552034673 +0100
@@ -526,7 +526,7 @@ static int rx_aal0(struct atm_vcc *vcc)
 		DPRINTK(DEV_LABEL "(itf %d): trashing empty cell\n",
 		    vcc->dev->number);
 		length = 0;
-		atomic_inc(&vcc->stats->rx_err);
+		atomic_inc_unchecked(&vcc->stats->rx_err);
 	}
 	else {
 		length = ATM_CELL_SIZE-1; /* no HEC */
@@ -581,7 +581,7 @@ static int rx_aal5(struct atm_vcc *vcc)
 			    size);
 		}
 		eff = length = 0;
-		atomic_inc(&vcc->stats->rx_err);
+		atomic_inc_unchecked(&vcc->stats->rx_err);
 	}
 	else {
 		size = (descr & MID_RED_COUNT)*(ATM_CELL_PAYLOAD >> 2);
@@ -598,7 +598,7 @@ static int rx_aal5(struct atm_vcc *vcc)
 			    "(VCI=%d,length=%ld,size=%ld (descr 0x%lx))\n",
 			    vcc->dev->number,vcc->vci,length,size << 2,descr);
 			length = eff = 0;
-			atomic_inc(&vcc->stats->rx_err);
+			atomic_inc_unchecked(&vcc->stats->rx_err);
 		}
 	}
 	skb = eff ? atm_alloc_charge(vcc,eff << 2,GFP_ATOMIC) : NULL;
@@ -771,7 +771,7 @@ rx_dequeued++;
 			vcc->push(vcc,skb);
 			pushed++;
 		}
-		atomic_inc(&vcc->stats->rx);
+		atomic_inc_unchecked(&vcc->stats->rx);
 	}
 	wake_up(&eni_dev->rx_wait);
 }
@@ -1229,7 +1229,7 @@ static void dequeue_tx(struct atm_dev *d
 		    PCI_DMA_TODEVICE);
 		if (vcc->pop) vcc->pop(vcc,skb);
 		else dev_kfree_skb_irq(skb);
-		atomic_inc(&vcc->stats->tx);
+		atomic_inc_unchecked(&vcc->stats->tx);
 		wake_up(&eni_dev->tx_wait);
 dma_complete++;
 	}
@@ -1569,7 +1569,7 @@ tx_complete++;
 /*--------------------------------- entries ---------------------------------*/
 
 
-static const char *media_name[] __devinitdata = {
+static const char *media_name[] __devinitconst = {
     "MMF", "SMF", "MMF", "03?", /*  0- 3 */
     "UTP", "05?", "06?", "07?", /*  4- 7 */
     "TAXI","09?", "10?", "11?", /*  8-11 */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/atm/firestream.c linux-3.3.8-pax/drivers/atm/firestream.c
--- linux-3.3.8/drivers/atm/firestream.c	2011-10-24 12:48:27.075091729 +0200
+++ linux-3.3.8-pax/drivers/atm/firestream.c	2012-03-19 10:43:43.552034673 +0100
@@ -750,7 +750,7 @@ static void process_txdone_queue (struct
 				}
 			}
 
-			atomic_inc(&ATM_SKB(skb)->vcc->stats->tx);
+			atomic_inc_unchecked(&ATM_SKB(skb)->vcc->stats->tx);
 
 			fs_dprintk (FS_DEBUG_TXMEM, "i");
 			fs_dprintk (FS_DEBUG_ALLOC, "Free t-skb: %p\n", skb);
@@ -817,7 +817,7 @@ static void process_incoming (struct fs_
 #endif
 				skb_put (skb, qe->p1 & 0xffff); 
 				ATM_SKB(skb)->vcc = atm_vcc;
-				atomic_inc(&atm_vcc->stats->rx);
+				atomic_inc_unchecked(&atm_vcc->stats->rx);
 				__net_timestamp(skb);
 				fs_dprintk (FS_DEBUG_ALLOC, "Free rec-skb: %p (pushed)\n", skb);
 				atm_vcc->push (atm_vcc, skb);
@@ -838,12 +838,12 @@ static void process_incoming (struct fs_
 				kfree (pe);
 			}
 			if (atm_vcc)
-				atomic_inc(&atm_vcc->stats->rx_drop);
+				atomic_inc_unchecked(&atm_vcc->stats->rx_drop);
 			break;
 		case 0x1f: /*  Reassembly abort: no buffers. */
 			/* Silently increment error counter. */
 			if (atm_vcc)
-				atomic_inc(&atm_vcc->stats->rx_drop);
+				atomic_inc_unchecked(&atm_vcc->stats->rx_drop);
 			break;
 		default: /* Hmm. Haven't written the code to handle the others yet... -- REW */
 			printk (KERN_WARNING "Don't know what to do with RX status %x: %s.\n", 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/atm/fore200e.c linux-3.3.8-pax/drivers/atm/fore200e.c
--- linux-3.3.8/drivers/atm/fore200e.c	2011-10-24 12:48:27.079091729 +0200
+++ linux-3.3.8-pax/drivers/atm/fore200e.c	2012-03-19 10:43:43.556034673 +0100
@@ -933,9 +933,9 @@ fore200e_tx_irq(struct fore200e* fore200
 #endif
 		/* check error condition */
 		if (*entry->status & STATUS_ERROR)
-		    atomic_inc(&vcc->stats->tx_err);
+		    atomic_inc_unchecked(&vcc->stats->tx_err);
 		else
-		    atomic_inc(&vcc->stats->tx);
+		    atomic_inc_unchecked(&vcc->stats->tx);
 	    }
 	}
 
@@ -1084,7 +1084,7 @@ fore200e_push_rpd(struct fore200e* fore2
     if (skb == NULL) {
 	DPRINTK(2, "unable to alloc new skb, rx PDU length = %d\n", pdu_len);
 
-	atomic_inc(&vcc->stats->rx_drop);
+	atomic_inc_unchecked(&vcc->stats->rx_drop);
 	return -ENOMEM;
     } 
 
@@ -1127,14 +1127,14 @@ fore200e_push_rpd(struct fore200e* fore2
 
 	dev_kfree_skb_any(skb);
 
-	atomic_inc(&vcc->stats->rx_drop);
+	atomic_inc_unchecked(&vcc->stats->rx_drop);
 	return -ENOMEM;
     }
 
     ASSERT(atomic_read(&sk_atm(vcc)->sk_wmem_alloc) >= 0);
 
     vcc->push(vcc, skb);
-    atomic_inc(&vcc->stats->rx);
+    atomic_inc_unchecked(&vcc->stats->rx);
 
     ASSERT(atomic_read(&sk_atm(vcc)->sk_wmem_alloc) >= 0);
 
@@ -1212,7 +1212,7 @@ fore200e_rx_irq(struct fore200e* fore200
 		DPRINTK(2, "damaged PDU on %d.%d.%d\n",
 			fore200e->atm_dev->number,
 			entry->rpd->atm_header.vpi, entry->rpd->atm_header.vci);
-		atomic_inc(&vcc->stats->rx_err);
+		atomic_inc_unchecked(&vcc->stats->rx_err);
 	    }
 	}
 
@@ -1657,7 +1657,7 @@ fore200e_send(struct atm_vcc *vcc, struc
 		goto retry_here;
 	    }
 
-	    atomic_inc(&vcc->stats->tx_err);
+	    atomic_inc_unchecked(&vcc->stats->tx_err);
 
 	    fore200e->tx_sat++;
 	    DPRINTK(2, "tx queue of device %s is saturated, PDU dropped - heartbeat is %08x\n",
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/atm/he.c linux-3.3.8-pax/drivers/atm/he.c
--- linux-3.3.8/drivers/atm/he.c	2012-03-19 10:38:57.928049927 +0100
+++ linux-3.3.8-pax/drivers/atm/he.c	2012-03-19 10:43:43.556034673 +0100
@@ -1709,7 +1709,7 @@ he_service_rbrq(struct he_dev *he_dev, i
 
 		if (RBRQ_HBUF_ERR(he_dev->rbrq_head)) {
 			hprintk("HBUF_ERR!  (cid 0x%x)\n", cid);
-				atomic_inc(&vcc->stats->rx_drop);
+				atomic_inc_unchecked(&vcc->stats->rx_drop);
 			goto return_host_buffers;
 		}
 
@@ -1736,7 +1736,7 @@ he_service_rbrq(struct he_dev *he_dev, i
 				RBRQ_LEN_ERR(he_dev->rbrq_head)
 							? "LEN_ERR" : "",
 							vcc->vpi, vcc->vci);
-			atomic_inc(&vcc->stats->rx_err);
+			atomic_inc_unchecked(&vcc->stats->rx_err);
 			goto return_host_buffers;
 		}
 
@@ -1788,7 +1788,7 @@ he_service_rbrq(struct he_dev *he_dev, i
 		vcc->push(vcc, skb);
 		spin_lock(&he_dev->global_lock);
 
-		atomic_inc(&vcc->stats->rx);
+		atomic_inc_unchecked(&vcc->stats->rx);
 
 return_host_buffers:
 		++pdus_assembled;
@@ -2114,7 +2114,7 @@ __enqueue_tpd(struct he_dev *he_dev, str
 					tpd->vcc->pop(tpd->vcc, tpd->skb);
 				else
 					dev_kfree_skb_any(tpd->skb);
-				atomic_inc(&tpd->vcc->stats->tx_err);
+				atomic_inc_unchecked(&tpd->vcc->stats->tx_err);
 			}
 			pci_pool_free(he_dev->tpd_pool, tpd, TPD_ADDR(tpd->status));
 			return;
@@ -2526,7 +2526,7 @@ he_send(struct atm_vcc *vcc, struct sk_b
 			vcc->pop(vcc, skb);
 		else
 			dev_kfree_skb_any(skb);
-		atomic_inc(&vcc->stats->tx_err);
+		atomic_inc_unchecked(&vcc->stats->tx_err);
 		return -EINVAL;
 	}
 
@@ -2537,7 +2537,7 @@ he_send(struct atm_vcc *vcc, struct sk_b
 			vcc->pop(vcc, skb);
 		else
 			dev_kfree_skb_any(skb);
-		atomic_inc(&vcc->stats->tx_err);
+		atomic_inc_unchecked(&vcc->stats->tx_err);
 		return -EINVAL;
 	}
 #endif
@@ -2549,7 +2549,7 @@ he_send(struct atm_vcc *vcc, struct sk_b
 			vcc->pop(vcc, skb);
 		else
 			dev_kfree_skb_any(skb);
-		atomic_inc(&vcc->stats->tx_err);
+		atomic_inc_unchecked(&vcc->stats->tx_err);
 		spin_unlock_irqrestore(&he_dev->global_lock, flags);
 		return -ENOMEM;
 	}
@@ -2591,7 +2591,7 @@ he_send(struct atm_vcc *vcc, struct sk_b
 					vcc->pop(vcc, skb);
 				else
 					dev_kfree_skb_any(skb);
-				atomic_inc(&vcc->stats->tx_err);
+				atomic_inc_unchecked(&vcc->stats->tx_err);
 				spin_unlock_irqrestore(&he_dev->global_lock, flags);
 				return -ENOMEM;
 			}
@@ -2622,7 +2622,7 @@ he_send(struct atm_vcc *vcc, struct sk_b
 	__enqueue_tpd(he_dev, tpd, cid);
 	spin_unlock_irqrestore(&he_dev->global_lock, flags);
 
-	atomic_inc(&vcc->stats->tx);
+	atomic_inc_unchecked(&vcc->stats->tx);
 
 	return 0;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/atm/horizon.c linux-3.3.8-pax/drivers/atm/horizon.c
--- linux-3.3.8/drivers/atm/horizon.c	2011-10-24 12:48:27.091091729 +0200
+++ linux-3.3.8-pax/drivers/atm/horizon.c	2012-03-19 10:43:43.560034674 +0100
@@ -1035,7 +1035,7 @@ static void rx_schedule (hrz_dev * dev,
 	{
 	  struct atm_vcc * vcc = ATM_SKB(skb)->vcc;
 	  // VC layer stats
-	  atomic_inc(&vcc->stats->rx);
+	  atomic_inc_unchecked(&vcc->stats->rx);
 	  __net_timestamp(skb);
 	  // end of our responsibility
 	  vcc->push (vcc, skb);
@@ -1187,7 +1187,7 @@ static void tx_schedule (hrz_dev * const
 	dev->tx_iovec = NULL;
 	
 	// VC layer stats
-	atomic_inc(&ATM_SKB(skb)->vcc->stats->tx);
+	atomic_inc_unchecked(&ATM_SKB(skb)->vcc->stats->tx);
 	
 	// free the skb
 	hrz_kfree_skb (skb);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/atm/idt77252.c linux-3.3.8-pax/drivers/atm/idt77252.c
--- linux-3.3.8/drivers/atm/idt77252.c	2012-01-08 19:47:51.235472893 +0100
+++ linux-3.3.8-pax/drivers/atm/idt77252.c	2012-03-19 10:43:43.560034674 +0100
@@ -812,7 +812,7 @@ drain_scq(struct idt77252_dev *card, str
 		else
 			dev_kfree_skb(skb);
 
-		atomic_inc(&vcc->stats->tx);
+		atomic_inc_unchecked(&vcc->stats->tx);
 	}
 
 	atomic_dec(&scq->used);
@@ -1075,13 +1075,13 @@ dequeue_rx(struct idt77252_dev *card, st
 			if ((sb = dev_alloc_skb(64)) == NULL) {
 				printk("%s: Can't allocate buffers for aal0.\n",
 				       card->name);
-				atomic_add(i, &vcc->stats->rx_drop);
+				atomic_add_unchecked(i, &vcc->stats->rx_drop);
 				break;
 			}
 			if (!atm_charge(vcc, sb->truesize)) {
 				RXPRINTK("%s: atm_charge() dropped aal0 packets.\n",
 					 card->name);
-				atomic_add(i - 1, &vcc->stats->rx_drop);
+				atomic_add_unchecked(i - 1, &vcc->stats->rx_drop);
 				dev_kfree_skb(sb);
 				break;
 			}
@@ -1098,7 +1098,7 @@ dequeue_rx(struct idt77252_dev *card, st
 			ATM_SKB(sb)->vcc = vcc;
 			__net_timestamp(sb);
 			vcc->push(vcc, sb);
-			atomic_inc(&vcc->stats->rx);
+			atomic_inc_unchecked(&vcc->stats->rx);
 
 			cell += ATM_CELL_PAYLOAD;
 		}
@@ -1135,13 +1135,13 @@ dequeue_rx(struct idt77252_dev *card, st
 			         "(CDC: %08x)\n",
 			         card->name, len, rpp->len, readl(SAR_REG_CDC));
 			recycle_rx_pool_skb(card, rpp);
-			atomic_inc(&vcc->stats->rx_err);
+			atomic_inc_unchecked(&vcc->stats->rx_err);
 			return;
 		}
 		if (stat & SAR_RSQE_CRC) {
 			RXPRINTK("%s: AAL5 CRC error.\n", card->name);
 			recycle_rx_pool_skb(card, rpp);
-			atomic_inc(&vcc->stats->rx_err);
+			atomic_inc_unchecked(&vcc->stats->rx_err);
 			return;
 		}
 		if (skb_queue_len(&rpp->queue) > 1) {
@@ -1152,7 +1152,7 @@ dequeue_rx(struct idt77252_dev *card, st
 				RXPRINTK("%s: Can't alloc RX skb.\n",
 					 card->name);
 				recycle_rx_pool_skb(card, rpp);
-				atomic_inc(&vcc->stats->rx_err);
+				atomic_inc_unchecked(&vcc->stats->rx_err);
 				return;
 			}
 			if (!atm_charge(vcc, skb->truesize)) {
@@ -1171,7 +1171,7 @@ dequeue_rx(struct idt77252_dev *card, st
 			__net_timestamp(skb);
 
 			vcc->push(vcc, skb);
-			atomic_inc(&vcc->stats->rx);
+			atomic_inc_unchecked(&vcc->stats->rx);
 
 			return;
 		}
@@ -1193,7 +1193,7 @@ dequeue_rx(struct idt77252_dev *card, st
 		__net_timestamp(skb);
 
 		vcc->push(vcc, skb);
-		atomic_inc(&vcc->stats->rx);
+		atomic_inc_unchecked(&vcc->stats->rx);
 
 		if (skb->truesize > SAR_FB_SIZE_3)
 			add_rx_skb(card, 3, SAR_FB_SIZE_3, 1);
@@ -1304,14 +1304,14 @@ idt77252_rx_raw(struct idt77252_dev *car
 		if (vcc->qos.aal != ATM_AAL0) {
 			RPRINTK("%s: raw cell for non AAL0 vc %u.%u\n",
 				card->name, vpi, vci);
-			atomic_inc(&vcc->stats->rx_drop);
+			atomic_inc_unchecked(&vcc->stats->rx_drop);
 			goto drop;
 		}
 	
 		if ((sb = dev_alloc_skb(64)) == NULL) {
 			printk("%s: Can't allocate buffers for AAL0.\n",
 			       card->name);
-			atomic_inc(&vcc->stats->rx_err);
+			atomic_inc_unchecked(&vcc->stats->rx_err);
 			goto drop;
 		}
 
@@ -1330,7 +1330,7 @@ idt77252_rx_raw(struct idt77252_dev *car
 		ATM_SKB(sb)->vcc = vcc;
 		__net_timestamp(sb);
 		vcc->push(vcc, sb);
-		atomic_inc(&vcc->stats->rx);
+		atomic_inc_unchecked(&vcc->stats->rx);
 
 drop:
 		skb_pull(queue, 64);
@@ -1955,13 +1955,13 @@ idt77252_send_skb(struct atm_vcc *vcc, s
 
 	if (vc == NULL) {
 		printk("%s: NULL connection in send().\n", card->name);
-		atomic_inc(&vcc->stats->tx_err);
+		atomic_inc_unchecked(&vcc->stats->tx_err);
 		dev_kfree_skb(skb);
 		return -EINVAL;
 	}
 	if (!test_bit(VCF_TX, &vc->flags)) {
 		printk("%s: Trying to transmit on a non-tx VC.\n", card->name);
-		atomic_inc(&vcc->stats->tx_err);
+		atomic_inc_unchecked(&vcc->stats->tx_err);
 		dev_kfree_skb(skb);
 		return -EINVAL;
 	}
@@ -1973,14 +1973,14 @@ idt77252_send_skb(struct atm_vcc *vcc, s
 		break;
 	default:
 		printk("%s: Unsupported AAL: %d\n", card->name, vcc->qos.aal);
-		atomic_inc(&vcc->stats->tx_err);
+		atomic_inc_unchecked(&vcc->stats->tx_err);
 		dev_kfree_skb(skb);
 		return -EINVAL;
 	}
 
 	if (skb_shinfo(skb)->nr_frags != 0) {
 		printk("%s: No scatter-gather yet.\n", card->name);
-		atomic_inc(&vcc->stats->tx_err);
+		atomic_inc_unchecked(&vcc->stats->tx_err);
 		dev_kfree_skb(skb);
 		return -EINVAL;
 	}
@@ -1988,7 +1988,7 @@ idt77252_send_skb(struct atm_vcc *vcc, s
 
 	err = queue_skb(card, vc, skb, oam);
 	if (err) {
-		atomic_inc(&vcc->stats->tx_err);
+		atomic_inc_unchecked(&vcc->stats->tx_err);
 		dev_kfree_skb(skb);
 		return err;
 	}
@@ -2011,7 +2011,7 @@ idt77252_send_oam(struct atm_vcc *vcc, v
 	skb = dev_alloc_skb(64);
 	if (!skb) {
 		printk("%s: Out of memory in send_oam().\n", card->name);
-		atomic_inc(&vcc->stats->tx_err);
+		atomic_inc_unchecked(&vcc->stats->tx_err);
 		return -ENOMEM;
 	}
 	atomic_add(skb->truesize, &sk_atm(vcc)->sk_wmem_alloc);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/atm/iphase.c linux-3.3.8-pax/drivers/atm/iphase.c
--- linux-3.3.8/drivers/atm/iphase.c	2012-03-19 10:38:57.932049926 +0100
+++ linux-3.3.8-pax/drivers/atm/iphase.c	2012-03-19 10:43:43.564034675 +0100
@@ -1146,7 +1146,7 @@ static int rx_pkt(struct atm_dev *dev)
 	status = (u_short) (buf_desc_ptr->desc_mode);  
 	if (status & (RX_CER | RX_PTE | RX_OFL))  
 	{  
-                atomic_inc(&vcc->stats->rx_err);
+                atomic_inc_unchecked(&vcc->stats->rx_err);
 		IF_ERR(printk("IA: bad packet, dropping it");)  
                 if (status & RX_CER) { 
                     IF_ERR(printk(" cause: packet CRC error\n");)
@@ -1169,7 +1169,7 @@ static int rx_pkt(struct atm_dev *dev)
 	len = dma_addr - buf_addr;  
         if (len > iadev->rx_buf_sz) {
            printk("Over %d bytes sdu received, dropped!!!\n", iadev->rx_buf_sz);
-           atomic_inc(&vcc->stats->rx_err);
+           atomic_inc_unchecked(&vcc->stats->rx_err);
 	   goto out_free_desc;
         }
 		  
@@ -1319,7 +1319,7 @@ static void rx_dle_intr(struct atm_dev *
           ia_vcc = INPH_IA_VCC(vcc);
           if (ia_vcc == NULL)
           {
-             atomic_inc(&vcc->stats->rx_err);
+             atomic_inc_unchecked(&vcc->stats->rx_err);
              atm_return(vcc, skb->truesize);
              dev_kfree_skb_any(skb);
              goto INCR_DLE;
@@ -1331,7 +1331,7 @@ static void rx_dle_intr(struct atm_dev *
           if ((length > iadev->rx_buf_sz) || (length > 
                               (skb->len - sizeof(struct cpcs_trailer))))
           {
-             atomic_inc(&vcc->stats->rx_err);
+             atomic_inc_unchecked(&vcc->stats->rx_err);
              IF_ERR(printk("rx_dle_intr: Bad  AAL5 trailer %d (skb len %d)", 
                                                             length, skb->len);)
              atm_return(vcc, skb->truesize);
@@ -1347,7 +1347,7 @@ static void rx_dle_intr(struct atm_dev *
 
 	  IF_RX(printk("rx_dle_intr: skb push");)  
 	  vcc->push(vcc,skb);  
-	  atomic_inc(&vcc->stats->rx);
+	  atomic_inc_unchecked(&vcc->stats->rx);
           iadev->rx_pkt_cnt++;
       }  
 INCR_DLE:
@@ -2827,15 +2827,15 @@ static int ia_ioctl(struct atm_dev *dev,
          {
              struct k_sonet_stats *stats;
              stats = &PRIV(_ia_dev[board])->sonet_stats;
-             printk("section_bip: %d\n", atomic_read(&stats->section_bip));
-             printk("line_bip   : %d\n", atomic_read(&stats->line_bip));
-             printk("path_bip   : %d\n", atomic_read(&stats->path_bip));
-             printk("line_febe  : %d\n", atomic_read(&stats->line_febe));
-             printk("path_febe  : %d\n", atomic_read(&stats->path_febe));
-             printk("corr_hcs   : %d\n", atomic_read(&stats->corr_hcs));
-             printk("uncorr_hcs : %d\n", atomic_read(&stats->uncorr_hcs));
-             printk("tx_cells   : %d\n", atomic_read(&stats->tx_cells));
-             printk("rx_cells   : %d\n", atomic_read(&stats->rx_cells));
+             printk("section_bip: %d\n", atomic_read_unchecked(&stats->section_bip));
+             printk("line_bip   : %d\n", atomic_read_unchecked(&stats->line_bip));
+             printk("path_bip   : %d\n", atomic_read_unchecked(&stats->path_bip));
+             printk("line_febe  : %d\n", atomic_read_unchecked(&stats->line_febe));
+             printk("path_febe  : %d\n", atomic_read_unchecked(&stats->path_febe));
+             printk("corr_hcs   : %d\n", atomic_read_unchecked(&stats->corr_hcs));
+             printk("uncorr_hcs : %d\n", atomic_read_unchecked(&stats->uncorr_hcs));
+             printk("tx_cells   : %d\n", atomic_read_unchecked(&stats->tx_cells));
+             printk("rx_cells   : %d\n", atomic_read_unchecked(&stats->rx_cells));
          }
             ia_cmds.status = 0;
             break;
@@ -2940,7 +2940,7 @@ static int ia_pkt_tx (struct atm_vcc *vc
 	if ((desc == 0) || (desc > iadev->num_tx_desc))  
 	{  
 		IF_ERR(printk(DEV_LABEL "invalid desc for send: %d\n", desc);) 
-                atomic_inc(&vcc->stats->tx);
+                atomic_inc_unchecked(&vcc->stats->tx);
 		if (vcc->pop)   
 		    vcc->pop(vcc, skb);   
 		else  
@@ -3045,14 +3045,14 @@ static int ia_pkt_tx (struct atm_vcc *vc
         ATM_DESC(skb) = vcc->vci;
         skb_queue_tail(&iadev->tx_dma_q, skb);
 
-        atomic_inc(&vcc->stats->tx);
+        atomic_inc_unchecked(&vcc->stats->tx);
         iadev->tx_pkt_cnt++;
 	/* Increment transaction counter */  
 	writel(2, iadev->dma+IPHASE5575_TX_COUNTER);  
         
 #if 0        
         /* add flow control logic */ 
-        if (atomic_read(&vcc->stats->tx) % 20 == 0) {
+        if (atomic_read_unchecked(&vcc->stats->tx) % 20 == 0) {
           if (iavcc->vc_desc_cnt > 10) {
              vcc->tx_quota =  vcc->tx_quota * 3 / 4;
             printk("Tx1:  vcc->tx_quota = %d \n", (u32)vcc->tx_quota );
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/atm/lanai.c linux-3.3.8-pax/drivers/atm/lanai.c
--- linux-3.3.8/drivers/atm/lanai.c	2012-01-08 19:47:51.251472892 +0100
+++ linux-3.3.8-pax/drivers/atm/lanai.c	2012-03-19 10:43:43.564034675 +0100
@@ -1303,7 +1303,7 @@ static void lanai_send_one_aal5(struct l
 	vcc_tx_add_aal5_trailer(lvcc, skb->len, 0, 0);
 	lanai_endtx(lanai, lvcc);
 	lanai_free_skb(lvcc->tx.atmvcc, skb);
-	atomic_inc(&lvcc->tx.atmvcc->stats->tx);
+	atomic_inc_unchecked(&lvcc->tx.atmvcc->stats->tx);
 }
 
 /* Try to fill the buffer - don't call unless there is backlog */
@@ -1426,7 +1426,7 @@ static void vcc_rx_aal5(struct lanai_vcc
 	ATM_SKB(skb)->vcc = lvcc->rx.atmvcc;
 	__net_timestamp(skb);
 	lvcc->rx.atmvcc->push(lvcc->rx.atmvcc, skb);
-	atomic_inc(&lvcc->rx.atmvcc->stats->rx);
+	atomic_inc_unchecked(&lvcc->rx.atmvcc->stats->rx);
     out:
 	lvcc->rx.buf.ptr = end;
 	cardvcc_write(lvcc, endptr, vcc_rxreadptr);
@@ -1667,7 +1667,7 @@ static int handle_service(struct lanai_d
 		DPRINTK("(itf %d) got RX service entry 0x%X for non-AAL5 "
 		    "vcc %d\n", lanai->number, (unsigned int) s, vci);
 		lanai->stats.service_rxnotaal5++;
-		atomic_inc(&lvcc->rx.atmvcc->stats->rx_err);
+		atomic_inc_unchecked(&lvcc->rx.atmvcc->stats->rx_err);
 		return 0;
 	}
 	if (likely(!(s & (SERVICE_TRASH | SERVICE_STREAM | SERVICE_CRCERR)))) {
@@ -1679,7 +1679,7 @@ static int handle_service(struct lanai_d
 		int bytes;
 		read_unlock(&vcc_sklist_lock);
 		DPRINTK("got trashed rx pdu on vci %d\n", vci);
-		atomic_inc(&lvcc->rx.atmvcc->stats->rx_err);
+		atomic_inc_unchecked(&lvcc->rx.atmvcc->stats->rx_err);
 		lvcc->stats.x.aal5.service_trash++;
 		bytes = (SERVICE_GET_END(s) * 16) -
 		    (((unsigned long) lvcc->rx.buf.ptr) -
@@ -1691,7 +1691,7 @@ static int handle_service(struct lanai_d
 	}
 	if (s & SERVICE_STREAM) {
 		read_unlock(&vcc_sklist_lock);
-		atomic_inc(&lvcc->rx.atmvcc->stats->rx_err);
+		atomic_inc_unchecked(&lvcc->rx.atmvcc->stats->rx_err);
 		lvcc->stats.x.aal5.service_stream++;
 		printk(KERN_ERR DEV_LABEL "(itf %d): Got AAL5 stream "
 		    "PDU on VCI %d!\n", lanai->number, vci);
@@ -1699,7 +1699,7 @@ static int handle_service(struct lanai_d
 		return 0;
 	}
 	DPRINTK("got rx crc error on vci %d\n", vci);
-	atomic_inc(&lvcc->rx.atmvcc->stats->rx_err);
+	atomic_inc_unchecked(&lvcc->rx.atmvcc->stats->rx_err);
 	lvcc->stats.x.aal5.service_rxcrc++;
 	lvcc->rx.buf.ptr = &lvcc->rx.buf.start[SERVICE_GET_END(s) * 4];
 	cardvcc_write(lvcc, SERVICE_GET_END(s), vcc_rxreadptr);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/atm/nicstar.c linux-3.3.8-pax/drivers/atm/nicstar.c
--- linux-3.3.8/drivers/atm/nicstar.c	2011-10-24 12:48:27.111091728 +0200
+++ linux-3.3.8-pax/drivers/atm/nicstar.c	2012-03-19 10:43:43.568034675 +0100
@@ -1654,7 +1654,7 @@ static int ns_send(struct atm_vcc *vcc,
 	if ((vc = (vc_map *) vcc->dev_data) == NULL) {
 		printk("nicstar%d: vcc->dev_data == NULL on ns_send().\n",
 		       card->index);
-		atomic_inc(&vcc->stats->tx_err);
+		atomic_inc_unchecked(&vcc->stats->tx_err);
 		dev_kfree_skb_any(skb);
 		return -EINVAL;
 	}
@@ -1662,7 +1662,7 @@ static int ns_send(struct atm_vcc *vcc,
 	if (!vc->tx) {
 		printk("nicstar%d: Trying to transmit on a non-tx VC.\n",
 		       card->index);
-		atomic_inc(&vcc->stats->tx_err);
+		atomic_inc_unchecked(&vcc->stats->tx_err);
 		dev_kfree_skb_any(skb);
 		return -EINVAL;
 	}
@@ -1670,14 +1670,14 @@ static int ns_send(struct atm_vcc *vcc,
 	if (vcc->qos.aal != ATM_AAL5 && vcc->qos.aal != ATM_AAL0) {
 		printk("nicstar%d: Only AAL0 and AAL5 are supported.\n",
 		       card->index);
-		atomic_inc(&vcc->stats->tx_err);
+		atomic_inc_unchecked(&vcc->stats->tx_err);
 		dev_kfree_skb_any(skb);
 		return -EINVAL;
 	}
 
 	if (skb_shinfo(skb)->nr_frags != 0) {
 		printk("nicstar%d: No scatter-gather yet.\n", card->index);
-		atomic_inc(&vcc->stats->tx_err);
+		atomic_inc_unchecked(&vcc->stats->tx_err);
 		dev_kfree_skb_any(skb);
 		return -EINVAL;
 	}
@@ -1725,11 +1725,11 @@ static int ns_send(struct atm_vcc *vcc,
 	}
 
 	if (push_scqe(card, vc, scq, &scqe, skb) != 0) {
-		atomic_inc(&vcc->stats->tx_err);
+		atomic_inc_unchecked(&vcc->stats->tx_err);
 		dev_kfree_skb_any(skb);
 		return -EIO;
 	}
-	atomic_inc(&vcc->stats->tx);
+	atomic_inc_unchecked(&vcc->stats->tx);
 
 	return 0;
 }
@@ -2046,14 +2046,14 @@ static void dequeue_rx(ns_dev * card, ns
 				printk
 				    ("nicstar%d: Can't allocate buffers for aal0.\n",
 				     card->index);
-				atomic_add(i, &vcc->stats->rx_drop);
+				atomic_add_unchecked(i, &vcc->stats->rx_drop);
 				break;
 			}
 			if (!atm_charge(vcc, sb->truesize)) {
 				RXPRINTK
 				    ("nicstar%d: atm_charge() dropped aal0 packets.\n",
 				     card->index);
-				atomic_add(i - 1, &vcc->stats->rx_drop);	/* already increased by 1 */
+				atomic_add_unchecked(i - 1, &vcc->stats->rx_drop);	/* already increased by 1 */
 				dev_kfree_skb_any(sb);
 				break;
 			}
@@ -2068,7 +2068,7 @@ static void dequeue_rx(ns_dev * card, ns
 			ATM_SKB(sb)->vcc = vcc;
 			__net_timestamp(sb);
 			vcc->push(vcc, sb);
-			atomic_inc(&vcc->stats->rx);
+			atomic_inc_unchecked(&vcc->stats->rx);
 			cell += ATM_CELL_PAYLOAD;
 		}
 
@@ -2085,7 +2085,7 @@ static void dequeue_rx(ns_dev * card, ns
 			if (iovb == NULL) {
 				printk("nicstar%d: Out of iovec buffers.\n",
 				       card->index);
-				atomic_inc(&vcc->stats->rx_drop);
+				atomic_inc_unchecked(&vcc->stats->rx_drop);
 				recycle_rx_buf(card, skb);
 				return;
 			}
@@ -2109,7 +2109,7 @@ static void dequeue_rx(ns_dev * card, ns
 		   small or large buffer itself. */
 	} else if (NS_PRV_IOVCNT(iovb) >= NS_MAX_IOVECS) {
 		printk("nicstar%d: received too big AAL5 SDU.\n", card->index);
-		atomic_inc(&vcc->stats->rx_err);
+		atomic_inc_unchecked(&vcc->stats->rx_err);
 		recycle_iovec_rx_bufs(card, (struct iovec *)iovb->data,
 				      NS_MAX_IOVECS);
 		NS_PRV_IOVCNT(iovb) = 0;
@@ -2129,7 +2129,7 @@ static void dequeue_rx(ns_dev * card, ns
 			    ("nicstar%d: Expected a small buffer, and this is not one.\n",
 			     card->index);
 			which_list(card, skb);
-			atomic_inc(&vcc->stats->rx_err);
+			atomic_inc_unchecked(&vcc->stats->rx_err);
 			recycle_rx_buf(card, skb);
 			vc->rx_iov = NULL;
 			recycle_iov_buf(card, iovb);
@@ -2142,7 +2142,7 @@ static void dequeue_rx(ns_dev * card, ns
 			    ("nicstar%d: Expected a large buffer, and this is not one.\n",
 			     card->index);
 			which_list(card, skb);
-			atomic_inc(&vcc->stats->rx_err);
+			atomic_inc_unchecked(&vcc->stats->rx_err);
 			recycle_iovec_rx_bufs(card, (struct iovec *)iovb->data,
 					      NS_PRV_IOVCNT(iovb));
 			vc->rx_iov = NULL;
@@ -2165,7 +2165,7 @@ static void dequeue_rx(ns_dev * card, ns
 				printk(" - PDU size mismatch.\n");
 			else
 				printk(".\n");
-			atomic_inc(&vcc->stats->rx_err);
+			atomic_inc_unchecked(&vcc->stats->rx_err);
 			recycle_iovec_rx_bufs(card, (struct iovec *)iovb->data,
 					      NS_PRV_IOVCNT(iovb));
 			vc->rx_iov = NULL;
@@ -2179,7 +2179,7 @@ static void dequeue_rx(ns_dev * card, ns
 			/* skb points to a small buffer */
 			if (!atm_charge(vcc, skb->truesize)) {
 				push_rxbufs(card, skb);
-				atomic_inc(&vcc->stats->rx_drop);
+				atomic_inc_unchecked(&vcc->stats->rx_drop);
 			} else {
 				skb_put(skb, len);
 				dequeue_sm_buf(card, skb);
@@ -2189,7 +2189,7 @@ static void dequeue_rx(ns_dev * card, ns
 				ATM_SKB(skb)->vcc = vcc;
 				__net_timestamp(skb);
 				vcc->push(vcc, skb);
-				atomic_inc(&vcc->stats->rx);
+				atomic_inc_unchecked(&vcc->stats->rx);
 			}
 		} else if (NS_PRV_IOVCNT(iovb) == 2) {	/* One small plus one large buffer */
 			struct sk_buff *sb;
@@ -2200,7 +2200,7 @@ static void dequeue_rx(ns_dev * card, ns
 			if (len <= NS_SMBUFSIZE) {
 				if (!atm_charge(vcc, sb->truesize)) {
 					push_rxbufs(card, sb);
-					atomic_inc(&vcc->stats->rx_drop);
+					atomic_inc_unchecked(&vcc->stats->rx_drop);
 				} else {
 					skb_put(sb, len);
 					dequeue_sm_buf(card, sb);
@@ -2210,7 +2210,7 @@ static void dequeue_rx(ns_dev * card, ns
 					ATM_SKB(sb)->vcc = vcc;
 					__net_timestamp(sb);
 					vcc->push(vcc, sb);
-					atomic_inc(&vcc->stats->rx);
+					atomic_inc_unchecked(&vcc->stats->rx);
 				}
 
 				push_rxbufs(card, skb);
@@ -2219,7 +2219,7 @@ static void dequeue_rx(ns_dev * card, ns
 
 				if (!atm_charge(vcc, skb->truesize)) {
 					push_rxbufs(card, skb);
-					atomic_inc(&vcc->stats->rx_drop);
+					atomic_inc_unchecked(&vcc->stats->rx_drop);
 				} else {
 					dequeue_lg_buf(card, skb);
 #ifdef NS_USE_DESTRUCTORS
@@ -2232,7 +2232,7 @@ static void dequeue_rx(ns_dev * card, ns
 					ATM_SKB(skb)->vcc = vcc;
 					__net_timestamp(skb);
 					vcc->push(vcc, skb);
-					atomic_inc(&vcc->stats->rx);
+					atomic_inc_unchecked(&vcc->stats->rx);
 				}
 
 				push_rxbufs(card, sb);
@@ -2253,7 +2253,7 @@ static void dequeue_rx(ns_dev * card, ns
 					printk
 					    ("nicstar%d: Out of huge buffers.\n",
 					     card->index);
-					atomic_inc(&vcc->stats->rx_drop);
+					atomic_inc_unchecked(&vcc->stats->rx_drop);
 					recycle_iovec_rx_bufs(card,
 							      (struct iovec *)
 							      iovb->data,
@@ -2304,7 +2304,7 @@ static void dequeue_rx(ns_dev * card, ns
 					card->hbpool.count++;
 				} else
 					dev_kfree_skb_any(hb);
-				atomic_inc(&vcc->stats->rx_drop);
+				atomic_inc_unchecked(&vcc->stats->rx_drop);
 			} else {
 				/* Copy the small buffer to the huge buffer */
 				sb = (struct sk_buff *)iov->iov_base;
@@ -2341,7 +2341,7 @@ static void dequeue_rx(ns_dev * card, ns
 #endif /* NS_USE_DESTRUCTORS */
 				__net_timestamp(hb);
 				vcc->push(vcc, hb);
-				atomic_inc(&vcc->stats->rx);
+				atomic_inc_unchecked(&vcc->stats->rx);
 			}
 		}
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/atm/solos-pci.c linux-3.3.8-pax/drivers/atm/solos-pci.c
--- linux-3.3.8/drivers/atm/solos-pci.c	2012-03-19 10:38:57.932049926 +0100
+++ linux-3.3.8-pax/drivers/atm/solos-pci.c	2012-03-19 10:43:43.568034675 +0100
@@ -714,7 +714,7 @@ void solos_bh(unsigned long card_arg)
 				}
 				atm_charge(vcc, skb->truesize);
 				vcc->push(vcc, skb);
-				atomic_inc(&vcc->stats->rx);
+				atomic_inc_unchecked(&vcc->stats->rx);
 				break;
 
 			case PKT_STATUS:
@@ -1008,7 +1008,7 @@ static uint32_t fpga_tx(struct solos_car
 			vcc = SKB_CB(oldskb)->vcc;
 
 			if (vcc) {
-				atomic_inc(&vcc->stats->tx);
+				atomic_inc_unchecked(&vcc->stats->tx);
 				solos_pop(vcc, oldskb);
 			} else
 				dev_kfree_skb_irq(oldskb);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/atm/suni.c linux-3.3.8-pax/drivers/atm/suni.c
--- linux-3.3.8/drivers/atm/suni.c	2011-10-24 12:48:27.115091727 +0200
+++ linux-3.3.8-pax/drivers/atm/suni.c	2012-03-19 10:43:43.568034675 +0100
@@ -50,8 +50,8 @@ static DEFINE_SPINLOCK(sunis_lock);
 
 
 #define ADD_LIMITED(s,v) \
-    atomic_add((v),&stats->s); \
-    if (atomic_read(&stats->s) < 0) atomic_set(&stats->s,INT_MAX);
+    atomic_add_unchecked((v),&stats->s); \
+    if (atomic_read_unchecked(&stats->s) < 0) atomic_set_unchecked(&stats->s,INT_MAX);
 
 
 static void suni_hz(unsigned long from_timer)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/atm/uPD98402.c linux-3.3.8-pax/drivers/atm/uPD98402.c
--- linux-3.3.8/drivers/atm/uPD98402.c	2011-10-24 12:48:27.123091727 +0200
+++ linux-3.3.8-pax/drivers/atm/uPD98402.c	2012-03-19 10:43:43.572034674 +0100
@@ -42,7 +42,7 @@ static int fetch_stats(struct atm_dev *d
 	struct sonet_stats tmp;
  	int error = 0;
 
-	atomic_add(GET(HECCT),&PRIV(dev)->sonet_stats.uncorr_hcs);
+	atomic_add_unchecked(GET(HECCT),&PRIV(dev)->sonet_stats.uncorr_hcs);
 	sonet_copy_stats(&PRIV(dev)->sonet_stats,&tmp);
 	if (arg) error = copy_to_user(arg,&tmp,sizeof(tmp));
 	if (zero && !error) {
@@ -161,9 +161,9 @@ static int uPD98402_ioctl(struct atm_dev
 
 
 #define ADD_LIMITED(s,v) \
-    { atomic_add(GET(v),&PRIV(dev)->sonet_stats.s); \
-    if (atomic_read(&PRIV(dev)->sonet_stats.s) < 0) \
-	atomic_set(&PRIV(dev)->sonet_stats.s,INT_MAX); }
+    { atomic_add_unchecked(GET(v),&PRIV(dev)->sonet_stats.s); \
+    if (atomic_read_unchecked(&PRIV(dev)->sonet_stats.s) < 0) \
+	atomic_set_unchecked(&PRIV(dev)->sonet_stats.s,INT_MAX); }
 
 
 static void stat_event(struct atm_dev *dev)
@@ -194,7 +194,7 @@ static void uPD98402_int(struct atm_dev
 		if (reason & uPD98402_INT_PFM) stat_event(dev);
 		if (reason & uPD98402_INT_PCO) {
 			(void) GET(PCOCR); /* clear interrupt cause */
-			atomic_add(GET(HECCT),
+			atomic_add_unchecked(GET(HECCT),
 			    &PRIV(dev)->sonet_stats.uncorr_hcs);
 		}
 		if ((reason & uPD98402_INT_RFO) && 
@@ -222,9 +222,9 @@ static int uPD98402_start(struct atm_dev
 	PUT(~(uPD98402_INT_PFM | uPD98402_INT_ALM | uPD98402_INT_RFO |
 	  uPD98402_INT_LOS),PIMR); /* enable them */
 	(void) fetch_stats(dev,NULL,1); /* clear kernel counters */
-	atomic_set(&PRIV(dev)->sonet_stats.corr_hcs,-1);
-	atomic_set(&PRIV(dev)->sonet_stats.tx_cells,-1);
-	atomic_set(&PRIV(dev)->sonet_stats.rx_cells,-1);
+	atomic_set_unchecked(&PRIV(dev)->sonet_stats.corr_hcs,-1);
+	atomic_set_unchecked(&PRIV(dev)->sonet_stats.tx_cells,-1);
+	atomic_set_unchecked(&PRIV(dev)->sonet_stats.rx_cells,-1);
 	return 0;
 }
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/atm/zatm.c linux-3.3.8-pax/drivers/atm/zatm.c
--- linux-3.3.8/drivers/atm/zatm.c	2011-10-24 12:48:27.123091727 +0200
+++ linux-3.3.8-pax/drivers/atm/zatm.c	2012-03-19 10:43:43.572034674 +0100
@@ -460,7 +460,7 @@ printk("dummy: 0x%08lx, 0x%08lx\n",dummy
 		}
 		if (!size) {
 			dev_kfree_skb_irq(skb);
-			if (vcc) atomic_inc(&vcc->stats->rx_err);
+			if (vcc) atomic_inc_unchecked(&vcc->stats->rx_err);
 			continue;
 		}
 		if (!atm_charge(vcc,skb->truesize)) {
@@ -470,7 +470,7 @@ printk("dummy: 0x%08lx, 0x%08lx\n",dummy
 		skb->len = size;
 		ATM_SKB(skb)->vcc = vcc;
 		vcc->push(vcc,skb);
-		atomic_inc(&vcc->stats->rx);
+		atomic_inc_unchecked(&vcc->stats->rx);
 	}
 	zout(pos & 0xffff,MTA(mbx));
 #if 0 /* probably a stupid idea */
@@ -734,7 +734,7 @@ if (*ZATM_PRV_DSC(skb) != (uPD98401_TXPD
 			skb_queue_head(&zatm_vcc->backlog,skb);
 			break;
 		}
-	atomic_inc(&vcc->stats->tx);
+	atomic_inc_unchecked(&vcc->stats->tx);
 	wake_up(&zatm_vcc->tx_wait);
 }
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/base/devtmpfs.c linux-3.3.8-pax/drivers/base/devtmpfs.c
--- linux-3.3.8/drivers/base/devtmpfs.c	2012-03-19 10:38:57.960049925 +0100
+++ linux-3.3.8-pax/drivers/base/devtmpfs.c	2012-03-19 10:43:43.572034674 +0100
@@ -368,7 +368,7 @@ int devtmpfs_mount(const char *mntdir)
 	if (!thread)
 		return 0;
 
-	err = sys_mount("devtmpfs", (char *)mntdir, "devtmpfs", MS_SILENT, NULL);
+	err = sys_mount((char __force_user *)"devtmpfs", (char __force_user *)mntdir, (char __force_user *)"devtmpfs", MS_SILENT, NULL);
 	if (err)
 		printk(KERN_INFO "devtmpfs: error mounting %i\n", err);
 	else
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/base/power/wakeup.c linux-3.3.8-pax/drivers/base/power/wakeup.c
--- linux-3.3.8/drivers/base/power/wakeup.c	2012-01-08 19:47:51.351472887 +0100
+++ linux-3.3.8-pax/drivers/base/power/wakeup.c	2012-03-19 10:43:43.576034673 +0100
@@ -30,14 +30,14 @@ bool events_check_enabled;
  * They need to be modified together atomically, so it's better to use one
  * atomic variable to hold them both.
  */
-static atomic_t combined_event_count = ATOMIC_INIT(0);
+static atomic_unchecked_t combined_event_count = ATOMIC_INIT(0);
 
 #define IN_PROGRESS_BITS	(sizeof(int) * 4)
 #define MAX_IN_PROGRESS		((1 << IN_PROGRESS_BITS) - 1)
 
 static void split_counters(unsigned int *cnt, unsigned int *inpr)
 {
-	unsigned int comb = atomic_read(&combined_event_count);
+	unsigned int comb = atomic_read_unchecked(&combined_event_count);
 
 	*cnt = (comb >> IN_PROGRESS_BITS);
 	*inpr = comb & MAX_IN_PROGRESS;
@@ -353,7 +353,7 @@ static void wakeup_source_activate(struc
 	ws->last_time = ktime_get();
 
 	/* Increment the counter of events in progress. */
-	atomic_inc(&combined_event_count);
+	atomic_inc_unchecked(&combined_event_count);
 }
 
 /**
@@ -443,7 +443,7 @@ static void wakeup_source_deactivate(str
 	 * Increment the counter of registered wakeup events and decrement the
 	 * couter of wakeup events in progress simultaneously.
 	 */
-	atomic_add(MAX_IN_PROGRESS, &combined_event_count);
+	atomic_add_unchecked(MAX_IN_PROGRESS, &combined_event_count);
 }
 
 /**
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/block/cciss.c linux-3.3.8-pax/drivers/block/cciss.c
--- linux-3.3.8/drivers/block/cciss.c	2012-03-19 10:38:58.040049919 +0100
+++ linux-3.3.8-pax/drivers/block/cciss.c	2012-03-19 10:43:43.576034673 +0100
@@ -3007,7 +3007,7 @@ static void start_io(ctlr_info_t *h)
 	while (!list_empty(&h->reqQ)) {
 		c = list_entry(h->reqQ.next, CommandList_struct, list);
 		/* can't do anything if fifo is full */
-		if ((h->access.fifo_full(h))) {
+		if ((h->access->fifo_full(h))) {
 			dev_warn(&h->pdev->dev, "fifo full\n");
 			break;
 		}
@@ -3017,7 +3017,7 @@ static void start_io(ctlr_info_t *h)
 		h->Qdepth--;
 
 		/* Tell the controller execute command */
-		h->access.submit_command(h, c);
+		h->access->submit_command(h, c);
 
 		/* Put job onto the completed Q */
 		addQ(&h->cmpQ, c);
@@ -3443,17 +3443,17 @@ startio:
 
 static inline unsigned long get_next_completion(ctlr_info_t *h)
 {
-	return h->access.command_completed(h);
+	return h->access->command_completed(h);
 }
 
 static inline int interrupt_pending(ctlr_info_t *h)
 {
-	return h->access.intr_pending(h);
+	return h->access->intr_pending(h);
 }
 
 static inline long interrupt_not_for_us(ctlr_info_t *h)
 {
-	return ((h->access.intr_pending(h) == 0) ||
+	return ((h->access->intr_pending(h) == 0) ||
 		(h->interrupts_enabled == 0));
 }
 
@@ -3486,7 +3486,7 @@ static inline u32 next_command(ctlr_info
 	u32 a;
 
 	if (unlikely(!(h->transMethod & CFGTBL_Trans_Performant)))
-		return h->access.command_completed(h);
+		return h->access->command_completed(h);
 
 	if ((*(h->reply_pool_head) & 1) == (h->reply_pool_wraparound)) {
 		a = *(h->reply_pool_head); /* Next cmd in ring buffer */
@@ -4044,7 +4044,7 @@ static void __devinit cciss_put_controll
 		trans_support & CFGTBL_Trans_use_short_tags);
 
 	/* Change the access methods to the performant access methods */
-	h->access = SA5_performant_access;
+	h->access = &SA5_performant_access;
 	h->transMethod = CFGTBL_Trans_Performant;
 
 	return;
@@ -4316,7 +4316,7 @@ static int __devinit cciss_pci_init(ctlr
 	if (prod_index < 0)
 		return -ENODEV;
 	h->product_name = products[prod_index].product_name;
-	h->access = *(products[prod_index].access);
+	h->access = products[prod_index].access;
 
 	if (cciss_board_disabled(h)) {
 		dev_warn(&h->pdev->dev, "controller appears to be disabled\n");
@@ -5041,7 +5041,7 @@ reinit_after_soft_reset:
 	}
 
 	/* make sure the board interrupts are off */
-	h->access.set_intr_mask(h, CCISS_INTR_OFF);
+	h->access->set_intr_mask(h, CCISS_INTR_OFF);
 	rc = cciss_request_irq(h, do_cciss_msix_intr, do_cciss_intx);
 	if (rc)
 		goto clean2;
@@ -5093,7 +5093,7 @@ reinit_after_soft_reset:
 		 * fake ones to scoop up any residual completions.
 		 */
 		spin_lock_irqsave(&h->lock, flags);
-		h->access.set_intr_mask(h, CCISS_INTR_OFF);
+		h->access->set_intr_mask(h, CCISS_INTR_OFF);
 		spin_unlock_irqrestore(&h->lock, flags);
 		free_irq(h->intr[h->intr_mode], h);
 		rc = cciss_request_irq(h, cciss_msix_discard_completions,
@@ -5113,9 +5113,9 @@ reinit_after_soft_reset:
 		dev_info(&h->pdev->dev, "Board READY.\n");
 		dev_info(&h->pdev->dev,
 			"Waiting for stale completions to drain.\n");
-		h->access.set_intr_mask(h, CCISS_INTR_ON);
+		h->access->set_intr_mask(h, CCISS_INTR_ON);
 		msleep(10000);
-		h->access.set_intr_mask(h, CCISS_INTR_OFF);
+		h->access->set_intr_mask(h, CCISS_INTR_OFF);
 
 		rc = controller_reset_failed(h->cfgtable);
 		if (rc)
@@ -5138,7 +5138,7 @@ reinit_after_soft_reset:
 	cciss_scsi_setup(h);
 
 	/* Turn the interrupts on so we can service requests */
-	h->access.set_intr_mask(h, CCISS_INTR_ON);
+	h->access->set_intr_mask(h, CCISS_INTR_ON);
 
 	/* Get the firmware version */
 	inq_buff = kzalloc(sizeof(InquiryData_struct), GFP_KERNEL);
@@ -5211,7 +5211,7 @@ static void cciss_shutdown(struct pci_de
 	kfree(flush_buf);
 	if (return_code != IO_OK)
 		dev_warn(&h->pdev->dev, "Error flushing cache\n");
-	h->access.set_intr_mask(h, CCISS_INTR_OFF);
+	h->access->set_intr_mask(h, CCISS_INTR_OFF);
 	free_irq(h->intr[h->intr_mode], h);
 }
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/block/cciss.h linux-3.3.8-pax/drivers/block/cciss.h
--- linux-3.3.8/drivers/block/cciss.h	2012-01-08 19:47:51.559472876 +0100
+++ linux-3.3.8-pax/drivers/block/cciss.h	2012-03-19 10:43:43.580034672 +0100
@@ -101,7 +101,7 @@ struct ctlr_info
 	/* information about each logical volume */
 	drive_info_struct *drv[CISS_MAX_LUN];
 
-	struct access_method access;
+	struct access_method *access;
 
 	/* queue and queue Info */ 
 	struct list_head reqQ;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/block/cpqarray.c linux-3.3.8-pax/drivers/block/cpqarray.c
--- linux-3.3.8/drivers/block/cpqarray.c	2012-01-08 19:47:51.579472875 +0100
+++ linux-3.3.8-pax/drivers/block/cpqarray.c	2012-03-19 10:43:43.588034672 +0100
@@ -404,7 +404,7 @@ static int __devinit cpqarray_register_c
 	if (register_blkdev(COMPAQ_SMART2_MAJOR+i, hba[i]->devname)) {
 		goto Enomem4;
 	}
-	hba[i]->access.set_intr_mask(hba[i], 0);
+	hba[i]->access->set_intr_mask(hba[i], 0);
 	if (request_irq(hba[i]->intr, do_ida_intr,
 		IRQF_DISABLED|IRQF_SHARED, hba[i]->devname, hba[i]))
 	{
@@ -459,7 +459,7 @@ static int __devinit cpqarray_register_c
 	add_timer(&hba[i]->timer);
 
 	/* Enable IRQ now that spinlock and rate limit timer are set up */
-	hba[i]->access.set_intr_mask(hba[i], FIFO_NOT_EMPTY);
+	hba[i]->access->set_intr_mask(hba[i], FIFO_NOT_EMPTY);
 
 	for(j=0; j<NWD; j++) {
 		struct gendisk *disk = ida_gendisk[i][j];
@@ -694,7 +694,7 @@ DBGINFO(
 	for(i=0; i<NR_PRODUCTS; i++) {
 		if (board_id == products[i].board_id) {
 			c->product_name = products[i].product_name;
-			c->access = *(products[i].access);
+			c->access = products[i].access;
 			break;
 		}
 	}
@@ -792,7 +792,7 @@ static int __devinit cpqarray_eisa_detec
 		hba[ctlr]->intr = intr;
 		sprintf(hba[ctlr]->devname, "ida%d", nr_ctlr);
 		hba[ctlr]->product_name = products[j].product_name;
-		hba[ctlr]->access = *(products[j].access);
+		hba[ctlr]->access = products[j].access;
 		hba[ctlr]->ctlr = ctlr;
 		hba[ctlr]->board_id = board_id;
 		hba[ctlr]->pci_dev = NULL; /* not PCI */
@@ -980,7 +980,7 @@ static void start_io(ctlr_info_t *h)
 
 	while((c = h->reqQ) != NULL) {
 		/* Can't do anything if we're busy */
-		if (h->access.fifo_full(h) == 0)
+		if (h->access->fifo_full(h) == 0)
 			return;
 
 		/* Get the first entry from the request Q */
@@ -988,7 +988,7 @@ static void start_io(ctlr_info_t *h)
 		h->Qdepth--;
 	
 		/* Tell the controller to do our bidding */
-		h->access.submit_command(h, c);
+		h->access->submit_command(h, c);
 
 		/* Get onto the completion Q */
 		addQ(&h->cmpQ, c);
@@ -1050,7 +1050,7 @@ static irqreturn_t do_ida_intr(int irq,
 	unsigned long flags;
 	__u32 a,a1;
 
-	istat = h->access.intr_pending(h);
+	istat = h->access->intr_pending(h);
 	/* Is this interrupt for us? */
 	if (istat == 0)
 		return IRQ_NONE;
@@ -1061,7 +1061,7 @@ static irqreturn_t do_ida_intr(int irq,
 	 */
 	spin_lock_irqsave(IDA_LOCK(h->ctlr), flags);
 	if (istat & FIFO_NOT_EMPTY) {
-		while((a = h->access.command_completed(h))) {
+		while((a = h->access->command_completed(h))) {
 			a1 = a; a &= ~3;
 			if ((c = h->cmpQ) == NULL)
 			{  
@@ -1449,11 +1449,11 @@ static int sendcmd(
 	/*
 	 * Disable interrupt
 	 */
-	info_p->access.set_intr_mask(info_p, 0);
+	info_p->access->set_intr_mask(info_p, 0);
 	/* Make sure there is room in the command FIFO */
 	/* Actually it should be completely empty at this time. */
 	for (i = 200000; i > 0; i--) {
-		temp = info_p->access.fifo_full(info_p);
+		temp = info_p->access->fifo_full(info_p);
 		if (temp != 0) {
 			break;
 		}
@@ -1466,7 +1466,7 @@ DBG(
 	/*
 	 * Send the cmd
 	 */
-	info_p->access.submit_command(info_p, c);
+	info_p->access->submit_command(info_p, c);
 	complete = pollcomplete(ctlr);
 	
 	pci_unmap_single(info_p->pci_dev, (dma_addr_t) c->req.sg[0].addr, 
@@ -1549,9 +1549,9 @@ static int revalidate_allvol(ctlr_info_t
 	 * we check the new geometry.  Then turn interrupts back on when
 	 * we're done.
 	 */
-	host->access.set_intr_mask(host, 0);
+	host->access->set_intr_mask(host, 0);
 	getgeometry(ctlr);
-	host->access.set_intr_mask(host, FIFO_NOT_EMPTY);
+	host->access->set_intr_mask(host, FIFO_NOT_EMPTY);
 
 	for(i=0; i<NWD; i++) {
 		struct gendisk *disk = ida_gendisk[ctlr][i];
@@ -1591,7 +1591,7 @@ static int pollcomplete(int ctlr)
 	/* Wait (up to 2 seconds) for a command to complete */
 
 	for (i = 200000; i > 0; i--) {
-		done = hba[ctlr]->access.command_completed(hba[ctlr]);
+		done = hba[ctlr]->access->command_completed(hba[ctlr]);
 		if (done == 0) {
 			udelay(10);	/* a short fixed delay */
 		} else
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/block/cpqarray.h linux-3.3.8-pax/drivers/block/cpqarray.h
--- linux-3.3.8/drivers/block/cpqarray.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/block/cpqarray.h	2012-03-19 10:43:43.592034673 +0100
@@ -99,7 +99,7 @@ struct ctlr_info {
 	drv_info_t	drv[NWD];
 	struct proc_dir_entry *proc;
 
-	struct access_method access;
+	struct access_method *access;
 
 	cmdlist_t *reqQ;
 	cmdlist_t *cmpQ;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/block/drbd/drbd_int.h linux-3.3.8-pax/drivers/block/drbd/drbd_int.h
--- linux-3.3.8/drivers/block/drbd/drbd_int.h	2012-03-19 10:38:58.040049919 +0100
+++ linux-3.3.8-pax/drivers/block/drbd/drbd_int.h	2012-03-19 10:43:43.596034673 +0100
@@ -736,7 +736,7 @@ struct drbd_request;
 struct drbd_epoch {
 	struct list_head list;
 	unsigned int barrier_nr;
-	atomic_t epoch_size; /* increased on every request added. */
+	atomic_unchecked_t epoch_size; /* increased on every request added. */
 	atomic_t active;     /* increased on every req. added, and dec on every finished. */
 	unsigned long flags;
 };
@@ -1108,7 +1108,7 @@ struct drbd_conf {
 	void *int_dig_in;
 	void *int_dig_vv;
 	wait_queue_head_t seq_wait;
-	atomic_t packet_seq;
+	atomic_unchecked_t packet_seq;
 	unsigned int peer_seq;
 	spinlock_t peer_seq_lock;
 	unsigned int minor;
@@ -1617,30 +1617,30 @@ static inline int drbd_setsockopt(struct
 
 static inline void drbd_tcp_cork(struct socket *sock)
 {
-	int __user val = 1;
+	int val = 1;
 	(void) drbd_setsockopt(sock, SOL_TCP, TCP_CORK,
-			(char __user *)&val, sizeof(val));
+			(char __force_user *)&val, sizeof(val));
 }
 
 static inline void drbd_tcp_uncork(struct socket *sock)
 {
-	int __user val = 0;
+	int val = 0;
 	(void) drbd_setsockopt(sock, SOL_TCP, TCP_CORK,
-			(char __user *)&val, sizeof(val));
+			(char __force_user *)&val, sizeof(val));
 }
 
 static inline void drbd_tcp_nodelay(struct socket *sock)
 {
-	int __user val = 1;
+	int val = 1;
 	(void) drbd_setsockopt(sock, SOL_TCP, TCP_NODELAY,
-			(char __user *)&val, sizeof(val));
+			(char __force_user *)&val, sizeof(val));
 }
 
 static inline void drbd_tcp_quickack(struct socket *sock)
 {
-	int __user val = 2;
+	int val = 2;
 	(void) drbd_setsockopt(sock, SOL_TCP, TCP_QUICKACK,
-			(char __user *)&val, sizeof(val));
+			(char __force_user *)&val, sizeof(val));
 }
 
 void drbd_bump_write_ordering(struct drbd_conf *mdev, enum write_ordering_e wo);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/block/drbd/drbd_main.c linux-3.3.8-pax/drivers/block/drbd/drbd_main.c
--- linux-3.3.8/drivers/block/drbd/drbd_main.c	2012-03-19 10:38:58.044049920 +0100
+++ linux-3.3.8-pax/drivers/block/drbd/drbd_main.c	2012-03-19 10:43:43.600034674 +0100
@@ -2397,7 +2397,7 @@ static int _drbd_send_ack(struct drbd_co
 	p.sector   = sector;
 	p.block_id = block_id;
 	p.blksize  = blksize;
-	p.seq_num  = cpu_to_be32(atomic_add_return(1, &mdev->packet_seq));
+	p.seq_num  = cpu_to_be32(atomic_add_return_unchecked(1, &mdev->packet_seq));
 
 	if (!mdev->meta.socket || mdev->state.conn < C_CONNECTED)
 		return false;
@@ -2696,7 +2696,7 @@ int drbd_send_dblock(struct drbd_conf *m
 	p.sector   = cpu_to_be64(req->sector);
 	p.block_id = (unsigned long)req;
 	p.seq_num  = cpu_to_be32(req->seq_num =
-				 atomic_add_return(1, &mdev->packet_seq));
+				 atomic_add_return_unchecked(1, &mdev->packet_seq));
 
 	dp_flags = bio_flags_to_wire(mdev, req->master_bio->bi_rw);
 
@@ -2981,7 +2981,7 @@ void drbd_init_set_defaults(struct drbd_
 	atomic_set(&mdev->unacked_cnt, 0);
 	atomic_set(&mdev->local_cnt, 0);
 	atomic_set(&mdev->net_cnt, 0);
-	atomic_set(&mdev->packet_seq, 0);
+	atomic_set_unchecked(&mdev->packet_seq, 0);
 	atomic_set(&mdev->pp_in_use, 0);
 	atomic_set(&mdev->pp_in_use_by_net, 0);
 	atomic_set(&mdev->rs_sect_in, 0);
@@ -3063,8 +3063,8 @@ void drbd_mdev_cleanup(struct drbd_conf
 				mdev->receiver.t_state);
 
 	/* no need to lock it, I'm the only thread alive */
-	if (atomic_read(&mdev->current_epoch->epoch_size) !=  0)
-		dev_err(DEV, "epoch_size:%d\n", atomic_read(&mdev->current_epoch->epoch_size));
+	if (atomic_read_unchecked(&mdev->current_epoch->epoch_size) !=  0)
+		dev_err(DEV, "epoch_size:%d\n", atomic_read_unchecked(&mdev->current_epoch->epoch_size));
 	mdev->al_writ_cnt  =
 	mdev->bm_writ_cnt  =
 	mdev->read_cnt     =
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/block/drbd/drbd_nl.c linux-3.3.8-pax/drivers/block/drbd/drbd_nl.c
--- linux-3.3.8/drivers/block/drbd/drbd_nl.c	2012-01-08 19:47:51.607472873 +0100
+++ linux-3.3.8-pax/drivers/block/drbd/drbd_nl.c	2012-03-19 10:43:43.600034674 +0100
@@ -2359,7 +2359,7 @@ static void drbd_connector_callback(stru
 	module_put(THIS_MODULE);
 }
 
-static atomic_t drbd_nl_seq = ATOMIC_INIT(2); /* two. */
+static atomic_unchecked_t drbd_nl_seq = ATOMIC_INIT(2); /* two. */
 
 static unsigned short *
 __tl_add_blob(unsigned short *tl, enum drbd_tags tag, const void *data,
@@ -2430,7 +2430,7 @@ void drbd_bcast_state(struct drbd_conf *
 	cn_reply->id.idx = CN_IDX_DRBD;
 	cn_reply->id.val = CN_VAL_DRBD;
 
-	cn_reply->seq = atomic_add_return(1, &drbd_nl_seq);
+	cn_reply->seq = atomic_add_return_unchecked(1, &drbd_nl_seq);
 	cn_reply->ack = 0; /* not used here. */
 	cn_reply->len = sizeof(struct drbd_nl_cfg_reply) +
 		(int)((char *)tl - (char *)reply->tag_list);
@@ -2462,7 +2462,7 @@ void drbd_bcast_ev_helper(struct drbd_co
 	cn_reply->id.idx = CN_IDX_DRBD;
 	cn_reply->id.val = CN_VAL_DRBD;
 
-	cn_reply->seq = atomic_add_return(1, &drbd_nl_seq);
+	cn_reply->seq = atomic_add_return_unchecked(1, &drbd_nl_seq);
 	cn_reply->ack = 0; /* not used here. */
 	cn_reply->len = sizeof(struct drbd_nl_cfg_reply) +
 		(int)((char *)tl - (char *)reply->tag_list);
@@ -2540,7 +2540,7 @@ void drbd_bcast_ee(struct drbd_conf *mde
 	cn_reply->id.idx = CN_IDX_DRBD;
 	cn_reply->id.val = CN_VAL_DRBD;
 
-	cn_reply->seq = atomic_add_return(1,&drbd_nl_seq);
+	cn_reply->seq = atomic_add_return_unchecked(1,&drbd_nl_seq);
 	cn_reply->ack = 0; // not used here.
 	cn_reply->len = sizeof(struct drbd_nl_cfg_reply) +
 		(int)((char*)tl - (char*)reply->tag_list);
@@ -2579,7 +2579,7 @@ void drbd_bcast_sync_progress(struct drb
 	cn_reply->id.idx = CN_IDX_DRBD;
 	cn_reply->id.val = CN_VAL_DRBD;
 
-	cn_reply->seq = atomic_add_return(1, &drbd_nl_seq);
+	cn_reply->seq = atomic_add_return_unchecked(1, &drbd_nl_seq);
 	cn_reply->ack = 0; /* not used here. */
 	cn_reply->len = sizeof(struct drbd_nl_cfg_reply) +
 		(int)((char *)tl - (char *)reply->tag_list);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/block/drbd/drbd_receiver.c linux-3.3.8-pax/drivers/block/drbd/drbd_receiver.c
--- linux-3.3.8/drivers/block/drbd/drbd_receiver.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/block/drbd/drbd_receiver.c	2012-03-19 10:43:43.604034672 +0100
@@ -894,7 +894,7 @@ retry:
 	sock->sk->sk_sndtimeo = mdev->net_conf->timeout*HZ/10;
 	sock->sk->sk_rcvtimeo = MAX_SCHEDULE_TIMEOUT;
 
-	atomic_set(&mdev->packet_seq, 0);
+	atomic_set_unchecked(&mdev->packet_seq, 0);
 	mdev->peer_seq = 0;
 
 	drbd_thread_start(&mdev->asender);
@@ -985,7 +985,7 @@ static enum finish_epoch drbd_may_finish
 	do {
 		next_epoch = NULL;
 
-		epoch_size = atomic_read(&epoch->epoch_size);
+		epoch_size = atomic_read_unchecked(&epoch->epoch_size);
 
 		switch (ev & ~EV_CLEANUP) {
 		case EV_PUT:
@@ -1020,7 +1020,7 @@ static enum finish_epoch drbd_may_finish
 					rv = FE_DESTROYED;
 			} else {
 				epoch->flags = 0;
-				atomic_set(&epoch->epoch_size, 0);
+				atomic_set_unchecked(&epoch->epoch_size, 0);
 				/* atomic_set(&epoch->active, 0); is already zero */
 				if (rv == FE_STILL_LIVE)
 					rv = FE_RECYCLED;
@@ -1191,14 +1191,14 @@ static int receive_Barrier(struct drbd_c
 		drbd_wait_ee_list_empty(mdev, &mdev->active_ee);
 		drbd_flush(mdev);
 
-		if (atomic_read(&mdev->current_epoch->epoch_size)) {
+		if (atomic_read_unchecked(&mdev->current_epoch->epoch_size)) {
 			epoch = kmalloc(sizeof(struct drbd_epoch), GFP_NOIO);
 			if (epoch)
 				break;
 		}
 
 		epoch = mdev->current_epoch;
-		wait_event(mdev->ee_wait, atomic_read(&epoch->epoch_size) == 0);
+		wait_event(mdev->ee_wait, atomic_read_unchecked(&epoch->epoch_size) == 0);
 
 		D_ASSERT(atomic_read(&epoch->active) == 0);
 		D_ASSERT(epoch->flags == 0);
@@ -1210,11 +1210,11 @@ static int receive_Barrier(struct drbd_c
 	}
 
 	epoch->flags = 0;
-	atomic_set(&epoch->epoch_size, 0);
+	atomic_set_unchecked(&epoch->epoch_size, 0);
 	atomic_set(&epoch->active, 0);
 
 	spin_lock(&mdev->epoch_lock);
-	if (atomic_read(&mdev->current_epoch->epoch_size)) {
+	if (atomic_read_unchecked(&mdev->current_epoch->epoch_size)) {
 		list_add(&epoch->list, &mdev->current_epoch->list);
 		mdev->current_epoch = epoch;
 		mdev->epochs++;
@@ -1663,7 +1663,7 @@ static int receive_Data(struct drbd_conf
 		spin_unlock(&mdev->peer_seq_lock);
 
 		drbd_send_ack_dp(mdev, P_NEG_ACK, p, data_size);
-		atomic_inc(&mdev->current_epoch->epoch_size);
+		atomic_inc_unchecked(&mdev->current_epoch->epoch_size);
 		return drbd_drain_block(mdev, data_size);
 	}
 
@@ -1689,7 +1689,7 @@ static int receive_Data(struct drbd_conf
 
 	spin_lock(&mdev->epoch_lock);
 	e->epoch = mdev->current_epoch;
-	atomic_inc(&e->epoch->epoch_size);
+	atomic_inc_unchecked(&e->epoch->epoch_size);
 	atomic_inc(&e->epoch->active);
 	spin_unlock(&mdev->epoch_lock);
 
@@ -3885,7 +3885,7 @@ static void drbd_disconnect(struct drbd_
 	D_ASSERT(list_empty(&mdev->done_ee));
 
 	/* ok, no more ee's on the fly, it is safe to reset the epoch_size */
-	atomic_set(&mdev->current_epoch->epoch_size, 0);
+	atomic_set_unchecked(&mdev->current_epoch->epoch_size, 0);
 	D_ASSERT(list_empty(&mdev->current_epoch->list));
 }
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/block/loop.c linux-3.3.8-pax/drivers/block/loop.c
--- linux-3.3.8/drivers/block/loop.c	2012-03-19 10:38:58.048049920 +0100
+++ linux-3.3.8-pax/drivers/block/loop.c	2012-03-19 10:43:43.604034672 +0100
@@ -226,7 +226,7 @@ static int __do_lo_send_write(struct fil
 	mm_segment_t old_fs = get_fs();
 
 	set_fs(get_ds());
-	bw = file->f_op->write(file, buf, len, &pos);
+	bw = file->f_op->write(file, (const char __force_user *)buf, len, &pos);
 	set_fs(old_fs);
 	if (likely(bw == len))
 		return 0;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/char/agp/frontend.c linux-3.3.8-pax/drivers/char/agp/frontend.c
--- linux-3.3.8/drivers/char/agp/frontend.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/char/agp/frontend.c	2012-03-19 10:43:43.608034670 +0100
@@ -817,7 +817,7 @@ static int agpioc_reserve_wrap(struct ag
 	if (copy_from_user(&reserve, arg, sizeof(struct agp_region)))
 		return -EFAULT;
 
-	if ((unsigned) reserve.seg_count >= ~0U/sizeof(struct agp_segment))
+	if ((unsigned) reserve.seg_count >= ~0U/sizeof(struct agp_segment_priv))
 		return -EFAULT;
 
 	client = agp_find_client_by_pid(reserve.pid);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/char/hpet.c linux-3.3.8-pax/drivers/char/hpet.c
--- linux-3.3.8/drivers/char/hpet.c	2011-10-24 12:48:27.439091709 +0200
+++ linux-3.3.8-pax/drivers/char/hpet.c	2012-03-19 10:43:43.608034670 +0100
@@ -572,7 +572,7 @@ static inline unsigned long hpet_time_di
 }
 
 static int
-hpet_ioctl_common(struct hpet_dev *devp, int cmd, unsigned long arg,
+hpet_ioctl_common(struct hpet_dev *devp, unsigned int cmd, unsigned long arg,
 		  struct hpet_info *info)
 {
 	struct hpet_timer __iomem *timer;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/char/ipmi/ipmi_msghandler.c linux-3.3.8-pax/drivers/char/ipmi/ipmi_msghandler.c
--- linux-3.3.8/drivers/char/ipmi/ipmi_msghandler.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/char/ipmi/ipmi_msghandler.c	2012-03-19 10:43:43.616034670 +0100
@@ -415,7 +415,7 @@ struct ipmi_smi {
 	struct proc_dir_entry *proc_dir;
 	char                  proc_dir_name[10];
 
-	atomic_t stats[IPMI_NUM_STATS];
+	atomic_unchecked_t stats[IPMI_NUM_STATS];
 
 	/*
 	 * run_to_completion duplicate of smb_info, smi_info
@@ -448,9 +448,9 @@ static DEFINE_MUTEX(smi_watchers_mutex);
 
 
 #define ipmi_inc_stat(intf, stat) \
-	atomic_inc(&(intf)->stats[IPMI_STAT_ ## stat])
+	atomic_inc_unchecked(&(intf)->stats[IPMI_STAT_ ## stat])
 #define ipmi_get_stat(intf, stat) \
-	((unsigned int) atomic_read(&(intf)->stats[IPMI_STAT_ ## stat]))
+	((unsigned int) atomic_read_unchecked(&(intf)->stats[IPMI_STAT_ ## stat]))
 
 static int is_lan_addr(struct ipmi_addr *addr)
 {
@@ -2868,7 +2868,7 @@ int ipmi_register_smi(struct ipmi_smi_ha
 	INIT_LIST_HEAD(&intf->cmd_rcvrs);
 	init_waitqueue_head(&intf->waitq);
 	for (i = 0; i < IPMI_NUM_STATS; i++)
-		atomic_set(&intf->stats[i], 0);
+		atomic_set_unchecked(&intf->stats[i], 0);
 
 	intf->proc_dir = NULL;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/char/ipmi/ipmi_si_intf.c linux-3.3.8-pax/drivers/char/ipmi/ipmi_si_intf.c
--- linux-3.3.8/drivers/char/ipmi/ipmi_si_intf.c	2012-03-19 10:38:58.120049913 +0100
+++ linux-3.3.8-pax/drivers/char/ipmi/ipmi_si_intf.c	2012-03-19 10:43:43.616034670 +0100
@@ -277,7 +277,7 @@ struct smi_info {
 	unsigned char slave_addr;
 
 	/* Counters and things for the proc filesystem. */
-	atomic_t stats[SI_NUM_STATS];
+	atomic_unchecked_t stats[SI_NUM_STATS];
 
 	struct task_struct *thread;
 
@@ -286,9 +286,9 @@ struct smi_info {
 };
 
 #define smi_inc_stat(smi, stat) \
-	atomic_inc(&(smi)->stats[SI_STAT_ ## stat])
+	atomic_inc_unchecked(&(smi)->stats[SI_STAT_ ## stat])
 #define smi_get_stat(smi, stat) \
-	((unsigned int) atomic_read(&(smi)->stats[SI_STAT_ ## stat]))
+	((unsigned int) atomic_read_unchecked(&(smi)->stats[SI_STAT_ ## stat]))
 
 #define SI_MAX_PARMS 4
 
@@ -3230,7 +3230,7 @@ static int try_smi_init(struct smi_info
 	atomic_set(&new_smi->req_events, 0);
 	new_smi->run_to_completion = 0;
 	for (i = 0; i < SI_NUM_STATS; i++)
-		atomic_set(&new_smi->stats[i], 0);
+		atomic_set_unchecked(&new_smi->stats[i], 0);
 
 	new_smi->interrupt_disabled = 1;
 	atomic_set(&new_smi->stop_operation, 0);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/char/mbcs.c linux-3.3.8-pax/drivers/char/mbcs.c
--- linux-3.3.8/drivers/char/mbcs.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/char/mbcs.c	2012-03-19 10:43:43.616034670 +0100
@@ -800,7 +800,7 @@ static int mbcs_remove(struct cx_dev *de
 	return 0;
 }
 
-static const struct cx_device_id __devinitdata mbcs_id_table[] = {
+static const struct cx_device_id __devinitconst mbcs_id_table[] = {
 	{
 	 .part_num = MBCS_PART_NUM,
 	 .mfg_num = MBCS_MFG_NUM,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/char/mem.c linux-3.3.8-pax/drivers/char/mem.c
--- linux-3.3.8/drivers/char/mem.c	2012-03-19 10:38:58.124049914 +0100
+++ linux-3.3.8-pax/drivers/char/mem.c	2012-03-19 10:43:43.616034671 +0100
@@ -118,6 +118,7 @@ static ssize_t read_mem(struct file *fil
 
 	while (count > 0) {
 		unsigned long remaining;
+		char *temp;
 
 		sz = size_inside_page(p, count);
 
@@ -133,7 +134,23 @@ static ssize_t read_mem(struct file *fil
 		if (!ptr)
 			return -EFAULT;
 
-		remaining = copy_to_user(buf, ptr, sz);
+#ifdef CONFIG_PAX_USERCOPY
+		temp = kmalloc(sz, GFP_KERNEL);
+		if (!temp) {
+			unxlate_dev_mem_ptr(p, ptr);
+			return -ENOMEM;
+		}
+		memcpy(temp, ptr, sz);
+#else
+		temp = ptr;
+#endif
+
+		remaining = copy_to_user(buf, temp, sz);
+
+#ifdef CONFIG_PAX_USERCOPY
+		kfree(temp);
+#endif
+
 		unxlate_dev_mem_ptr(p, ptr);
 		if (remaining)
 			return -EFAULT;
@@ -396,9 +413,8 @@ static ssize_t read_kmem(struct file *fi
 			 size_t count, loff_t *ppos)
 {
 	unsigned long p = *ppos;
-	ssize_t low_count, read, sz;
+	ssize_t low_count, read, sz, err = 0;
 	char * kbuf; /* k-addr because vread() takes vmlist_lock rwlock */
-	int err = 0;
 
 	read = 0;
 	if (p < (unsigned long) high_memory) {
@@ -420,6 +436,8 @@ static ssize_t read_kmem(struct file *fi
 		}
 #endif
 		while (low_count > 0) {
+			char *temp;
+
 			sz = size_inside_page(p, low_count);
 
 			/*
@@ -429,7 +447,22 @@ static ssize_t read_kmem(struct file *fi
 			 */
 			kbuf = xlate_dev_kmem_ptr((char *)p);
 
-			if (copy_to_user(buf, kbuf, sz))
+#ifdef CONFIG_PAX_USERCOPY
+			temp = kmalloc(sz, GFP_KERNEL);
+			if (!temp)
+				return -ENOMEM;
+			memcpy(temp, kbuf, sz);
+#else
+			temp = kbuf;
+#endif
+
+			err = copy_to_user(buf, temp, sz);
+
+#ifdef CONFIG_PAX_USERCOPY
+			kfree(temp);
+#endif
+
+			if (err)
 				return -EFAULT;
 			buf += sz;
 			p += sz;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/char/nvram.c linux-3.3.8-pax/drivers/char/nvram.c
--- linux-3.3.8/drivers/char/nvram.c	2011-10-24 12:48:27.483091704 +0200
+++ linux-3.3.8-pax/drivers/char/nvram.c	2012-03-19 10:43:43.616034671 +0100
@@ -248,7 +248,7 @@ static ssize_t nvram_read(struct file *f
 
 	spin_unlock_irq(&rtc_lock);
 
-	if (copy_to_user(buf, contents, tmp - contents))
+	if (tmp - contents > sizeof(contents) || copy_to_user(buf, contents, tmp - contents))
 		return -EFAULT;
 
 	*ppos = i;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/char/random.c linux-3.3.8-pax/drivers/char/random.c
--- linux-3.3.8/drivers/char/random.c	2012-03-19 10:38:58.132049915 +0100
+++ linux-3.3.8-pax/drivers/char/random.c	2012-03-19 10:43:43.616034671 +0100
@@ -913,7 +913,7 @@ static ssize_t extract_entropy_user(stru
 
 		extract_buf(r, tmp);
 		i = min_t(int, nbytes, EXTRACT_SIZE);
-		if (copy_to_user(buf, tmp, i)) {
+		if (i > sizeof(tmp) || copy_to_user(buf, tmp, i)) {
 			ret = -EFAULT;
 			break;
 		}
@@ -1238,7 +1238,7 @@ EXPORT_SYMBOL(generate_random_uuid);
 #include <linux/sysctl.h>
 
 static int min_read_thresh = 8, min_write_thresh;
-static int max_read_thresh = INPUT_POOL_WORDS * 32;
+static int max_read_thresh = OUTPUT_POOL_WORDS * 32;
 static int max_write_thresh = INPUT_POOL_WORDS * 32;
 static char sysctl_bootid[16];
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/char/sonypi.c linux-3.3.8-pax/drivers/char/sonypi.c
--- linux-3.3.8/drivers/char/sonypi.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/char/sonypi.c	2012-03-19 10:43:43.620034672 +0100
@@ -55,6 +55,7 @@
 #include <asm/uaccess.h>
 #include <asm/io.h>
 #include <asm/system.h>
+#include <asm/local.h>
 
 #include <linux/sonypi.h>
 
@@ -491,7 +492,7 @@ static struct sonypi_device {
 	spinlock_t fifo_lock;
 	wait_queue_head_t fifo_proc_list;
 	struct fasync_struct *fifo_async;
-	int open_count;
+	local_t open_count;
 	int model;
 	struct input_dev *input_jog_dev;
 	struct input_dev *input_key_dev;
@@ -898,7 +899,7 @@ static int sonypi_misc_fasync(int fd, st
 static int sonypi_misc_release(struct inode *inode, struct file *file)
 {
 	mutex_lock(&sonypi_device.lock);
-	sonypi_device.open_count--;
+	local_dec(&sonypi_device.open_count);
 	mutex_unlock(&sonypi_device.lock);
 	return 0;
 }
@@ -907,9 +908,9 @@ static int sonypi_misc_open(struct inode
 {
 	mutex_lock(&sonypi_device.lock);
 	/* Flush input queue on first open */
-	if (!sonypi_device.open_count)
+	if (!local_read(&sonypi_device.open_count))
 		kfifo_reset(&sonypi_device.fifo);
-	sonypi_device.open_count++;
+	local_inc(&sonypi_device.open_count);
 	mutex_unlock(&sonypi_device.lock);
 
 	return 0;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/char/tpm/tpm_bios.c linux-3.3.8-pax/drivers/char/tpm/tpm_bios.c
--- linux-3.3.8/drivers/char/tpm/tpm_bios.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/char/tpm/tpm_bios.c	2012-03-19 10:43:43.620034672 +0100
@@ -173,7 +173,7 @@ static void *tpm_bios_measurements_start
 	event = addr;
 
 	if ((event->event_type == 0 && event->event_size == 0) ||
-	    ((addr + sizeof(struct tcpa_event) + event->event_size) >= limit))
+	    (event->event_size >= limit - addr - sizeof(struct tcpa_event)))
 		return NULL;
 
 	return addr;
@@ -198,7 +198,7 @@ static void *tpm_bios_measurements_next(
 		return NULL;
 
 	if ((event->event_type == 0 && event->event_size == 0) ||
-	    ((v + sizeof(struct tcpa_event) + event->event_size) >= limit))
+	    (event->event_size >= limit - v - sizeof(struct tcpa_event)))
 		return NULL;
 
 	(*pos)++;
@@ -291,7 +291,8 @@ static int tpm_binary_bios_measurements_
 	int i;
 
 	for (i = 0; i < sizeof(struct tcpa_event) + event->event_size; i++)
-		seq_putc(m, data[i]);
+		if (!seq_putc(m, data[i]))
+			return -EFAULT;
 
 	return 0;
 }
@@ -410,8 +411,13 @@ static int read_log(struct tpm_bios_log
 	log->bios_event_log_end = log->bios_event_log + len;
 
 	virt = acpi_os_map_memory(start, len);
+	if (!virt) {
+		kfree(log->bios_event_log);
+		log->bios_event_log = NULL;
+		return -EFAULT;
+	}
 
-	memcpy(log->bios_event_log, virt, len);
+	memcpy(log->bios_event_log, (const char __force_kernel *)virt, len);
 
 	acpi_os_unmap_memory(virt, len);
 	return 0;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/char/tpm/tpm.c linux-3.3.8-pax/drivers/char/tpm/tpm.c
--- linux-3.3.8/drivers/char/tpm/tpm.c	2012-04-03 22:02:49.290109935 +0200
+++ linux-3.3.8-pax/drivers/char/tpm/tpm.c	2012-04-03 22:03:06.734106181 +0200
@@ -415,7 +415,7 @@ static ssize_t tpm_transmit(struct tpm_c
 		    chip->vendor.req_complete_val)
 			goto out_recv;
 
-		if ((status == chip->vendor.req_canceled)) {
+		if (status == chip->vendor.req_canceled) {
 			dev_err(chip->dev, "Operation Canceled\n");
 			rc = -ECANCELED;
 			goto out;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/char/virtio_console.c linux-3.3.8-pax/drivers/char/virtio_console.c
--- linux-3.3.8/drivers/char/virtio_console.c	2012-05-24 17:32:19.381142881 +0200
+++ linux-3.3.8-pax/drivers/char/virtio_console.c	2012-05-24 17:32:27.041145485 +0200
@@ -563,7 +563,7 @@ static ssize_t fill_readbuf(struct port
 	if (to_user) {
 		ssize_t ret;
 
-		ret = copy_to_user(out_buf, buf->buf + buf->offset, out_count);
+		ret = copy_to_user((char __force_user *)out_buf, buf->buf + buf->offset, out_count);
 		if (ret)
 			return -EFAULT;
 	} else {
@@ -662,7 +662,7 @@ static ssize_t port_fops_read(struct fil
 	if (!port_has_data(port) && !port->host_connected)
 		return 0;
 
-	return fill_readbuf(port, ubuf, count, true);
+	return fill_readbuf(port, (char __force_kernel *)ubuf, count, true);
 }
 
 static ssize_t port_fops_write(struct file *filp, const char __user *ubuf,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/edac/amd64_edac.c linux-3.3.8-pax/drivers/edac/amd64_edac.c
--- linux-3.3.8/drivers/edac/amd64_edac.c	2012-01-08 19:47:52.103472847 +0100
+++ linux-3.3.8-pax/drivers/edac/amd64_edac.c	2012-03-19 10:43:43.624034673 +0100
@@ -2685,7 +2685,7 @@ static void __devexit amd64_remove_one_i
  * PCI core identifies what devices are on a system during boot, and then
  * inquiry this table to see if this driver is for a given device found.
  */
-static const struct pci_device_id amd64_pci_table[] __devinitdata = {
+static const struct pci_device_id amd64_pci_table[] __devinitconst = {
 	{
 		.vendor		= PCI_VENDOR_ID_AMD,
 		.device		= PCI_DEVICE_ID_AMD_K8_NB_MEMCTL,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/edac/amd76x_edac.c linux-3.3.8-pax/drivers/edac/amd76x_edac.c
--- linux-3.3.8/drivers/edac/amd76x_edac.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/edac/amd76x_edac.c	2012-03-19 10:43:43.624034673 +0100
@@ -321,7 +321,7 @@ static void __devexit amd76x_remove_one(
 	edac_mc_free(mci);
 }
 
-static const struct pci_device_id amd76x_pci_tbl[] __devinitdata = {
+static const struct pci_device_id amd76x_pci_tbl[] __devinitconst = {
 	{
 	 PCI_VEND_DEV(AMD, FE_GATE_700C), PCI_ANY_ID, PCI_ANY_ID, 0, 0,
 	 AMD762},
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/edac/e752x_edac.c linux-3.3.8-pax/drivers/edac/e752x_edac.c
--- linux-3.3.8/drivers/edac/e752x_edac.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/edac/e752x_edac.c	2012-03-19 10:43:43.624034673 +0100
@@ -1380,7 +1380,7 @@ static void __devexit e752x_remove_one(s
 	edac_mc_free(mci);
 }
 
-static const struct pci_device_id e752x_pci_tbl[] __devinitdata = {
+static const struct pci_device_id e752x_pci_tbl[] __devinitconst = {
 	{
 	 PCI_VEND_DEV(INTEL, 7520_0), PCI_ANY_ID, PCI_ANY_ID, 0, 0,
 	 E7520},
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/edac/e7xxx_edac.c linux-3.3.8-pax/drivers/edac/e7xxx_edac.c
--- linux-3.3.8/drivers/edac/e7xxx_edac.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/edac/e7xxx_edac.c	2012-03-19 10:43:43.628034673 +0100
@@ -525,7 +525,7 @@ static void __devexit e7xxx_remove_one(s
 	edac_mc_free(mci);
 }
 
-static const struct pci_device_id e7xxx_pci_tbl[] __devinitdata = {
+static const struct pci_device_id e7xxx_pci_tbl[] __devinitconst = {
 	{
 	 PCI_VEND_DEV(INTEL, 7205_0), PCI_ANY_ID, PCI_ANY_ID, 0, 0,
 	 E7205},
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/edac/edac_pci_sysfs.c linux-3.3.8-pax/drivers/edac/edac_pci_sysfs.c
--- linux-3.3.8/drivers/edac/edac_pci_sysfs.c	2012-03-19 10:38:58.356049902 +0100
+++ linux-3.3.8-pax/drivers/edac/edac_pci_sysfs.c	2012-03-19 10:43:43.628034673 +0100
@@ -26,8 +26,8 @@ static int edac_pci_log_pe = 1;		/* log
 static int edac_pci_log_npe = 1;	/* log PCI non-parity error errors */
 static int edac_pci_poll_msec = 1000;	/* one second workq period */
 
-static atomic_t pci_parity_count = ATOMIC_INIT(0);
-static atomic_t pci_nonparity_count = ATOMIC_INIT(0);
+static atomic_unchecked_t pci_parity_count = ATOMIC_INIT(0);
+static atomic_unchecked_t pci_nonparity_count = ATOMIC_INIT(0);
 
 static struct kobject *edac_pci_top_main_kobj;
 static atomic_t edac_pci_sysfs_refcount = ATOMIC_INIT(0);
@@ -582,7 +582,7 @@ static void edac_pci_dev_parity_test(str
 			edac_printk(KERN_CRIT, EDAC_PCI,
 				"Signaled System Error on %s\n",
 				pci_name(dev));
-			atomic_inc(&pci_nonparity_count);
+			atomic_inc_unchecked(&pci_nonparity_count);
 		}
 
 		if (status & (PCI_STATUS_PARITY)) {
@@ -590,7 +590,7 @@ static void edac_pci_dev_parity_test(str
 				"Master Data Parity Error on %s\n",
 				pci_name(dev));
 
-			atomic_inc(&pci_parity_count);
+			atomic_inc_unchecked(&pci_parity_count);
 		}
 
 		if (status & (PCI_STATUS_DETECTED_PARITY)) {
@@ -598,7 +598,7 @@ static void edac_pci_dev_parity_test(str
 				"Detected Parity Error on %s\n",
 				pci_name(dev));
 
-			atomic_inc(&pci_parity_count);
+			atomic_inc_unchecked(&pci_parity_count);
 		}
 	}
 
@@ -619,7 +619,7 @@ static void edac_pci_dev_parity_test(str
 				edac_printk(KERN_CRIT, EDAC_PCI, "Bridge "
 					"Signaled System Error on %s\n",
 					pci_name(dev));
-				atomic_inc(&pci_nonparity_count);
+				atomic_inc_unchecked(&pci_nonparity_count);
 			}
 
 			if (status & (PCI_STATUS_PARITY)) {
@@ -627,7 +627,7 @@ static void edac_pci_dev_parity_test(str
 					"Master Data Parity Error on "
 					"%s\n", pci_name(dev));
 
-				atomic_inc(&pci_parity_count);
+				atomic_inc_unchecked(&pci_parity_count);
 			}
 
 			if (status & (PCI_STATUS_DETECTED_PARITY)) {
@@ -635,7 +635,7 @@ static void edac_pci_dev_parity_test(str
 					"Detected Parity Error on %s\n",
 					pci_name(dev));
 
-				atomic_inc(&pci_parity_count);
+				atomic_inc_unchecked(&pci_parity_count);
 			}
 		}
 	}
@@ -677,7 +677,7 @@ void edac_pci_do_parity_check(void)
 	if (!check_pci_errors)
 		return;
 
-	before_count = atomic_read(&pci_parity_count);
+	before_count = atomic_read_unchecked(&pci_parity_count);
 
 	/* scan all PCI devices looking for a Parity Error on devices and
 	 * bridges.
@@ -689,7 +689,7 @@ void edac_pci_do_parity_check(void)
 	/* Only if operator has selected panic on PCI Error */
 	if (edac_pci_get_panic_on_pe()) {
 		/* If the count is different 'after' from 'before' */
-		if (before_count != atomic_read(&pci_parity_count))
+		if (before_count != atomic_read_unchecked(&pci_parity_count))
 			panic("EDAC: PCI Parity Error");
 	}
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/edac/i3000_edac.c linux-3.3.8-pax/drivers/edac/i3000_edac.c
--- linux-3.3.8/drivers/edac/i3000_edac.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/edac/i3000_edac.c	2012-03-19 10:43:43.628034673 +0100
@@ -470,7 +470,7 @@ static void __devexit i3000_remove_one(s
 	edac_mc_free(mci);
 }
 
-static const struct pci_device_id i3000_pci_tbl[] __devinitdata = {
+static const struct pci_device_id i3000_pci_tbl[] __devinitconst = {
 	{
 	 PCI_VEND_DEV(INTEL, 3000_HB), PCI_ANY_ID, PCI_ANY_ID, 0, 0,
 	 I3000},
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/edac/i3200_edac.c linux-3.3.8-pax/drivers/edac/i3200_edac.c
--- linux-3.3.8/drivers/edac/i3200_edac.c	2012-03-19 10:38:58.356049902 +0100
+++ linux-3.3.8-pax/drivers/edac/i3200_edac.c	2012-03-19 10:43:43.628034673 +0100
@@ -445,7 +445,7 @@ static void __devexit i3200_remove_one(s
 	edac_mc_free(mci);
 }
 
-static const struct pci_device_id i3200_pci_tbl[] __devinitdata = {
+static const struct pci_device_id i3200_pci_tbl[] __devinitconst = {
 	{
 		PCI_VEND_DEV(INTEL, 3200_HB), PCI_ANY_ID, PCI_ANY_ID, 0, 0,
 		I3200},
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/edac/i5000_edac.c linux-3.3.8-pax/drivers/edac/i5000_edac.c
--- linux-3.3.8/drivers/edac/i5000_edac.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/edac/i5000_edac.c	2012-03-19 10:43:43.632034673 +0100
@@ -1516,7 +1516,7 @@ static void __devexit i5000_remove_one(s
  *
  *	The "E500P" device is the first device supported.
  */
-static const struct pci_device_id i5000_pci_tbl[] __devinitdata = {
+static const struct pci_device_id i5000_pci_tbl[] __devinitconst = {
 	{PCI_DEVICE(PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_I5000_DEV16),
 	 .driver_data = I5000P},
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/edac/i5100_edac.c linux-3.3.8-pax/drivers/edac/i5100_edac.c
--- linux-3.3.8/drivers/edac/i5100_edac.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/edac/i5100_edac.c	2012-03-19 10:43:43.632034673 +0100
@@ -1051,7 +1051,7 @@ static void __devexit i5100_remove_one(s
 	edac_mc_free(mci);
 }
 
-static const struct pci_device_id i5100_pci_tbl[] __devinitdata = {
+static const struct pci_device_id i5100_pci_tbl[] __devinitconst = {
 	/* Device 16, Function 0, Channel 0 Memory Map, Error Flag/Mask, ... */
 	{ PCI_DEVICE(PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_5100_16) },
 	{ 0, }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/edac/i5400_edac.c linux-3.3.8-pax/drivers/edac/i5400_edac.c
--- linux-3.3.8/drivers/edac/i5400_edac.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/edac/i5400_edac.c	2012-03-19 10:43:43.632034673 +0100
@@ -1383,7 +1383,7 @@ static void __devexit i5400_remove_one(s
  *
  *	The "E500P" device is the first device supported.
  */
-static const struct pci_device_id i5400_pci_tbl[] __devinitdata = {
+static const struct pci_device_id i5400_pci_tbl[] __devinitconst = {
 	{PCI_DEVICE(PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_5400_ERR)},
 	{0,}			/* 0 terminated list. */
 };
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/edac/i7300_edac.c linux-3.3.8-pax/drivers/edac/i7300_edac.c
--- linux-3.3.8/drivers/edac/i7300_edac.c	2012-01-08 19:47:52.115472846 +0100
+++ linux-3.3.8-pax/drivers/edac/i7300_edac.c	2012-03-19 10:43:43.636034672 +0100
@@ -1192,7 +1192,7 @@ static void __devexit i7300_remove_one(s
  *
  * Has only 8086:360c PCI ID
  */
-static const struct pci_device_id i7300_pci_tbl[] __devinitdata = {
+static const struct pci_device_id i7300_pci_tbl[] __devinitconst = {
 	{PCI_DEVICE(PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_I7300_MCH_ERR)},
 	{0,}			/* 0 terminated list. */
 };
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/edac/i7core_edac.c linux-3.3.8-pax/drivers/edac/i7core_edac.c
--- linux-3.3.8/drivers/edac/i7core_edac.c	2012-03-19 10:38:58.360049900 +0100
+++ linux-3.3.8-pax/drivers/edac/i7core_edac.c	2012-03-19 10:43:43.636034672 +0100
@@ -391,7 +391,7 @@ static const struct pci_id_table pci_dev
 /*
  *	pci_device_id	table for which devices we are looking for
  */
-static const struct pci_device_id i7core_pci_tbl[] __devinitdata = {
+static const struct pci_device_id i7core_pci_tbl[] __devinitconst = {
 	{PCI_DEVICE(PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_X58_HUB_MGMT)},
 	{PCI_DEVICE(PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_LYNNFIELD_QPI_LINK0)},
 	{0,}			/* 0 terminated list. */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/edac/i82443bxgx_edac.c linux-3.3.8-pax/drivers/edac/i82443bxgx_edac.c
--- linux-3.3.8/drivers/edac/i82443bxgx_edac.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/edac/i82443bxgx_edac.c	2012-03-19 10:43:43.636034672 +0100
@@ -380,7 +380,7 @@ static void __devexit i82443bxgx_edacmc_
 
 EXPORT_SYMBOL_GPL(i82443bxgx_edacmc_remove_one);
 
-static const struct pci_device_id i82443bxgx_pci_tbl[] __devinitdata = {
+static const struct pci_device_id i82443bxgx_pci_tbl[] __devinitconst = {
 	{PCI_DEVICE(PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_82443BX_0)},
 	{PCI_DEVICE(PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_82443BX_2)},
 	{PCI_DEVICE(PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_82443GX_0)},
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/edac/i82860_edac.c linux-3.3.8-pax/drivers/edac/i82860_edac.c
--- linux-3.3.8/drivers/edac/i82860_edac.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/edac/i82860_edac.c	2012-03-19 10:43:43.640034670 +0100
@@ -270,7 +270,7 @@ static void __devexit i82860_remove_one(
 	edac_mc_free(mci);
 }
 
-static const struct pci_device_id i82860_pci_tbl[] __devinitdata = {
+static const struct pci_device_id i82860_pci_tbl[] __devinitconst = {
 	{
 	 PCI_VEND_DEV(INTEL, 82860_0), PCI_ANY_ID, PCI_ANY_ID, 0, 0,
 	 I82860},
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/edac/i82875p_edac.c linux-3.3.8-pax/drivers/edac/i82875p_edac.c
--- linux-3.3.8/drivers/edac/i82875p_edac.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/edac/i82875p_edac.c	2012-03-19 10:43:43.640034670 +0100
@@ -511,7 +511,7 @@ static void __devexit i82875p_remove_one
 	edac_mc_free(mci);
 }
 
-static const struct pci_device_id i82875p_pci_tbl[] __devinitdata = {
+static const struct pci_device_id i82875p_pci_tbl[] __devinitconst = {
 	{
 	 PCI_VEND_DEV(INTEL, 82875_0), PCI_ANY_ID, PCI_ANY_ID, 0, 0,
 	 I82875P},
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/edac/i82975x_edac.c linux-3.3.8-pax/drivers/edac/i82975x_edac.c
--- linux-3.3.8/drivers/edac/i82975x_edac.c	2012-03-19 10:38:58.360049900 +0100
+++ linux-3.3.8-pax/drivers/edac/i82975x_edac.c	2012-03-19 10:43:43.640034670 +0100
@@ -612,7 +612,7 @@ static void __devexit i82975x_remove_one
 	edac_mc_free(mci);
 }
 
-static const struct pci_device_id i82975x_pci_tbl[] __devinitdata = {
+static const struct pci_device_id i82975x_pci_tbl[] __devinitconst = {
 	{
 		PCI_VEND_DEV(INTEL, 82975_0), PCI_ANY_ID, PCI_ANY_ID, 0, 0,
 		I82975X
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/edac/mce_amd.h linux-3.3.8-pax/drivers/edac/mce_amd.h
--- linux-3.3.8/drivers/edac/mce_amd.h	2012-01-08 19:47:52.123472846 +0100
+++ linux-3.3.8-pax/drivers/edac/mce_amd.h	2012-03-19 10:43:43.640034670 +0100
@@ -83,7 +83,7 @@ struct amd_decoder_ops {
 	bool (*dc_mce)(u16, u8);
 	bool (*ic_mce)(u16, u8);
 	bool (*nb_mce)(u16, u8);
-};
+} __no_const;
 
 void amd_report_gart_errors(bool);
 void amd_register_ecc_decoder(void (*f)(int, struct mce *));
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/edac/r82600_edac.c linux-3.3.8-pax/drivers/edac/r82600_edac.c
--- linux-3.3.8/drivers/edac/r82600_edac.c	2012-03-19 10:38:58.364049900 +0100
+++ linux-3.3.8-pax/drivers/edac/r82600_edac.c	2012-03-19 10:43:43.640034670 +0100
@@ -373,7 +373,7 @@ static void __devexit r82600_remove_one(
 	edac_mc_free(mci);
 }
 
-static const struct pci_device_id r82600_pci_tbl[] __devinitdata = {
+static const struct pci_device_id r82600_pci_tbl[] __devinitconst = {
 	{
 	 PCI_DEVICE(PCI_VENDOR_ID_RADISYS, R82600_BRIDGE_ID)
 	 },
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/edac/sb_edac.c linux-3.3.8-pax/drivers/edac/sb_edac.c
--- linux-3.3.8/drivers/edac/sb_edac.c	2012-03-19 10:38:58.364049900 +0100
+++ linux-3.3.8-pax/drivers/edac/sb_edac.c	2012-03-19 10:43:43.644034668 +0100
@@ -367,7 +367,7 @@ static const struct pci_id_table pci_dev
 /*
  *	pci_device_id	table for which devices we are looking for
  */
-static const struct pci_device_id sbridge_pci_tbl[] __devinitdata = {
+static const struct pci_device_id sbridge_pci_tbl[] __devinitconst = {
 	{PCI_DEVICE(PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_SBRIDGE_IMC_TA)},
 	{0,}			/* 0 terminated list. */
 };
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/edac/x38_edac.c linux-3.3.8-pax/drivers/edac/x38_edac.c
--- linux-3.3.8/drivers/edac/x38_edac.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/edac/x38_edac.c	2012-03-19 10:43:43.644034668 +0100
@@ -440,7 +440,7 @@ static void __devexit x38_remove_one(str
 	edac_mc_free(mci);
 }
 
-static const struct pci_device_id x38_pci_tbl[] __devinitdata = {
+static const struct pci_device_id x38_pci_tbl[] __devinitconst = {
 	{
 	 PCI_VEND_DEV(INTEL, X38_HB), PCI_ANY_ID, PCI_ANY_ID, 0, 0,
 	 X38},
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/firewire/core-card.c linux-3.3.8-pax/drivers/firewire/core-card.c
--- linux-3.3.8/drivers/firewire/core-card.c	2011-10-24 12:48:27.619091700 +0200
+++ linux-3.3.8-pax/drivers/firewire/core-card.c	2012-03-19 10:43:43.644034668 +0100
@@ -657,7 +657,7 @@ void fw_card_release(struct kref *kref)
 
 void fw_core_remove_card(struct fw_card *card)
 {
-	struct fw_card_driver dummy_driver = dummy_driver_template;
+	fw_card_driver_no_const dummy_driver = dummy_driver_template;
 
 	card->driver->update_phy_reg(card, 4,
 				     PHY_LINK_ACTIVE | PHY_CONTENDER, 0);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/firewire/core-cdev.c linux-3.3.8-pax/drivers/firewire/core-cdev.c
--- linux-3.3.8/drivers/firewire/core-cdev.c	2011-10-24 12:48:27.619091700 +0200
+++ linux-3.3.8-pax/drivers/firewire/core-cdev.c	2012-03-19 10:43:43.648034668 +0100
@@ -1331,8 +1331,7 @@ static int init_iso_resource(struct clie
 	int ret;
 
 	if ((request->channels == 0 && request->bandwidth == 0) ||
-	    request->bandwidth > BANDWIDTH_AVAILABLE_INITIAL ||
-	    request->bandwidth < 0)
+	    request->bandwidth > BANDWIDTH_AVAILABLE_INITIAL)
 		return -EINVAL;
 
 	r  = kmalloc(sizeof(*r), GFP_KERNEL);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/firewire/core.h linux-3.3.8-pax/drivers/firewire/core.h
--- linux-3.3.8/drivers/firewire/core.h	2011-10-24 12:48:27.627091698 +0200
+++ linux-3.3.8-pax/drivers/firewire/core.h	2012-03-19 10:43:43.648034668 +0100
@@ -101,6 +101,7 @@ struct fw_card_driver {
 
 	int (*stop_iso)(struct fw_iso_context *ctx);
 };
+typedef struct fw_card_driver __no_const fw_card_driver_no_const;
 
 void fw_card_initialize(struct fw_card *card,
 		const struct fw_card_driver *driver, struct device *device);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/firewire/core-transaction.c linux-3.3.8-pax/drivers/firewire/core-transaction.c
--- linux-3.3.8/drivers/firewire/core-transaction.c	2012-01-08 19:47:52.139472845 +0100
+++ linux-3.3.8-pax/drivers/firewire/core-transaction.c	2012-03-19 10:43:43.648034668 +0100
@@ -37,6 +37,7 @@
 #include <linux/timer.h>
 #include <linux/types.h>
 #include <linux/workqueue.h>
+#include <linux/sched.h>
 
 #include <asm/byteorder.h>
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/firmware/dmi_scan.c linux-3.3.8-pax/drivers/firmware/dmi_scan.c
--- linux-3.3.8/drivers/firmware/dmi_scan.c	2012-01-08 19:47:52.159472844 +0100
+++ linux-3.3.8-pax/drivers/firmware/dmi_scan.c	2012-03-19 10:43:43.648034668 +0100
@@ -449,11 +449,6 @@ void __init dmi_scan_machine(void)
 		}
 	}
 	else {
-		/*
-		 * no iounmap() for that ioremap(); it would be a no-op, but
-		 * it's so early in setup that sucker gets confused into doing
-		 * what it shouldn't if we actually call it.
-		 */
 		p = dmi_ioremap(0xF0000, 0x10000);
 		if (p == NULL)
 			goto error;
@@ -723,7 +718,7 @@ int dmi_walk(void (*decode)(const struct
 	if (buf == NULL)
 		return -1;
 
-	dmi_table(buf, dmi_len, dmi_num, decode, private_data);
+	dmi_table((char __force_kernel *)buf, dmi_len, dmi_num, decode, private_data);
 
 	iounmap(buf);
 	return 0;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpio/gpio-vr41xx.c linux-3.3.8-pax/drivers/gpio/gpio-vr41xx.c
--- linux-3.3.8/drivers/gpio/gpio-vr41xx.c	2012-03-19 10:38:58.656049887 +0100
+++ linux-3.3.8-pax/drivers/gpio/gpio-vr41xx.c	2012-03-19 10:43:43.652034669 +0100
@@ -204,7 +204,7 @@ static int giu_get_irq(unsigned int irq)
 	printk(KERN_ERR "spurious GIU interrupt: %04x(%04x),%04x(%04x)\n",
 	       maskl, pendl, maskh, pendh);
 
-	atomic_inc(&irq_err_count);
+	atomic_inc_unchecked(&irq_err_count);
 
 	return -EINVAL;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/drm_crtc_helper.c linux-3.3.8-pax/drivers/gpu/drm/drm_crtc_helper.c
--- linux-3.3.8/drivers/gpu/drm/drm_crtc_helper.c	2012-03-19 10:38:58.684049885 +0100
+++ linux-3.3.8-pax/drivers/gpu/drm/drm_crtc_helper.c	2012-03-19 10:43:43.652034669 +0100
@@ -280,7 +280,7 @@ static bool drm_encoder_crtc_ok(struct d
 	struct drm_crtc *tmp;
 	int crtc_mask = 1;
 
-	WARN(!crtc, "checking null crtc?\n");
+	BUG_ON(!crtc);
 
 	dev = crtc->dev;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/drm_drv.c linux-3.3.8-pax/drivers/gpu/drm/drm_drv.c
--- linux-3.3.8/drivers/gpu/drm/drm_drv.c	2012-03-19 10:38:58.684049885 +0100
+++ linux-3.3.8-pax/drivers/gpu/drm/drm_drv.c	2012-03-19 10:43:43.652034669 +0100
@@ -312,7 +312,7 @@ module_exit(drm_core_exit);
 /**
  * Copy and IOCTL return string to user space
  */
-static int drm_copy_field(char *buf, size_t *buf_len, const char *value)
+static int drm_copy_field(char __user *buf, size_t *buf_len, const char *value)
 {
 	int len;
 
@@ -391,7 +391,7 @@ long drm_ioctl(struct file *filp,
 
 	dev = file_priv->minor->dev;
 	atomic_inc(&dev->ioctl_count);
-	atomic_inc(&dev->counts[_DRM_STAT_IOCTLS]);
+	atomic_inc_unchecked(&dev->counts[_DRM_STAT_IOCTLS]);
 	++file_priv->ioctl_count;
 
 	DRM_DEBUG("pid=%d, cmd=0x%02x, nr=0x%02x, dev 0x%lx, auth=%d\n",
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/drm_fops.c linux-3.3.8-pax/drivers/gpu/drm/drm_fops.c
--- linux-3.3.8/drivers/gpu/drm/drm_fops.c	2012-03-19 10:38:58.692049884 +0100
+++ linux-3.3.8-pax/drivers/gpu/drm/drm_fops.c	2012-03-19 10:43:43.652034669 +0100
@@ -71,7 +71,7 @@ static int drm_setup(struct drm_device *
 	}
 
 	for (i = 0; i < ARRAY_SIZE(dev->counts); i++)
-		atomic_set(&dev->counts[i], 0);
+		atomic_set_unchecked(&dev->counts[i], 0);
 
 	dev->sigdata.lock = NULL;
 
@@ -135,8 +135,8 @@ int drm_open(struct inode *inode, struct
 
 	retcode = drm_open_helper(inode, filp, dev);
 	if (!retcode) {
-		atomic_inc(&dev->counts[_DRM_STAT_OPENS]);
-		if (!dev->open_count++)
+		atomic_inc_unchecked(&dev->counts[_DRM_STAT_OPENS]);
+		if (local_inc_return(&dev->open_count) == 1)
 			retcode = drm_setup(dev);
 	}
 	if (!retcode) {
@@ -473,7 +473,7 @@ int drm_release(struct inode *inode, str
 
 	mutex_lock(&drm_global_mutex);
 
-	DRM_DEBUG("open_count = %d\n", dev->open_count);
+	DRM_DEBUG("open_count = %ld\n", local_read(&dev->open_count));
 
 	if (dev->driver->preclose)
 		dev->driver->preclose(dev, file_priv);
@@ -482,10 +482,10 @@ int drm_release(struct inode *inode, str
 	 * Begin inline drm_release
 	 */
 
-	DRM_DEBUG("pid = %d, device = 0x%lx, open_count = %d\n",
+	DRM_DEBUG("pid = %d, device = 0x%lx, open_count = %ld\n",
 		  task_pid_nr(current),
 		  (long)old_encode_dev(file_priv->minor->device),
-		  dev->open_count);
+		  local_read(&dev->open_count));
 
 	/* Release any auth tokens that might point to this file_priv,
 	   (do that under the drm_global_mutex) */
@@ -571,8 +571,8 @@ int drm_release(struct inode *inode, str
 	 * End inline drm_release
 	 */
 
-	atomic_inc(&dev->counts[_DRM_STAT_CLOSES]);
-	if (!--dev->open_count) {
+	atomic_inc_unchecked(&dev->counts[_DRM_STAT_CLOSES]);
+	if (local_dec_and_test(&dev->open_count)) {
 		if (atomic_read(&dev->ioctl_count)) {
 			DRM_ERROR("Device busy: %d\n",
 				  atomic_read(&dev->ioctl_count));
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/drm_global.c linux-3.3.8-pax/drivers/gpu/drm/drm_global.c
--- linux-3.3.8/drivers/gpu/drm/drm_global.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/gpu/drm/drm_global.c	2012-03-19 10:43:43.660034669 +0100
@@ -36,7 +36,7 @@
 struct drm_global_item {
 	struct mutex mutex;
 	void *object;
-	int refcount;
+	atomic_t refcount;
 };
 
 static struct drm_global_item glob[DRM_GLOBAL_NUM];
@@ -49,7 +49,7 @@ void drm_global_init(void)
 		struct drm_global_item *item = &glob[i];
 		mutex_init(&item->mutex);
 		item->object = NULL;
-		item->refcount = 0;
+		atomic_set(&item->refcount, 0);
 	}
 }
 
@@ -59,7 +59,7 @@ void drm_global_release(void)
 	for (i = 0; i < DRM_GLOBAL_NUM; ++i) {
 		struct drm_global_item *item = &glob[i];
 		BUG_ON(item->object != NULL);
-		BUG_ON(item->refcount != 0);
+		BUG_ON(atomic_read(&item->refcount) != 0);
 	}
 }
 
@@ -70,7 +70,7 @@ int drm_global_item_ref(struct drm_globa
 	void *object;
 
 	mutex_lock(&item->mutex);
-	if (item->refcount == 0) {
+	if (atomic_read(&item->refcount) == 0) {
 		item->object = kzalloc(ref->size, GFP_KERNEL);
 		if (unlikely(item->object == NULL)) {
 			ret = -ENOMEM;
@@ -83,7 +83,7 @@ int drm_global_item_ref(struct drm_globa
 			goto out_err;
 
 	}
-	++item->refcount;
+	atomic_inc(&item->refcount);
 	ref->object = item->object;
 	object = item->object;
 	mutex_unlock(&item->mutex);
@@ -100,9 +100,9 @@ void drm_global_item_unref(struct drm_gl
 	struct drm_global_item *item = &glob[ref->global_type];
 
 	mutex_lock(&item->mutex);
-	BUG_ON(item->refcount == 0);
+	BUG_ON(atomic_read(&item->refcount) == 0);
 	BUG_ON(ref->object != item->object);
-	if (--item->refcount == 0) {
+	if (atomic_dec_and_test(&item->refcount)) {
 		ref->release(ref);
 		item->object = NULL;
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/drm_info.c linux-3.3.8-pax/drivers/gpu/drm/drm_info.c
--- linux-3.3.8/drivers/gpu/drm/drm_info.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/gpu/drm/drm_info.c	2012-03-19 10:43:43.660034669 +0100
@@ -75,10 +75,14 @@ int drm_vm_info(struct seq_file *m, void
 	struct drm_local_map *map;
 	struct drm_map_list *r_list;
 
-	/* Hardcoded from _DRM_FRAME_BUFFER,
-	   _DRM_REGISTERS, _DRM_SHM, _DRM_AGP, and
-	   _DRM_SCATTER_GATHER and _DRM_CONSISTENT */
-	const char *types[] = { "FB", "REG", "SHM", "AGP", "SG", "PCI" };
+	static const char * const types[] = {
+		[_DRM_FRAME_BUFFER] = "FB",
+		[_DRM_REGISTERS] = "REG",
+		[_DRM_SHM] = "SHM",
+		[_DRM_AGP] = "AGP",
+		[_DRM_SCATTER_GATHER] = "SG",
+		[_DRM_CONSISTENT] = "PCI",
+		[_DRM_GEM] = "GEM" };
 	const char *type;
 	int i;
 
@@ -89,7 +93,7 @@ int drm_vm_info(struct seq_file *m, void
 		map = r_list->map;
 		if (!map)
 			continue;
-		if (map->type < 0 || map->type > 5)
+		if (map->type >= ARRAY_SIZE(types))
 			type = "??";
 		else
 			type = types[map->type];
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/drm_ioc32.c linux-3.3.8-pax/drivers/gpu/drm/drm_ioc32.c
--- linux-3.3.8/drivers/gpu/drm/drm_ioc32.c	2012-03-19 10:38:58.692049884 +0100
+++ linux-3.3.8-pax/drivers/gpu/drm/drm_ioc32.c	2012-03-19 10:43:43.660034669 +0100
@@ -457,7 +457,7 @@ static int compat_drm_infobufs(struct fi
 	request = compat_alloc_user_space(nbytes);
 	if (!access_ok(VERIFY_WRITE, request, nbytes))
 		return -EFAULT;
-	list = (struct drm_buf_desc *) (request + 1);
+	list = (struct drm_buf_desc __user *) (request + 1);
 
 	if (__put_user(count, &request->count)
 	    || __put_user(list, &request->list))
@@ -518,7 +518,7 @@ static int compat_drm_mapbufs(struct fil
 	request = compat_alloc_user_space(nbytes);
 	if (!access_ok(VERIFY_WRITE, request, nbytes))
 		return -EFAULT;
-	list = (struct drm_buf_pub *) (request + 1);
+	list = (struct drm_buf_pub __user *) (request + 1);
 
 	if (__put_user(count, &request->count)
 	    || __put_user(list, &request->list))
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/drm_ioctl.c linux-3.3.8-pax/drivers/gpu/drm/drm_ioctl.c
--- linux-3.3.8/drivers/gpu/drm/drm_ioctl.c	2012-03-19 10:38:58.696049884 +0100
+++ linux-3.3.8-pax/drivers/gpu/drm/drm_ioctl.c	2012-03-19 10:43:43.660034669 +0100
@@ -251,7 +251,7 @@ int drm_getstats(struct drm_device *dev,
 			stats->data[i].value =
 			    (file_priv->master->lock.hw_lock ? file_priv->master->lock.hw_lock->lock : 0);
 		else
-			stats->data[i].value = atomic_read(&dev->counts[i]);
+			stats->data[i].value = atomic_read_unchecked(&dev->counts[i]);
 		stats->data[i].type = dev->types[i];
 	}
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/drm_lock.c linux-3.3.8-pax/drivers/gpu/drm/drm_lock.c
--- linux-3.3.8/drivers/gpu/drm/drm_lock.c	2012-03-19 10:38:58.696049884 +0100
+++ linux-3.3.8-pax/drivers/gpu/drm/drm_lock.c	2012-03-19 10:43:43.660034670 +0100
@@ -90,7 +90,7 @@ int drm_lock(struct drm_device *dev, voi
 		if (drm_lock_take(&master->lock, lock->context)) {
 			master->lock.file_priv = file_priv;
 			master->lock.lock_time = jiffies;
-			atomic_inc(&dev->counts[_DRM_STAT_LOCKS]);
+			atomic_inc_unchecked(&dev->counts[_DRM_STAT_LOCKS]);
 			break;	/* Got lock */
 		}
 
@@ -161,7 +161,7 @@ int drm_unlock(struct drm_device *dev, v
 		return -EINVAL;
 	}
 
-	atomic_inc(&dev->counts[_DRM_STAT_UNLOCKS]);
+	atomic_inc_unchecked(&dev->counts[_DRM_STAT_UNLOCKS]);
 
 	if (drm_lock_free(&master->lock, lock->context)) {
 		/* FIXME: Should really bail out here. */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/i810/i810_dma.c linux-3.3.8-pax/drivers/gpu/drm/i810/i810_dma.c
--- linux-3.3.8/drivers/gpu/drm/i810/i810_dma.c	2012-03-19 10:38:58.764049881 +0100
+++ linux-3.3.8-pax/drivers/gpu/drm/i810/i810_dma.c	2012-03-19 10:43:43.660034670 +0100
@@ -948,8 +948,8 @@ static int i810_dma_vertex(struct drm_de
 				 dma->buflist[vertex->idx],
 				 vertex->discard, vertex->used);
 
-	atomic_add(vertex->used, &dev->counts[_DRM_STAT_SECONDARY]);
-	atomic_inc(&dev->counts[_DRM_STAT_DMA]);
+	atomic_add_unchecked(vertex->used, &dev->counts[_DRM_STAT_SECONDARY]);
+	atomic_inc_unchecked(&dev->counts[_DRM_STAT_DMA]);
 	sarea_priv->last_enqueue = dev_priv->counter - 1;
 	sarea_priv->last_dispatch = (int)hw_status[5];
 
@@ -1109,8 +1109,8 @@ static int i810_dma_mc(struct drm_device
 	i810_dma_dispatch_mc(dev, dma->buflist[mc->idx], mc->used,
 			     mc->last_render);
 
-	atomic_add(mc->used, &dev->counts[_DRM_STAT_SECONDARY]);
-	atomic_inc(&dev->counts[_DRM_STAT_DMA]);
+	atomic_add_unchecked(mc->used, &dev->counts[_DRM_STAT_SECONDARY]);
+	atomic_inc_unchecked(&dev->counts[_DRM_STAT_DMA]);
 	sarea_priv->last_enqueue = dev_priv->counter - 1;
 	sarea_priv->last_dispatch = (int)hw_status[5];
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/i810/i810_drv.h linux-3.3.8-pax/drivers/gpu/drm/i810/i810_drv.h
--- linux-3.3.8/drivers/gpu/drm/i810/i810_drv.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/gpu/drm/i810/i810_drv.h	2012-03-19 10:43:43.660034670 +0100
@@ -108,8 +108,8 @@ typedef struct drm_i810_private {
 	int page_flipping;
 
 	wait_queue_head_t irq_queue;
-	atomic_t irq_received;
-	atomic_t irq_emitted;
+	atomic_unchecked_t irq_received;
+	atomic_unchecked_t irq_emitted;
 
 	int front_offset;
 } drm_i810_private_t;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/i915/i915_debugfs.c linux-3.3.8-pax/drivers/gpu/drm/i915/i915_debugfs.c
--- linux-3.3.8/drivers/gpu/drm/i915/i915_debugfs.c	2012-03-19 10:38:58.792049879 +0100
+++ linux-3.3.8-pax/drivers/gpu/drm/i915/i915_debugfs.c	2012-03-19 10:43:43.660034670 +0100
@@ -499,7 +499,7 @@ static int i915_interrupt_info(struct se
 			   I915_READ(GTIMR));
 	}
 	seq_printf(m, "Interrupts received: %d\n",
-		   atomic_read(&dev_priv->irq_received));
+		   atomic_read_unchecked(&dev_priv->irq_received));
 	for (i = 0; i < I915_NUM_RINGS; i++) {
 		if (IS_GEN6(dev) || IS_GEN7(dev)) {
 			seq_printf(m, "Graphics Interrupt mask (%s):	%08x\n",
@@ -1321,7 +1321,7 @@ static int i915_opregion(struct seq_file
 		return ret;
 
 	if (opregion->header)
-		seq_write(m, opregion->header, OPREGION_SIZE);
+		seq_write(m, (const void __force_kernel *)opregion->header, OPREGION_SIZE);
 
 	mutex_unlock(&dev->struct_mutex);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/i915/i915_dma.c linux-3.3.8-pax/drivers/gpu/drm/i915/i915_dma.c
--- linux-3.3.8/drivers/gpu/drm/i915/i915_dma.c	2012-03-19 10:38:58.792049879 +0100
+++ linux-3.3.8-pax/drivers/gpu/drm/i915/i915_dma.c	2012-03-19 10:43:43.664034669 +0100
@@ -1175,7 +1175,7 @@ static bool i915_switcheroo_can_switch(s
 	bool can_switch;
 
 	spin_lock(&dev->count_lock);
-	can_switch = (dev->open_count == 0);
+	can_switch = (local_read(&dev->open_count) == 0);
 	spin_unlock(&dev->count_lock);
 	return can_switch;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/i915/i915_drv.h linux-3.3.8-pax/drivers/gpu/drm/i915/i915_drv.h
--- linux-3.3.8/drivers/gpu/drm/i915/i915_drv.h	2012-03-19 10:38:58.796049879 +0100
+++ linux-3.3.8-pax/drivers/gpu/drm/i915/i915_drv.h	2012-03-19 10:43:43.664034669 +0100
@@ -231,7 +231,7 @@ struct drm_i915_display_funcs {
 	/* render clock increase/decrease */
 	/* display clock increase/decrease */
 	/* pll clock increase/decrease */
-};
+} __no_const;
 
 struct intel_device_info {
 	u8 gen;
@@ -320,7 +320,7 @@ typedef struct drm_i915_private {
 	int current_page;
 	int page_flipping;
 
-	atomic_t irq_received;
+	atomic_unchecked_t irq_received;
 
 	/* protects the irq masks */
 	spinlock_t irq_lock;
@@ -896,7 +896,7 @@ struct drm_i915_gem_object {
 	 * will be page flipped away on the next vblank.  When it
 	 * reaches 0, dev_priv->pending_flip_queue will be woken up.
 	 */
-	atomic_t pending_flip;
+	atomic_unchecked_t pending_flip;
 };
 
 #define to_intel_bo(x) container_of(x, struct drm_i915_gem_object, base)
@@ -1276,7 +1276,7 @@ extern int intel_setup_gmbus(struct drm_
 extern void intel_teardown_gmbus(struct drm_device *dev);
 extern void intel_gmbus_set_speed(struct i2c_adapter *adapter, int speed);
 extern void intel_gmbus_force_bit(struct i2c_adapter *adapter, bool force_bit);
-extern inline bool intel_gmbus_is_forced_bit(struct i2c_adapter *adapter)
+static inline bool intel_gmbus_is_forced_bit(struct i2c_adapter *adapter)
 {
 	return container_of(adapter, struct intel_gmbus, adapter)->force_bit;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/i915/i915_gem_execbuffer.c linux-3.3.8-pax/drivers/gpu/drm/i915/i915_gem_execbuffer.c
--- linux-3.3.8/drivers/gpu/drm/i915/i915_gem_execbuffer.c	2012-05-07 20:26:56.011609317 +0200
+++ linux-3.3.8-pax/drivers/gpu/drm/i915/i915_gem_execbuffer.c	2012-05-07 20:27:02.059608995 +0200
@@ -189,7 +189,7 @@ i915_gem_object_set_to_gpu_domain(struct
 		i915_gem_clflush_object(obj);
 
 	if (obj->base.pending_write_domain)
-		cd->flips |= atomic_read(&obj->pending_flip);
+		cd->flips |= atomic_read_unchecked(&obj->pending_flip);
 
 	/* The actual obj->write_domain will be updated with
 	 * pending_write_domain after we emit the accumulated flush for all
@@ -882,9 +882,9 @@ i915_gem_check_execbuffer(struct drm_i91
 
 static int
 validate_exec_list(struct drm_i915_gem_exec_object2 *exec,
-		   int count)
+		   unsigned int count)
 {
-	int i;
+	unsigned int i;
 
 	for (i = 0; i < count; i++) {
 		char __user *ptr = (char __user *)(uintptr_t)exec[i].relocs_ptr;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/i915/i915_irq.c linux-3.3.8-pax/drivers/gpu/drm/i915/i915_irq.c
--- linux-3.3.8/drivers/gpu/drm/i915/i915_irq.c	2012-06-11 19:36:39.856445788 +0200
+++ linux-3.3.8-pax/drivers/gpu/drm/i915/i915_irq.c	2012-06-11 19:36:46.188446134 +0200
@@ -472,7 +472,7 @@ static irqreturn_t ivybridge_irq_handler
 	u32 de_iir, gt_iir, de_ier, pch_iir, pm_iir;
 	struct drm_i915_master_private *master_priv;
 
-	atomic_inc(&dev_priv->irq_received);
+	atomic_inc_unchecked(&dev_priv->irq_received);
 
 	/* disable master interrupt before clearing iir  */
 	de_ier = I915_READ(DEIER);
@@ -563,7 +563,7 @@ static irqreturn_t ironlake_irq_handler(
 	struct drm_i915_master_private *master_priv;
 	u32 bsd_usr_interrupt = GT_BSD_USER_INTERRUPT;
 
-	atomic_inc(&dev_priv->irq_received);
+	atomic_inc_unchecked(&dev_priv->irq_received);
 
 	if (IS_GEN6(dev))
 		bsd_usr_interrupt = GT_GEN6_BSD_USER_INTERRUPT;
@@ -1228,7 +1228,7 @@ static irqreturn_t i915_driver_irq_handl
 	int ret = IRQ_NONE, pipe;
 	bool blc_event = false;
 
-	atomic_inc(&dev_priv->irq_received);
+	atomic_inc_unchecked(&dev_priv->irq_received);
 
 	iir = I915_READ(IIR);
 
@@ -1740,7 +1740,7 @@ static void ironlake_irq_preinstall(stru
 {
 	drm_i915_private_t *dev_priv = (drm_i915_private_t *) dev->dev_private;
 
-	atomic_set(&dev_priv->irq_received, 0);
+	atomic_set_unchecked(&dev_priv->irq_received, 0);
 
 	INIT_WORK(&dev_priv->hotplug_work, i915_hotplug_work_func);
 	INIT_WORK(&dev_priv->error_work, i915_error_work_func);
@@ -1929,7 +1929,7 @@ static void i915_driver_irq_preinstall(s
 	drm_i915_private_t *dev_priv = (drm_i915_private_t *) dev->dev_private;
 	int pipe;
 
-	atomic_set(&dev_priv->irq_received, 0);
+	atomic_set_unchecked(&dev_priv->irq_received, 0);
 
 	INIT_WORK(&dev_priv->hotplug_work, i915_hotplug_work_func);
 	INIT_WORK(&dev_priv->error_work, i915_error_work_func);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/i915/intel_display.c linux-3.3.8-pax/drivers/gpu/drm/i915/intel_display.c
--- linux-3.3.8/drivers/gpu/drm/i915/intel_display.c	2012-06-11 19:36:38.996445748 +0200
+++ linux-3.3.8-pax/drivers/gpu/drm/i915/intel_display.c	2012-06-11 19:36:45.492446098 +0200
@@ -2238,7 +2238,7 @@ intel_pipe_set_base(struct drm_crtc *crt
 
 		wait_event(dev_priv->pending_flip_queue,
 			   atomic_read(&dev_priv->mm.wedged) ||
-			   atomic_read(&obj->pending_flip) == 0);
+			   atomic_read_unchecked(&obj->pending_flip) == 0);
 
 		/* Big Hammer, we also need to ensure that any pending
 		 * MI_WAIT_FOR_EVENT inside a user batch buffer on the
@@ -2859,7 +2859,7 @@ static void intel_crtc_wait_for_pending_
 	obj = to_intel_framebuffer(crtc->fb)->obj;
 	dev_priv = crtc->dev->dev_private;
 	wait_event(dev_priv->pending_flip_queue,
-		   atomic_read(&obj->pending_flip) == 0);
+		   atomic_read_unchecked(&obj->pending_flip) == 0);
 }
 
 static bool intel_crtc_driving_pch(struct drm_crtc *crtc)
@@ -7171,7 +7171,7 @@ static void do_intel_finish_page_flip(st
 
 	atomic_clear_mask(1 << intel_crtc->plane,
 			  &obj->pending_flip.counter);
-	if (atomic_read(&obj->pending_flip) == 0)
+	if (atomic_read_unchecked(&obj->pending_flip) == 0)
 		wake_up(&dev_priv->pending_flip_queue);
 
 	schedule_work(&work->work);
@@ -7354,7 +7354,13 @@ static int intel_gen6_queue_flip(struct
 	OUT_RING(fb->pitches[0] | obj->tiling_mode);
 	OUT_RING(obj->gtt_offset);
 
-	pf = I915_READ(PF_CTL(intel_crtc->pipe)) & PF_ENABLE;
+	/* Contrary to the suggestions in the documentation,
+	 * "Enable Panel Fitter" does not seem to be required when page
+	 * flipping with a non-native mode, and worse causes a normal
+	 * modeset to fail.
+	 * pf = I915_READ(PF_CTL(intel_crtc->pipe)) & PF_ENABLE;
+	 */
+	pf = 0;
 	pipesrc = I915_READ(PIPESRC(intel_crtc->pipe)) & 0x0fff0fff;
 	OUT_RING(pf | pipesrc);
 	ADVANCE_LP_RING();
@@ -7461,7 +7467,7 @@ static int intel_crtc_page_flip(struct d
 	/* Block clients from rendering to the new back buffer until
 	 * the flip occurs and the object is no longer visible.
 	 */
-	atomic_add(1 << intel_crtc->plane, &work->old_fb_obj->pending_flip);
+	atomic_add_unchecked(1 << intel_crtc->plane, &work->old_fb_obj->pending_flip);
 
 	ret = dev_priv->display.queue_flip(dev, crtc, fb, obj);
 	if (ret)
@@ -7475,7 +7481,7 @@ static int intel_crtc_page_flip(struct d
 	return 0;
 
 cleanup_pending:
-	atomic_sub(1 << intel_crtc->plane, &work->old_fb_obj->pending_flip);
+	atomic_sub_unchecked(1 << intel_crtc->plane, &work->old_fb_obj->pending_flip);
 	drm_gem_object_unreference(&work->old_fb_obj->base);
 	drm_gem_object_unreference(&obj->base);
 	mutex_unlock(&dev->struct_mutex);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/mga/mga_drv.h linux-3.3.8-pax/drivers/gpu/drm/mga/mga_drv.h
--- linux-3.3.8/drivers/gpu/drm/mga/mga_drv.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/gpu/drm/mga/mga_drv.h	2012-03-19 10:43:43.672034667 +0100
@@ -120,9 +120,9 @@ typedef struct drm_mga_private {
 	u32 clear_cmd;
 	u32 maccess;
 
-	atomic_t vbl_received;          /**< Number of vblanks received. */
+	atomic_unchecked_t vbl_received;          /**< Number of vblanks received. */
 	wait_queue_head_t fence_queue;
-	atomic_t last_fence_retired;
+	atomic_unchecked_t last_fence_retired;
 	u32 next_fence_to_post;
 
 	unsigned int fb_cpp;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/mga/mga_irq.c linux-3.3.8-pax/drivers/gpu/drm/mga/mga_irq.c
--- linux-3.3.8/drivers/gpu/drm/mga/mga_irq.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/gpu/drm/mga/mga_irq.c	2012-03-19 10:43:43.676034667 +0100
@@ -44,7 +44,7 @@ u32 mga_get_vblank_counter(struct drm_de
 	if (crtc != 0)
 		return 0;
 
-	return atomic_read(&dev_priv->vbl_received);
+	return atomic_read_unchecked(&dev_priv->vbl_received);
 }
 
 
@@ -60,7 +60,7 @@ irqreturn_t mga_driver_irq_handler(DRM_I
 	/* VBLANK interrupt */
 	if (status & MGA_VLINEPEN) {
 		MGA_WRITE(MGA_ICLEAR, MGA_VLINEICLR);
-		atomic_inc(&dev_priv->vbl_received);
+		atomic_inc_unchecked(&dev_priv->vbl_received);
 		drm_handle_vblank(dev, 0);
 		handled = 1;
 	}
@@ -79,7 +79,7 @@ irqreturn_t mga_driver_irq_handler(DRM_I
 		if ((prim_start & ~0x03) != (prim_end & ~0x03))
 			MGA_WRITE(MGA_PRIMEND, prim_end);
 
-		atomic_inc(&dev_priv->last_fence_retired);
+		atomic_inc_unchecked(&dev_priv->last_fence_retired);
 		DRM_WAKEUP(&dev_priv->fence_queue);
 		handled = 1;
 	}
@@ -130,7 +130,7 @@ int mga_driver_fence_wait(struct drm_dev
 	 * using fences.
 	 */
 	DRM_WAIT_ON(ret, dev_priv->fence_queue, 3 * DRM_HZ,
-		    (((cur_fence = atomic_read(&dev_priv->last_fence_retired))
+		    (((cur_fence = atomic_read_unchecked(&dev_priv->last_fence_retired))
 		      - *sequence) <= (1 << 23)));
 
 	*sequence = cur_fence;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/nouveau/nouveau_bios.c linux-3.3.8-pax/drivers/gpu/drm/nouveau/nouveau_bios.c
--- linux-3.3.8/drivers/gpu/drm/nouveau/nouveau_bios.c	2012-03-19 10:38:58.856049876 +0100
+++ linux-3.3.8-pax/drivers/gpu/drm/nouveau/nouveau_bios.c	2012-03-19 10:43:43.676034667 +0100
@@ -199,7 +199,7 @@ struct methods {
 	const char desc[8];
 	void (*loadbios)(struct drm_device *, uint8_t *);
 	const bool rw;
-};
+} __do_const;
 
 static struct methods shadow_methods[] = {
 	{ "PRAMIN", load_vbios_pramin, true },
@@ -5290,7 +5290,7 @@ parse_bit_U_tbl_entry(struct drm_device
 struct bit_table {
 	const char id;
 	int (* const parse_fn)(struct drm_device *, struct nvbios *, struct bit_entry *);
-};
+} __no_const;
 
 #define BIT_TABLE(id, funcid) ((struct bit_table){ id, parse_bit_##funcid##_tbl_entry })
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/nouveau/nouveau_drv.h linux-3.3.8-pax/drivers/gpu/drm/nouveau/nouveau_drv.h
--- linux-3.3.8/drivers/gpu/drm/nouveau/nouveau_drv.h	2012-03-19 10:38:58.872049875 +0100
+++ linux-3.3.8-pax/drivers/gpu/drm/nouveau/nouveau_drv.h	2012-03-19 10:43:43.680034668 +0100
@@ -242,7 +242,7 @@ struct nouveau_channel {
 		struct list_head pending;
 		uint32_t sequence;
 		uint32_t sequence_ack;
-		atomic_t last_sequence_irq;
+		atomic_unchecked_t last_sequence_irq;
 		struct nouveau_vma vma;
 	} fence;
 
@@ -323,7 +323,7 @@ struct nouveau_exec_engine {
 			   u32 handle, u16 class);
 	void (*set_tile_region)(struct drm_device *dev, int i);
 	void (*tlb_flush)(struct drm_device *, int engine);
-};
+} __no_const;
 
 struct nouveau_instmem_engine {
 	void	*priv;
@@ -345,13 +345,13 @@ struct nouveau_instmem_engine {
 struct nouveau_mc_engine {
 	int  (*init)(struct drm_device *dev);
 	void (*takedown)(struct drm_device *dev);
-};
+} __no_const;
 
 struct nouveau_timer_engine {
 	int      (*init)(struct drm_device *dev);
 	void     (*takedown)(struct drm_device *dev);
 	uint64_t (*read)(struct drm_device *dev);
-};
+} __no_const;
 
 struct nouveau_fb_engine {
 	int num_tiles;
@@ -566,7 +566,7 @@ struct nouveau_vram_engine {
 	void (*put)(struct drm_device *, struct nouveau_mem **);
 
 	bool (*flags_valid)(struct drm_device *, u32 tile_flags);
-};
+} __no_const;
 
 struct nouveau_engine {
 	struct nouveau_instmem_engine instmem;
@@ -714,7 +714,7 @@ struct drm_nouveau_private {
 		struct drm_global_reference mem_global_ref;
 		struct ttm_bo_global_ref bo_global_ref;
 		struct ttm_bo_device bdev;
-		atomic_t validate_sequence;
+		atomic_unchecked_t validate_sequence;
 	} ttm;
 
 	struct {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/nouveau/nouveau_fence.c linux-3.3.8-pax/drivers/gpu/drm/nouveau/nouveau_fence.c
--- linux-3.3.8/drivers/gpu/drm/nouveau/nouveau_fence.c	2012-01-08 19:47:53.407472777 +0100
+++ linux-3.3.8-pax/drivers/gpu/drm/nouveau/nouveau_fence.c	2012-03-19 10:43:43.684034669 +0100
@@ -85,7 +85,7 @@ nouveau_fence_update(struct nouveau_chan
 		if (USE_REFCNT(dev))
 			sequence = nvchan_rd32(chan, 0x48);
 		else
-			sequence = atomic_read(&chan->fence.last_sequence_irq);
+			sequence = atomic_read_unchecked(&chan->fence.last_sequence_irq);
 
 		if (chan->fence.sequence_ack == sequence)
 			goto out;
@@ -539,7 +539,7 @@ nouveau_fence_channel_init(struct nouvea
 			return ret;
 	}
 
-	atomic_set(&chan->fence.last_sequence_irq, 0);
+	atomic_set_unchecked(&chan->fence.last_sequence_irq, 0);
 	return 0;
 }
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/nouveau/nouveau_gem.c linux-3.3.8-pax/drivers/gpu/drm/nouveau/nouveau_gem.c
--- linux-3.3.8/drivers/gpu/drm/nouveau/nouveau_gem.c	2012-03-19 10:38:58.872049875 +0100
+++ linux-3.3.8-pax/drivers/gpu/drm/nouveau/nouveau_gem.c	2012-03-19 10:43:43.692034668 +0100
@@ -314,7 +314,7 @@ validate_init(struct nouveau_channel *ch
 	int trycnt = 0;
 	int ret, i;
 
-	sequence = atomic_add_return(1, &dev_priv->ttm.validate_sequence);
+	sequence = atomic_add_return_unchecked(1, &dev_priv->ttm.validate_sequence);
 retry:
 	if (++trycnt > 100000) {
 		NV_ERROR(dev, "%s failed and gave up.\n", __func__);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/nouveau/nouveau_state.c linux-3.3.8-pax/drivers/gpu/drm/nouveau/nouveau_state.c
--- linux-3.3.8/drivers/gpu/drm/nouveau/nouveau_state.c	2012-03-19 10:38:58.896049874 +0100
+++ linux-3.3.8-pax/drivers/gpu/drm/nouveau/nouveau_state.c	2012-03-19 10:43:43.700034667 +0100
@@ -543,7 +543,7 @@ static bool nouveau_switcheroo_can_switc
 	bool can_switch;
 
 	spin_lock(&dev->count_lock);
-	can_switch = (dev->open_count == 0);
+	can_switch = (local_read(&dev->open_count) == 0);
 	spin_unlock(&dev->count_lock);
 	return can_switch;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/nouveau/nv04_graph.c linux-3.3.8-pax/drivers/gpu/drm/nouveau/nv04_graph.c
--- linux-3.3.8/drivers/gpu/drm/nouveau/nv04_graph.c	2011-10-24 12:48:28.303091661 +0200
+++ linux-3.3.8-pax/drivers/gpu/drm/nouveau/nv04_graph.c	2012-03-19 10:43:43.700034667 +0100
@@ -554,7 +554,7 @@ static int
 nv04_graph_mthd_set_ref(struct nouveau_channel *chan,
 			u32 class, u32 mthd, u32 data)
 {
-	atomic_set(&chan->fence.last_sequence_irq, data);
+	atomic_set_unchecked(&chan->fence.last_sequence_irq, data);
 	return 0;
 }
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/r128/r128_cce.c linux-3.3.8-pax/drivers/gpu/drm/r128/r128_cce.c
--- linux-3.3.8/drivers/gpu/drm/r128/r128_cce.c	2012-01-08 19:47:53.635472765 +0100
+++ linux-3.3.8-pax/drivers/gpu/drm/r128/r128_cce.c	2012-03-19 10:43:43.700034667 +0100
@@ -378,7 +378,7 @@ static int r128_do_init_cce(struct drm_d
 
 	/* GH: Simple idle check.
 	 */
-	atomic_set(&dev_priv->idle_count, 0);
+	atomic_set_unchecked(&dev_priv->idle_count, 0);
 
 	/* We don't support anything other than bus-mastering ring mode,
 	 * but the ring can be in either AGP or PCI space for the ring
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/r128/r128_drv.h linux-3.3.8-pax/drivers/gpu/drm/r128/r128_drv.h
--- linux-3.3.8/drivers/gpu/drm/r128/r128_drv.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/gpu/drm/r128/r128_drv.h	2012-03-19 10:43:43.700034667 +0100
@@ -90,14 +90,14 @@ typedef struct drm_r128_private {
 	int is_pci;
 	unsigned long cce_buffers_offset;
 
-	atomic_t idle_count;
+	atomic_unchecked_t idle_count;
 
 	int page_flipping;
 	int current_page;
 	u32 crtc_offset;
 	u32 crtc_offset_cntl;
 
-	atomic_t vbl_received;
+	atomic_unchecked_t vbl_received;
 
 	u32 color_fmt;
 	unsigned int front_offset;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/r128/r128_irq.c linux-3.3.8-pax/drivers/gpu/drm/r128/r128_irq.c
--- linux-3.3.8/drivers/gpu/drm/r128/r128_irq.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/gpu/drm/r128/r128_irq.c	2012-03-19 10:43:43.700034668 +0100
@@ -42,7 +42,7 @@ u32 r128_get_vblank_counter(struct drm_d
 	if (crtc != 0)
 		return 0;
 
-	return atomic_read(&dev_priv->vbl_received);
+	return atomic_read_unchecked(&dev_priv->vbl_received);
 }
 
 irqreturn_t r128_driver_irq_handler(DRM_IRQ_ARGS)
@@ -56,7 +56,7 @@ irqreturn_t r128_driver_irq_handler(DRM_
 	/* VBLANK interrupt */
 	if (status & R128_CRTC_VBLANK_INT) {
 		R128_WRITE(R128_GEN_INT_STATUS, R128_CRTC_VBLANK_INT_AK);
-		atomic_inc(&dev_priv->vbl_received);
+		atomic_inc_unchecked(&dev_priv->vbl_received);
 		drm_handle_vblank(dev, 0);
 		return IRQ_HANDLED;
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/r128/r128_state.c linux-3.3.8-pax/drivers/gpu/drm/r128/r128_state.c
--- linux-3.3.8/drivers/gpu/drm/r128/r128_state.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/gpu/drm/r128/r128_state.c	2012-03-19 10:43:43.700034668 +0100
@@ -321,10 +321,10 @@ static void r128_clear_box(drm_r128_priv
 
 static void r128_cce_performance_boxes(drm_r128_private_t *dev_priv)
 {
-	if (atomic_read(&dev_priv->idle_count) == 0)
+	if (atomic_read_unchecked(&dev_priv->idle_count) == 0)
 		r128_clear_box(dev_priv, 64, 4, 8, 8, 0, 255, 0);
 	else
-		atomic_set(&dev_priv->idle_count, 0);
+		atomic_set_unchecked(&dev_priv->idle_count, 0);
 }
 
 #endif
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/radeon/mkregtable.c linux-3.3.8-pax/drivers/gpu/drm/radeon/mkregtable.c
--- linux-3.3.8/drivers/gpu/drm/radeon/mkregtable.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/gpu/drm/radeon/mkregtable.c	2012-03-19 10:43:43.700034668 +0100
@@ -637,14 +637,14 @@ static int parser_auth(struct table *t,
 	regex_t mask_rex;
 	regmatch_t match[4];
 	char buf[1024];
-	size_t end;
+	long end;
 	int len;
 	int done = 0;
 	int r;
 	unsigned o;
 	struct offset *offset;
 	char last_reg_s[10];
-	int last_reg;
+	unsigned long last_reg;
 
 	if (regcomp
 	    (&mask_rex, "(0x[0-9a-fA-F]*) *([_a-zA-Z0-9]*)", REG_EXTENDED)) {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/radeon/radeon_device.c linux-3.3.8-pax/drivers/gpu/drm/radeon/radeon_device.c
--- linux-3.3.8/drivers/gpu/drm/radeon/radeon_device.c	2012-03-19 10:38:59.036049865 +0100
+++ linux-3.3.8-pax/drivers/gpu/drm/radeon/radeon_device.c	2012-03-19 10:43:43.700034668 +0100
@@ -687,7 +687,7 @@ static bool radeon_switcheroo_can_switch
 	bool can_switch;
 
 	spin_lock(&dev->count_lock);
-	can_switch = (dev->open_count == 0);
+	can_switch = (local_read(&dev->open_count) == 0);
 	spin_unlock(&dev->count_lock);
 	return can_switch;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/radeon/radeon_drv.h linux-3.3.8-pax/drivers/gpu/drm/radeon/radeon_drv.h
--- linux-3.3.8/drivers/gpu/drm/radeon/radeon_drv.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/gpu/drm/radeon/radeon_drv.h	2012-03-19 10:43:43.704034667 +0100
@@ -255,7 +255,7 @@ typedef struct drm_radeon_private {
 
 	/* SW interrupt */
 	wait_queue_head_t swi_queue;
-	atomic_t swi_emitted;
+	atomic_unchecked_t swi_emitted;
 	int vblank_crtc;
 	uint32_t irq_enable_reg;
 	uint32_t r500_disp_irq_reg;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/radeon/radeon_fence.c linux-3.3.8-pax/drivers/gpu/drm/radeon/radeon_fence.c
--- linux-3.3.8/drivers/gpu/drm/radeon/radeon_fence.c	2012-03-19 10:38:59.044049866 +0100
+++ linux-3.3.8-pax/drivers/gpu/drm/radeon/radeon_fence.c	2012-03-19 10:43:43.704034667 +0100
@@ -70,7 +70,7 @@ int radeon_fence_emit(struct radeon_devi
 		write_unlock_irqrestore(&rdev->fence_lock, irq_flags);
 		return 0;
 	}
-	fence->seq = atomic_add_return(1, &rdev->fence_drv[fence->ring].seq);
+	fence->seq = atomic_add_return_unchecked(1, &rdev->fence_drv[fence->ring].seq);
 	if (!rdev->ring[fence->ring].ready)
 		/* FIXME: cp is not running assume everythings is done right
 		 * away
@@ -405,7 +405,7 @@ int radeon_fence_driver_start_ring(struc
 	}
 	rdev->fence_drv[ring].cpu_addr = &rdev->wb.wb[index/4];
 	rdev->fence_drv[ring].gpu_addr = rdev->wb.gpu_addr + index;
-	radeon_fence_write(rdev, atomic_read(&rdev->fence_drv[ring].seq), ring);
+	radeon_fence_write(rdev, atomic_read_unchecked(&rdev->fence_drv[ring].seq), ring);
 	rdev->fence_drv[ring].initialized = true;
 	DRM_INFO("fence driver on ring %d use gpu addr 0x%08Lx and cpu addr 0x%p\n",
 		 ring, rdev->fence_drv[ring].gpu_addr, rdev->fence_drv[ring].cpu_addr);
@@ -418,7 +418,7 @@ static void radeon_fence_driver_init_rin
 	rdev->fence_drv[ring].scratch_reg = -1;
 	rdev->fence_drv[ring].cpu_addr = NULL;
 	rdev->fence_drv[ring].gpu_addr = 0;
-	atomic_set(&rdev->fence_drv[ring].seq, 0);
+	atomic_set_unchecked(&rdev->fence_drv[ring].seq, 0);
 	INIT_LIST_HEAD(&rdev->fence_drv[ring].created);
 	INIT_LIST_HEAD(&rdev->fence_drv[ring].emitted);
 	INIT_LIST_HEAD(&rdev->fence_drv[ring].signaled);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/radeon/radeon.h linux-3.3.8-pax/drivers/gpu/drm/radeon/radeon.h
--- linux-3.3.8/drivers/gpu/drm/radeon/radeon.h	2012-03-19 10:38:59.028049866 +0100
+++ linux-3.3.8-pax/drivers/gpu/drm/radeon/radeon.h	2012-03-19 10:43:43.708034666 +0100
@@ -250,7 +250,7 @@ struct radeon_fence_driver {
 	uint32_t			scratch_reg;
 	uint64_t			gpu_addr;
 	volatile uint32_t		*cpu_addr;
-	atomic_t			seq;
+	atomic_unchecked_t		seq;
 	uint32_t			last_seq;
 	unsigned long			last_jiffies;
 	unsigned long			last_timeout;
@@ -752,7 +752,7 @@ struct r600_blit_cp_primitives {
 			     int x2, int y2);
 	void (*draw_auto)(struct radeon_device *rdev);
 	void (*set_default_state)(struct radeon_device *rdev);
-};
+} __no_const;
 
 struct r600_blit {
 	struct mutex		mutex;
@@ -1201,7 +1201,7 @@ struct radeon_asic {
 	void (*pre_page_flip)(struct radeon_device *rdev, int crtc);
 	u32 (*page_flip)(struct radeon_device *rdev, int crtc, u64 crtc_base);
 	void (*post_page_flip)(struct radeon_device *rdev, int crtc);
-};
+} __no_const;
 
 /*
  * Asic structures
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/radeon/radeon_ioc32.c linux-3.3.8-pax/drivers/gpu/drm/radeon/radeon_ioc32.c
--- linux-3.3.8/drivers/gpu/drm/radeon/radeon_ioc32.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/gpu/drm/radeon/radeon_ioc32.c	2012-03-19 10:43:43.708034666 +0100
@@ -359,7 +359,7 @@ static int compat_radeon_cp_setparam(str
 	request = compat_alloc_user_space(sizeof(*request));
 	if (!access_ok(VERIFY_WRITE, request, sizeof(*request))
 	    || __put_user(req32.param, &request->param)
-	    || __put_user((void __user *)(unsigned long)req32.value,
+	    || __put_user((unsigned long)req32.value,
 			  &request->value))
 		return -EFAULT;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/radeon/radeon_irq.c linux-3.3.8-pax/drivers/gpu/drm/radeon/radeon_irq.c
--- linux-3.3.8/drivers/gpu/drm/radeon/radeon_irq.c	2012-01-08 19:47:53.815472755 +0100
+++ linux-3.3.8-pax/drivers/gpu/drm/radeon/radeon_irq.c	2012-03-19 10:43:43.708034666 +0100
@@ -225,8 +225,8 @@ static int radeon_emit_irq(struct drm_de
 	unsigned int ret;
 	RING_LOCALS;
 
-	atomic_inc(&dev_priv->swi_emitted);
-	ret = atomic_read(&dev_priv->swi_emitted);
+	atomic_inc_unchecked(&dev_priv->swi_emitted);
+	ret = atomic_read_unchecked(&dev_priv->swi_emitted);
 
 	BEGIN_RING(4);
 	OUT_RING_REG(RADEON_LAST_SWI_REG, ret);
@@ -352,7 +352,7 @@ int radeon_driver_irq_postinstall(struct
 	drm_radeon_private_t *dev_priv =
 	    (drm_radeon_private_t *) dev->dev_private;
 
-	atomic_set(&dev_priv->swi_emitted, 0);
+	atomic_set_unchecked(&dev_priv->swi_emitted, 0);
 	DRM_INIT_WAITQUEUE(&dev_priv->swi_queue);
 
 	dev->max_vblank_count = 0x001fffff;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/radeon/radeon_state.c linux-3.3.8-pax/drivers/gpu/drm/radeon/radeon_state.c
--- linux-3.3.8/drivers/gpu/drm/radeon/radeon_state.c	2012-01-08 19:47:53.839472754 +0100
+++ linux-3.3.8-pax/drivers/gpu/drm/radeon/radeon_state.c	2012-03-19 10:43:43.712034665 +0100
@@ -2168,7 +2168,7 @@ static int radeon_cp_clear(struct drm_de
 	if (sarea_priv->nbox > RADEON_NR_SAREA_CLIPRECTS)
 		sarea_priv->nbox = RADEON_NR_SAREA_CLIPRECTS;
 
-	if (DRM_COPY_FROM_USER(&depth_boxes, clear->depth_boxes,
+	if (sarea_priv->nbox > RADEON_NR_SAREA_CLIPRECTS || DRM_COPY_FROM_USER(&depth_boxes, clear->depth_boxes,
 			       sarea_priv->nbox * sizeof(depth_boxes[0])))
 		return -EFAULT;
 
@@ -3031,7 +3031,7 @@ static int radeon_cp_getparam(struct drm
 {
 	drm_radeon_private_t *dev_priv = dev->dev_private;
 	drm_radeon_getparam_t *param = data;
-	int value;
+	int value = 0;
 
 	DRM_DEBUG("pid=%d\n", DRM_CURRENTPID);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/radeon/radeon_ttm.c linux-3.3.8-pax/drivers/gpu/drm/radeon/radeon_ttm.c
--- linux-3.3.8/drivers/gpu/drm/radeon/radeon_ttm.c	2012-03-19 10:38:59.060049865 +0100
+++ linux-3.3.8-pax/drivers/gpu/drm/radeon/radeon_ttm.c	2012-03-19 10:43:43.712034665 +0100
@@ -842,8 +842,10 @@ int radeon_mmap(struct file *filp, struc
 	}
 	if (unlikely(ttm_vm_ops == NULL)) {
 		ttm_vm_ops = vma->vm_ops;
-		radeon_ttm_vm_ops = *ttm_vm_ops;
-		radeon_ttm_vm_ops.fault = &radeon_ttm_fault;
+		pax_open_kernel();
+		memcpy((void *)&radeon_ttm_vm_ops, ttm_vm_ops, sizeof(radeon_ttm_vm_ops));
+		*(void **)&radeon_ttm_vm_ops.fault = &radeon_ttm_fault;
+		pax_close_kernel();
 	}
 	vma->vm_ops = &radeon_ttm_vm_ops;
 	return 0;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/radeon/rs690.c linux-3.3.8-pax/drivers/gpu/drm/radeon/rs690.c
--- linux-3.3.8/drivers/gpu/drm/radeon/rs690.c	2012-03-19 10:38:59.064049865 +0100
+++ linux-3.3.8-pax/drivers/gpu/drm/radeon/rs690.c	2012-03-19 10:43:43.712034665 +0100
@@ -304,9 +304,11 @@ void rs690_crtc_bandwidth_compute(struct
 		if (rdev->pm.max_bandwidth.full > rdev->pm.sideport_bandwidth.full &&
 			rdev->pm.sideport_bandwidth.full)
 			rdev->pm.max_bandwidth = rdev->pm.sideport_bandwidth;
-		read_delay_latency.full = dfixed_const(370 * 800 * 1000);
+		read_delay_latency.full = dfixed_const(800 * 1000);
 		read_delay_latency.full = dfixed_div(read_delay_latency,
 			rdev->pm.igp_sideport_mclk);
+		a.full = dfixed_const(370);
+		read_delay_latency.full = dfixed_mul(read_delay_latency, a);
 	} else {
 		if (rdev->pm.max_bandwidth.full > rdev->pm.k8_bandwidth.full &&
 			rdev->pm.k8_bandwidth.full)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/ttm/ttm_page_alloc.c linux-3.3.8-pax/drivers/gpu/drm/ttm/ttm_page_alloc.c
--- linux-3.3.8/drivers/gpu/drm/ttm/ttm_page_alloc.c	2012-03-19 10:38:59.116049862 +0100
+++ linux-3.3.8-pax/drivers/gpu/drm/ttm/ttm_page_alloc.c	2012-03-19 10:43:43.716034665 +0100
@@ -398,9 +398,9 @@ static int ttm_pool_get_num_unused_pages
 static int ttm_pool_mm_shrink(struct shrinker *shrink,
 			      struct shrink_control *sc)
 {
-	static atomic_t start_pool = ATOMIC_INIT(0);
+	static atomic_unchecked_t start_pool = ATOMIC_INIT(0);
 	unsigned i;
-	unsigned pool_offset = atomic_add_return(1, &start_pool);
+	unsigned pool_offset = atomic_add_return_unchecked(1, &start_pool);
 	struct ttm_page_pool *pool;
 	int shrink_pages = sc->nr_to_scan;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/via/via_drv.h linux-3.3.8-pax/drivers/gpu/drm/via/via_drv.h
--- linux-3.3.8/drivers/gpu/drm/via/via_drv.h	2012-03-19 10:38:59.120049862 +0100
+++ linux-3.3.8-pax/drivers/gpu/drm/via/via_drv.h	2012-03-19 10:43:43.716034665 +0100
@@ -51,7 +51,7 @@ typedef struct drm_via_ring_buffer {
 typedef uint32_t maskarray_t[5];
 
 typedef struct drm_via_irq {
-	atomic_t irq_received;
+	atomic_unchecked_t irq_received;
 	uint32_t pending_mask;
 	uint32_t enable_mask;
 	wait_queue_head_t irq_queue;
@@ -75,7 +75,7 @@ typedef struct drm_via_private {
 	struct timeval last_vblank;
 	int last_vblank_valid;
 	unsigned usec_per_vblank;
-	atomic_t vbl_received;
+	atomic_unchecked_t vbl_received;
 	drm_via_state_t hc_state;
 	char pci_buf[VIA_PCI_BUF_SIZE];
 	const uint32_t *fire_offsets[VIA_FIRE_BUF_SIZE];
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/via/via_irq.c linux-3.3.8-pax/drivers/gpu/drm/via/via_irq.c
--- linux-3.3.8/drivers/gpu/drm/via/via_irq.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/gpu/drm/via/via_irq.c	2012-03-19 10:43:43.716034665 +0100
@@ -102,7 +102,7 @@ u32 via_get_vblank_counter(struct drm_de
 	if (crtc != 0)
 		return 0;
 
-	return atomic_read(&dev_priv->vbl_received);
+	return atomic_read_unchecked(&dev_priv->vbl_received);
 }
 
 irqreturn_t via_driver_irq_handler(DRM_IRQ_ARGS)
@@ -117,8 +117,8 @@ irqreturn_t via_driver_irq_handler(DRM_I
 
 	status = VIA_READ(VIA_REG_INTERRUPT);
 	if (status & VIA_IRQ_VBLANK_PENDING) {
-		atomic_inc(&dev_priv->vbl_received);
-		if (!(atomic_read(&dev_priv->vbl_received) & 0x0F)) {
+		atomic_inc_unchecked(&dev_priv->vbl_received);
+		if (!(atomic_read_unchecked(&dev_priv->vbl_received) & 0x0F)) {
 			do_gettimeofday(&cur_vblank);
 			if (dev_priv->last_vblank_valid) {
 				dev_priv->usec_per_vblank =
@@ -128,7 +128,7 @@ irqreturn_t via_driver_irq_handler(DRM_I
 			dev_priv->last_vblank = cur_vblank;
 			dev_priv->last_vblank_valid = 1;
 		}
-		if (!(atomic_read(&dev_priv->vbl_received) & 0xFF)) {
+		if (!(atomic_read_unchecked(&dev_priv->vbl_received) & 0xFF)) {
 			DRM_DEBUG("US per vblank is: %u\n",
 				  dev_priv->usec_per_vblank);
 		}
@@ -138,7 +138,7 @@ irqreturn_t via_driver_irq_handler(DRM_I
 
 	for (i = 0; i < dev_priv->num_irqs; ++i) {
 		if (status & cur_irq->pending_mask) {
-			atomic_inc(&cur_irq->irq_received);
+			atomic_inc_unchecked(&cur_irq->irq_received);
 			DRM_WAKEUP(&cur_irq->irq_queue);
 			handled = 1;
 			if (dev_priv->irq_map[drm_via_irq_dma0_td] == i)
@@ -243,11 +243,11 @@ via_driver_irq_wait(struct drm_device *d
 		DRM_WAIT_ON(ret, cur_irq->irq_queue, 3 * DRM_HZ,
 			    ((VIA_READ(masks[irq][2]) & masks[irq][3]) ==
 			     masks[irq][4]));
-		cur_irq_sequence = atomic_read(&cur_irq->irq_received);
+		cur_irq_sequence = atomic_read_unchecked(&cur_irq->irq_received);
 	} else {
 		DRM_WAIT_ON(ret, cur_irq->irq_queue, 3 * DRM_HZ,
 			    (((cur_irq_sequence =
-			       atomic_read(&cur_irq->irq_received)) -
+			       atomic_read_unchecked(&cur_irq->irq_received)) -
 			      *sequence) <= (1 << 23)));
 	}
 	*sequence = cur_irq_sequence;
@@ -285,7 +285,7 @@ void via_driver_irq_preinstall(struct dr
 		}
 
 		for (i = 0; i < dev_priv->num_irqs; ++i) {
-			atomic_set(&cur_irq->irq_received, 0);
+			atomic_set_unchecked(&cur_irq->irq_received, 0);
 			cur_irq->enable_mask = dev_priv->irq_masks[i][0];
 			cur_irq->pending_mask = dev_priv->irq_masks[i][1];
 			DRM_INIT_WAITQUEUE(&cur_irq->irq_queue);
@@ -367,7 +367,7 @@ int via_wait_irq(struct drm_device *dev,
 	switch (irqwait->request.type & ~VIA_IRQ_FLAGS_MASK) {
 	case VIA_IRQ_RELATIVE:
 		irqwait->request.sequence +=
-			atomic_read(&cur_irq->irq_received);
+			atomic_read_unchecked(&cur_irq->irq_received);
 		irqwait->request.type &= ~_DRM_VBLANK_RELATIVE;
 	case VIA_IRQ_ABSOLUTE:
 		break;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/vmwgfx/vmwgfx_drv.h linux-3.3.8-pax/drivers/gpu/drm/vmwgfx/vmwgfx_drv.h
--- linux-3.3.8/drivers/gpu/drm/vmwgfx/vmwgfx_drv.h	2012-01-08 19:47:53.915472750 +0100
+++ linux-3.3.8-pax/drivers/gpu/drm/vmwgfx/vmwgfx_drv.h	2012-03-19 10:43:43.716034665 +0100
@@ -260,7 +260,7 @@ struct vmw_private {
 	 * Fencing and IRQs.
 	 */
 
-	atomic_t marker_seq;
+	atomic_unchecked_t marker_seq;
 	wait_queue_head_t fence_queue;
 	wait_queue_head_t fifo_queue;
 	int fence_queue_waiters; /* Protected by hw_mutex */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/vmwgfx/vmwgfx_fifo.c linux-3.3.8-pax/drivers/gpu/drm/vmwgfx/vmwgfx_fifo.c
--- linux-3.3.8/drivers/gpu/drm/vmwgfx/vmwgfx_fifo.c	2012-01-08 19:47:53.931472749 +0100
+++ linux-3.3.8-pax/drivers/gpu/drm/vmwgfx/vmwgfx_fifo.c	2012-03-19 10:43:43.716034665 +0100
@@ -137,7 +137,7 @@ int vmw_fifo_init(struct vmw_private *de
 		 (unsigned int) min,
 		 (unsigned int) fifo->capabilities);
 
-	atomic_set(&dev_priv->marker_seq, dev_priv->last_read_seqno);
+	atomic_set_unchecked(&dev_priv->marker_seq, dev_priv->last_read_seqno);
 	iowrite32(dev_priv->last_read_seqno, fifo_mem + SVGA_FIFO_FENCE);
 	vmw_marker_queue_init(&fifo->marker_queue);
 	return vmw_fifo_send_fence(dev_priv, &dummy);
@@ -355,7 +355,7 @@ void *vmw_fifo_reserve(struct vmw_privat
 				if (reserveable)
 					iowrite32(bytes, fifo_mem +
 						  SVGA_FIFO_RESERVED);
-				return fifo_mem + (next_cmd >> 2);
+				return (__le32 __force_kernel *)fifo_mem + (next_cmd >> 2);
 			} else {
 				need_bounce = true;
 			}
@@ -475,7 +475,7 @@ int vmw_fifo_send_fence(struct vmw_priva
 
 	fm = vmw_fifo_reserve(dev_priv, bytes);
 	if (unlikely(fm == NULL)) {
-		*seqno = atomic_read(&dev_priv->marker_seq);
+		*seqno = atomic_read_unchecked(&dev_priv->marker_seq);
 		ret = -ENOMEM;
 		(void)vmw_fallback_wait(dev_priv, false, true, *seqno,
 					false, 3*HZ);
@@ -483,7 +483,7 @@ int vmw_fifo_send_fence(struct vmw_priva
 	}
 
 	do {
-		*seqno = atomic_add_return(1, &dev_priv->marker_seq);
+		*seqno = atomic_add_return_unchecked(1, &dev_priv->marker_seq);
 	} while (*seqno == 0);
 
 	if (!(fifo_state->capabilities & SVGA_FIFO_CAP_FENCE)) {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/vmwgfx/vmwgfx_irq.c linux-3.3.8-pax/drivers/gpu/drm/vmwgfx/vmwgfx_irq.c
--- linux-3.3.8/drivers/gpu/drm/vmwgfx/vmwgfx_irq.c	2012-01-08 19:47:53.943472749 +0100
+++ linux-3.3.8-pax/drivers/gpu/drm/vmwgfx/vmwgfx_irq.c	2012-03-19 10:43:43.720034666 +0100
@@ -107,7 +107,7 @@ bool vmw_seqno_passed(struct vmw_private
 	 * emitted. Then the fence is stale and signaled.
 	 */
 
-	ret = ((atomic_read(&dev_priv->marker_seq) - seqno)
+	ret = ((atomic_read_unchecked(&dev_priv->marker_seq) - seqno)
 	       > VMW_FENCE_WRAP);
 
 	return ret;
@@ -138,7 +138,7 @@ int vmw_fallback_wait(struct vmw_private
 
 	if (fifo_idle)
 		down_read(&fifo_state->rwsem);
-	signal_seq = atomic_read(&dev_priv->marker_seq);
+	signal_seq = atomic_read_unchecked(&dev_priv->marker_seq);
 	ret = 0;
 
 	for (;;) {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/gpu/drm/vmwgfx/vmwgfx_marker.c linux-3.3.8-pax/drivers/gpu/drm/vmwgfx/vmwgfx_marker.c
--- linux-3.3.8/drivers/gpu/drm/vmwgfx/vmwgfx_marker.c	2012-01-08 19:47:53.951472748 +0100
+++ linux-3.3.8-pax/drivers/gpu/drm/vmwgfx/vmwgfx_marker.c	2012-03-19 10:43:43.720034666 +0100
@@ -151,7 +151,7 @@ int vmw_wait_lag(struct vmw_private *dev
 	while (!vmw_lag_lt(queue, us)) {
 		spin_lock(&queue->lock);
 		if (list_empty(&queue->head))
-			seqno = atomic_read(&dev_priv->marker_seq);
+			seqno = atomic_read_unchecked(&dev_priv->marker_seq);
 		else {
 			marker = list_first_entry(&queue->head,
 						 struct vmw_marker, head);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/hid/hid-core.c linux-3.3.8-pax/drivers/hid/hid-core.c
--- linux-3.3.8/drivers/hid/hid-core.c	2012-04-03 22:02:49.394109970 +0200
+++ linux-3.3.8-pax/drivers/hid/hid-core.c	2012-04-03 22:03:06.766109114 +0200
@@ -2021,7 +2021,7 @@ static bool hid_ignore(struct hid_device
 
 int hid_add_device(struct hid_device *hdev)
 {
-	static atomic_t id = ATOMIC_INIT(0);
+	static atomic_unchecked_t id = ATOMIC_INIT(0);
 	int ret;
 
 	if (WARN_ON(hdev->status & HID_STAT_ADDED))
@@ -2036,7 +2036,7 @@ int hid_add_device(struct hid_device *hd
 	/* XXX hack, any other cleaner solution after the driver core
 	 * is converted to allow more than 20 bytes as the device name? */
 	dev_set_name(&hdev->dev, "%04X:%04X:%04X.%04X", hdev->bus,
-		     hdev->vendor, hdev->product, atomic_inc_return(&id));
+		     hdev->vendor, hdev->product, atomic_inc_return_unchecked(&id));
 
 	hid_debug_register(hdev, dev_name(&hdev->dev));
 	ret = device_add(&hdev->dev);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/hid/usbhid/hiddev.c linux-3.3.8-pax/drivers/hid/usbhid/hiddev.c
--- linux-3.3.8/drivers/hid/usbhid/hiddev.c	2012-03-19 10:38:59.172049859 +0100
+++ linux-3.3.8-pax/drivers/hid/usbhid/hiddev.c	2012-03-19 10:43:43.724034667 +0100
@@ -624,7 +624,7 @@ static long hiddev_ioctl(struct file *fi
 		break;
 
 	case HIDIOCAPPLICATION:
-		if (arg < 0 || arg >= hid->maxapplication)
+		if (arg >= hid->maxapplication)
 			break;
 
 		for (i = 0; i < hid->maxcollection; i++)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/hv/channel.c linux-3.3.8-pax/drivers/hv/channel.c
--- linux-3.3.8/drivers/hv/channel.c	2012-01-08 19:47:57.223472573 +0100
+++ linux-3.3.8-pax/drivers/hv/channel.c	2012-03-19 10:43:43.724034667 +0100
@@ -400,8 +400,8 @@ int vmbus_establish_gpadl(struct vmbus_c
 	int ret = 0;
 	int t;
 
-	next_gpadl_handle = atomic_read(&vmbus_connection.next_gpadl_handle);
-	atomic_inc(&vmbus_connection.next_gpadl_handle);
+	next_gpadl_handle = atomic_read_unchecked(&vmbus_connection.next_gpadl_handle);
+	atomic_inc_unchecked(&vmbus_connection.next_gpadl_handle);
 
 	ret = create_gpadl_header(kbuffer, size, &msginfo, &msgcount);
 	if (ret)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/hv/hv.c linux-3.3.8-pax/drivers/hv/hv.c
--- linux-3.3.8/drivers/hv/hv.c	2012-03-19 10:38:59.180049858 +0100
+++ linux-3.3.8-pax/drivers/hv/hv.c	2012-03-19 10:43:43.724034667 +0100
@@ -132,7 +132,7 @@ static u64 do_hypercall(u64 control, voi
 	u64 output_address = (output) ? virt_to_phys(output) : 0;
 	u32 output_address_hi = output_address >> 32;
 	u32 output_address_lo = output_address & 0xFFFFFFFF;
-	void *hypercall_page = hv_context.hypercall_page;
+	void *hypercall_page = ktva_ktla(hv_context.hypercall_page);
 
 	__asm__ __volatile__ ("call *%8" : "=d"(hv_status_hi),
 			      "=a"(hv_status_lo) : "d" (control_hi),
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/hv/hyperv_vmbus.h linux-3.3.8-pax/drivers/hv/hyperv_vmbus.h
--- linux-3.3.8/drivers/hv/hyperv_vmbus.h	2012-03-19 10:38:59.184049858 +0100
+++ linux-3.3.8-pax/drivers/hv/hyperv_vmbus.h	2012-03-19 10:43:43.724034667 +0100
@@ -556,7 +556,7 @@ enum vmbus_connect_state {
 struct vmbus_connection {
 	enum vmbus_connect_state conn_state;
 
-	atomic_t next_gpadl_handle;
+	atomic_unchecked_t next_gpadl_handle;
 
 	/*
 	 * Represents channel interrupts. Each bit position represents a
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/hv/vmbus_drv.c linux-3.3.8-pax/drivers/hv/vmbus_drv.c
--- linux-3.3.8/drivers/hv/vmbus_drv.c	2012-03-19 10:38:59.184049858 +0100
+++ linux-3.3.8-pax/drivers/hv/vmbus_drv.c	2012-03-19 10:43:43.728034667 +0100
@@ -663,10 +663,10 @@ int vmbus_device_register(struct hv_devi
 {
 	int ret = 0;
 
-	static atomic_t device_num = ATOMIC_INIT(0);
+	static atomic_unchecked_t device_num = ATOMIC_INIT(0);
 
 	dev_set_name(&child_device_obj->device, "vmbus_0_%d",
-		     atomic_inc_return(&device_num));
+		     atomic_inc_return_unchecked(&device_num));
 
 	child_device_obj->device.bus = &hv_bus;
 	child_device_obj->device.parent = &hv_acpi_dev->dev;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/hwmon/acpi_power_meter.c linux-3.3.8-pax/drivers/hwmon/acpi_power_meter.c
--- linux-3.3.8/drivers/hwmon/acpi_power_meter.c	2012-03-19 10:38:59.188049858 +0100
+++ linux-3.3.8-pax/drivers/hwmon/acpi_power_meter.c	2012-03-19 10:43:43.732034667 +0100
@@ -316,8 +316,6 @@ static ssize_t set_trip(struct device *d
 		return res;
 
 	temp /= 1000;
-	if (temp < 0)
-		return -EINVAL;
 
 	mutex_lock(&resource->lock);
 	resource->trip[attr->index - 7] = temp;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/hwmon/sht15.c linux-3.3.8-pax/drivers/hwmon/sht15.c
--- linux-3.3.8/drivers/hwmon/sht15.c	2012-03-19 10:38:59.284049853 +0100
+++ linux-3.3.8-pax/drivers/hwmon/sht15.c	2012-03-19 10:43:43.736034665 +0100
@@ -166,7 +166,7 @@ struct sht15_data {
 	int				supply_uV;
 	bool				supply_uV_valid;
 	struct work_struct		update_supply_work;
-	atomic_t			interrupt_handled;
+	atomic_unchecked_t		interrupt_handled;
 };
 
 /**
@@ -509,13 +509,13 @@ static int sht15_measurement(struct sht1
 		return ret;
 
 	gpio_direction_input(data->pdata->gpio_data);
-	atomic_set(&data->interrupt_handled, 0);
+	atomic_set_unchecked(&data->interrupt_handled, 0);
 
 	enable_irq(gpio_to_irq(data->pdata->gpio_data));
 	if (gpio_get_value(data->pdata->gpio_data) == 0) {
 		disable_irq_nosync(gpio_to_irq(data->pdata->gpio_data));
 		/* Only relevant if the interrupt hasn't occurred. */
-		if (!atomic_read(&data->interrupt_handled))
+		if (!atomic_read_unchecked(&data->interrupt_handled))
 			schedule_work(&data->read_work);
 	}
 	ret = wait_event_timeout(data->wait_queue,
@@ -782,7 +782,7 @@ static irqreturn_t sht15_interrupt_fired
 
 	/* First disable the interrupt */
 	disable_irq_nosync(irq);
-	atomic_inc(&data->interrupt_handled);
+	atomic_inc_unchecked(&data->interrupt_handled);
 	/* Then schedule a reading work struct */
 	if (data->state != SHT15_READING_NOTHING)
 		schedule_work(&data->read_work);
@@ -804,11 +804,11 @@ static void sht15_bh_read_data(struct wo
 		 * If not, then start the interrupt again - care here as could
 		 * have gone low in meantime so verify it hasn't!
 		 */
-		atomic_set(&data->interrupt_handled, 0);
+		atomic_set_unchecked(&data->interrupt_handled, 0);
 		enable_irq(gpio_to_irq(data->pdata->gpio_data));
 		/* If still not occurred or another handler has been scheduled */
 		if (gpio_get_value(data->pdata->gpio_data)
-		    || atomic_read(&data->interrupt_handled))
+		    || atomic_read_unchecked(&data->interrupt_handled))
 			return;
 	}
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/i2c/busses/i2c-amd756-s4882.c linux-3.3.8-pax/drivers/i2c/busses/i2c-amd756-s4882.c
--- linux-3.3.8/drivers/i2c/busses/i2c-amd756-s4882.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/i2c/busses/i2c-amd756-s4882.c	2012-03-19 10:43:43.740034663 +0100
@@ -43,7 +43,7 @@
 extern struct i2c_adapter amd756_smbus;
 
 static struct i2c_adapter *s4882_adapter;
-static struct i2c_algorithm *s4882_algo;
+static i2c_algorithm_no_const *s4882_algo;
 
 /* Wrapper access functions for multiplexed SMBus */
 static DEFINE_MUTEX(amd756_lock);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/i2c/busses/i2c-nforce2-s4985.c linux-3.3.8-pax/drivers/i2c/busses/i2c-nforce2-s4985.c
--- linux-3.3.8/drivers/i2c/busses/i2c-nforce2-s4985.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/i2c/busses/i2c-nforce2-s4985.c	2012-03-19 10:43:43.744034663 +0100
@@ -41,7 +41,7 @@
 extern struct i2c_adapter *nforce2_smbus;
 
 static struct i2c_adapter *s4985_adapter;
-static struct i2c_algorithm *s4985_algo;
+static i2c_algorithm_no_const *s4985_algo;
 
 /* Wrapper access functions for multiplexed SMBus */
 static DEFINE_MUTEX(nforce2_lock);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/i2c/i2c-mux.c linux-3.3.8-pax/drivers/i2c/i2c-mux.c
--- linux-3.3.8/drivers/i2c/i2c-mux.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/i2c/i2c-mux.c	2012-03-19 10:43:43.748034664 +0100
@@ -28,7 +28,7 @@
 /* multiplexer per channel data */
 struct i2c_mux_priv {
 	struct i2c_adapter adap;
-	struct i2c_algorithm algo;
+	i2c_algorithm_no_const algo;
 
 	struct i2c_adapter *parent;
 	void *mux_dev;	/* the mux chip/device */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/aec62xx.c linux-3.3.8-pax/drivers/ide/aec62xx.c
--- linux-3.3.8/drivers/ide/aec62xx.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/ide/aec62xx.c	2012-03-19 10:43:43.756034664 +0100
@@ -181,7 +181,7 @@ static const struct ide_port_ops atp86x_
 	.cable_detect		= atp86x_cable_detect,
 };
 
-static const struct ide_port_info aec62xx_chipsets[] __devinitdata = {
+static const struct ide_port_info aec62xx_chipsets[] __devinitconst = {
 	{	/* 0: AEC6210 */
 		.name		= DRV_NAME,
 		.init_chipset	= init_chipset_aec62xx,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/alim15x3.c linux-3.3.8-pax/drivers/ide/alim15x3.c
--- linux-3.3.8/drivers/ide/alim15x3.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/ide/alim15x3.c	2012-03-19 10:43:43.756034665 +0100
@@ -512,7 +512,7 @@ static const struct ide_dma_ops ali_dma_
 	.dma_sff_read_status	= ide_dma_sff_read_status,
 };
 
-static const struct ide_port_info ali15x3_chipset __devinitdata = {
+static const struct ide_port_info ali15x3_chipset __devinitconst = {
 	.name		= DRV_NAME,
 	.init_chipset	= init_chipset_ali15x3,
 	.init_hwif	= init_hwif_ali15x3,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/amd74xx.c linux-3.3.8-pax/drivers/ide/amd74xx.c
--- linux-3.3.8/drivers/ide/amd74xx.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/ide/amd74xx.c	2012-03-19 10:43:43.756034665 +0100
@@ -223,7 +223,7 @@ static const struct ide_port_ops amd_por
 		.udma_mask	= udma,					\
 	}
 
-static const struct ide_port_info amd74xx_chipsets[] __devinitdata = {
+static const struct ide_port_info amd74xx_chipsets[] __devinitconst = {
 	/* 0: AMD7401 */	DECLARE_AMD_DEV(0x00, ATA_UDMA2),
 	/* 1: AMD7409 */	DECLARE_AMD_DEV(ATA_SWDMA2, ATA_UDMA4),
 	/* 2: AMD7411/7441 */	DECLARE_AMD_DEV(ATA_SWDMA2, ATA_UDMA5),
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/atiixp.c linux-3.3.8-pax/drivers/ide/atiixp.c
--- linux-3.3.8/drivers/ide/atiixp.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/ide/atiixp.c	2012-03-19 10:43:43.756034665 +0100
@@ -139,7 +139,7 @@ static const struct ide_port_ops atiixp_
 	.cable_detect		= atiixp_cable_detect,
 };
 
-static const struct ide_port_info atiixp_pci_info[] __devinitdata = {
+static const struct ide_port_info atiixp_pci_info[] __devinitconst = {
 	{	/* 0: IXP200/300/400/700 */
 		.name		= DRV_NAME,
 		.enablebits	= {{0x48,0x01,0x00}, {0x48,0x08,0x00}},
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/cmd64x.c linux-3.3.8-pax/drivers/ide/cmd64x.c
--- linux-3.3.8/drivers/ide/cmd64x.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/ide/cmd64x.c	2012-03-19 10:43:43.756034665 +0100
@@ -327,7 +327,7 @@ static const struct ide_dma_ops cmd646_r
 	.dma_sff_read_status	= ide_dma_sff_read_status,
 };
 
-static const struct ide_port_info cmd64x_chipsets[] __devinitdata = {
+static const struct ide_port_info cmd64x_chipsets[] __devinitconst = {
 	{	/* 0: CMD643 */
 		.name		= DRV_NAME,
 		.init_chipset	= init_chipset_cmd64x,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/cs5520.c linux-3.3.8-pax/drivers/ide/cs5520.c
--- linux-3.3.8/drivers/ide/cs5520.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/ide/cs5520.c	2012-03-19 10:43:43.756034665 +0100
@@ -94,7 +94,7 @@ static const struct ide_port_ops cs5520_
 	.set_dma_mode		= cs5520_set_dma_mode,
 };
 
-static const struct ide_port_info cyrix_chipset __devinitdata = {
+static const struct ide_port_info cyrix_chipset __devinitconst = {
 	.name		= DRV_NAME,
 	.enablebits	= { { 0x60, 0x01, 0x01 }, { 0x60, 0x02, 0x02 } },
 	.port_ops	= &cs5520_port_ops,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/cs5530.c linux-3.3.8-pax/drivers/ide/cs5530.c
--- linux-3.3.8/drivers/ide/cs5530.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/ide/cs5530.c	2012-03-19 10:43:43.760034664 +0100
@@ -245,7 +245,7 @@ static const struct ide_port_ops cs5530_
 	.udma_filter		= cs5530_udma_filter,
 };
 
-static const struct ide_port_info cs5530_chipset __devinitdata = {
+static const struct ide_port_info cs5530_chipset __devinitconst = {
 	.name		= DRV_NAME,
 	.init_chipset	= init_chipset_cs5530,
 	.init_hwif	= init_hwif_cs5530,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/cs5535.c linux-3.3.8-pax/drivers/ide/cs5535.c
--- linux-3.3.8/drivers/ide/cs5535.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/ide/cs5535.c	2012-03-19 10:43:43.760034664 +0100
@@ -170,7 +170,7 @@ static const struct ide_port_ops cs5535_
 	.cable_detect		= cs5535_cable_detect,
 };
 
-static const struct ide_port_info cs5535_chipset __devinitdata = {
+static const struct ide_port_info cs5535_chipset __devinitconst = {
 	.name		= DRV_NAME,
 	.port_ops	= &cs5535_port_ops,
 	.host_flags	= IDE_HFLAG_SINGLE | IDE_HFLAG_POST_SET_MODE,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/cy82c693.c linux-3.3.8-pax/drivers/ide/cy82c693.c
--- linux-3.3.8/drivers/ide/cy82c693.c	2012-01-08 19:47:58.783472490 +0100
+++ linux-3.3.8-pax/drivers/ide/cy82c693.c	2012-03-19 10:43:43.760034664 +0100
@@ -163,7 +163,7 @@ static const struct ide_port_ops cy82c69
 	.set_dma_mode		= cy82c693_set_dma_mode,
 };
 
-static const struct ide_port_info cy82c693_chipset __devinitdata = {
+static const struct ide_port_info cy82c693_chipset __devinitconst = {
 	.name		= DRV_NAME,
 	.init_iops	= init_iops_cy82c693,
 	.port_ops	= &cy82c693_port_ops,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/hpt366.c linux-3.3.8-pax/drivers/ide/hpt366.c
--- linux-3.3.8/drivers/ide/hpt366.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/ide/hpt366.c	2012-03-19 10:43:43.760034664 +0100
@@ -443,7 +443,7 @@ static struct hpt_timings hpt37x_timings
 	}
 };
 
-static const struct hpt_info hpt36x __devinitdata = {
+static const struct hpt_info hpt36x __devinitconst = {
 	.chip_name	= "HPT36x",
 	.chip_type	= HPT36x,
 	.udma_mask	= HPT366_ALLOW_ATA66_3 ? (HPT366_ALLOW_ATA66_4 ? ATA_UDMA4 : ATA_UDMA3) : ATA_UDMA2,
@@ -451,7 +451,7 @@ static const struct hpt_info hpt36x __de
 	.timings	= &hpt36x_timings
 };
 
-static const struct hpt_info hpt370 __devinitdata = {
+static const struct hpt_info hpt370 __devinitconst = {
 	.chip_name	= "HPT370",
 	.chip_type	= HPT370,
 	.udma_mask	= HPT370_ALLOW_ATA100_5 ? ATA_UDMA5 : ATA_UDMA4,
@@ -459,7 +459,7 @@ static const struct hpt_info hpt370 __de
 	.timings	= &hpt37x_timings
 };
 
-static const struct hpt_info hpt370a __devinitdata = {
+static const struct hpt_info hpt370a __devinitconst = {
 	.chip_name	= "HPT370A",
 	.chip_type	= HPT370A,
 	.udma_mask	= HPT370_ALLOW_ATA100_5 ? ATA_UDMA5 : ATA_UDMA4,
@@ -467,7 +467,7 @@ static const struct hpt_info hpt370a __d
 	.timings	= &hpt37x_timings
 };
 
-static const struct hpt_info hpt374 __devinitdata = {
+static const struct hpt_info hpt374 __devinitconst = {
 	.chip_name	= "HPT374",
 	.chip_type	= HPT374,
 	.udma_mask	= ATA_UDMA5,
@@ -475,7 +475,7 @@ static const struct hpt_info hpt374 __de
 	.timings	= &hpt37x_timings
 };
 
-static const struct hpt_info hpt372 __devinitdata = {
+static const struct hpt_info hpt372 __devinitconst = {
 	.chip_name	= "HPT372",
 	.chip_type	= HPT372,
 	.udma_mask	= HPT372_ALLOW_ATA133_6 ? ATA_UDMA6 : ATA_UDMA5,
@@ -483,7 +483,7 @@ static const struct hpt_info hpt372 __de
 	.timings	= &hpt37x_timings
 };
 
-static const struct hpt_info hpt372a __devinitdata = {
+static const struct hpt_info hpt372a __devinitconst = {
 	.chip_name	= "HPT372A",
 	.chip_type	= HPT372A,
 	.udma_mask	= HPT372_ALLOW_ATA133_6 ? ATA_UDMA6 : ATA_UDMA5,
@@ -491,7 +491,7 @@ static const struct hpt_info hpt372a __d
 	.timings	= &hpt37x_timings
 };
 
-static const struct hpt_info hpt302 __devinitdata = {
+static const struct hpt_info hpt302 __devinitconst = {
 	.chip_name	= "HPT302",
 	.chip_type	= HPT302,
 	.udma_mask	= HPT302_ALLOW_ATA133_6 ? ATA_UDMA6 : ATA_UDMA5,
@@ -499,7 +499,7 @@ static const struct hpt_info hpt302 __de
 	.timings	= &hpt37x_timings
 };
 
-static const struct hpt_info hpt371 __devinitdata = {
+static const struct hpt_info hpt371 __devinitconst = {
 	.chip_name	= "HPT371",
 	.chip_type	= HPT371,
 	.udma_mask	= HPT371_ALLOW_ATA133_6 ? ATA_UDMA6 : ATA_UDMA5,
@@ -507,7 +507,7 @@ static const struct hpt_info hpt371 __de
 	.timings	= &hpt37x_timings
 };
 
-static const struct hpt_info hpt372n __devinitdata = {
+static const struct hpt_info hpt372n __devinitconst = {
 	.chip_name	= "HPT372N",
 	.chip_type	= HPT372N,
 	.udma_mask	= HPT372_ALLOW_ATA133_6 ? ATA_UDMA6 : ATA_UDMA5,
@@ -515,7 +515,7 @@ static const struct hpt_info hpt372n __d
 	.timings	= &hpt37x_timings
 };
 
-static const struct hpt_info hpt302n __devinitdata = {
+static const struct hpt_info hpt302n __devinitconst = {
 	.chip_name	= "HPT302N",
 	.chip_type	= HPT302N,
 	.udma_mask	= HPT302_ALLOW_ATA133_6 ? ATA_UDMA6 : ATA_UDMA5,
@@ -523,7 +523,7 @@ static const struct hpt_info hpt302n __d
 	.timings	= &hpt37x_timings
 };
 
-static const struct hpt_info hpt371n __devinitdata = {
+static const struct hpt_info hpt371n __devinitconst = {
 	.chip_name	= "HPT371N",
 	.chip_type	= HPT371N,
 	.udma_mask	= HPT371_ALLOW_ATA133_6 ? ATA_UDMA6 : ATA_UDMA5,
@@ -1361,7 +1361,7 @@ static const struct ide_dma_ops hpt36x_d
 	.dma_sff_read_status	= ide_dma_sff_read_status,
 };
 
-static const struct ide_port_info hpt366_chipsets[] __devinitdata = {
+static const struct ide_port_info hpt366_chipsets[] __devinitconst = {
 	{	/* 0: HPT36x */
 		.name		= DRV_NAME,
 		.init_chipset	= init_chipset_hpt366,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/ide-cd.c linux-3.3.8-pax/drivers/ide/ide-cd.c
--- linux-3.3.8/drivers/ide/ide-cd.c	2012-01-08 19:47:58.803472489 +0100
+++ linux-3.3.8-pax/drivers/ide/ide-cd.c	2012-03-19 10:43:43.764034663 +0100
@@ -768,7 +768,7 @@ static void cdrom_do_block_pc(ide_drive_
 		alignment = queue_dma_alignment(q) | q->dma_pad_mask;
 		if ((unsigned long)buf & alignment
 		    || blk_rq_bytes(rq) & q->dma_pad_mask
-		    || object_is_on_stack(buf))
+		    || object_starts_on_stack(buf))
 			drive->dma = 0;
 	}
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/ide-pci-generic.c linux-3.3.8-pax/drivers/ide/ide-pci-generic.c
--- linux-3.3.8/drivers/ide/ide-pci-generic.c	2012-03-19 10:38:59.420049846 +0100
+++ linux-3.3.8-pax/drivers/ide/ide-pci-generic.c	2012-03-19 10:43:43.764034663 +0100
@@ -53,7 +53,7 @@ static const struct ide_port_ops netcell
 		.udma_mask	= ATA_UDMA6, \
 	}
 
-static const struct ide_port_info generic_chipsets[] __devinitdata = {
+static const struct ide_port_info generic_chipsets[] __devinitconst = {
 	/*  0: Unknown */
 	DECLARE_GENERIC_PCI_DEV(0),
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/it8172.c linux-3.3.8-pax/drivers/ide/it8172.c
--- linux-3.3.8/drivers/ide/it8172.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/ide/it8172.c	2012-03-19 10:43:43.764034663 +0100
@@ -115,7 +115,7 @@ static const struct ide_port_ops it8172_
 	.set_dma_mode	= it8172_set_dma_mode,
 };
 
-static const struct ide_port_info it8172_port_info __devinitdata = {
+static const struct ide_port_info it8172_port_info __devinitconst = {
 	.name		= DRV_NAME,
 	.port_ops	= &it8172_port_ops,
 	.enablebits	= { {0x41, 0x80, 0x80}, {0x00, 0x00, 0x00} },
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/it8213.c linux-3.3.8-pax/drivers/ide/it8213.c
--- linux-3.3.8/drivers/ide/it8213.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/ide/it8213.c	2012-03-19 10:43:43.764034663 +0100
@@ -156,7 +156,7 @@ static const struct ide_port_ops it8213_
 	.cable_detect		= it8213_cable_detect,
 };
 
-static const struct ide_port_info it8213_chipset __devinitdata = {
+static const struct ide_port_info it8213_chipset __devinitconst = {
 	.name		= DRV_NAME,
 	.enablebits	= { {0x41, 0x80, 0x80} },
 	.port_ops	= &it8213_port_ops,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/it821x.c linux-3.3.8-pax/drivers/ide/it821x.c
--- linux-3.3.8/drivers/ide/it821x.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/ide/it821x.c	2012-03-19 10:43:43.768034662 +0100
@@ -630,7 +630,7 @@ static const struct ide_port_ops it821x_
 	.cable_detect		= it821x_cable_detect,
 };
 
-static const struct ide_port_info it821x_chipset __devinitdata = {
+static const struct ide_port_info it821x_chipset __devinitconst = {
 	.name		= DRV_NAME,
 	.init_chipset	= init_chipset_it821x,
 	.init_hwif	= init_hwif_it821x,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/jmicron.c linux-3.3.8-pax/drivers/ide/jmicron.c
--- linux-3.3.8/drivers/ide/jmicron.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/ide/jmicron.c	2012-03-19 10:43:43.768034662 +0100
@@ -102,7 +102,7 @@ static const struct ide_port_ops jmicron
 	.cable_detect		= jmicron_cable_detect,
 };
 
-static const struct ide_port_info jmicron_chipset __devinitdata = {
+static const struct ide_port_info jmicron_chipset __devinitconst = {
 	.name		= DRV_NAME,
 	.enablebits	= { { 0x40, 0x01, 0x01 }, { 0x40, 0x10, 0x10 } },
 	.port_ops	= &jmicron_port_ops,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/ns87415.c linux-3.3.8-pax/drivers/ide/ns87415.c
--- linux-3.3.8/drivers/ide/ns87415.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/ide/ns87415.c	2012-03-19 10:43:43.768034662 +0100
@@ -293,7 +293,7 @@ static const struct ide_dma_ops ns87415_
 	.dma_sff_read_status	= superio_dma_sff_read_status,
 };
 
-static const struct ide_port_info ns87415_chipset __devinitdata = {
+static const struct ide_port_info ns87415_chipset __devinitconst = {
 	.name		= DRV_NAME,
 	.init_hwif	= init_hwif_ns87415,
 	.tp_ops 	= &ns87415_tp_ops,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/opti621.c linux-3.3.8-pax/drivers/ide/opti621.c
--- linux-3.3.8/drivers/ide/opti621.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/ide/opti621.c	2012-03-19 10:43:43.768034662 +0100
@@ -131,7 +131,7 @@ static const struct ide_port_ops opti621
 	.set_pio_mode		= opti621_set_pio_mode,
 };
 
-static const struct ide_port_info opti621_chipset __devinitdata = {
+static const struct ide_port_info opti621_chipset __devinitconst = {
 	.name		= DRV_NAME,
 	.enablebits	= { {0x45, 0x80, 0x00}, {0x40, 0x08, 0x00} },
 	.port_ops	= &opti621_port_ops,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/pdc202xx_new.c linux-3.3.8-pax/drivers/ide/pdc202xx_new.c
--- linux-3.3.8/drivers/ide/pdc202xx_new.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/ide/pdc202xx_new.c	2012-03-19 10:43:43.772034662 +0100
@@ -465,7 +465,7 @@ static const struct ide_port_ops pdcnew_
 		.udma_mask	= udma, \
 	}
 
-static const struct ide_port_info pdcnew_chipsets[] __devinitdata = {
+static const struct ide_port_info pdcnew_chipsets[] __devinitconst = {
 	/* 0: PDC202{68,70} */		DECLARE_PDCNEW_DEV(ATA_UDMA5),
 	/* 1: PDC202{69,71,75,76,77} */	DECLARE_PDCNEW_DEV(ATA_UDMA6),
 };
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/pdc202xx_old.c linux-3.3.8-pax/drivers/ide/pdc202xx_old.c
--- linux-3.3.8/drivers/ide/pdc202xx_old.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/ide/pdc202xx_old.c	2012-03-19 10:43:43.772034662 +0100
@@ -270,7 +270,7 @@ static const struct ide_dma_ops pdc2026x
 		.max_sectors	= sectors, \
 	}
 
-static const struct ide_port_info pdc202xx_chipsets[] __devinitdata = {
+static const struct ide_port_info pdc202xx_chipsets[] __devinitconst = {
 	{	/* 0: PDC20246 */
 		.name		= DRV_NAME,
 		.init_chipset	= init_chipset_pdc202xx,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/piix.c linux-3.3.8-pax/drivers/ide/piix.c
--- linux-3.3.8/drivers/ide/piix.c	2012-01-08 19:47:58.851472487 +0100
+++ linux-3.3.8-pax/drivers/ide/piix.c	2012-03-19 10:43:43.772034662 +0100
@@ -344,7 +344,7 @@ static const struct ide_port_ops ich_por
 		.udma_mask	= udma, \
 	}
 
-static const struct ide_port_info piix_pci_info[] __devinitdata = {
+static const struct ide_port_info piix_pci_info[] __devinitconst = {
 	/* 0: MPIIX */
 	{	/*
 		 * MPIIX actually has only a single IDE channel mapped to
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/rz1000.c linux-3.3.8-pax/drivers/ide/rz1000.c
--- linux-3.3.8/drivers/ide/rz1000.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/ide/rz1000.c	2012-03-19 10:43:43.772034662 +0100
@@ -38,7 +38,7 @@ static int __devinit rz1000_disable_read
 	}
 }
 
-static const struct ide_port_info rz1000_chipset __devinitdata = {
+static const struct ide_port_info rz1000_chipset __devinitconst = {
 	.name		= DRV_NAME,
 	.host_flags	= IDE_HFLAG_NO_DMA,
 };
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/sc1200.c linux-3.3.8-pax/drivers/ide/sc1200.c
--- linux-3.3.8/drivers/ide/sc1200.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/ide/sc1200.c	2012-03-19 10:43:43.772034662 +0100
@@ -291,7 +291,7 @@ static const struct ide_dma_ops sc1200_d
 	.dma_sff_read_status	= ide_dma_sff_read_status,
 };
 
-static const struct ide_port_info sc1200_chipset __devinitdata = {
+static const struct ide_port_info sc1200_chipset __devinitconst = {
 	.name		= DRV_NAME,
 	.port_ops	= &sc1200_port_ops,
 	.dma_ops	= &sc1200_dma_ops,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/scc_pata.c linux-3.3.8-pax/drivers/ide/scc_pata.c
--- linux-3.3.8/drivers/ide/scc_pata.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/ide/scc_pata.c	2012-03-19 10:43:43.776034663 +0100
@@ -811,7 +811,7 @@ static const struct ide_dma_ops scc_dma_
 	.dma_sff_read_status	= scc_dma_sff_read_status,
 };
 
-static const struct ide_port_info scc_chipset __devinitdata = {
+static const struct ide_port_info scc_chipset __devinitconst = {
 	.name		= "sccIDE",
 	.init_iops	= init_iops_scc,
 	.init_dma	= scc_init_dma,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/serverworks.c linux-3.3.8-pax/drivers/ide/serverworks.c
--- linux-3.3.8/drivers/ide/serverworks.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/ide/serverworks.c	2012-03-19 10:43:43.776034663 +0100
@@ -337,7 +337,7 @@ static const struct ide_port_ops svwks_p
 	.cable_detect		= svwks_cable_detect,
 };
 
-static const struct ide_port_info serverworks_chipsets[] __devinitdata = {
+static const struct ide_port_info serverworks_chipsets[] __devinitconst = {
 	{	/* 0: OSB4 */
 		.name		= DRV_NAME,
 		.init_chipset	= init_chipset_svwks,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/siimage.c linux-3.3.8-pax/drivers/ide/siimage.c
--- linux-3.3.8/drivers/ide/siimage.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/ide/siimage.c	2012-03-19 10:43:43.776034663 +0100
@@ -719,7 +719,7 @@ static const struct ide_dma_ops sil_dma_
 		.udma_mask	= ATA_UDMA6,		\
 	}
 
-static const struct ide_port_info siimage_chipsets[] __devinitdata = {
+static const struct ide_port_info siimage_chipsets[] __devinitconst = {
 	/* 0: SiI680 */  DECLARE_SII_DEV(&sil_pata_port_ops),
 	/* 1: SiI3112 */ DECLARE_SII_DEV(&sil_sata_port_ops)
 };
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/sis5513.c linux-3.3.8-pax/drivers/ide/sis5513.c
--- linux-3.3.8/drivers/ide/sis5513.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/ide/sis5513.c	2012-03-19 10:43:43.776034663 +0100
@@ -563,7 +563,7 @@ static const struct ide_port_ops sis_ata
 	.cable_detect		= sis_cable_detect,
 };
 
-static const struct ide_port_info sis5513_chipset __devinitdata = {
+static const struct ide_port_info sis5513_chipset __devinitconst = {
 	.name		= DRV_NAME,
 	.init_chipset	= init_chipset_sis5513,
 	.enablebits	= { {0x4a, 0x02, 0x02}, {0x4a, 0x04, 0x04} },
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/sl82c105.c linux-3.3.8-pax/drivers/ide/sl82c105.c
--- linux-3.3.8/drivers/ide/sl82c105.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/ide/sl82c105.c	2012-03-19 10:43:43.780034664 +0100
@@ -299,7 +299,7 @@ static const struct ide_dma_ops sl82c105
 	.dma_sff_read_status	= ide_dma_sff_read_status,
 };
 
-static const struct ide_port_info sl82c105_chipset __devinitdata = {
+static const struct ide_port_info sl82c105_chipset __devinitconst = {
 	.name		= DRV_NAME,
 	.init_chipset	= init_chipset_sl82c105,
 	.enablebits	= {{0x40,0x01,0x01}, {0x40,0x10,0x10}},
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/slc90e66.c linux-3.3.8-pax/drivers/ide/slc90e66.c
--- linux-3.3.8/drivers/ide/slc90e66.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/ide/slc90e66.c	2012-03-19 10:43:43.780034664 +0100
@@ -132,7 +132,7 @@ static const struct ide_port_ops slc90e6
 	.cable_detect		= slc90e66_cable_detect,
 };
 
-static const struct ide_port_info slc90e66_chipset __devinitdata = {
+static const struct ide_port_info slc90e66_chipset __devinitconst = {
 	.name		= DRV_NAME,
 	.enablebits	= { {0x41, 0x80, 0x80}, {0x43, 0x80, 0x80} },
 	.port_ops	= &slc90e66_port_ops,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/tc86c001.c linux-3.3.8-pax/drivers/ide/tc86c001.c
--- linux-3.3.8/drivers/ide/tc86c001.c	2012-01-08 19:47:58.859472486 +0100
+++ linux-3.3.8-pax/drivers/ide/tc86c001.c	2012-03-19 10:43:43.780034664 +0100
@@ -192,7 +192,7 @@ static const struct ide_dma_ops tc86c001
 	.dma_sff_read_status	= ide_dma_sff_read_status,
 };
 
-static const struct ide_port_info tc86c001_chipset __devinitdata = {
+static const struct ide_port_info tc86c001_chipset __devinitconst = {
 	.name		= DRV_NAME,
 	.init_hwif	= init_hwif_tc86c001,
 	.port_ops	= &tc86c001_port_ops,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/triflex.c linux-3.3.8-pax/drivers/ide/triflex.c
--- linux-3.3.8/drivers/ide/triflex.c	2012-01-08 19:47:58.863472486 +0100
+++ linux-3.3.8-pax/drivers/ide/triflex.c	2012-03-19 10:43:43.780034664 +0100
@@ -92,7 +92,7 @@ static const struct ide_port_ops triflex
 	.set_dma_mode		= triflex_set_mode,
 };
 
-static const struct ide_port_info triflex_device __devinitdata = {
+static const struct ide_port_info triflex_device __devinitconst = {
 	.name		= DRV_NAME,
 	.enablebits	= {{0x80, 0x01, 0x01}, {0x80, 0x02, 0x02}},
 	.port_ops	= &triflex_port_ops,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/trm290.c linux-3.3.8-pax/drivers/ide/trm290.c
--- linux-3.3.8/drivers/ide/trm290.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/ide/trm290.c	2012-03-19 10:43:43.784034664 +0100
@@ -324,7 +324,7 @@ static struct ide_dma_ops trm290_dma_ops
 	.dma_check		= trm290_dma_check,
 };
 
-static const struct ide_port_info trm290_chipset __devinitdata = {
+static const struct ide_port_info trm290_chipset __devinitconst = {
 	.name		= DRV_NAME,
 	.init_hwif	= init_hwif_trm290,
 	.tp_ops 	= &trm290_tp_ops,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ide/via82cxxx.c linux-3.3.8-pax/drivers/ide/via82cxxx.c
--- linux-3.3.8/drivers/ide/via82cxxx.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/ide/via82cxxx.c	2012-03-19 10:43:43.784034664 +0100
@@ -403,7 +403,7 @@ static const struct ide_port_ops via_por
 	.cable_detect		= via82cxxx_cable_detect,
 };
 
-static const struct ide_port_info via82cxxx_chipset __devinitdata = {
+static const struct ide_port_info via82cxxx_chipset __devinitconst = {
 	.name		= DRV_NAME,
 	.init_chipset	= init_chipset_via82cxxx,
 	.enablebits	= { { 0x40, 0x02, 0x02 }, { 0x40, 0x01, 0x01 } },
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/ieee802154/fakehard.c linux-3.3.8-pax/drivers/ieee802154/fakehard.c
--- linux-3.3.8/drivers/ieee802154/fakehard.c	2012-03-19 10:38:59.424049845 +0100
+++ linux-3.3.8-pax/drivers/ieee802154/fakehard.c	2012-03-19 10:43:43.784034664 +0100
@@ -386,7 +386,7 @@ static int __devinit ieee802154fake_prob
 	phy->transmit_power = 0xbf;
 
 	dev->netdev_ops = &fake_ops;
-	dev->ml_priv = &fake_mlme;
+	dev->ml_priv = (void *)&fake_mlme;
 
 	priv = netdev_priv(dev);
 	priv->phy = phy;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/infiniband/core/cm.c linux-3.3.8-pax/drivers/infiniband/core/cm.c
--- linux-3.3.8/drivers/infiniband/core/cm.c	2012-03-19 10:38:59.436049845 +0100
+++ linux-3.3.8-pax/drivers/infiniband/core/cm.c	2012-03-19 10:43:43.784034664 +0100
@@ -114,7 +114,7 @@ static char const counter_group_names[CM
 
 struct cm_counter_group {
 	struct kobject obj;
-	atomic_long_t counter[CM_ATTR_COUNT];
+	atomic_long_unchecked_t counter[CM_ATTR_COUNT];
 };
 
 struct cm_counter_attribute {
@@ -1394,7 +1394,7 @@ static void cm_dup_req_handler(struct cm
 	struct ib_mad_send_buf *msg = NULL;
 	int ret;
 
-	atomic_long_inc(&work->port->counter_group[CM_RECV_DUPLICATES].
+	atomic_long_inc_unchecked(&work->port->counter_group[CM_RECV_DUPLICATES].
 			counter[CM_REQ_COUNTER]);
 
 	/* Quick state check to discard duplicate REQs. */
@@ -1778,7 +1778,7 @@ static void cm_dup_rep_handler(struct cm
 	if (!cm_id_priv)
 		return;
 
-	atomic_long_inc(&work->port->counter_group[CM_RECV_DUPLICATES].
+	atomic_long_inc_unchecked(&work->port->counter_group[CM_RECV_DUPLICATES].
 			counter[CM_REP_COUNTER]);
 	ret = cm_alloc_response_msg(work->port, work->mad_recv_wc, &msg);
 	if (ret)
@@ -1945,7 +1945,7 @@ static int cm_rtu_handler(struct cm_work
 	if (cm_id_priv->id.state != IB_CM_REP_SENT &&
 	    cm_id_priv->id.state != IB_CM_MRA_REP_RCVD) {
 		spin_unlock_irq(&cm_id_priv->lock);
-		atomic_long_inc(&work->port->counter_group[CM_RECV_DUPLICATES].
+		atomic_long_inc_unchecked(&work->port->counter_group[CM_RECV_DUPLICATES].
 				counter[CM_RTU_COUNTER]);
 		goto out;
 	}
@@ -2128,7 +2128,7 @@ static int cm_dreq_handler(struct cm_wor
 	cm_id_priv = cm_acquire_id(dreq_msg->remote_comm_id,
 				   dreq_msg->local_comm_id);
 	if (!cm_id_priv) {
-		atomic_long_inc(&work->port->counter_group[CM_RECV_DUPLICATES].
+		atomic_long_inc_unchecked(&work->port->counter_group[CM_RECV_DUPLICATES].
 				counter[CM_DREQ_COUNTER]);
 		cm_issue_drep(work->port, work->mad_recv_wc);
 		return -EINVAL;
@@ -2153,7 +2153,7 @@ static int cm_dreq_handler(struct cm_wor
 	case IB_CM_MRA_REP_RCVD:
 		break;
 	case IB_CM_TIMEWAIT:
-		atomic_long_inc(&work->port->counter_group[CM_RECV_DUPLICATES].
+		atomic_long_inc_unchecked(&work->port->counter_group[CM_RECV_DUPLICATES].
 				counter[CM_DREQ_COUNTER]);
 		if (cm_alloc_response_msg(work->port, work->mad_recv_wc, &msg))
 			goto unlock;
@@ -2167,7 +2167,7 @@ static int cm_dreq_handler(struct cm_wor
 			cm_free_msg(msg);
 		goto deref;
 	case IB_CM_DREQ_RCVD:
-		atomic_long_inc(&work->port->counter_group[CM_RECV_DUPLICATES].
+		atomic_long_inc_unchecked(&work->port->counter_group[CM_RECV_DUPLICATES].
 				counter[CM_DREQ_COUNTER]);
 		goto unlock;
 	default:
@@ -2534,7 +2534,7 @@ static int cm_mra_handler(struct cm_work
 		    ib_modify_mad(cm_id_priv->av.port->mad_agent,
 				  cm_id_priv->msg, timeout)) {
 			if (cm_id_priv->id.lap_state == IB_CM_MRA_LAP_RCVD)
-				atomic_long_inc(&work->port->
+				atomic_long_inc_unchecked(&work->port->
 						counter_group[CM_RECV_DUPLICATES].
 						counter[CM_MRA_COUNTER]);
 			goto out;
@@ -2543,7 +2543,7 @@ static int cm_mra_handler(struct cm_work
 		break;
 	case IB_CM_MRA_REQ_RCVD:
 	case IB_CM_MRA_REP_RCVD:
-		atomic_long_inc(&work->port->counter_group[CM_RECV_DUPLICATES].
+		atomic_long_inc_unchecked(&work->port->counter_group[CM_RECV_DUPLICATES].
 				counter[CM_MRA_COUNTER]);
 		/* fall through */
 	default:
@@ -2705,7 +2705,7 @@ static int cm_lap_handler(struct cm_work
 	case IB_CM_LAP_IDLE:
 		break;
 	case IB_CM_MRA_LAP_SENT:
-		atomic_long_inc(&work->port->counter_group[CM_RECV_DUPLICATES].
+		atomic_long_inc_unchecked(&work->port->counter_group[CM_RECV_DUPLICATES].
 				counter[CM_LAP_COUNTER]);
 		if (cm_alloc_response_msg(work->port, work->mad_recv_wc, &msg))
 			goto unlock;
@@ -2721,7 +2721,7 @@ static int cm_lap_handler(struct cm_work
 			cm_free_msg(msg);
 		goto deref;
 	case IB_CM_LAP_RCVD:
-		atomic_long_inc(&work->port->counter_group[CM_RECV_DUPLICATES].
+		atomic_long_inc_unchecked(&work->port->counter_group[CM_RECV_DUPLICATES].
 				counter[CM_LAP_COUNTER]);
 		goto unlock;
 	default:
@@ -3005,7 +3005,7 @@ static int cm_sidr_req_handler(struct cm
 	cur_cm_id_priv = cm_insert_remote_sidr(cm_id_priv);
 	if (cur_cm_id_priv) {
 		spin_unlock_irq(&cm.lock);
-		atomic_long_inc(&work->port->counter_group[CM_RECV_DUPLICATES].
+		atomic_long_inc_unchecked(&work->port->counter_group[CM_RECV_DUPLICATES].
 				counter[CM_SIDR_REQ_COUNTER]);
 		goto out; /* Duplicate message. */
 	}
@@ -3217,10 +3217,10 @@ static void cm_send_handler(struct ib_ma
 	if (!msg->context[0] && (attr_index != CM_REJ_COUNTER))
 		msg->retries = 1;
 
-	atomic_long_add(1 + msg->retries,
+	atomic_long_add_unchecked(1 + msg->retries,
 			&port->counter_group[CM_XMIT].counter[attr_index]);
 	if (msg->retries)
-		atomic_long_add(msg->retries,
+		atomic_long_add_unchecked(msg->retries,
 				&port->counter_group[CM_XMIT_RETRIES].
 				counter[attr_index]);
 
@@ -3430,7 +3430,7 @@ static void cm_recv_handler(struct ib_ma
 	}
 
 	attr_id = be16_to_cpu(mad_recv_wc->recv_buf.mad->mad_hdr.attr_id);
-	atomic_long_inc(&port->counter_group[CM_RECV].
+	atomic_long_inc_unchecked(&port->counter_group[CM_RECV].
 			counter[attr_id - CM_ATTR_ID_OFFSET]);
 
 	work = kmalloc(sizeof *work + sizeof(struct ib_sa_path_rec) * paths,
@@ -3635,7 +3635,7 @@ static ssize_t cm_show_counter(struct ko
 	cm_attr = container_of(attr, struct cm_counter_attribute, attr);
 
 	return sprintf(buf, "%ld\n",
-		       atomic_long_read(&group->counter[cm_attr->index]));
+		       atomic_long_read_unchecked(&group->counter[cm_attr->index]));
 }
 
 static const struct sysfs_ops cm_counter_ops = {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/infiniband/core/fmr_pool.c linux-3.3.8-pax/drivers/infiniband/core/fmr_pool.c
--- linux-3.3.8/drivers/infiniband/core/fmr_pool.c	2012-01-08 19:47:58.879472485 +0100
+++ linux-3.3.8-pax/drivers/infiniband/core/fmr_pool.c	2012-03-19 10:43:43.788034664 +0100
@@ -98,8 +98,8 @@ struct ib_fmr_pool {
 
 	struct task_struct       *thread;
 
-	atomic_t                  req_ser;
-	atomic_t                  flush_ser;
+	atomic_unchecked_t        req_ser;
+	atomic_unchecked_t        flush_ser;
 
 	wait_queue_head_t         force_wait;
 };
@@ -180,10 +180,10 @@ static int ib_fmr_cleanup_thread(void *p
 	struct ib_fmr_pool *pool = pool_ptr;
 
 	do {
-		if (atomic_read(&pool->flush_ser) - atomic_read(&pool->req_ser) < 0) {
+		if (atomic_read_unchecked(&pool->flush_ser) - atomic_read_unchecked(&pool->req_ser) < 0) {
 			ib_fmr_batch_release(pool);
 
-			atomic_inc(&pool->flush_ser);
+			atomic_inc_unchecked(&pool->flush_ser);
 			wake_up_interruptible(&pool->force_wait);
 
 			if (pool->flush_function)
@@ -191,7 +191,7 @@ static int ib_fmr_cleanup_thread(void *p
 		}
 
 		set_current_state(TASK_INTERRUPTIBLE);
-		if (atomic_read(&pool->flush_ser) - atomic_read(&pool->req_ser) >= 0 &&
+		if (atomic_read_unchecked(&pool->flush_ser) - atomic_read_unchecked(&pool->req_ser) >= 0 &&
 		    !kthread_should_stop())
 			schedule();
 		__set_current_state(TASK_RUNNING);
@@ -283,8 +283,8 @@ struct ib_fmr_pool *ib_create_fmr_pool(s
 	pool->dirty_watermark = params->dirty_watermark;
 	pool->dirty_len       = 0;
 	spin_lock_init(&pool->pool_lock);
-	atomic_set(&pool->req_ser,   0);
-	atomic_set(&pool->flush_ser, 0);
+	atomic_set_unchecked(&pool->req_ser,   0);
+	atomic_set_unchecked(&pool->flush_ser, 0);
 	init_waitqueue_head(&pool->force_wait);
 
 	pool->thread = kthread_run(ib_fmr_cleanup_thread,
@@ -412,11 +412,11 @@ int ib_flush_fmr_pool(struct ib_fmr_pool
 	}
 	spin_unlock_irq(&pool->pool_lock);
 
-	serial = atomic_inc_return(&pool->req_ser);
+	serial = atomic_inc_return_unchecked(&pool->req_ser);
 	wake_up_process(pool->thread);
 
 	if (wait_event_interruptible(pool->force_wait,
-				     atomic_read(&pool->flush_ser) - serial >= 0))
+				     atomic_read_unchecked(&pool->flush_ser) - serial >= 0))
 		return -EINTR;
 
 	return 0;
@@ -526,7 +526,7 @@ int ib_fmr_pool_unmap(struct ib_pool_fmr
 		} else {
 			list_add_tail(&fmr->list, &pool->dirty_list);
 			if (++pool->dirty_len >= pool->dirty_watermark) {
-				atomic_inc(&pool->req_ser);
+				atomic_inc_unchecked(&pool->req_ser);
 				wake_up_process(pool->thread);
 			}
 		}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/infiniband/hw/cxgb4/mem.c linux-3.3.8-pax/drivers/infiniband/hw/cxgb4/mem.c
--- linux-3.3.8/drivers/infiniband/hw/cxgb4/mem.c	2011-10-24 12:48:28.759091640 +0200
+++ linux-3.3.8-pax/drivers/infiniband/hw/cxgb4/mem.c	2012-03-19 10:43:43.788034664 +0100
@@ -122,7 +122,7 @@ static int write_tpt_entry(struct c4iw_r
 	int err;
 	struct fw_ri_tpte tpt;
 	u32 stag_idx;
-	static atomic_t key;
+	static atomic_unchecked_t key;
 
 	if (c4iw_fatal_error(rdev))
 		return -EIO;
@@ -135,7 +135,7 @@ static int write_tpt_entry(struct c4iw_r
 					     &rdev->resource.tpt_fifo_lock);
 		if (!stag_idx)
 			return -ENOMEM;
-		*stag = (stag_idx << 8) | (atomic_inc_return(&key) & 0xff);
+		*stag = (stag_idx << 8) | (atomic_inc_return_unchecked(&key) & 0xff);
 	}
 	PDBG("%s stag_state 0x%0x type 0x%0x pdid 0x%0x, stag_idx 0x%x\n",
 	     __func__, stag_state, type, pdid, stag_idx);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/infiniband/hw/ipath/ipath_rc.c linux-3.3.8-pax/drivers/infiniband/hw/ipath/ipath_rc.c
--- linux-3.3.8/drivers/infiniband/hw/ipath/ipath_rc.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/infiniband/hw/ipath/ipath_rc.c	2012-03-19 10:43:43.792034662 +0100
@@ -1868,7 +1868,7 @@ void ipath_rc_rcv(struct ipath_ibdev *de
 		struct ib_atomic_eth *ateth;
 		struct ipath_ack_entry *e;
 		u64 vaddr;
-		atomic64_t *maddr;
+		atomic64_unchecked_t *maddr;
 		u64 sdata;
 		u32 rkey;
 		u8 next;
@@ -1903,11 +1903,11 @@ void ipath_rc_rcv(struct ipath_ibdev *de
 					    IB_ACCESS_REMOTE_ATOMIC)))
 			goto nack_acc_unlck;
 		/* Perform atomic OP and save result. */
-		maddr = (atomic64_t *) qp->r_sge.sge.vaddr;
+		maddr = (atomic64_unchecked_t *) qp->r_sge.sge.vaddr;
 		sdata = be64_to_cpu(ateth->swap_data);
 		e = &qp->s_ack_queue[qp->r_head_ack_queue];
 		e->atomic_data = (opcode == OP(FETCH_ADD)) ?
-			(u64) atomic64_add_return(sdata, maddr) - sdata :
+			(u64) atomic64_add_return_unchecked(sdata, maddr) - sdata :
 			(u64) cmpxchg((u64 *) qp->r_sge.sge.vaddr,
 				      be64_to_cpu(ateth->compare_data),
 				      sdata);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/infiniband/hw/ipath/ipath_ruc.c linux-3.3.8-pax/drivers/infiniband/hw/ipath/ipath_ruc.c
--- linux-3.3.8/drivers/infiniband/hw/ipath/ipath_ruc.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/infiniband/hw/ipath/ipath_ruc.c	2012-03-19 10:43:43.792034662 +0100
@@ -266,7 +266,7 @@ static void ipath_ruc_loopback(struct ip
 	unsigned long flags;
 	struct ib_wc wc;
 	u64 sdata;
-	atomic64_t *maddr;
+	atomic64_unchecked_t *maddr;
 	enum ib_wc_status send_status;
 
 	/*
@@ -382,11 +382,11 @@ again:
 					    IB_ACCESS_REMOTE_ATOMIC)))
 			goto acc_err;
 		/* Perform atomic OP and save result. */
-		maddr = (atomic64_t *) qp->r_sge.sge.vaddr;
+		maddr = (atomic64_unchecked_t *) qp->r_sge.sge.vaddr;
 		sdata = wqe->wr.wr.atomic.compare_add;
 		*(u64 *) sqp->s_sge.sge.vaddr =
 			(wqe->wr.opcode == IB_WR_ATOMIC_FETCH_AND_ADD) ?
-			(u64) atomic64_add_return(sdata, maddr) - sdata :
+			(u64) atomic64_add_return_unchecked(sdata, maddr) - sdata :
 			(u64) cmpxchg((u64 *) qp->r_sge.sge.vaddr,
 				      sdata, wqe->wr.wr.atomic.swap);
 		goto send_comp;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/infiniband/hw/nes/nes.c linux-3.3.8-pax/drivers/infiniband/hw/nes/nes.c
--- linux-3.3.8/drivers/infiniband/hw/nes/nes.c	2012-03-19 10:38:59.464049843 +0100
+++ linux-3.3.8-pax/drivers/infiniband/hw/nes/nes.c	2012-03-19 10:43:43.792034662 +0100
@@ -103,7 +103,7 @@ MODULE_PARM_DESC(limit_maxrdreqsz, "Limi
 LIST_HEAD(nes_adapter_list);
 static LIST_HEAD(nes_dev_list);
 
-atomic_t qps_destroyed;
+atomic_unchecked_t qps_destroyed;
 
 static unsigned int ee_flsh_adapter;
 static unsigned int sysfs_nonidx_addr;
@@ -272,7 +272,7 @@ static void nes_cqp_rem_ref_callback(str
 	struct nes_qp *nesqp = cqp_request->cqp_callback_pointer;
 	struct nes_adapter *nesadapter = nesdev->nesadapter;
 
-	atomic_inc(&qps_destroyed);
+	atomic_inc_unchecked(&qps_destroyed);
 
 	/* Free the control structures */
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/infiniband/hw/nes/nes_cm.c linux-3.3.8-pax/drivers/infiniband/hw/nes/nes_cm.c
--- linux-3.3.8/drivers/infiniband/hw/nes/nes_cm.c	2012-03-19 10:38:59.468049843 +0100
+++ linux-3.3.8-pax/drivers/infiniband/hw/nes/nes_cm.c	2012-03-19 10:43:43.796034660 +0100
@@ -68,14 +68,14 @@ u32 cm_packets_dropped;
 u32 cm_packets_retrans;
 u32 cm_packets_created;
 u32 cm_packets_received;
-atomic_t cm_listens_created;
-atomic_t cm_listens_destroyed;
+atomic_unchecked_t cm_listens_created;
+atomic_unchecked_t cm_listens_destroyed;
 u32 cm_backlog_drops;
-atomic_t cm_loopbacks;
-atomic_t cm_nodes_created;
-atomic_t cm_nodes_destroyed;
-atomic_t cm_accel_dropped_pkts;
-atomic_t cm_resets_recvd;
+atomic_unchecked_t cm_loopbacks;
+atomic_unchecked_t cm_nodes_created;
+atomic_unchecked_t cm_nodes_destroyed;
+atomic_unchecked_t cm_accel_dropped_pkts;
+atomic_unchecked_t cm_resets_recvd;
 
 static inline int mini_cm_accelerated(struct nes_cm_core *, struct nes_cm_node *);
 static struct nes_cm_listener *mini_cm_listen(struct nes_cm_core *, struct nes_vnic *, struct nes_cm_info *);
@@ -148,13 +148,13 @@ static struct nes_cm_ops nes_cm_api = {
 
 static struct nes_cm_core *g_cm_core;
 
-atomic_t cm_connects;
-atomic_t cm_accepts;
-atomic_t cm_disconnects;
-atomic_t cm_closes;
-atomic_t cm_connecteds;
-atomic_t cm_connect_reqs;
-atomic_t cm_rejects;
+atomic_unchecked_t cm_connects;
+atomic_unchecked_t cm_accepts;
+atomic_unchecked_t cm_disconnects;
+atomic_unchecked_t cm_closes;
+atomic_unchecked_t cm_connecteds;
+atomic_unchecked_t cm_connect_reqs;
+atomic_unchecked_t cm_rejects;
 
 int nes_add_ref_cm_node(struct nes_cm_node *cm_node)
 {
@@ -1274,7 +1274,7 @@ static int mini_cm_dec_refcnt_listen(str
 		kfree(listener);
 		listener = NULL;
 		ret = 0;
-		atomic_inc(&cm_listens_destroyed);
+		atomic_inc_unchecked(&cm_listens_destroyed);
 	} else {
 		spin_unlock_irqrestore(&cm_core->listen_list_lock, flags);
 	}
@@ -1473,7 +1473,7 @@ static struct nes_cm_node *make_cm_node(
 		  cm_node->rem_mac);
 
 	add_hte_node(cm_core, cm_node);
-	atomic_inc(&cm_nodes_created);
+	atomic_inc_unchecked(&cm_nodes_created);
 
 	return cm_node;
 }
@@ -1531,7 +1531,7 @@ static int rem_ref_cm_node(struct nes_cm
 	}
 
 	atomic_dec(&cm_core->node_cnt);
-	atomic_inc(&cm_nodes_destroyed);
+	atomic_inc_unchecked(&cm_nodes_destroyed);
 	nesqp = cm_node->nesqp;
 	if (nesqp) {
 		nesqp->cm_node = NULL;
@@ -1595,7 +1595,7 @@ static int process_options(struct nes_cm
 
 static void drop_packet(struct sk_buff *skb)
 {
-	atomic_inc(&cm_accel_dropped_pkts);
+	atomic_inc_unchecked(&cm_accel_dropped_pkts);
 	dev_kfree_skb_any(skb);
 }
 
@@ -1658,7 +1658,7 @@ static void handle_rst_pkt(struct nes_cm
 {
 
 	int	reset = 0;	/* whether to send reset in case of err.. */
-	atomic_inc(&cm_resets_recvd);
+	atomic_inc_unchecked(&cm_resets_recvd);
 	nes_debug(NES_DBG_CM, "Received Reset, cm_node = %p, state = %u."
 			" refcnt=%d\n", cm_node, cm_node->state,
 			atomic_read(&cm_node->ref_count));
@@ -2299,7 +2299,7 @@ static struct nes_cm_node *mini_cm_conne
 				rem_ref_cm_node(cm_node->cm_core, cm_node);
 				return NULL;
 			}
-			atomic_inc(&cm_loopbacks);
+			atomic_inc_unchecked(&cm_loopbacks);
 			loopbackremotenode->loopbackpartner = cm_node;
 			loopbackremotenode->tcp_cntxt.rcv_wscale =
 				NES_CM_DEFAULT_RCV_WND_SCALE;
@@ -2574,7 +2574,7 @@ static int mini_cm_recv_pkt(struct nes_c
 				nes_queue_mgt_skbs(skb, nesvnic, cm_node->nesqp);
 			else {
 				rem_ref_cm_node(cm_core, cm_node);
-				atomic_inc(&cm_accel_dropped_pkts);
+				atomic_inc_unchecked(&cm_accel_dropped_pkts);
 				dev_kfree_skb_any(skb);
 			}
 			break;
@@ -2881,7 +2881,7 @@ static int nes_cm_disconn_true(struct ne
 
 	if ((cm_id) && (cm_id->event_handler)) {
 		if (issue_disconn) {
-			atomic_inc(&cm_disconnects);
+			atomic_inc_unchecked(&cm_disconnects);
 			cm_event.event = IW_CM_EVENT_DISCONNECT;
 			cm_event.status = disconn_status;
 			cm_event.local_addr = cm_id->local_addr;
@@ -2903,7 +2903,7 @@ static int nes_cm_disconn_true(struct ne
 		}
 
 		if (issue_close) {
-			atomic_inc(&cm_closes);
+			atomic_inc_unchecked(&cm_closes);
 			nes_disconnect(nesqp, 1);
 
 			cm_id->provider_data = nesqp;
@@ -3039,7 +3039,7 @@ int nes_accept(struct iw_cm_id *cm_id, s
 
 	nes_debug(NES_DBG_CM, "QP%u, cm_node=%p, jiffies = %lu listener = %p\n",
 		nesqp->hwqp.qp_id, cm_node, jiffies, cm_node->listener);
-	atomic_inc(&cm_accepts);
+	atomic_inc_unchecked(&cm_accepts);
 
 	nes_debug(NES_DBG_CM, "netdev refcnt = %u.\n",
 			netdev_refcnt_read(nesvnic->netdev));
@@ -3241,7 +3241,7 @@ int nes_reject(struct iw_cm_id *cm_id, c
 	struct nes_cm_core *cm_core;
 	u8 *start_buff;
 
-	atomic_inc(&cm_rejects);
+	atomic_inc_unchecked(&cm_rejects);
 	cm_node = (struct nes_cm_node *)cm_id->provider_data;
 	loopback = cm_node->loopbackpartner;
 	cm_core = cm_node->cm_core;
@@ -3301,7 +3301,7 @@ int nes_connect(struct iw_cm_id *cm_id,
 		  ntohl(cm_id->local_addr.sin_addr.s_addr),
 		  ntohs(cm_id->local_addr.sin_port));
 
-	atomic_inc(&cm_connects);
+	atomic_inc_unchecked(&cm_connects);
 	nesqp->active_conn = 1;
 
 	/* cache the cm_id in the qp */
@@ -3407,7 +3407,7 @@ int nes_create_listen(struct iw_cm_id *c
 			g_cm_core->api->stop_listener(g_cm_core, (void *)cm_node);
 			return err;
 		}
-		atomic_inc(&cm_listens_created);
+		atomic_inc_unchecked(&cm_listens_created);
 	}
 
 	cm_id->add_ref(cm_id);
@@ -3508,7 +3508,7 @@ static void cm_event_connected(struct ne
 
 	if (nesqp->destroyed)
 		return;
-	atomic_inc(&cm_connecteds);
+	atomic_inc_unchecked(&cm_connecteds);
 	nes_debug(NES_DBG_CM, "QP%u attempting to connect to  0x%08X:0x%04X on"
 		  " local port 0x%04X. jiffies = %lu.\n",
 		  nesqp->hwqp.qp_id,
@@ -3695,7 +3695,7 @@ static void cm_event_reset(struct nes_cm
 
 	cm_id->add_ref(cm_id);
 	ret = cm_id->event_handler(cm_id, &cm_event);
-	atomic_inc(&cm_closes);
+	atomic_inc_unchecked(&cm_closes);
 	cm_event.event = IW_CM_EVENT_CLOSE;
 	cm_event.status = 0;
 	cm_event.provider_data = cm_id->provider_data;
@@ -3731,7 +3731,7 @@ static void cm_event_mpa_req(struct nes_
 		return;
 	cm_id = cm_node->cm_id;
 
-	atomic_inc(&cm_connect_reqs);
+	atomic_inc_unchecked(&cm_connect_reqs);
 	nes_debug(NES_DBG_CM, "cm_node = %p - cm_id = %p, jiffies = %lu\n",
 		  cm_node, cm_id, jiffies);
 
@@ -3771,7 +3771,7 @@ static void cm_event_mpa_reject(struct n
 		return;
 	cm_id = cm_node->cm_id;
 
-	atomic_inc(&cm_connect_reqs);
+	atomic_inc_unchecked(&cm_connect_reqs);
 	nes_debug(NES_DBG_CM, "cm_node = %p - cm_id = %p, jiffies = %lu\n",
 		  cm_node, cm_id, jiffies);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/infiniband/hw/nes/nes.h linux-3.3.8-pax/drivers/infiniband/hw/nes/nes.h
--- linux-3.3.8/drivers/infiniband/hw/nes/nes.h	2012-03-19 10:38:59.464049843 +0100
+++ linux-3.3.8-pax/drivers/infiniband/hw/nes/nes.h	2012-03-19 10:43:43.796034660 +0100
@@ -178,17 +178,17 @@ extern unsigned int nes_debug_level;
 extern unsigned int wqm_quanta;
 extern struct list_head nes_adapter_list;
 
-extern atomic_t cm_connects;
-extern atomic_t cm_accepts;
-extern atomic_t cm_disconnects;
-extern atomic_t cm_closes;
-extern atomic_t cm_connecteds;
-extern atomic_t cm_connect_reqs;
-extern atomic_t cm_rejects;
-extern atomic_t mod_qp_timouts;
-extern atomic_t qps_created;
-extern atomic_t qps_destroyed;
-extern atomic_t sw_qps_destroyed;
+extern atomic_unchecked_t cm_connects;
+extern atomic_unchecked_t cm_accepts;
+extern atomic_unchecked_t cm_disconnects;
+extern atomic_unchecked_t cm_closes;
+extern atomic_unchecked_t cm_connecteds;
+extern atomic_unchecked_t cm_connect_reqs;
+extern atomic_unchecked_t cm_rejects;
+extern atomic_unchecked_t mod_qp_timouts;
+extern atomic_unchecked_t qps_created;
+extern atomic_unchecked_t qps_destroyed;
+extern atomic_unchecked_t sw_qps_destroyed;
 extern u32 mh_detected;
 extern u32 mh_pauses_sent;
 extern u32 cm_packets_sent;
@@ -197,16 +197,16 @@ extern u32 cm_packets_created;
 extern u32 cm_packets_received;
 extern u32 cm_packets_dropped;
 extern u32 cm_packets_retrans;
-extern atomic_t cm_listens_created;
-extern atomic_t cm_listens_destroyed;
+extern atomic_unchecked_t cm_listens_created;
+extern atomic_unchecked_t cm_listens_destroyed;
 extern u32 cm_backlog_drops;
-extern atomic_t cm_loopbacks;
-extern atomic_t cm_nodes_created;
-extern atomic_t cm_nodes_destroyed;
-extern atomic_t cm_accel_dropped_pkts;
-extern atomic_t cm_resets_recvd;
-extern atomic_t pau_qps_created;
-extern atomic_t pau_qps_destroyed;
+extern atomic_unchecked_t cm_loopbacks;
+extern atomic_unchecked_t cm_nodes_created;
+extern atomic_unchecked_t cm_nodes_destroyed;
+extern atomic_unchecked_t cm_accel_dropped_pkts;
+extern atomic_unchecked_t cm_resets_recvd;
+extern atomic_unchecked_t pau_qps_created;
+extern atomic_unchecked_t pau_qps_destroyed;
 
 extern u32 int_mod_timer_init;
 extern u32 int_mod_cq_depth_256;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/infiniband/hw/nes/nes_mgt.c linux-3.3.8-pax/drivers/infiniband/hw/nes/nes_mgt.c
--- linux-3.3.8/drivers/infiniband/hw/nes/nes_mgt.c	2012-03-19 10:38:59.472049843 +0100
+++ linux-3.3.8-pax/drivers/infiniband/hw/nes/nes_mgt.c	2012-03-19 10:43:43.796034660 +0100
@@ -40,8 +40,8 @@
 #include "nes.h"
 #include "nes_mgt.h"
 
-atomic_t pau_qps_created;
-atomic_t pau_qps_destroyed;
+atomic_unchecked_t pau_qps_created;
+atomic_unchecked_t pau_qps_destroyed;
 
 static void nes_replenish_mgt_rq(struct nes_vnic_mgt *mgtvnic)
 {
@@ -621,7 +621,7 @@ void nes_destroy_pau_qp(struct nes_devic
 {
 	struct sk_buff *skb;
 	unsigned long flags;
-	atomic_inc(&pau_qps_destroyed);
+	atomic_inc_unchecked(&pau_qps_destroyed);
 
 	/* Free packets that have not yet been forwarded */
 	/* Lock is acquired by skb_dequeue when removing the skb */
@@ -812,7 +812,7 @@ static void nes_mgt_ce_handler(struct ne
 					cq->cq_vbase[head].cqe_words[NES_NIC_CQE_HASH_RCVNXT]);
 				skb_queue_head_init(&nesqp->pau_list);
 				spin_lock_init(&nesqp->pau_lock);
-				atomic_inc(&pau_qps_created);
+				atomic_inc_unchecked(&pau_qps_created);
 				nes_change_quad_hash(nesdev, mgtvnic->nesvnic, nesqp);
 			}
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/infiniband/hw/nes/nes_nic.c linux-3.3.8-pax/drivers/infiniband/hw/nes/nes_nic.c
--- linux-3.3.8/drivers/infiniband/hw/nes/nes_nic.c	2012-03-19 10:38:59.476049843 +0100
+++ linux-3.3.8-pax/drivers/infiniband/hw/nes/nes_nic.c	2012-03-19 10:43:43.800034660 +0100
@@ -1277,39 +1277,39 @@ static void nes_netdev_get_ethtool_stats
 	target_stat_values[++index] = mh_detected;
 	target_stat_values[++index] = mh_pauses_sent;
 	target_stat_values[++index] = nesvnic->endnode_ipv4_tcp_retransmits;
-	target_stat_values[++index] = atomic_read(&cm_connects);
-	target_stat_values[++index] = atomic_read(&cm_accepts);
-	target_stat_values[++index] = atomic_read(&cm_disconnects);
-	target_stat_values[++index] = atomic_read(&cm_connecteds);
-	target_stat_values[++index] = atomic_read(&cm_connect_reqs);
-	target_stat_values[++index] = atomic_read(&cm_rejects);
-	target_stat_values[++index] = atomic_read(&mod_qp_timouts);
-	target_stat_values[++index] = atomic_read(&qps_created);
-	target_stat_values[++index] = atomic_read(&sw_qps_destroyed);
-	target_stat_values[++index] = atomic_read(&qps_destroyed);
-	target_stat_values[++index] = atomic_read(&cm_closes);
+	target_stat_values[++index] = atomic_read_unchecked(&cm_connects);
+	target_stat_values[++index] = atomic_read_unchecked(&cm_accepts);
+	target_stat_values[++index] = atomic_read_unchecked(&cm_disconnects);
+	target_stat_values[++index] = atomic_read_unchecked(&cm_connecteds);
+	target_stat_values[++index] = atomic_read_unchecked(&cm_connect_reqs);
+	target_stat_values[++index] = atomic_read_unchecked(&cm_rejects);
+	target_stat_values[++index] = atomic_read_unchecked(&mod_qp_timouts);
+	target_stat_values[++index] = atomic_read_unchecked(&qps_created);
+	target_stat_values[++index] = atomic_read_unchecked(&sw_qps_destroyed);
+	target_stat_values[++index] = atomic_read_unchecked(&qps_destroyed);
+	target_stat_values[++index] = atomic_read_unchecked(&cm_closes);
 	target_stat_values[++index] = cm_packets_sent;
 	target_stat_values[++index] = cm_packets_bounced;
 	target_stat_values[++index] = cm_packets_created;
 	target_stat_values[++index] = cm_packets_received;
 	target_stat_values[++index] = cm_packets_dropped;
 	target_stat_values[++index] = cm_packets_retrans;
-	target_stat_values[++index] = atomic_read(&cm_listens_created);
-	target_stat_values[++index] = atomic_read(&cm_listens_destroyed);
+	target_stat_values[++index] = atomic_read_unchecked(&cm_listens_created);
+	target_stat_values[++index] = atomic_read_unchecked(&cm_listens_destroyed);
 	target_stat_values[++index] = cm_backlog_drops;
-	target_stat_values[++index] = atomic_read(&cm_loopbacks);
-	target_stat_values[++index] = atomic_read(&cm_nodes_created);
-	target_stat_values[++index] = atomic_read(&cm_nodes_destroyed);
-	target_stat_values[++index] = atomic_read(&cm_accel_dropped_pkts);
-	target_stat_values[++index] = atomic_read(&cm_resets_recvd);
+	target_stat_values[++index] = atomic_read_unchecked(&cm_loopbacks);
+	target_stat_values[++index] = atomic_read_unchecked(&cm_nodes_created);
+	target_stat_values[++index] = atomic_read_unchecked(&cm_nodes_destroyed);
+	target_stat_values[++index] = atomic_read_unchecked(&cm_accel_dropped_pkts);
+	target_stat_values[++index] = atomic_read_unchecked(&cm_resets_recvd);
 	target_stat_values[++index] = nesadapter->free_4kpbl;
 	target_stat_values[++index] = nesadapter->free_256pbl;
 	target_stat_values[++index] = int_mod_timer_init;
 	target_stat_values[++index] = nesvnic->lro_mgr.stats.aggregated;
 	target_stat_values[++index] = nesvnic->lro_mgr.stats.flushed;
 	target_stat_values[++index] = nesvnic->lro_mgr.stats.no_desc;
-	target_stat_values[++index] = atomic_read(&pau_qps_created);
-	target_stat_values[++index] = atomic_read(&pau_qps_destroyed);
+	target_stat_values[++index] = atomic_read_unchecked(&pau_qps_created);
+	target_stat_values[++index] = atomic_read_unchecked(&pau_qps_destroyed);
 }
 
 /**
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/infiniband/hw/nes/nes_verbs.c linux-3.3.8-pax/drivers/infiniband/hw/nes/nes_verbs.c
--- linux-3.3.8/drivers/infiniband/hw/nes/nes_verbs.c	2012-03-19 10:38:59.480049842 +0100
+++ linux-3.3.8-pax/drivers/infiniband/hw/nes/nes_verbs.c	2012-03-19 10:43:43.812034662 +0100
@@ -46,9 +46,9 @@
 
 #include <rdma/ib_umem.h>
 
-atomic_t mod_qp_timouts;
-atomic_t qps_created;
-atomic_t sw_qps_destroyed;
+atomic_unchecked_t mod_qp_timouts;
+atomic_unchecked_t qps_created;
+atomic_unchecked_t sw_qps_destroyed;
 
 static void nes_unregister_ofa_device(struct nes_ib_device *nesibdev);
 
@@ -1131,7 +1131,7 @@ static struct ib_qp *nes_create_qp(struc
 	if (init_attr->create_flags)
 		return ERR_PTR(-EINVAL);
 
-	atomic_inc(&qps_created);
+	atomic_inc_unchecked(&qps_created);
 	switch (init_attr->qp_type) {
 		case IB_QPT_RC:
 			if (nes_drv_opt & NES_DRV_OPT_NO_INLINE_DATA) {
@@ -1460,7 +1460,7 @@ static int nes_destroy_qp(struct ib_qp *
 	struct iw_cm_event cm_event;
 	int ret = 0;
 
-	atomic_inc(&sw_qps_destroyed);
+	atomic_inc_unchecked(&sw_qps_destroyed);
 	nesqp->destroyed = 1;
 
 	/* Blow away the connection if it exists. */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/infiniband/hw/qib/qib.h linux-3.3.8-pax/drivers/infiniband/hw/qib/qib.h
--- linux-3.3.8/drivers/infiniband/hw/qib/qib.h	2012-01-08 19:47:59.147472471 +0100
+++ linux-3.3.8-pax/drivers/infiniband/hw/qib/qib.h	2012-03-19 10:43:43.816034661 +0100
@@ -51,6 +51,7 @@
 #include <linux/completion.h>
 #include <linux/kref.h>
 #include <linux/sched.h>
+#include <linux/slab.h>
 
 #include "qib_common.h"
 #include "qib_verbs.h"
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/input/gameport/gameport.c linux-3.3.8-pax/drivers/input/gameport/gameport.c
--- linux-3.3.8/drivers/input/gameport/gameport.c	2011-10-24 12:48:28.983091625 +0200
+++ linux-3.3.8-pax/drivers/input/gameport/gameport.c	2012-03-19 10:43:43.828034659 +0100
@@ -488,14 +488,14 @@ EXPORT_SYMBOL(gameport_set_phys);
  */
 static void gameport_init_port(struct gameport *gameport)
 {
-	static atomic_t gameport_no = ATOMIC_INIT(0);
+	static atomic_unchecked_t gameport_no = ATOMIC_INIT(0);
 
 	__module_get(THIS_MODULE);
 
 	mutex_init(&gameport->drv_mutex);
 	device_initialize(&gameport->dev);
 	dev_set_name(&gameport->dev, "gameport%lu",
-			(unsigned long)atomic_inc_return(&gameport_no) - 1);
+			(unsigned long)atomic_inc_return_unchecked(&gameport_no) - 1);
 	gameport->dev.bus = &gameport_bus;
 	gameport->dev.release = gameport_release_port;
 	if (gameport->parent)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/input/input.c linux-3.3.8-pax/drivers/input/input.c
--- linux-3.3.8/drivers/input/input.c	2012-03-19 10:38:59.516049841 +0100
+++ linux-3.3.8-pax/drivers/input/input.c	2012-03-19 10:43:43.832034660 +0100
@@ -1814,7 +1814,7 @@ static void input_cleanse_bitmasks(struc
  */
 int input_register_device(struct input_dev *dev)
 {
-	static atomic_t input_no = ATOMIC_INIT(0);
+	static atomic_unchecked_t input_no = ATOMIC_INIT(0);
 	struct input_handler *handler;
 	const char *path;
 	int error;
@@ -1851,7 +1851,7 @@ int input_register_device(struct input_d
 		dev->setkeycode = input_default_setkeycode;
 
 	dev_set_name(&dev->dev, "input%ld",
-		     (unsigned long) atomic_inc_return(&input_no) - 1);
+		     (unsigned long) atomic_inc_return_unchecked(&input_no) - 1);
 
 	error = device_add(&dev->dev);
 	if (error)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/input/joystick/sidewinder.c linux-3.3.8-pax/drivers/input/joystick/sidewinder.c
--- linux-3.3.8/drivers/input/joystick/sidewinder.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/input/joystick/sidewinder.c	2012-03-19 10:43:43.832034660 +0100
@@ -30,6 +30,7 @@
 #include <linux/kernel.h>
 #include <linux/module.h>
 #include <linux/slab.h>
+#include <linux/sched.h>
 #include <linux/init.h>
 #include <linux/input.h>
 #include <linux/gameport.h>
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/input/joystick/xpad.c linux-3.3.8-pax/drivers/input/joystick/xpad.c
--- linux-3.3.8/drivers/input/joystick/xpad.c	2012-03-19 10:38:59.520049840 +0100
+++ linux-3.3.8-pax/drivers/input/joystick/xpad.c	2012-03-19 10:43:43.832034660 +0100
@@ -710,7 +710,7 @@ static void xpad_led_set(struct led_clas
 
 static int xpad_led_probe(struct usb_xpad *xpad)
 {
-	static atomic_t led_seq	= ATOMIC_INIT(0);
+	static atomic_unchecked_t led_seq	= ATOMIC_INIT(0);
 	long led_no;
 	struct xpad_led *led;
 	struct led_classdev *led_cdev;
@@ -723,7 +723,7 @@ static int xpad_led_probe(struct usb_xpa
 	if (!led)
 		return -ENOMEM;
 
-	led_no = (long)atomic_inc_return(&led_seq) - 1;
+	led_no = (long)atomic_inc_return_unchecked(&led_seq) - 1;
 
 	snprintf(led->name, sizeof(led->name), "xpad%ld", led_no);
 	led->xpad = xpad;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/input/mousedev.c linux-3.3.8-pax/drivers/input/mousedev.c
--- linux-3.3.8/drivers/input/mousedev.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/input/mousedev.c	2012-03-19 10:43:43.832034661 +0100
@@ -763,7 +763,7 @@ static ssize_t mousedev_read(struct file
 
 	spin_unlock_irq(&client->packet_lock);
 
-	if (copy_to_user(buffer, data, count))
+	if (count > sizeof(data) || copy_to_user(buffer, data, count))
 		return -EFAULT;
 
 	return count;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/input/serio/serio.c linux-3.3.8-pax/drivers/input/serio/serio.c
--- linux-3.3.8/drivers/input/serio/serio.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/input/serio/serio.c	2012-03-19 10:43:43.832034661 +0100
@@ -497,7 +497,7 @@ static void serio_release_port(struct de
  */
 static void serio_init_port(struct serio *serio)
 {
-	static atomic_t serio_no = ATOMIC_INIT(0);
+	static atomic_unchecked_t serio_no = ATOMIC_INIT(0);
 
 	__module_get(THIS_MODULE);
 
@@ -508,7 +508,7 @@ static void serio_init_port(struct serio
 	mutex_init(&serio->drv_mutex);
 	device_initialize(&serio->dev);
 	dev_set_name(&serio->dev, "serio%ld",
-			(long)atomic_inc_return(&serio_no) - 1);
+			(long)atomic_inc_return_unchecked(&serio_no) - 1);
 	serio->dev.bus = &serio_bus;
 	serio->dev.release = serio_release_port;
 	serio->dev.groups = serio_device_attr_groups;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/isdn/capi/capi.c linux-3.3.8-pax/drivers/isdn/capi/capi.c
--- linux-3.3.8/drivers/isdn/capi/capi.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/isdn/capi/capi.c	2012-03-19 10:43:43.832034661 +0100
@@ -83,8 +83,8 @@ struct capiminor {
 
 	struct capi20_appl	*ap;
 	u32			ncci;
-	atomic_t		datahandle;
-	atomic_t		msgid;
+	atomic_unchecked_t	datahandle;
+	atomic_unchecked_t	msgid;
 
 	struct tty_port port;
 	int                ttyinstop;
@@ -397,7 +397,7 @@ gen_data_b3_resp_for(struct capiminor *m
 		capimsg_setu16(s, 2, mp->ap->applid);
 		capimsg_setu8 (s, 4, CAPI_DATA_B3);
 		capimsg_setu8 (s, 5, CAPI_RESP);
-		capimsg_setu16(s, 6, atomic_inc_return(&mp->msgid));
+		capimsg_setu16(s, 6, atomic_inc_return_unchecked(&mp->msgid));
 		capimsg_setu32(s, 8, mp->ncci);
 		capimsg_setu16(s, 12, datahandle);
 	}
@@ -518,14 +518,14 @@ static void handle_minor_send(struct cap
 		mp->outbytes -= len;
 		spin_unlock_bh(&mp->outlock);
 
-		datahandle = atomic_inc_return(&mp->datahandle);
+		datahandle = atomic_inc_return_unchecked(&mp->datahandle);
 		skb_push(skb, CAPI_DATA_B3_REQ_LEN);
 		memset(skb->data, 0, CAPI_DATA_B3_REQ_LEN);
 		capimsg_setu16(skb->data, 0, CAPI_DATA_B3_REQ_LEN);
 		capimsg_setu16(skb->data, 2, mp->ap->applid);
 		capimsg_setu8 (skb->data, 4, CAPI_DATA_B3);
 		capimsg_setu8 (skb->data, 5, CAPI_REQ);
-		capimsg_setu16(skb->data, 6, atomic_inc_return(&mp->msgid));
+		capimsg_setu16(skb->data, 6, atomic_inc_return_unchecked(&mp->msgid));
 		capimsg_setu32(skb->data, 8, mp->ncci);	/* NCCI */
 		capimsg_setu32(skb->data, 12, (u32)(long)skb->data);/* Data32 */
 		capimsg_setu16(skb->data, 16, len);	/* Data length */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/isdn/gigaset/common.c linux-3.3.8-pax/drivers/isdn/gigaset/common.c
--- linux-3.3.8/drivers/isdn/gigaset/common.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/isdn/gigaset/common.c	2012-03-19 10:43:43.832034661 +0100
@@ -723,7 +723,7 @@ struct cardstate *gigaset_initcs(struct
 	cs->commands_pending = 0;
 	cs->cur_at_seq = 0;
 	cs->gotfwver = -1;
-	cs->open_count = 0;
+	local_set(&cs->open_count, 0);
 	cs->dev = NULL;
 	cs->tty = NULL;
 	cs->tty_dev = NULL;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/isdn/gigaset/gigaset.h linux-3.3.8-pax/drivers/isdn/gigaset/gigaset.h
--- linux-3.3.8/drivers/isdn/gigaset/gigaset.h	2011-10-24 12:48:29.191091618 +0200
+++ linux-3.3.8-pax/drivers/isdn/gigaset/gigaset.h	2012-05-08 00:11:14.290890750 +0200
@@ -35,6 +35,7 @@
 #include <linux/tty_driver.h>
 #include <linux/list.h>
 #include <linux/atomic.h>
+#include <asm/local.h>
 
 #define GIG_VERSION {0, 5, 0, 0}
 #define GIG_COMPAT  {0, 4, 0, 0}
@@ -433,7 +434,7 @@ struct cardstate {
 	spinlock_t cmdlock;
 	unsigned curlen, cmdbytes;
 
-	unsigned open_count;
+	local_t open_count;
 	struct tty_struct *tty;
 	struct tasklet_struct if_wake_tasklet;
 	unsigned control_state;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/isdn/gigaset/interface.c linux-3.3.8-pax/drivers/isdn/gigaset/interface.c
--- linux-3.3.8/drivers/isdn/gigaset/interface.c	2012-01-08 19:48:00.279472410 +0100
+++ linux-3.3.8-pax/drivers/isdn/gigaset/interface.c	2012-03-19 10:43:43.836034661 +0100
@@ -163,9 +163,7 @@ static int if_open(struct tty_struct *tt
 	}
 	tty->driver_data = cs;
 
-	++cs->open_count;
-
-	if (cs->open_count == 1) {
+	if (local_inc_return(&cs->open_count) == 1) {
 		spin_lock_irqsave(&cs->lock, flags);
 		cs->tty = tty;
 		spin_unlock_irqrestore(&cs->lock, flags);
@@ -193,10 +191,10 @@ static void if_close(struct tty_struct *
 
 	if (!cs->connected)
 		gig_dbg(DEBUG_IF, "not connected");	/* nothing to do */
-	else if (!cs->open_count)
+	else if (!local_read(&cs->open_count))
 		dev_warn(cs->dev, "%s: device not opened\n", __func__);
 	else {
-		if (!--cs->open_count) {
+		if (!local_dec_return(&cs->open_count)) {
 			spin_lock_irqsave(&cs->lock, flags);
 			cs->tty = NULL;
 			spin_unlock_irqrestore(&cs->lock, flags);
@@ -231,7 +229,7 @@ static int if_ioctl(struct tty_struct *t
 	if (!cs->connected) {
 		gig_dbg(DEBUG_IF, "not connected");
 		retval = -ENODEV;
-	} else if (!cs->open_count)
+	} else if (!local_read(&cs->open_count))
 		dev_warn(cs->dev, "%s: device not opened\n", __func__);
 	else {
 		retval = 0;
@@ -361,7 +359,7 @@ static int if_write(struct tty_struct *t
 		retval = -ENODEV;
 		goto done;
 	}
-	if (!cs->open_count) {
+	if (!local_read(&cs->open_count)) {
 		dev_warn(cs->dev, "%s: device not opened\n", __func__);
 		retval = -ENODEV;
 		goto done;
@@ -414,7 +412,7 @@ static int if_write_room(struct tty_stru
 	if (!cs->connected) {
 		gig_dbg(DEBUG_IF, "not connected");
 		retval = -ENODEV;
-	} else if (!cs->open_count)
+	} else if (!local_read(&cs->open_count))
 		dev_warn(cs->dev, "%s: device not opened\n", __func__);
 	else if (cs->mstate != MS_LOCKED) {
 		dev_warn(cs->dev, "can't write to unlocked device\n");
@@ -444,7 +442,7 @@ static int if_chars_in_buffer(struct tty
 
 	if (!cs->connected)
 		gig_dbg(DEBUG_IF, "not connected");
-	else if (!cs->open_count)
+	else if (!local_read(&cs->open_count))
 		dev_warn(cs->dev, "%s: device not opened\n", __func__);
 	else if (cs->mstate != MS_LOCKED)
 		dev_warn(cs->dev, "can't write to unlocked device\n");
@@ -472,7 +470,7 @@ static void if_throttle(struct tty_struc
 
 	if (!cs->connected)
 		gig_dbg(DEBUG_IF, "not connected");	/* nothing to do */
-	else if (!cs->open_count)
+	else if (!local_read(&cs->open_count))
 		dev_warn(cs->dev, "%s: device not opened\n", __func__);
 	else
 		gig_dbg(DEBUG_IF, "%s: not implemented\n", __func__);
@@ -496,7 +494,7 @@ static void if_unthrottle(struct tty_str
 
 	if (!cs->connected)
 		gig_dbg(DEBUG_IF, "not connected");	/* nothing to do */
-	else if (!cs->open_count)
+	else if (!local_read(&cs->open_count))
 		dev_warn(cs->dev, "%s: device not opened\n", __func__);
 	else
 		gig_dbg(DEBUG_IF, "%s: not implemented\n", __func__);
@@ -527,7 +525,7 @@ static void if_set_termios(struct tty_st
 		goto out;
 	}
 
-	if (!cs->open_count) {
+	if (!local_read(&cs->open_count)) {
 		dev_warn(cs->dev, "%s: device not opened\n", __func__);
 		goto out;
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/isdn/hardware/avm/b1.c linux-3.3.8-pax/drivers/isdn/hardware/avm/b1.c
--- linux-3.3.8/drivers/isdn/hardware/avm/b1.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/isdn/hardware/avm/b1.c	2012-03-19 10:43:43.836034661 +0100
@@ -176,7 +176,7 @@ int b1_load_t4file(avmcard *card, capilo
 	}
 	if (left) {
 		if (t4file->user) {
-			if (copy_from_user(buf, dp, left))
+			if (left > sizeof buf || copy_from_user(buf, dp, left))
 				return -EFAULT;
 		} else {
 			memcpy(buf, dp, left);
@@ -224,7 +224,7 @@ int b1_load_config(avmcard *card, capilo
 	}
 	if (left) {
 		if (config->user) {
-			if (copy_from_user(buf, dp, left))
+			if (left > sizeof buf || copy_from_user(buf, dp, left))
 				return -EFAULT;
 		} else {
 			memcpy(buf, dp, left);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/isdn/hardware/eicon/divasync.h linux-3.3.8-pax/drivers/isdn/hardware/eicon/divasync.h
--- linux-3.3.8/drivers/isdn/hardware/eicon/divasync.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/isdn/hardware/eicon/divasync.h	2012-03-19 10:43:43.840034660 +0100
@@ -146,7 +146,7 @@ typedef struct _diva_didd_add_adapter {
 } diva_didd_add_adapter_t;
 typedef struct _diva_didd_remove_adapter {
  IDI_CALL p_request;
-} diva_didd_remove_adapter_t;
+} __no_const diva_didd_remove_adapter_t;
 typedef struct _diva_didd_read_adapter_array {
  void   * buffer;
  dword length;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/isdn/hardware/eicon/xdi_adapter.h linux-3.3.8-pax/drivers/isdn/hardware/eicon/xdi_adapter.h
--- linux-3.3.8/drivers/isdn/hardware/eicon/xdi_adapter.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/isdn/hardware/eicon/xdi_adapter.h	2012-03-19 10:43:43.840034660 +0100
@@ -44,7 +44,7 @@ typedef struct _xdi_mbox_t {
 typedef struct _diva_os_idi_adapter_interface {
 	diva_init_card_proc_t cleanup_adapter_proc;
 	diva_cmd_card_proc_t cmd_proc;
-} diva_os_idi_adapter_interface_t;
+} __no_const diva_os_idi_adapter_interface_t;
 
 typedef struct _diva_os_xdi_adapter {
 	struct list_head link;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/isdn/icn/icn.c linux-3.3.8-pax/drivers/isdn/icn/icn.c
--- linux-3.3.8/drivers/isdn/icn/icn.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/isdn/icn/icn.c	2012-03-19 10:43:43.840034660 +0100
@@ -1045,7 +1045,7 @@ icn_writecmd(const u_char * buf, int len
 		if (count > len)
 			count = len;
 		if (user) {
-			if (copy_from_user(msg, buf, count))
+			if (count > sizeof msg || copy_from_user(msg, buf, count))
 				return -EFAULT;
 		} else
 			memcpy(msg, buf, count);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/lguest/core.c linux-3.3.8-pax/drivers/lguest/core.c
--- linux-3.3.8/drivers/lguest/core.c	2012-01-08 19:48:00.403472404 +0100
+++ linux-3.3.8-pax/drivers/lguest/core.c	2012-03-19 10:43:43.840034660 +0100
@@ -92,9 +92,17 @@ static __init int map_switcher(void)
 	 * it's worked so far.  The end address needs +1 because __get_vm_area
 	 * allocates an extra guard page, so we need space for that.
 	 */
+
+#if defined(CONFIG_MODULES) && defined(CONFIG_X86_32) && defined(CONFIG_PAX_KERNEXEC)
+	switcher_vma = __get_vm_area(TOTAL_SWITCHER_PAGES * PAGE_SIZE,
+				     VM_ALLOC | VM_KERNEXEC, SWITCHER_ADDR, SWITCHER_ADDR
+				     + (TOTAL_SWITCHER_PAGES+1) * PAGE_SIZE);
+#else
 	switcher_vma = __get_vm_area(TOTAL_SWITCHER_PAGES * PAGE_SIZE,
 				     VM_ALLOC, SWITCHER_ADDR, SWITCHER_ADDR
 				     + (TOTAL_SWITCHER_PAGES+1) * PAGE_SIZE);
+#endif
+
 	if (!switcher_vma) {
 		err = -ENOMEM;
 		printk("lguest: could not map switcher pages high\n");
@@ -119,7 +127,7 @@ static __init int map_switcher(void)
 	 * Now the Switcher is mapped at the right address, we can't fail!
 	 * Copy in the compiled-in Switcher code (from x86/switcher_32.S).
 	 */
-	memcpy(switcher_vma->addr, start_switcher_text,
+	memcpy(switcher_vma->addr, ktla_ktva(start_switcher_text),
 	       end_switcher_text - start_switcher_text);
 
 	printk(KERN_INFO "lguest: mapped switcher at %p\n",
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/lguest/x86/core.c linux-3.3.8-pax/drivers/lguest/x86/core.c
--- linux-3.3.8/drivers/lguest/x86/core.c	2012-03-19 10:39:00.124049786 +0100
+++ linux-3.3.8-pax/drivers/lguest/x86/core.c	2012-03-19 10:43:43.844034659 +0100
@@ -59,7 +59,7 @@ static struct {
 /* Offset from where switcher.S was compiled to where we've copied it */
 static unsigned long switcher_offset(void)
 {
-	return SWITCHER_ADDR - (unsigned long)start_switcher_text;
+	return SWITCHER_ADDR - (unsigned long)ktla_ktva(start_switcher_text);
 }
 
 /* This cpu's struct lguest_pages. */
@@ -100,7 +100,13 @@ static void copy_in_guest_info(struct lg
 	 * These copies are pretty cheap, so we do them unconditionally: */
 	/* Save the current Host top-level page directory.
 	 */
+
+#ifdef CONFIG_PAX_PER_CPU_PGD
+	pages->state.host_cr3 = read_cr3();
+#else
 	pages->state.host_cr3 = __pa(current->mm->pgd);
+#endif
+
 	/*
 	 * Set up the Guest's page tables to see this CPU's pages (and no
 	 * other CPU's pages).
@@ -472,7 +478,7 @@ void __init lguest_arch_host_init(void)
 	 * compiled-in switcher code and the high-mapped copy we just made.
 	 */
 	for (i = 0; i < IDT_ENTRIES; i++)
-		default_idt_entries[i] += switcher_offset();
+		default_idt_entries[i] = ktla_ktva(default_idt_entries[i]) + switcher_offset();
 
 	/*
 	 * Set up the Switcher's per-cpu areas.
@@ -555,7 +561,7 @@ void __init lguest_arch_host_init(void)
 	 * it will be undisturbed when we switch.  To change %cs and jump we
 	 * need this structure to feed to Intel's "lcall" instruction.
 	 */
-	lguest_entry.offset = (long)switch_to_guest + switcher_offset();
+	lguest_entry.offset = (long)ktla_ktva(switch_to_guest) + switcher_offset();
 	lguest_entry.segment = LGUEST_CS;
 
 	/*
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/lguest/x86/switcher_32.S linux-3.3.8-pax/drivers/lguest/x86/switcher_32.S
--- linux-3.3.8/drivers/lguest/x86/switcher_32.S	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/lguest/x86/switcher_32.S	2012-03-19 10:43:43.844034659 +0100
@@ -87,6 +87,7 @@
 #include <asm/page.h>
 #include <asm/segment.h>
 #include <asm/lguest.h>
+#include <asm/processor-flags.h>
 
 // We mark the start of the code to copy
 // It's placed in .text tho it's never run here
@@ -149,6 +150,13 @@ ENTRY(switch_to_guest)
 	// Changes type when we load it: damn Intel!
 	// For after we switch over our page tables
 	// That entry will be read-only: we'd crash.
+
+#ifdef CONFIG_PAX_KERNEXEC
+	mov	%cr0, %edx
+	xor	$X86_CR0_WP, %edx
+	mov	%edx, %cr0
+#endif
+
 	movl	$(GDT_ENTRY_TSS*8), %edx
 	ltr	%dx
 
@@ -157,9 +165,15 @@ ENTRY(switch_to_guest)
 	// Let's clear it again for our return.
 	// The GDT descriptor of the Host
 	// Points to the table after two "size" bytes
-	movl	(LGUEST_PAGES_host_gdt_desc+2)(%eax), %edx
+	movl	(LGUEST_PAGES_host_gdt_desc+2)(%eax), %eax
 	// Clear "used" from type field (byte 5, bit 2)
-	andb	$0xFD, (GDT_ENTRY_TSS*8 + 5)(%edx)
+	andb	$0xFD, (GDT_ENTRY_TSS*8 + 5)(%eax)
+
+#ifdef CONFIG_PAX_KERNEXEC
+	mov	%cr0, %eax
+	xor	$X86_CR0_WP, %eax
+	mov	%eax, %cr0
+#endif
 
 	// Once our page table's switched, the Guest is live!
 	// The Host fades as we run this final step.
@@ -295,13 +309,12 @@ deliver_to_host:
 	// I consulted gcc, and it gave
 	// These instructions, which I gladly credit:
 	leal	(%edx,%ebx,8), %eax
-	movzwl	(%eax),%edx
-	movl	4(%eax), %eax
-	xorw	%ax, %ax
-	orl	%eax, %edx
+	movl	4(%eax), %edx
+	movw	(%eax), %dx
 	// Now the address of the handler's in %edx
 	// We call it now: its "iret" drops us home.
-	jmp	*%edx
+	ljmp	$__KERNEL_CS, $1f
+1:	jmp	*%edx
 
 // Every interrupt can come to us here
 // But we must truly tell each apart.
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/macintosh/macio_asic.c linux-3.3.8-pax/drivers/macintosh/macio_asic.c
--- linux-3.3.8/drivers/macintosh/macio_asic.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/macintosh/macio_asic.c	2012-03-19 10:43:43.844034659 +0100
@@ -748,7 +748,7 @@ static void __devexit macio_pci_remove(s
  * MacIO is matched against any Apple ID, it's probe() function
  * will then decide wether it applies or not
  */
-static const struct pci_device_id __devinitdata pci_ids [] = { {
+static const struct pci_device_id __devinitconst pci_ids [] = { {
 	.vendor		= PCI_VENDOR_ID_APPLE,
 	.device		= PCI_ANY_ID,
 	.subvendor	= PCI_ANY_ID,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/md/dm.c linux-3.3.8-pax/drivers/md/dm.c
--- linux-3.3.8/drivers/md/dm.c	2012-03-19 10:39:00.144049813 +0100
+++ linux-3.3.8-pax/drivers/md/dm.c	2012-03-19 10:43:43.848034658 +0100
@@ -176,9 +176,9 @@ struct mapped_device {
 	/*
 	 * Event handling.
 	 */
-	atomic_t event_nr;
+	atomic_unchecked_t event_nr;
 	wait_queue_head_t eventq;
-	atomic_t uevent_seq;
+	atomic_unchecked_t uevent_seq;
 	struct list_head uevent_list;
 	spinlock_t uevent_lock; /* Protect access to uevent_list */
 
@@ -1844,8 +1844,8 @@ static struct mapped_device *alloc_dev(i
 	rwlock_init(&md->map_lock);
 	atomic_set(&md->holders, 1);
 	atomic_set(&md->open_count, 0);
-	atomic_set(&md->event_nr, 0);
-	atomic_set(&md->uevent_seq, 0);
+	atomic_set_unchecked(&md->event_nr, 0);
+	atomic_set_unchecked(&md->uevent_seq, 0);
 	INIT_LIST_HEAD(&md->uevent_list);
 	spin_lock_init(&md->uevent_lock);
 
@@ -1979,7 +1979,7 @@ static void event_callback(void *context
 
 	dm_send_uevents(&uevents, &disk_to_dev(md->disk)->kobj);
 
-	atomic_inc(&md->event_nr);
+	atomic_inc_unchecked(&md->event_nr);
 	wake_up(&md->eventq);
 }
 
@@ -2621,18 +2621,18 @@ int dm_kobject_uevent(struct mapped_devi
 
 uint32_t dm_next_uevent_seq(struct mapped_device *md)
 {
-	return atomic_add_return(1, &md->uevent_seq);
+	return atomic_add_return_unchecked(1, &md->uevent_seq);
 }
 
 uint32_t dm_get_event_nr(struct mapped_device *md)
 {
-	return atomic_read(&md->event_nr);
+	return atomic_read_unchecked(&md->event_nr);
 }
 
 int dm_wait_event(struct mapped_device *md, int event_nr)
 {
 	return wait_event_interruptible(md->eventq,
-			(event_nr != atomic_read(&md->event_nr)));
+			(event_nr != atomic_read_unchecked(&md->event_nr)));
 }
 
 void dm_uevent_add(struct mapped_device *md, struct list_head *elist)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/md/dm-ioctl.c linux-3.3.8-pax/drivers/md/dm-ioctl.c
--- linux-3.3.8/drivers/md/dm-ioctl.c	2012-03-19 10:39:00.136049824 +0100
+++ linux-3.3.8-pax/drivers/md/dm-ioctl.c	2012-03-19 10:43:43.848034658 +0100
@@ -1589,7 +1589,7 @@ static int validate_params(uint cmd, str
 	    cmd == DM_LIST_VERSIONS_CMD)
 		return 0;
 
-	if ((cmd == DM_DEV_CREATE_CMD)) {
+	if (cmd == DM_DEV_CREATE_CMD) {
 		if (!*param->name) {
 			DMWARN("name not supplied when creating device");
 			return -EINVAL;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/md/dm-raid1.c linux-3.3.8-pax/drivers/md/dm-raid1.c
--- linux-3.3.8/drivers/md/dm-raid1.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/md/dm-raid1.c	2012-05-16 21:21:02.133543437 +0200
@@ -40,7 +40,7 @@ enum dm_raid1_error {
 
 struct mirror {
 	struct mirror_set *ms;
-	atomic_t error_count;
+	atomic_unchecked_t error_count;
 	unsigned long error_type;
 	struct dm_dev *dev;
 	sector_t offset;
@@ -185,7 +185,7 @@ static struct mirror *get_valid_mirror(s
 	struct mirror *m;
 
 	for (m = ms->mirror; m < ms->mirror + ms->nr_mirrors; m++)
-		if (!atomic_read(&m->error_count))
+		if (!atomic_read_unchecked(&m->error_count))
 			return m;
 
 	return NULL;
@@ -217,7 +217,7 @@ static void fail_mirror(struct mirror *m
 	 * simple way to tell if a device has encountered
 	 * errors.
 	 */
-	atomic_inc(&m->error_count);
+	atomic_inc_unchecked(&m->error_count);
 
 	if (test_and_set_bit(error_type, &m->error_type))
 		return;
@@ -408,7 +408,7 @@ static struct mirror *choose_mirror(stru
 	struct mirror *m = get_default_mirror(ms);
 
 	do {
-		if (likely(!atomic_read(&m->error_count)))
+		if (likely(!atomic_read_unchecked(&m->error_count)))
 			return m;
 
 		if (m-- == ms->mirror)
@@ -422,7 +422,7 @@ static int default_ok(struct mirror *m)
 {
 	struct mirror *default_mirror = get_default_mirror(m->ms);
 
-	return !atomic_read(&default_mirror->error_count);
+	return !atomic_read_unchecked(&default_mirror->error_count);
 }
 
 static int mirror_available(struct mirror_set *ms, struct bio *bio)
@@ -559,7 +559,7 @@ static void do_reads(struct mirror_set *
 		 */
 		if (likely(region_in_sync(ms, region, 1)))
 			m = choose_mirror(ms, bio->bi_sector);
-		else if (m && atomic_read(&m->error_count))
+		else if (m && atomic_read_unchecked(&m->error_count))
 			m = NULL;
 
 		if (likely(m))
@@ -937,7 +937,7 @@ static int get_mirror(struct mirror_set
 	}
 
 	ms->mirror[mirror].ms = ms;
-	atomic_set(&(ms->mirror[mirror].error_count), 0);
+	atomic_set_unchecked(&(ms->mirror[mirror].error_count), 0);
 	ms->mirror[mirror].error_type = 0;
 	ms->mirror[mirror].offset = offset;
 
@@ -1347,7 +1347,7 @@ static void mirror_resume(struct dm_targ
  */
 static char device_status_char(struct mirror *m)
 {
-	if (!atomic_read(&(m->error_count)))
+	if (!atomic_read_unchecked(&(m->error_count)))
 		return 'A';
 
 	return (test_bit(DM_RAID1_FLUSH_ERROR, &(m->error_type))) ? 'F' :
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/md/dm-stripe.c linux-3.3.8-pax/drivers/md/dm-stripe.c
--- linux-3.3.8/drivers/md/dm-stripe.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/md/dm-stripe.c	2012-05-16 21:21:02.133543437 +0200
@@ -20,7 +20,7 @@ struct stripe {
 	struct dm_dev *dev;
 	sector_t physical_start;
 
-	atomic_t error_count;
+	atomic_unchecked_t error_count;
 };
 
 struct stripe_c {
@@ -192,7 +192,7 @@ static int stripe_ctr(struct dm_target *
 			kfree(sc);
 			return r;
 		}
-		atomic_set(&(sc->stripe[i].error_count), 0);
+		atomic_set_unchecked(&(sc->stripe[i].error_count), 0);
 	}
 
 	ti->private = sc;
@@ -314,7 +314,7 @@ static int stripe_status(struct dm_targe
 		DMEMIT("%d ", sc->stripes);
 		for (i = 0; i < sc->stripes; i++)  {
 			DMEMIT("%s ", sc->stripe[i].dev->name);
-			buffer[i] = atomic_read(&(sc->stripe[i].error_count)) ?
+			buffer[i] = atomic_read_unchecked(&(sc->stripe[i].error_count)) ?
 				'D' : 'A';
 		}
 		buffer[i] = '\0';
@@ -361,8 +361,8 @@ static int stripe_end_io(struct dm_targe
 	 */
 	for (i = 0; i < sc->stripes; i++)
 		if (!strcmp(sc->stripe[i].dev->name, major_minor)) {
-			atomic_inc(&(sc->stripe[i].error_count));
-			if (atomic_read(&(sc->stripe[i].error_count)) <
+			atomic_inc_unchecked(&(sc->stripe[i].error_count));
+			if (atomic_read_unchecked(&(sc->stripe[i].error_count)) <
 			    DM_IO_ERROR_THRESHOLD)
 				schedule_work(&sc->trigger_event);
 		}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/md/dm-table.c linux-3.3.8-pax/drivers/md/dm-table.c
--- linux-3.3.8/drivers/md/dm-table.c	2012-03-19 10:39:00.140049820 +0100
+++ linux-3.3.8-pax/drivers/md/dm-table.c	2012-03-19 10:43:43.852034658 +0100
@@ -391,7 +391,7 @@ static int device_area_is_invalid(struct
 	if (!dev_size)
 		return 0;
 
-	if ((start >= dev_size) || (start + len > dev_size)) {
+	if ((start >= dev_size) || (len > dev_size - start)) {
 		DMWARN("%s: %s too small for target: "
 		       "start=%llu, len=%llu, dev_size=%llu",
 		       dm_device_name(ti->table->md), bdevname(bdev, b),
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/md/dm-thin-metadata.c linux-3.3.8-pax/drivers/md/dm-thin-metadata.c
--- linux-3.3.8/drivers/md/dm-thin-metadata.c	2012-03-19 10:39:00.144049813 +0100
+++ linux-3.3.8-pax/drivers/md/dm-thin-metadata.c	2012-03-19 10:43:43.852034658 +0100
@@ -432,7 +432,7 @@ static int init_pmd(struct dm_pool_metad
 
 	pmd->info.tm = tm;
 	pmd->info.levels = 2;
-	pmd->info.value_type.context = pmd->data_sm;
+	pmd->info.value_type.context = (dm_space_map_no_const *)pmd->data_sm;
 	pmd->info.value_type.size = sizeof(__le64);
 	pmd->info.value_type.inc = data_block_inc;
 	pmd->info.value_type.dec = data_block_dec;
@@ -451,7 +451,7 @@ static int init_pmd(struct dm_pool_metad
 
 	pmd->bl_info.tm = tm;
 	pmd->bl_info.levels = 1;
-	pmd->bl_info.value_type.context = pmd->data_sm;
+	pmd->bl_info.value_type.context = (dm_space_map_no_const *)pmd->data_sm;
 	pmd->bl_info.value_type.size = sizeof(__le64);
 	pmd->bl_info.value_type.inc = data_block_inc;
 	pmd->bl_info.value_type.dec = data_block_dec;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/md/md.c linux-3.3.8-pax/drivers/md/md.c
--- linux-3.3.8/drivers/md/md.c	2012-06-11 19:36:39.032445744 +0200
+++ linux-3.3.8-pax/drivers/md/md.c	2012-06-11 19:36:45.524446096 +0200
@@ -277,10 +277,10 @@ EXPORT_SYMBOL_GPL(md_trim_bio);
  *  start build, activate spare
  */
 static DECLARE_WAIT_QUEUE_HEAD(md_event_waiters);
-static atomic_t md_event_count;
+static atomic_unchecked_t md_event_count;
 void md_new_event(struct mddev *mddev)
 {
-	atomic_inc(&md_event_count);
+	atomic_inc_unchecked(&md_event_count);
 	wake_up(&md_event_waiters);
 }
 EXPORT_SYMBOL_GPL(md_new_event);
@@ -290,7 +290,7 @@ EXPORT_SYMBOL_GPL(md_new_event);
  */
 static void md_new_event_inintr(struct mddev *mddev)
 {
-	atomic_inc(&md_event_count);
+	atomic_inc_unchecked(&md_event_count);
 	wake_up(&md_event_waiters);
 }
 
@@ -1526,7 +1526,7 @@ static int super_1_load(struct md_rdev *
 
 	rdev->preferred_minor = 0xffff;
 	rdev->data_offset = le64_to_cpu(sb->data_offset);
-	atomic_set(&rdev->corrected_errors, le32_to_cpu(sb->cnt_corrected_read));
+	atomic_set_unchecked(&rdev->corrected_errors, le32_to_cpu(sb->cnt_corrected_read));
 
 	rdev->sb_size = le32_to_cpu(sb->max_dev) * 2 + 256;
 	bmask = queue_logical_block_size(rdev->bdev->bd_disk->queue)-1;
@@ -1745,7 +1745,7 @@ static void super_1_sync(struct mddev *m
 	else
 		sb->resync_offset = cpu_to_le64(0);
 
-	sb->cnt_corrected_read = cpu_to_le32(atomic_read(&rdev->corrected_errors));
+	sb->cnt_corrected_read = cpu_to_le32(atomic_read_unchecked(&rdev->corrected_errors));
 
 	sb->raid_disks = cpu_to_le32(mddev->raid_disks);
 	sb->size = cpu_to_le64(mddev->dev_sectors);
@@ -2691,7 +2691,7 @@ __ATTR(state, S_IRUGO|S_IWUSR, state_sho
 static ssize_t
 errors_show(struct md_rdev *rdev, char *page)
 {
-	return sprintf(page, "%d\n", atomic_read(&rdev->corrected_errors));
+	return sprintf(page, "%d\n", atomic_read_unchecked(&rdev->corrected_errors));
 }
 
 static ssize_t
@@ -2700,7 +2700,7 @@ errors_store(struct md_rdev *rdev, const
 	char *e;
 	unsigned long n = simple_strtoul(buf, &e, 10);
 	if (*buf && (*e == 0 || *e == '\n')) {
-		atomic_set(&rdev->corrected_errors, n);
+		atomic_set_unchecked(&rdev->corrected_errors, n);
 		return len;
 	}
 	return -EINVAL;
@@ -3086,8 +3086,8 @@ int md_rdev_init(struct md_rdev *rdev)
 	rdev->sb_loaded = 0;
 	rdev->bb_page = NULL;
 	atomic_set(&rdev->nr_pending, 0);
-	atomic_set(&rdev->read_errors, 0);
-	atomic_set(&rdev->corrected_errors, 0);
+	atomic_set_unchecked(&rdev->read_errors, 0);
+	atomic_set_unchecked(&rdev->corrected_errors, 0);
 
 	INIT_LIST_HEAD(&rdev->same_set);
 	init_waitqueue_head(&rdev->blocked_wait);
@@ -6738,7 +6738,7 @@ static int md_seq_show(struct seq_file *
 
 		spin_unlock(&pers_lock);
 		seq_printf(seq, "\n");
-		seq->poll_event = atomic_read(&md_event_count);
+		seq->poll_event = atomic_read_unchecked(&md_event_count);
 		return 0;
 	}
 	if (v == (void*)2) {
@@ -6830,7 +6830,7 @@ static int md_seq_show(struct seq_file *
 				chunk_kb ? "KB" : "B");
 			if (bitmap->file) {
 				seq_printf(seq, ", file: ");
-				seq_path(seq, &bitmap->file->f_path, " \t\n");
+				seq_path(seq, &bitmap->file->f_path, " \t\n\\");
 			}
 
 			seq_printf(seq, "\n");
@@ -6861,7 +6861,7 @@ static int md_seq_open(struct inode *ino
 		return error;
 
 	seq = file->private_data;
-	seq->poll_event = atomic_read(&md_event_count);
+	seq->poll_event = atomic_read_unchecked(&md_event_count);
 	return error;
 }
 
@@ -6875,7 +6875,7 @@ static unsigned int mdstat_poll(struct f
 	/* always allow read */
 	mask = POLLIN | POLLRDNORM;
 
-	if (seq->poll_event != atomic_read(&md_event_count))
+	if (seq->poll_event != atomic_read_unchecked(&md_event_count))
 		mask |= POLLERR | POLLPRI;
 	return mask;
 }
@@ -6919,7 +6919,7 @@ static int is_mddev_idle(struct mddev *m
 		struct gendisk *disk = rdev->bdev->bd_contains->bd_disk;
 		curr_events = (int)part_stat_read(&disk->part0, sectors[0]) +
 			      (int)part_stat_read(&disk->part0, sectors[1]) -
-			      atomic_read(&disk->sync_io);
+			      atomic_read_unchecked(&disk->sync_io);
 		/* sync IO will cause sync_io to increase before the disk_stats
 		 * as sync_io is counted when a request starts, and
 		 * disk_stats is counted when it completes.
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/md/md.h linux-3.3.8-pax/drivers/md/md.h
--- linux-3.3.8/drivers/md/md.h	2012-03-19 10:39:00.152049799 +0100
+++ linux-3.3.8-pax/drivers/md/md.h	2012-03-19 10:43:43.860034659 +0100
@@ -93,13 +93,13 @@ struct md_rdev {
 					 * only maintained for arrays that
 					 * support hot removal
 					 */
-	atomic_t	read_errors;	/* number of consecutive read errors that
+	atomic_unchecked_t	read_errors;	/* number of consecutive read errors that
 					 * we have tried to ignore.
 					 */
 	struct timespec last_read_error;	/* monotonic time since our
 						 * last read error
 						 */
-	atomic_t	corrected_errors; /* number of corrected read errors,
+	atomic_unchecked_t	corrected_errors; /* number of corrected read errors,
 					   * for reporting to userspace and storing
 					   * in superblock.
 					   */
@@ -421,7 +421,7 @@ static inline void rdev_dec_pending(stru
 
 static inline void md_sync_acct(struct block_device *bdev, unsigned long nr_sectors)
 {
-        atomic_add(nr_sectors, &bdev->bd_contains->bd_disk->sync_io);
+	atomic_add_unchecked(nr_sectors, &bdev->bd_contains->bd_disk->sync_io);
 }
 
 struct md_personality
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/md/persistent-data/dm-space-map-checker.c linux-3.3.8-pax/drivers/md/persistent-data/dm-space-map-checker.c
--- linux-3.3.8/drivers/md/persistent-data/dm-space-map-checker.c	2012-01-08 19:48:00.675472389 +0100
+++ linux-3.3.8-pax/drivers/md/persistent-data/dm-space-map-checker.c	2012-03-19 10:43:43.860034659 +0100
@@ -159,7 +159,7 @@ static void ca_destroy(struct count_arra
 /*----------------------------------------------------------------*/
 
 struct sm_checker {
-	struct dm_space_map sm;
+	dm_space_map_no_const sm;
 
 	struct count_array old_counts;
 	struct count_array counts;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/md/persistent-data/dm-space-map-disk.c linux-3.3.8-pax/drivers/md/persistent-data/dm-space-map-disk.c
--- linux-3.3.8/drivers/md/persistent-data/dm-space-map-disk.c	2012-01-08 19:48:00.683472389 +0100
+++ linux-3.3.8-pax/drivers/md/persistent-data/dm-space-map-disk.c	2012-03-19 10:43:43.860034659 +0100
@@ -23,7 +23,7 @@
  * Space map interface.
  */
 struct sm_disk {
-	struct dm_space_map sm;
+	dm_space_map_no_const sm;
 
 	struct ll_disk ll;
 	struct ll_disk old_ll;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/md/persistent-data/dm-space-map.h linux-3.3.8-pax/drivers/md/persistent-data/dm-space-map.h
--- linux-3.3.8/drivers/md/persistent-data/dm-space-map.h	2012-01-08 19:48:00.687472389 +0100
+++ linux-3.3.8-pax/drivers/md/persistent-data/dm-space-map.h	2012-03-19 10:43:43.860034659 +0100
@@ -60,6 +60,7 @@ struct dm_space_map {
 	int (*root_size)(struct dm_space_map *sm, size_t *result);
 	int (*copy_root)(struct dm_space_map *sm, void *copy_to_here_le, size_t len);
 };
+typedef struct dm_space_map __no_const dm_space_map_no_const;
 
 /*----------------------------------------------------------------*/
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/md/persistent-data/dm-space-map-metadata.c linux-3.3.8-pax/drivers/md/persistent-data/dm-space-map-metadata.c
--- linux-3.3.8/drivers/md/persistent-data/dm-space-map-metadata.c	2012-01-08 19:48:00.687472389 +0100
+++ linux-3.3.8-pax/drivers/md/persistent-data/dm-space-map-metadata.c	2012-03-19 10:43:43.860034659 +0100
@@ -43,7 +43,7 @@ struct block_op {
 };
 
 struct sm_metadata {
-	struct dm_space_map sm;
+	dm_space_map_no_const sm;
 
 	struct ll_disk ll;
 	struct ll_disk old_ll;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/md/raid10.c linux-3.3.8-pax/drivers/md/raid10.c
--- linux-3.3.8/drivers/md/raid10.c	2012-04-23 14:06:58.755285656 +0200
+++ linux-3.3.8-pax/drivers/md/raid10.c	2012-04-23 14:07:11.623285181 +0200
@@ -1636,7 +1636,7 @@ static void end_sync_read(struct bio *bi
 		/* The write handler will notice the lack of
 		 * R10BIO_Uptodate and record any errors etc
 		 */
-		atomic_add(r10_bio->sectors,
+		atomic_add_unchecked(r10_bio->sectors,
 			   &conf->mirrors[d].rdev->corrected_errors);
 
 	/* for reconstruct, we always reschedule after a read.
@@ -1987,7 +1987,7 @@ static void check_decay_read_errors(stru
 {
 	struct timespec cur_time_mon;
 	unsigned long hours_since_last;
-	unsigned int read_errors = atomic_read(&rdev->read_errors);
+	unsigned int read_errors = atomic_read_unchecked(&rdev->read_errors);
 
 	ktime_get_ts(&cur_time_mon);
 
@@ -2009,9 +2009,9 @@ static void check_decay_read_errors(stru
 	 * overflowing the shift of read_errors by hours_since_last.
 	 */
 	if (hours_since_last >= 8 * sizeof(read_errors))
-		atomic_set(&rdev->read_errors, 0);
+		atomic_set_unchecked(&rdev->read_errors, 0);
 	else
-		atomic_set(&rdev->read_errors, read_errors >> hours_since_last);
+		atomic_set_unchecked(&rdev->read_errors, read_errors >> hours_since_last);
 }
 
 static int r10_sync_page_io(struct md_rdev *rdev, sector_t sector,
@@ -2065,8 +2065,8 @@ static void fix_read_error(struct r10con
 		return;
 
 	check_decay_read_errors(mddev, rdev);
-	atomic_inc(&rdev->read_errors);
-	if (atomic_read(&rdev->read_errors) > max_read_errors) {
+	atomic_inc_unchecked(&rdev->read_errors);
+	if (atomic_read_unchecked(&rdev->read_errors) > max_read_errors) {
 		char b[BDEVNAME_SIZE];
 		bdevname(rdev->bdev, b);
 
@@ -2074,7 +2074,7 @@ static void fix_read_error(struct r10con
 		       "md/raid10:%s: %s: Raid device exceeded "
 		       "read_error threshold [cur %d:max %d]\n",
 		       mdname(mddev), b,
-		       atomic_read(&rdev->read_errors), max_read_errors);
+		       atomic_read_unchecked(&rdev->read_errors), max_read_errors);
 		printk(KERN_NOTICE
 		       "md/raid10:%s: %s: Failing raid device\n",
 		       mdname(mddev), b);
@@ -2223,7 +2223,7 @@ static void fix_read_error(struct r10con
 				       (unsigned long long)(
 					       sect + rdev->data_offset),
 				       bdevname(rdev->bdev, b));
-				atomic_add(s, &rdev->corrected_errors);
+				atomic_add_unchecked(s, &rdev->corrected_errors);
 			}
 
 			rdev_dec_pending(rdev, mddev);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/md/raid1.c linux-3.3.8-pax/drivers/md/raid1.c
--- linux-3.3.8/drivers/md/raid1.c	2012-04-23 14:06:58.755285656 +0200
+++ linux-3.3.8-pax/drivers/md/raid1.c	2012-04-23 14:07:11.619285178 +0200
@@ -1645,7 +1645,7 @@ static int fix_sync_read_error(struct r1
 			if (r1_sync_page_io(rdev, sect, s,
 					    bio->bi_io_vec[idx].bv_page,
 					    READ) != 0)
-				atomic_add(s, &rdev->corrected_errors);
+				atomic_add_unchecked(s, &rdev->corrected_errors);
 		}
 		sectors -= s;
 		sect += s;
@@ -1859,7 +1859,7 @@ static void fix_read_error(struct r1conf
 			    test_bit(In_sync, &rdev->flags)) {
 				if (r1_sync_page_io(rdev, sect, s,
 						    conf->tmppage, READ)) {
-					atomic_add(s, &rdev->corrected_errors);
+					atomic_add_unchecked(s, &rdev->corrected_errors);
 					printk(KERN_INFO
 					       "md/raid1:%s: read error corrected "
 					       "(%d sectors at %llu on %s)\n",
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/md/raid5.c linux-3.3.8-pax/drivers/md/raid5.c
--- linux-3.3.8/drivers/md/raid5.c	2012-05-07 20:26:56.019609317 +0200
+++ linux-3.3.8-pax/drivers/md/raid5.c	2012-05-07 20:27:02.067608995 +0200
@@ -1687,18 +1687,18 @@ static void raid5_end_read_request(struc
 				(unsigned long long)(sh->sector
 						     + rdev->data_offset),
 				bdevname(rdev->bdev, b));
-			atomic_add(STRIPE_SECTORS, &rdev->corrected_errors);
+			atomic_add_unchecked(STRIPE_SECTORS, &rdev->corrected_errors);
 			clear_bit(R5_ReadError, &sh->dev[i].flags);
 			clear_bit(R5_ReWrite, &sh->dev[i].flags);
 		}
-		if (atomic_read(&rdev->read_errors))
-			atomic_set(&rdev->read_errors, 0);
+		if (atomic_read_unchecked(&rdev->read_errors))
+			atomic_set_unchecked(&rdev->read_errors, 0);
 	} else {
 		const char *bdn = bdevname(rdev->bdev, b);
 		int retry = 0;
 
 		clear_bit(R5_UPTODATE, &sh->dev[i].flags);
-		atomic_inc(&rdev->read_errors);
+		atomic_inc_unchecked(&rdev->read_errors);
 		if (test_bit(R5_ReadRepl, &sh->dev[i].flags))
 			printk_ratelimited(
 				KERN_WARNING
@@ -1727,7 +1727,7 @@ static void raid5_end_read_request(struc
 				(unsigned long long)(sh->sector
 						     + rdev->data_offset),
 				bdn);
-		else if (atomic_read(&rdev->read_errors)
+		else if (atomic_read_unchecked(&rdev->read_errors)
 			 > conf->max_nr_stripes)
 			printk(KERN_WARNING
 			       "md/raid:%s: Too many read errors, failing device %s.\n",
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/media/dvb/ddbridge/ddbridge-core.c linux-3.3.8-pax/drivers/media/dvb/ddbridge/ddbridge-core.c
--- linux-3.3.8/drivers/media/dvb/ddbridge/ddbridge-core.c	2012-03-19 10:39:00.224049803 +0100
+++ linux-3.3.8-pax/drivers/media/dvb/ddbridge/ddbridge-core.c	2012-03-19 10:43:43.872034658 +0100
@@ -1678,7 +1678,7 @@ static struct ddb_info ddb_v6 = {
 	.subvendor   = _subvend, .subdevice = _subdev, \
 	.driver_data = (unsigned long)&_driverdata }
 
-static const struct pci_device_id ddb_id_tbl[] __devinitdata = {
+static const struct pci_device_id ddb_id_tbl[] __devinitconst = {
 	DDB_ID(DDVID, 0x0002, DDVID, 0x0001, ddb_octopus),
 	DDB_ID(DDVID, 0x0003, DDVID, 0x0001, ddb_octopus),
 	DDB_ID(DDVID, 0x0003, DDVID, 0x0002, ddb_octopus_le),
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/media/dvb/dvb-core/dvb_demux.h linux-3.3.8-pax/drivers/media/dvb/dvb-core/dvb_demux.h
--- linux-3.3.8/drivers/media/dvb/dvb-core/dvb_demux.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/media/dvb/dvb-core/dvb_demux.h	2012-03-19 10:43:43.872034658 +0100
@@ -73,7 +73,7 @@ struct dvb_demux_feed {
 	union {
 		dmx_ts_cb ts;
 		dmx_section_cb sec;
-	} cb;
+	} __no_const cb;
 
 	struct dvb_demux *demux;
 	void *priv;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/media/dvb/dvb-core/dvbdev.c linux-3.3.8-pax/drivers/media/dvb/dvb-core/dvbdev.c
--- linux-3.3.8/drivers/media/dvb/dvb-core/dvbdev.c	2012-03-19 10:39:00.232049802 +0100
+++ linux-3.3.8-pax/drivers/media/dvb/dvb-core/dvbdev.c	2012-03-19 10:43:43.872034658 +0100
@@ -192,7 +192,7 @@ int dvb_register_device(struct dvb_adapt
 			const struct dvb_device *template, void *priv, int type)
 {
 	struct dvb_device *dvbdev;
-	struct file_operations *dvbdevfops;
+	file_operations_no_const *dvbdevfops;
 	struct device *clsdev;
 	int minor;
 	int id;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/media/dvb/dvb-usb/cxusb.c linux-3.3.8-pax/drivers/media/dvb/dvb-usb/cxusb.c
--- linux-3.3.8/drivers/media/dvb/dvb-usb/cxusb.c	2012-03-19 10:39:00.260049801 +0100
+++ linux-3.3.8-pax/drivers/media/dvb/dvb-usb/cxusb.c	2012-03-19 10:43:43.876034658 +0100
@@ -1068,7 +1068,7 @@ static struct dib0070_config dib7070p_di
 
 struct dib0700_adapter_state {
 	int (*set_param_save) (struct dvb_frontend *);
-};
+} __no_const;
 
 static int dib7070_set_param_override(struct dvb_frontend *fe)
 {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/media/dvb/dvb-usb/dw2102.c linux-3.3.8-pax/drivers/media/dvb/dvb-usb/dw2102.c
--- linux-3.3.8/drivers/media/dvb/dvb-usb/dw2102.c	2012-03-19 10:39:00.276049799 +0100
+++ linux-3.3.8-pax/drivers/media/dvb/dvb-usb/dw2102.c	2012-03-19 10:43:43.876034658 +0100
@@ -95,7 +95,7 @@ struct su3000_state {
 
 struct s6x0_state {
 	int (*old_set_voltage)(struct dvb_frontend *f, fe_sec_voltage_t v);
-};
+} __no_const;
 
 /* debug */
 static int dvb_usb_dw2102_debug;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/media/dvb/frontends/dib3000.h linux-3.3.8-pax/drivers/media/dvb/frontends/dib3000.h
--- linux-3.3.8/drivers/media/dvb/frontends/dib3000.h	2012-01-08 19:48:01.019472371 +0100
+++ linux-3.3.8-pax/drivers/media/dvb/frontends/dib3000.h	2012-03-19 10:43:43.876034658 +0100
@@ -39,7 +39,7 @@ struct dib_fe_xfer_ops
 	int (*fifo_ctrl)(struct dvb_frontend *fe, int onoff);
 	int (*pid_ctrl)(struct dvb_frontend *fe, int index, int pid, int onoff);
 	int (*tuner_pass_ctrl)(struct dvb_frontend *fe, int onoff, u8 pll_ctrl);
-};
+} __no_const;
 
 #if defined(CONFIG_DVB_DIB3000MB) || (defined(CONFIG_DVB_DIB3000MB_MODULE) && defined(MODULE))
 extern struct dvb_frontend* dib3000mb_attach(const struct dib3000_config* config,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/media/dvb/ngene/ngene-cards.c linux-3.3.8-pax/drivers/media/dvb/ngene/ngene-cards.c
--- linux-3.3.8/drivers/media/dvb/ngene/ngene-cards.c	2012-03-19 10:39:00.444049791 +0100
+++ linux-3.3.8-pax/drivers/media/dvb/ngene/ngene-cards.c	2012-03-19 10:43:43.876034658 +0100
@@ -477,7 +477,7 @@ static struct ngene_info ngene_info_m780
 
 /****************************************************************************/
 
-static const struct pci_device_id ngene_id_tbl[] __devinitdata = {
+static const struct pci_device_id ngene_id_tbl[] __devinitconst = {
 	NGENE_ID(0x18c3, 0xabc3, ngene_info_cineS2),
 	NGENE_ID(0x18c3, 0xabc4, ngene_info_cineS2),
 	NGENE_ID(0x18c3, 0xdb01, ngene_info_satixS2),
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/media/radio/radio-cadet.c linux-3.3.8-pax/drivers/media/radio/radio-cadet.c
--- linux-3.3.8/drivers/media/radio/radio-cadet.c	2011-10-24 12:48:29.795091586 +0200
+++ linux-3.3.8-pax/drivers/media/radio/radio-cadet.c	2012-03-19 10:43:43.880034658 +0100
@@ -326,6 +326,8 @@ static ssize_t cadet_read(struct file *f
 	unsigned char readbuf[RDS_BUFFER];
 	int i = 0;
 
+	if (count > RDS_BUFFER)
+		return -EFAULT;
 	mutex_lock(&dev->lock);
 	if (dev->rdsstat == 0) {
 		dev->rdsstat = 1;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/media/video/au0828/au0828.h linux-3.3.8-pax/drivers/media/video/au0828/au0828.h
--- linux-3.3.8/drivers/media/video/au0828/au0828.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/media/video/au0828/au0828.h	2012-03-19 10:43:43.880034658 +0100
@@ -191,7 +191,7 @@ struct au0828_dev {
 
 	/* I2C */
 	struct i2c_adapter		i2c_adap;
-	struct i2c_algorithm		i2c_algo;
+	i2c_algorithm_no_const		i2c_algo;
 	struct i2c_client		i2c_client;
 	u32 				i2c_rc;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/media/video/cx88/cx88-alsa.c linux-3.3.8-pax/drivers/media/video/cx88/cx88-alsa.c
--- linux-3.3.8/drivers/media/video/cx88/cx88-alsa.c	2012-03-19 10:39:00.928049727 +0100
+++ linux-3.3.8-pax/drivers/media/video/cx88/cx88-alsa.c	2012-03-19 10:43:43.880034658 +0100
@@ -766,7 +766,7 @@ static struct snd_kcontrol_new snd_cx88_
  * Only boards with eeprom and byte 1 at eeprom=1 have it
  */
 
-static const struct pci_device_id const cx88_audio_pci_tbl[] __devinitdata = {
+static const struct pci_device_id const cx88_audio_pci_tbl[] __devinitconst = {
 	{0x14f1,0x8801,PCI_ANY_ID,PCI_ANY_ID,0,0,0},
 	{0x14f1,0x8811,PCI_ANY_ID,PCI_ANY_ID,0,0,0},
 	{0, }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/media/video/omap/omap_vout.c linux-3.3.8-pax/drivers/media/video/omap/omap_vout.c
--- linux-3.3.8/drivers/media/video/omap/omap_vout.c	2012-03-19 10:39:01.120049755 +0100
+++ linux-3.3.8-pax/drivers/media/video/omap/omap_vout.c	2012-03-19 10:43:43.884034657 +0100
@@ -64,7 +64,6 @@ enum omap_vout_channels {
 	OMAP_VIDEO2,
 };
 
-static struct videobuf_queue_ops video_vbq_ops;
 /* Variables configurable through module params*/
 static u32 video1_numbuffers = 3;
 static u32 video2_numbuffers = 3;
@@ -1000,6 +999,12 @@ static int omap_vout_open(struct file *f
 {
 	struct videobuf_queue *q;
 	struct omap_vout_device *vout = NULL;
+	static struct videobuf_queue_ops video_vbq_ops = {
+		.buf_setup = omap_vout_buffer_setup,
+		.buf_prepare = omap_vout_buffer_prepare,
+		.buf_release = omap_vout_buffer_release,
+		.buf_queue = omap_vout_buffer_queue,
+	};
 
 	vout = video_drvdata(file);
 	v4l2_dbg(1, debug, &vout->vid_dev->v4l2_dev, "Entering %s\n", __func__);
@@ -1017,10 +1022,6 @@ static int omap_vout_open(struct file *f
 	vout->type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
 
 	q = &vout->vbq;
-	video_vbq_ops.buf_setup = omap_vout_buffer_setup;
-	video_vbq_ops.buf_prepare = omap_vout_buffer_prepare;
-	video_vbq_ops.buf_release = omap_vout_buffer_release;
-	video_vbq_ops.buf_queue = omap_vout_buffer_queue;
 	spin_lock_init(&vout->vbq_lock);
 
 	videobuf_queue_dma_contig_init(q, &video_vbq_ops, q->dev,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/media/video/pvrusb2/pvrusb2-hdw-internal.h linux-3.3.8-pax/drivers/media/video/pvrusb2/pvrusb2-hdw-internal.h
--- linux-3.3.8/drivers/media/video/pvrusb2/pvrusb2-hdw-internal.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/media/video/pvrusb2/pvrusb2-hdw-internal.h	2012-03-19 10:43:43.884034657 +0100
@@ -196,7 +196,7 @@ struct pvr2_hdw {
 
 	/* I2C stuff */
 	struct i2c_adapter i2c_adap;
-	struct i2c_algorithm i2c_algo;
+	i2c_algorithm_no_const i2c_algo;
 	pvr2_i2c_func i2c_func[PVR2_I2C_FUNC_CNT];
 	int i2c_cx25840_hack_state;
 	int i2c_linked;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/media/video/timblogiw.c linux-3.3.8-pax/drivers/media/video/timblogiw.c
--- linux-3.3.8/drivers/media/video/timblogiw.c	2012-03-19 10:39:01.216049750 +0100
+++ linux-3.3.8-pax/drivers/media/video/timblogiw.c	2012-03-19 10:43:43.884034657 +0100
@@ -745,7 +745,7 @@ static int timblogiw_mmap(struct file *f
 
 /* Platform device functions */
 
-static __devinitconst struct v4l2_ioctl_ops timblogiw_ioctl_ops = {
+static __devinitconst v4l2_ioctl_ops_no_const timblogiw_ioctl_ops = {
 	.vidioc_querycap		= timblogiw_querycap,
 	.vidioc_enum_fmt_vid_cap	= timblogiw_enum_fmt,
 	.vidioc_g_fmt_vid_cap		= timblogiw_g_fmt,
@@ -767,7 +767,7 @@ static __devinitconst struct v4l2_ioctl_
 	.vidioc_enum_framesizes		= timblogiw_enum_framesizes,
 };
 
-static __devinitconst struct v4l2_file_operations timblogiw_fops = {
+static __devinitconst v4l2_file_operations_no_const timblogiw_fops = {
 	.owner		= THIS_MODULE,
 	.open		= timblogiw_open,
 	.release	= timblogiw_close,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/message/fusion/mptsas.c linux-3.3.8-pax/drivers/message/fusion/mptsas.c
--- linux-3.3.8/drivers/message/fusion/mptsas.c	2012-03-19 10:39:01.380049740 +0100
+++ linux-3.3.8-pax/drivers/message/fusion/mptsas.c	2012-03-19 10:43:43.888034657 +0100
@@ -446,6 +446,23 @@ mptsas_is_end_device(struct mptsas_devin
 		return 0;
 }
 
+static inline void
+mptsas_set_rphy(MPT_ADAPTER *ioc, struct mptsas_phyinfo *phy_info, struct sas_rphy *rphy)
+{
+	if (phy_info->port_details) {
+		phy_info->port_details->rphy = rphy;
+		dsaswideprintk(ioc, printk(MYIOC_s_DEBUG_FMT "sas_rphy_add: rphy=%p\n",
+		    ioc->name, rphy));
+	}
+
+	if (rphy) {
+		dsaswideprintk(ioc, dev_printk(KERN_DEBUG,
+		    &rphy->dev, MYIOC_s_FMT "add:", ioc->name));
+		dsaswideprintk(ioc, printk(MYIOC_s_DEBUG_FMT "rphy=%p release=%p\n",
+		    ioc->name, rphy, rphy->dev.release));
+	}
+}
+
 /* no mutex */
 static void
 mptsas_port_delete(MPT_ADAPTER *ioc, struct mptsas_portinfo_details * port_details)
@@ -484,23 +501,6 @@ mptsas_get_rphy(struct mptsas_phyinfo *p
 		return NULL;
 }
 
-static inline void
-mptsas_set_rphy(MPT_ADAPTER *ioc, struct mptsas_phyinfo *phy_info, struct sas_rphy *rphy)
-{
-	if (phy_info->port_details) {
-		phy_info->port_details->rphy = rphy;
-		dsaswideprintk(ioc, printk(MYIOC_s_DEBUG_FMT "sas_rphy_add: rphy=%p\n",
-		    ioc->name, rphy));
-	}
-
-	if (rphy) {
-		dsaswideprintk(ioc, dev_printk(KERN_DEBUG,
-		    &rphy->dev, MYIOC_s_FMT "add:", ioc->name));
-		dsaswideprintk(ioc, printk(MYIOC_s_DEBUG_FMT "rphy=%p release=%p\n",
-		    ioc->name, rphy, rphy->dev.release));
-	}
-}
-
 static inline struct sas_port *
 mptsas_get_port(struct mptsas_phyinfo *phy_info)
 {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/message/fusion/mptscsih.c linux-3.3.8-pax/drivers/message/fusion/mptscsih.c
--- linux-3.3.8/drivers/message/fusion/mptscsih.c	2012-01-08 19:48:02.635472285 +0100
+++ linux-3.3.8-pax/drivers/message/fusion/mptscsih.c	2012-03-19 10:43:43.888034657 +0100
@@ -1270,15 +1270,16 @@ mptscsih_info(struct Scsi_Host *SChost)
 
 	h = shost_priv(SChost);
 
-	if (h) {
-		if (h->info_kbuf == NULL)
-			if ((h->info_kbuf = kmalloc(0x1000 /* 4Kb */, GFP_KERNEL)) == NULL)
-				return h->info_kbuf;
-		h->info_kbuf[0] = '\0';
+	if (!h)
+		return NULL;
 
-		mpt_print_ioc_summary(h->ioc, h->info_kbuf, &size, 0, 0);
-		h->info_kbuf[size-1] = '\0';
-	}
+	if (h->info_kbuf == NULL)
+		if ((h->info_kbuf = kmalloc(0x1000 /* 4Kb */, GFP_KERNEL)) == NULL)
+			return h->info_kbuf;
+	h->info_kbuf[0] = '\0';
+
+	mpt_print_ioc_summary(h->ioc, h->info_kbuf, &size, 0, 0);
+	h->info_kbuf[size-1] = '\0';
 
 	return h->info_kbuf;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/message/i2o/i2o_proc.c linux-3.3.8-pax/drivers/message/i2o/i2o_proc.c
--- linux-3.3.8/drivers/message/i2o/i2o_proc.c	2012-03-19 10:39:01.380049740 +0100
+++ linux-3.3.8-pax/drivers/message/i2o/i2o_proc.c	2012-03-19 10:43:43.892034657 +0100
@@ -255,13 +255,6 @@ static char *scsi_devices[] = {
 	"Array Controller Device"
 };
 
-static char *chtostr(u8 * chars, int n)
-{
-	char tmp[256];
-	tmp[0] = 0;
-	return strncat(tmp, (char *)chars, n);
-}
-
 static int i2o_report_query_status(struct seq_file *seq, int block_status,
 				   char *group)
 {
@@ -838,8 +831,7 @@ static int i2o_seq_show_ddm_table(struct
 
 		seq_printf(seq, "%-#7x", ddm_table.i2o_vendor_id);
 		seq_printf(seq, "%-#8x", ddm_table.module_id);
-		seq_printf(seq, "%-29s",
-			   chtostr(ddm_table.module_name_version, 28));
+		seq_printf(seq, "%-.28s", ddm_table.module_name_version);
 		seq_printf(seq, "%9d  ", ddm_table.data_size);
 		seq_printf(seq, "%8d", ddm_table.code_size);
 
@@ -940,8 +932,8 @@ static int i2o_seq_show_drivers_stored(s
 
 		seq_printf(seq, "%-#7x", dst->i2o_vendor_id);
 		seq_printf(seq, "%-#8x", dst->module_id);
-		seq_printf(seq, "%-29s", chtostr(dst->module_name_version, 28));
-		seq_printf(seq, "%-9s", chtostr(dst->date, 8));
+		seq_printf(seq, "%-.28s", dst->module_name_version);
+		seq_printf(seq, "%-.8s", dst->date);
 		seq_printf(seq, "%8d ", dst->module_size);
 		seq_printf(seq, "%8d ", dst->mpb_size);
 		seq_printf(seq, "0x%04x", dst->module_flags);
@@ -1272,14 +1264,10 @@ static int i2o_seq_show_dev_identity(str
 	seq_printf(seq, "Device Class  : %s\n", i2o_get_class_name(work16[0]));
 	seq_printf(seq, "Owner TID     : %0#5x\n", work16[2]);
 	seq_printf(seq, "Parent TID    : %0#5x\n", work16[3]);
-	seq_printf(seq, "Vendor info   : %s\n",
-		   chtostr((u8 *) (work32 + 2), 16));
-	seq_printf(seq, "Product info  : %s\n",
-		   chtostr((u8 *) (work32 + 6), 16));
-	seq_printf(seq, "Description   : %s\n",
-		   chtostr((u8 *) (work32 + 10), 16));
-	seq_printf(seq, "Product rev.  : %s\n",
-		   chtostr((u8 *) (work32 + 14), 8));
+	seq_printf(seq, "Vendor info   : %.16s\n", (u8 *) (work32 + 2));
+	seq_printf(seq, "Product info  : %.16s\n", (u8 *) (work32 + 6));
+	seq_printf(seq, "Description   : %.16s\n", (u8 *) (work32 + 10));
+	seq_printf(seq, "Product rev.  : %.8s\n", (u8 *) (work32 + 14));
 
 	seq_printf(seq, "Serial number : ");
 	print_serial_number(seq, (u8 *) (work32 + 16),
@@ -1324,10 +1312,8 @@ static int i2o_seq_show_ddm_identity(str
 	}
 
 	seq_printf(seq, "Registering DDM TID : 0x%03x\n", result.ddm_tid);
-	seq_printf(seq, "Module name         : %s\n",
-		   chtostr(result.module_name, 24));
-	seq_printf(seq, "Module revision     : %s\n",
-		   chtostr(result.module_rev, 8));
+	seq_printf(seq, "Module name         : %.24s\n", result.module_name);
+	seq_printf(seq, "Module revision     : %.8s\n", result.module_rev);
 
 	seq_printf(seq, "Serial number       : ");
 	print_serial_number(seq, result.serial_number, sizeof(result) - 36);
@@ -1358,14 +1344,10 @@ static int i2o_seq_show_uinfo(struct seq
 		return 0;
 	}
 
-	seq_printf(seq, "Device name     : %s\n",
-		   chtostr(result.device_name, 64));
-	seq_printf(seq, "Service name    : %s\n",
-		   chtostr(result.service_name, 64));
-	seq_printf(seq, "Physical name   : %s\n",
-		   chtostr(result.physical_location, 64));
-	seq_printf(seq, "Instance number : %s\n",
-		   chtostr(result.instance_number, 4));
+	seq_printf(seq, "Device name     : %.64s\n", result.device_name);
+	seq_printf(seq, "Service name    : %.64s\n", result.service_name);
+	seq_printf(seq, "Physical name   : %.64s\n", result.physical_location);
+	seq_printf(seq, "Instance number : %.4s\n", result.instance_number);
 
 	return 0;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/message/i2o/iop.c linux-3.3.8-pax/drivers/message/i2o/iop.c
--- linux-3.3.8/drivers/message/i2o/iop.c	2011-10-24 12:48:30.663091543 +0200
+++ linux-3.3.8-pax/drivers/message/i2o/iop.c	2012-03-19 10:43:43.892034657 +0100
@@ -111,10 +111,10 @@ u32 i2o_cntxt_list_add(struct i2o_contro
 
 	spin_lock_irqsave(&c->context_list_lock, flags);
 
-	if (unlikely(atomic_inc_and_test(&c->context_list_counter)))
-		atomic_inc(&c->context_list_counter);
+	if (unlikely(atomic_inc_and_test_unchecked(&c->context_list_counter)))
+		atomic_inc_unchecked(&c->context_list_counter);
 
-	entry->context = atomic_read(&c->context_list_counter);
+	entry->context = atomic_read_unchecked(&c->context_list_counter);
 
 	list_add(&entry->list, &c->context_list);
 
@@ -1077,7 +1077,7 @@ struct i2o_controller *i2o_iop_alloc(voi
 
 #if BITS_PER_LONG == 64
 	spin_lock_init(&c->context_list_lock);
-	atomic_set(&c->context_list_counter, 0);
+	atomic_set_unchecked(&c->context_list_counter, 0);
 	INIT_LIST_HEAD(&c->context_list);
 #endif
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/mfd/abx500-core.c linux-3.3.8-pax/drivers/mfd/abx500-core.c
--- linux-3.3.8/drivers/mfd/abx500-core.c	2012-01-08 19:48:03.063472262 +0100
+++ linux-3.3.8-pax/drivers/mfd/abx500-core.c	2012-03-19 10:43:43.892034657 +0100
@@ -15,7 +15,7 @@ static LIST_HEAD(abx500_list);
 
 struct abx500_device_entry {
 	struct list_head list;
-	struct abx500_ops ops;
+	abx500_ops_no_const ops;
 	struct device *dev;
 };
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/mfd/janz-cmodio.c linux-3.3.8-pax/drivers/mfd/janz-cmodio.c
--- linux-3.3.8/drivers/mfd/janz-cmodio.c	2012-03-19 10:39:01.432049738 +0100
+++ linux-3.3.8-pax/drivers/mfd/janz-cmodio.c	2012-03-19 10:43:43.896034657 +0100
@@ -13,6 +13,7 @@
 
 #include <linux/kernel.h>
 #include <linux/module.h>
+#include <linux/slab.h>
 #include <linux/init.h>
 #include <linux/pci.h>
 #include <linux/interrupt.h>
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/misc/lis3lv02d/lis3lv02d.c linux-3.3.8-pax/drivers/misc/lis3lv02d/lis3lv02d.c
--- linux-3.3.8/drivers/misc/lis3lv02d/lis3lv02d.c	2012-03-19 10:39:01.656049719 +0100
+++ linux-3.3.8-pax/drivers/misc/lis3lv02d/lis3lv02d.c	2012-03-19 10:43:43.896034657 +0100
@@ -466,7 +466,7 @@ static irqreturn_t lis302dl_interrupt(in
 	 * the lid is closed. This leads to interrupts as soon as a little move
 	 * is done.
 	 */
-	atomic_inc(&lis3->count);
+	atomic_inc_unchecked(&lis3->count);
 
 	wake_up_interruptible(&lis3->misc_wait);
 	kill_fasync(&lis3->async_queue, SIGIO, POLL_IN);
@@ -552,7 +552,7 @@ static int lis3lv02d_misc_open(struct in
 	if (lis3->pm_dev)
 		pm_runtime_get_sync(lis3->pm_dev);
 
-	atomic_set(&lis3->count, 0);
+	atomic_set_unchecked(&lis3->count, 0);
 	return 0;
 }
 
@@ -585,7 +585,7 @@ static ssize_t lis3lv02d_misc_read(struc
 	add_wait_queue(&lis3->misc_wait, &wait);
 	while (true) {
 		set_current_state(TASK_INTERRUPTIBLE);
-		data = atomic_xchg(&lis3->count, 0);
+		data = atomic_xchg_unchecked(&lis3->count, 0);
 		if (data)
 			break;
 
@@ -626,7 +626,7 @@ static unsigned int lis3lv02d_misc_poll(
 					      struct lis3lv02d, miscdev);
 
 	poll_wait(file, &lis3->misc_wait, wait);
-	if (atomic_read(&lis3->count))
+	if (atomic_read_unchecked(&lis3->count))
 		return POLLIN | POLLRDNORM;
 	return 0;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/misc/lis3lv02d/lis3lv02d.h linux-3.3.8-pax/drivers/misc/lis3lv02d/lis3lv02d.h
--- linux-3.3.8/drivers/misc/lis3lv02d/lis3lv02d.h	2012-01-08 19:48:03.371472245 +0100
+++ linux-3.3.8-pax/drivers/misc/lis3lv02d/lis3lv02d.h	2012-03-19 10:43:43.896034657 +0100
@@ -266,7 +266,7 @@ struct lis3lv02d {
 	struct input_polled_dev	*idev;     /* input device */
 	struct platform_device	*pdev;     /* platform device */
 	struct regulator_bulk_data regulators[2];
-	atomic_t		count;     /* interrupt count after last read */
+	atomic_unchecked_t	count;     /* interrupt count after last read */
 	union axis_conversion	ac;        /* hw -> logical axis */
 	int			mapped_btns[3];
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/misc/sgi-gru/gruhandles.c linux-3.3.8-pax/drivers/misc/sgi-gru/gruhandles.c
--- linux-3.3.8/drivers/misc/sgi-gru/gruhandles.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/misc/sgi-gru/gruhandles.c	2012-03-19 10:43:43.900034657 +0100
@@ -44,8 +44,8 @@ static void update_mcs_stats(enum mcs_op
 	unsigned long nsec;
 
 	nsec = CLKS2NSEC(clks);
-	atomic_long_inc(&mcs_op_statistics[op].count);
-	atomic_long_add(nsec, &mcs_op_statistics[op].total);
+	atomic_long_inc_unchecked(&mcs_op_statistics[op].count);
+	atomic_long_add_unchecked(nsec, &mcs_op_statistics[op].total);
 	if (mcs_op_statistics[op].max < nsec)
 		mcs_op_statistics[op].max = nsec;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/misc/sgi-gru/gruprocfs.c linux-3.3.8-pax/drivers/misc/sgi-gru/gruprocfs.c
--- linux-3.3.8/drivers/misc/sgi-gru/gruprocfs.c	2012-03-19 10:39:01.660049719 +0100
+++ linux-3.3.8-pax/drivers/misc/sgi-gru/gruprocfs.c	2012-03-19 10:43:43.900034657 +0100
@@ -32,9 +32,9 @@
 
 #define printstat(s, f)		printstat_val(s, &gru_stats.f, #f)
 
-static void printstat_val(struct seq_file *s, atomic_long_t *v, char *id)
+static void printstat_val(struct seq_file *s, atomic_long_unchecked_t *v, char *id)
 {
-	unsigned long val = atomic_long_read(v);
+	unsigned long val = atomic_long_read_unchecked(v);
 
 	seq_printf(s, "%16lu %s\n", val, id);
 }
@@ -134,8 +134,8 @@ static int mcs_statistics_show(struct se
 
 	seq_printf(s, "%-20s%12s%12s%12s\n", "#id", "count", "aver-clks", "max-clks");
 	for (op = 0; op < mcsop_last; op++) {
-		count = atomic_long_read(&mcs_op_statistics[op].count);
-		total = atomic_long_read(&mcs_op_statistics[op].total);
+		count = atomic_long_read_unchecked(&mcs_op_statistics[op].count);
+		total = atomic_long_read_unchecked(&mcs_op_statistics[op].total);
 		max = mcs_op_statistics[op].max;
 		seq_printf(s, "%-20s%12ld%12ld%12ld\n", id[op], count,
 			   count ? total / count : 0, max);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/misc/sgi-gru/grutables.h linux-3.3.8-pax/drivers/misc/sgi-gru/grutables.h
--- linux-3.3.8/drivers/misc/sgi-gru/grutables.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/misc/sgi-gru/grutables.h	2012-03-19 10:43:43.900034657 +0100
@@ -167,82 +167,82 @@ extern unsigned int gru_max_gids;
  * GRU statistics.
  */
 struct gru_stats_s {
-	atomic_long_t vdata_alloc;
-	atomic_long_t vdata_free;
-	atomic_long_t gts_alloc;
-	atomic_long_t gts_free;
-	atomic_long_t gms_alloc;
-	atomic_long_t gms_free;
-	atomic_long_t gts_double_allocate;
-	atomic_long_t assign_context;
-	atomic_long_t assign_context_failed;
-	atomic_long_t free_context;
-	atomic_long_t load_user_context;
-	atomic_long_t load_kernel_context;
-	atomic_long_t lock_kernel_context;
-	atomic_long_t unlock_kernel_context;
-	atomic_long_t steal_user_context;
-	atomic_long_t steal_kernel_context;
-	atomic_long_t steal_context_failed;
-	atomic_long_t nopfn;
-	atomic_long_t asid_new;
-	atomic_long_t asid_next;
-	atomic_long_t asid_wrap;
-	atomic_long_t asid_reuse;
-	atomic_long_t intr;
-	atomic_long_t intr_cbr;
-	atomic_long_t intr_tfh;
-	atomic_long_t intr_spurious;
-	atomic_long_t intr_mm_lock_failed;
-	atomic_long_t call_os;
-	atomic_long_t call_os_wait_queue;
-	atomic_long_t user_flush_tlb;
-	atomic_long_t user_unload_context;
-	atomic_long_t user_exception;
-	atomic_long_t set_context_option;
-	atomic_long_t check_context_retarget_intr;
-	atomic_long_t check_context_unload;
-	atomic_long_t tlb_dropin;
-	atomic_long_t tlb_preload_page;
-	atomic_long_t tlb_dropin_fail_no_asid;
-	atomic_long_t tlb_dropin_fail_upm;
-	atomic_long_t tlb_dropin_fail_invalid;
-	atomic_long_t tlb_dropin_fail_range_active;
-	atomic_long_t tlb_dropin_fail_idle;
-	atomic_long_t tlb_dropin_fail_fmm;
-	atomic_long_t tlb_dropin_fail_no_exception;
-	atomic_long_t tfh_stale_on_fault;
-	atomic_long_t mmu_invalidate_range;
-	atomic_long_t mmu_invalidate_page;
-	atomic_long_t flush_tlb;
-	atomic_long_t flush_tlb_gru;
-	atomic_long_t flush_tlb_gru_tgh;
-	atomic_long_t flush_tlb_gru_zero_asid;
-
-	atomic_long_t copy_gpa;
-	atomic_long_t read_gpa;
-
-	atomic_long_t mesq_receive;
-	atomic_long_t mesq_receive_none;
-	atomic_long_t mesq_send;
-	atomic_long_t mesq_send_failed;
-	atomic_long_t mesq_noop;
-	atomic_long_t mesq_send_unexpected_error;
-	atomic_long_t mesq_send_lb_overflow;
-	atomic_long_t mesq_send_qlimit_reached;
-	atomic_long_t mesq_send_amo_nacked;
-	atomic_long_t mesq_send_put_nacked;
-	atomic_long_t mesq_page_overflow;
-	atomic_long_t mesq_qf_locked;
-	atomic_long_t mesq_qf_noop_not_full;
-	atomic_long_t mesq_qf_switch_head_failed;
-	atomic_long_t mesq_qf_unexpected_error;
-	atomic_long_t mesq_noop_unexpected_error;
-	atomic_long_t mesq_noop_lb_overflow;
-	atomic_long_t mesq_noop_qlimit_reached;
-	atomic_long_t mesq_noop_amo_nacked;
-	atomic_long_t mesq_noop_put_nacked;
-	atomic_long_t mesq_noop_page_overflow;
+	atomic_long_unchecked_t vdata_alloc;
+	atomic_long_unchecked_t vdata_free;
+	atomic_long_unchecked_t gts_alloc;
+	atomic_long_unchecked_t gts_free;
+	atomic_long_unchecked_t gms_alloc;
+	atomic_long_unchecked_t gms_free;
+	atomic_long_unchecked_t gts_double_allocate;
+	atomic_long_unchecked_t assign_context;
+	atomic_long_unchecked_t assign_context_failed;
+	atomic_long_unchecked_t free_context;
+	atomic_long_unchecked_t load_user_context;
+	atomic_long_unchecked_t load_kernel_context;
+	atomic_long_unchecked_t lock_kernel_context;
+	atomic_long_unchecked_t unlock_kernel_context;
+	atomic_long_unchecked_t steal_user_context;
+	atomic_long_unchecked_t steal_kernel_context;
+	atomic_long_unchecked_t steal_context_failed;
+	atomic_long_unchecked_t nopfn;
+	atomic_long_unchecked_t asid_new;
+	atomic_long_unchecked_t asid_next;
+	atomic_long_unchecked_t asid_wrap;
+	atomic_long_unchecked_t asid_reuse;
+	atomic_long_unchecked_t intr;
+	atomic_long_unchecked_t intr_cbr;
+	atomic_long_unchecked_t intr_tfh;
+	atomic_long_unchecked_t intr_spurious;
+	atomic_long_unchecked_t intr_mm_lock_failed;
+	atomic_long_unchecked_t call_os;
+	atomic_long_unchecked_t call_os_wait_queue;
+	atomic_long_unchecked_t user_flush_tlb;
+	atomic_long_unchecked_t user_unload_context;
+	atomic_long_unchecked_t user_exception;
+	atomic_long_unchecked_t set_context_option;
+	atomic_long_unchecked_t check_context_retarget_intr;
+	atomic_long_unchecked_t check_context_unload;
+	atomic_long_unchecked_t tlb_dropin;
+	atomic_long_unchecked_t tlb_preload_page;
+	atomic_long_unchecked_t tlb_dropin_fail_no_asid;
+	atomic_long_unchecked_t tlb_dropin_fail_upm;
+	atomic_long_unchecked_t tlb_dropin_fail_invalid;
+	atomic_long_unchecked_t tlb_dropin_fail_range_active;
+	atomic_long_unchecked_t tlb_dropin_fail_idle;
+	atomic_long_unchecked_t tlb_dropin_fail_fmm;
+	atomic_long_unchecked_t tlb_dropin_fail_no_exception;
+	atomic_long_unchecked_t tfh_stale_on_fault;
+	atomic_long_unchecked_t mmu_invalidate_range;
+	atomic_long_unchecked_t mmu_invalidate_page;
+	atomic_long_unchecked_t flush_tlb;
+	atomic_long_unchecked_t flush_tlb_gru;
+	atomic_long_unchecked_t flush_tlb_gru_tgh;
+	atomic_long_unchecked_t flush_tlb_gru_zero_asid;
+
+	atomic_long_unchecked_t copy_gpa;
+	atomic_long_unchecked_t read_gpa;
+
+	atomic_long_unchecked_t mesq_receive;
+	atomic_long_unchecked_t mesq_receive_none;
+	atomic_long_unchecked_t mesq_send;
+	atomic_long_unchecked_t mesq_send_failed;
+	atomic_long_unchecked_t mesq_noop;
+	atomic_long_unchecked_t mesq_send_unexpected_error;
+	atomic_long_unchecked_t mesq_send_lb_overflow;
+	atomic_long_unchecked_t mesq_send_qlimit_reached;
+	atomic_long_unchecked_t mesq_send_amo_nacked;
+	atomic_long_unchecked_t mesq_send_put_nacked;
+	atomic_long_unchecked_t mesq_page_overflow;
+	atomic_long_unchecked_t mesq_qf_locked;
+	atomic_long_unchecked_t mesq_qf_noop_not_full;
+	atomic_long_unchecked_t mesq_qf_switch_head_failed;
+	atomic_long_unchecked_t mesq_qf_unexpected_error;
+	atomic_long_unchecked_t mesq_noop_unexpected_error;
+	atomic_long_unchecked_t mesq_noop_lb_overflow;
+	atomic_long_unchecked_t mesq_noop_qlimit_reached;
+	atomic_long_unchecked_t mesq_noop_amo_nacked;
+	atomic_long_unchecked_t mesq_noop_put_nacked;
+	atomic_long_unchecked_t mesq_noop_page_overflow;
 
 };
 
@@ -251,8 +251,8 @@ enum mcs_op {cchop_allocate, cchop_start
 	tghop_invalidate, mcsop_last};
 
 struct mcs_op_statistic {
-	atomic_long_t	count;
-	atomic_long_t	total;
+	atomic_long_unchecked_t	count;
+	atomic_long_unchecked_t	total;
 	unsigned long	max;
 };
 
@@ -275,7 +275,7 @@ extern struct mcs_op_statistic mcs_op_st
 
 #define STAT(id)	do {						\
 				if (gru_options & OPT_STATS)		\
-					atomic_long_inc(&gru_stats.id);	\
+					atomic_long_inc_unchecked(&gru_stats.id);	\
 			} while (0)
 
 #ifdef CONFIG_SGI_GRU_DEBUG
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/misc/sgi-xp/xpc.h linux-3.3.8-pax/drivers/misc/sgi-xp/xpc.h
--- linux-3.3.8/drivers/misc/sgi-xp/xpc.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/misc/sgi-xp/xpc.h	2012-03-19 10:43:43.900034657 +0100
@@ -835,6 +835,7 @@ struct xpc_arch_operations {
 	void (*received_payload) (struct xpc_channel *, void *);
 	void (*notify_senders_of_disconnect) (struct xpc_channel *);
 };
+typedef struct xpc_arch_operations __no_const xpc_arch_operations_no_const;
 
 /* struct xpc_partition act_state values (for XPC HB) */
 
@@ -876,7 +877,7 @@ extern struct xpc_registration xpc_regis
 /* found in xpc_main.c */
 extern struct device *xpc_part;
 extern struct device *xpc_chan;
-extern struct xpc_arch_operations xpc_arch_ops;
+extern xpc_arch_operations_no_const xpc_arch_ops;
 extern int xpc_disengage_timelimit;
 extern int xpc_disengage_timedout;
 extern int xpc_activate_IRQ_rcvd;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/misc/sgi-xp/xpc_main.c linux-3.3.8-pax/drivers/misc/sgi-xp/xpc_main.c
--- linux-3.3.8/drivers/misc/sgi-xp/xpc_main.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/misc/sgi-xp/xpc_main.c	2012-03-19 10:43:43.904034656 +0100
@@ -162,7 +162,7 @@ static struct notifier_block xpc_die_not
 	.notifier_call = xpc_system_die,
 };
 
-struct xpc_arch_operations xpc_arch_ops;
+xpc_arch_operations_no_const xpc_arch_ops;
 
 /*
  * Timer function to enforce the timelimit on the partition disengage.
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/misc/sgi-xp/xp.h linux-3.3.8-pax/drivers/misc/sgi-xp/xp.h
--- linux-3.3.8/drivers/misc/sgi-xp/xp.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/misc/sgi-xp/xp.h	2012-03-19 10:43:43.904034656 +0100
@@ -289,7 +289,7 @@ struct xpc_interface {
 					xpc_notify_func, void *);
 	void (*received) (short, int, void *);
 	enum xp_retval (*partid_to_nasids) (short, void *);
-};
+} __no_const;
 
 extern struct xpc_interface xpc_interface;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/mmc/host/sdhci-pci.c linux-3.3.8-pax/drivers/mmc/host/sdhci-pci.c
--- linux-3.3.8/drivers/mmc/host/sdhci-pci.c	2012-03-19 10:39:01.764049717 +0100
+++ linux-3.3.8-pax/drivers/mmc/host/sdhci-pci.c	2012-03-19 10:43:43.904034656 +0100
@@ -631,7 +631,7 @@ static const struct sdhci_pci_fixes sdhc
 	.probe		= via_probe,
 };
 
-static const struct pci_device_id pci_ids[] __devinitdata = {
+static const struct pci_device_id pci_ids[] __devinitconst = {
 	{
 		.vendor		= PCI_VENDOR_ID_RICOH,
 		.device		= PCI_DEVICE_ID_RICOH_R5C822,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/mtd/devices/doc2000.c linux-3.3.8-pax/drivers/mtd/devices/doc2000.c
--- linux-3.3.8/drivers/mtd/devices/doc2000.c	2012-04-15 15:08:29.214606362 +0200
+++ linux-3.3.8-pax/drivers/mtd/devices/doc2000.c	2012-04-15 15:08:34.614606089 +0200
@@ -764,7 +764,7 @@ static int doc_write(struct mtd_info *mt
 
 		/* The ECC will not be calculated correctly if less than 512 is written */
 /* DBB-
-		if (len != 0x200 && eccbuf)
+		if (len != 0x200)
 			printk(KERN_WARNING
 			       "ECC needs a full sector write (adr: %lx size %lx)\n",
 			       (long) to, (long) len);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/mtd/devices/doc2001.c linux-3.3.8-pax/drivers/mtd/devices/doc2001.c
--- linux-3.3.8/drivers/mtd/devices/doc2001.c	2012-04-15 15:08:29.214606362 +0200
+++ linux-3.3.8-pax/drivers/mtd/devices/doc2001.c	2012-04-15 15:08:34.614606089 +0200
@@ -384,7 +384,7 @@ static int doc_read (struct mtd_info *mt
 	struct Nand *mychip = &this->chips[from >> (this->chipshift)];
 
 	/* Don't allow read past end of device */
-	if (from >= this->totlen)
+	if (from >= this->totlen || !len)
 		return -EINVAL;
 
 	/* Don't allow a single read to cross a 512-byte block boundary */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/mtd/nand/denali.c linux-3.3.8-pax/drivers/mtd/nand/denali.c
--- linux-3.3.8/drivers/mtd/nand/denali.c	2012-01-08 19:48:03.807472222 +0100
+++ linux-3.3.8-pax/drivers/mtd/nand/denali.c	2012-03-19 10:43:43.908034656 +0100
@@ -26,6 +26,7 @@
 #include <linux/pci.h>
 #include <linux/mtd/mtd.h>
 #include <linux/module.h>
+#include <linux/slab.h>
 
 #include "denali.h"
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/mtd/nftlmount.c linux-3.3.8-pax/drivers/mtd/nftlmount.c
--- linux-3.3.8/drivers/mtd/nftlmount.c	2012-03-19 10:39:02.028049709 +0100
+++ linux-3.3.8-pax/drivers/mtd/nftlmount.c	2012-03-19 10:43:43.908034656 +0100
@@ -24,6 +24,7 @@
 #include <asm/errno.h>
 #include <linux/delay.h>
 #include <linux/slab.h>
+#include <linux/sched.h>
 #include <linux/mtd/mtd.h>
 #include <linux/mtd/nand.h>
 #include <linux/mtd/nftl.h>
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/ethernet/atheros/atlx/atl2.c linux-3.3.8-pax/drivers/net/ethernet/atheros/atlx/atl2.c
--- linux-3.3.8/drivers/net/ethernet/atheros/atlx/atl2.c	2012-03-19 10:39:02.700049669 +0100
+++ linux-3.3.8-pax/drivers/net/ethernet/atheros/atlx/atl2.c	2012-03-19 10:43:43.912034656 +0100
@@ -2862,7 +2862,7 @@ static void atl2_force_ps(struct atl2_hw
  */
 
 #define ATL2_PARAM(X, desc) \
-    static const int __devinitdata X[ATL2_MAX_NIC + 1] = ATL2_PARAM_INIT; \
+    static const int __devinitconst X[ATL2_MAX_NIC + 1] = ATL2_PARAM_INIT; \
     MODULE_PARM(X, "1-" __MODULE_STRING(ATL2_MAX_NIC) "i"); \
     MODULE_PARM_DESC(X, desc);
 #else
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/ethernet/broadcom/bnx2x/bnx2x_sp.h linux-3.3.8-pax/drivers/net/ethernet/broadcom/bnx2x/bnx2x_sp.h
--- linux-3.3.8/drivers/net/ethernet/broadcom/bnx2x/bnx2x_sp.h	2012-03-19 10:39:02.768049668 +0100
+++ linux-3.3.8-pax/drivers/net/ethernet/broadcom/bnx2x/bnx2x_sp.h	2012-03-19 10:43:43.920034655 +0100
@@ -473,7 +473,7 @@ struct bnx2x_rx_mode_obj {
 
 	int (*wait_comp)(struct bnx2x *bp,
 			 struct bnx2x_rx_mode_ramrod_params *p);
-};
+} __no_const;
 
 /********************** Set multicast group ***********************************/
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/ethernet/broadcom/tg3.h linux-3.3.8-pax/drivers/net/ethernet/broadcom/tg3.h
--- linux-3.3.8/drivers/net/ethernet/broadcom/tg3.h	2012-03-19 10:39:02.792049666 +0100
+++ linux-3.3.8-pax/drivers/net/ethernet/broadcom/tg3.h	2012-03-19 10:43:43.920034655 +0100
@@ -140,6 +140,7 @@
 #define  CHIPREV_ID_5750_A0		 0x4000
 #define  CHIPREV_ID_5750_A1		 0x4001
 #define  CHIPREV_ID_5750_A3		 0x4003
+#define  CHIPREV_ID_5750_C1		 0x4201
 #define  CHIPREV_ID_5750_C2		 0x4202
 #define  CHIPREV_ID_5752_A0_HW		 0x5000
 #define  CHIPREV_ID_5752_A0		 0x6000
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/ethernet/chelsio/cxgb3/l2t.h linux-3.3.8-pax/drivers/net/ethernet/chelsio/cxgb3/l2t.h
--- linux-3.3.8/drivers/net/ethernet/chelsio/cxgb3/l2t.h	2012-03-19 10:39:02.864049661 +0100
+++ linux-3.3.8-pax/drivers/net/ethernet/chelsio/cxgb3/l2t.h	2012-03-19 10:43:43.920034656 +0100
@@ -87,7 +87,7 @@ typedef void (*arp_failure_handler_func)
  */
 struct l2t_skb_cb {
 	arp_failure_handler_func arp_failure_handler;
-};
+} __no_const;
 
 #define L2T_SKB_CB(skb) ((struct l2t_skb_cb *)(skb)->cb)
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/ethernet/dec/tulip/de4x5.c linux-3.3.8-pax/drivers/net/ethernet/dec/tulip/de4x5.c
--- linux-3.3.8/drivers/net/ethernet/dec/tulip/de4x5.c	2012-03-19 10:39:02.884049659 +0100
+++ linux-3.3.8-pax/drivers/net/ethernet/dec/tulip/de4x5.c	2012-03-19 10:43:43.920034656 +0100
@@ -5392,7 +5392,7 @@ de4x5_ioctl(struct net_device *dev, stru
 	for (i=0; i<ETH_ALEN; i++) {
 	    tmp.addr[i] = dev->dev_addr[i];
 	}
-	if (copy_to_user(ioc->data, tmp.addr, ioc->len)) return -EFAULT;
+	if (ioc->len > sizeof tmp.addr || copy_to_user(ioc->data, tmp.addr, ioc->len)) return -EFAULT;
 	break;
 
     case DE4X5_SET_HWADDR:           /* Set the hardware address */
@@ -5432,7 +5432,7 @@ de4x5_ioctl(struct net_device *dev, stru
 	spin_lock_irqsave(&lp->lock, flags);
 	memcpy(&statbuf, &lp->pktStats, ioc->len);
 	spin_unlock_irqrestore(&lp->lock, flags);
-	if (copy_to_user(ioc->data, &statbuf, ioc->len))
+	if (ioc->len > sizeof statbuf || copy_to_user(ioc->data, &statbuf, ioc->len))
 		return -EFAULT;
 	break;
     }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/ethernet/dec/tulip/eeprom.c linux-3.3.8-pax/drivers/net/ethernet/dec/tulip/eeprom.c
--- linux-3.3.8/drivers/net/ethernet/dec/tulip/eeprom.c	2012-01-08 19:48:06.999472052 +0100
+++ linux-3.3.8-pax/drivers/net/ethernet/dec/tulip/eeprom.c	2012-03-19 10:43:43.924034655 +0100
@@ -79,7 +79,7 @@ static struct eeprom_fixup eeprom_fixups
   {NULL}};
 
 
-static const char *block_name[] __devinitdata = {
+static const char *block_name[] __devinitconst = {
 	"21140 non-MII",
 	"21140 MII PHY",
 	"21142 Serial PHY",
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/ethernet/dec/tulip/winbond-840.c linux-3.3.8-pax/drivers/net/ethernet/dec/tulip/winbond-840.c
--- linux-3.3.8/drivers/net/ethernet/dec/tulip/winbond-840.c	2012-03-19 10:39:02.892049660 +0100
+++ linux-3.3.8-pax/drivers/net/ethernet/dec/tulip/winbond-840.c	2012-03-19 10:43:43.932034654 +0100
@@ -236,7 +236,7 @@ struct pci_id_info {
         int drv_flags;		/* Driver use, intended as capability flags. */
 };
 
-static const struct pci_id_info pci_id_tbl[] __devinitdata = {
+static const struct pci_id_info pci_id_tbl[] __devinitconst = {
 	{ 				/* Sometime a Level-One switch card. */
 	  "Winbond W89c840",	CanHaveMII | HasBrokenTx | FDXOnNoMII},
 	{ "Winbond W89c840",	CanHaveMII | HasBrokenTx},
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/ethernet/dlink/sundance.c linux-3.3.8-pax/drivers/net/ethernet/dlink/sundance.c
--- linux-3.3.8/drivers/net/ethernet/dlink/sundance.c	2012-03-19 10:39:02.892049660 +0100
+++ linux-3.3.8-pax/drivers/net/ethernet/dlink/sundance.c	2012-03-19 10:43:43.940034654 +0100
@@ -218,7 +218,7 @@ enum {
 struct pci_id_info {
         const char *name;
 };
-static const struct pci_id_info pci_id_tbl[] __devinitdata = {
+static const struct pci_id_info pci_id_tbl[] __devinitconst = {
 	{"D-Link DFE-550TX FAST Ethernet Adapter"},
 	{"D-Link DFE-550FX 100Mbps Fiber-optics Adapter"},
 	{"D-Link DFE-580TX 4 port Server Adapter"},
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/ethernet/emulex/benet/be_main.c linux-3.3.8-pax/drivers/net/ethernet/emulex/benet/be_main.c
--- linux-3.3.8/drivers/net/ethernet/emulex/benet/be_main.c	2012-03-19 10:39:02.904049661 +0100
+++ linux-3.3.8-pax/drivers/net/ethernet/emulex/benet/be_main.c	2012-03-19 10:43:43.940034654 +0100
@@ -402,7 +402,7 @@ static void accumulate_16bit_val(u32 *ac
 
 	if (wrapped)
 		newacc += 65536;
-	ACCESS_ONCE(*acc) = newacc;
+	ACCESS_ONCE_RW(*acc) = newacc;
 }
 
 void be_parse_stats(struct be_adapter *adapter)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/ethernet/faraday/ftgmac100.c linux-3.3.8-pax/drivers/net/ethernet/faraday/ftgmac100.c
--- linux-3.3.8/drivers/net/ethernet/faraday/ftgmac100.c	2012-03-19 10:39:02.908049659 +0100
+++ linux-3.3.8-pax/drivers/net/ethernet/faraday/ftgmac100.c	2012-03-19 10:43:43.940034654 +0100
@@ -31,6 +31,8 @@
 #include <linux/netdevice.h>
 #include <linux/phy.h>
 #include <linux/platform_device.h>
+#include <linux/interrupt.h>
+#include <linux/irqreturn.h>
 #include <net/ip.h>
 
 #include "ftgmac100.h"
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/ethernet/faraday/ftmac100.c linux-3.3.8-pax/drivers/net/ethernet/faraday/ftmac100.c
--- linux-3.3.8/drivers/net/ethernet/faraday/ftmac100.c	2012-03-19 10:39:02.908049659 +0100
+++ linux-3.3.8-pax/drivers/net/ethernet/faraday/ftmac100.c	2012-03-19 10:43:43.940034655 +0100
@@ -31,6 +31,8 @@
 #include <linux/module.h>
 #include <linux/netdevice.h>
 #include <linux/platform_device.h>
+#include <linux/interrupt.h>
+#include <linux/irqreturn.h>
 
 #include "ftmac100.h"
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/ethernet/fealnx.c linux-3.3.8-pax/drivers/net/ethernet/fealnx.c
--- linux-3.3.8/drivers/net/ethernet/fealnx.c	2012-03-19 10:39:02.908049659 +0100
+++ linux-3.3.8-pax/drivers/net/ethernet/fealnx.c	2012-03-19 10:43:43.940034655 +0100
@@ -150,7 +150,7 @@ struct chip_info {
 	int flags;
 };
 
-static const struct chip_info skel_netdrv_tbl[] __devinitdata = {
+static const struct chip_info skel_netdrv_tbl[] __devinitconst = {
  	{ "100/10M Ethernet PCI Adapter",	HAS_MII_XCVR },
 	{ "100/10M Ethernet PCI Adapter",	HAS_CHIP_XCVR },
 	{ "1000/100/10M Ethernet PCI Adapter",	HAS_MII_XCVR },
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/ethernet/intel/e1000e/80003es2lan.c linux-3.3.8-pax/drivers/net/ethernet/intel/e1000e/80003es2lan.c
--- linux-3.3.8/drivers/net/ethernet/intel/e1000e/80003es2lan.c	2012-01-08 19:48:07.339472033 +0100
+++ linux-3.3.8-pax/drivers/net/ethernet/intel/e1000e/80003es2lan.c	2012-03-19 10:43:43.940034655 +0100
@@ -205,7 +205,7 @@ static s32 e1000_init_mac_params_80003es
 {
 	struct e1000_hw *hw = &adapter->hw;
 	struct e1000_mac_info *mac = &hw->mac;
-	struct e1000_mac_operations *func = &mac->ops;
+	e1000_mac_operations_no_const *func = &mac->ops;
 
 	/* Set media type */
 	switch (adapter->pdev->device) {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/ethernet/intel/e1000e/82571.c linux-3.3.8-pax/drivers/net/ethernet/intel/e1000e/82571.c
--- linux-3.3.8/drivers/net/ethernet/intel/e1000e/82571.c	2012-01-08 19:48:07.343472033 +0100
+++ linux-3.3.8-pax/drivers/net/ethernet/intel/e1000e/82571.c	2012-03-19 10:43:43.944034655 +0100
@@ -239,7 +239,7 @@ static s32 e1000_init_mac_params_82571(s
 {
 	struct e1000_hw *hw = &adapter->hw;
 	struct e1000_mac_info *mac = &hw->mac;
-	struct e1000_mac_operations *func = &mac->ops;
+	e1000_mac_operations_no_const *func = &mac->ops;
 	u32 swsm = 0;
 	u32 swsm2 = 0;
 	bool force_clear_smbi = false;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/ethernet/intel/e1000e/hw.h linux-3.3.8-pax/drivers/net/ethernet/intel/e1000e/hw.h
--- linux-3.3.8/drivers/net/ethernet/intel/e1000e/hw.h	2012-01-08 19:48:07.383472031 +0100
+++ linux-3.3.8-pax/drivers/net/ethernet/intel/e1000e/hw.h	2012-03-19 10:43:43.944034655 +0100
@@ -778,6 +778,7 @@ struct e1000_mac_operations {
 	void (*write_vfta)(struct e1000_hw *, u32, u32);
 	s32  (*read_mac_addr)(struct e1000_hw *);
 };
+typedef struct e1000_mac_operations __no_const e1000_mac_operations_no_const;
 
 /*
  * When to use various PHY register access functions:
@@ -818,6 +819,7 @@ struct e1000_phy_operations {
 	void (*power_up)(struct e1000_hw *);
 	void (*power_down)(struct e1000_hw *);
 };
+typedef struct e1000_phy_operations __no_const e1000_phy_operations_no_const;
 
 /* Function pointers for the NVM. */
 struct e1000_nvm_operations {
@@ -829,9 +831,10 @@ struct e1000_nvm_operations {
 	s32  (*validate)(struct e1000_hw *);
 	s32  (*write)(struct e1000_hw *, u16, u16, u16 *);
 };
+typedef struct e1000_nvm_operations __no_const e1000_nvm_operations_no_const;
 
 struct e1000_mac_info {
-	struct e1000_mac_operations ops;
+	e1000_mac_operations_no_const ops;
 	u8 addr[ETH_ALEN];
 	u8 perm_addr[ETH_ALEN];
 
@@ -872,7 +875,7 @@ struct e1000_mac_info {
 };
 
 struct e1000_phy_info {
-	struct e1000_phy_operations ops;
+	e1000_phy_operations_no_const ops;
 
 	enum e1000_phy_type type;
 
@@ -906,7 +909,7 @@ struct e1000_phy_info {
 };
 
 struct e1000_nvm_info {
-	struct e1000_nvm_operations ops;
+	e1000_nvm_operations_no_const ops;
 
 	enum e1000_nvm_type type;
 	enum e1000_nvm_override override;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/ethernet/intel/igb/e1000_hw.h linux-3.3.8-pax/drivers/net/ethernet/intel/igb/e1000_hw.h
--- linux-3.3.8/drivers/net/ethernet/intel/igb/e1000_hw.h	2012-03-19 10:39:03.032049652 +0100
+++ linux-3.3.8-pax/drivers/net/ethernet/intel/igb/e1000_hw.h	2012-03-19 10:43:43.944034655 +0100
@@ -314,6 +314,7 @@ struct e1000_mac_operations {
 	s32  (*read_mac_addr)(struct e1000_hw *);
 	s32  (*get_speed_and_duplex)(struct e1000_hw *, u16 *, u16 *);
 };
+typedef struct e1000_mac_operations __no_const e1000_mac_operations_no_const;
 
 struct e1000_phy_operations {
 	s32  (*acquire)(struct e1000_hw *);
@@ -330,6 +331,7 @@ struct e1000_phy_operations {
 	s32  (*set_d3_lplu_state)(struct e1000_hw *, bool);
 	s32  (*write_reg)(struct e1000_hw *, u32, u16);
 };
+typedef struct e1000_phy_operations __no_const e1000_phy_operations_no_const;
 
 struct e1000_nvm_operations {
 	s32  (*acquire)(struct e1000_hw *);
@@ -339,6 +341,7 @@ struct e1000_nvm_operations {
 	s32  (*update)(struct e1000_hw *);
 	s32  (*validate)(struct e1000_hw *);
 };
+typedef struct e1000_nvm_operations __no_const e1000_nvm_operations_no_const;
 
 struct e1000_info {
 	s32 (*get_invariants)(struct e1000_hw *);
@@ -350,7 +353,7 @@ struct e1000_info {
 extern const struct e1000_info e1000_82575_info;
 
 struct e1000_mac_info {
-	struct e1000_mac_operations ops;
+	e1000_mac_operations_no_const ops;
 
 	u8 addr[6];
 	u8 perm_addr[6];
@@ -388,7 +391,7 @@ struct e1000_mac_info {
 };
 
 struct e1000_phy_info {
-	struct e1000_phy_operations ops;
+	e1000_phy_operations_no_const ops;
 
 	enum e1000_phy_type type;
 
@@ -423,7 +426,7 @@ struct e1000_phy_info {
 };
 
 struct e1000_nvm_info {
-	struct e1000_nvm_operations ops;
+	e1000_nvm_operations_no_const ops;
 	enum e1000_nvm_type type;
 	enum e1000_nvm_override override;
 
@@ -468,6 +471,7 @@ struct e1000_mbx_operations {
 	s32 (*check_for_ack)(struct e1000_hw *, u16);
 	s32 (*check_for_rst)(struct e1000_hw *, u16);
 };
+typedef struct e1000_mbx_operations __no_const e1000_mbx_operations_no_const;
 
 struct e1000_mbx_stats {
 	u32 msgs_tx;
@@ -479,7 +483,7 @@ struct e1000_mbx_stats {
 };
 
 struct e1000_mbx_info {
-	struct e1000_mbx_operations ops;
+	e1000_mbx_operations_no_const ops;
 	struct e1000_mbx_stats stats;
 	u32 timeout;
 	u32 usec_delay;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/ethernet/intel/igbvf/vf.h linux-3.3.8-pax/drivers/net/ethernet/intel/igbvf/vf.h
--- linux-3.3.8/drivers/net/ethernet/intel/igbvf/vf.h	2012-03-19 10:39:03.076049650 +0100
+++ linux-3.3.8-pax/drivers/net/ethernet/intel/igbvf/vf.h	2012-03-19 10:43:43.948034654 +0100
@@ -189,9 +189,10 @@ struct e1000_mac_operations {
 	s32  (*read_mac_addr)(struct e1000_hw *);
 	s32  (*set_vfta)(struct e1000_hw *, u16, bool);
 };
+typedef struct e1000_mac_operations __no_const e1000_mac_operations_no_const;
 
 struct e1000_mac_info {
-	struct e1000_mac_operations ops;
+	e1000_mac_operations_no_const ops;
 	u8 addr[6];
 	u8 perm_addr[6];
 
@@ -213,6 +214,7 @@ struct e1000_mbx_operations {
 	s32 (*check_for_ack)(struct e1000_hw *);
 	s32 (*check_for_rst)(struct e1000_hw *);
 };
+typedef struct e1000_mbx_operations __no_const e1000_mbx_operations_no_const;
 
 struct e1000_mbx_stats {
 	u32 msgs_tx;
@@ -224,7 +226,7 @@ struct e1000_mbx_stats {
 };
 
 struct e1000_mbx_info {
-	struct e1000_mbx_operations ops;
+	e1000_mbx_operations_no_const ops;
 	struct e1000_mbx_stats stats;
 	u32 timeout;
 	u32 usec_delay;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h linux-3.3.8-pax/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h
--- linux-3.3.8/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h	2012-03-19 10:39:03.120049649 +0100
+++ linux-3.3.8-pax/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h	2012-03-19 10:43:43.948034654 +0100
@@ -2708,6 +2708,7 @@ struct ixgbe_eeprom_operations {
 	s32 (*update_checksum)(struct ixgbe_hw *);
 	u16 (*calc_checksum)(struct ixgbe_hw *);
 };
+typedef struct ixgbe_eeprom_operations __no_const ixgbe_eeprom_operations_no_const;
 
 struct ixgbe_mac_operations {
 	s32 (*init_hw)(struct ixgbe_hw *);
@@ -2769,6 +2770,7 @@ struct ixgbe_mac_operations {
 	/* Manageability interface */
 	s32 (*set_fw_drv_ver)(struct ixgbe_hw *, u8, u8, u8, u8);
 };
+typedef struct ixgbe_mac_operations __no_const ixgbe_mac_operations_no_const;
 
 struct ixgbe_phy_operations {
 	s32 (*identify)(struct ixgbe_hw *);
@@ -2788,9 +2790,10 @@ struct ixgbe_phy_operations {
 	s32 (*write_i2c_eeprom)(struct ixgbe_hw *, u8, u8);
 	s32 (*check_overtemp)(struct ixgbe_hw *);
 };
+typedef struct ixgbe_phy_operations __no_const ixgbe_phy_operations_no_const;
 
 struct ixgbe_eeprom_info {
-	struct ixgbe_eeprom_operations  ops;
+	ixgbe_eeprom_operations_no_const ops;
 	enum ixgbe_eeprom_type          type;
 	u32                             semaphore_delay;
 	u16                             word_size;
@@ -2800,7 +2803,7 @@ struct ixgbe_eeprom_info {
 
 #define IXGBE_FLAGS_DOUBLE_RESET_REQUIRED	0x01
 struct ixgbe_mac_info {
-	struct ixgbe_mac_operations     ops;
+	ixgbe_mac_operations_no_const   ops;
 	enum ixgbe_mac_type             type;
 	u8                              addr[ETH_ALEN];
 	u8                              perm_addr[ETH_ALEN];
@@ -2828,7 +2831,7 @@ struct ixgbe_mac_info {
 };
 
 struct ixgbe_phy_info {
-	struct ixgbe_phy_operations     ops;
+	ixgbe_phy_operations_no_const   ops;
 	struct mdio_if_info		mdio;
 	enum ixgbe_phy_type             type;
 	u32                             id;
@@ -2856,6 +2859,7 @@ struct ixgbe_mbx_operations {
 	s32 (*check_for_ack)(struct ixgbe_hw *, u16);
 	s32 (*check_for_rst)(struct ixgbe_hw *, u16);
 };
+typedef struct ixgbe_mbx_operations __no_const ixgbe_mbx_operations_no_const;
 
 struct ixgbe_mbx_stats {
 	u32 msgs_tx;
@@ -2867,7 +2871,7 @@ struct ixgbe_mbx_stats {
 };
 
 struct ixgbe_mbx_info {
-	struct ixgbe_mbx_operations ops;
+	ixgbe_mbx_operations_no_const ops;
 	struct ixgbe_mbx_stats stats;
 	u32 timeout;
 	u32 usec_delay;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/ethernet/intel/ixgbevf/vf.h linux-3.3.8-pax/drivers/net/ethernet/intel/ixgbevf/vf.h
--- linux-3.3.8/drivers/net/ethernet/intel/ixgbevf/vf.h	2012-03-19 10:39:03.144049646 +0100
+++ linux-3.3.8-pax/drivers/net/ethernet/intel/ixgbevf/vf.h	2012-03-19 10:43:43.948034654 +0100
@@ -70,6 +70,7 @@ struct ixgbe_mac_operations {
 	s32 (*clear_vfta)(struct ixgbe_hw *);
 	s32 (*set_vfta)(struct ixgbe_hw *, u32, u32, bool);
 };
+typedef struct ixgbe_mac_operations __no_const ixgbe_mac_operations_no_const;
 
 enum ixgbe_mac_type {
 	ixgbe_mac_unknown = 0,
@@ -79,7 +80,7 @@ enum ixgbe_mac_type {
 };
 
 struct ixgbe_mac_info {
-	struct ixgbe_mac_operations ops;
+	ixgbe_mac_operations_no_const ops;
 	u8 addr[6];
 	u8 perm_addr[6];
 
@@ -103,6 +104,7 @@ struct ixgbe_mbx_operations {
 	s32 (*check_for_ack)(struct ixgbe_hw *);
 	s32 (*check_for_rst)(struct ixgbe_hw *);
 };
+typedef struct ixgbe_mbx_operations __no_const ixgbe_mbx_operations_no_const;
 
 struct ixgbe_mbx_stats {
 	u32 msgs_tx;
@@ -114,7 +116,7 @@ struct ixgbe_mbx_stats {
 };
 
 struct ixgbe_mbx_info {
-	struct ixgbe_mbx_operations ops;
+	ixgbe_mbx_operations_no_const ops;
 	struct ixgbe_mbx_stats stats;
 	u32 timeout;
 	u32 udelay;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/ethernet/mellanox/mlx4/main.c linux-3.3.8-pax/drivers/net/ethernet/mellanox/mlx4/main.c
--- linux-3.3.8/drivers/net/ethernet/mellanox/mlx4/main.c	2012-04-03 22:02:49.514109980 +0200
+++ linux-3.3.8-pax/drivers/net/ethernet/mellanox/mlx4/main.c	2012-04-03 22:03:06.826110826 +0200
@@ -41,6 +41,7 @@
 #include <linux/slab.h>
 #include <linux/io-mapping.h>
 #include <linux/delay.h>
+#include <linux/sched.h>
 
 #include <linux/mlx4/device.h>
 #include <linux/mlx4/doorbell.h>
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/ethernet/neterion/vxge/vxge-config.h linux-3.3.8-pax/drivers/net/ethernet/neterion/vxge/vxge-config.h
--- linux-3.3.8/drivers/net/ethernet/neterion/vxge/vxge-config.h	2012-01-08 19:48:08.607471966 +0100
+++ linux-3.3.8-pax/drivers/net/ethernet/neterion/vxge/vxge-config.h	2012-03-19 10:43:43.952034653 +0100
@@ -514,7 +514,7 @@ struct vxge_hw_uld_cbs {
 	void (*link_down)(struct __vxge_hw_device *devh);
 	void (*crit_err)(struct __vxge_hw_device *devh,
 			enum vxge_hw_event type, u64 ext_data);
-};
+} __no_const;
 
 /*
  * struct __vxge_hw_blockpool_entry - Block private data structure
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/ethernet/neterion/vxge/vxge-traffic.h linux-3.3.8-pax/drivers/net/ethernet/neterion/vxge/vxge-traffic.h
--- linux-3.3.8/drivers/net/ethernet/neterion/vxge/vxge-traffic.h	2012-01-08 19:48:08.667471962 +0100
+++ linux-3.3.8-pax/drivers/net/ethernet/neterion/vxge/vxge-traffic.h	2012-03-19 10:43:43.956034652 +0100
@@ -2088,7 +2088,7 @@ struct vxge_hw_mempool_cbs {
 			struct vxge_hw_mempool_dma	*dma_object,
 			u32			index,
 			u32			is_last);
-};
+} __no_const;
 
 #define VXGE_HW_VIRTUAL_PATH_HANDLE(vpath)				\
 		((struct __vxge_hw_vpath_handle *)(vpath)->vpath_handles.next)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/ethernet/realtek/r8169.c linux-3.3.8-pax/drivers/net/ethernet/realtek/r8169.c
--- linux-3.3.8/drivers/net/ethernet/realtek/r8169.c	2012-03-19 10:39:03.340049636 +0100
+++ linux-3.3.8-pax/drivers/net/ethernet/realtek/r8169.c	2012-03-19 10:43:43.956034652 +0100
@@ -695,17 +695,17 @@ struct rtl8169_private {
 	struct mdio_ops {
 		void (*write)(void __iomem *, int, int);
 		int (*read)(void __iomem *, int);
-	} mdio_ops;
+	} __no_const mdio_ops;
 
 	struct pll_power_ops {
 		void (*down)(struct rtl8169_private *);
 		void (*up)(struct rtl8169_private *);
-	} pll_power_ops;
+	} __no_const pll_power_ops;
 
 	struct jumbo_ops {
 		void (*enable)(struct rtl8169_private *);
 		void (*disable)(struct rtl8169_private *);
-	} jumbo_ops;
+	} __no_const jumbo_ops;
 
 	int (*set_speed)(struct net_device *, u8 aneg, u16 sp, u8 dpx, u32 adv);
 	int (*get_settings)(struct net_device *, struct ethtool_cmd *);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/ethernet/sis/sis190.c linux-3.3.8-pax/drivers/net/ethernet/sis/sis190.c
--- linux-3.3.8/drivers/net/ethernet/sis/sis190.c	2012-03-19 10:39:03.364049633 +0100
+++ linux-3.3.8-pax/drivers/net/ethernet/sis/sis190.c	2012-03-19 10:43:43.968034652 +0100
@@ -1622,7 +1622,7 @@ static int __devinit sis190_get_mac_addr
 static int __devinit sis190_get_mac_addr_from_apc(struct pci_dev *pdev,
 						  struct net_device *dev)
 {
-	static const u16 __devinitdata ids[] = { 0x0965, 0x0966, 0x0968 };
+	static const u16 __devinitconst ids[] = { 0x0965, 0x0966, 0x0968 };
 	struct sis190_private *tp = netdev_priv(dev);
 	struct pci_dev *isa_bridge;
 	u8 reg, tmp8;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/ethernet/stmicro/stmmac/mmc_core.c linux-3.3.8-pax/drivers/net/ethernet/stmicro/stmmac/mmc_core.c
--- linux-3.3.8/drivers/net/ethernet/stmicro/stmmac/mmc_core.c	2012-03-19 10:39:03.516049627 +0100
+++ linux-3.3.8-pax/drivers/net/ethernet/stmicro/stmmac/mmc_core.c	2012-03-19 10:43:43.972034652 +0100
@@ -140,8 +140,8 @@ void dwmac_mmc_ctrl(void __iomem *ioaddr
 
 	writel(value, ioaddr + MMC_CNTRL);
 
-	pr_debug("stmmac: MMC ctrl register (offset 0x%x): 0x%08x\n",
-		 MMC_CNTRL, value);
+//	pr_debug("stmmac: MMC ctrl register (offset 0x%x): 0x%08x\n",
+//		 MMC_CNTRL, value);
 }
 
 /* To mask all all interrupts.*/
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/hyperv/hyperv_net.h linux-3.3.8-pax/drivers/net/hyperv/hyperv_net.h
--- linux-3.3.8/drivers/net/hyperv/hyperv_net.h	2012-03-19 10:39:03.572049624 +0100
+++ linux-3.3.8-pax/drivers/net/hyperv/hyperv_net.h	2012-03-19 10:43:43.976034652 +0100
@@ -97,7 +97,7 @@ struct rndis_device {
 
 	enum rndis_device_state state;
 	bool link_state;
-	atomic_t new_req_id;
+	atomic_unchecked_t new_req_id;
 
 	spinlock_t request_lock;
 	struct list_head req_list;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/hyperv/rndis_filter.c linux-3.3.8-pax/drivers/net/hyperv/rndis_filter.c
--- linux-3.3.8/drivers/net/hyperv/rndis_filter.c	2012-03-19 10:39:03.572049624 +0100
+++ linux-3.3.8-pax/drivers/net/hyperv/rndis_filter.c	2012-03-19 10:43:43.976034652 +0100
@@ -96,7 +96,7 @@ static struct rndis_request *get_rndis_r
 	 * template
 	 */
 	set = &rndis_msg->msg.set_req;
-	set->req_id = atomic_inc_return(&dev->new_req_id);
+	set->req_id = atomic_inc_return_unchecked(&dev->new_req_id);
 
 	/* Add to the request list */
 	spin_lock_irqsave(&dev->request_lock, flags);
@@ -627,7 +627,7 @@ static void rndis_filter_halt_device(str
 
 	/* Setup the rndis set */
 	halt = &request->request_msg.msg.halt_req;
-	halt->req_id = atomic_inc_return(&dev->new_req_id);
+	halt->req_id = atomic_inc_return_unchecked(&dev->new_req_id);
 
 	/* Ignore return since this msg is optional. */
 	rndis_filter_send_request(dev, request);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/ppp/ppp_generic.c linux-3.3.8-pax/drivers/net/ppp/ppp_generic.c
--- linux-3.3.8/drivers/net/ppp/ppp_generic.c	2012-04-27 22:14:17.693191281 +0200
+++ linux-3.3.8-pax/drivers/net/ppp/ppp_generic.c	2012-04-27 22:14:29.173190668 +0200
@@ -986,7 +986,6 @@ ppp_net_ioctl(struct net_device *dev, st
 	void __user *addr = (void __user *) ifr->ifr_ifru.ifru_data;
 	struct ppp_stats stats;
 	struct ppp_comp_stats cstats;
-	char *vers;
 
 	switch (cmd) {
 	case SIOCGPPPSTATS:
@@ -1008,8 +1007,7 @@ ppp_net_ioctl(struct net_device *dev, st
 		break;
 
 	case SIOCGPPPVER:
-		vers = PPP_VERSION;
-		if (copy_to_user(addr, vers, strlen(vers) + 1))
+		if (copy_to_user(addr, PPP_VERSION, sizeof(PPP_VERSION)))
 			break;
 		err = 0;
 		break;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/tokenring/abyss.c linux-3.3.8-pax/drivers/net/tokenring/abyss.c
--- linux-3.3.8/drivers/net/tokenring/abyss.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/net/tokenring/abyss.c	2012-03-19 10:43:43.976034653 +0100
@@ -451,10 +451,12 @@ static struct pci_driver abyss_driver =
 
 static int __init abyss_init (void)
 {
-	abyss_netdev_ops = tms380tr_netdev_ops;
+	pax_open_kernel();
+	memcpy((void *)&abyss_netdev_ops, &tms380tr_netdev_ops, sizeof(tms380tr_netdev_ops));
 
-	abyss_netdev_ops.ndo_open = abyss_open;
-	abyss_netdev_ops.ndo_stop = abyss_close;
+	*(void **)&abyss_netdev_ops.ndo_open = abyss_open;
+	*(void **)&abyss_netdev_ops.ndo_stop = abyss_close;
+	pax_close_kernel();
 
 	return pci_register_driver(&abyss_driver);
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/tokenring/madgemc.c linux-3.3.8-pax/drivers/net/tokenring/madgemc.c
--- linux-3.3.8/drivers/net/tokenring/madgemc.c	2011-10-24 12:48:33.063091408 +0200
+++ linux-3.3.8-pax/drivers/net/tokenring/madgemc.c	2012-03-19 10:43:43.976034653 +0100
@@ -744,9 +744,11 @@ static struct mca_driver madgemc_driver
 
 static int __init madgemc_init (void)
 {
-	madgemc_netdev_ops = tms380tr_netdev_ops;
-	madgemc_netdev_ops.ndo_open = madgemc_open;
-	madgemc_netdev_ops.ndo_stop = madgemc_close;
+	pax_open_kernel();
+	memcpy((void *)&madgemc_netdev_ops, &tms380tr_netdev_ops, sizeof(tms380tr_netdev_ops));
+	*(void **)&madgemc_netdev_ops.ndo_open = madgemc_open;
+	*(void **)&madgemc_netdev_ops.ndo_stop = madgemc_close;
+	pax_close_kernel();
 
 	return mca_register_driver (&madgemc_driver);
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/tokenring/proteon.c linux-3.3.8-pax/drivers/net/tokenring/proteon.c
--- linux-3.3.8/drivers/net/tokenring/proteon.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/net/tokenring/proteon.c	2012-03-19 10:43:43.976034653 +0100
@@ -353,9 +353,11 @@ static int __init proteon_init(void)
 	struct platform_device *pdev;
 	int i, num = 0, err = 0;
 
-	proteon_netdev_ops = tms380tr_netdev_ops;
-	proteon_netdev_ops.ndo_open = proteon_open;
-	proteon_netdev_ops.ndo_stop = tms380tr_close;
+	pax_open_kernel();
+	memcpy((void *)&proteon_netdev_ops, &tms380tr_netdev_ops, sizeof(tms380tr_netdev_ops));
+	*(void **)&proteon_netdev_ops.ndo_open = proteon_open;
+	*(void **)&proteon_netdev_ops.ndo_stop = tms380tr_close;
+	pax_close_kernel();
 
 	err = platform_driver_register(&proteon_driver);
 	if (err)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/tokenring/skisa.c linux-3.3.8-pax/drivers/net/tokenring/skisa.c
--- linux-3.3.8/drivers/net/tokenring/skisa.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/net/tokenring/skisa.c	2012-03-19 10:43:43.976034653 +0100
@@ -363,9 +363,11 @@ static int __init sk_isa_init(void)
 	struct platform_device *pdev;
 	int i, num = 0, err = 0;
 
-	sk_isa_netdev_ops = tms380tr_netdev_ops;
-	sk_isa_netdev_ops.ndo_open = sk_isa_open;
-	sk_isa_netdev_ops.ndo_stop = tms380tr_close;
+	pax_open_kernel();
+	memcpy((void *)&sk_isa_netdev_ops, &tms380tr_netdev_ops, sizeof(tms380tr_netdev_ops));
+	*(void **)&sk_isa_netdev_ops.ndo_open = sk_isa_open;
+	*(void **)&sk_isa_netdev_ops.ndo_stop = tms380tr_close;
+	pax_close_kernel();
 
 	err = platform_driver_register(&sk_isa_driver);
 	if (err)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/usb/hso.c linux-3.3.8-pax/drivers/net/usb/hso.c
--- linux-3.3.8/drivers/net/usb/hso.c	2012-03-19 10:39:03.692049618 +0100
+++ linux-3.3.8-pax/drivers/net/usb/hso.c	2012-03-19 10:43:43.980034653 +0100
@@ -71,7 +71,7 @@
 #include <asm/byteorder.h>
 #include <linux/serial_core.h>
 #include <linux/serial.h>
-
+#include <asm/local.h>
 
 #define MOD_AUTHOR			"Option Wireless"
 #define MOD_DESCRIPTION			"USB High Speed Option driver"
@@ -257,7 +257,7 @@ struct hso_serial {
 
 	/* from usb_serial_port */
 	struct tty_struct *tty;
-	int open_count;
+	local_t open_count;
 	spinlock_t serial_lock;
 
 	int (*write_data) (struct hso_serial *serial);
@@ -1190,7 +1190,7 @@ static void put_rxbuf_data_and_resubmit_
 	struct urb *urb;
 
 	urb = serial->rx_urb[0];
-	if (serial->open_count > 0) {
+	if (local_read(&serial->open_count) > 0) {
 		count = put_rxbuf_data(urb, serial);
 		if (count == -1)
 			return;
@@ -1226,7 +1226,7 @@ static void hso_std_serial_read_bulk_cal
 	DUMP1(urb->transfer_buffer, urb->actual_length);
 
 	/* Anyone listening? */
-	if (serial->open_count == 0)
+	if (local_read(&serial->open_count) == 0)
 		return;
 
 	if (status == 0) {
@@ -1311,8 +1311,7 @@ static int hso_serial_open(struct tty_st
 	spin_unlock_irq(&serial->serial_lock);
 
 	/* check for port already opened, if not set the termios */
-	serial->open_count++;
-	if (serial->open_count == 1) {
+	if (local_inc_return(&serial->open_count) == 1) {
 		serial->rx_state = RX_IDLE;
 		/* Force default termio settings */
 		_hso_serial_set_termios(tty, NULL);
@@ -1324,7 +1323,7 @@ static int hso_serial_open(struct tty_st
 		result = hso_start_serial_device(serial->parent, GFP_KERNEL);
 		if (result) {
 			hso_stop_serial_device(serial->parent);
-			serial->open_count--;
+			local_dec(&serial->open_count);
 			kref_put(&serial->parent->ref, hso_serial_ref_free);
 		}
 	} else {
@@ -1361,10 +1360,10 @@ static void hso_serial_close(struct tty_
 
 	/* reset the rts and dtr */
 	/* do the actual close */
-	serial->open_count--;
+	local_dec(&serial->open_count);
 
-	if (serial->open_count <= 0) {
-		serial->open_count = 0;
+	if (local_read(&serial->open_count) <= 0) {
+		local_set(&serial->open_count,  0);
 		spin_lock_irq(&serial->serial_lock);
 		if (serial->tty == tty) {
 			serial->tty->driver_data = NULL;
@@ -1446,7 +1445,7 @@ static void hso_serial_set_termios(struc
 
 	/* the actual setup */
 	spin_lock_irqsave(&serial->serial_lock, flags);
-	if (serial->open_count)
+	if (local_read(&serial->open_count))
 		_hso_serial_set_termios(tty, old);
 	else
 		tty->termios = old;
@@ -1905,7 +1904,7 @@ static void intr_callback(struct urb *ur
 				D1("Pending read interrupt on port %d\n", i);
 				spin_lock(&serial->serial_lock);
 				if (serial->rx_state == RX_IDLE &&
-					serial->open_count > 0) {
+					local_read(&serial->open_count) > 0) {
 					/* Setup and send a ctrl req read on
 					 * port i */
 					if (!serial->rx_urb_filled[0]) {
@@ -3098,7 +3097,7 @@ static int hso_resume(struct usb_interfa
 	/* Start all serial ports */
 	for (i = 0; i < HSO_SERIAL_TTY_MINORS; i++) {
 		if (serial_table[i] && (serial_table[i]->interface == iface)) {
-			if (dev2ser(serial_table[i])->open_count) {
+			if (local_read(&dev2ser(serial_table[i])->open_count)) {
 				result =
 				    hso_start_serial_device(serial_table[i], GFP_NOIO);
 				hso_kick_transmit(dev2ser(serial_table[i]));
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/wireless/ath/ath9k/ar9002_mac.c linux-3.3.8-pax/drivers/net/wireless/ath/ath9k/ar9002_mac.c
--- linux-3.3.8/drivers/net/wireless/ath/ath9k/ar9002_mac.c	2012-03-19 10:39:03.992049601 +0100
+++ linux-3.3.8-pax/drivers/net/wireless/ath/ath9k/ar9002_mac.c	2012-03-19 10:43:43.980034653 +0100
@@ -183,8 +183,8 @@ ar9002_set_txdesc(struct ath_hw *ah, voi
 	ads->ds_txstatus6 = ads->ds_txstatus7 = 0;
 	ads->ds_txstatus8 = ads->ds_txstatus9 = 0;
 
-	ACCESS_ONCE(ads->ds_link) = i->link;
-	ACCESS_ONCE(ads->ds_data) = i->buf_addr[0];
+	ACCESS_ONCE_RW(ads->ds_link) = i->link;
+	ACCESS_ONCE_RW(ads->ds_data) = i->buf_addr[0];
 
 	ctl1 = i->buf_len[0] | (i->is_last ? 0 : AR_TxMore);
 	ctl6 = SM(i->keytype, AR_EncrType);
@@ -198,26 +198,26 @@ ar9002_set_txdesc(struct ath_hw *ah, voi
 
 	if ((i->is_first || i->is_last) &&
 	    i->aggr != AGGR_BUF_MIDDLE && i->aggr != AGGR_BUF_LAST) {
-		ACCESS_ONCE(ads->ds_ctl2) = set11nTries(i->rates, 0)
+		ACCESS_ONCE_RW(ads->ds_ctl2) = set11nTries(i->rates, 0)
 			| set11nTries(i->rates, 1)
 			| set11nTries(i->rates, 2)
 			| set11nTries(i->rates, 3)
 			| (i->dur_update ? AR_DurUpdateEna : 0)
 			| SM(0, AR_BurstDur);
 
-		ACCESS_ONCE(ads->ds_ctl3) = set11nRate(i->rates, 0)
+		ACCESS_ONCE_RW(ads->ds_ctl3) = set11nRate(i->rates, 0)
 			| set11nRate(i->rates, 1)
 			| set11nRate(i->rates, 2)
 			| set11nRate(i->rates, 3);
 	} else {
-		ACCESS_ONCE(ads->ds_ctl2) = 0;
-		ACCESS_ONCE(ads->ds_ctl3) = 0;
+		ACCESS_ONCE_RW(ads->ds_ctl2) = 0;
+		ACCESS_ONCE_RW(ads->ds_ctl3) = 0;
 	}
 
 	if (!i->is_first) {
-		ACCESS_ONCE(ads->ds_ctl0) = 0;
-		ACCESS_ONCE(ads->ds_ctl1) = ctl1;
-		ACCESS_ONCE(ads->ds_ctl6) = ctl6;
+		ACCESS_ONCE_RW(ads->ds_ctl0) = 0;
+		ACCESS_ONCE_RW(ads->ds_ctl1) = ctl1;
+		ACCESS_ONCE_RW(ads->ds_ctl6) = ctl6;
 		return;
 	}
 
@@ -242,7 +242,7 @@ ar9002_set_txdesc(struct ath_hw *ah, voi
 		break;
 	}
 
-	ACCESS_ONCE(ads->ds_ctl0) = (i->pkt_len & AR_FrameLen)
+	ACCESS_ONCE_RW(ads->ds_ctl0) = (i->pkt_len & AR_FrameLen)
 		| (i->flags & ATH9K_TXDESC_VMF ? AR_VirtMoreFrag : 0)
 		| SM(i->txpower, AR_XmitPower)
 		| (i->flags & ATH9K_TXDESC_VEOL ? AR_VEOL : 0)
@@ -252,19 +252,19 @@ ar9002_set_txdesc(struct ath_hw *ah, voi
 		| (i->flags & ATH9K_TXDESC_RTSENA ? AR_RTSEnable :
 		   (i->flags & ATH9K_TXDESC_CTSENA ? AR_CTSEnable : 0));
 
-	ACCESS_ONCE(ads->ds_ctl1) = ctl1;
-	ACCESS_ONCE(ads->ds_ctl6) = ctl6;
+	ACCESS_ONCE_RW(ads->ds_ctl1) = ctl1;
+	ACCESS_ONCE_RW(ads->ds_ctl6) = ctl6;
 
 	if (i->aggr == AGGR_BUF_MIDDLE || i->aggr == AGGR_BUF_LAST)
 		return;
 
-	ACCESS_ONCE(ads->ds_ctl4) = set11nPktDurRTSCTS(i->rates, 0)
+	ACCESS_ONCE_RW(ads->ds_ctl4) = set11nPktDurRTSCTS(i->rates, 0)
 		| set11nPktDurRTSCTS(i->rates, 1);
 
-	ACCESS_ONCE(ads->ds_ctl5) = set11nPktDurRTSCTS(i->rates, 2)
+	ACCESS_ONCE_RW(ads->ds_ctl5) = set11nPktDurRTSCTS(i->rates, 2)
 		| set11nPktDurRTSCTS(i->rates, 3);
 
-	ACCESS_ONCE(ads->ds_ctl7) = set11nRateFlags(i->rates, 0)
+	ACCESS_ONCE_RW(ads->ds_ctl7) = set11nRateFlags(i->rates, 0)
 		| set11nRateFlags(i->rates, 1)
 		| set11nRateFlags(i->rates, 2)
 		| set11nRateFlags(i->rates, 3)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/wireless/ath/ath9k/ar9003_mac.c linux-3.3.8-pax/drivers/net/wireless/ath/ath9k/ar9003_mac.c
--- linux-3.3.8/drivers/net/wireless/ath/ath9k/ar9003_mac.c	2012-03-19 10:39:04.000049602 +0100
+++ linux-3.3.8-pax/drivers/net/wireless/ath/ath9k/ar9003_mac.c	2012-03-19 10:43:43.980034653 +0100
@@ -35,47 +35,47 @@ ar9003_set_txdesc(struct ath_hw *ah, voi
 	      (i->qcu << AR_TxQcuNum_S) | 0x17;
 
 	checksum += val;
-	ACCESS_ONCE(ads->info) = val;
+	ACCESS_ONCE_RW(ads->info) = val;
 
 	checksum += i->link;
-	ACCESS_ONCE(ads->link) = i->link;
+	ACCESS_ONCE_RW(ads->link) = i->link;
 
 	checksum += i->buf_addr[0];
-	ACCESS_ONCE(ads->data0) = i->buf_addr[0];
+	ACCESS_ONCE_RW(ads->data0) = i->buf_addr[0];
 	checksum += i->buf_addr[1];
-	ACCESS_ONCE(ads->data1) = i->buf_addr[1];
+	ACCESS_ONCE_RW(ads->data1) = i->buf_addr[1];
 	checksum += i->buf_addr[2];
-	ACCESS_ONCE(ads->data2) = i->buf_addr[2];
+	ACCESS_ONCE_RW(ads->data2) = i->buf_addr[2];
 	checksum += i->buf_addr[3];
-	ACCESS_ONCE(ads->data3) = i->buf_addr[3];
+	ACCESS_ONCE_RW(ads->data3) = i->buf_addr[3];
 
 	checksum += (val = (i->buf_len[0] << AR_BufLen_S) & AR_BufLen);
-	ACCESS_ONCE(ads->ctl3) = val;
+	ACCESS_ONCE_RW(ads->ctl3) = val;
 	checksum += (val = (i->buf_len[1] << AR_BufLen_S) & AR_BufLen);
-	ACCESS_ONCE(ads->ctl5) = val;
+	ACCESS_ONCE_RW(ads->ctl5) = val;
 	checksum += (val = (i->buf_len[2] << AR_BufLen_S) & AR_BufLen);
-	ACCESS_ONCE(ads->ctl7) = val;
+	ACCESS_ONCE_RW(ads->ctl7) = val;
 	checksum += (val = (i->buf_len[3] << AR_BufLen_S) & AR_BufLen);
-	ACCESS_ONCE(ads->ctl9) = val;
+	ACCESS_ONCE_RW(ads->ctl9) = val;
 
 	checksum = (u16) (((checksum & 0xffff) + (checksum >> 16)) & 0xffff);
-	ACCESS_ONCE(ads->ctl10) = checksum;
+	ACCESS_ONCE_RW(ads->ctl10) = checksum;
 
 	if (i->is_first || i->is_last) {
-		ACCESS_ONCE(ads->ctl13) = set11nTries(i->rates, 0)
+		ACCESS_ONCE_RW(ads->ctl13) = set11nTries(i->rates, 0)
 			| set11nTries(i->rates, 1)
 			| set11nTries(i->rates, 2)
 			| set11nTries(i->rates, 3)
 			| (i->dur_update ? AR_DurUpdateEna : 0)
 			| SM(0, AR_BurstDur);
 
-		ACCESS_ONCE(ads->ctl14) = set11nRate(i->rates, 0)
+		ACCESS_ONCE_RW(ads->ctl14) = set11nRate(i->rates, 0)
 			| set11nRate(i->rates, 1)
 			| set11nRate(i->rates, 2)
 			| set11nRate(i->rates, 3);
 	} else {
-		ACCESS_ONCE(ads->ctl13) = 0;
-		ACCESS_ONCE(ads->ctl14) = 0;
+		ACCESS_ONCE_RW(ads->ctl13) = 0;
+		ACCESS_ONCE_RW(ads->ctl14) = 0;
 	}
 
 	ads->ctl20 = 0;
@@ -84,17 +84,17 @@ ar9003_set_txdesc(struct ath_hw *ah, voi
 
 	ctl17 = SM(i->keytype, AR_EncrType);
 	if (!i->is_first) {
-		ACCESS_ONCE(ads->ctl11) = 0;
-		ACCESS_ONCE(ads->ctl12) = i->is_last ? 0 : AR_TxMore;
-		ACCESS_ONCE(ads->ctl15) = 0;
-		ACCESS_ONCE(ads->ctl16) = 0;
-		ACCESS_ONCE(ads->ctl17) = ctl17;
-		ACCESS_ONCE(ads->ctl18) = 0;
-		ACCESS_ONCE(ads->ctl19) = 0;
+		ACCESS_ONCE_RW(ads->ctl11) = 0;
+		ACCESS_ONCE_RW(ads->ctl12) = i->is_last ? 0 : AR_TxMore;
+		ACCESS_ONCE_RW(ads->ctl15) = 0;
+		ACCESS_ONCE_RW(ads->ctl16) = 0;
+		ACCESS_ONCE_RW(ads->ctl17) = ctl17;
+		ACCESS_ONCE_RW(ads->ctl18) = 0;
+		ACCESS_ONCE_RW(ads->ctl19) = 0;
 		return;
 	}
 
-	ACCESS_ONCE(ads->ctl11) = (i->pkt_len & AR_FrameLen)
+	ACCESS_ONCE_RW(ads->ctl11) = (i->pkt_len & AR_FrameLen)
 		| (i->flags & ATH9K_TXDESC_VMF ? AR_VirtMoreFrag : 0)
 		| SM(i->txpower, AR_XmitPower)
 		| (i->flags & ATH9K_TXDESC_VEOL ? AR_VEOL : 0)
@@ -130,22 +130,22 @@ ar9003_set_txdesc(struct ath_hw *ah, voi
 	val = (i->flags & ATH9K_TXDESC_PAPRD) >> ATH9K_TXDESC_PAPRD_S;
 	ctl12 |= SM(val, AR_PAPRDChainMask);
 
-	ACCESS_ONCE(ads->ctl12) = ctl12;
-	ACCESS_ONCE(ads->ctl17) = ctl17;
+	ACCESS_ONCE_RW(ads->ctl12) = ctl12;
+	ACCESS_ONCE_RW(ads->ctl17) = ctl17;
 
-	ACCESS_ONCE(ads->ctl15) = set11nPktDurRTSCTS(i->rates, 0)
+	ACCESS_ONCE_RW(ads->ctl15) = set11nPktDurRTSCTS(i->rates, 0)
 		| set11nPktDurRTSCTS(i->rates, 1);
 
-	ACCESS_ONCE(ads->ctl16) = set11nPktDurRTSCTS(i->rates, 2)
+	ACCESS_ONCE_RW(ads->ctl16) = set11nPktDurRTSCTS(i->rates, 2)
 		| set11nPktDurRTSCTS(i->rates, 3);
 
-	ACCESS_ONCE(ads->ctl18) = set11nRateFlags(i->rates, 0)
+	ACCESS_ONCE_RW(ads->ctl18) = set11nRateFlags(i->rates, 0)
 		| set11nRateFlags(i->rates, 1)
 		| set11nRateFlags(i->rates, 2)
 		| set11nRateFlags(i->rates, 3)
 		| SM(i->rtscts_rate, AR_RTSCTSRate);
 
-	ACCESS_ONCE(ads->ctl19) = AR_Not_Sounding;
+	ACCESS_ONCE_RW(ads->ctl19) = AR_Not_Sounding;
 }
 
 static u16 ar9003_calc_ptr_chksum(struct ar9003_txc *ads)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/wireless/ath/ath9k/hw.h linux-3.3.8-pax/drivers/net/wireless/ath/ath9k/hw.h
--- linux-3.3.8/drivers/net/wireless/ath/ath9k/hw.h	2012-03-19 10:39:04.040049599 +0100
+++ linux-3.3.8-pax/drivers/net/wireless/ath/ath9k/hw.h	2012-03-19 10:43:43.984034652 +0100
@@ -773,7 +773,7 @@ struct ath_hw_private_ops {
 
 	/* ANI */
 	void (*ani_cache_ini_regs)(struct ath_hw *ah);
-};
+} __no_const;
 
 /**
  * struct ath_hw_ops - callbacks used by hardware code and driver code
@@ -803,7 +803,7 @@ struct ath_hw_ops {
 	void (*antdiv_comb_conf_set)(struct ath_hw *ah,
 			struct ath_hw_antcomb_conf *antconf);
 
-};
+} __no_const;
 
 struct ath_nf_limits {
 	s16 max;
@@ -823,7 +823,7 @@ enum ath_cal_list {
 #define AH_FASTCC       0x4
 
 struct ath_hw {
-	struct ath_ops reg_ops;
+	ath_ops_no_const reg_ops;
 
 	struct ieee80211_hw *hw;
 	struct ath_common common;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/wireless/ath/ath.h linux-3.3.8-pax/drivers/net/wireless/ath/ath.h
--- linux-3.3.8/drivers/net/wireless/ath/ath.h	2012-03-19 10:39:03.868049607 +0100
+++ linux-3.3.8-pax/drivers/net/wireless/ath/ath.h	2012-03-19 10:43:43.984034652 +0100
@@ -119,6 +119,7 @@ struct ath_ops {
 	void (*write_flush) (void *);
 	u32 (*rmw)(void *, u32 reg_offset, u32 set, u32 clr);
 };
+typedef struct ath_ops __no_const ath_ops_no_const;
 
 struct ath_common;
 struct ath_bus_ops;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/wireless/brcm80211/brcmsmac/phy/phy_int.h linux-3.3.8-pax/drivers/net/wireless/brcm80211/brcmsmac/phy/phy_int.h
--- linux-3.3.8/drivers/net/wireless/brcm80211/brcmsmac/phy/phy_int.h	2012-03-19 10:39:04.208049590 +0100
+++ linux-3.3.8-pax/drivers/net/wireless/brcm80211/brcmsmac/phy/phy_int.h	2012-03-19 10:43:43.984034652 +0100
@@ -545,7 +545,7 @@ struct phy_func_ptr {
 	void (*carrsuppr)(struct brcms_phy *);
 	s32 (*rxsigpwr)(struct brcms_phy *, s32);
 	void (*detach)(struct brcms_phy *);
-};
+} __no_const;
 
 struct brcms_phy {
 	struct brcms_phy_pub pubpi_ro;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/wireless/iwlegacy/3945-mac.c linux-3.3.8-pax/drivers/net/wireless/iwlegacy/3945-mac.c
--- linux-3.3.8/drivers/net/wireless/iwlegacy/3945-mac.c	2012-04-15 15:08:29.334606354 +0200
+++ linux-3.3.8-pax/drivers/net/wireless/iwlegacy/3945-mac.c	2012-04-15 15:08:34.642606076 +0200
@@ -3646,7 +3646,9 @@ il3945_pci_probe(struct pci_dev *pdev, c
 	 */
 	if (il3945_mod_params.disable_hw_scan) {
 		D_INFO("Disabling hw_scan\n");
-		il3945_hw_ops.hw_scan = NULL;
+		pax_open_kernel();
+		*(void **)&il3945_hw_ops.hw_scan = NULL;
+		pax_close_kernel();
 	}
 
 	D_INFO("*** LOAD DRIVER ***\n");
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/wireless/iwlwifi/iwl-debug.h linux-3.3.8-pax/drivers/net/wireless/iwlwifi/iwl-debug.h
--- linux-3.3.8/drivers/net/wireless/iwlwifi/iwl-debug.h	2012-03-19 10:39:04.548049572 +0100
+++ linux-3.3.8-pax/drivers/net/wireless/iwlwifi/iwl-debug.h	2012-03-19 10:43:43.988034651 +0100
@@ -86,8 +86,8 @@ do {									\
 } while (0)
 
 #else
-#define IWL_DEBUG(m, level, fmt, args...)
-#define IWL_DEBUG_LIMIT(m, level, fmt, args...)
+#define IWL_DEBUG(m, level, fmt, args...) do {} while (0)
+#define IWL_DEBUG_LIMIT(m, level, fmt, args...) do {} while (0)
 #define iwl_print_hex_dump(m, level, p, len)
 #define IWL_DEBUG_QUIET_RFKILL(p, fmt, args...)	\
 do {							\
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/wireless/mac80211_hwsim.c linux-3.3.8-pax/drivers/net/wireless/mac80211_hwsim.c
--- linux-3.3.8/drivers/net/wireless/mac80211_hwsim.c	2012-03-19 10:39:04.592049570 +0100
+++ linux-3.3.8-pax/drivers/net/wireless/mac80211_hwsim.c	2012-03-19 10:43:43.988034651 +0100
@@ -1677,9 +1677,11 @@ static int __init init_mac80211_hwsim(vo
 		return -EINVAL;
 
 	if (fake_hw_scan) {
-		mac80211_hwsim_ops.hw_scan = mac80211_hwsim_hw_scan;
-		mac80211_hwsim_ops.sw_scan_start = NULL;
-		mac80211_hwsim_ops.sw_scan_complete = NULL;
+		pax_open_kernel();
+		*(void **)&mac80211_hwsim_ops.hw_scan = mac80211_hwsim_hw_scan;
+		*(void **)&mac80211_hwsim_ops.sw_scan_start = NULL;
+		*(void **)&mac80211_hwsim_ops.sw_scan_complete = NULL;
+		pax_close_kernel();
 	}
 
 	spin_lock_init(&hwsim_radio_lock);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/wireless/mwifiex/main.h linux-3.3.8-pax/drivers/net/wireless/mwifiex/main.h
--- linux-3.3.8/drivers/net/wireless/mwifiex/main.h	2012-03-19 10:39:04.616049568 +0100
+++ linux-3.3.8-pax/drivers/net/wireless/mwifiex/main.h	2012-03-19 10:43:43.992034650 +0100
@@ -536,7 +536,7 @@ struct mwifiex_if_ops {
 	void (*cleanup_mpa_buf) (struct mwifiex_adapter *);
 	int (*cmdrsp_complete) (struct mwifiex_adapter *, struct sk_buff *);
 	int (*event_complete) (struct mwifiex_adapter *, struct sk_buff *);
-};
+} __no_const;
 
 struct mwifiex_adapter {
 	u8 iface_type;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/wireless/rndis_wlan.c linux-3.3.8-pax/drivers/net/wireless/rndis_wlan.c
--- linux-3.3.8/drivers/net/wireless/rndis_wlan.c	2012-03-19 10:39:04.648049567 +0100
+++ linux-3.3.8-pax/drivers/net/wireless/rndis_wlan.c	2012-03-19 10:43:44.004034651 +0100
@@ -1278,7 +1278,7 @@ static int set_rts_threshold(struct usbn
 
 	netdev_dbg(usbdev->net, "%s(): %i\n", __func__, rts_threshold);
 
-	if (rts_threshold < 0 || rts_threshold > 2347)
+	if (rts_threshold > 2347)
 		rts_threshold = 2347;
 
 	tmp = cpu_to_le32(rts_threshold);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/net/wireless/wl1251/wl1251.h linux-3.3.8-pax/drivers/net/wireless/wl1251/wl1251.h
--- linux-3.3.8/drivers/net/wireless/wl1251/wl1251.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/net/wireless/wl1251/wl1251.h	2012-03-19 10:43:44.008034651 +0100
@@ -266,7 +266,7 @@ struct wl1251_if_operations {
 	void (*reset)(struct wl1251 *wl);
 	void (*enable_irq)(struct wl1251 *wl);
 	void (*disable_irq)(struct wl1251 *wl);
-};
+} __no_const;
 
 struct wl1251 {
 	struct ieee80211_hw *hw;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/oprofile/buffer_sync.c linux-3.3.8-pax/drivers/oprofile/buffer_sync.c
--- linux-3.3.8/drivers/oprofile/buffer_sync.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/oprofile/buffer_sync.c	2012-03-19 10:43:44.012034651 +0100
@@ -343,7 +343,7 @@ static void add_data(struct op_entry *en
 		if (cookie == NO_COOKIE)
 			offset = pc;
 		if (cookie == INVALID_COOKIE) {
-			atomic_inc(&oprofile_stats.sample_lost_no_mapping);
+			atomic_inc_unchecked(&oprofile_stats.sample_lost_no_mapping);
 			offset = pc;
 		}
 		if (cookie != last_cookie) {
@@ -387,14 +387,14 @@ add_sample(struct mm_struct *mm, struct
 	/* add userspace sample */
 
 	if (!mm) {
-		atomic_inc(&oprofile_stats.sample_lost_no_mm);
+		atomic_inc_unchecked(&oprofile_stats.sample_lost_no_mm);
 		return 0;
 	}
 
 	cookie = lookup_dcookie(mm, s->eip, &offset);
 
 	if (cookie == INVALID_COOKIE) {
-		atomic_inc(&oprofile_stats.sample_lost_no_mapping);
+		atomic_inc_unchecked(&oprofile_stats.sample_lost_no_mapping);
 		return 0;
 	}
 
@@ -563,7 +563,7 @@ void sync_buffer(int cpu)
 		/* ignore backtraces if failed to add a sample */
 		if (state == sb_bt_start) {
 			state = sb_bt_ignore;
-			atomic_inc(&oprofile_stats.bt_lost_no_mapping);
+			atomic_inc_unchecked(&oprofile_stats.bt_lost_no_mapping);
 		}
 	}
 	release_mm(mm);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/oprofile/event_buffer.c linux-3.3.8-pax/drivers/oprofile/event_buffer.c
--- linux-3.3.8/drivers/oprofile/event_buffer.c	2012-01-08 19:48:14.763471637 +0100
+++ linux-3.3.8-pax/drivers/oprofile/event_buffer.c	2012-03-19 10:43:44.012034651 +0100
@@ -53,7 +53,7 @@ void add_event_entry(unsigned long value
 	}
 
 	if (buffer_pos == buffer_size) {
-		atomic_inc(&oprofile_stats.event_lost_overflow);
+		atomic_inc_unchecked(&oprofile_stats.event_lost_overflow);
 		return;
 	}
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/oprofile/oprof.c linux-3.3.8-pax/drivers/oprofile/oprof.c
--- linux-3.3.8/drivers/oprofile/oprof.c	2012-03-19 10:39:04.908049553 +0100
+++ linux-3.3.8-pax/drivers/oprofile/oprof.c	2012-03-19 10:43:44.012034651 +0100
@@ -110,7 +110,7 @@ static void switch_worker(struct work_st
 	if (oprofile_ops.switch_events())
 		return;
 
-	atomic_inc(&oprofile_stats.multiplex_counter);
+	atomic_inc_unchecked(&oprofile_stats.multiplex_counter);
 	start_switch_worker();
 }
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/oprofile/oprofilefs.c linux-3.3.8-pax/drivers/oprofile/oprofilefs.c
--- linux-3.3.8/drivers/oprofile/oprofilefs.c	2012-01-08 19:48:14.771471637 +0100
+++ linux-3.3.8-pax/drivers/oprofile/oprofilefs.c	2012-05-16 21:21:02.181543439 +0200
@@ -193,7 +193,7 @@ static const struct file_operations atom
 
 
 int oprofilefs_create_ro_atomic(struct super_block *sb, struct dentry *root,
-	char const *name, atomic_t *val)
+	char const *name, atomic_unchecked_t *val)
 {
 	return __oprofilefs_create_file(sb, root, name,
 					&atomic_ro_fops, 0444, val);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/oprofile/oprofile_stats.c linux-3.3.8-pax/drivers/oprofile/oprofile_stats.c
--- linux-3.3.8/drivers/oprofile/oprofile_stats.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/oprofile/oprofile_stats.c	2012-03-19 10:43:44.012034652 +0100
@@ -30,11 +30,11 @@ void oprofile_reset_stats(void)
 		cpu_buf->sample_invalid_eip = 0;
 	}
 
-	atomic_set(&oprofile_stats.sample_lost_no_mm, 0);
-	atomic_set(&oprofile_stats.sample_lost_no_mapping, 0);
-	atomic_set(&oprofile_stats.event_lost_overflow, 0);
-	atomic_set(&oprofile_stats.bt_lost_no_mapping, 0);
-	atomic_set(&oprofile_stats.multiplex_counter, 0);
+	atomic_set_unchecked(&oprofile_stats.sample_lost_no_mm, 0);
+	atomic_set_unchecked(&oprofile_stats.sample_lost_no_mapping, 0);
+	atomic_set_unchecked(&oprofile_stats.event_lost_overflow, 0);
+	atomic_set_unchecked(&oprofile_stats.bt_lost_no_mapping, 0);
+	atomic_set_unchecked(&oprofile_stats.multiplex_counter, 0);
 }
 
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/oprofile/oprofile_stats.h linux-3.3.8-pax/drivers/oprofile/oprofile_stats.h
--- linux-3.3.8/drivers/oprofile/oprofile_stats.h	2011-10-24 12:48:34.403091338 +0200
+++ linux-3.3.8-pax/drivers/oprofile/oprofile_stats.h	2012-03-19 10:43:44.012034652 +0100
@@ -13,11 +13,11 @@
 #include <linux/atomic.h>
 
 struct oprofile_stat_struct {
-	atomic_t sample_lost_no_mm;
-	atomic_t sample_lost_no_mapping;
-	atomic_t bt_lost_no_mapping;
-	atomic_t event_lost_overflow;
-	atomic_t multiplex_counter;
+	atomic_unchecked_t sample_lost_no_mm;
+	atomic_unchecked_t sample_lost_no_mapping;
+	atomic_unchecked_t bt_lost_no_mapping;
+	atomic_unchecked_t event_lost_overflow;
+	atomic_unchecked_t multiplex_counter;
 };
 
 extern struct oprofile_stat_struct oprofile_stats;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/parport/procfs.c linux-3.3.8-pax/drivers/parport/procfs.c
--- linux-3.3.8/drivers/parport/procfs.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/parport/procfs.c	2012-03-19 10:43:44.012034652 +0100
@@ -64,7 +64,7 @@ static int do_active_device(ctl_table *t
 
 	*ppos += len;
 
-	return copy_to_user(result, buffer, len) ? -EFAULT : 0;
+	return (len > sizeof buffer || copy_to_user(result, buffer, len)) ? -EFAULT : 0;
 }
 
 #ifdef CONFIG_PARPORT_1284
@@ -106,7 +106,7 @@ static int do_autoprobe(ctl_table *table
 
 	*ppos += len;
 
-	return copy_to_user (result, buffer, len) ? -EFAULT : 0;
+	return (len > sizeof buffer || copy_to_user (result, buffer, len)) ? -EFAULT : 0;
 }
 #endif /* IEEE1284.3 support. */
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/pci/hotplug/cpci_hotplug.h linux-3.3.8-pax/drivers/pci/hotplug/cpci_hotplug.h
--- linux-3.3.8/drivers/pci/hotplug/cpci_hotplug.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/pci/hotplug/cpci_hotplug.h	2012-03-19 10:43:44.012034652 +0100
@@ -59,7 +59,7 @@ struct cpci_hp_controller_ops {
 	int (*hardware_test) (struct slot* slot, u32 value);
 	u8  (*get_power) (struct slot* slot);
 	int (*set_power) (struct slot* slot, int value);
-};
+} __no_const;
 
 struct cpci_hp_controller {
 	unsigned int irq;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/pci/hotplug/cpqphp_nvram.c linux-3.3.8-pax/drivers/pci/hotplug/cpqphp_nvram.c
--- linux-3.3.8/drivers/pci/hotplug/cpqphp_nvram.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/pci/hotplug/cpqphp_nvram.c	2012-03-19 10:43:44.012034652 +0100
@@ -428,9 +428,13 @@ static u32 store_HRT (void __iomem *rom_
 
 void compaq_nvram_init (void __iomem *rom_start)
 {
+
+#ifndef CONFIG_PAX_KERNEXEC
 	if (rom_start) {
 		compaq_int15_entry_point = (rom_start + ROM_INT15_PHY_ADDR - ROM_PHY_ADDR);
 	}
+#endif
+
 	dbg("int15 entry  = %p\n", compaq_int15_entry_point);
 
 	/* initialize our int15 lock */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/pci/pcie/aspm.c linux-3.3.8-pax/drivers/pci/pcie/aspm.c
--- linux-3.3.8/drivers/pci/pcie/aspm.c	2012-04-03 22:02:49.806109994 +0200
+++ linux-3.3.8-pax/drivers/pci/pcie/aspm.c	2012-04-03 22:03:06.866110901 +0200
@@ -27,9 +27,9 @@
 #define MODULE_PARAM_PREFIX "pcie_aspm."
 
 /* Note: those are not register definitions */
-#define ASPM_STATE_L0S_UP	(1)	/* Upstream direction L0s state */
-#define ASPM_STATE_L0S_DW	(2)	/* Downstream direction L0s state */
-#define ASPM_STATE_L1		(4)	/* L1 state */
+#define ASPM_STATE_L0S_UP	(1U)	/* Upstream direction L0s state */
+#define ASPM_STATE_L0S_DW	(2U)	/* Downstream direction L0s state */
+#define ASPM_STATE_L1		(4U)	/* L1 state */
 #define ASPM_STATE_L0S		(ASPM_STATE_L0S_UP | ASPM_STATE_L0S_DW)
 #define ASPM_STATE_ALL		(ASPM_STATE_L0S | ASPM_STATE_L1)
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/pci/probe.c linux-3.3.8-pax/drivers/pci/probe.c
--- linux-3.3.8/drivers/pci/probe.c	2012-03-19 10:39:05.104049543 +0100
+++ linux-3.3.8-pax/drivers/pci/probe.c	2012-03-19 10:43:44.016034650 +0100
@@ -136,7 +136,7 @@ int __pci_read_base(struct pci_dev *dev,
 	u32 l, sz, mask;
 	u16 orig_cmd;
 
-	mask = type ? PCI_ROM_ADDRESS_MASK : ~0;
+	mask = type ? (u32)PCI_ROM_ADDRESS_MASK : ~0;
 
 	if (!dev->mmio_always_on) {
 		pci_read_config_word(dev, PCI_COMMAND, &orig_cmd);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/platform/x86/thinkpad_acpi.c linux-3.3.8-pax/drivers/platform/x86/thinkpad_acpi.c
--- linux-3.3.8/drivers/platform/x86/thinkpad_acpi.c	2012-03-19 10:39:05.196049537 +0100
+++ linux-3.3.8-pax/drivers/platform/x86/thinkpad_acpi.c	2012-03-19 10:43:44.020034648 +0100
@@ -2094,7 +2094,7 @@ static int hotkey_mask_get(void)
 	return 0;
 }
 
-void static hotkey_mask_warn_incomplete_mask(void)
+static void hotkey_mask_warn_incomplete_mask(void)
 {
 	/* log only what the user can fix... */
 	const u32 wantedmask = hotkey_driver_mask &
@@ -2325,11 +2325,6 @@ static void hotkey_read_nvram(struct tp_
 	}
 }
 
-static void hotkey_compare_and_issue_event(struct tp_nvram_state *oldn,
-					   struct tp_nvram_state *newn,
-					   const u32 event_mask)
-{
-
 #define TPACPI_COMPARE_KEY(__scancode, __member) \
 	do { \
 		if ((event_mask & (1 << __scancode)) && \
@@ -2343,36 +2338,42 @@ static void hotkey_compare_and_issue_eve
 			tpacpi_hotkey_send_key(__scancode); \
 	} while (0)
 
-	void issue_volchange(const unsigned int oldvol,
-			     const unsigned int newvol)
-	{
-		unsigned int i = oldvol;
-
-		while (i > newvol) {
-			TPACPI_MAY_SEND_KEY(TP_ACPI_HOTKEYSCAN_VOLUMEDOWN);
-			i--;
-		}
-		while (i < newvol) {
-			TPACPI_MAY_SEND_KEY(TP_ACPI_HOTKEYSCAN_VOLUMEUP);
-			i++;
-		}
+static void issue_volchange(const unsigned int oldvol,
+			    const unsigned int newvol,
+			    const u32 event_mask)
+{
+	unsigned int i = oldvol;
+
+	while (i > newvol) {
+		TPACPI_MAY_SEND_KEY(TP_ACPI_HOTKEYSCAN_VOLUMEDOWN);
+		i--;
 	}
+	while (i < newvol) {
+		TPACPI_MAY_SEND_KEY(TP_ACPI_HOTKEYSCAN_VOLUMEUP);
+		i++;
+	}
+}
 
-	void issue_brightnesschange(const unsigned int oldbrt,
-				    const unsigned int newbrt)
-	{
-		unsigned int i = oldbrt;
+static void issue_brightnesschange(const unsigned int oldbrt,
+				   const unsigned int newbrt,
+				   const u32 event_mask)
+{
+	unsigned int i = oldbrt;
 
-		while (i > newbrt) {
-			TPACPI_MAY_SEND_KEY(TP_ACPI_HOTKEYSCAN_FNEND);
-			i--;
-		}
-		while (i < newbrt) {
-			TPACPI_MAY_SEND_KEY(TP_ACPI_HOTKEYSCAN_FNHOME);
-			i++;
-		}
+	while (i > newbrt) {
+		TPACPI_MAY_SEND_KEY(TP_ACPI_HOTKEYSCAN_FNEND);
+		i--;
+	}
+	while (i < newbrt) {
+		TPACPI_MAY_SEND_KEY(TP_ACPI_HOTKEYSCAN_FNHOME);
+		i++;
 	}
+}
 
+static void hotkey_compare_and_issue_event(struct tp_nvram_state *oldn,
+					   struct tp_nvram_state *newn,
+					   const u32 event_mask)
+{
 	TPACPI_COMPARE_KEY(TP_ACPI_HOTKEYSCAN_THINKPAD, thinkpad_toggle);
 	TPACPI_COMPARE_KEY(TP_ACPI_HOTKEYSCAN_FNSPACE, zoom_toggle);
 	TPACPI_COMPARE_KEY(TP_ACPI_HOTKEYSCAN_FNF7, display_toggle);
@@ -2406,7 +2407,7 @@ static void hotkey_compare_and_issue_eve
 		    oldn->volume_level != newn->volume_level) {
 			/* recently muted, or repeated mute keypress, or
 			 * multiple presses ending in mute */
-			issue_volchange(oldn->volume_level, newn->volume_level);
+			issue_volchange(oldn->volume_level, newn->volume_level, event_mask);
 			TPACPI_MAY_SEND_KEY(TP_ACPI_HOTKEYSCAN_MUTE);
 		}
 	} else {
@@ -2416,7 +2417,7 @@ static void hotkey_compare_and_issue_eve
 			TPACPI_MAY_SEND_KEY(TP_ACPI_HOTKEYSCAN_VOLUMEUP);
 		}
 		if (oldn->volume_level != newn->volume_level) {
-			issue_volchange(oldn->volume_level, newn->volume_level);
+			issue_volchange(oldn->volume_level, newn->volume_level, event_mask);
 		} else if (oldn->volume_toggle != newn->volume_toggle) {
 			/* repeated vol up/down keypress at end of scale ? */
 			if (newn->volume_level == 0)
@@ -2429,7 +2430,8 @@ static void hotkey_compare_and_issue_eve
 	/* handle brightness */
 	if (oldn->brightness_level != newn->brightness_level) {
 		issue_brightnesschange(oldn->brightness_level,
-				       newn->brightness_level);
+				       newn->brightness_level,
+				       event_mask);
 	} else if (oldn->brightness_toggle != newn->brightness_toggle) {
 		/* repeated key presses that didn't change state */
 		if (newn->brightness_level == 0)
@@ -2438,10 +2440,10 @@ static void hotkey_compare_and_issue_eve
 				&& !tp_features.bright_unkfw)
 			TPACPI_MAY_SEND_KEY(TP_ACPI_HOTKEYSCAN_FNHOME);
 	}
+}
 
 #undef TPACPI_COMPARE_KEY
 #undef TPACPI_MAY_SEND_KEY
-}
 
 /*
  * Polling driver
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/pnp/pnpbios/bioscalls.c linux-3.3.8-pax/drivers/pnp/pnpbios/bioscalls.c
--- linux-3.3.8/drivers/pnp/pnpbios/bioscalls.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/pnp/pnpbios/bioscalls.c	2012-03-19 10:43:44.020034648 +0100
@@ -59,7 +59,7 @@ do { \
 	set_desc_limit(&gdt[(selname) >> 3], (size) - 1); \
 } while(0)
 
-static struct desc_struct bad_bios_desc = GDT_ENTRY_INIT(0x4092,
+static const struct desc_struct bad_bios_desc = GDT_ENTRY_INIT(0x4093,
 			(unsigned long)__va(0x400UL), PAGE_SIZE - 0x400 - 1);
 
 /*
@@ -96,7 +96,10 @@ static inline u16 call_pnp_bios(u16 func
 
 	cpu = get_cpu();
 	save_desc_40 = get_cpu_gdt_table(cpu)[0x40 / 8];
+
+	pax_open_kernel();
 	get_cpu_gdt_table(cpu)[0x40 / 8] = bad_bios_desc;
+	pax_close_kernel();
 
 	/* On some boxes IRQ's during PnP BIOS calls are deadly.  */
 	spin_lock_irqsave(&pnp_bios_lock, flags);
@@ -134,7 +137,10 @@ static inline u16 call_pnp_bios(u16 func
 			     :"memory");
 	spin_unlock_irqrestore(&pnp_bios_lock, flags);
 
+	pax_open_kernel();
 	get_cpu_gdt_table(cpu)[0x40 / 8] = save_desc_40;
+	pax_close_kernel();
+
 	put_cpu();
 
 	/* If we get here and this is set then the PnP BIOS faulted on us. */
@@ -468,7 +474,7 @@ int pnp_bios_read_escd(char *data, u32 n
 	return status;
 }
 
-void pnpbios_calls_init(union pnp_bios_install_struct *header)
+void __init pnpbios_calls_init(union pnp_bios_install_struct *header)
 {
 	int i;
 
@@ -476,6 +482,8 @@ void pnpbios_calls_init(union pnp_bios_i
 	pnp_bios_callpoint.offset = header->fields.pm16offset;
 	pnp_bios_callpoint.segment = PNP_CS16;
 
+	pax_open_kernel();
+
 	for_each_possible_cpu(i) {
 		struct desc_struct *gdt = get_cpu_gdt_table(i);
 		if (!gdt)
@@ -487,4 +495,6 @@ void pnpbios_calls_init(union pnp_bios_i
 		set_desc_base(&gdt[GDT_ENTRY_PNPBIOS_DS],
 			 (unsigned long)__va(header->fields.pm16dseg));
 	}
+
+	pax_close_kernel();
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/pnp/resource.c linux-3.3.8-pax/drivers/pnp/resource.c
--- linux-3.3.8/drivers/pnp/resource.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/pnp/resource.c	2012-03-19 10:43:44.020034648 +0100
@@ -360,7 +360,7 @@ int pnp_check_irq(struct pnp_dev *dev, s
 		return 1;
 
 	/* check if the resource is valid */
-	if (*irq < 0 || *irq > 15)
+	if (*irq > 15)
 		return 0;
 
 	/* check if the resource is reserved */
@@ -424,7 +424,7 @@ int pnp_check_dma(struct pnp_dev *dev, s
 		return 1;
 
 	/* check if the resource is valid */
-	if (*dma < 0 || *dma == 4 || *dma > 7)
+	if (*dma == 4 || *dma > 7)
 		return 0;
 
 	/* check if the resource is reserved */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/power/bq27x00_battery.c linux-3.3.8-pax/drivers/power/bq27x00_battery.c
--- linux-3.3.8/drivers/power/bq27x00_battery.c	2012-03-19 10:39:05.208049537 +0100
+++ linux-3.3.8-pax/drivers/power/bq27x00_battery.c	2012-03-19 10:43:44.024034648 +0100
@@ -72,7 +72,7 @@
 struct bq27x00_device_info;
 struct bq27x00_access_methods {
 	int (*read)(struct bq27x00_device_info *di, u8 reg, bool single);
-};
+} __no_const;
 
 enum bq27x00_chip { BQ27000, BQ27500 };
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/regulator/max8660.c linux-3.3.8-pax/drivers/regulator/max8660.c
--- linux-3.3.8/drivers/regulator/max8660.c	2012-03-19 10:39:05.388049515 +0100
+++ linux-3.3.8-pax/drivers/regulator/max8660.c	2012-03-19 10:43:44.028034649 +0100
@@ -383,8 +383,10 @@ static int __devinit max8660_probe(struc
 		max8660->shadow_regs[MAX8660_OVER1] = 5;
 	} else {
 		/* Otherwise devices can be toggled via software */
-		max8660_dcdc_ops.enable = max8660_dcdc_enable;
-		max8660_dcdc_ops.disable = max8660_dcdc_disable;
+		pax_open_kernel();
+		*(void **)&max8660_dcdc_ops.enable = max8660_dcdc_enable;
+		*(void **)&max8660_dcdc_ops.disable = max8660_dcdc_disable;
+		pax_close_kernel();
 	}
 
 	/*
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/regulator/mc13892-regulator.c linux-3.3.8-pax/drivers/regulator/mc13892-regulator.c
--- linux-3.3.8/drivers/regulator/mc13892-regulator.c	2012-03-19 10:39:05.392049520 +0100
+++ linux-3.3.8-pax/drivers/regulator/mc13892-regulator.c	2012-03-19 10:43:44.032034650 +0100
@@ -574,10 +574,12 @@ static int __devinit mc13892_regulator_p
 	}
 	mc13xxx_unlock(mc13892);
 
-	mc13892_regulators[MC13892_VCAM].desc.ops->set_mode
+	pax_open_kernel();
+	*(void **)&mc13892_regulators[MC13892_VCAM].desc.ops->set_mode
 		= mc13892_vcam_set_mode;
-	mc13892_regulators[MC13892_VCAM].desc.ops->get_mode
+	*(void **)&mc13892_regulators[MC13892_VCAM].desc.ops->get_mode
 		= mc13892_vcam_get_mode;
+	pax_close_kernel();
 
 	mc13xxx_data = mc13xxx_parse_regulators_dt(pdev, mc13892_regulators,
 					ARRAY_SIZE(mc13892_regulators));
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/aacraid/aacraid.h linux-3.3.8-pax/drivers/scsi/aacraid/aacraid.h
--- linux-3.3.8/drivers/scsi/aacraid/aacraid.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/scsi/aacraid/aacraid.h	2012-03-19 10:43:44.040034649 +0100
@@ -492,7 +492,7 @@ struct adapter_ops
 	int  (*adapter_scsi)(struct fib * fib, struct scsi_cmnd * cmd);
 	/* Administrative operations */
 	int  (*adapter_comm)(struct aac_dev * dev, int comm);
-};
+} __no_const;
 
 /*
  *	Define which interrupt handler needs to be installed
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/aacraid/linit.c linux-3.3.8-pax/drivers/scsi/aacraid/linit.c
--- linux-3.3.8/drivers/scsi/aacraid/linit.c	2012-01-08 19:48:15.455471600 +0100
+++ linux-3.3.8-pax/drivers/scsi/aacraid/linit.c	2012-03-19 10:43:44.048034647 +0100
@@ -93,7 +93,7 @@ static DECLARE_PCI_DEVICE_TABLE(aac_pci_
 #elif defined(__devinitconst)
 static const struct pci_device_id aac_pci_tbl[] __devinitconst = {
 #else
-static const struct pci_device_id aac_pci_tbl[] __devinitdata = {
+static const struct pci_device_id aac_pci_tbl[] __devinitconst = {
 #endif
 	{ 0x1028, 0x0001, 0x1028, 0x0001, 0, 0, 0 }, /* PERC 2/Si (Iguana/PERC2Si) */
 	{ 0x1028, 0x0002, 0x1028, 0x0002, 0, 0, 1 }, /* PERC 3/Di (Opal/PERC3Di) */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/aic94xx/aic94xx_init.c linux-3.3.8-pax/drivers/scsi/aic94xx/aic94xx_init.c
--- linux-3.3.8/drivers/scsi/aic94xx/aic94xx_init.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/scsi/aic94xx/aic94xx_init.c	2012-03-19 10:43:44.048034647 +0100
@@ -1012,7 +1012,7 @@ static struct sas_domain_function_templa
 	.lldd_control_phy	= asd_control_phy,
 };
 
-static const struct pci_device_id aic94xx_pci_table[] __devinitdata = {
+static const struct pci_device_id aic94xx_pci_table[] __devinitconst = {
 	{PCI_DEVICE(PCI_VENDOR_ID_ADAPTEC2, 0x410),0, 0, 1},
 	{PCI_DEVICE(PCI_VENDOR_ID_ADAPTEC2, 0x412),0, 0, 1},
 	{PCI_DEVICE(PCI_VENDOR_ID_ADAPTEC2, 0x416),0, 0, 1},
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/bfa/bfa_fcpim.c linux-3.3.8-pax/drivers/scsi/bfa/bfa_fcpim.c
--- linux-3.3.8/drivers/scsi/bfa/bfa_fcpim.c	2012-03-19 10:39:05.576049517 +0100
+++ linux-3.3.8-pax/drivers/scsi/bfa/bfa_fcpim.c	2012-03-19 10:43:44.048034647 +0100
@@ -3715,7 +3715,7 @@ bfa_fcp_attach(struct bfa_s *bfa, void *
 
 	bfa_iotag_attach(fcp);
 
-	fcp->itn_arr = (struct bfa_itn_s *) bfa_mem_kva_curp(fcp);
+	fcp->itn_arr = (bfa_itn_s_no_const *) bfa_mem_kva_curp(fcp);
 	bfa_mem_kva_curp(fcp) = (u8 *)fcp->itn_arr +
 			(fcp->num_itns * sizeof(struct bfa_itn_s));
 	memset(fcp->itn_arr, 0,
@@ -3773,7 +3773,7 @@ bfa_itn_create(struct bfa_s *bfa, struct
 		void (*isr)(struct bfa_s *bfa, struct bfi_msg_s *m))
 {
 	struct bfa_fcp_mod_s *fcp = BFA_FCP_MOD(bfa);
-	struct bfa_itn_s *itn;
+	bfa_itn_s_no_const *itn;
 
 	itn =  BFA_ITN_FROM_TAG(fcp, rport->rport_tag);
 	itn->isr = isr;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/bfa/bfa_fcpim.h linux-3.3.8-pax/drivers/scsi/bfa/bfa_fcpim.h
--- linux-3.3.8/drivers/scsi/bfa/bfa_fcpim.h	2012-03-19 10:39:05.576049517 +0100
+++ linux-3.3.8-pax/drivers/scsi/bfa/bfa_fcpim.h	2012-03-19 10:43:44.048034647 +0100
@@ -37,6 +37,7 @@ struct bfa_iotag_s {
 struct bfa_itn_s {
 	bfa_isr_func_t isr;
 };
+typedef struct bfa_itn_s __no_const bfa_itn_s_no_const;
 
 void bfa_itn_create(struct bfa_s *bfa, struct bfa_rport_s *rport,
 		void (*isr)(struct bfa_s *bfa, struct bfi_msg_s *m));
@@ -147,7 +148,7 @@ struct bfa_fcp_mod_s {
 	struct list_head	iotag_tio_free_q;	/* free IO resources */
 	struct list_head	iotag_unused_q;	/* unused IO resources*/
 	struct bfa_iotag_s	*iotag_arr;
-	struct bfa_itn_s	*itn_arr;
+	bfa_itn_s_no_const	*itn_arr;
 	int			num_ioim_reqs;
 	int			num_fwtio_reqs;
 	int			num_itns;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/bfa/bfa.h linux-3.3.8-pax/drivers/scsi/bfa/bfa.h
--- linux-3.3.8/drivers/scsi/bfa/bfa.h	2011-10-24 12:48:34.919091311 +0200
+++ linux-3.3.8-pax/drivers/scsi/bfa/bfa.h	2012-03-19 10:43:44.048034647 +0100
@@ -196,7 +196,7 @@ struct bfa_hwif_s {
 				       u32 *end);
 	int	cpe_vec_q0;
 	int	rme_vec_q0;
-};
+} __no_const;
 typedef void (*bfa_cb_iocfc_t) (void *cbarg, enum bfa_status status);
 
 struct bfa_faa_cbfn_s {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/bfa/bfa_ioc.h linux-3.3.8-pax/drivers/scsi/bfa/bfa_ioc.h
--- linux-3.3.8/drivers/scsi/bfa/bfa_ioc.h	2011-10-24 12:48:35.035091304 +0200
+++ linux-3.3.8-pax/drivers/scsi/bfa/bfa_ioc.h	2012-03-19 10:43:44.048034647 +0100
@@ -258,7 +258,7 @@ struct bfa_ioc_cbfn_s {
 	bfa_ioc_disable_cbfn_t	disable_cbfn;
 	bfa_ioc_hbfail_cbfn_t	hbfail_cbfn;
 	bfa_ioc_reset_cbfn_t	reset_cbfn;
-};
+} __no_const;
 
 /*
  * IOC event notification mechanism.
@@ -346,7 +346,7 @@ struct bfa_ioc_hwif_s {
 	void		(*ioc_sync_ack)		(struct bfa_ioc_s *ioc);
 	bfa_boolean_t	(*ioc_sync_complete)	(struct bfa_ioc_s *ioc);
 	bfa_boolean_t	(*ioc_lpu_read_stat)	(struct bfa_ioc_s *ioc);
-};
+} __no_const;
 
 /*
  * Queue element to wait for room in request queue. FIFO order is
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/hosts.c linux-3.3.8-pax/drivers/scsi/hosts.c
--- linux-3.3.8/drivers/scsi/hosts.c	2012-01-08 19:48:15.611471592 +0100
+++ linux-3.3.8-pax/drivers/scsi/hosts.c	2012-03-19 10:43:44.052034648 +0100
@@ -42,7 +42,7 @@
 #include "scsi_logging.h"
 
 
-static atomic_t scsi_host_next_hn;	/* host_no for next new host */
+static atomic_unchecked_t scsi_host_next_hn;	/* host_no for next new host */
 
 
 static void scsi_host_cls_release(struct device *dev)
@@ -357,7 +357,7 @@ struct Scsi_Host *scsi_host_alloc(struct
 	 * subtract one because we increment first then return, but we need to
 	 * know what the next host number was before increment
 	 */
-	shost->host_no = atomic_inc_return(&scsi_host_next_hn) - 1;
+	shost->host_no = atomic_inc_return_unchecked(&scsi_host_next_hn) - 1;
 	shost->dma_channel = 0xff;
 
 	/* These three are default values which can be overridden */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/hpsa.c linux-3.3.8-pax/drivers/scsi/hpsa.c
--- linux-3.3.8/drivers/scsi/hpsa.c	2012-06-11 19:36:40.188445806 +0200
+++ linux-3.3.8-pax/drivers/scsi/hpsa.c	2012-06-11 19:36:46.320446143 +0200
@@ -507,7 +507,7 @@ static inline u32 next_command(struct ct
 	u32 a;
 
 	if (unlikely(!(h->transMethod & CFGTBL_Trans_Performant)))
-		return h->access.command_completed(h);
+		return h->access->command_completed(h);
 
 	if ((*(h->reply_pool_head) & 1) == (h->reply_pool_wraparound)) {
 		a = *(h->reply_pool_head); /* Next cmd in ring buffer */
@@ -2987,7 +2987,7 @@ static void start_io(struct ctlr_info *h
 	while (!list_empty(&h->reqQ)) {
 		c = list_entry(h->reqQ.next, struct CommandList, list);
 		/* can't do anything if fifo is full */
-		if ((h->access.fifo_full(h))) {
+		if ((h->access->fifo_full(h))) {
 			dev_warn(&h->pdev->dev, "fifo full\n");
 			break;
 		}
@@ -2997,7 +2997,7 @@ static void start_io(struct ctlr_info *h
 		h->Qdepth--;
 
 		/* Tell the controller execute command */
-		h->access.submit_command(h, c);
+		h->access->submit_command(h, c);
 
 		/* Put job onto the completed Q */
 		addQ(&h->cmpQ, c);
@@ -3006,17 +3006,17 @@ static void start_io(struct ctlr_info *h
 
 static inline unsigned long get_next_completion(struct ctlr_info *h)
 {
-	return h->access.command_completed(h);
+	return h->access->command_completed(h);
 }
 
 static inline bool interrupt_pending(struct ctlr_info *h)
 {
-	return h->access.intr_pending(h);
+	return h->access->intr_pending(h);
 }
 
 static inline long interrupt_not_for_us(struct ctlr_info *h)
 {
-	return (h->access.intr_pending(h) == 0) ||
+	return (h->access->intr_pending(h) == 0) ||
 		(h->interrupts_enabled == 0);
 }
 
@@ -3915,7 +3915,7 @@ static int __devinit hpsa_pci_init(struc
 	if (prod_index < 0)
 		return -ENODEV;
 	h->product_name = products[prod_index].product_name;
-	h->access = *(products[prod_index].access);
+	h->access = products[prod_index].access;
 
 	if (hpsa_board_disabled(h->pdev)) {
 		dev_warn(&h->pdev->dev, "controller appears to be disabled\n");
@@ -4160,7 +4160,7 @@ static void controller_lockup_detected(s
 
 	assert_spin_locked(&lockup_detector_lock);
 	remove_ctlr_from_lockup_detector_list(h);
-	h->access.set_intr_mask(h, HPSA_INTR_OFF);
+	h->access->set_intr_mask(h, HPSA_INTR_OFF);
 	spin_lock_irqsave(&h->lock, flags);
 	h->lockup_detected = readl(h->vaddr + SA5_SCRATCHPAD_OFFSET);
 	spin_unlock_irqrestore(&h->lock, flags);
@@ -4340,7 +4340,7 @@ reinit_after_soft_reset:
 	}
 
 	/* make sure the board interrupts are off */
-	h->access.set_intr_mask(h, HPSA_INTR_OFF);
+	h->access->set_intr_mask(h, HPSA_INTR_OFF);
 
 	if (hpsa_request_irq(h, do_hpsa_intr_msi, do_hpsa_intr_intx))
 		goto clean2;
@@ -4374,7 +4374,7 @@ reinit_after_soft_reset:
 		 * fake ones to scoop up any residual completions.
 		 */
 		spin_lock_irqsave(&h->lock, flags);
-		h->access.set_intr_mask(h, HPSA_INTR_OFF);
+		h->access->set_intr_mask(h, HPSA_INTR_OFF);
 		spin_unlock_irqrestore(&h->lock, flags);
 		free_irq(h->intr[h->intr_mode], h);
 		rc = hpsa_request_irq(h, hpsa_msix_discard_completions,
@@ -4393,9 +4393,9 @@ reinit_after_soft_reset:
 		dev_info(&h->pdev->dev, "Board READY.\n");
 		dev_info(&h->pdev->dev,
 			"Waiting for stale completions to drain.\n");
-		h->access.set_intr_mask(h, HPSA_INTR_ON);
+		h->access->set_intr_mask(h, HPSA_INTR_ON);
 		msleep(10000);
-		h->access.set_intr_mask(h, HPSA_INTR_OFF);
+		h->access->set_intr_mask(h, HPSA_INTR_OFF);
 
 		rc = controller_reset_failed(h->cfgtable);
 		if (rc)
@@ -4416,7 +4416,7 @@ reinit_after_soft_reset:
 	}
 
 	/* Turn the interrupts on so we can service requests */
-	h->access.set_intr_mask(h, HPSA_INTR_ON);
+	h->access->set_intr_mask(h, HPSA_INTR_ON);
 
 	hpsa_hba_inquiry(h);
 	hpsa_register_scsi(h);	/* hook ourselves into SCSI subsystem */
@@ -4468,7 +4468,7 @@ static void hpsa_shutdown(struct pci_dev
 	 * To write all data in the battery backed cache to disks
 	 */
 	hpsa_flush_cache(h);
-	h->access.set_intr_mask(h, HPSA_INTR_OFF);
+	h->access->set_intr_mask(h, HPSA_INTR_OFF);
 	free_irq(h->intr[h->intr_mode], h);
 #ifdef CONFIG_PCI_MSI
 	if (h->msix_vector)
@@ -4632,7 +4632,7 @@ static __devinit void hpsa_enter_perform
 		return;
 	}
 	/* Change the access methods to the performant access methods */
-	h->access = SA5_performant_access;
+	h->access = &SA5_performant_access;
 	h->transMethod = CFGTBL_Trans_Performant;
 }
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/hpsa.h linux-3.3.8-pax/drivers/scsi/hpsa.h
--- linux-3.3.8/drivers/scsi/hpsa.h	2012-01-08 19:48:15.631471591 +0100
+++ linux-3.3.8-pax/drivers/scsi/hpsa.h	2012-03-19 10:43:44.052034648 +0100
@@ -73,7 +73,7 @@ struct ctlr_info {
 	unsigned int msix_vector;
 	unsigned int msi_vector;
 	int intr_mode; /* either PERF_MODE_INT or SIMPLE_MODE_INT */
-	struct access_method access;
+	struct access_method *access;
 
 	/* queue and queue Info */
 	struct list_head reqQ;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/ips.h linux-3.3.8-pax/drivers/scsi/ips.h
--- linux-3.3.8/drivers/scsi/ips.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/scsi/ips.h	2012-03-19 10:43:44.064034648 +0100
@@ -1027,7 +1027,7 @@ typedef struct {
    int       (*intr)(struct ips_ha *);
    void      (*enableint)(struct ips_ha *);
    uint32_t (*statupd)(struct ips_ha *);
-} ips_hw_func_t;
+} __no_const ips_hw_func_t;
 
 typedef struct ips_ha {
    uint8_t            ha_id[IPS_MAX_CHANNELS+1];
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/libfc/fc_exch.c linux-3.3.8-pax/drivers/scsi/libfc/fc_exch.c
--- linux-3.3.8/drivers/scsi/libfc/fc_exch.c	2012-03-19 10:39:05.672049512 +0100
+++ linux-3.3.8-pax/drivers/scsi/libfc/fc_exch.c	2012-03-19 10:43:44.072034647 +0100
@@ -105,12 +105,12 @@ struct fc_exch_mgr {
 	 * all together if not used XXX
 	 */
 	struct {
-		atomic_t no_free_exch;
-		atomic_t no_free_exch_xid;
-		atomic_t xid_not_found;
-		atomic_t xid_busy;
-		atomic_t seq_not_found;
-		atomic_t non_bls_resp;
+		atomic_unchecked_t no_free_exch;
+		atomic_unchecked_t no_free_exch_xid;
+		atomic_unchecked_t xid_not_found;
+		atomic_unchecked_t xid_busy;
+		atomic_unchecked_t seq_not_found;
+		atomic_unchecked_t non_bls_resp;
 	} stats;
 };
 
@@ -719,7 +719,7 @@ static struct fc_exch *fc_exch_em_alloc(
 	/* allocate memory for exchange */
 	ep = mempool_alloc(mp->ep_pool, GFP_ATOMIC);
 	if (!ep) {
-		atomic_inc(&mp->stats.no_free_exch);
+		atomic_inc_unchecked(&mp->stats.no_free_exch);
 		goto out;
 	}
 	memset(ep, 0, sizeof(*ep));
@@ -780,7 +780,7 @@ out:
 	return ep;
 err:
 	spin_unlock_bh(&pool->lock);
-	atomic_inc(&mp->stats.no_free_exch_xid);
+	atomic_inc_unchecked(&mp->stats.no_free_exch_xid);
 	mempool_free(ep, mp->ep_pool);
 	return NULL;
 }
@@ -923,7 +923,7 @@ static enum fc_pf_rjt_reason fc_seq_look
 		xid = ntohs(fh->fh_ox_id);	/* we originated exch */
 		ep = fc_exch_find(mp, xid);
 		if (!ep) {
-			atomic_inc(&mp->stats.xid_not_found);
+			atomic_inc_unchecked(&mp->stats.xid_not_found);
 			reject = FC_RJT_OX_ID;
 			goto out;
 		}
@@ -953,7 +953,7 @@ static enum fc_pf_rjt_reason fc_seq_look
 		ep = fc_exch_find(mp, xid);
 		if ((f_ctl & FC_FC_FIRST_SEQ) && fc_sof_is_init(fr_sof(fp))) {
 			if (ep) {
-				atomic_inc(&mp->stats.xid_busy);
+				atomic_inc_unchecked(&mp->stats.xid_busy);
 				reject = FC_RJT_RX_ID;
 				goto rel;
 			}
@@ -964,7 +964,7 @@ static enum fc_pf_rjt_reason fc_seq_look
 			}
 			xid = ep->xid;	/* get our XID */
 		} else if (!ep) {
-			atomic_inc(&mp->stats.xid_not_found);
+			atomic_inc_unchecked(&mp->stats.xid_not_found);
 			reject = FC_RJT_RX_ID;	/* XID not found */
 			goto out;
 		}
@@ -981,7 +981,7 @@ static enum fc_pf_rjt_reason fc_seq_look
 	} else {
 		sp = &ep->seq;
 		if (sp->id != fh->fh_seq_id) {
-			atomic_inc(&mp->stats.seq_not_found);
+			atomic_inc_unchecked(&mp->stats.seq_not_found);
 			if (f_ctl & FC_FC_END_SEQ) {
 				/*
 				 * Update sequence_id based on incoming last
@@ -1431,22 +1431,22 @@ static void fc_exch_recv_seq_resp(struct
 
 	ep = fc_exch_find(mp, ntohs(fh->fh_ox_id));
 	if (!ep) {
-		atomic_inc(&mp->stats.xid_not_found);
+		atomic_inc_unchecked(&mp->stats.xid_not_found);
 		goto out;
 	}
 	if (ep->esb_stat & ESB_ST_COMPLETE) {
-		atomic_inc(&mp->stats.xid_not_found);
+		atomic_inc_unchecked(&mp->stats.xid_not_found);
 		goto rel;
 	}
 	if (ep->rxid == FC_XID_UNKNOWN)
 		ep->rxid = ntohs(fh->fh_rx_id);
 	if (ep->sid != 0 && ep->sid != ntoh24(fh->fh_d_id)) {
-		atomic_inc(&mp->stats.xid_not_found);
+		atomic_inc_unchecked(&mp->stats.xid_not_found);
 		goto rel;
 	}
 	if (ep->did != ntoh24(fh->fh_s_id) &&
 	    ep->did != FC_FID_FLOGI) {
-		atomic_inc(&mp->stats.xid_not_found);
+		atomic_inc_unchecked(&mp->stats.xid_not_found);
 		goto rel;
 	}
 	sof = fr_sof(fp);
@@ -1455,7 +1455,7 @@ static void fc_exch_recv_seq_resp(struct
 		sp->ssb_stat |= SSB_ST_RESP;
 		sp->id = fh->fh_seq_id;
 	} else if (sp->id != fh->fh_seq_id) {
-		atomic_inc(&mp->stats.seq_not_found);
+		atomic_inc_unchecked(&mp->stats.seq_not_found);
 		goto rel;
 	}
 
@@ -1519,9 +1519,9 @@ static void fc_exch_recv_resp(struct fc_
 	sp = fc_seq_lookup_orig(mp, fp);	/* doesn't hold sequence */
 
 	if (!sp)
-		atomic_inc(&mp->stats.xid_not_found);
+		atomic_inc_unchecked(&mp->stats.xid_not_found);
 	else
-		atomic_inc(&mp->stats.non_bls_resp);
+		atomic_inc_unchecked(&mp->stats.non_bls_resp);
 
 	fc_frame_free(fp);
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/libsas/sas_ata.c linux-3.3.8-pax/drivers/scsi/libsas/sas_ata.c
--- linux-3.3.8/drivers/scsi/libsas/sas_ata.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/scsi/libsas/sas_ata.c	2012-03-19 10:43:44.072034647 +0100
@@ -368,7 +368,7 @@ static struct ata_port_operations sas_sa
 	.postreset		= ata_std_postreset,
 	.error_handler		= ata_std_error_handler,
 	.post_internal_cmd	= sas_ata_post_internal,
-	.qc_defer               = ata_std_qc_defer,
+	.qc_defer		= ata_std_qc_defer,
 	.qc_prep		= ata_noop_qc_prep,
 	.qc_issue		= sas_ata_qc_issue,
 	.qc_fill_rtf		= sas_ata_qc_fill_rtf,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/lpfc/lpfc_debugfs.c linux-3.3.8-pax/drivers/scsi/lpfc/lpfc_debugfs.c
--- linux-3.3.8/drivers/scsi/lpfc/lpfc_debugfs.c	2012-03-19 10:39:05.688049511 +0100
+++ linux-3.3.8-pax/drivers/scsi/lpfc/lpfc_debugfs.c	2012-03-19 10:43:44.072034647 +0100
@@ -106,7 +106,7 @@ MODULE_PARM_DESC(lpfc_debugfs_mask_disc_
 
 #include <linux/debugfs.h>
 
-static atomic_t lpfc_debugfs_seq_trc_cnt = ATOMIC_INIT(0);
+static atomic_unchecked_t lpfc_debugfs_seq_trc_cnt = ATOMIC_INIT(0);
 static unsigned long lpfc_debugfs_start_time = 0L;
 
 /* iDiag */
@@ -147,7 +147,7 @@ lpfc_debugfs_disc_trc_data(struct lpfc_v
 	lpfc_debugfs_enable = 0;
 
 	len = 0;
-	index = (atomic_read(&vport->disc_trc_cnt) + 1) &
+	index = (atomic_read_unchecked(&vport->disc_trc_cnt) + 1) &
 		(lpfc_debugfs_max_disc_trc - 1);
 	for (i = index; i < lpfc_debugfs_max_disc_trc; i++) {
 		dtp = vport->disc_trc + i;
@@ -213,7 +213,7 @@ lpfc_debugfs_slow_ring_trc_data(struct l
 	lpfc_debugfs_enable = 0;
 
 	len = 0;
-	index = (atomic_read(&phba->slow_ring_trc_cnt) + 1) &
+	index = (atomic_read_unchecked(&phba->slow_ring_trc_cnt) + 1) &
 		(lpfc_debugfs_max_slow_ring_trc - 1);
 	for (i = index; i < lpfc_debugfs_max_slow_ring_trc; i++) {
 		dtp = phba->slow_ring_trc + i;
@@ -636,14 +636,14 @@ lpfc_debugfs_disc_trc(struct lpfc_vport
 		!vport || !vport->disc_trc)
 		return;
 
-	index = atomic_inc_return(&vport->disc_trc_cnt) &
+	index = atomic_inc_return_unchecked(&vport->disc_trc_cnt) &
 		(lpfc_debugfs_max_disc_trc - 1);
 	dtp = vport->disc_trc + index;
 	dtp->fmt = fmt;
 	dtp->data1 = data1;
 	dtp->data2 = data2;
 	dtp->data3 = data3;
-	dtp->seq_cnt = atomic_inc_return(&lpfc_debugfs_seq_trc_cnt);
+	dtp->seq_cnt = atomic_inc_return_unchecked(&lpfc_debugfs_seq_trc_cnt);
 	dtp->jif = jiffies;
 #endif
 	return;
@@ -674,14 +674,14 @@ lpfc_debugfs_slow_ring_trc(struct lpfc_h
 		!phba || !phba->slow_ring_trc)
 		return;
 
-	index = atomic_inc_return(&phba->slow_ring_trc_cnt) &
+	index = atomic_inc_return_unchecked(&phba->slow_ring_trc_cnt) &
 		(lpfc_debugfs_max_slow_ring_trc - 1);
 	dtp = phba->slow_ring_trc + index;
 	dtp->fmt = fmt;
 	dtp->data1 = data1;
 	dtp->data2 = data2;
 	dtp->data3 = data3;
-	dtp->seq_cnt = atomic_inc_return(&lpfc_debugfs_seq_trc_cnt);
+	dtp->seq_cnt = atomic_inc_return_unchecked(&lpfc_debugfs_seq_trc_cnt);
 	dtp->jif = jiffies;
 #endif
 	return;
@@ -4040,7 +4040,7 @@ lpfc_debugfs_initialize(struct lpfc_vpor
 						 "slow_ring buffer\n");
 				goto debug_failed;
 			}
-			atomic_set(&phba->slow_ring_trc_cnt, 0);
+			atomic_set_unchecked(&phba->slow_ring_trc_cnt, 0);
 			memset(phba->slow_ring_trc, 0,
 				(sizeof(struct lpfc_debugfs_trc) *
 				lpfc_debugfs_max_slow_ring_trc));
@@ -4086,7 +4086,7 @@ lpfc_debugfs_initialize(struct lpfc_vpor
 				 "buffer\n");
 		goto debug_failed;
 	}
-	atomic_set(&vport->disc_trc_cnt, 0);
+	atomic_set_unchecked(&vport->disc_trc_cnt, 0);
 
 	snprintf(name, sizeof(name), "discovery_trace");
 	vport->debug_disc_trc =
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/lpfc/lpfc.h linux-3.3.8-pax/drivers/scsi/lpfc/lpfc.h
--- linux-3.3.8/drivers/scsi/lpfc/lpfc.h	2012-03-19 10:39:05.676049512 +0100
+++ linux-3.3.8-pax/drivers/scsi/lpfc/lpfc.h	2012-03-19 10:43:44.072034648 +0100
@@ -413,7 +413,7 @@ struct lpfc_vport {
 	struct dentry *debug_nodelist;
 	struct dentry *vport_debugfs_root;
 	struct lpfc_debugfs_trc *disc_trc;
-	atomic_t disc_trc_cnt;
+	atomic_unchecked_t disc_trc_cnt;
 #endif
 	uint8_t stat_data_enabled;
 	uint8_t stat_data_blocked;
@@ -821,8 +821,8 @@ struct lpfc_hba {
 	struct timer_list fabric_block_timer;
 	unsigned long bit_flags;
 #define	FABRIC_COMANDS_BLOCKED	0
-	atomic_t num_rsrc_err;
-	atomic_t num_cmd_success;
+	atomic_unchecked_t num_rsrc_err;
+	atomic_unchecked_t num_cmd_success;
 	unsigned long last_rsrc_error_time;
 	unsigned long last_ramp_down_time;
 	unsigned long last_ramp_up_time;
@@ -852,7 +852,7 @@ struct lpfc_hba {
 
 	struct dentry *debug_slow_ring_trc;
 	struct lpfc_debugfs_trc *slow_ring_trc;
-	atomic_t slow_ring_trc_cnt;
+	atomic_unchecked_t slow_ring_trc_cnt;
 	/* iDiag debugfs sub-directory */
 	struct dentry *idiag_root;
 	struct dentry *idiag_pci_cfg;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/lpfc/lpfc_init.c linux-3.3.8-pax/drivers/scsi/lpfc/lpfc_init.c
--- linux-3.3.8/drivers/scsi/lpfc/lpfc_init.c	2012-03-19 10:39:05.708049510 +0100
+++ linux-3.3.8-pax/drivers/scsi/lpfc/lpfc_init.c	2012-03-19 10:43:44.080034647 +0100
@@ -10145,8 +10145,10 @@ lpfc_init(void)
 	printk(LPFC_COPYRIGHT "\n");
 
 	if (lpfc_enable_npiv) {
-		lpfc_transport_functions.vport_create = lpfc_vport_create;
-		lpfc_transport_functions.vport_delete = lpfc_vport_delete;
+		pax_open_kernel();
+		*(void **)&lpfc_transport_functions.vport_create = lpfc_vport_create;
+		*(void **)&lpfc_transport_functions.vport_delete = lpfc_vport_delete;
+		pax_close_kernel();
 	}
 	lpfc_transport_template =
 				fc_attach_transport(&lpfc_transport_functions);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/lpfc/lpfc_scsi.c linux-3.3.8-pax/drivers/scsi/lpfc/lpfc_scsi.c
--- linux-3.3.8/drivers/scsi/lpfc/lpfc_scsi.c	2012-03-19 10:39:05.716049509 +0100
+++ linux-3.3.8-pax/drivers/scsi/lpfc/lpfc_scsi.c	2012-03-19 10:43:44.080034648 +0100
@@ -305,7 +305,7 @@ lpfc_rampdown_queue_depth(struct lpfc_hb
 	uint32_t evt_posted;
 
 	spin_lock_irqsave(&phba->hbalock, flags);
-	atomic_inc(&phba->num_rsrc_err);
+	atomic_inc_unchecked(&phba->num_rsrc_err);
 	phba->last_rsrc_error_time = jiffies;
 
 	if ((phba->last_ramp_down_time + QUEUE_RAMP_DOWN_INTERVAL) > jiffies) {
@@ -346,7 +346,7 @@ lpfc_rampup_queue_depth(struct lpfc_vpor
 	unsigned long flags;
 	struct lpfc_hba *phba = vport->phba;
 	uint32_t evt_posted;
-	atomic_inc(&phba->num_cmd_success);
+	atomic_inc_unchecked(&phba->num_cmd_success);
 
 	if (vport->cfg_lun_queue_depth <= queue_depth)
 		return;
@@ -390,8 +390,8 @@ lpfc_ramp_down_queue_handler(struct lpfc
 	unsigned long num_rsrc_err, num_cmd_success;
 	int i;
 
-	num_rsrc_err = atomic_read(&phba->num_rsrc_err);
-	num_cmd_success = atomic_read(&phba->num_cmd_success);
+	num_rsrc_err = atomic_read_unchecked(&phba->num_rsrc_err);
+	num_cmd_success = atomic_read_unchecked(&phba->num_cmd_success);
 
 	vports = lpfc_create_vport_work_array(phba);
 	if (vports != NULL)
@@ -411,8 +411,8 @@ lpfc_ramp_down_queue_handler(struct lpfc
 			}
 		}
 	lpfc_destroy_vport_work_array(phba, vports);
-	atomic_set(&phba->num_rsrc_err, 0);
-	atomic_set(&phba->num_cmd_success, 0);
+	atomic_set_unchecked(&phba->num_rsrc_err, 0);
+	atomic_set_unchecked(&phba->num_cmd_success, 0);
 }
 
 /**
@@ -446,8 +446,8 @@ lpfc_ramp_up_queue_handler(struct lpfc_h
 			}
 		}
 	lpfc_destroy_vport_work_array(phba, vports);
-	atomic_set(&phba->num_rsrc_err, 0);
-	atomic_set(&phba->num_cmd_success, 0);
+	atomic_set_unchecked(&phba->num_rsrc_err, 0);
+	atomic_set_unchecked(&phba->num_cmd_success, 0);
 }
 
 /**
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/pmcraid.c linux-3.3.8-pax/drivers/scsi/pmcraid.c
--- linux-3.3.8/drivers/scsi/pmcraid.c	2012-03-19 10:39:05.800049505 +0100
+++ linux-3.3.8-pax/drivers/scsi/pmcraid.c	2012-03-19 10:43:44.084034646 +0100
@@ -200,8 +200,8 @@ static int pmcraid_slave_alloc(struct sc
 		res->scsi_dev = scsi_dev;
 		scsi_dev->hostdata = res;
 		res->change_detected = 0;
-		atomic_set(&res->read_failures, 0);
-		atomic_set(&res->write_failures, 0);
+		atomic_set_unchecked(&res->read_failures, 0);
+		atomic_set_unchecked(&res->write_failures, 0);
 		rc = 0;
 	}
 	spin_unlock_irqrestore(&pinstance->resource_lock, lock_flags);
@@ -2676,9 +2676,9 @@ static int pmcraid_error_handler(struct
 
 	/* If this was a SCSI read/write command keep count of errors */
 	if (SCSI_CMD_TYPE(scsi_cmd->cmnd[0]) == SCSI_READ_CMD)
-		atomic_inc(&res->read_failures);
+		atomic_inc_unchecked(&res->read_failures);
 	else if (SCSI_CMD_TYPE(scsi_cmd->cmnd[0]) == SCSI_WRITE_CMD)
-		atomic_inc(&res->write_failures);
+		atomic_inc_unchecked(&res->write_failures);
 
 	if (!RES_IS_GSCSI(res->cfg_entry) &&
 		masked_ioasc != PMCRAID_IOASC_HW_DEVICE_BUS_STATUS_ERROR) {
@@ -3534,7 +3534,7 @@ static int pmcraid_queuecommand_lck(
 	 * block of scsi_cmd which is re-used (e.g. cancel/abort), which uses
 	 * hrrq_id assigned here in queuecommand
 	 */
-	ioarcb->hrrq_id = atomic_add_return(1, &(pinstance->last_message_id)) %
+	ioarcb->hrrq_id = atomic_add_return_unchecked(1, &(pinstance->last_message_id)) %
 			  pinstance->num_hrrq;
 	cmd->cmd_done = pmcraid_io_done;
 
@@ -3859,7 +3859,7 @@ static long pmcraid_ioctl_passthrough(
 	 * block of scsi_cmd which is re-used (e.g. cancel/abort), which uses
 	 * hrrq_id assigned here in queuecommand
 	 */
-	ioarcb->hrrq_id = atomic_add_return(1, &(pinstance->last_message_id)) %
+	ioarcb->hrrq_id = atomic_add_return_unchecked(1, &(pinstance->last_message_id)) %
 			  pinstance->num_hrrq;
 
 	if (request_size) {
@@ -4497,7 +4497,7 @@ static void pmcraid_worker_function(stru
 
 	pinstance = container_of(workp, struct pmcraid_instance, worker_q);
 	/* add resources only after host is added into system */
-	if (!atomic_read(&pinstance->expose_resources))
+	if (!atomic_read_unchecked(&pinstance->expose_resources))
 		return;
 
 	fw_version = be16_to_cpu(pinstance->inq_data->fw_version);
@@ -5331,8 +5331,8 @@ static int __devinit pmcraid_init_instan
 	init_waitqueue_head(&pinstance->reset_wait_q);
 
 	atomic_set(&pinstance->outstanding_cmds, 0);
-	atomic_set(&pinstance->last_message_id, 0);
-	atomic_set(&pinstance->expose_resources, 0);
+	atomic_set_unchecked(&pinstance->last_message_id, 0);
+	atomic_set_unchecked(&pinstance->expose_resources, 0);
 
 	INIT_LIST_HEAD(&pinstance->free_res_q);
 	INIT_LIST_HEAD(&pinstance->used_res_q);
@@ -6047,7 +6047,7 @@ static int __devinit pmcraid_probe(
 	/* Schedule worker thread to handle CCN and take care of adding and
 	 * removing devices to OS
 	 */
-	atomic_set(&pinstance->expose_resources, 1);
+	atomic_set_unchecked(&pinstance->expose_resources, 1);
 	schedule_work(&pinstance->worker_q);
 	return rc;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/pmcraid.h linux-3.3.8-pax/drivers/scsi/pmcraid.h
--- linux-3.3.8/drivers/scsi/pmcraid.h	2012-01-08 19:48:16.103471565 +0100
+++ linux-3.3.8-pax/drivers/scsi/pmcraid.h	2012-03-19 10:43:44.084034646 +0100
@@ -748,7 +748,7 @@ struct pmcraid_instance {
 	struct pmcraid_isr_param hrrq_vector[PMCRAID_NUM_MSIX_VECTORS];
 
 	/* Message id as filled in last fired IOARCB, used to identify HRRQ */
-	atomic_t last_message_id;
+	atomic_unchecked_t last_message_id;
 
 	/* configuration table */
 	struct pmcraid_config_table *cfg_table;
@@ -777,7 +777,7 @@ struct pmcraid_instance {
 	atomic_t outstanding_cmds;
 
 	/* should add/delete resources to mid-layer now ?*/
-	atomic_t expose_resources;
+	atomic_unchecked_t expose_resources;
 
 
 
@@ -813,8 +813,8 @@ struct pmcraid_resource_entry {
 		struct pmcraid_config_table_entry_ext cfg_entry_ext;
 	};
 	struct scsi_device *scsi_dev;	/* Link scsi_device structure */
-	atomic_t read_failures;		/* count of failed READ commands */
-	atomic_t write_failures;	/* count of failed WRITE commands */
+	atomic_unchecked_t read_failures;	/* count of failed READ commands */
+	atomic_unchecked_t write_failures;	/* count of failed WRITE commands */
 
 	/* To indicate add/delete/modify during CCN */
 	u8 change_detected;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/qla2xxx/qla_def.h linux-3.3.8-pax/drivers/scsi/qla2xxx/qla_def.h
--- linux-3.3.8/drivers/scsi/qla2xxx/qla_def.h	2012-03-19 10:39:05.808049504 +0100
+++ linux-3.3.8-pax/drivers/scsi/qla2xxx/qla_def.h	2012-03-19 10:43:44.084034646 +0100
@@ -2247,7 +2247,7 @@ struct isp_operations {
 	int (*start_scsi) (srb_t *);
 	int (*abort_isp) (struct scsi_qla_host *);
 	int (*iospace_config)(struct qla_hw_data*);
-};
+} __no_const;
 
 /* MSI-X Support *************************************************************/
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/qla4xxx/ql4_def.h linux-3.3.8-pax/drivers/scsi/qla4xxx/ql4_def.h
--- linux-3.3.8/drivers/scsi/qla4xxx/ql4_def.h	2012-03-19 10:39:05.840049503 +0100
+++ linux-3.3.8-pax/drivers/scsi/qla4xxx/ql4_def.h	2012-03-19 10:43:44.092034644 +0100
@@ -261,7 +261,7 @@ struct ddb_entry {
 					   * (4000 only) */
 	atomic_t relogin_timer;		  /* Max Time to wait for
 					   * relogin to complete */
-	atomic_t relogin_retry_count;	  /* Num of times relogin has been
+	atomic_unchecked_t relogin_retry_count;	  /* Num of times relogin has been
 					   * retried */
 	uint32_t default_time2wait;	  /* Default Min time between
 					   * relogins (+aens) */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/qla4xxx/ql4_os.c linux-3.3.8-pax/drivers/scsi/qla4xxx/ql4_os.c
--- linux-3.3.8/drivers/scsi/qla4xxx/ql4_os.c	2012-03-19 10:39:05.852049502 +0100
+++ linux-3.3.8-pax/drivers/scsi/qla4xxx/ql4_os.c	2012-03-19 10:43:44.092034644 +0100
@@ -2178,12 +2178,12 @@ static void qla4xxx_check_relogin_flash_
 		 */
 		if (!iscsi_is_session_online(cls_sess)) {
 			/* Reset retry relogin timer */
-			atomic_inc(&ddb_entry->relogin_retry_count);
+			atomic_inc_unchecked(&ddb_entry->relogin_retry_count);
 			DEBUG2(ql4_printk(KERN_INFO, ha,
 				"%s: index[%d] relogin timed out-retrying"
 				" relogin (%d), retry (%d)\n", __func__,
 				ddb_entry->fw_ddb_index,
-				atomic_read(&ddb_entry->relogin_retry_count),
+				atomic_read_unchecked(&ddb_entry->relogin_retry_count),
 				ddb_entry->default_time2wait + 4));
 			set_bit(DPC_RELOGIN_DEVICE, &ha->dpc_flags);
 			atomic_set(&ddb_entry->retry_relogin_timer,
@@ -3953,7 +3953,7 @@ static void qla4xxx_setup_flash_ddb_entr
 
 	atomic_set(&ddb_entry->retry_relogin_timer, INVALID_ENTRY);
 	atomic_set(&ddb_entry->relogin_timer, 0);
-	atomic_set(&ddb_entry->relogin_retry_count, 0);
+	atomic_set_unchecked(&ddb_entry->relogin_retry_count, 0);
 	def_timeout = le16_to_cpu(ddb_entry->fw_ddb_entry.def_timeout);
 	ddb_entry->default_relogin_timeout =
 		(def_timeout > LOGIN_TOV) && (def_timeout < LOGIN_TOV * 10) ?
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/scsi.c linux-3.3.8-pax/drivers/scsi/scsi.c
--- linux-3.3.8/drivers/scsi/scsi.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/scsi/scsi.c	2012-03-19 10:43:44.092034645 +0100
@@ -655,7 +655,7 @@ int scsi_dispatch_cmd(struct scsi_cmnd *
 	unsigned long timeout;
 	int rtn = 0;
 
-	atomic_inc(&cmd->device->iorequest_cnt);
+	atomic_inc_unchecked(&cmd->device->iorequest_cnt);
 
 	/* check if the device is still usable */
 	if (unlikely(cmd->device->sdev_state == SDEV_DEL)) {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/scsi_lib.c linux-3.3.8-pax/drivers/scsi/scsi_lib.c
--- linux-3.3.8/drivers/scsi/scsi_lib.c	2012-03-19 10:39:05.868049501 +0100
+++ linux-3.3.8-pax/drivers/scsi/scsi_lib.c	2012-03-19 10:43:44.092034645 +0100
@@ -1411,7 +1411,7 @@ static void scsi_kill_request(struct req
 	shost = sdev->host;
 	scsi_init_cmd_errh(cmd);
 	cmd->result = DID_NO_CONNECT << 16;
-	atomic_inc(&cmd->device->iorequest_cnt);
+	atomic_inc_unchecked(&cmd->device->iorequest_cnt);
 
 	/*
 	 * SCSI request completion path will do scsi_device_unbusy(),
@@ -1437,9 +1437,9 @@ static void scsi_softirq_done(struct req
 
 	INIT_LIST_HEAD(&cmd->eh_entry);
 
-	atomic_inc(&cmd->device->iodone_cnt);
+	atomic_inc_unchecked(&cmd->device->iodone_cnt);
 	if (cmd->result)
-		atomic_inc(&cmd->device->ioerr_cnt);
+		atomic_inc_unchecked(&cmd->device->ioerr_cnt);
 
 	disposition = scsi_decide_disposition(cmd);
 	if (disposition != SUCCESS &&
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/scsi_sysfs.c linux-3.3.8-pax/drivers/scsi/scsi_sysfs.c
--- linux-3.3.8/drivers/scsi/scsi_sysfs.c	2012-01-08 19:48:16.295471555 +0100
+++ linux-3.3.8-pax/drivers/scsi/scsi_sysfs.c	2012-03-19 10:43:44.096034647 +0100
@@ -660,7 +660,7 @@ show_iostat_##field(struct device *dev,
 		    char *buf)						\
 {									\
 	struct scsi_device *sdev = to_scsi_device(dev);			\
-	unsigned long long count = atomic_read(&sdev->field);		\
+	unsigned long long count = atomic_read_unchecked(&sdev->field);	\
 	return snprintf(buf, 20, "0x%llx\n", count);			\
 }									\
 static DEVICE_ATTR(field, S_IRUGO, show_iostat_##field, NULL)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/scsi_tgt_lib.c linux-3.3.8-pax/drivers/scsi/scsi_tgt_lib.c
--- linux-3.3.8/drivers/scsi/scsi_tgt_lib.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/scsi/scsi_tgt_lib.c	2012-03-19 10:43:44.096034647 +0100
@@ -362,7 +362,7 @@ static int scsi_map_user_pages(struct sc
 	int err;
 
 	dprintk("%lx %u\n", uaddr, len);
-	err = blk_rq_map_user(q, rq, NULL, (void *)uaddr, len, GFP_KERNEL);
+	err = blk_rq_map_user(q, rq, NULL, (void __user *)uaddr, len, GFP_KERNEL);
 	if (err) {
 		/*
 		 * TODO: need to fixup sg_tablesize, max_segment_size,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/scsi_transport_fc.c linux-3.3.8-pax/drivers/scsi/scsi_transport_fc.c
--- linux-3.3.8/drivers/scsi/scsi_transport_fc.c	2012-03-19 10:39:05.876049501 +0100
+++ linux-3.3.8-pax/drivers/scsi/scsi_transport_fc.c	2012-03-19 10:43:44.096034647 +0100
@@ -484,7 +484,7 @@ static DECLARE_TRANSPORT_CLASS(fc_vport_
  * Netlink Infrastructure
  */
 
-static atomic_t fc_event_seq;
+static atomic_unchecked_t fc_event_seq;
 
 /**
  * fc_get_event_number - Obtain the next sequential FC event number
@@ -497,7 +497,7 @@ static atomic_t fc_event_seq;
 u32
 fc_get_event_number(void)
 {
-	return atomic_add_return(1, &fc_event_seq);
+	return atomic_add_return_unchecked(1, &fc_event_seq);
 }
 EXPORT_SYMBOL(fc_get_event_number);
 
@@ -645,7 +645,7 @@ static __init int fc_transport_init(void
 {
 	int error;
 
-	atomic_set(&fc_event_seq, 0);
+	atomic_set_unchecked(&fc_event_seq, 0);
 
 	error = transport_class_register(&fc_host_class);
 	if (error)
@@ -835,7 +835,7 @@ static int fc_str_to_dev_loss(const char
 	char *cp;
 
 	*val = simple_strtoul(buf, &cp, 0);
-	if ((*cp && (*cp != '\n')) || (*val < 0))
+	if (*cp && (*cp != '\n'))
 		return -EINVAL;
 	/*
 	 * Check for overflow; dev_loss_tmo is u32
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/scsi_transport_iscsi.c linux-3.3.8-pax/drivers/scsi/scsi_transport_iscsi.c
--- linux-3.3.8/drivers/scsi/scsi_transport_iscsi.c	2012-04-03 22:02:49.814109994 +0200
+++ linux-3.3.8-pax/drivers/scsi/scsi_transport_iscsi.c	2012-04-03 22:03:06.874110920 +0200
@@ -79,7 +79,7 @@ struct iscsi_internal {
 	struct transport_container session_cont;
 };
 
-static atomic_t iscsi_session_nr; /* sysfs session id for next new session */
+static atomic_unchecked_t iscsi_session_nr; /* sysfs session id for next new session */
 static struct workqueue_struct *iscsi_eh_timer_workq;
 
 static DEFINE_IDA(iscsi_sess_ida);
@@ -1063,7 +1063,7 @@ int iscsi_add_session(struct iscsi_cls_s
 	int err;
 
 	ihost = shost->shost_data;
-	session->sid = atomic_add_return(1, &iscsi_session_nr);
+	session->sid = atomic_add_return_unchecked(1, &iscsi_session_nr);
 
 	if (target_id == ISCSI_MAX_TARGET) {
 		id = ida_simple_get(&iscsi_sess_ida, 0, 0, GFP_KERNEL);
@@ -2680,7 +2680,7 @@ static __init int iscsi_transport_init(v
 	printk(KERN_INFO "Loading iSCSI transport class v%s.\n",
 		ISCSI_TRANSPORT_VERSION);
 
-	atomic_set(&iscsi_session_nr, 0);
+	atomic_set_unchecked(&iscsi_session_nr, 0);
 
 	err = class_register(&iscsi_transport_class);
 	if (err)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/scsi_transport_srp.c linux-3.3.8-pax/drivers/scsi/scsi_transport_srp.c
--- linux-3.3.8/drivers/scsi/scsi_transport_srp.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/scsi/scsi_transport_srp.c	2012-03-19 10:43:44.100034648 +0100
@@ -33,7 +33,7 @@
 #include "scsi_transport_srp_internal.h"
 
 struct srp_host_attrs {
-	atomic_t next_port_id;
+	atomic_unchecked_t next_port_id;
 };
 #define to_srp_host_attrs(host)	((struct srp_host_attrs *)(host)->shost_data)
 
@@ -62,7 +62,7 @@ static int srp_host_setup(struct transpo
 	struct Scsi_Host *shost = dev_to_shost(dev);
 	struct srp_host_attrs *srp_host = to_srp_host_attrs(shost);
 
-	atomic_set(&srp_host->next_port_id, 0);
+	atomic_set_unchecked(&srp_host->next_port_id, 0);
 	return 0;
 }
 
@@ -211,7 +211,7 @@ struct srp_rport *srp_rport_add(struct S
 	memcpy(rport->port_id, ids->port_id, sizeof(rport->port_id));
 	rport->roles = ids->roles;
 
-	id = atomic_inc_return(&to_srp_host_attrs(shost)->next_port_id);
+	id = atomic_inc_return_unchecked(&to_srp_host_attrs(shost)->next_port_id);
 	dev_set_name(&rport->dev, "port-%d:%d", shost->host_no, id);
 
 	transport_setup_device(&rport->dev);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/scsi/sg.c linux-3.3.8-pax/drivers/scsi/sg.c
--- linux-3.3.8/drivers/scsi/sg.c	2012-03-19 10:39:05.888049499 +0100
+++ linux-3.3.8-pax/drivers/scsi/sg.c	2012-03-19 10:43:44.108034647 +0100
@@ -1077,7 +1077,7 @@ sg_ioctl(struct file *filp, unsigned int
 				       sdp->disk->disk_name,
 				       MKDEV(SCSI_GENERIC_MAJOR, sdp->index),
 				       NULL,
-				       (char *)arg);
+				       (char __user *)arg);
 	case BLKTRACESTART:
 		return blk_trace_startstop(sdp->device->request_queue, 1);
 	case BLKTRACESTOP:
@@ -2312,7 +2312,7 @@ struct sg_proc_leaf {
 	const struct file_operations * fops;
 };
 
-static struct sg_proc_leaf sg_proc_leaf_arr[] = {
+static const struct sg_proc_leaf sg_proc_leaf_arr[] = {
 	{"allow_dio", &adio_fops},
 	{"debug", &debug_fops},
 	{"def_reserved_size", &dressz_fops},
@@ -2332,7 +2332,7 @@ sg_proc_init(void)
 	if (!sg_proc_sgp)
 		return 1;
 	for (k = 0; k < num_leaves; ++k) {
-		struct sg_proc_leaf *leaf = &sg_proc_leaf_arr[k];
+		const struct sg_proc_leaf *leaf = &sg_proc_leaf_arr[k];
 		umode_t mask = leaf->fops->write ? S_IRUGO | S_IWUSR : S_IRUGO;
 		proc_create(leaf->name, mask, sg_proc_sgp, leaf->fops);
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/spi/spi.c linux-3.3.8-pax/drivers/spi/spi.c
--- linux-3.3.8/drivers/spi/spi.c	2012-03-19 10:39:05.936049499 +0100
+++ linux-3.3.8-pax/drivers/spi/spi.c	2012-03-19 10:43:44.108034647 +0100
@@ -1024,7 +1024,7 @@ int spi_bus_unlock(struct spi_master *ma
 EXPORT_SYMBOL_GPL(spi_bus_unlock);
 
 /* portable code must never pass more than 32 bytes */
-#define	SPI_BUFSIZ	max(32,SMP_CACHE_BYTES)
+#define	SPI_BUFSIZ	max(32UL,SMP_CACHE_BYTES)
 
 static u8	*buf;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/spi/spi-dw-pci.c linux-3.3.8-pax/drivers/spi/spi-dw-pci.c
--- linux-3.3.8/drivers/spi/spi-dw-pci.c	2012-01-08 19:48:16.443471547 +0100
+++ linux-3.3.8-pax/drivers/spi/spi-dw-pci.c	2012-03-19 10:43:44.108034647 +0100
@@ -149,7 +149,7 @@ static int spi_resume(struct pci_dev *pd
 #define spi_resume	NULL
 #endif
 
-static const struct pci_device_id pci_ids[] __devinitdata = {
+static const struct pci_device_id pci_ids[] __devinitconst = {
 	/* Intel MID platform SPI controller 0 */
 	{ PCI_DEVICE(PCI_VENDOR_ID_INTEL, 0x0800) },
 	{},
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/staging/octeon/ethernet.c linux-3.3.8-pax/drivers/staging/octeon/ethernet.c
--- linux-3.3.8/drivers/staging/octeon/ethernet.c	2012-03-19 10:39:06.976049445 +0100
+++ linux-3.3.8-pax/drivers/staging/octeon/ethernet.c	2012-03-19 10:43:44.108034648 +0100
@@ -258,11 +258,11 @@ static struct net_device_stats *cvm_oct_
 		 * since the RX tasklet also increments it.
 		 */
 #ifdef CONFIG_64BIT
-		atomic64_add(rx_status.dropped_packets,
-			     (atomic64_t *)&priv->stats.rx_dropped);
+		atomic64_add_unchecked(rx_status.dropped_packets,
+			     (atomic64_unchecked_t *)&priv->stats.rx_dropped);
 #else
-		atomic_add(rx_status.dropped_packets,
-			     (atomic_t *)&priv->stats.rx_dropped);
+		atomic_add_unchecked(rx_status.dropped_packets,
+			     (atomic_unchecked_t *)&priv->stats.rx_dropped);
 #endif
 	}
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/staging/octeon/ethernet-rx.c linux-3.3.8-pax/drivers/staging/octeon/ethernet-rx.c
--- linux-3.3.8/drivers/staging/octeon/ethernet-rx.c	2012-03-19 10:39:06.972049445 +0100
+++ linux-3.3.8-pax/drivers/staging/octeon/ethernet-rx.c	2012-03-19 10:43:44.108034648 +0100
@@ -420,11 +420,11 @@ static int cvm_oct_napi_poll(struct napi
 				/* Increment RX stats for virtual ports */
 				if (work->ipprt >= CVMX_PIP_NUM_INPUT_PORTS) {
 #ifdef CONFIG_64BIT
-					atomic64_add(1, (atomic64_t *)&priv->stats.rx_packets);
-					atomic64_add(skb->len, (atomic64_t *)&priv->stats.rx_bytes);
+					atomic64_add_unchecked(1, (atomic64_unchecked_t *)&priv->stats.rx_packets);
+					atomic64_add_unchecked(skb->len, (atomic64_unchecked_t *)&priv->stats.rx_bytes);
 #else
-					atomic_add(1, (atomic_t *)&priv->stats.rx_packets);
-					atomic_add(skb->len, (atomic_t *)&priv->stats.rx_bytes);
+					atomic_add_unchecked(1, (atomic_unchecked_t *)&priv->stats.rx_packets);
+					atomic_add_unchecked(skb->len, (atomic_unchecked_t *)&priv->stats.rx_bytes);
 #endif
 				}
 				netif_receive_skb(skb);
@@ -436,9 +436,9 @@ static int cvm_oct_napi_poll(struct napi
 					   dev->name);
 				*/
 #ifdef CONFIG_64BIT
-				atomic64_add(1, (atomic64_t *)&priv->stats.rx_dropped);
+				atomic64_unchecked_add(1, (atomic64_unchecked_t *)&priv->stats.rx_dropped);
 #else
-				atomic_add(1, (atomic_t *)&priv->stats.rx_dropped);
+				atomic_add_unchecked(1, (atomic_unchecked_t *)&priv->stats.rx_dropped);
 #endif
 				dev_kfree_skb_irq(skb);
 			}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/staging/rtl8712/rtl871x_io.h linux-3.3.8-pax/drivers/staging/rtl8712/rtl871x_io.h
--- linux-3.3.8/drivers/staging/rtl8712/rtl871x_io.h	2012-01-08 19:48:19.483471385 +0100
+++ linux-3.3.8-pax/drivers/staging/rtl8712/rtl871x_io.h	2012-03-19 10:43:44.108034648 +0100
@@ -108,7 +108,7 @@ struct	_io_ops {
 			  u8 *pmem);
 	u32 (*_write_port)(struct intf_hdl *pintfhdl, u32 addr, u32 cnt,
 			   u8 *pmem);
-};
+} __no_const;
 
 struct io_req {
 	struct list_head list;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/staging/sbe-2t3e3/netdev.c linux-3.3.8-pax/drivers/staging/sbe-2t3e3/netdev.c
--- linux-3.3.8/drivers/staging/sbe-2t3e3/netdev.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/staging/sbe-2t3e3/netdev.c	2012-03-19 10:43:44.108034648 +0100
@@ -51,7 +51,7 @@ int t3e3_ioctl(struct net_device *dev, s
 	t3e3_if_config(sc, cmd_2t3e3, (char *)&param, &resp, &rlen);
 
 	if (rlen)
-		if (copy_to_user(data, &resp, rlen))
+		if (rlen > sizeof resp || copy_to_user(data, &resp, rlen))
 			return -EFAULT;
 
 	return 0;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/staging/speakup/speakup_soft.c linux-3.3.8-pax/drivers/staging/speakup/speakup_soft.c
--- linux-3.3.8/drivers/staging/speakup/speakup_soft.c	2011-10-24 12:48:37.219091188 +0200
+++ linux-3.3.8-pax/drivers/staging/speakup/speakup_soft.c	2012-03-19 10:43:44.108034648 +0100
@@ -241,11 +241,11 @@ static ssize_t softsynth_read(struct fil
 			break;
 		} else if (!initialized) {
 			if (*init) {
-				ch = *init;
 				init++;
 			} else {
 				initialized = 1;
 			}
+			ch = *init;
 		} else {
 			ch = synth_buffer_getc();
 		}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/staging/usbip/usbip_common.h linux-3.3.8-pax/drivers/staging/usbip/usbip_common.h
--- linux-3.3.8/drivers/staging/usbip/usbip_common.h	2012-03-19 10:39:07.640049406 +0100
+++ linux-3.3.8-pax/drivers/staging/usbip/usbip_common.h	2012-03-19 10:43:44.112034647 +0100
@@ -289,7 +289,7 @@ struct usbip_device {
 		void (*shutdown)(struct usbip_device *);
 		void (*reset)(struct usbip_device *);
 		void (*unusable)(struct usbip_device *);
-	} eh_ops;
+	} __no_const eh_ops;
 };
 
 /* usbip_common.c */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/staging/usbip/vhci.h linux-3.3.8-pax/drivers/staging/usbip/vhci.h
--- linux-3.3.8/drivers/staging/usbip/vhci.h	2012-01-08 19:48:19.835471366 +0100
+++ linux-3.3.8-pax/drivers/staging/usbip/vhci.h	2012-03-19 10:43:44.112034647 +0100
@@ -88,7 +88,7 @@ struct vhci_hcd {
 	unsigned resuming:1;
 	unsigned long re_timeout;
 
-	atomic_t seqnum;
+	atomic_unchecked_t seqnum;
 
 	/*
 	 * NOTE:
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/staging/usbip/vhci_hcd.c linux-3.3.8-pax/drivers/staging/usbip/vhci_hcd.c
--- linux-3.3.8/drivers/staging/usbip/vhci_hcd.c	2011-10-24 12:48:37.407091178 +0200
+++ linux-3.3.8-pax/drivers/staging/usbip/vhci_hcd.c	2012-03-19 10:43:44.112034647 +0100
@@ -527,7 +527,7 @@ static void vhci_tx_urb(struct urb *urb)
 		return;
 	}
 
-	priv->seqnum = atomic_inc_return(&the_controller->seqnum);
+	priv->seqnum = atomic_inc_return_unchecked(&the_controller->seqnum);
 	if (priv->seqnum == 0xffff)
 		dev_info(&urb->dev->dev, "seqnum max\n");
 
@@ -779,7 +779,7 @@ static int vhci_urb_dequeue(struct usb_h
 			return -ENOMEM;
 		}
 
-		unlink->seqnum = atomic_inc_return(&the_controller->seqnum);
+		unlink->seqnum = atomic_inc_return_unchecked(&the_controller->seqnum);
 		if (unlink->seqnum == 0xffff)
 			pr_info("seqnum max\n");
 
@@ -969,7 +969,7 @@ static int vhci_start(struct usb_hcd *hc
 		vdev->rhport = rhport;
 	}
 
-	atomic_set(&vhci->seqnum, 0);
+	atomic_set_unchecked(&vhci->seqnum, 0);
 	spin_lock_init(&vhci->lock);
 
 	hcd->power_budget = 0; /* no limit */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/staging/usbip/vhci_rx.c linux-3.3.8-pax/drivers/staging/usbip/vhci_rx.c
--- linux-3.3.8/drivers/staging/usbip/vhci_rx.c	2012-03-19 10:39:07.640049406 +0100
+++ linux-3.3.8-pax/drivers/staging/usbip/vhci_rx.c	2012-03-19 10:43:44.112034647 +0100
@@ -77,7 +77,7 @@ static void vhci_recv_ret_submit(struct
 	if (!urb) {
 		pr_err("cannot find a urb of seqnum %u\n", pdu->base.seqnum);
 		pr_info("max seqnum %d\n",
-			atomic_read(&the_controller->seqnum));
+			atomic_read_unchecked(&the_controller->seqnum));
 		usbip_event_add(ud, VDEV_EVENT_ERROR_TCP);
 		return;
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/staging/vt6655/hostap.c linux-3.3.8-pax/drivers/staging/vt6655/hostap.c
--- linux-3.3.8/drivers/staging/vt6655/hostap.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/staging/vt6655/hostap.c	2012-03-19 10:43:44.116034644 +0100
@@ -79,14 +79,13 @@ static int          msglevel
  *
  */
 
+static net_device_ops_no_const apdev_netdev_ops;
+
 static int hostap_enable_hostapd(PSDevice pDevice, int rtnl_locked)
 {
     PSDevice apdev_priv;
 	struct net_device *dev = pDevice->dev;
 	int ret;
-	const struct net_device_ops apdev_netdev_ops = {
-		.ndo_start_xmit         = pDevice->tx_80211,
-	};
 
     DBG_PRT(MSG_LEVEL_DEBUG, KERN_INFO "%s: Enabling hostapd mode\n", dev->name);
 
@@ -98,6 +97,8 @@ static int hostap_enable_hostapd(PSDevic
     *apdev_priv = *pDevice;
 	memcpy(pDevice->apdev->dev_addr, dev->dev_addr, ETH_ALEN);
 
+	/* only half broken now */
+	apdev_netdev_ops.ndo_start_xmit = pDevice->tx_80211;
 	pDevice->apdev->netdev_ops = &apdev_netdev_ops;
 
 	pDevice->apdev->type = ARPHRD_IEEE80211;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/staging/vt6656/hostap.c linux-3.3.8-pax/drivers/staging/vt6656/hostap.c
--- linux-3.3.8/drivers/staging/vt6656/hostap.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/staging/vt6656/hostap.c	2012-03-19 10:43:44.116034644 +0100
@@ -80,14 +80,13 @@ static int          msglevel
  *
  */
 
+static net_device_ops_no_const apdev_netdev_ops;
+
 static int hostap_enable_hostapd(PSDevice pDevice, int rtnl_locked)
 {
     PSDevice apdev_priv;
 	struct net_device *dev = pDevice->dev;
 	int ret;
-	const struct net_device_ops apdev_netdev_ops = {
-		.ndo_start_xmit         = pDevice->tx_80211,
-	};
 
     DBG_PRT(MSG_LEVEL_DEBUG, KERN_INFO "%s: Enabling hostapd mode\n", dev->name);
 
@@ -99,6 +98,8 @@ static int hostap_enable_hostapd(PSDevic
     *apdev_priv = *pDevice;
 	memcpy(pDevice->apdev->dev_addr, dev->dev_addr, ETH_ALEN);
 
+	/* only half broken now */
+	apdev_netdev_ops.ndo_start_xmit = pDevice->tx_80211;
 	pDevice->apdev->netdev_ops = &apdev_netdev_ops;
 
 	pDevice->apdev->type = ARPHRD_IEEE80211;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/staging/wlan-ng/hfa384x_usb.c linux-3.3.8-pax/drivers/staging/wlan-ng/hfa384x_usb.c
--- linux-3.3.8/drivers/staging/wlan-ng/hfa384x_usb.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/staging/wlan-ng/hfa384x_usb.c	2012-03-19 10:43:44.116034644 +0100
@@ -204,7 +204,7 @@ static void unlocked_usbctlx_complete(hf
 
 struct usbctlx_completor {
 	int (*complete) (struct usbctlx_completor *);
-};
+} __no_const;
 
 static int
 hfa384x_usbctlx_complete_sync(hfa384x_t *hw,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/staging/zcache/tmem.c linux-3.3.8-pax/drivers/staging/zcache/tmem.c
--- linux-3.3.8/drivers/staging/zcache/tmem.c	2011-10-24 12:48:37.639091165 +0200
+++ linux-3.3.8-pax/drivers/staging/zcache/tmem.c	2012-03-19 10:43:44.120034642 +0100
@@ -39,7 +39,7 @@
  * A tmem host implementation must use this function to register callbacks
  * for memory allocation.
  */
-static struct tmem_hostops tmem_hostops;
+static tmem_hostops_no_const tmem_hostops;
 
 static void tmem_objnode_tree_init(void);
 
@@ -53,7 +53,7 @@ void tmem_register_hostops(struct tmem_h
  * A tmem host implementation must use this function to register
  * callbacks for a page-accessible memory (PAM) implementation
  */
-static struct tmem_pamops tmem_pamops;
+static tmem_pamops_no_const tmem_pamops;
 
 void tmem_register_pamops(struct tmem_pamops *m)
 {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/staging/zcache/tmem.h linux-3.3.8-pax/drivers/staging/zcache/tmem.h
--- linux-3.3.8/drivers/staging/zcache/tmem.h	2011-10-24 12:48:37.639091165 +0200
+++ linux-3.3.8-pax/drivers/staging/zcache/tmem.h	2012-03-19 10:43:44.120034642 +0100
@@ -180,6 +180,7 @@ struct tmem_pamops {
 	void (*new_obj)(struct tmem_obj *);
 	int (*replace_in_obj)(void *, struct tmem_obj *);
 };
+typedef struct tmem_pamops __no_const tmem_pamops_no_const;
 extern void tmem_register_pamops(struct tmem_pamops *m);
 
 /* memory allocation methods provided by the host implementation */
@@ -189,6 +190,7 @@ struct tmem_hostops {
 	struct tmem_objnode *(*objnode_alloc)(struct tmem_pool *);
 	void (*objnode_free)(struct tmem_objnode *, struct tmem_pool *);
 };
+typedef struct tmem_hostops __no_const tmem_hostops_no_const;
 extern void tmem_register_hostops(struct tmem_hostops *m);
 
 /* core tmem accessor functions */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/target/iscsi/iscsi_target.c linux-3.3.8-pax/drivers/target/iscsi/iscsi_target.c
--- linux-3.3.8/drivers/target/iscsi/iscsi_target.c	2012-04-03 22:02:49.902109998 +0200
+++ linux-3.3.8-pax/drivers/target/iscsi/iscsi_target.c	2012-04-03 22:03:06.882110933 +0200
@@ -1361,7 +1361,7 @@ static int iscsit_handle_data_out(struct
 		 * outstanding_r2ts reaches zero, go ahead and send the delayed
 		 * TASK_ABORTED status.
 		 */
-		if (atomic_read(&se_cmd->t_transport_aborted) != 0) {
+		if (atomic_read_unchecked(&se_cmd->t_transport_aborted) != 0) {
 			if (hdr->flags & ISCSI_FLAG_CMD_FINAL)
 				if (--cmd->outstanding_r2ts < 1) {
 					iscsit_stop_dataout_timer(cmd);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/target/target_core_tmr.c linux-3.3.8-pax/drivers/target/target_core_tmr.c
--- linux-3.3.8/drivers/target/target_core_tmr.c	2012-03-19 10:39:07.852049395 +0100
+++ linux-3.3.8-pax/drivers/target/target_core_tmr.c	2012-03-19 10:43:44.124034641 +0100
@@ -260,7 +260,7 @@ static void core_tmr_drain_task_list(
 			cmd->se_tfo->get_task_tag(cmd), cmd->pr_res_key,
 			cmd->t_task_list_num,
 			atomic_read(&cmd->t_task_cdbs_left),
-			atomic_read(&cmd->t_task_cdbs_sent),
+			atomic_read_unchecked(&cmd->t_task_cdbs_sent),
 			atomic_read(&cmd->t_transport_active),
 			atomic_read(&cmd->t_transport_stop),
 			atomic_read(&cmd->t_transport_sent));
@@ -291,7 +291,7 @@ static void core_tmr_drain_task_list(
 			pr_debug("LUN_RESET: got t_transport_active = 1 for"
 				" task: %p, t_fe_count: %d dev: %p\n", task,
 				fe_count, dev);
-			atomic_set(&cmd->t_transport_aborted, 1);
+			atomic_set_unchecked(&cmd->t_transport_aborted, 1);
 			spin_unlock_irqrestore(&cmd->t_state_lock, flags);
 
 			core_tmr_handle_tas_abort(tmr_nacl, cmd, tas, fe_count);
@@ -299,7 +299,7 @@ static void core_tmr_drain_task_list(
 		}
 		pr_debug("LUN_RESET: Got t_transport_active = 0 for task: %p,"
 			" t_fe_count: %d dev: %p\n", task, fe_count, dev);
-		atomic_set(&cmd->t_transport_aborted, 1);
+		atomic_set_unchecked(&cmd->t_transport_aborted, 1);
 		spin_unlock_irqrestore(&cmd->t_state_lock, flags);
 
 		core_tmr_handle_tas_abort(tmr_nacl, cmd, tas, fe_count);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/target/target_core_transport.c linux-3.3.8-pax/drivers/target/target_core_transport.c
--- linux-3.3.8/drivers/target/target_core_transport.c	2012-03-19 10:39:07.856049395 +0100
+++ linux-3.3.8-pax/drivers/target/target_core_transport.c	2012-03-19 10:43:44.124034641 +0100
@@ -1330,7 +1330,7 @@ struct se_device *transport_add_device_t
 	spin_lock_init(&dev->se_port_lock);
 	spin_lock_init(&dev->se_tmr_lock);
 	spin_lock_init(&dev->qf_cmd_lock);
-	atomic_set(&dev->dev_ordered_id, 0);
+	atomic_set_unchecked(&dev->dev_ordered_id, 0);
 
 	se_dev_set_default_attribs(dev, dev_limits);
 
@@ -1517,7 +1517,7 @@ static int transport_check_alloc_task_at
 	 * Used to determine when ORDERED commands should go from
 	 * Dormant to Active status.
 	 */
-	cmd->se_ordered_id = atomic_inc_return(&cmd->se_dev->dev_ordered_id);
+	cmd->se_ordered_id = atomic_inc_return_unchecked(&cmd->se_dev->dev_ordered_id);
 	smp_mb__after_atomic_inc();
 	pr_debug("Allocated se_ordered_id: %u for Task Attr: 0x%02x on %s\n",
 			cmd->se_ordered_id, cmd->sam_task_attr,
@@ -1862,7 +1862,7 @@ static void transport_generic_request_fa
 		" t_transport_active: %d t_transport_stop: %d"
 		" t_transport_sent: %d\n", cmd->t_task_list_num,
 		atomic_read(&cmd->t_task_cdbs_left),
-		atomic_read(&cmd->t_task_cdbs_sent),
+		atomic_read_unchecked(&cmd->t_task_cdbs_sent),
 		atomic_read(&cmd->t_task_cdbs_ex_left),
 		atomic_read(&cmd->t_transport_active),
 		atomic_read(&cmd->t_transport_stop),
@@ -2121,9 +2121,9 @@ check_depth:
 	cmd = task->task_se_cmd;
 	spin_lock_irqsave(&cmd->t_state_lock, flags);
 	task->task_flags |= (TF_ACTIVE | TF_SENT);
-	atomic_inc(&cmd->t_task_cdbs_sent);
+	atomic_inc_unchecked(&cmd->t_task_cdbs_sent);
 
-	if (atomic_read(&cmd->t_task_cdbs_sent) ==
+	if (atomic_read_unchecked(&cmd->t_task_cdbs_sent) ==
 	    cmd->t_task_list_num)
 		atomic_set(&cmd->t_transport_sent, 1);
 
@@ -4348,7 +4348,7 @@ bool transport_wait_for_tasks(struct se_
 		atomic_set(&cmd->transport_lun_stop, 0);
 	}
 	if (!atomic_read(&cmd->t_transport_active) ||
-	     atomic_read(&cmd->t_transport_aborted)) {
+	     atomic_read_unchecked(&cmd->t_transport_aborted)) {
 		spin_unlock_irqrestore(&cmd->t_state_lock, flags);
 		return false;
 	}
@@ -4597,7 +4597,7 @@ int transport_check_aborted_status(struc
 {
 	int ret = 0;
 
-	if (atomic_read(&cmd->t_transport_aborted) != 0) {
+	if (atomic_read_unchecked(&cmd->t_transport_aborted) != 0) {
 		if (!send_status ||
 		     (cmd->se_cmd_flags & SCF_SENT_DELAYED_TAS))
 			return 1;
@@ -4634,7 +4634,7 @@ void transport_send_task_abort(struct se
 	 */
 	if (cmd->data_direction == DMA_TO_DEVICE) {
 		if (cmd->se_tfo->write_pending_status(cmd) != 0) {
-			atomic_inc(&cmd->t_transport_aborted);
+			atomic_inc_unchecked(&cmd->t_transport_aborted);
 			smp_mb__after_atomic_inc();
 		}
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/tty/hvc/hvcs.c linux-3.3.8-pax/drivers/tty/hvc/hvcs.c
--- linux-3.3.8/drivers/tty/hvc/hvcs.c	2012-01-08 19:48:20.471471332 +0100
+++ linux-3.3.8-pax/drivers/tty/hvc/hvcs.c	2012-03-19 10:43:44.132034644 +0100
@@ -83,6 +83,7 @@
 #include <asm/hvcserver.h>
 #include <asm/uaccess.h>
 #include <asm/vio.h>
+#include <asm/local.h>
 
 /*
  * 1.3.0 -> 1.3.1 In hvcs_open memset(..,0x00,..) instead of memset(..,0x3F,00).
@@ -270,7 +271,7 @@ struct hvcs_struct {
 	unsigned int index;
 
 	struct tty_struct *tty;
-	int open_count;
+	local_t open_count;
 
 	/*
 	 * Used to tell the driver kernel_thread what operations need to take
@@ -422,7 +423,7 @@ static ssize_t hvcs_vterm_state_store(st
 
 	spin_lock_irqsave(&hvcsd->lock, flags);
 
-	if (hvcsd->open_count > 0) {
+	if (local_read(&hvcsd->open_count) > 0) {
 		spin_unlock_irqrestore(&hvcsd->lock, flags);
 		printk(KERN_INFO "HVCS: vterm state unchanged.  "
 				"The hvcs device node is still in use.\n");
@@ -1145,7 +1146,7 @@ static int hvcs_open(struct tty_struct *
 		if ((retval = hvcs_partner_connect(hvcsd)))
 			goto error_release;
 
-	hvcsd->open_count = 1;
+	local_set(&hvcsd->open_count, 1);
 	hvcsd->tty = tty;
 	tty->driver_data = hvcsd;
 
@@ -1179,7 +1180,7 @@ fast_open:
 
 	spin_lock_irqsave(&hvcsd->lock, flags);
 	kref_get(&hvcsd->kref);
-	hvcsd->open_count++;
+	local_inc(&hvcsd->open_count);
 	hvcsd->todo_mask |= HVCS_SCHED_READ;
 	spin_unlock_irqrestore(&hvcsd->lock, flags);
 
@@ -1223,7 +1224,7 @@ static void hvcs_close(struct tty_struct
 	hvcsd = tty->driver_data;
 
 	spin_lock_irqsave(&hvcsd->lock, flags);
-	if (--hvcsd->open_count == 0) {
+	if (local_dec_and_test(&hvcsd->open_count)) {
 
 		vio_disable_interrupts(hvcsd->vdev);
 
@@ -1249,10 +1250,10 @@ static void hvcs_close(struct tty_struct
 		free_irq(irq, hvcsd);
 		kref_put(&hvcsd->kref, destroy_hvcs_struct);
 		return;
-	} else if (hvcsd->open_count < 0) {
+	} else if (local_read(&hvcsd->open_count) < 0) {
 		printk(KERN_ERR "HVCS: vty-server@%X open_count: %d"
 				" is missmanaged.\n",
-		hvcsd->vdev->unit_address, hvcsd->open_count);
+		hvcsd->vdev->unit_address, local_read(&hvcsd->open_count));
 	}
 
 	spin_unlock_irqrestore(&hvcsd->lock, flags);
@@ -1268,7 +1269,7 @@ static void hvcs_hangup(struct tty_struc
 
 	spin_lock_irqsave(&hvcsd->lock, flags);
 	/* Preserve this so that we know how many kref refs to put */
-	temp_open_count = hvcsd->open_count;
+	temp_open_count = local_read(&hvcsd->open_count);
 
 	/*
 	 * Don't kref put inside the spinlock because the destruction
@@ -1283,7 +1284,7 @@ static void hvcs_hangup(struct tty_struc
 	hvcsd->tty->driver_data = NULL;
 	hvcsd->tty = NULL;
 
-	hvcsd->open_count = 0;
+	local_set(&hvcsd->open_count, 0);
 
 	/* This will drop any buffered data on the floor which is OK in a hangup
 	 * scenario. */
@@ -1354,7 +1355,7 @@ static int hvcs_write(struct tty_struct
 	 * the middle of a write operation?  This is a crummy place to do this
 	 * but we want to keep it all in the spinlock.
 	 */
-	if (hvcsd->open_count <= 0) {
+	if (local_read(&hvcsd->open_count) <= 0) {
 		spin_unlock_irqrestore(&hvcsd->lock, flags);
 		return -ENODEV;
 	}
@@ -1428,7 +1429,7 @@ static int hvcs_write_room(struct tty_st
 {
 	struct hvcs_struct *hvcsd = tty->driver_data;
 
-	if (!hvcsd || hvcsd->open_count <= 0)
+	if (!hvcsd || local_read(&hvcsd->open_count) <= 0)
 		return 0;
 
 	return HVCS_BUFF_LEN - hvcsd->chars_in_buffer;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/tty/ipwireless/tty.c linux-3.3.8-pax/drivers/tty/ipwireless/tty.c
--- linux-3.3.8/drivers/tty/ipwireless/tty.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/tty/ipwireless/tty.c	2012-03-19 10:43:44.144034645 +0100
@@ -29,6 +29,7 @@
 #include <linux/tty_driver.h>
 #include <linux/tty_flip.h>
 #include <linux/uaccess.h>
+#include <asm/local.h>
 
 #include "tty.h"
 #include "network.h"
@@ -51,7 +52,7 @@ struct ipw_tty {
 	int tty_type;
 	struct ipw_network *network;
 	struct tty_struct *linux_tty;
-	int open_count;
+	local_t open_count;
 	unsigned int control_lines;
 	struct mutex ipw_tty_mutex;
 	int tx_bytes_queued;
@@ -127,10 +128,10 @@ static int ipw_open(struct tty_struct *l
 		mutex_unlock(&tty->ipw_tty_mutex);
 		return -ENODEV;
 	}
-	if (tty->open_count == 0)
+	if (local_read(&tty->open_count) == 0)
 		tty->tx_bytes_queued = 0;
 
-	tty->open_count++;
+	local_inc(&tty->open_count);
 
 	tty->linux_tty = linux_tty;
 	linux_tty->driver_data = tty;
@@ -146,9 +147,7 @@ static int ipw_open(struct tty_struct *l
 
 static void do_ipw_close(struct ipw_tty *tty)
 {
-	tty->open_count--;
-
-	if (tty->open_count == 0) {
+	if (local_dec_return(&tty->open_count) == 0) {
 		struct tty_struct *linux_tty = tty->linux_tty;
 
 		if (linux_tty != NULL) {
@@ -169,7 +168,7 @@ static void ipw_hangup(struct tty_struct
 		return;
 
 	mutex_lock(&tty->ipw_tty_mutex);
-	if (tty->open_count == 0) {
+	if (local_read(&tty->open_count) == 0) {
 		mutex_unlock(&tty->ipw_tty_mutex);
 		return;
 	}
@@ -198,7 +197,7 @@ void ipwireless_tty_received(struct ipw_
 		return;
 	}
 
-	if (!tty->open_count) {
+	if (!local_read(&tty->open_count)) {
 		mutex_unlock(&tty->ipw_tty_mutex);
 		return;
 	}
@@ -240,7 +239,7 @@ static int ipw_write(struct tty_struct *
 		return -ENODEV;
 
 	mutex_lock(&tty->ipw_tty_mutex);
-	if (!tty->open_count) {
+	if (!local_read(&tty->open_count)) {
 		mutex_unlock(&tty->ipw_tty_mutex);
 		return -EINVAL;
 	}
@@ -280,7 +279,7 @@ static int ipw_write_room(struct tty_str
 	if (!tty)
 		return -ENODEV;
 
-	if (!tty->open_count)
+	if (!local_read(&tty->open_count))
 		return -EINVAL;
 
 	room = IPWIRELESS_TX_QUEUE_SIZE - tty->tx_bytes_queued;
@@ -322,7 +321,7 @@ static int ipw_chars_in_buffer(struct tt
 	if (!tty)
 		return 0;
 
-	if (!tty->open_count)
+	if (!local_read(&tty->open_count))
 		return 0;
 
 	return tty->tx_bytes_queued;
@@ -403,7 +402,7 @@ static int ipw_tiocmget(struct tty_struc
 	if (!tty)
 		return -ENODEV;
 
-	if (!tty->open_count)
+	if (!local_read(&tty->open_count))
 		return -EINVAL;
 
 	return get_control_lines(tty);
@@ -419,7 +418,7 @@ ipw_tiocmset(struct tty_struct *linux_tt
 	if (!tty)
 		return -ENODEV;
 
-	if (!tty->open_count)
+	if (!local_read(&tty->open_count))
 		return -EINVAL;
 
 	return set_control_lines(tty, set, clear);
@@ -433,7 +432,7 @@ static int ipw_ioctl(struct tty_struct *
 	if (!tty)
 		return -ENODEV;
 
-	if (!tty->open_count)
+	if (!local_read(&tty->open_count))
 		return -EINVAL;
 
 	/* FIXME: Exactly how is the tty object locked here .. */
@@ -582,7 +581,7 @@ void ipwireless_tty_free(struct ipw_tty
 				   against a parallel ioctl etc */
 				mutex_lock(&ttyj->ipw_tty_mutex);
 			}
-			while (ttyj->open_count)
+			while (local_read(&ttyj->open_count))
 				do_ipw_close(ttyj);
 			ipwireless_disassociate_network_ttys(network,
 							     ttyj->channel_idx);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/tty/n_gsm.c linux-3.3.8-pax/drivers/tty/n_gsm.c
--- linux-3.3.8/drivers/tty/n_gsm.c	2012-01-08 19:48:20.507471330 +0100
+++ linux-3.3.8-pax/drivers/tty/n_gsm.c	2012-03-19 10:43:44.144034645 +0100
@@ -1629,7 +1629,7 @@ static struct gsm_dlci *gsm_dlci_alloc(s
 	kref_init(&dlci->ref);
 	mutex_init(&dlci->mutex);
 	dlci->fifo = &dlci->_fifo;
-	if (kfifo_alloc(&dlci->_fifo, 4096, GFP_KERNEL) < 0) {
+	if (kfifo_alloc(&dlci->_fifo, 4096, GFP_KERNEL)) {
 		kfree(dlci);
 		return NULL;
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/tty/n_tty.c linux-3.3.8-pax/drivers/tty/n_tty.c
--- linux-3.3.8/drivers/tty/n_tty.c	2012-03-19 10:39:07.868049394 +0100
+++ linux-3.3.8-pax/drivers/tty/n_tty.c	2012-03-19 10:43:44.144034645 +0100
@@ -2123,6 +2123,7 @@ void n_tty_inherit_ops(struct tty_ldisc_
 {
 	*ops = tty_ldisc_N_TTY;
 	ops->owner = NULL;
-	ops->refcount = ops->flags = 0;
+	atomic_set(&ops->refcount, 0);
+	ops->flags = 0;
 }
 EXPORT_SYMBOL_GPL(n_tty_inherit_ops);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/tty/pty.c linux-3.3.8-pax/drivers/tty/pty.c
--- linux-3.3.8/drivers/tty/pty.c	2012-03-19 10:39:07.872049393 +0100
+++ linux-3.3.8-pax/drivers/tty/pty.c	2012-03-19 10:43:44.144034646 +0100
@@ -765,8 +765,10 @@ static void __init unix98_pty_init(void)
 	register_sysctl_table(pty_root_table);
 
 	/* Now create the /dev/ptmx special device */
+	pax_open_kernel();
 	tty_default_fops(&ptmx_fops);
-	ptmx_fops.open = ptmx_open;
+	*(void **)&ptmx_fops.open = ptmx_open;
+	pax_close_kernel();
 
 	cdev_init(&ptmx_cdev, &ptmx_fops);
 	if (cdev_add(&ptmx_cdev, MKDEV(TTYAUX_MAJOR, 2), 1) ||
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/tty/serial/kgdboc.c linux-3.3.8-pax/drivers/tty/serial/kgdboc.c
--- linux-3.3.8/drivers/tty/serial/kgdboc.c	2012-01-08 19:48:20.619471324 +0100
+++ linux-3.3.8-pax/drivers/tty/serial/kgdboc.c	2012-03-19 10:43:44.144034646 +0100
@@ -24,8 +24,9 @@
 #define MAX_CONFIG_LEN		40
 
 static struct kgdb_io		kgdboc_io_ops;
+static struct kgdb_io		kgdboc_io_ops_console;
 
-/* -1 = init not run yet, 0 = unconfigured, 1 = configured. */
+/* -1 = init not run yet, 0 = unconfigured, 1/2 = configured. */
 static int configured		= -1;
 
 static char config[MAX_CONFIG_LEN];
@@ -148,6 +149,8 @@ static void cleanup_kgdboc(void)
 	kgdboc_unregister_kbd();
 	if (configured == 1)
 		kgdb_unregister_io_module(&kgdboc_io_ops);
+	else if (configured == 2)
+		kgdb_unregister_io_module(&kgdboc_io_ops_console);
 }
 
 static int configure_kgdboc(void)
@@ -157,13 +160,13 @@ static int configure_kgdboc(void)
 	int err;
 	char *cptr = config;
 	struct console *cons;
+	int is_console = 0;
 
 	err = kgdboc_option_setup(config);
 	if (err || !strlen(config) || isspace(config[0]))
 		goto noconfig;
 
 	err = -ENODEV;
-	kgdboc_io_ops.is_console = 0;
 	kgdb_tty_driver = NULL;
 
 	kgdboc_use_kms = 0;
@@ -184,7 +187,7 @@ static int configure_kgdboc(void)
 		int idx;
 		if (cons->device && cons->device(cons, &idx) == p &&
 		    idx == tty_line) {
-			kgdboc_io_ops.is_console = 1;
+			is_console = 1;
 			break;
 		}
 		cons = cons->next;
@@ -194,12 +197,16 @@ static int configure_kgdboc(void)
 	kgdb_tty_line = tty_line;
 
 do_register:
-	err = kgdb_register_io_module(&kgdboc_io_ops);
+	if (is_console) {
+		err = kgdb_register_io_module(&kgdboc_io_ops_console);
+		configured = 2;
+	} else {
+		err = kgdb_register_io_module(&kgdboc_io_ops);
+		configured = 1;
+	}
 	if (err)
 		goto noconfig;
 
-	configured = 1;
-
 	return 0;
 
 noconfig:
@@ -213,7 +220,7 @@ noconfig:
 static int __init init_kgdboc(void)
 {
 	/* Already configured? */
-	if (configured == 1)
+	if (configured >= 1)
 		return 0;
 
 	return configure_kgdboc();
@@ -262,7 +269,7 @@ static int param_set_kgdboc_var(const ch
 	if (config[len - 1] == '\n')
 		config[len - 1] = '\0';
 
-	if (configured == 1)
+	if (configured >= 1)
 		cleanup_kgdboc();
 
 	/* Go and configure with the new params. */
@@ -302,6 +309,15 @@ static struct kgdb_io kgdboc_io_ops = {
 	.post_exception		= kgdboc_post_exp_handler,
 };
 
+static struct kgdb_io kgdboc_io_ops_console = {
+	.name			= "kgdboc",
+	.read_char		= kgdboc_get_char,
+	.write_char		= kgdboc_put_char,
+	.pre_exception		= kgdboc_pre_exp_handler,
+	.post_exception		= kgdboc_post_exp_handler,
+	.is_console		= 1
+};
+
 #ifdef CONFIG_KGDB_SERIAL_CONSOLE
 /* This is only available if kgdboc is a built in for early debugging */
 static int __init kgdboc_early_init(char *opt)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/tty/tty_io.c linux-3.3.8-pax/drivers/tty/tty_io.c
--- linux-3.3.8/drivers/tty/tty_io.c	2012-03-19 10:39:07.980049389 +0100
+++ linux-3.3.8-pax/drivers/tty/tty_io.c	2012-04-03 21:04:09.949918896 +0200
@@ -3291,7 +3291,7 @@ EXPORT_SYMBOL_GPL(get_current_tty);
 
 void tty_default_fops(struct file_operations *fops)
 {
-	*fops = tty_fops;
+	memcpy((void *)fops, &tty_fops, sizeof(tty_fops));
 }
 
 /*
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/tty/tty_ldisc.c linux-3.3.8-pax/drivers/tty/tty_ldisc.c
--- linux-3.3.8/drivers/tty/tty_ldisc.c	2012-03-19 10:39:07.980049389 +0100
+++ linux-3.3.8-pax/drivers/tty/tty_ldisc.c	2012-03-19 10:43:44.148034645 +0100
@@ -57,7 +57,7 @@ static void put_ldisc(struct tty_ldisc *
 	if (atomic_dec_and_lock(&ld->users, &tty_ldisc_lock)) {
 		struct tty_ldisc_ops *ldo = ld->ops;
 
-		ldo->refcount--;
+		atomic_dec(&ldo->refcount);
 		module_put(ldo->owner);
 		spin_unlock_irqrestore(&tty_ldisc_lock, flags);
 
@@ -92,7 +92,7 @@ int tty_register_ldisc(int disc, struct
 	spin_lock_irqsave(&tty_ldisc_lock, flags);
 	tty_ldiscs[disc] = new_ldisc;
 	new_ldisc->num = disc;
-	new_ldisc->refcount = 0;
+	atomic_set(&new_ldisc->refcount, 0);
 	spin_unlock_irqrestore(&tty_ldisc_lock, flags);
 
 	return ret;
@@ -120,7 +120,7 @@ int tty_unregister_ldisc(int disc)
 		return -EINVAL;
 
 	spin_lock_irqsave(&tty_ldisc_lock, flags);
-	if (tty_ldiscs[disc]->refcount)
+	if (atomic_read(&tty_ldiscs[disc]->refcount))
 		ret = -EBUSY;
 	else
 		tty_ldiscs[disc] = NULL;
@@ -141,7 +141,7 @@ static struct tty_ldisc_ops *get_ldops(i
 	if (ldops) {
 		ret = ERR_PTR(-EAGAIN);
 		if (try_module_get(ldops->owner)) {
-			ldops->refcount++;
+			atomic_inc(&ldops->refcount);
 			ret = ldops;
 		}
 	}
@@ -154,7 +154,7 @@ static void put_ldops(struct tty_ldisc_o
 	unsigned long flags;
 
 	spin_lock_irqsave(&tty_ldisc_lock, flags);
-	ldops->refcount--;
+	atomic_dec(&ldops->refcount);
 	module_put(ldops->owner);
 	spin_unlock_irqrestore(&tty_ldisc_lock, flags);
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/uio/uio.c linux-3.3.8-pax/drivers/uio/uio.c
--- linux-3.3.8/drivers/uio/uio.c	2012-01-08 19:48:20.775471316 +0100
+++ linux-3.3.8-pax/drivers/uio/uio.c	2012-03-19 10:43:44.148034645 +0100
@@ -25,6 +25,7 @@
 #include <linux/kobject.h>
 #include <linux/cdev.h>
 #include <linux/uio_driver.h>
+#include <asm/local.h>
 
 #define UIO_MAX_DEVICES		(1U << MINORBITS)
 
@@ -32,10 +33,10 @@ struct uio_device {
 	struct module		*owner;
 	struct device		*dev;
 	int			minor;
-	atomic_t		event;
+	atomic_unchecked_t	event;
 	struct fasync_struct	*async_queue;
 	wait_queue_head_t	wait;
-	int			vma_count;
+	local_t			vma_count;
 	struct uio_info		*info;
 	struct kobject		*map_dir;
 	struct kobject		*portio_dir;
@@ -242,7 +243,7 @@ static ssize_t show_event(struct device
 			  struct device_attribute *attr, char *buf)
 {
 	struct uio_device *idev = dev_get_drvdata(dev);
-	return sprintf(buf, "%u\n", (unsigned int)atomic_read(&idev->event));
+	return sprintf(buf, "%u\n", (unsigned int)atomic_read_unchecked(&idev->event));
 }
 
 static struct device_attribute uio_class_attributes[] = {
@@ -408,7 +409,7 @@ void uio_event_notify(struct uio_info *i
 {
 	struct uio_device *idev = info->uio_dev;
 
-	atomic_inc(&idev->event);
+	atomic_inc_unchecked(&idev->event);
 	wake_up_interruptible(&idev->wait);
 	kill_fasync(&idev->async_queue, SIGIO, POLL_IN);
 }
@@ -461,7 +462,7 @@ static int uio_open(struct inode *inode,
 	}
 
 	listener->dev = idev;
-	listener->event_count = atomic_read(&idev->event);
+	listener->event_count = atomic_read_unchecked(&idev->event);
 	filep->private_data = listener;
 
 	if (idev->info->open) {
@@ -512,7 +513,7 @@ static unsigned int uio_poll(struct file
 		return -EIO;
 
 	poll_wait(filep, &idev->wait, wait);
-	if (listener->event_count != atomic_read(&idev->event))
+	if (listener->event_count != atomic_read_unchecked(&idev->event))
 		return POLLIN | POLLRDNORM;
 	return 0;
 }
@@ -537,7 +538,7 @@ static ssize_t uio_read(struct file *fil
 	do {
 		set_current_state(TASK_INTERRUPTIBLE);
 
-		event_count = atomic_read(&idev->event);
+		event_count = atomic_read_unchecked(&idev->event);
 		if (event_count != listener->event_count) {
 			if (copy_to_user(buf, &event_count, count))
 				retval = -EFAULT;
@@ -606,13 +607,13 @@ static int uio_find_mem_index(struct vm_
 static void uio_vma_open(struct vm_area_struct *vma)
 {
 	struct uio_device *idev = vma->vm_private_data;
-	idev->vma_count++;
+	local_inc(&idev->vma_count);
 }
 
 static void uio_vma_close(struct vm_area_struct *vma)
 {
 	struct uio_device *idev = vma->vm_private_data;
-	idev->vma_count--;
+	local_dec(&idev->vma_count);
 }
 
 static int uio_vma_fault(struct vm_area_struct *vma, struct vm_fault *vmf)
@@ -821,7 +822,7 @@ int __uio_register_device(struct module
 	idev->owner = owner;
 	idev->info = info;
 	init_waitqueue_head(&idev->wait);
-	atomic_set(&idev->event, 0);
+	atomic_set_unchecked(&idev->event, 0);
 
 	ret = uio_get_minor(idev);
 	if (ret)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/usb/atm/cxacru.c linux-3.3.8-pax/drivers/usb/atm/cxacru.c
--- linux-3.3.8/drivers/usb/atm/cxacru.c	2012-03-19 10:39:08.024049385 +0100
+++ linux-3.3.8-pax/drivers/usb/atm/cxacru.c	2012-03-19 10:43:44.152034642 +0100
@@ -473,7 +473,7 @@ static ssize_t cxacru_sysfs_store_adsl_c
 		ret = sscanf(buf + pos, "%x=%x%n", &index, &value, &tmp);
 		if (ret < 2)
 			return -EINVAL;
-		if (index < 0 || index > 0x7f)
+		if (index > 0x7f)
 			return -EINVAL;
 		pos += tmp;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/usb/atm/usbatm.c linux-3.3.8-pax/drivers/usb/atm/usbatm.c
--- linux-3.3.8/drivers/usb/atm/usbatm.c	2011-10-24 12:48:38.263091132 +0200
+++ linux-3.3.8-pax/drivers/usb/atm/usbatm.c	2012-03-19 10:43:44.152034642 +0100
@@ -333,7 +333,7 @@ static void usbatm_extract_one_cell(stru
 		if (printk_ratelimit())
 			atm_warn(instance, "%s: OAM not supported (vpi %d, vci %d)!\n",
 				__func__, vpi, vci);
-		atomic_inc(&vcc->stats->rx_err);
+		atomic_inc_unchecked(&vcc->stats->rx_err);
 		return;
 	}
 
@@ -361,7 +361,7 @@ static void usbatm_extract_one_cell(stru
 		if (length > ATM_MAX_AAL5_PDU) {
 			atm_rldbg(instance, "%s: bogus length %u (vcc: 0x%p)!\n",
 				  __func__, length, vcc);
-			atomic_inc(&vcc->stats->rx_err);
+			atomic_inc_unchecked(&vcc->stats->rx_err);
 			goto out;
 		}
 
@@ -370,14 +370,14 @@ static void usbatm_extract_one_cell(stru
 		if (sarb->len < pdu_length) {
 			atm_rldbg(instance, "%s: bogus pdu_length %u (sarb->len: %u, vcc: 0x%p)!\n",
 				  __func__, pdu_length, sarb->len, vcc);
-			atomic_inc(&vcc->stats->rx_err);
+			atomic_inc_unchecked(&vcc->stats->rx_err);
 			goto out;
 		}
 
 		if (crc32_be(~0, skb_tail_pointer(sarb) - pdu_length, pdu_length) != 0xc704dd7b) {
 			atm_rldbg(instance, "%s: packet failed crc check (vcc: 0x%p)!\n",
 				  __func__, vcc);
-			atomic_inc(&vcc->stats->rx_err);
+			atomic_inc_unchecked(&vcc->stats->rx_err);
 			goto out;
 		}
 
@@ -387,7 +387,7 @@ static void usbatm_extract_one_cell(stru
 			if (printk_ratelimit())
 				atm_err(instance, "%s: no memory for skb (length: %u)!\n",
 					__func__, length);
-			atomic_inc(&vcc->stats->rx_drop);
+			atomic_inc_unchecked(&vcc->stats->rx_drop);
 			goto out;
 		}
 
@@ -412,7 +412,7 @@ static void usbatm_extract_one_cell(stru
 
 		vcc->push(vcc, skb);
 
-		atomic_inc(&vcc->stats->rx);
+		atomic_inc_unchecked(&vcc->stats->rx);
 	out:
 		skb_trim(sarb, 0);
 	}
@@ -615,7 +615,7 @@ static void usbatm_tx_process(unsigned l
 			struct atm_vcc *vcc = UDSL_SKB(skb)->atm.vcc;
 
 			usbatm_pop(vcc, skb);
-			atomic_inc(&vcc->stats->tx);
+			atomic_inc_unchecked(&vcc->stats->tx);
 
 			skb = skb_dequeue(&instance->sndqueue);
 		}
@@ -773,11 +773,11 @@ static int usbatm_atm_proc_read(struct a
 	if (!left--)
 		return sprintf(page,
 			       "AAL5: tx %d ( %d err ), rx %d ( %d err, %d drop )\n",
-			       atomic_read(&atm_dev->stats.aal5.tx),
-			       atomic_read(&atm_dev->stats.aal5.tx_err),
-			       atomic_read(&atm_dev->stats.aal5.rx),
-			       atomic_read(&atm_dev->stats.aal5.rx_err),
-			       atomic_read(&atm_dev->stats.aal5.rx_drop));
+			       atomic_read_unchecked(&atm_dev->stats.aal5.tx),
+			       atomic_read_unchecked(&atm_dev->stats.aal5.tx_err),
+			       atomic_read_unchecked(&atm_dev->stats.aal5.rx),
+			       atomic_read_unchecked(&atm_dev->stats.aal5.rx_err),
+			       atomic_read_unchecked(&atm_dev->stats.aal5.rx_drop));
 
 	if (!left--) {
 		if (instance->disconnected)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/usb/core/devices.c linux-3.3.8-pax/drivers/usb/core/devices.c
--- linux-3.3.8/drivers/usb/core/devices.c	2012-01-08 19:48:20.807471314 +0100
+++ linux-3.3.8-pax/drivers/usb/core/devices.c	2012-03-19 10:43:44.152034642 +0100
@@ -126,7 +126,7 @@ static const char format_endpt[] =
  * time it gets called.
  */
 static struct device_connect_event {
-	atomic_t count;
+	atomic_unchecked_t count;
 	wait_queue_head_t wait;
 } device_event = {
 	.count = ATOMIC_INIT(1),
@@ -164,7 +164,7 @@ static const struct class_info clas_info
 
 void usbfs_conn_disc_event(void)
 {
-	atomic_add(2, &device_event.count);
+	atomic_add_unchecked(2, &device_event.count);
 	wake_up(&device_event.wait);
 }
 
@@ -648,7 +648,7 @@ static unsigned int usb_device_poll(stru
 
 	poll_wait(file, &device_event.wait, wait);
 
-	event_count = atomic_read(&device_event.count);
+	event_count = atomic_read_unchecked(&device_event.count);
 	if (file->f_version != event_count) {
 		file->f_version = event_count;
 		return POLLIN | POLLRDNORM;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/usb/early/ehci-dbgp.c linux-3.3.8-pax/drivers/usb/early/ehci-dbgp.c
--- linux-3.3.8/drivers/usb/early/ehci-dbgp.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/usb/early/ehci-dbgp.c	2012-03-19 10:43:44.156034640 +0100
@@ -97,7 +97,8 @@ static inline u32 dbgp_len_update(u32 x,
 
 #ifdef CONFIG_KGDB
 static struct kgdb_io kgdbdbgp_io_ops;
-#define dbgp_kgdb_mode (dbg_io_ops == &kgdbdbgp_io_ops)
+static struct kgdb_io kgdbdbgp_io_ops_console;
+#define dbgp_kgdb_mode (dbg_io_ops == &kgdbdbgp_io_ops || dbg_io_ops == &kgdbdbgp_io_ops_console)
 #else
 #define dbgp_kgdb_mode (0)
 #endif
@@ -1035,6 +1036,13 @@ static struct kgdb_io kgdbdbgp_io_ops =
 	.write_char = kgdbdbgp_write_char,
 };
 
+static struct kgdb_io kgdbdbgp_io_ops_console = {
+	.name = "kgdbdbgp",
+	.read_char = kgdbdbgp_read_char,
+	.write_char = kgdbdbgp_write_char,
+	.is_console = 1
+};
+
 static int kgdbdbgp_wait_time;
 
 static int __init kgdbdbgp_parse_config(char *str)
@@ -1050,8 +1058,10 @@ static int __init kgdbdbgp_parse_config(
 		ptr++;
 		kgdbdbgp_wait_time = simple_strtoul(ptr, &ptr, 10);
 	}
-	kgdb_register_io_module(&kgdbdbgp_io_ops);
-	kgdbdbgp_io_ops.is_console = early_dbgp_console.index != -1;
+	if (early_dbgp_console.index != -1)
+		kgdb_register_io_module(&kgdbdbgp_io_ops_console);
+	else
+		kgdb_register_io_module(&kgdbdbgp_io_ops);
 
 	return 0;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/usb/wusbcore/wa-hc.h linux-3.3.8-pax/drivers/usb/wusbcore/wa-hc.h
--- linux-3.3.8/drivers/usb/wusbcore/wa-hc.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/usb/wusbcore/wa-hc.h	2012-03-19 10:43:44.156034640 +0100
@@ -192,7 +192,7 @@ struct wahc {
 	struct list_head xfer_delayed_list;
 	spinlock_t xfer_list_lock;
 	struct work_struct xfer_work;
-	atomic_t xfer_id_count;
+	atomic_unchecked_t xfer_id_count;
 };
 
 
@@ -246,7 +246,7 @@ static inline void wa_init(struct wahc *
 	INIT_LIST_HEAD(&wa->xfer_delayed_list);
 	spin_lock_init(&wa->xfer_list_lock);
 	INIT_WORK(&wa->xfer_work, wa_urb_enqueue_run);
-	atomic_set(&wa->xfer_id_count, 1);
+	atomic_set_unchecked(&wa->xfer_id_count, 1);
 }
 
 /**
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/usb/wusbcore/wa-xfer.c linux-3.3.8-pax/drivers/usb/wusbcore/wa-xfer.c
--- linux-3.3.8/drivers/usb/wusbcore/wa-xfer.c	2012-01-08 19:48:21.567471274 +0100
+++ linux-3.3.8-pax/drivers/usb/wusbcore/wa-xfer.c	2012-03-19 10:43:44.160034639 +0100
@@ -296,7 +296,7 @@ out:
  */
 static void wa_xfer_id_init(struct wa_xfer *xfer)
 {
-	xfer->id = atomic_add_return(1, &xfer->wa->xfer_id_count);
+	xfer->id = atomic_add_return_unchecked(1, &xfer->wa->xfer_id_count);
 }
 
 /*
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/vhost/vhost.c linux-3.3.8-pax/drivers/vhost/vhost.c
--- linux-3.3.8/drivers/vhost/vhost.c	2011-10-24 12:48:38.767091105 +0200
+++ linux-3.3.8-pax/drivers/vhost/vhost.c	2012-03-19 10:43:44.160034639 +0100
@@ -629,7 +629,7 @@ static long vhost_set_memory(struct vhos
 	return 0;
 }
 
-static long vhost_set_vring(struct vhost_dev *d, int ioctl, void __user *argp)
+static long vhost_set_vring(struct vhost_dev *d, unsigned int ioctl, void __user *argp)
 {
 	struct file *eventfp, *filep = NULL,
 		    *pollstart = NULL, *pollstop = NULL;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/video/aty/aty128fb.c linux-3.3.8-pax/drivers/video/aty/aty128fb.c
--- linux-3.3.8/drivers/video/aty/aty128fb.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/video/aty/aty128fb.c	2012-03-19 10:43:44.164034640 +0100
@@ -148,7 +148,7 @@ enum {
 };
 
 /* Must match above enum */
-static const char *r128_family[] __devinitdata = {
+static const char *r128_family[] __devinitconst = {
 	"AGP",
 	"PCI",
 	"PRO AGP",
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/video/fbcmap.c linux-3.3.8-pax/drivers/video/fbcmap.c
--- linux-3.3.8/drivers/video/fbcmap.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/video/fbcmap.c	2012-03-19 10:43:44.164034640 +0100
@@ -285,8 +285,7 @@ int fb_set_user_cmap(struct fb_cmap_user
 		rc = -ENODEV;
 		goto out;
 	}
-	if (cmap->start < 0 || (!info->fbops->fb_setcolreg &&
-				!info->fbops->fb_setcmap)) {
+	if (!info->fbops->fb_setcolreg && !info->fbops->fb_setcmap) {
 		rc = -EINVAL;
 		goto out1;
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/video/fbmem.c linux-3.3.8-pax/drivers/video/fbmem.c
--- linux-3.3.8/drivers/video/fbmem.c	2012-04-03 22:02:50.254110018 +0200
+++ linux-3.3.8-pax/drivers/video/fbmem.c	2012-04-03 22:03:06.946110924 +0200
@@ -428,7 +428,7 @@ static void fb_do_show_logo(struct fb_in
 			image->dx += image->width + 8;
 		}
 	} else if (rotate == FB_ROTATE_UD) {
-		for (x = 0; x < num && image->dx >= 0; x++) {
+		for (x = 0; x < num && (__s32)image->dx >= 0; x++) {
 			info->fbops->fb_imageblit(info, image);
 			image->dx -= image->width + 8;
 		}
@@ -440,7 +440,7 @@ static void fb_do_show_logo(struct fb_in
 			image->dy += image->height + 8;
 		}
 	} else if (rotate == FB_ROTATE_CCW) {
-		for (x = 0; x < num && image->dy >= 0; x++) {
+		for (x = 0; x < num && (__s32)image->dy >= 0; x++) {
 			info->fbops->fb_imageblit(info, image);
 			image->dy -= image->height + 8;
 		}
@@ -1157,7 +1157,7 @@ static long do_fb_ioctl(struct fb_info *
 			return -EFAULT;
 		if (con2fb.console < 1 || con2fb.console > MAX_NR_CONSOLES)
 			return -EINVAL;
-		if (con2fb.framebuffer < 0 || con2fb.framebuffer >= FB_MAX)
+		if (con2fb.framebuffer >= FB_MAX)
 			return -EINVAL;
 		if (!registered_fb[con2fb.framebuffer])
 			request_module("fb%d", con2fb.framebuffer);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/video/geode/gx1fb_core.c linux-3.3.8-pax/drivers/video/geode/gx1fb_core.c
--- linux-3.3.8/drivers/video/geode/gx1fb_core.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/video/geode/gx1fb_core.c	2012-03-19 10:43:44.168034642 +0100
@@ -29,7 +29,7 @@ static int  crt_option = 1;
 static char panel_option[32] = "";
 
 /* Modes relevant to the GX1 (taken from modedb.c) */
-static const struct fb_videomode __devinitdata gx1_modedb[] = {
+static const struct fb_videomode __devinitconst gx1_modedb[] = {
 	/* 640x480-60 VESA */
 	{ NULL, 60, 640, 480, 39682,  48, 16, 33, 10, 96, 2,
 	  0, FB_VMODE_NONINTERLACED, FB_MODE_IS_VESA },
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/video/gxt4500.c linux-3.3.8-pax/drivers/video/gxt4500.c
--- linux-3.3.8/drivers/video/gxt4500.c	2012-01-08 19:48:21.727471265 +0100
+++ linux-3.3.8-pax/drivers/video/gxt4500.c	2012-03-19 10:43:44.168034642 +0100
@@ -156,7 +156,7 @@ struct gxt4500_par {
 static char *mode_option;
 
 /* default mode: 1280x1024 @ 60 Hz, 8 bpp */
-static const struct fb_videomode defaultmode __devinitdata = {
+static const struct fb_videomode defaultmode __devinitconst = {
 	.refresh = 60,
 	.xres = 1280,
 	.yres = 1024,
@@ -581,7 +581,7 @@ static int gxt4500_blank(int blank, stru
 	return 0;
 }
 
-static const struct fb_fix_screeninfo gxt4500_fix __devinitdata = {
+static const struct fb_fix_screeninfo gxt4500_fix __devinitconst = {
 	.id = "IBM GXT4500P",
 	.type = FB_TYPE_PACKED_PIXELS,
 	.visual = FB_VISUAL_PSEUDOCOLOR,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/video/i810/i810_accel.c linux-3.3.8-pax/drivers/video/i810/i810_accel.c
--- linux-3.3.8/drivers/video/i810/i810_accel.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/video/i810/i810_accel.c	2012-03-19 10:43:44.168034642 +0100
@@ -73,6 +73,7 @@ static inline int wait_for_space(struct
 		}
 	}
 	printk("ringbuffer lockup!!!\n");
+	printk("head:%u tail:%u iring.size:%u space:%u\n", head, tail, par->iring.size, space);
 	i810_report_error(mmio); 
 	par->dev_flags |= LOCKUP;
 	info->pixmap.scan_align = 1;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/video/i810/i810_main.c linux-3.3.8-pax/drivers/video/i810/i810_main.c
--- linux-3.3.8/drivers/video/i810/i810_main.c	2012-03-19 10:39:08.860049346 +0100
+++ linux-3.3.8-pax/drivers/video/i810/i810_main.c	2012-03-19 10:43:44.172034644 +0100
@@ -97,7 +97,7 @@ static int i810fb_blank      (int blank_
 static void i810fb_release_resource       (struct fb_info *info, struct i810fb_par *par);
 
 /* PCI */
-static const char *i810_pci_list[] __devinitdata = {
+static const char *i810_pci_list[] __devinitconst = {
 	"Intel(R) 810 Framebuffer Device"                                 ,
 	"Intel(R) 810-DC100 Framebuffer Device"                           ,
 	"Intel(R) 810E Framebuffer Device"                                ,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/video/jz4740_fb.c linux-3.3.8-pax/drivers/video/jz4740_fb.c
--- linux-3.3.8/drivers/video/jz4740_fb.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/video/jz4740_fb.c	2012-03-19 10:43:44.172034644 +0100
@@ -136,7 +136,7 @@ struct jzfb {
 	uint32_t pseudo_palette[16];
 };
 
-static const struct fb_fix_screeninfo jzfb_fix __devinitdata = {
+static const struct fb_fix_screeninfo jzfb_fix __devinitconst = {
 	.id		= "JZ4740 FB",
 	.type		= FB_TYPE_PACKED_PIXELS,
 	.visual		= FB_VISUAL_TRUECOLOR,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/video/udlfb.c linux-3.3.8-pax/drivers/video/udlfb.c
--- linux-3.3.8/drivers/video/udlfb.c	2012-06-11 19:36:39.312445759 +0200
+++ linux-3.3.8-pax/drivers/video/udlfb.c	2012-06-11 19:36:45.800446111 +0200
@@ -619,11 +619,11 @@ int dlfb_handle_damage(struct dlfb_data
 		dlfb_urb_completion(urb);
 
 error:
-	atomic_add(bytes_sent, &dev->bytes_sent);
-	atomic_add(bytes_identical, &dev->bytes_identical);
-	atomic_add(width*height*2, &dev->bytes_rendered);
+	atomic_add_unchecked(bytes_sent, &dev->bytes_sent);
+	atomic_add_unchecked(bytes_identical, &dev->bytes_identical);
+	atomic_add_unchecked(width*height*2, &dev->bytes_rendered);
 	end_cycles = get_cycles();
-	atomic_add(((unsigned int) ((end_cycles - start_cycles)
+	atomic_add_unchecked(((unsigned int) ((end_cycles - start_cycles)
 		    >> 10)), /* Kcycles */
 		   &dev->cpu_kcycles_used);
 
@@ -744,11 +744,11 @@ static void dlfb_dpy_deferred_io(struct
 		dlfb_urb_completion(urb);
 
 error:
-	atomic_add(bytes_sent, &dev->bytes_sent);
-	atomic_add(bytes_identical, &dev->bytes_identical);
-	atomic_add(bytes_rendered, &dev->bytes_rendered);
+	atomic_add_unchecked(bytes_sent, &dev->bytes_sent);
+	atomic_add_unchecked(bytes_identical, &dev->bytes_identical);
+	atomic_add_unchecked(bytes_rendered, &dev->bytes_rendered);
 	end_cycles = get_cycles();
-	atomic_add(((unsigned int) ((end_cycles - start_cycles)
+	atomic_add_unchecked(((unsigned int) ((end_cycles - start_cycles)
 		    >> 10)), /* Kcycles */
 		   &dev->cpu_kcycles_used);
 }
@@ -1371,7 +1371,7 @@ static ssize_t metrics_bytes_rendered_sh
 	struct fb_info *fb_info = dev_get_drvdata(fbdev);
 	struct dlfb_data *dev = fb_info->par;
 	return snprintf(buf, PAGE_SIZE, "%u\n",
-			atomic_read(&dev->bytes_rendered));
+			atomic_read_unchecked(&dev->bytes_rendered));
 }
 
 static ssize_t metrics_bytes_identical_show(struct device *fbdev,
@@ -1379,7 +1379,7 @@ static ssize_t metrics_bytes_identical_s
 	struct fb_info *fb_info = dev_get_drvdata(fbdev);
 	struct dlfb_data *dev = fb_info->par;
 	return snprintf(buf, PAGE_SIZE, "%u\n",
-			atomic_read(&dev->bytes_identical));
+			atomic_read_unchecked(&dev->bytes_identical));
 }
 
 static ssize_t metrics_bytes_sent_show(struct device *fbdev,
@@ -1387,7 +1387,7 @@ static ssize_t metrics_bytes_sent_show(s
 	struct fb_info *fb_info = dev_get_drvdata(fbdev);
 	struct dlfb_data *dev = fb_info->par;
 	return snprintf(buf, PAGE_SIZE, "%u\n",
-			atomic_read(&dev->bytes_sent));
+			atomic_read_unchecked(&dev->bytes_sent));
 }
 
 static ssize_t metrics_cpu_kcycles_used_show(struct device *fbdev,
@@ -1395,7 +1395,7 @@ static ssize_t metrics_cpu_kcycles_used_
 	struct fb_info *fb_info = dev_get_drvdata(fbdev);
 	struct dlfb_data *dev = fb_info->par;
 	return snprintf(buf, PAGE_SIZE, "%u\n",
-			atomic_read(&dev->cpu_kcycles_used));
+			atomic_read_unchecked(&dev->cpu_kcycles_used));
 }
 
 static ssize_t edid_show(
@@ -1452,10 +1452,10 @@ static ssize_t metrics_reset_store(struc
 	struct fb_info *fb_info = dev_get_drvdata(fbdev);
 	struct dlfb_data *dev = fb_info->par;
 
-	atomic_set(&dev->bytes_rendered, 0);
-	atomic_set(&dev->bytes_identical, 0);
-	atomic_set(&dev->bytes_sent, 0);
-	atomic_set(&dev->cpu_kcycles_used, 0);
+	atomic_set_unchecked(&dev->bytes_rendered, 0);
+	atomic_set_unchecked(&dev->bytes_identical, 0);
+	atomic_set_unchecked(&dev->bytes_sent, 0);
+	atomic_set_unchecked(&dev->cpu_kcycles_used, 0);
 
 	return count;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/video/uvesafb.c linux-3.3.8-pax/drivers/video/uvesafb.c
--- linux-3.3.8/drivers/video/uvesafb.c	2012-04-23 14:06:59.503285808 +0200
+++ linux-3.3.8-pax/drivers/video/uvesafb.c	2012-04-23 16:35:57.558808373 +0200
@@ -19,6 +19,7 @@
 #include <linux/io.h>
 #include <linux/mutex.h>
 #include <linux/slab.h>
+#include <linux/moduleloader.h>
 #include <video/edid.h>
 #include <video/uvesafb.h>
 #ifdef CONFIG_X86
@@ -121,7 +122,7 @@ static int uvesafb_helper_start(void)
 		NULL,
 	};
 
-	return call_usermodehelper(v86d_path, argv, envp, 1);
+	return call_usermodehelper(v86d_path, argv, envp, UMH_WAIT_PROC);
 }
 
 /*
@@ -569,10 +570,32 @@ static int __devinit uvesafb_vbe_getpmi(
 	if ((task->t.regs.eax & 0xffff) != 0x4f || task->t.regs.es < 0xc000) {
 		par->pmi_setpal = par->ypan = 0;
 	} else {
+
+#ifdef CONFIG_PAX_KERNEXEC
+#ifdef CONFIG_MODULES
+		par->pmi_code = module_alloc_exec((u16)task->t.regs.ecx);
+#endif
+		if (!par->pmi_code) {
+			par->pmi_setpal = par->ypan = 0;
+			return 0;
+		}
+#endif
+
 		par->pmi_base = (u16 *)phys_to_virt(((u32)task->t.regs.es << 4)
 						+ task->t.regs.edi);
+
+#if defined(CONFIG_MODULES) && defined(CONFIG_PAX_KERNEXEC)
+		pax_open_kernel();
+		memcpy(par->pmi_code, par->pmi_base, (u16)task->t.regs.ecx);
+		pax_close_kernel();
+
+		par->pmi_start = ktva_ktla(par->pmi_code + par->pmi_base[1]);
+		par->pmi_pal = ktva_ktla(par->pmi_code + par->pmi_base[2]);
+#else
 		par->pmi_start = (u8 *)par->pmi_base + par->pmi_base[1];
 		par->pmi_pal = (u8 *)par->pmi_base + par->pmi_base[2];
+#endif
+
 		printk(KERN_INFO "uvesafb: protected mode interface info at "
 				 "%04x:%04x\n",
 				 (u16)task->t.regs.es, (u16)task->t.regs.edi);
@@ -816,13 +839,14 @@ static int __devinit uvesafb_vbe_init(st
 	par->ypan = ypan;
 
 	if (par->pmi_setpal || par->ypan) {
+#if !defined(CONFIG_MODULES) || !defined(CONFIG_PAX_KERNEXEC)
 		if (__supported_pte_mask & _PAGE_NX) {
 			par->pmi_setpal = par->ypan = 0;
 			printk(KERN_WARNING "uvesafb: NX protection is actively."
 				"We have better not to use the PMI.\n");
-		} else {
+		} else
+#endif
 			uvesafb_vbe_getpmi(task, par);
-		}
 	}
 #else
 	/* The protected mode interface is not available on non-x86. */
@@ -1828,6 +1852,11 @@ out:
 	if (par->vbe_modes)
 		kfree(par->vbe_modes);
 
+#if defined(CONFIG_MODULES) && defined(CONFIG_PAX_KERNEXEC)
+	if (par->pmi_code)
+		module_free_exec(NULL, par->pmi_code);
+#endif
+
 	framebuffer_release(info);
 	return err;
 }
@@ -1854,6 +1883,12 @@ static int uvesafb_remove(struct platfor
 				kfree(par->vbe_state_orig);
 			if (par->vbe_state_saved)
 				kfree(par->vbe_state_saved);
+
+#if defined(CONFIG_MODULES) && defined(CONFIG_PAX_KERNEXEC)
+			if (par->pmi_code)
+				module_free_exec(NULL, par->pmi_code);
+#endif
+
 		}
 
 		framebuffer_release(info);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/video/vesafb.c linux-3.3.8-pax/drivers/video/vesafb.c
--- linux-3.3.8/drivers/video/vesafb.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/video/vesafb.c	2012-03-19 10:43:44.176034644 +0100
@@ -9,6 +9,7 @@
  */
 
 #include <linux/module.h>
+#include <linux/moduleloader.h>
 #include <linux/kernel.h>
 #include <linux/errno.h>
 #include <linux/string.h>
@@ -52,8 +53,8 @@ static int   vram_remap __initdata;		/*
 static int   vram_total __initdata;		/* Set total amount of memory */
 static int   pmi_setpal __read_mostly = 1;	/* pmi for palette changes ??? */
 static int   ypan       __read_mostly;		/* 0..nothing, 1..ypan, 2..ywrap */
-static void  (*pmi_start)(void) __read_mostly;
-static void  (*pmi_pal)  (void) __read_mostly;
+static void  (*pmi_start)(void) __read_only;
+static void  (*pmi_pal)  (void) __read_only;
 static int   depth      __read_mostly;
 static int   vga_compat __read_mostly;
 /* --------------------------------------------------------------------- */
@@ -233,6 +234,7 @@ static int __init vesafb_probe(struct pl
 	unsigned int size_vmode;
 	unsigned int size_remap;
 	unsigned int size_total;
+	void *pmi_code = NULL;
 
 	if (screen_info.orig_video_isVGA != VIDEO_TYPE_VLFB)
 		return -ENODEV;
@@ -275,10 +277,6 @@ static int __init vesafb_probe(struct pl
 		size_remap = size_total;
 	vesafb_fix.smem_len = size_remap;
 
-#ifndef __i386__
-	screen_info.vesapm_seg = 0;
-#endif
-
 	if (!request_mem_region(vesafb_fix.smem_start, size_total, "vesafb")) {
 		printk(KERN_WARNING
 		       "vesafb: cannot reserve video memory at 0x%lx\n",
@@ -307,9 +305,21 @@ static int __init vesafb_probe(struct pl
 	printk(KERN_INFO "vesafb: mode is %dx%dx%d, linelength=%d, pages=%d\n",
 	       vesafb_defined.xres, vesafb_defined.yres, vesafb_defined.bits_per_pixel, vesafb_fix.line_length, screen_info.pages);
 
+#ifdef __i386__
+
+#if defined(CONFIG_MODULES) && defined(CONFIG_PAX_KERNEXEC)
+	pmi_code = module_alloc_exec(screen_info.vesapm_size);
+	if (!pmi_code)
+#elif !defined(CONFIG_PAX_KERNEXEC)
+	if (0)
+#endif
+
+#endif
+	screen_info.vesapm_seg = 0;
+
 	if (screen_info.vesapm_seg) {
-		printk(KERN_INFO "vesafb: protected mode interface info at %04x:%04x\n",
-		       screen_info.vesapm_seg,screen_info.vesapm_off);
+		printk(KERN_INFO "vesafb: protected mode interface info at %04x:%04x %04x bytes\n",
+		       screen_info.vesapm_seg,screen_info.vesapm_off,screen_info.vesapm_size);
 	}
 
 	if (screen_info.vesapm_seg < 0xc000)
@@ -317,9 +327,25 @@ static int __init vesafb_probe(struct pl
 
 	if (ypan || pmi_setpal) {
 		unsigned short *pmi_base;
+
 		pmi_base  = (unsigned short*)phys_to_virt(((unsigned long)screen_info.vesapm_seg << 4) + screen_info.vesapm_off);
-		pmi_start = (void*)((char*)pmi_base + pmi_base[1]);
-		pmi_pal   = (void*)((char*)pmi_base + pmi_base[2]);
+
+#if defined(CONFIG_MODULES) && defined(CONFIG_PAX_KERNEXEC)
+		pax_open_kernel();
+		memcpy(pmi_code, pmi_base, screen_info.vesapm_size);
+#else
+		pmi_code  = pmi_base;
+#endif
+
+		pmi_start = (void*)((char*)pmi_code + pmi_base[1]);
+		pmi_pal   = (void*)((char*)pmi_code + pmi_base[2]);
+
+#if defined(CONFIG_MODULES) && defined(CONFIG_PAX_KERNEXEC)
+		pmi_start = ktva_ktla(pmi_start);
+		pmi_pal = ktva_ktla(pmi_pal);
+		pax_close_kernel();
+#endif
+
 		printk(KERN_INFO "vesafb: pmi: set display start = %p, set palette = %p\n",pmi_start,pmi_pal);
 		if (pmi_base[3]) {
 			printk(KERN_INFO "vesafb: pmi: ports = ");
@@ -488,6 +514,11 @@ static int __init vesafb_probe(struct pl
 	       info->node, info->fix.id);
 	return 0;
 err:
+
+#if defined(__i386__) && defined(CONFIG_MODULES) && defined(CONFIG_PAX_KERNEXEC)
+	module_free_exec(NULL, pmi_code);
+#endif
+
 	if (info->screen_base)
 		iounmap(info->screen_base);
 	framebuffer_release(info);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/video/via/via_clock.h linux-3.3.8-pax/drivers/video/via/via_clock.h
--- linux-3.3.8/drivers/video/via/via_clock.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/drivers/video/via/via_clock.h	2012-03-19 10:43:44.176034644 +0100
@@ -56,7 +56,7 @@ struct via_clock {
 
 	void (*set_engine_pll_state)(u8 state);
 	void (*set_engine_pll)(struct via_pll_config config);
-};
+} __no_const;
 
 
 static inline u32 get_pll_internal_frequency(u32 ref_freq,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/drivers/xen/xen-pciback/conf_space.h linux-3.3.8-pax/drivers/xen/xen-pciback/conf_space.h
--- linux-3.3.8/drivers/xen/xen-pciback/conf_space.h	2011-10-24 12:48:39.087091088 +0200
+++ linux-3.3.8-pax/drivers/xen/xen-pciback/conf_space.h	2012-03-19 10:43:44.176034644 +0100
@@ -44,15 +44,15 @@ struct config_field {
 		struct {
 			conf_dword_write write;
 			conf_dword_read read;
-		} dw;
+		} __no_const dw;
 		struct {
 			conf_word_write write;
 			conf_word_read read;
-		} w;
+		} __no_const w;
 		struct {
 			conf_byte_write write;
 			conf_byte_read read;
-		} b;
+		} __no_const b;
 	} u;
 	struct list_head list;
 };
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/9p/vfs_inode.c linux-3.3.8-pax/fs/9p/vfs_inode.c
--- linux-3.3.8/fs/9p/vfs_inode.c	2012-03-19 10:39:09.400049313 +0100
+++ linux-3.3.8-pax/fs/9p/vfs_inode.c	2012-03-19 10:43:44.176034644 +0100
@@ -1303,7 +1303,7 @@ static void *v9fs_vfs_follow_link(struct
 void
 v9fs_vfs_put_link(struct dentry *dentry, struct nameidata *nd, void *p)
 {
-	char *s = nd_get_link(nd);
+	const char *s = nd_get_link(nd);
 
 	p9_debug(P9_DEBUG_VFS, " %s %s\n",
 		 dentry->d_name.name, IS_ERR(s) ? "<error>" : s);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/aio.c linux-3.3.8-pax/fs/aio.c
--- linux-3.3.8/fs/aio.c	2012-06-11 19:36:40.444445814 +0200
+++ linux-3.3.8-pax/fs/aio.c	2012-06-11 19:37:15.700447897 +0200
@@ -119,7 +119,7 @@ static int aio_setup_ring(struct kioctx
 	size += sizeof(struct io_event) * nr_events;
 	nr_pages = (size + PAGE_SIZE-1) >> PAGE_SHIFT;
 
-	if (nr_pages < 0)
+	if (nr_pages <= 0)
 		return -EINVAL;
 
 	nr_events = (PAGE_SIZE * nr_pages - sizeof(struct aio_ring)) / sizeof(struct io_event);
@@ -1461,18 +1461,19 @@ static ssize_t aio_fsync(struct kiocb *i
 static ssize_t aio_setup_vectored_rw(int type, struct kiocb *kiocb, bool compat)
 {
 	ssize_t ret;
+	struct iovec iovstack;
 
 #ifdef CONFIG_COMPAT
 	if (compat)
 		ret = compat_rw_copy_check_uvector(type,
 				(struct compat_iovec __user *)kiocb->ki_buf,
-				kiocb->ki_nbytes, 1, &kiocb->ki_inline_vec,
+				kiocb->ki_nbytes, 1, &iovstack,
 				&kiocb->ki_iovec, 1);
 	else
 #endif
 		ret = rw_copy_check_uvector(type,
 				(struct iovec __user *)kiocb->ki_buf,
-				kiocb->ki_nbytes, 1, &kiocb->ki_inline_vec,
+				kiocb->ki_nbytes, 1, &iovstack,
 				&kiocb->ki_iovec, 1);
 	if (ret < 0)
 		goto out;
@@ -1481,6 +1482,10 @@ static ssize_t aio_setup_vectored_rw(int
 	if (ret < 0)
 		goto out;
 
+	if (kiocb->ki_iovec == &iovstack) {
+		kiocb->ki_inline_vec = iovstack;
+		kiocb->ki_iovec = &kiocb->ki_inline_vec;
+	}
 	kiocb->ki_nr_segs = kiocb->ki_nbytes;
 	kiocb->ki_cur_seg = 0;
 	/* ki_nbytes/left now reflect bytes instead of segs */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/autofs4/waitq.c linux-3.3.8-pax/fs/autofs4/waitq.c
--- linux-3.3.8/fs/autofs4/waitq.c	2012-05-07 20:26:56.059609315 +0200
+++ linux-3.3.8-pax/fs/autofs4/waitq.c	2012-05-07 20:27:02.107608992 +0200
@@ -61,7 +61,7 @@ static int autofs4_write(struct autofs_s
 {
 	unsigned long sigpipe, flags;
 	mm_segment_t fs;
-	const char *data = (const char *)addr;
+	const char __user *data = (const char __force_user *)addr;
 	ssize_t wr = 0;
 
 	sigpipe = sigismember(&current->pending.signal, SIGPIPE);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/befs/linuxvfs.c linux-3.3.8-pax/fs/befs/linuxvfs.c
--- linux-3.3.8/fs/befs/linuxvfs.c	2012-03-19 10:39:09.448049310 +0100
+++ linux-3.3.8-pax/fs/befs/linuxvfs.c	2012-03-19 10:43:44.184034643 +0100
@@ -502,7 +502,7 @@ static void befs_put_link(struct dentry
 {
 	befs_inode_info *befs_ino = BEFS_I(dentry->d_inode);
 	if (befs_ino->i_flags & BEFS_LONG_SYMLINK) {
-		char *link = nd_get_link(nd);
+		const char *link = nd_get_link(nd);
 		if (!IS_ERR(link))
 			kfree(link);
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/binfmt_aout.c linux-3.3.8-pax/fs/binfmt_aout.c
--- linux-3.3.8/fs/binfmt_aout.c	2012-03-19 10:39:09.452049310 +0100
+++ linux-3.3.8-pax/fs/binfmt_aout.c	2012-03-19 10:43:44.184034643 +0100
@@ -269,6 +269,27 @@ static int load_aout_binary(struct linux
 	install_exec_creds(bprm);
  	current->flags &= ~PF_FORKNOEXEC;
 
+#if defined(CONFIG_PAX_NOEXEC) || defined(CONFIG_PAX_ASLR)
+	current->mm->pax_flags = 0UL;
+#endif
+
+#ifdef CONFIG_PAX_PAGEEXEC
+	if (!(N_FLAGS(ex) & F_PAX_PAGEEXEC)) {
+		current->mm->pax_flags |= MF_PAX_PAGEEXEC;
+
+#ifdef CONFIG_PAX_EMUTRAMP
+		if (N_FLAGS(ex) & F_PAX_EMUTRAMP)
+			current->mm->pax_flags |= MF_PAX_EMUTRAMP;
+#endif
+
+#ifdef CONFIG_PAX_MPROTECT
+		if (!(N_FLAGS(ex) & F_PAX_MPROTECT))
+			current->mm->pax_flags |= MF_PAX_MPROTECT;
+#endif
+
+	}
+#endif
+
 	if (N_MAGIC(ex) == OMAGIC) {
 		unsigned long text_addr, map_size;
 		loff_t pos;
@@ -341,7 +362,7 @@ static int load_aout_binary(struct linux
 
 		down_write(&current->mm->mmap_sem);
  		error = do_mmap(bprm->file, N_DATADDR(ex), ex.a_data,
-				PROT_READ | PROT_WRITE | PROT_EXEC,
+				PROT_READ | PROT_WRITE,
 				MAP_FIXED | MAP_PRIVATE | MAP_DENYWRITE | MAP_EXECUTABLE,
 				fd_offset + ex.a_text);
 		up_write(&current->mm->mmap_sem);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/binfmt_elf.c linux-3.3.8-pax/fs/binfmt_elf.c
--- linux-3.3.8/fs/binfmt_elf.c	2012-03-19 10:39:09.456049310 +0100
+++ linux-3.3.8-pax/fs/binfmt_elf.c	2012-05-07 12:38:33.441109987 +0200
@@ -32,6 +32,7 @@
 #include <linux/elf.h>
 #include <linux/utsname.h>
 #include <linux/coredump.h>
+#include <linux/xattr.h>
 #include <asm/uaccess.h>
 #include <asm/param.h>
 #include <asm/page.h>
@@ -51,6 +52,10 @@ static int elf_core_dump(struct coredump
 #define elf_core_dump	NULL
 #endif
 
+#ifdef CONFIG_PAX_MPROTECT
+static void elf_handle_mprotect(struct vm_area_struct *vma, unsigned long newflags);
+#endif
+
 #if ELF_EXEC_PAGESIZE > PAGE_SIZE
 #define ELF_MIN_ALIGN	ELF_EXEC_PAGESIZE
 #else
@@ -70,6 +75,11 @@ static struct linux_binfmt elf_format =
 	.load_binary	= load_elf_binary,
 	.load_shlib	= load_elf_library,
 	.core_dump	= elf_core_dump,
+
+#ifdef CONFIG_PAX_MPROTECT
+	.handle_mprotect= elf_handle_mprotect,
+#endif
+
 	.min_coredump	= ELF_EXEC_PAGESIZE,
 };
 
@@ -77,6 +87,8 @@ static struct linux_binfmt elf_format =
 
 static int set_brk(unsigned long start, unsigned long end)
 {
+	unsigned long e = end;
+
 	start = ELF_PAGEALIGN(start);
 	end = ELF_PAGEALIGN(end);
 	if (end > start) {
@@ -87,7 +99,7 @@ static int set_brk(unsigned long start,
 		if (BAD_ADDR(addr))
 			return addr;
 	}
-	current->mm->start_brk = current->mm->brk = end;
+	current->mm->start_brk = current->mm->brk = e;
 	return 0;
 }
 
@@ -148,12 +160,13 @@ create_elf_tables(struct linux_binprm *b
 	elf_addr_t __user *u_rand_bytes;
 	const char *k_platform = ELF_PLATFORM;
 	const char *k_base_platform = ELF_BASE_PLATFORM;
-	unsigned char k_rand_bytes[16];
+	u32 k_rand_bytes[4];
 	int items;
 	elf_addr_t *elf_info;
 	int ei_index = 0;
 	const struct cred *cred = current_cred();
 	struct vm_area_struct *vma;
+	unsigned long saved_auxv[AT_VECTOR_SIZE];
 
 	/*
 	 * In some cases (e.g. Hyper-Threading), we want to avoid L1
@@ -195,8 +208,12 @@ create_elf_tables(struct linux_binprm *b
 	 * Generate 16 random bytes for userspace PRNG seeding.
 	 */
 	get_random_bytes(k_rand_bytes, sizeof(k_rand_bytes));
-	u_rand_bytes = (elf_addr_t __user *)
-		       STACK_ALLOC(p, sizeof(k_rand_bytes));
+	srandom32(k_rand_bytes[0] ^ random32());
+	srandom32(k_rand_bytes[1] ^ random32());
+	srandom32(k_rand_bytes[2] ^ random32());
+	srandom32(k_rand_bytes[3] ^ random32());
+	p = STACK_ROUND(p, sizeof(k_rand_bytes));
+	u_rand_bytes = (elf_addr_t __user *) p;
 	if (__copy_to_user(u_rand_bytes, k_rand_bytes, sizeof(k_rand_bytes)))
 		return -EFAULT;
 
@@ -308,9 +325,11 @@ create_elf_tables(struct linux_binprm *b
 		return -EFAULT;
 	current->mm->env_end = p;
 
+	memcpy(saved_auxv, elf_info, ei_index * sizeof(elf_addr_t));
+
 	/* Put the elf_info on the stack in the right place.  */
 	sp = (elf_addr_t __user *)envp + 1;
-	if (copy_to_user(sp, elf_info, ei_index * sizeof(elf_addr_t)))
+	if (copy_to_user(sp, saved_auxv, ei_index * sizeof(elf_addr_t)))
 		return -EFAULT;
 	return 0;
 }
@@ -381,10 +400,10 @@ static unsigned long load_elf_interp(str
 {
 	struct elf_phdr *elf_phdata;
 	struct elf_phdr *eppnt;
-	unsigned long load_addr = 0;
+	unsigned long load_addr = 0, pax_task_size = TASK_SIZE;
 	int load_addr_set = 0;
 	unsigned long last_bss = 0, elf_bss = 0;
-	unsigned long error = ~0UL;
+	unsigned long error = -EINVAL;
 	unsigned long total_size;
 	int retval, i, size;
 
@@ -430,6 +449,11 @@ static unsigned long load_elf_interp(str
 		goto out_close;
 	}
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (current->mm->pax_flags & MF_PAX_SEGMEXEC)
+		pax_task_size = SEGMEXEC_TASK_SIZE;
+#endif
+
 	eppnt = elf_phdata;
 	for (i = 0; i < interp_elf_ex->e_phnum; i++, eppnt++) {
 		if (eppnt->p_type == PT_LOAD) {
@@ -473,8 +497,8 @@ static unsigned long load_elf_interp(str
 			k = load_addr + eppnt->p_vaddr;
 			if (BAD_ADDR(k) ||
 			    eppnt->p_filesz > eppnt->p_memsz ||
-			    eppnt->p_memsz > TASK_SIZE ||
-			    TASK_SIZE - eppnt->p_memsz < k) {
+			    eppnt->p_memsz > pax_task_size ||
+			    pax_task_size - eppnt->p_memsz < k) {
 				error = -ENOMEM;
 				goto out_close;
 			}
@@ -528,6 +552,351 @@ out:
 	return error;
 }
 
+#if defined(CONFIG_PAX_EI_PAX) || defined(CONFIG_PAX_PT_PAX_FLAGS) || defined(CONFIG_PAX_XATTR_PAX_FLAGS)
+static unsigned long pax_parse_pt_pax_softmode(const struct elf_phdr * const elf_phdata)
+{
+	unsigned long pax_flags = 0UL;
+
+#ifdef CONFIG_PAX_PT_PAX_FLAGS
+
+#ifdef CONFIG_PAX_PAGEEXEC
+	if (elf_phdata->p_flags & PF_PAGEEXEC)
+		pax_flags |= MF_PAX_PAGEEXEC;
+#endif
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (elf_phdata->p_flags & PF_SEGMEXEC)
+		pax_flags |= MF_PAX_SEGMEXEC;
+#endif
+
+#if defined(CONFIG_PAX_PAGEEXEC) && defined(CONFIG_PAX_SEGMEXEC)
+	if ((pax_flags & (MF_PAX_PAGEEXEC | MF_PAX_SEGMEXEC)) == (MF_PAX_PAGEEXEC | MF_PAX_SEGMEXEC)) {
+		if ((__supported_pte_mask & _PAGE_NX))
+			pax_flags &= ~MF_PAX_SEGMEXEC;
+		else
+			pax_flags &= ~MF_PAX_PAGEEXEC;
+	}
+#endif
+
+#ifdef CONFIG_PAX_EMUTRAMP
+	if (elf_phdata->p_flags & PF_EMUTRAMP)
+		pax_flags |= MF_PAX_EMUTRAMP;
+#endif
+
+#ifdef CONFIG_PAX_MPROTECT
+	if (elf_phdata->p_flags & PF_MPROTECT)
+		pax_flags |= MF_PAX_MPROTECT;
+#endif
+
+#if defined(CONFIG_PAX_RANDMMAP) || defined(CONFIG_PAX_RANDUSTACK)
+	if (randomize_va_space && (elf_phdata->p_flags & PF_RANDMMAP))
+		pax_flags |= MF_PAX_RANDMMAP;
+#endif
+
+#endif
+
+	return pax_flags;
+}
+
+static unsigned long pax_parse_pt_pax_hardmode(const struct elf_phdr * const elf_phdata)
+{
+	unsigned long pax_flags = 0UL;
+
+#ifdef CONFIG_PAX_PT_PAX_FLAGS
+
+#ifdef CONFIG_PAX_PAGEEXEC
+	if (!(elf_phdata->p_flags & PF_NOPAGEEXEC))
+		pax_flags |= MF_PAX_PAGEEXEC;
+#endif
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (!(elf_phdata->p_flags & PF_NOSEGMEXEC))
+		pax_flags |= MF_PAX_SEGMEXEC;
+#endif
+
+#if defined(CONFIG_PAX_PAGEEXEC) && defined(CONFIG_PAX_SEGMEXEC)
+	if ((pax_flags & (MF_PAX_PAGEEXEC | MF_PAX_SEGMEXEC)) == (MF_PAX_PAGEEXEC | MF_PAX_SEGMEXEC)) {
+		if ((__supported_pte_mask & _PAGE_NX))
+			pax_flags &= ~MF_PAX_SEGMEXEC;
+		else
+			pax_flags &= ~MF_PAX_PAGEEXEC;
+	}
+#endif
+
+#ifdef CONFIG_PAX_EMUTRAMP
+	if (!(elf_phdata->p_flags & PF_NOEMUTRAMP))
+		pax_flags |= MF_PAX_EMUTRAMP;
+#endif
+
+#ifdef CONFIG_PAX_MPROTECT
+	if (!(elf_phdata->p_flags & PF_NOMPROTECT))
+		pax_flags |= MF_PAX_MPROTECT;
+#endif
+
+#if defined(CONFIG_PAX_RANDMMAP) || defined(CONFIG_PAX_RANDUSTACK)
+	if (randomize_va_space && !(elf_phdata->p_flags & PF_NORANDMMAP))
+		pax_flags |= MF_PAX_RANDMMAP;
+#endif
+
+#endif
+
+	return pax_flags;
+}
+
+static unsigned long pax_parse_ei_pax(const struct elfhdr * const elf_ex)
+{
+	unsigned long pax_flags = 0UL;
+
+#ifdef CONFIG_PAX_EI_PAX
+
+#ifdef CONFIG_PAX_PAGEEXEC
+	if (!(elf_ex->e_ident[EI_PAX] & EF_PAX_PAGEEXEC))
+		pax_flags |= MF_PAX_PAGEEXEC;
+#endif
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (!(elf_ex->e_ident[EI_PAX] & EF_PAX_SEGMEXEC))
+		pax_flags |= MF_PAX_SEGMEXEC;
+#endif
+
+#if defined(CONFIG_PAX_PAGEEXEC) && defined(CONFIG_PAX_SEGMEXEC)
+	if ((pax_flags & (MF_PAX_PAGEEXEC | MF_PAX_SEGMEXEC)) == (MF_PAX_PAGEEXEC | MF_PAX_SEGMEXEC)) {
+		if ((__supported_pte_mask & _PAGE_NX))
+			pax_flags &= ~MF_PAX_SEGMEXEC;
+		else
+			pax_flags &= ~MF_PAX_PAGEEXEC;
+	}
+#endif
+
+#ifdef CONFIG_PAX_EMUTRAMP
+	if ((pax_flags & (MF_PAX_PAGEEXEC | MF_PAX_SEGMEXEC)) && (elf_ex->e_ident[EI_PAX] & EF_PAX_EMUTRAMP))
+		pax_flags |= MF_PAX_EMUTRAMP;
+#endif
+
+#ifdef CONFIG_PAX_MPROTECT
+	if ((pax_flags & (MF_PAX_PAGEEXEC | MF_PAX_SEGMEXEC)) && !(elf_ex->e_ident[EI_PAX] & EF_PAX_MPROTECT))
+		pax_flags |= MF_PAX_MPROTECT;
+#endif
+
+#ifdef CONFIG_PAX_ASLR
+	if (randomize_va_space && !(elf_ex->e_ident[EI_PAX] & EF_PAX_RANDMMAP))
+		pax_flags |= MF_PAX_RANDMMAP;
+#endif
+
+#else
+
+#ifdef CONFIG_PAX_PAGEEXEC
+	pax_flags |= MF_PAX_PAGEEXEC;
+#endif
+
+#ifdef CONFIG_PAX_MPROTECT
+	pax_flags |= MF_PAX_MPROTECT;
+#endif
+
+#ifdef CONFIG_PAX_RANDMMAP
+	pax_flags |= MF_PAX_RANDMMAP;
+#endif
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (!(pax_flags & MF_PAX_PAGEEXEC) || !(__supported_pte_mask & _PAGE_NX)) {
+		pax_flags &= ~MF_PAX_PAGEEXEC;
+		pax_flags |= MF_PAX_SEGMEXEC;
+	}
+#endif
+
+#endif
+
+	return pax_flags;
+}
+
+static unsigned long pax_parse_pt_pax(const struct elfhdr * const elf_ex, const struct elf_phdr * const elf_phdata)
+{
+
+#ifdef CONFIG_PAX_PT_PAX_FLAGS
+	unsigned long i;
+
+	for (i = 0UL; i < elf_ex->e_phnum; i++)
+		if (elf_phdata[i].p_type == PT_PAX_FLAGS) {
+			if (((elf_phdata[i].p_flags & PF_PAGEEXEC) && (elf_phdata[i].p_flags & PF_NOPAGEEXEC)) ||
+			    ((elf_phdata[i].p_flags & PF_SEGMEXEC) && (elf_phdata[i].p_flags & PF_NOSEGMEXEC)) ||
+			    ((elf_phdata[i].p_flags & PF_EMUTRAMP) && (elf_phdata[i].p_flags & PF_NOEMUTRAMP)) ||
+			    ((elf_phdata[i].p_flags & PF_MPROTECT) && (elf_phdata[i].p_flags & PF_NOMPROTECT)) ||
+			    ((elf_phdata[i].p_flags & PF_RANDMMAP) && (elf_phdata[i].p_flags & PF_NORANDMMAP)))
+				return ~0UL;
+
+#ifdef CONFIG_PAX_SOFTMODE
+			if (pax_softmode)
+				return pax_parse_pt_pax_softmode(&elf_phdata[i]);
+			else
+#endif
+
+				return pax_parse_pt_pax_hardmode(&elf_phdata[i]);
+			break;
+		}
+#endif
+
+	return ~0UL;
+}
+
+#ifdef CONFIG_PAX_XATTR_PAX_FLAGS
+static unsigned long pax_parse_xattr_pax_softmode(unsigned long pax_flags_softmode)
+{
+	unsigned long pax_flags = 0UL;
+
+#ifdef CONFIG_PAX_PAGEEXEC
+	if (pax_flags_softmode & MF_PAX_PAGEEXEC)
+		pax_flags |= MF_PAX_PAGEEXEC;
+#endif
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (pax_flags_softmode & MF_PAX_SEGMEXEC)
+		pax_flags |= MF_PAX_SEGMEXEC;
+#endif
+
+#if defined(CONFIG_PAX_PAGEEXEC) && defined(CONFIG_PAX_SEGMEXEC)
+	if ((pax_flags & (MF_PAX_PAGEEXEC | MF_PAX_SEGMEXEC)) == (MF_PAX_PAGEEXEC | MF_PAX_SEGMEXEC)) {
+		if ((__supported_pte_mask & _PAGE_NX))
+			pax_flags &= ~MF_PAX_SEGMEXEC;
+		else
+			pax_flags &= ~MF_PAX_PAGEEXEC;
+	}
+#endif
+
+#ifdef CONFIG_PAX_EMUTRAMP
+	if (pax_flags_softmode & MF_PAX_EMUTRAMP)
+		pax_flags |= MF_PAX_EMUTRAMP;
+#endif
+
+#ifdef CONFIG_PAX_MPROTECT
+	if (pax_flags_softmode & MF_PAX_MPROTECT)
+		pax_flags |= MF_PAX_MPROTECT;
+#endif
+
+#if defined(CONFIG_PAX_RANDMMAP) || defined(CONFIG_PAX_RANDUSTACK)
+	if (randomize_va_space && (pax_flags_softmode & MF_PAX_RANDMMAP))
+		pax_flags |= MF_PAX_RANDMMAP;
+#endif
+
+	return pax_flags;
+}
+
+static unsigned long pax_parse_xattr_pax_hardmode(unsigned long pax_flags_hardmode)
+{
+	unsigned long pax_flags = 0UL;
+
+#ifdef CONFIG_PAX_PAGEEXEC
+	if (!(pax_flags_hardmode & MF_PAX_PAGEEXEC))
+		pax_flags |= MF_PAX_PAGEEXEC;
+#endif
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (!(pax_flags_hardmode & MF_PAX_SEGMEXEC))
+		pax_flags |= MF_PAX_SEGMEXEC;
+#endif
+
+#if defined(CONFIG_PAX_PAGEEXEC) && defined(CONFIG_PAX_SEGMEXEC)
+	if ((pax_flags & (MF_PAX_PAGEEXEC | MF_PAX_SEGMEXEC)) == (MF_PAX_PAGEEXEC | MF_PAX_SEGMEXEC)) {
+		if ((__supported_pte_mask & _PAGE_NX))
+			pax_flags &= ~MF_PAX_SEGMEXEC;
+		else
+			pax_flags &= ~MF_PAX_PAGEEXEC;
+	}
+#endif
+
+#ifdef CONFIG_PAX_EMUTRAMP
+	if (!(pax_flags_hardmode & MF_PAX_EMUTRAMP))
+		pax_flags |= MF_PAX_EMUTRAMP;
+#endif
+
+#ifdef CONFIG_PAX_MPROTECT
+	if (!(pax_flags_hardmode & MF_PAX_MPROTECT))
+		pax_flags |= MF_PAX_MPROTECT;
+#endif
+
+#if defined(CONFIG_PAX_RANDMMAP) || defined(CONFIG_PAX_RANDUSTACK)
+	if (randomize_va_space && !(pax_flags_hardmode & MF_PAX_RANDMMAP))
+		pax_flags |= MF_PAX_RANDMMAP;
+#endif
+
+	return pax_flags;
+}
+#endif
+
+static unsigned long pax_parse_xattr_pax(struct file * const file)
+{
+
+#ifdef CONFIG_PAX_XATTR_PAX_FLAGS
+	ssize_t xattr_size, i;
+	unsigned char xattr_value[5];
+	unsigned long pax_flags_hardmode = 0UL, pax_flags_softmode = 0UL;
+
+	xattr_size = vfs_getxattr(file->f_path.dentry, XATTR_NAME_PAX_FLAGS, xattr_value, sizeof xattr_value);
+	if (xattr_size <= 0)
+		return ~0UL;
+
+	for (i = 0; i < xattr_size; i++)
+		switch (xattr_value[i]) {
+		default:
+			return ~0UL;
+
+#define parse_flag(option1, option2, flag)			\
+		case option1:					\
+			pax_flags_hardmode |= MF_PAX_##flag;	\
+			break;					\
+		case option2:					\
+			pax_flags_softmode |= MF_PAX_##flag;	\
+			break;
+
+		parse_flag('p', 'P', PAGEEXEC);
+		parse_flag('e', 'E', EMUTRAMP);
+		parse_flag('m', 'M', MPROTECT);
+		parse_flag('r', 'R', RANDMMAP);
+		parse_flag('s', 'S', SEGMEXEC);
+
+#undef parse_flag
+		}
+
+	if (pax_flags_hardmode & pax_flags_softmode)
+		return ~0UL;
+
+#ifdef CONFIG_PAX_SOFTMODE
+	if (pax_softmode)
+		return pax_parse_xattr_pax_softmode(pax_flags_softmode);
+	else
+#endif
+
+		return pax_parse_xattr_pax_hardmode(pax_flags_hardmode);
+#else
+	return ~0UL;
+#endif
+
+}
+
+static long pax_parse_pax_flags(const struct elfhdr * const elf_ex, const struct elf_phdr * const elf_phdata, struct file * const file)
+{
+	unsigned long pax_flags, pt_pax_flags, xattr_pax_flags;
+
+	pax_flags = pax_parse_ei_pax(elf_ex);
+	pt_pax_flags = pax_parse_pt_pax(elf_ex, elf_phdata);
+	xattr_pax_flags = pax_parse_xattr_pax(file);
+
+	if (pt_pax_flags == ~0UL)
+		pt_pax_flags = xattr_pax_flags;
+	else if (xattr_pax_flags == ~0UL)
+		xattr_pax_flags = pt_pax_flags;
+	if (pt_pax_flags != xattr_pax_flags)
+		return -EINVAL;
+	if (pt_pax_flags != ~0UL)
+		pax_flags = pt_pax_flags;
+
+	if (0 > pax_check_flags(&pax_flags))
+		return -EINVAL;
+
+	current->mm->pax_flags = pax_flags;
+	return 0;
+}
+#endif
+
 /*
  * These are the functions used to load ELF style executables and shared
  * libraries.  There is no binary dependent code anywhere else.
@@ -544,6 +913,11 @@ static unsigned long randomize_stack_top
 {
 	unsigned int random_variable = 0;
 
+#ifdef CONFIG_PAX_RANDUSTACK
+	if (randomize_va_space)
+		return stack_top - current->mm->delta_stack;
+#endif
+
 	if ((current->flags & PF_RANDOMIZE) &&
 		!(current->personality & ADDR_NO_RANDOMIZE)) {
 		random_variable = get_random_int() & STACK_RND_MASK;
@@ -562,7 +936,7 @@ static int load_elf_binary(struct linux_
  	unsigned long load_addr = 0, load_bias = 0;
 	int load_addr_set = 0;
 	char * elf_interpreter = NULL;
-	unsigned long error;
+	unsigned long error = 0;
 	struct elf_phdr *elf_ppnt, *elf_phdata;
 	unsigned long elf_bss, elf_brk;
 	int retval, i;
@@ -572,11 +946,11 @@ static int load_elf_binary(struct linux_
 	unsigned long start_code, end_code, start_data, end_data;
 	unsigned long reloc_func_desc __maybe_unused = 0;
 	int executable_stack = EXSTACK_DEFAULT;
-	unsigned long def_flags = 0;
 	struct {
 		struct elfhdr elf_ex;
 		struct elfhdr interp_elf_ex;
 	} *loc;
+	unsigned long pax_task_size = TASK_SIZE;
 
 	loc = kmalloc(sizeof(*loc), GFP_KERNEL);
 	if (!loc) {
@@ -713,11 +1087,81 @@ static int load_elf_binary(struct linux_
 
 	/* OK, This is the point of no return */
 	current->flags &= ~PF_FORKNOEXEC;
-	current->mm->def_flags = def_flags;
+
+#if defined(CONFIG_PAX_NOEXEC) || defined(CONFIG_PAX_ASLR)
+	current->mm->pax_flags = 0UL;
+#endif
+
+#ifdef CONFIG_PAX_DLRESOLVE
+	current->mm->call_dl_resolve = 0UL;
+#endif
+
+#if defined(CONFIG_PPC32) && defined(CONFIG_PAX_EMUSIGRT)
+	current->mm->call_syscall = 0UL;
+#endif
+
+#ifdef CONFIG_PAX_ASLR
+	current->mm->delta_mmap = 0UL;
+	current->mm->delta_stack = 0UL;
+#endif
+
+	current->mm->def_flags = 0;
+
+#if defined(CONFIG_PAX_EI_PAX) || defined(CONFIG_PAX_PT_PAX_FLAGS) || defined(CONFIG_PAX_XATTR_PAX_FLAGS)
+	if (0 > pax_parse_pax_flags(&loc->elf_ex, elf_phdata, bprm->file)) {
+		send_sig(SIGKILL, current, 0);
+		goto out_free_dentry;
+	}
+#endif
+
+#ifdef CONFIG_PAX_HAVE_ACL_FLAGS
+	pax_set_initial_flags(bprm);
+#elif defined(CONFIG_PAX_HOOK_ACL_FLAGS)
+	if (pax_set_initial_flags_func)
+		(pax_set_initial_flags_func)(bprm);
+#endif
+
+#ifdef CONFIG_ARCH_TRACK_EXEC_LIMIT
+	if ((current->mm->pax_flags & MF_PAX_PAGEEXEC) && !(__supported_pte_mask & _PAGE_NX)) {
+		current->mm->context.user_cs_limit = PAGE_SIZE;
+		current->mm->def_flags |= VM_PAGEEXEC;
+	}
+#endif
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (current->mm->pax_flags & MF_PAX_SEGMEXEC) {
+		current->mm->context.user_cs_base = SEGMEXEC_TASK_SIZE;
+		current->mm->context.user_cs_limit = TASK_SIZE-SEGMEXEC_TASK_SIZE;
+		pax_task_size = SEGMEXEC_TASK_SIZE;
+		current->mm->def_flags |= VM_NOHUGEPAGE;
+	}
+#endif
+
+#if defined(CONFIG_ARCH_TRACK_EXEC_LIMIT) || defined(CONFIG_PAX_SEGMEXEC)
+	if (current->mm->pax_flags & (MF_PAX_PAGEEXEC | MF_PAX_SEGMEXEC)) {
+		set_user_cs(current->mm->context.user_cs_base, current->mm->context.user_cs_limit, get_cpu());
+		put_cpu();
+	}
+#endif
 
 	/* Do this immediately, since STACK_TOP as used in setup_arg_pages
 	   may depend on the personality.  */
 	SET_PERSONALITY(loc->elf_ex);
+
+#ifdef CONFIG_PAX_ASLR
+	if (current->mm->pax_flags & MF_PAX_RANDMMAP) {
+		current->mm->delta_mmap = (pax_get_random_long() & ((1UL << PAX_DELTA_MMAP_LEN)-1)) << PAGE_SHIFT;
+		current->mm->delta_stack = (pax_get_random_long() & ((1UL << PAX_DELTA_STACK_LEN)-1)) << PAGE_SHIFT;
+	}
+#endif
+
+#if defined(CONFIG_PAX_PAGEEXEC) || defined(CONFIG_PAX_SEGMEXEC)
+	if (current->mm->pax_flags & (MF_PAX_PAGEEXEC | MF_PAX_SEGMEXEC)) {
+		executable_stack = EXSTACK_DISABLE_X;
+		current->personality &= ~READ_IMPLIES_EXEC;
+	} else
+#endif
+
 	if (elf_read_implies_exec(loc->elf_ex, executable_stack))
 		current->personality |= READ_IMPLIES_EXEC;
 
@@ -808,6 +1252,20 @@ static int load_elf_binary(struct linux_
 #else
 			load_bias = ELF_PAGESTART(ELF_ET_DYN_BASE - vaddr);
 #endif
+
+#ifdef CONFIG_PAX_RANDMMAP
+			/* PaX: randomize base address at the default exe base if requested */
+			if ((current->mm->pax_flags & MF_PAX_RANDMMAP) && elf_interpreter) {
+#ifdef CONFIG_SPARC64
+				load_bias = (pax_get_random_long() & ((1UL << PAX_DELTA_MMAP_LEN) - 1)) << (PAGE_SHIFT+1);
+#else
+				load_bias = (pax_get_random_long() & ((1UL << PAX_DELTA_MMAP_LEN) - 1)) << PAGE_SHIFT;
+#endif
+				load_bias = ELF_PAGESTART(PAX_ELF_ET_DYN_BASE - vaddr + load_bias);
+				elf_flags |= MAP_FIXED;
+			}
+#endif
+
 		}
 
 		error = elf_map(bprm->file, load_bias + vaddr, elf_ppnt,
@@ -840,9 +1298,9 @@ static int load_elf_binary(struct linux_
 		 * allowed task size. Note that p_filesz must always be
 		 * <= p_memsz so it is only necessary to check p_memsz.
 		 */
-		if (BAD_ADDR(k) || elf_ppnt->p_filesz > elf_ppnt->p_memsz ||
-		    elf_ppnt->p_memsz > TASK_SIZE ||
-		    TASK_SIZE - elf_ppnt->p_memsz < k) {
+		if (k >= pax_task_size || elf_ppnt->p_filesz > elf_ppnt->p_memsz ||
+		    elf_ppnt->p_memsz > pax_task_size ||
+		    pax_task_size - elf_ppnt->p_memsz < k) {
 			/* set_brk can never work. Avoid overflows. */
 			send_sig(SIGKILL, current, 0);
 			retval = -EINVAL;
@@ -881,10 +1339,39 @@ static int load_elf_binary(struct linux_
 		goto out_free_dentry;
 	}
 	if (likely(elf_bss != elf_brk) && unlikely(padzero(elf_bss))) {
-		send_sig(SIGSEGV, current, 0);
-		retval = -EFAULT; /* Nobody gets to see this, but.. */
-		goto out_free_dentry;
+		/*
+		 * This bss-zeroing can fail if the ELF
+		 * file specifies odd protections. So
+		 * we don't check the return value
+		 */
+	}
+
+#ifdef CONFIG_PAX_RANDMMAP
+	if (current->mm->pax_flags & MF_PAX_RANDMMAP) {
+		unsigned long start, size;
+
+		start = ELF_PAGEALIGN(elf_brk);
+		size = PAGE_SIZE + ((pax_get_random_long() & ((1UL << 22) - 1UL)) << 4);
+		down_write(&current->mm->mmap_sem);
+		retval = -ENOMEM;
+		if (!find_vma_intersection(current->mm, start, start + size + PAGE_SIZE)) {
+			unsigned long prot = PROT_NONE;
+
+			current->mm->brk_gap = PAGE_ALIGN(size) >> PAGE_SHIFT;
+//			if (current->personality & ADDR_NO_RANDOMIZE)
+//				prot = PROT_READ;
+			start = do_mmap(NULL, start, size, prot, MAP_ANONYMOUS | MAP_FIXED | MAP_PRIVATE, 0);
+			retval = IS_ERR_VALUE(start) ? start : 0;
+		}
+		up_write(&current->mm->mmap_sem);
+		if (retval == 0)
+			retval = set_brk(start + size, start + size + PAGE_SIZE);
+		if (retval < 0) {
+			send_sig(SIGKILL, current, 0);
+			goto out_free_dentry;
+		}
 	}
+#endif
 
 	if (elf_interpreter) {
 		unsigned long uninitialized_var(interp_map_addr);
@@ -1098,7 +1585,7 @@ out:
  * Decide what to dump of a segment, part, all or none.
  */
 static unsigned long vma_dump_size(struct vm_area_struct *vma,
-				   unsigned long mm_flags)
+				   unsigned long mm_flags, long signr)
 {
 #define FILTER(type)	(mm_flags & (1UL << MMF_DUMP_##type))
 
@@ -1132,7 +1619,7 @@ static unsigned long vma_dump_size(struc
 	if (vma->vm_file == NULL)
 		return 0;
 
-	if (FILTER(MAPPED_PRIVATE))
+	if (signr == SIGKILL || FILTER(MAPPED_PRIVATE))
 		goto whole;
 
 	/*
@@ -1354,9 +1841,9 @@ static void fill_auxv_note(struct memelf
 {
 	elf_addr_t *auxv = (elf_addr_t *) mm->saved_auxv;
 	int i = 0;
-	do
+	do {
 		i += 2;
-	while (auxv[i - 2] != AT_NULL);
+	} while (auxv[i - 2] != AT_NULL);
 	fill_note(note, "CORE", NT_AUXV, i * sizeof(elf_addr_t), auxv);
 }
 
@@ -1862,14 +2349,14 @@ static void fill_extnum_info(struct elfh
 }
 
 static size_t elf_core_vma_data_size(struct vm_area_struct *gate_vma,
-				     unsigned long mm_flags)
+				     struct coredump_params *cprm)
 {
 	struct vm_area_struct *vma;
 	size_t size = 0;
 
 	for (vma = first_vma(current, gate_vma); vma != NULL;
 	     vma = next_vma(vma, gate_vma))
-		size += vma_dump_size(vma, mm_flags);
+		size += vma_dump_size(vma, cprm->mm_flags, cprm->signr);
 	return size;
 }
 
@@ -1963,7 +2450,7 @@ static int elf_core_dump(struct coredump
 
 	dataoff = offset = roundup(offset, ELF_EXEC_PAGESIZE);
 
-	offset += elf_core_vma_data_size(gate_vma, cprm->mm_flags);
+	offset += elf_core_vma_data_size(gate_vma, cprm);
 	offset += elf_core_extra_data_size();
 	e_shoff = offset;
 
@@ -1994,7 +2481,7 @@ static int elf_core_dump(struct coredump
 		phdr.p_offset = offset;
 		phdr.p_vaddr = vma->vm_start;
 		phdr.p_paddr = 0;
-		phdr.p_filesz = vma_dump_size(vma, cprm->mm_flags);
+		phdr.p_filesz = vma_dump_size(vma, cprm->mm_flags, cprm->signr);
 		phdr.p_memsz = vma->vm_end - vma->vm_start;
 		offset += phdr.p_filesz;
 		phdr.p_flags = vma->vm_flags & VM_READ ? PF_R : 0;
@@ -2029,7 +2516,7 @@ static int elf_core_dump(struct coredump
 		unsigned long addr;
 		unsigned long end;
 
-		end = vma->vm_start + vma_dump_size(vma, cprm->mm_flags);
+		end = vma->vm_start + vma_dump_size(vma, cprm->mm_flags, cprm->signr);
 
 		for (addr = vma->vm_start; addr < end; addr += PAGE_SIZE) {
 			struct page *page;
@@ -2075,6 +2562,96 @@ out:
 
 #endif		/* CONFIG_ELF_CORE */
 
+#ifdef CONFIG_PAX_MPROTECT
+/* PaX: non-PIC ELF libraries need relocations on their executable segments
+ * therefore we'll grant them VM_MAYWRITE once during their life. Similarly
+ * we'll remove VM_MAYWRITE for good on RELRO segments.
+ *
+ * The checks favour ld-linux.so behaviour which operates on a per ELF segment
+ * basis because we want to allow the common case and not the special ones.
+ */
+static void elf_handle_mprotect(struct vm_area_struct *vma, unsigned long newflags)
+{
+	struct elfhdr elf_h;
+	struct elf_phdr elf_p;
+	unsigned long i;
+	unsigned long oldflags;
+	bool is_textrel_rw, is_textrel_rx, is_relro;
+
+	if (!(vma->vm_mm->pax_flags & MF_PAX_MPROTECT))
+		return;
+
+	oldflags = vma->vm_flags & (VM_MAYEXEC | VM_MAYWRITE | VM_MAYREAD | VM_EXEC | VM_WRITE | VM_READ);
+	newflags &= VM_MAYEXEC | VM_MAYWRITE | VM_MAYREAD | VM_EXEC | VM_WRITE | VM_READ;
+
+#ifdef CONFIG_PAX_ELFRELOCS
+	/* possible TEXTREL */
+	is_textrel_rw = vma->vm_file && !vma->anon_vma && oldflags == (VM_MAYEXEC | VM_MAYREAD | VM_EXEC | VM_READ) && newflags == (VM_WRITE | VM_READ);
+	is_textrel_rx = vma->vm_file && vma->anon_vma && oldflags == (VM_MAYEXEC | VM_MAYWRITE | VM_MAYREAD | VM_WRITE | VM_READ) && newflags == (VM_EXEC | VM_READ);
+#else
+	is_textrel_rw = false;
+	is_textrel_rx = false;
+#endif
+
+	/* possible RELRO */
+	is_relro = vma->vm_file && vma->anon_vma && oldflags == (VM_MAYWRITE | VM_MAYREAD | VM_READ) && newflags == (VM_MAYWRITE | VM_MAYREAD | VM_READ);
+
+	if (!is_textrel_rw && !is_textrel_rx && !is_relro)
+		return;
+
+	if (sizeof(elf_h) != kernel_read(vma->vm_file, 0UL, (char *)&elf_h, sizeof(elf_h)) ||
+	    memcmp(elf_h.e_ident, ELFMAG, SELFMAG) ||
+
+#ifdef CONFIG_PAX_ETEXECRELOCS
+	    ((is_textrel_rw || is_textrel_rx) && (elf_h.e_type != ET_DYN && elf_h.e_type != ET_EXEC)) ||
+#else
+	    ((is_textrel_rw || is_textrel_rx) && elf_h.e_type != ET_DYN) ||
+#endif
+
+	    (is_relro && (elf_h.e_type != ET_DYN && elf_h.e_type != ET_EXEC)) ||
+	    !elf_check_arch(&elf_h) ||
+	    elf_h.e_phentsize != sizeof(struct elf_phdr) ||
+	    elf_h.e_phnum > 65536UL / sizeof(struct elf_phdr))
+		return;
+
+	for (i = 0UL; i < elf_h.e_phnum; i++) {
+		if (sizeof(elf_p) != kernel_read(vma->vm_file, elf_h.e_phoff + i*sizeof(elf_p), (char *)&elf_p, sizeof(elf_p)))
+			return;
+		switch (elf_p.p_type) {
+		case PT_DYNAMIC:
+			if (!is_textrel_rw && !is_textrel_rx)
+				continue;
+			i = 0UL;
+			while ((i+1) * sizeof(elf_dyn) <= elf_p.p_filesz) {
+				elf_dyn dyn;
+
+				if (sizeof(dyn) != kernel_read(vma->vm_file, elf_p.p_offset + i*sizeof(dyn), (char *)&dyn, sizeof(dyn)))
+					return;
+				if (dyn.d_tag == DT_NULL)
+					return;
+				if (dyn.d_tag == DT_TEXTREL || (dyn.d_tag == DT_FLAGS && (dyn.d_un.d_val & DF_TEXTREL))) {
+					if (is_textrel_rw)
+						vma->vm_flags |= VM_MAYWRITE;
+					else
+						/* PaX: disallow write access after relocs are done, hopefully noone else needs it... */
+						vma->vm_flags &= ~VM_MAYWRITE;
+					return;
+				}
+				i++;
+			}
+			return;
+
+		case PT_GNU_RELRO:
+			if (!is_relro)
+				continue;
+			if ((elf_p.p_offset >> PAGE_SHIFT) == vma->vm_pgoff && ELF_PAGEALIGN(elf_p.p_memsz) == vma->vm_end - vma->vm_start)
+				vma->vm_flags &= ~VM_MAYWRITE;
+			return;
+		}
+	}
+}
+#endif
+
 static int __init init_elf_binfmt(void)
 {
 	return register_binfmt(&elf_format);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/binfmt_flat.c linux-3.3.8-pax/fs/binfmt_flat.c
--- linux-3.3.8/fs/binfmt_flat.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/fs/binfmt_flat.c	2012-03-19 10:43:44.188034640 +0100
@@ -567,7 +567,9 @@ static int load_flat_file(struct linux_b
 				realdatastart = (unsigned long) -ENOMEM;
 			printk("Unable to allocate RAM for process data, errno %d\n",
 					(int)-realdatastart);
+			down_write(&current->mm->mmap_sem);
 			do_munmap(current->mm, textpos, text_len);
+			up_write(&current->mm->mmap_sem);
 			ret = realdatastart;
 			goto err;
 		}
@@ -591,8 +593,10 @@ static int load_flat_file(struct linux_b
 		}
 		if (IS_ERR_VALUE(result)) {
 			printk("Unable to read data+bss, errno %d\n", (int)-result);
+			down_write(&current->mm->mmap_sem);
 			do_munmap(current->mm, textpos, text_len);
 			do_munmap(current->mm, realdatastart, len);
+			up_write(&current->mm->mmap_sem);
 			ret = result;
 			goto err;
 		}
@@ -661,8 +665,10 @@ static int load_flat_file(struct linux_b
 		}
 		if (IS_ERR_VALUE(result)) {
 			printk("Unable to read code+data+bss, errno %d\n",(int)-result);
+			down_write(&current->mm->mmap_sem);
 			do_munmap(current->mm, textpos, text_len + data_len + extra +
 				MAX_SHARED_LIBS * sizeof(unsigned long));
+			up_write(&current->mm->mmap_sem);
 			ret = result;
 			goto err;
 		}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/bio.c linux-3.3.8-pax/fs/bio.c
--- linux-3.3.8/fs/bio.c	2012-06-11 19:36:40.464445831 +0200
+++ linux-3.3.8-pax/fs/bio.c	2012-06-11 19:36:46.452446143 +0200
@@ -838,7 +838,7 @@ struct bio *bio_copy_user_iov(struct req
 		/*
 		 * Overflow, abort
 		 */
-		if (end < start)
+		if (end < start || end - start > INT_MAX - nr_pages)
 			return ERR_PTR(-EINVAL);
 
 		nr_pages += end - start;
@@ -1234,7 +1234,7 @@ static void bio_copy_kern_endio(struct b
 	const int read = bio_data_dir(bio) == READ;
 	struct bio_map_data *bmd = bio->bi_private;
 	int i;
-	char *p = bmd->sgvecs[0].iov_base;
+	char *p = (char __force_kernel *)bmd->sgvecs[0].iov_base;
 
 	__bio_for_each_segment(bvec, bio, i, 0) {
 		char *addr = page_address(bvec->bv_page);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/block_dev.c linux-3.3.8-pax/fs/block_dev.c
--- linux-3.3.8/fs/block_dev.c	2012-06-11 19:36:40.468445830 +0200
+++ linux-3.3.8-pax/fs/block_dev.c	2012-06-11 19:36:46.456446145 +0200
@@ -703,7 +703,7 @@ static bool bd_may_claim(struct block_de
 	else if (bdev->bd_contains == bdev)
 		return true;  	 /* is a whole device which isn't held */
 
-	else if (whole->bd_holder == bd_may_claim)
+	else if (whole->bd_holder == (void *)bd_may_claim)
 		return true; 	 /* is a partition of a device that is being partitioned */
 	else if (whole->bd_holder != NULL)
 		return false;	 /* is a partition of a held device */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/btrfs/check-integrity.c linux-3.3.8-pax/fs/btrfs/check-integrity.c
--- linux-3.3.8/fs/btrfs/check-integrity.c	2012-03-19 10:39:09.632049308 +0100
+++ linux-3.3.8-pax/fs/btrfs/check-integrity.c	2012-03-19 10:43:44.196034637 +0100
@@ -157,7 +157,7 @@ struct btrfsic_block {
 	union {
 		bio_end_io_t *bio;
 		bh_end_io_t *bh;
-	} orig_bio_bh_end_io;
+	} __no_const orig_bio_bh_end_io;
 	int submit_bio_bh_rw;
 	u64 flush_gen; /* only valid if !never_written */
 };
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/btrfs/ctree.c linux-3.3.8-pax/fs/btrfs/ctree.c
--- linux-3.3.8/fs/btrfs/ctree.c	2012-03-19 10:39:09.636049296 +0100
+++ linux-3.3.8-pax/fs/btrfs/ctree.c	2012-03-19 10:43:44.200034638 +0100
@@ -488,9 +488,12 @@ static noinline int __btrfs_cow_block(st
 		free_extent_buffer(buf);
 		add_root_to_dirty_list(root);
 	} else {
-		if (root->root_key.objectid == BTRFS_TREE_RELOC_OBJECTID)
-			parent_start = parent->start;
-		else
+		if (root->root_key.objectid == BTRFS_TREE_RELOC_OBJECTID) {
+			if (parent)
+				parent_start = parent->start;
+			else
+				parent_start = 0;
+		} else
 			parent_start = 0;
 
 		WARN_ON(trans->transid != btrfs_header_generation(parent));
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/btrfs/ioctl.c linux-3.3.8-pax/fs/btrfs/ioctl.c
--- linux-3.3.8/fs/btrfs/ioctl.c	2012-04-23 14:06:59.543285808 +0200
+++ linux-3.3.8-pax/fs/btrfs/ioctl.c	2012-04-23 14:07:11.739285157 +0200
@@ -2815,7 +2815,7 @@ long btrfs_ioctl_space_info(struct btrfs
 		up_read(&info->groups_sem);
 	}
 
-	user_dest = (struct btrfs_ioctl_space_info *)
+	user_dest = (struct btrfs_ioctl_space_info __user *)
 		(arg + sizeof(struct btrfs_ioctl_space_args));
 
 	if (copy_to_user(user_dest, dest_orig, alloc_size))
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/btrfs/relocation.c linux-3.3.8-pax/fs/btrfs/relocation.c
--- linux-3.3.8/fs/btrfs/relocation.c	2012-03-19 10:39:09.672049292 +0100
+++ linux-3.3.8-pax/fs/btrfs/relocation.c	2012-03-19 10:43:44.204034640 +0100
@@ -1244,7 +1244,7 @@ static int __update_reloc_root(struct bt
 	}
 	spin_unlock(&rc->reloc_root_tree.lock);
 
-	BUG_ON((struct btrfs_root *)node->data != root);
+	BUG_ON(!node || (struct btrfs_root *)node->data != root);
 
 	if (!del) {
 		spin_lock(&rc->reloc_root_tree.lock);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/cachefiles/bind.c linux-3.3.8-pax/fs/cachefiles/bind.c
--- linux-3.3.8/fs/cachefiles/bind.c	2011-10-24 12:48:39.203091082 +0200
+++ linux-3.3.8-pax/fs/cachefiles/bind.c	2012-03-19 10:43:44.204034640 +0100
@@ -39,13 +39,11 @@ int cachefiles_daemon_bind(struct cachef
 	       args);
 
 	/* start by checking things over */
-	ASSERT(cache->fstop_percent >= 0 &&
-	       cache->fstop_percent < cache->fcull_percent &&
+	ASSERT(cache->fstop_percent < cache->fcull_percent &&
 	       cache->fcull_percent < cache->frun_percent &&
 	       cache->frun_percent  < 100);
 
-	ASSERT(cache->bstop_percent >= 0 &&
-	       cache->bstop_percent < cache->bcull_percent &&
+	ASSERT(cache->bstop_percent < cache->bcull_percent &&
 	       cache->bcull_percent < cache->brun_percent &&
 	       cache->brun_percent  < 100);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/cachefiles/daemon.c linux-3.3.8-pax/fs/cachefiles/daemon.c
--- linux-3.3.8/fs/cachefiles/daemon.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/fs/cachefiles/daemon.c	2012-03-19 10:43:44.208034642 +0100
@@ -196,7 +196,7 @@ static ssize_t cachefiles_daemon_read(st
 	if (n > buflen)
 		return -EMSGSIZE;
 
-	if (copy_to_user(_buffer, buffer, n) != 0)
+	if (n > sizeof(buffer) || copy_to_user(_buffer, buffer, n) != 0)
 		return -EFAULT;
 
 	return n;
@@ -222,7 +222,7 @@ static ssize_t cachefiles_daemon_write(s
 	if (test_bit(CACHEFILES_DEAD, &cache->flags))
 		return -EIO;
 
-	if (datalen < 0 || datalen > PAGE_SIZE - 1)
+	if (datalen > PAGE_SIZE - 1)
 		return -EOPNOTSUPP;
 
 	/* drag the command string into the kernel so we can parse it */
@@ -386,7 +386,7 @@ static int cachefiles_daemon_fstop(struc
 	if (args[0] != '%' || args[1] != '\0')
 		return -EINVAL;
 
-	if (fstop < 0 || fstop >= cache->fcull_percent)
+	if (fstop >= cache->fcull_percent)
 		return cachefiles_daemon_range_error(cache, args);
 
 	cache->fstop_percent = fstop;
@@ -458,7 +458,7 @@ static int cachefiles_daemon_bstop(struc
 	if (args[0] != '%' || args[1] != '\0')
 		return -EINVAL;
 
-	if (bstop < 0 || bstop >= cache->bcull_percent)
+	if (bstop >= cache->bcull_percent)
 		return cachefiles_daemon_range_error(cache, args);
 
 	cache->bstop_percent = bstop;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/cachefiles/internal.h linux-3.3.8-pax/fs/cachefiles/internal.h
--- linux-3.3.8/fs/cachefiles/internal.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/fs/cachefiles/internal.h	2012-03-19 10:43:44.208034642 +0100
@@ -57,7 +57,7 @@ struct cachefiles_cache {
 	wait_queue_head_t		daemon_pollwq;	/* poll waitqueue for daemon */
 	struct rb_root			active_nodes;	/* active nodes (can't be culled) */
 	rwlock_t			active_lock;	/* lock for active_nodes */
-	atomic_t			gravecounter;	/* graveyard uniquifier */
+	atomic_unchecked_t		gravecounter;	/* graveyard uniquifier */
 	unsigned			frun_percent;	/* when to stop culling (% files) */
 	unsigned			fcull_percent;	/* when to start culling (% files) */
 	unsigned			fstop_percent;	/* when to stop allocating (% files) */
@@ -169,19 +169,19 @@ extern int cachefiles_check_in_use(struc
  * proc.c
  */
 #ifdef CONFIG_CACHEFILES_HISTOGRAM
-extern atomic_t cachefiles_lookup_histogram[HZ];
-extern atomic_t cachefiles_mkdir_histogram[HZ];
-extern atomic_t cachefiles_create_histogram[HZ];
+extern atomic_unchecked_t cachefiles_lookup_histogram[HZ];
+extern atomic_unchecked_t cachefiles_mkdir_histogram[HZ];
+extern atomic_unchecked_t cachefiles_create_histogram[HZ];
 
 extern int __init cachefiles_proc_init(void);
 extern void cachefiles_proc_cleanup(void);
 static inline
-void cachefiles_hist(atomic_t histogram[], unsigned long start_jif)
+void cachefiles_hist(atomic_unchecked_t histogram[], unsigned long start_jif)
 {
 	unsigned long jif = jiffies - start_jif;
 	if (jif >= HZ)
 		jif = HZ - 1;
-	atomic_inc(&histogram[jif]);
+	atomic_inc_unchecked(&histogram[jif]);
 }
 
 #else
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/cachefiles/namei.c linux-3.3.8-pax/fs/cachefiles/namei.c
--- linux-3.3.8/fs/cachefiles/namei.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/fs/cachefiles/namei.c	2012-03-19 10:43:44.208034642 +0100
@@ -318,7 +318,7 @@ try_again:
 	/* first step is to make up a grave dentry in the graveyard */
 	sprintf(nbuffer, "%08x%08x",
 		(uint32_t) get_seconds(),
-		(uint32_t) atomic_inc_return(&cache->gravecounter));
+		(uint32_t) atomic_inc_return_unchecked(&cache->gravecounter));
 
 	/* do the multiway lock magic */
 	trap = lock_rename(cache->graveyard, dir);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/cachefiles/proc.c linux-3.3.8-pax/fs/cachefiles/proc.c
--- linux-3.3.8/fs/cachefiles/proc.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/fs/cachefiles/proc.c	2012-03-19 10:43:44.208034642 +0100
@@ -14,9 +14,9 @@
 #include <linux/seq_file.h>
 #include "internal.h"
 
-atomic_t cachefiles_lookup_histogram[HZ];
-atomic_t cachefiles_mkdir_histogram[HZ];
-atomic_t cachefiles_create_histogram[HZ];
+atomic_unchecked_t cachefiles_lookup_histogram[HZ];
+atomic_unchecked_t cachefiles_mkdir_histogram[HZ];
+atomic_unchecked_t cachefiles_create_histogram[HZ];
 
 /*
  * display the latency histogram
@@ -35,9 +35,9 @@ static int cachefiles_histogram_show(str
 		return 0;
 	default:
 		index = (unsigned long) v - 3;
-		x = atomic_read(&cachefiles_lookup_histogram[index]);
-		y = atomic_read(&cachefiles_mkdir_histogram[index]);
-		z = atomic_read(&cachefiles_create_histogram[index]);
+		x = atomic_read_unchecked(&cachefiles_lookup_histogram[index]);
+		y = atomic_read_unchecked(&cachefiles_mkdir_histogram[index]);
+		z = atomic_read_unchecked(&cachefiles_create_histogram[index]);
 		if (x == 0 && y == 0 && z == 0)
 			return 0;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/cachefiles/rdwr.c linux-3.3.8-pax/fs/cachefiles/rdwr.c
--- linux-3.3.8/fs/cachefiles/rdwr.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/fs/cachefiles/rdwr.c	2012-03-19 10:43:44.212034642 +0100
@@ -945,7 +945,7 @@ int cachefiles_write_page(struct fscache
 			old_fs = get_fs();
 			set_fs(KERNEL_DS);
 			ret = file->f_op->write(
-				file, (const void __user *) data, len, &pos);
+				file, (const void __force_user *) data, len, &pos);
 			set_fs(old_fs);
 			kunmap(page);
 			if (ret != len)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/ceph/dir.c linux-3.3.8-pax/fs/ceph/dir.c
--- linux-3.3.8/fs/ceph/dir.c	2012-03-19 10:39:09.692049302 +0100
+++ linux-3.3.8-pax/fs/ceph/dir.c	2012-03-19 10:43:44.212034642 +0100
@@ -244,7 +244,7 @@ static int ceph_readdir(struct file *fil
 	struct ceph_fs_client *fsc = ceph_inode_to_client(inode);
 	struct ceph_mds_client *mdsc = fsc->mdsc;
 	unsigned frag = fpos_frag(filp->f_pos);
-	int off = fpos_off(filp->f_pos);
+	unsigned int off = fpos_off(filp->f_pos);
 	int err;
 	u32 ftype;
 	struct ceph_mds_reply_info_parsed *rinfo;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/cifs/cifs_debug.c linux-3.3.8-pax/fs/cifs/cifs_debug.c
--- linux-3.3.8/fs/cifs/cifs_debug.c	2012-03-19 10:39:09.720049296 +0100
+++ linux-3.3.8-pax/fs/cifs/cifs_debug.c	2012-03-19 10:43:44.212034642 +0100
@@ -265,8 +265,8 @@ static ssize_t cifs_stats_proc_write(str
 
 	if (c == '1' || c == 'y' || c == 'Y' || c == '0') {
 #ifdef CONFIG_CIFS_STATS2
-		atomic_set(&totBufAllocCount, 0);
-		atomic_set(&totSmBufAllocCount, 0);
+		atomic_set_unchecked(&totBufAllocCount, 0);
+		atomic_set_unchecked(&totSmBufAllocCount, 0);
 #endif /* CONFIG_CIFS_STATS2 */
 		spin_lock(&cifs_tcp_ses_lock);
 		list_for_each(tmp1, &cifs_tcp_ses_list) {
@@ -279,25 +279,25 @@ static ssize_t cifs_stats_proc_write(str
 					tcon = list_entry(tmp3,
 							  struct cifs_tcon,
 							  tcon_list);
-					atomic_set(&tcon->num_smbs_sent, 0);
-					atomic_set(&tcon->num_writes, 0);
-					atomic_set(&tcon->num_reads, 0);
-					atomic_set(&tcon->num_oplock_brks, 0);
-					atomic_set(&tcon->num_opens, 0);
-					atomic_set(&tcon->num_posixopens, 0);
-					atomic_set(&tcon->num_posixmkdirs, 0);
-					atomic_set(&tcon->num_closes, 0);
-					atomic_set(&tcon->num_deletes, 0);
-					atomic_set(&tcon->num_mkdirs, 0);
-					atomic_set(&tcon->num_rmdirs, 0);
-					atomic_set(&tcon->num_renames, 0);
-					atomic_set(&tcon->num_t2renames, 0);
-					atomic_set(&tcon->num_ffirst, 0);
-					atomic_set(&tcon->num_fnext, 0);
-					atomic_set(&tcon->num_fclose, 0);
-					atomic_set(&tcon->num_hardlinks, 0);
-					atomic_set(&tcon->num_symlinks, 0);
-					atomic_set(&tcon->num_locks, 0);
+					atomic_set_unchecked(&tcon->num_smbs_sent, 0);
+					atomic_set_unchecked(&tcon->num_writes, 0);
+					atomic_set_unchecked(&tcon->num_reads, 0);
+					atomic_set_unchecked(&tcon->num_oplock_brks, 0);
+					atomic_set_unchecked(&tcon->num_opens, 0);
+					atomic_set_unchecked(&tcon->num_posixopens, 0);
+					atomic_set_unchecked(&tcon->num_posixmkdirs, 0);
+					atomic_set_unchecked(&tcon->num_closes, 0);
+					atomic_set_unchecked(&tcon->num_deletes, 0);
+					atomic_set_unchecked(&tcon->num_mkdirs, 0);
+					atomic_set_unchecked(&tcon->num_rmdirs, 0);
+					atomic_set_unchecked(&tcon->num_renames, 0);
+					atomic_set_unchecked(&tcon->num_t2renames, 0);
+					atomic_set_unchecked(&tcon->num_ffirst, 0);
+					atomic_set_unchecked(&tcon->num_fnext, 0);
+					atomic_set_unchecked(&tcon->num_fclose, 0);
+					atomic_set_unchecked(&tcon->num_hardlinks, 0);
+					atomic_set_unchecked(&tcon->num_symlinks, 0);
+					atomic_set_unchecked(&tcon->num_locks, 0);
 				}
 			}
 		}
@@ -327,8 +327,8 @@ static int cifs_stats_proc_show(struct s
 			smBufAllocCount.counter, cifs_min_small);
 #ifdef CONFIG_CIFS_STATS2
 	seq_printf(m, "Total Large %d Small %d Allocations\n",
-				atomic_read(&totBufAllocCount),
-				atomic_read(&totSmBufAllocCount));
+				atomic_read_unchecked(&totBufAllocCount),
+				atomic_read_unchecked(&totSmBufAllocCount));
 #endif /* CONFIG_CIFS_STATS2 */
 
 	seq_printf(m, "Operations (MIDs): %d\n", atomic_read(&midCount));
@@ -357,41 +357,41 @@ static int cifs_stats_proc_show(struct s
 				if (tcon->need_reconnect)
 					seq_puts(m, "\tDISCONNECTED ");
 				seq_printf(m, "\nSMBs: %d Oplock Breaks: %d",
-					atomic_read(&tcon->num_smbs_sent),
-					atomic_read(&tcon->num_oplock_brks));
+					atomic_read_unchecked(&tcon->num_smbs_sent),
+					atomic_read_unchecked(&tcon->num_oplock_brks));
 				seq_printf(m, "\nReads:  %d Bytes: %lld",
-					atomic_read(&tcon->num_reads),
+					atomic_read_unchecked(&tcon->num_reads),
 					(long long)(tcon->bytes_read));
 				seq_printf(m, "\nWrites: %d Bytes: %lld",
-					atomic_read(&tcon->num_writes),
+					atomic_read_unchecked(&tcon->num_writes),
 					(long long)(tcon->bytes_written));
 				seq_printf(m, "\nFlushes: %d",
-					atomic_read(&tcon->num_flushes));
+					atomic_read_unchecked(&tcon->num_flushes));
 				seq_printf(m, "\nLocks: %d HardLinks: %d "
 					      "Symlinks: %d",
-					atomic_read(&tcon->num_locks),
-					atomic_read(&tcon->num_hardlinks),
-					atomic_read(&tcon->num_symlinks));
+					atomic_read_unchecked(&tcon->num_locks),
+					atomic_read_unchecked(&tcon->num_hardlinks),
+					atomic_read_unchecked(&tcon->num_symlinks));
 				seq_printf(m, "\nOpens: %d Closes: %d "
 					      "Deletes: %d",
-					atomic_read(&tcon->num_opens),
-					atomic_read(&tcon->num_closes),
-					atomic_read(&tcon->num_deletes));
+					atomic_read_unchecked(&tcon->num_opens),
+					atomic_read_unchecked(&tcon->num_closes),
+					atomic_read_unchecked(&tcon->num_deletes));
 				seq_printf(m, "\nPosix Opens: %d "
 					      "Posix Mkdirs: %d",
-					atomic_read(&tcon->num_posixopens),
-					atomic_read(&tcon->num_posixmkdirs));
+					atomic_read_unchecked(&tcon->num_posixopens),
+					atomic_read_unchecked(&tcon->num_posixmkdirs));
 				seq_printf(m, "\nMkdirs: %d Rmdirs: %d",
-					atomic_read(&tcon->num_mkdirs),
-					atomic_read(&tcon->num_rmdirs));
+					atomic_read_unchecked(&tcon->num_mkdirs),
+					atomic_read_unchecked(&tcon->num_rmdirs));
 				seq_printf(m, "\nRenames: %d T2 Renames %d",
-					atomic_read(&tcon->num_renames),
-					atomic_read(&tcon->num_t2renames));
+					atomic_read_unchecked(&tcon->num_renames),
+					atomic_read_unchecked(&tcon->num_t2renames));
 				seq_printf(m, "\nFindFirst: %d FNext %d "
 					      "FClose %d",
-					atomic_read(&tcon->num_ffirst),
-					atomic_read(&tcon->num_fnext),
-					atomic_read(&tcon->num_fclose));
+					atomic_read_unchecked(&tcon->num_ffirst),
+					atomic_read_unchecked(&tcon->num_fnext),
+					atomic_read_unchecked(&tcon->num_fclose));
 			}
 		}
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/cifs/cifsfs.c linux-3.3.8-pax/fs/cifs/cifsfs.c
--- linux-3.3.8/fs/cifs/cifsfs.c	2012-05-24 17:32:19.297142914 +0200
+++ linux-3.3.8-pax/fs/cifs/cifsfs.c	2012-05-24 17:32:27.025147073 +0200
@@ -989,7 +989,7 @@ cifs_init_request_bufs(void)
 	cifs_req_cachep = kmem_cache_create("cifs_request",
 					    CIFSMaxBufSize +
 					    MAX_CIFS_HDR_SIZE, 0,
-					    SLAB_HWCACHE_ALIGN, NULL);
+					    SLAB_HWCACHE_ALIGN | SLAB_USERCOPY, NULL);
 	if (cifs_req_cachep == NULL)
 		return -ENOMEM;
 
@@ -1016,7 +1016,7 @@ cifs_init_request_bufs(void)
 	efficient to alloc 1 per page off the slab compared to 17K (5page)
 	alloc of large cifs buffers even when page debugging is on */
 	cifs_sm_req_cachep = kmem_cache_create("cifs_small_rq",
-			MAX_CIFS_SMALL_BUFFER_SIZE, 0, SLAB_HWCACHE_ALIGN,
+			MAX_CIFS_SMALL_BUFFER_SIZE, 0, SLAB_HWCACHE_ALIGN | SLAB_USERCOPY,
 			NULL);
 	if (cifs_sm_req_cachep == NULL) {
 		mempool_destroy(cifs_req_poolp);
@@ -1101,8 +1101,8 @@ init_cifs(void)
 	atomic_set(&bufAllocCount, 0);
 	atomic_set(&smBufAllocCount, 0);
 #ifdef CONFIG_CIFS_STATS2
-	atomic_set(&totBufAllocCount, 0);
-	atomic_set(&totSmBufAllocCount, 0);
+	atomic_set_unchecked(&totBufAllocCount, 0);
+	atomic_set_unchecked(&totSmBufAllocCount, 0);
 #endif /* CONFIG_CIFS_STATS2 */
 
 	atomic_set(&midCount, 0);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/cifs/cifsglob.h linux-3.3.8-pax/fs/cifs/cifsglob.h
--- linux-3.3.8/fs/cifs/cifsglob.h	2012-04-03 22:02:50.258110015 +0200
+++ linux-3.3.8-pax/fs/cifs/cifsglob.h	2012-04-03 22:03:07.018110920 +0200
@@ -388,28 +388,28 @@ struct cifs_tcon {
 	__u16 Flags;		/* optional support bits */
 	enum statusEnum tidStatus;
 #ifdef CONFIG_CIFS_STATS
-	atomic_t num_smbs_sent;
-	atomic_t num_writes;
-	atomic_t num_reads;
-	atomic_t num_flushes;
-	atomic_t num_oplock_brks;
-	atomic_t num_opens;
-	atomic_t num_closes;
-	atomic_t num_deletes;
-	atomic_t num_mkdirs;
-	atomic_t num_posixopens;
-	atomic_t num_posixmkdirs;
-	atomic_t num_rmdirs;
-	atomic_t num_renames;
-	atomic_t num_t2renames;
-	atomic_t num_ffirst;
-	atomic_t num_fnext;
-	atomic_t num_fclose;
-	atomic_t num_hardlinks;
-	atomic_t num_symlinks;
-	atomic_t num_locks;
-	atomic_t num_acl_get;
-	atomic_t num_acl_set;
+	atomic_unchecked_t num_smbs_sent;
+	atomic_unchecked_t num_writes;
+	atomic_unchecked_t num_reads;
+	atomic_unchecked_t num_flushes;
+	atomic_unchecked_t num_oplock_brks;
+	atomic_unchecked_t num_opens;
+	atomic_unchecked_t num_closes;
+	atomic_unchecked_t num_deletes;
+	atomic_unchecked_t num_mkdirs;
+	atomic_unchecked_t num_posixopens;
+	atomic_unchecked_t num_posixmkdirs;
+	atomic_unchecked_t num_rmdirs;
+	atomic_unchecked_t num_renames;
+	atomic_unchecked_t num_t2renames;
+	atomic_unchecked_t num_ffirst;
+	atomic_unchecked_t num_fnext;
+	atomic_unchecked_t num_fclose;
+	atomic_unchecked_t num_hardlinks;
+	atomic_unchecked_t num_symlinks;
+	atomic_unchecked_t num_locks;
+	atomic_unchecked_t num_acl_get;
+	atomic_unchecked_t num_acl_set;
 #ifdef CONFIG_CIFS_STATS2
 	unsigned long long time_writes;
 	unsigned long long time_reads;
@@ -624,7 +624,7 @@ convert_delimiter(char *path, char delim
 }
 
 #ifdef CONFIG_CIFS_STATS
-#define cifs_stats_inc atomic_inc
+#define cifs_stats_inc atomic_inc_unchecked
 
 static inline void cifs_stats_bytes_written(struct cifs_tcon *tcon,
 					    unsigned int bytes)
@@ -983,8 +983,8 @@ GLOBAL_EXTERN atomic_t tconInfoReconnect
 /* Various Debug counters */
 GLOBAL_EXTERN atomic_t bufAllocCount;    /* current number allocated  */
 #ifdef CONFIG_CIFS_STATS2
-GLOBAL_EXTERN atomic_t totBufAllocCount; /* total allocated over all time */
-GLOBAL_EXTERN atomic_t totSmBufAllocCount;
+GLOBAL_EXTERN atomic_unchecked_t totBufAllocCount; /* total allocated over all time */
+GLOBAL_EXTERN atomic_unchecked_t totSmBufAllocCount;
 #endif
 GLOBAL_EXTERN atomic_t smBufAllocCount;
 GLOBAL_EXTERN atomic_t midCount;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/cifs/link.c linux-3.3.8-pax/fs/cifs/link.c
--- linux-3.3.8/fs/cifs/link.c	2012-01-08 19:48:22.771471209 +0100
+++ linux-3.3.8-pax/fs/cifs/link.c	2012-03-19 10:43:44.216034641 +0100
@@ -600,7 +600,7 @@ symlink_exit:
 
 void cifs_put_link(struct dentry *direntry, struct nameidata *nd, void *cookie)
 {
-	char *p = nd_get_link(nd);
+	const char *p = nd_get_link(nd);
 	if (!IS_ERR(p))
 		kfree(p);
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/cifs/misc.c linux-3.3.8-pax/fs/cifs/misc.c
--- linux-3.3.8/fs/cifs/misc.c	2012-01-08 19:48:22.963471199 +0100
+++ linux-3.3.8-pax/fs/cifs/misc.c	2012-03-19 10:43:44.220034641 +0100
@@ -156,7 +156,7 @@ cifs_buf_get(void)
 		memset(ret_buf, 0, sizeof(struct smb_hdr) + 3);
 		atomic_inc(&bufAllocCount);
 #ifdef CONFIG_CIFS_STATS2
-		atomic_inc(&totBufAllocCount);
+		atomic_inc_unchecked(&totBufAllocCount);
 #endif /* CONFIG_CIFS_STATS2 */
 	}
 
@@ -191,7 +191,7 @@ cifs_small_buf_get(void)
 	/*	memset(ret_buf, 0, sizeof(struct smb_hdr) + 27);*/
 		atomic_inc(&smBufAllocCount);
 #ifdef CONFIG_CIFS_STATS2
-		atomic_inc(&totSmBufAllocCount);
+		atomic_inc_unchecked(&totSmBufAllocCount);
 #endif /* CONFIG_CIFS_STATS2 */
 
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/coda/cache.c linux-3.3.8-pax/fs/coda/cache.c
--- linux-3.3.8/fs/coda/cache.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/fs/coda/cache.c	2012-03-19 10:43:44.220034641 +0100
@@ -24,7 +24,7 @@
 #include "coda_linux.h"
 #include "coda_cache.h"
 
-static atomic_t permission_epoch = ATOMIC_INIT(0);
+static atomic_unchecked_t permission_epoch = ATOMIC_INIT(0);
 
 /* replace or extend an acl cache hit */
 void coda_cache_enter(struct inode *inode, int mask)
@@ -32,7 +32,7 @@ void coda_cache_enter(struct inode *inod
 	struct coda_inode_info *cii = ITOC(inode);
 
 	spin_lock(&cii->c_lock);
-	cii->c_cached_epoch = atomic_read(&permission_epoch);
+	cii->c_cached_epoch = atomic_read_unchecked(&permission_epoch);
 	if (cii->c_uid != current_fsuid()) {
 		cii->c_uid = current_fsuid();
                 cii->c_cached_perm = mask;
@@ -46,14 +46,14 @@ void coda_cache_clear_inode(struct inode
 {
 	struct coda_inode_info *cii = ITOC(inode);
 	spin_lock(&cii->c_lock);
-	cii->c_cached_epoch = atomic_read(&permission_epoch) - 1;
+	cii->c_cached_epoch = atomic_read_unchecked(&permission_epoch) - 1;
 	spin_unlock(&cii->c_lock);
 }
 
 /* remove all acl caches */
 void coda_cache_clear_all(struct super_block *sb)
 {
-	atomic_inc(&permission_epoch);
+	atomic_inc_unchecked(&permission_epoch);
 }
 
 
@@ -66,7 +66,7 @@ int coda_cache_check(struct inode *inode
 	spin_lock(&cii->c_lock);
 	hit = (mask & cii->c_cached_perm) == mask &&
 	    cii->c_uid == current_fsuid() &&
-	    cii->c_cached_epoch == atomic_read(&permission_epoch);
+	    cii->c_cached_epoch == atomic_read_unchecked(&permission_epoch);
 	spin_unlock(&cii->c_lock);
 
 	return hit;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/compat_binfmt_elf.c linux-3.3.8-pax/fs/compat_binfmt_elf.c
--- linux-3.3.8/fs/compat_binfmt_elf.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/fs/compat_binfmt_elf.c	2012-03-19 10:43:44.220034641 +0100
@@ -30,11 +30,13 @@
 #undef	elf_phdr
 #undef	elf_shdr
 #undef	elf_note
+#undef	elf_dyn
 #undef	elf_addr_t
 #define elfhdr		elf32_hdr
 #define elf_phdr	elf32_phdr
 #define elf_shdr	elf32_shdr
 #define elf_note	elf32_note
+#define elf_dyn		Elf32_Dyn
 #define elf_addr_t	Elf32_Addr
 
 /*
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/compat.c linux-3.3.8-pax/fs/compat.c
--- linux-3.3.8/fs/compat.c	2012-03-19 10:39:09.760049295 +0100
+++ linux-3.3.8-pax/fs/compat.c	2012-03-19 10:43:44.224034641 +0100
@@ -491,7 +491,7 @@ compat_sys_io_setup(unsigned nr_reqs, u3
 
 	set_fs(KERNEL_DS);
 	/* The __user pointer cast is valid because of the set_fs() */
-	ret = sys_io_setup(nr_reqs, (aio_context_t __user *) &ctx64);
+	ret = sys_io_setup(nr_reqs, (aio_context_t __force_user *) &ctx64);
 	set_fs(oldfs);
 	/* truncating is ok because it's a user address */
 	if (!ret)
@@ -549,7 +549,7 @@ ssize_t compat_rw_copy_check_uvector(int
 		goto out;
 
 	ret = -EINVAL;
-	if (nr_segs > UIO_MAXIOV || nr_segs < 0)
+	if (nr_segs > UIO_MAXIOV)
 		goto out;
 	if (nr_segs > fast_segs) {
 		ret = -ENOMEM;
@@ -1063,7 +1063,7 @@ asmlinkage long compat_sys_getdents64(un
 		error = buf.error;
 	lastdirent = buf.previous;
 	if (lastdirent) {
-		typeof(lastdirent->d_off) d_off = file->f_pos;
+		typeof(((struct linux_dirent64 *)0)->d_off) d_off = file->f_pos;
 		if (__put_user_unaligned(d_off, &lastdirent->d_off))
 			error = -EFAULT;
 		else
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/compat_ioctl.c linux-3.3.8-pax/fs/compat_ioctl.c
--- linux-3.3.8/fs/compat_ioctl.c	2012-03-19 10:39:09.764049295 +0100
+++ linux-3.3.8-pax/fs/compat_ioctl.c	2012-03-19 10:43:44.224034641 +0100
@@ -211,6 +211,8 @@ static int do_video_set_spu_palette(unsi
 
 	err  = get_user(palp, &up->palette);
 	err |= get_user(length, &up->length);
+	if (err)
+		return -EFAULT;
 
 	up_native = compat_alloc_user_space(sizeof(struct video_spu_palette));
 	err  = put_user(compat_ptr(palp), &up_native->palette);
@@ -622,7 +624,7 @@ static int serial_struct_ioctl(unsigned
 			return -EFAULT;
                 if (__get_user(udata, &ss32->iomem_base))
 			return -EFAULT;
-                ss.iomem_base = compat_ptr(udata);
+                ss.iomem_base = (unsigned char __force_kernel *)compat_ptr(udata);
                 if (__get_user(ss.iomem_reg_shift, &ss32->iomem_reg_shift) ||
 		    __get_user(ss.port_high, &ss32->port_high))
 			return -EFAULT;
@@ -797,7 +799,7 @@ static int compat_ioctl_preallocate(stru
 	    copy_in_user(&p->l_len,	&p32->l_len,	sizeof(s64)) ||
 	    copy_in_user(&p->l_sysid,	&p32->l_sysid,	sizeof(s32)) ||
 	    copy_in_user(&p->l_pid,	&p32->l_pid,	sizeof(u32)) ||
-	    copy_in_user(&p->l_pad,	&p32->l_pad,	4*sizeof(u32)))
+	    copy_in_user(p->l_pad,	&p32->l_pad,	4*sizeof(u32)))
 		return -EFAULT;
 
 	return ioctl_preallocate(file, p);
@@ -1611,8 +1613,8 @@ asmlinkage long compat_sys_ioctl(unsigne
 static int __init init_sys32_ioctl_cmp(const void *p, const void *q)
 {
 	unsigned int a, b;
-	a = *(unsigned int *)p;
-	b = *(unsigned int *)q;
+	a = *(const unsigned int *)p;
+	b = *(const unsigned int *)q;
 	if (a > b)
 		return 1;
 	if (a < b)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/configfs/dir.c linux-3.3.8-pax/fs/configfs/dir.c
--- linux-3.3.8/fs/configfs/dir.c	2012-03-19 10:39:09.764049295 +0100
+++ linux-3.3.8-pax/fs/configfs/dir.c	2012-03-19 10:43:44.224034641 +0100
@@ -1575,7 +1575,8 @@ static int configfs_readdir(struct file
 			}
 			for (p=q->next; p!= &parent_sd->s_children; p=p->next) {
 				struct configfs_dirent *next;
-				const char * name;
+				const unsigned char * name;
+				char d_name[sizeof(next->s_dentry->d_iname)];
 				int len;
 				struct inode *inode = NULL;
 
@@ -1585,7 +1586,12 @@ static int configfs_readdir(struct file
 					continue;
 
 				name = configfs_get_name(next);
-				len = strlen(name);
+				if (next->s_dentry && name == next->s_dentry->d_iname) {
+					len =  next->s_dentry->d_name.len;
+					memcpy(d_name, name, len);
+					name = d_name;
+				} else
+					len = strlen(name);
 
 				/*
 				 * We'll have a dentry and an inode for
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/dcache.c linux-3.3.8-pax/fs/dcache.c
--- linux-3.3.8/fs/dcache.c	2012-04-03 22:02:50.266110017 +0200
+++ linux-3.3.8-pax/fs/dcache.c	2012-04-03 22:03:07.026110930 +0200
@@ -3067,7 +3067,7 @@ void __init vfs_caches_init(unsigned lon
 	mempages -= reserve;
 
 	names_cachep = kmem_cache_create("names_cache", PATH_MAX, 0,
-			SLAB_HWCACHE_ALIGN|SLAB_PANIC, NULL);
+			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_USERCOPY, NULL);
 
 	dcache_init();
 	inode_init();
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/ecryptfs/inode.c linux-3.3.8-pax/fs/ecryptfs/inode.c
--- linux-3.3.8/fs/ecryptfs/inode.c	2012-03-19 10:39:09.800049293 +0100
+++ linux-3.3.8-pax/fs/ecryptfs/inode.c	2012-03-19 10:43:44.240034636 +0100
@@ -672,7 +672,7 @@ static int ecryptfs_readlink_lower(struc
 	old_fs = get_fs();
 	set_fs(get_ds());
 	rc = lower_dentry->d_inode->i_op->readlink(lower_dentry,
-						   (char __user *)lower_buf,
+						   (char __force_user *)lower_buf,
 						   lower_bufsiz);
 	set_fs(old_fs);
 	if (rc < 0)
@@ -718,7 +718,7 @@ static void *ecryptfs_follow_link(struct
 	}
 	old_fs = get_fs();
 	set_fs(get_ds());
-	rc = dentry->d_inode->i_op->readlink(dentry, (char __user *)buf, len);
+	rc = dentry->d_inode->i_op->readlink(dentry, (char __force_user *)buf, len);
 	set_fs(old_fs);
 	if (rc < 0) {
 		kfree(buf);
@@ -733,7 +733,7 @@ out:
 static void
 ecryptfs_put_link(struct dentry *dentry, struct nameidata *nd, void *ptr)
 {
-	char *buf = nd_get_link(nd);
+	const char *buf = nd_get_link(nd);
 	if (!IS_ERR(buf)) {
 		/* Free the char* */
 		kfree(buf);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/ecryptfs/miscdev.c linux-3.3.8-pax/fs/ecryptfs/miscdev.c
--- linux-3.3.8/fs/ecryptfs/miscdev.c	2012-03-19 10:39:09.804049293 +0100
+++ linux-3.3.8-pax/fs/ecryptfs/miscdev.c	2012-03-19 10:43:44.244034637 +0100
@@ -345,7 +345,7 @@ check_list:
 		goto out_unlock_msg_ctx;
 	i = PKT_TYPE_SIZE + PKT_CTR_SIZE;
 	if (msg_ctx->msg) {
-		if (copy_to_user(&buf[i], packet_length, packet_length_size))
+		if (packet_length_size > sizeof(packet_length) || copy_to_user(&buf[i], packet_length, packet_length_size))
 			goto out_unlock_msg_ctx;
 		i += packet_length_size;
 		if (copy_to_user(&buf[i], msg_ctx->msg, msg_ctx->msg_size))
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/ecryptfs/read_write.c linux-3.3.8-pax/fs/ecryptfs/read_write.c
--- linux-3.3.8/fs/ecryptfs/read_write.c	2012-03-19 10:39:09.808049292 +0100
+++ linux-3.3.8-pax/fs/ecryptfs/read_write.c	2012-03-19 10:43:44.248034638 +0100
@@ -48,7 +48,7 @@ int ecryptfs_write_lower(struct inode *e
 		return -EIO;
 	fs_save = get_fs();
 	set_fs(get_ds());
-	rc = vfs_write(lower_file, data, size, &offset);
+	rc = vfs_write(lower_file, (const char __force_user *)data, size, &offset);
 	set_fs(fs_save);
 	mark_inode_dirty_sync(ecryptfs_inode);
 	return rc;
@@ -244,7 +244,7 @@ int ecryptfs_read_lower(char *data, loff
 		return -EIO;
 	fs_save = get_fs();
 	set_fs(get_ds());
-	rc = vfs_read(lower_file, data, size, &offset);
+	rc = vfs_read(lower_file, (char __force_user *)data, size, &offset);
 	set_fs(fs_save);
 	return rc;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/exec.c linux-3.3.8-pax/fs/exec.c
--- linux-3.3.8/fs/exec.c	2012-05-07 20:26:56.059609315 +0200
+++ linux-3.3.8-pax/fs/exec.c	2012-05-07 20:27:02.107608992 +0200
@@ -55,6 +55,13 @@
 #include <linux/pipe_fs_i.h>
 #include <linux/oom.h>
 #include <linux/compat.h>
+#include <linux/random.h>
+#include <linux/seq_file.h>
+
+#ifdef CONFIG_PAX_REFCOUNT
+#include <linux/kallsyms.h>
+#include <linux/kdebug.h>
+#endif
 
 #include <asm/uaccess.h>
 #include <asm/mmu_context.h>
@@ -63,6 +70,15 @@
 #include <trace/events/task.h>
 #include "internal.h"
 
+#ifndef CONFIG_PAX_HAVE_ACL_FLAGS
+void __weak pax_set_initial_flags(struct linux_binprm *bprm) {}
+#endif
+
+#ifdef CONFIG_PAX_HOOK_ACL_FLAGS
+void (*pax_set_initial_flags_func)(struct linux_binprm *bprm);
+EXPORT_SYMBOL(pax_set_initial_flags_func);
+#endif
+
 int core_uses_pid;
 char core_pattern[CORENAME_MAX_SIZE] = "core";
 unsigned int core_pipe_limit;
@@ -72,7 +88,7 @@ struct core_name {
 	char *corename;
 	int used, size;
 };
-static atomic_t call_count = ATOMIC_INIT(1);
+static atomic_unchecked_t call_count = ATOMIC_INIT(1);
 
 /* The maximal length of core_pattern is also specified in sysctl.c */
 
@@ -190,18 +206,10 @@ static struct page *get_arg_page(struct
 		int write)
 {
 	struct page *page;
-	int ret;
 
-#ifdef CONFIG_STACK_GROWSUP
-	if (write) {
-		ret = expand_downwards(bprm->vma, pos);
-		if (ret < 0)
-			return NULL;
-	}
-#endif
-	ret = get_user_pages(current, bprm->mm, pos,
-			1, write, 1, &page, NULL);
-	if (ret <= 0)
+	if (0 > expand_downwards(bprm->vma, pos))
+		return NULL;
+	if (0 >= get_user_pages(current, bprm->mm, pos, 1, write, 1, &page, NULL))
 		return NULL;
 
 	if (write) {
@@ -276,6 +284,11 @@ static int __bprm_mm_init(struct linux_b
 	vma->vm_end = STACK_TOP_MAX;
 	vma->vm_start = vma->vm_end - PAGE_SIZE;
 	vma->vm_flags = VM_STACK_FLAGS | VM_STACK_INCOMPLETE_SETUP;
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	vma->vm_flags &= ~(VM_EXEC | VM_MAYEXEC);
+#endif
+
 	vma->vm_page_prot = vm_get_page_prot(vma->vm_flags);
 	INIT_LIST_HEAD(&vma->anon_vma_chain);
 
@@ -290,6 +303,12 @@ static int __bprm_mm_init(struct linux_b
 	mm->stack_vm = mm->total_vm = 1;
 	up_write(&mm->mmap_sem);
 	bprm->p = vma->vm_end - sizeof(void *);
+
+#ifdef CONFIG_PAX_RANDUSTACK
+	if (randomize_va_space)
+		bprm->p ^= (pax_get_random_long() & ~15) & ~PAGE_MASK;
+#endif
+
 	return 0;
 err:
 	up_write(&mm->mmap_sem);
@@ -419,14 +438,14 @@ static const char __user *get_user_arg_p
 		compat_uptr_t compat;
 
 		if (get_user(compat, argv.ptr.compat + nr))
-			return ERR_PTR(-EFAULT);
+			return (const char __force_user *)ERR_PTR(-EFAULT);
 
 		return compat_ptr(compat);
 	}
 #endif
 
 	if (get_user(native, argv.ptr.native + nr))
-		return ERR_PTR(-EFAULT);
+		return (const char __force_user *)ERR_PTR(-EFAULT);
 
 	return native;
 }
@@ -445,7 +464,7 @@ static int count(struct user_arg_ptr arg
 			if (!p)
 				break;
 
-			if (IS_ERR(p))
+			if (IS_ERR((const char __force_kernel *)p))
 				return -EFAULT;
 
 			if (i++ >= max)
@@ -479,7 +498,7 @@ static int copy_strings(int argc, struct
 
 		ret = -EFAULT;
 		str = get_user_arg_ptr(argv, argc);
-		if (IS_ERR(str))
+		if (IS_ERR((const char __force_kernel *)str))
 			goto out;
 
 		len = strnlen_user(str, MAX_ARG_STRLEN);
@@ -561,7 +580,7 @@ int copy_strings_kernel(int argc, const
 	int r;
 	mm_segment_t oldfs = get_fs();
 	struct user_arg_ptr argv = {
-		.ptr.native = (const char __user *const  __user *)__argv,
+		.ptr.native = (const char __force_user *const  __force_user *)__argv,
 	};
 
 	set_fs(KERNEL_DS);
@@ -596,7 +615,8 @@ static int shift_arg_pages(struct vm_are
 	unsigned long new_end = old_end - shift;
 	struct mmu_gather tlb;
 
-	BUG_ON(new_start > new_end);
+	if (new_start >= new_end || new_start < mmap_min_addr)
+		return -ENOMEM;
 
 	/*
 	 * ensure there are no vmas between where we want to go
@@ -605,6 +625,10 @@ static int shift_arg_pages(struct vm_are
 	if (vma != find_vma(mm, new_start))
 		return -EFAULT;
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	BUG_ON(pax_find_mirror_vma(vma));
+#endif
+
 	/*
 	 * cover the whole range: [new_start, old_end)
 	 */
@@ -685,10 +709,6 @@ int setup_arg_pages(struct linux_binprm
 	stack_top = arch_align_stack(stack_top);
 	stack_top = PAGE_ALIGN(stack_top);
 
-	if (unlikely(stack_top < mmap_min_addr) ||
-	    unlikely(vma->vm_end - vma->vm_start >= stack_top - mmap_min_addr))
-		return -ENOMEM;
-
 	stack_shift = vma->vm_end - stack_top;
 
 	bprm->p -= stack_shift;
@@ -700,8 +720,28 @@ int setup_arg_pages(struct linux_binprm
 	bprm->exec -= stack_shift;
 
 	down_write(&mm->mmap_sem);
+
+	/* Move stack pages down in memory. */
+	if (stack_shift) {
+		ret = shift_arg_pages(vma, stack_shift);
+		if (ret)
+			goto out_unlock;
+	}
+
 	vm_flags = VM_STACK_FLAGS;
 
+#if defined(CONFIG_PAX_PAGEEXEC) || defined(CONFIG_PAX_SEGMEXEC)
+	if (mm->pax_flags & (MF_PAX_PAGEEXEC | MF_PAX_SEGMEXEC)) {
+		vm_flags &= ~VM_EXEC;
+
+#ifdef CONFIG_PAX_MPROTECT
+		if (mm->pax_flags & MF_PAX_MPROTECT)
+			vm_flags &= ~VM_MAYEXEC;
+#endif
+
+	}
+#endif
+
 	/*
 	 * Adjust stack execute permissions; explicitly enable for
 	 * EXSTACK_ENABLE_X, disable for EXSTACK_DISABLE_X and leave alone
@@ -720,13 +760,6 @@ int setup_arg_pages(struct linux_binprm
 		goto out_unlock;
 	BUG_ON(prev != vma);
 
-	/* Move stack pages down in memory. */
-	if (stack_shift) {
-		ret = shift_arg_pages(vma, stack_shift);
-		if (ret)
-			goto out_unlock;
-	}
-
 	/* mprotect_fixup is overkill to remove the temporary stack flags */
 	vma->vm_flags &= ~VM_STACK_INCOMPLETE_SETUP;
 
@@ -807,7 +840,7 @@ int kernel_read(struct file *file, loff_
 	old_fs = get_fs();
 	set_fs(get_ds());
 	/* The cast to a user pointer is valid due to the set_fs() */
-	result = vfs_read(file, (void __user *)addr, count, &pos);
+	result = vfs_read(file, (void __force_user *)addr, count, &pos);
 	set_fs(old_fs);
 	return result;
 }
@@ -1255,7 +1288,7 @@ static int check_unsafe_exec(struct linu
 	}
 	rcu_read_unlock();
 
-	if (p->fs->users > n_fs) {
+	if (atomic_read(&p->fs->users) > n_fs) {
 		bprm->unsafe |= LSM_UNSAFE_SHARE;
 	} else {
 		res = -EAGAIN;
@@ -1626,7 +1659,7 @@ static int expand_corename(struct core_n
 {
 	char *old_corename = cn->corename;
 
-	cn->size = CORENAME_MAX_SIZE * atomic_inc_return(&call_count);
+	cn->size = CORENAME_MAX_SIZE * atomic_inc_return_unchecked(&call_count);
 	cn->corename = krealloc(old_corename, cn->size, GFP_KERNEL);
 
 	if (!cn->corename) {
@@ -1723,7 +1756,7 @@ static int format_corename(struct core_n
 	int pid_in_pattern = 0;
 	int err = 0;
 
-	cn->size = CORENAME_MAX_SIZE * atomic_read(&call_count);
+	cn->size = CORENAME_MAX_SIZE * atomic_read_unchecked(&call_count);
 	cn->corename = kmalloc(cn->size, GFP_KERNEL);
 	cn->used = 0;
 
@@ -1820,6 +1853,216 @@ out:
 	return ispipe;
 }
 
+int pax_check_flags(unsigned long *flags)
+{
+	int retval = 0;
+
+#if !defined(CONFIG_X86_32) || !defined(CONFIG_PAX_SEGMEXEC)
+	if (*flags & MF_PAX_SEGMEXEC)
+	{
+		*flags &= ~MF_PAX_SEGMEXEC;
+		retval = -EINVAL;
+	}
+#endif
+
+	if ((*flags & MF_PAX_PAGEEXEC)
+
+#ifdef CONFIG_PAX_PAGEEXEC
+	    &&  (*flags & MF_PAX_SEGMEXEC)
+#endif
+
+	   )
+	{
+		*flags &= ~MF_PAX_PAGEEXEC;
+		retval = -EINVAL;
+	}
+
+	if ((*flags & MF_PAX_MPROTECT)
+
+#ifdef CONFIG_PAX_MPROTECT
+	    && !(*flags & (MF_PAX_PAGEEXEC | MF_PAX_SEGMEXEC))
+#endif
+
+	   )
+	{
+		*flags &= ~MF_PAX_MPROTECT;
+		retval = -EINVAL;
+	}
+
+	if ((*flags & MF_PAX_EMUTRAMP)
+
+#ifdef CONFIG_PAX_EMUTRAMP
+	    && !(*flags & (MF_PAX_PAGEEXEC | MF_PAX_SEGMEXEC))
+#endif
+
+	   )
+	{
+		*flags &= ~MF_PAX_EMUTRAMP;
+		retval = -EINVAL;
+	}
+
+	return retval;
+}
+
+EXPORT_SYMBOL(pax_check_flags);
+
+#if defined(CONFIG_PAX_PAGEEXEC) || defined(CONFIG_PAX_SEGMEXEC)
+void pax_report_fault(struct pt_regs *regs, void *pc, void *sp)
+{
+	struct task_struct *tsk = current;
+	struct mm_struct *mm = current->mm;
+	char *buffer_exec = (char *)__get_free_page(GFP_KERNEL);
+	char *buffer_fault = (char *)__get_free_page(GFP_KERNEL);
+	char *path_exec = NULL;
+	char *path_fault = NULL;
+	unsigned long start = 0UL, end = 0UL, offset = 0UL;
+
+	if (buffer_exec && buffer_fault) {
+		struct vm_area_struct *vma, *vma_exec = NULL, *vma_fault = NULL;
+
+		down_read(&mm->mmap_sem);
+		vma = mm->mmap;
+		while (vma && (!vma_exec || !vma_fault)) {
+			if ((vma->vm_flags & VM_EXECUTABLE) && vma->vm_file)
+				vma_exec = vma;
+			if (vma->vm_start <= (unsigned long)pc && (unsigned long)pc < vma->vm_end)
+				vma_fault = vma;
+			vma = vma->vm_next;
+		}
+		if (vma_exec) {
+			path_exec = d_path(&vma_exec->vm_file->f_path, buffer_exec, PAGE_SIZE);
+			if (IS_ERR(path_exec))
+				path_exec = "<path too long>";
+			else {
+				path_exec = mangle_path(buffer_exec, path_exec, "\t\n\\");
+				if (path_exec) {
+					*path_exec = 0;
+					path_exec = buffer_exec;
+				} else
+					path_exec = "<path too long>";
+			}
+		}
+		if (vma_fault) {
+			start = vma_fault->vm_start;
+			end = vma_fault->vm_end;
+			offset = vma_fault->vm_pgoff << PAGE_SHIFT;
+			if (vma_fault->vm_file) {
+				path_fault = d_path(&vma_fault->vm_file->f_path, buffer_fault, PAGE_SIZE);
+				if (IS_ERR(path_fault))
+					path_fault = "<path too long>";
+				else {
+					path_fault = mangle_path(buffer_fault, path_fault, "\t\n\\");
+					if (path_fault) {
+						*path_fault = 0;
+						path_fault = buffer_fault;
+					} else
+						path_fault = "<path too long>";
+				}
+			} else
+				path_fault = "<anonymous mapping>";
+		}
+		up_read(&mm->mmap_sem);
+	}
+	printk(KERN_ERR "PAX: execution attempt in: %s, %08lx-%08lx %08lx\n", path_fault, start, end, offset);
+	printk(KERN_ERR "PAX: terminating task: %s(%s):%d, uid/euid: %u/%u, "
+			"PC: %p, SP: %p\n", path_exec, tsk->comm, task_pid_nr(tsk),
+			task_uid(tsk), task_euid(tsk), pc, sp);
+	free_page((unsigned long)buffer_exec);
+	free_page((unsigned long)buffer_fault);
+	pax_report_insns(regs, pc, sp);
+	do_coredump(SIGKILL, SIGKILL, regs);
+}
+#endif
+
+#ifdef CONFIG_PAX_REFCOUNT
+void pax_report_refcount_overflow(struct pt_regs *regs)
+{
+	printk(KERN_ERR "PAX: refcount overflow detected in: %s:%d, uid/euid: %u/%u\n",
+			 current->comm, task_pid_nr(current), current_uid(), current_euid());
+	print_symbol(KERN_ERR "PAX: refcount overflow occured at: %s\n", instruction_pointer(regs));
+	show_regs(regs);
+	force_sig_info(SIGKILL, SEND_SIG_FORCED, current);
+}
+#endif
+
+#ifdef CONFIG_PAX_USERCOPY
+/* 0: not at all, 1: fully, 2: fully inside frame, -1: partially (implies an error) */
+int object_is_on_stack(const void *obj, unsigned long len)
+{
+	const void * const stack = task_stack_page(current);
+	const void * const stackend = stack + THREAD_SIZE;
+
+#if defined(CONFIG_FRAME_POINTER) && defined(CONFIG_X86)
+	const void *frame = NULL;
+	const void *oldframe;
+#endif
+
+	if (obj + len < obj)
+		return -1;
+
+	if (obj + len <= stack || stackend <= obj)
+		return 0;
+
+	if (obj < stack || stackend < obj + len)
+		return -1;
+
+#if defined(CONFIG_FRAME_POINTER) && defined(CONFIG_X86)
+	oldframe = __builtin_frame_address(1);
+	if (oldframe)
+		frame = __builtin_frame_address(2);
+	/*
+	  low ----------------------------------------------> high
+	  [saved bp][saved ip][args][local vars][saved bp][saved ip]
+			      ^----------------^
+			  allow copies only within here
+	*/
+	while (stack <= frame && frame < stackend) {
+		/* if obj + len extends past the last frame, this
+		   check won't pass and the next frame will be 0,
+		   causing us to bail out and correctly report
+		   the copy as invalid
+		*/
+		if (obj + len <= frame)
+			return obj >= oldframe + 2 * sizeof(void *) ? 2 : -1;
+		oldframe = frame;
+		frame = *(const void * const *)frame;
+	}
+	return -1;
+#else
+	return 1;
+#endif
+}
+
+__noreturn void pax_report_usercopy(const void *ptr, unsigned long len, bool to, const char *type)
+{
+	printk(KERN_ERR "PAX: kernel memory %s attempt detected %s %p (%s) (%lu bytes)\n",
+		to ? "leak" : "overwrite", to ? "from" : "to", ptr, type ? : "unknown", len);
+	dump_stack();
+	do_group_exit(SIGKILL);
+}
+#endif
+
+#ifdef CONFIG_PAX_MEMORY_STACKLEAK
+void pax_track_stack(void)
+{
+	unsigned long sp = (unsigned long)&sp;
+	if (sp < current_thread_info()->lowest_stack &&
+	    sp > (unsigned long)task_stack_page(current))
+		current_thread_info()->lowest_stack = sp;
+}
+EXPORT_SYMBOL(pax_track_stack);
+#endif
+
+#ifdef CONFIG_PAX_SIZE_OVERFLOW
+void report_size_overflow(const char *file, unsigned int line, const char *func)
+{
+	printk(KERN_ERR "PAX: size overflow detected in function %s %s:%u\n", func, file, line);
+	dump_stack();
+	do_group_exit(SIGKILL);
+}
+EXPORT_SYMBOL(report_size_overflow);
+#endif
+
 static int zap_process(struct task_struct *start, int exit_code)
 {
 	struct task_struct *t;
@@ -2017,17 +2260,17 @@ static void wait_for_dump_helpers(struct
 	pipe = file->f_path.dentry->d_inode->i_pipe;
 
 	pipe_lock(pipe);
-	pipe->readers++;
-	pipe->writers--;
+	atomic_inc(&pipe->readers);
+	atomic_dec(&pipe->writers);
 
-	while ((pipe->readers > 1) && (!signal_pending(current))) {
+	while ((atomic_read(&pipe->readers) > 1) && (!signal_pending(current))) {
 		wake_up_interruptible_sync(&pipe->wait);
 		kill_fasync(&pipe->fasync_readers, SIGIO, POLL_IN);
 		pipe_wait(pipe);
 	}
 
-	pipe->readers--;
-	pipe->writers++;
+	atomic_dec(&pipe->readers);
+	atomic_inc(&pipe->writers);
 	pipe_unlock(pipe);
 
 }
@@ -2088,7 +2331,7 @@ void do_coredump(long signr, int exit_co
 	int retval = 0;
 	int flag = 0;
 	int ispipe;
-	static atomic_t core_dump_count = ATOMIC_INIT(0);
+	static atomic_unchecked_t core_dump_count = ATOMIC_INIT(0);
 	struct coredump_params cprm = {
 		.signr = signr,
 		.regs = regs,
@@ -2170,7 +2413,7 @@ void do_coredump(long signr, int exit_co
 		}
 		cprm.limit = RLIM_INFINITY;
 
-		dump_count = atomic_inc_return(&core_dump_count);
+		dump_count = atomic_inc_return_unchecked(&core_dump_count);
 		if (core_pipe_limit && (core_pipe_limit < dump_count)) {
 			printk(KERN_WARNING "Pid %d(%s) over core_pipe_limit\n",
 			       task_tgid_vnr(current), current->comm);
@@ -2240,7 +2483,7 @@ close_fail:
 		filp_close(cprm.file, NULL);
 fail_dropcount:
 	if (ispipe)
-		atomic_dec(&core_dump_count);
+		atomic_dec_unchecked(&core_dump_count);
 fail_unlock:
 	kfree(cn.corename);
 fail_corename:
@@ -2259,7 +2502,7 @@ fail:
  */
 int dump_write(struct file *file, const void *addr, int nr)
 {
-	return access_ok(VERIFY_READ, addr, nr) && file->f_op->write(file, addr, nr, &file->f_pos) == nr;
+	return access_ok(VERIFY_READ, addr, nr) && file->f_op->write(file, (const char __force_user *)addr, nr, &file->f_pos) == nr;
 }
 EXPORT_SYMBOL(dump_write);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/ext4/ext4.h linux-3.3.8-pax/fs/ext4/ext4.h
--- linux-3.3.8/fs/ext4/ext4.h	2012-04-23 14:06:58.767285912 +0200
+++ linux-3.3.8-pax/fs/ext4/ext4.h	2012-04-23 14:07:11.635285160 +0200
@@ -1217,19 +1217,19 @@ struct ext4_sb_info {
 	unsigned long s_mb_last_start;
 
 	/* stats for buddy allocator */
-	atomic_t s_bal_reqs;	/* number of reqs with len > 1 */
-	atomic_t s_bal_success;	/* we found long enough chunks */
-	atomic_t s_bal_allocated;	/* in blocks */
-	atomic_t s_bal_ex_scanned;	/* total extents scanned */
-	atomic_t s_bal_goals;	/* goal hits */
-	atomic_t s_bal_breaks;	/* too long searches */
-	atomic_t s_bal_2orders;	/* 2^order hits */
+	atomic_unchecked_t s_bal_reqs;	/* number of reqs with len > 1 */
+	atomic_unchecked_t s_bal_success;	/* we found long enough chunks */
+	atomic_unchecked_t s_bal_allocated;	/* in blocks */
+	atomic_unchecked_t s_bal_ex_scanned;	/* total extents scanned */
+	atomic_unchecked_t s_bal_goals;	/* goal hits */
+	atomic_unchecked_t s_bal_breaks;	/* too long searches */
+	atomic_unchecked_t s_bal_2orders;	/* 2^order hits */
 	spinlock_t s_bal_lock;
 	unsigned long s_mb_buddies_generated;
 	unsigned long long s_mb_generation_time;
-	atomic_t s_mb_lost_chunks;
-	atomic_t s_mb_preallocated;
-	atomic_t s_mb_discarded;
+	atomic_unchecked_t s_mb_lost_chunks;
+	atomic_unchecked_t s_mb_preallocated;
+	atomic_unchecked_t s_mb_discarded;
 	atomic_t s_lock_busy;
 
 	/* locality groups */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/ext4/mballoc.c linux-3.3.8-pax/fs/ext4/mballoc.c
--- linux-3.3.8/fs/ext4/mballoc.c	2012-03-19 10:39:09.860049286 +0100
+++ linux-3.3.8-pax/fs/ext4/mballoc.c	2012-03-19 10:43:44.252034639 +0100
@@ -1794,7 +1794,7 @@ void ext4_mb_simple_scan_group(struct ex
 		BUG_ON(ac->ac_b_ex.fe_len != ac->ac_g_ex.fe_len);
 
 		if (EXT4_SB(sb)->s_mb_stats)
-			atomic_inc(&EXT4_SB(sb)->s_bal_2orders);
+			atomic_inc_unchecked(&EXT4_SB(sb)->s_bal_2orders);
 
 		break;
 	}
@@ -2088,7 +2088,7 @@ repeat:
 			ac->ac_status = AC_STATUS_CONTINUE;
 			ac->ac_flags |= EXT4_MB_HINT_FIRST;
 			cr = 3;
-			atomic_inc(&sbi->s_mb_lost_chunks);
+			atomic_inc_unchecked(&sbi->s_mb_lost_chunks);
 			goto repeat;
 		}
 	}
@@ -2592,25 +2592,25 @@ int ext4_mb_release(struct super_block *
 	if (sbi->s_mb_stats) {
 		ext4_msg(sb, KERN_INFO,
 		       "mballoc: %u blocks %u reqs (%u success)",
-				atomic_read(&sbi->s_bal_allocated),
-				atomic_read(&sbi->s_bal_reqs),
-				atomic_read(&sbi->s_bal_success));
+				atomic_read_unchecked(&sbi->s_bal_allocated),
+				atomic_read_unchecked(&sbi->s_bal_reqs),
+				atomic_read_unchecked(&sbi->s_bal_success));
 		ext4_msg(sb, KERN_INFO,
 		      "mballoc: %u extents scanned, %u goal hits, "
 				"%u 2^N hits, %u breaks, %u lost",
-				atomic_read(&sbi->s_bal_ex_scanned),
-				atomic_read(&sbi->s_bal_goals),
-				atomic_read(&sbi->s_bal_2orders),
-				atomic_read(&sbi->s_bal_breaks),
-				atomic_read(&sbi->s_mb_lost_chunks));
+				atomic_read_unchecked(&sbi->s_bal_ex_scanned),
+				atomic_read_unchecked(&sbi->s_bal_goals),
+				atomic_read_unchecked(&sbi->s_bal_2orders),
+				atomic_read_unchecked(&sbi->s_bal_breaks),
+				atomic_read_unchecked(&sbi->s_mb_lost_chunks));
 		ext4_msg(sb, KERN_INFO,
 		       "mballoc: %lu generated and it took %Lu",
 				sbi->s_mb_buddies_generated,
 				sbi->s_mb_generation_time);
 		ext4_msg(sb, KERN_INFO,
 		       "mballoc: %u preallocated, %u discarded",
-				atomic_read(&sbi->s_mb_preallocated),
-				atomic_read(&sbi->s_mb_discarded));
+				atomic_read_unchecked(&sbi->s_mb_preallocated),
+				atomic_read_unchecked(&sbi->s_mb_discarded));
 	}
 
 	free_percpu(sbi->s_locality_groups);
@@ -3096,16 +3096,16 @@ static void ext4_mb_collect_stats(struct
 	struct ext4_sb_info *sbi = EXT4_SB(ac->ac_sb);
 
 	if (sbi->s_mb_stats && ac->ac_g_ex.fe_len > 1) {
-		atomic_inc(&sbi->s_bal_reqs);
-		atomic_add(ac->ac_b_ex.fe_len, &sbi->s_bal_allocated);
+		atomic_inc_unchecked(&sbi->s_bal_reqs);
+		atomic_add_unchecked(ac->ac_b_ex.fe_len, &sbi->s_bal_allocated);
 		if (ac->ac_b_ex.fe_len >= ac->ac_o_ex.fe_len)
-			atomic_inc(&sbi->s_bal_success);
-		atomic_add(ac->ac_found, &sbi->s_bal_ex_scanned);
+			atomic_inc_unchecked(&sbi->s_bal_success);
+		atomic_add_unchecked(ac->ac_found, &sbi->s_bal_ex_scanned);
 		if (ac->ac_g_ex.fe_start == ac->ac_b_ex.fe_start &&
 				ac->ac_g_ex.fe_group == ac->ac_b_ex.fe_group)
-			atomic_inc(&sbi->s_bal_goals);
+			atomic_inc_unchecked(&sbi->s_bal_goals);
 		if (ac->ac_found > sbi->s_mb_max_to_scan)
-			atomic_inc(&sbi->s_bal_breaks);
+			atomic_inc_unchecked(&sbi->s_bal_breaks);
 	}
 
 	if (ac->ac_op == EXT4_MB_HISTORY_ALLOC)
@@ -3509,7 +3509,7 @@ ext4_mb_new_inode_pa(struct ext4_allocat
 	trace_ext4_mb_new_inode_pa(ac, pa);
 
 	ext4_mb_use_inode_pa(ac, pa);
-	atomic_add(pa->pa_free, &sbi->s_mb_preallocated);
+	atomic_add_unchecked(pa->pa_free, &sbi->s_mb_preallocated);
 
 	ei = EXT4_I(ac->ac_inode);
 	grp = ext4_get_group_info(sb, ac->ac_b_ex.fe_group);
@@ -3569,7 +3569,7 @@ ext4_mb_new_group_pa(struct ext4_allocat
 	trace_ext4_mb_new_group_pa(ac, pa);
 
 	ext4_mb_use_group_pa(ac, pa);
-	atomic_add(pa->pa_free, &EXT4_SB(sb)->s_mb_preallocated);
+	atomic_add_unchecked(pa->pa_free, &EXT4_SB(sb)->s_mb_preallocated);
 
 	grp = ext4_get_group_info(sb, ac->ac_b_ex.fe_group);
 	lg = ac->ac_lg;
@@ -3658,7 +3658,7 @@ ext4_mb_release_inode_pa(struct ext4_bud
 		 * from the bitmap and continue.
 		 */
 	}
-	atomic_add(free, &sbi->s_mb_discarded);
+	atomic_add_unchecked(free, &sbi->s_mb_discarded);
 
 	return err;
 }
@@ -3676,7 +3676,7 @@ ext4_mb_release_group_pa(struct ext4_bud
 	ext4_get_group_no_and_offset(sb, pa->pa_pstart, &group, &bit);
 	BUG_ON(group != e4b->bd_group && pa->pa_len != 0);
 	mb_free_blocks(pa->pa_inode, e4b, bit, pa->pa_len);
-	atomic_add(pa->pa_len, &EXT4_SB(sb)->s_mb_discarded);
+	atomic_add_unchecked(pa->pa_len, &EXT4_SB(sb)->s_mb_discarded);
 	trace_ext4_mballoc_discard(sb, NULL, group, bit, pa->pa_len);
 
 	return 0;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/fcntl.c linux-3.3.8-pax/fs/fcntl.c
--- linux-3.3.8/fs/fcntl.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/fs/fcntl.c	2012-03-19 10:43:44.256034639 +0100
@@ -266,7 +266,7 @@ pid_t f_getown(struct file *filp)
 
 static int f_setown_ex(struct file *filp, unsigned long arg)
 {
-	struct f_owner_ex * __user owner_p = (void * __user)arg;
+	struct f_owner_ex __user *owner_p = (void __user *)arg;
 	struct f_owner_ex owner;
 	struct pid *pid;
 	int type;
@@ -306,7 +306,7 @@ static int f_setown_ex(struct file *filp
 
 static int f_getown_ex(struct file *filp, unsigned long arg)
 {
-	struct f_owner_ex * __user owner_p = (void * __user)arg;
+	struct f_owner_ex __user *owner_p = (void __user *)arg;
 	struct f_owner_ex owner;
 	int ret = 0;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/fifo.c linux-3.3.8-pax/fs/fifo.c
--- linux-3.3.8/fs/fifo.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/fs/fifo.c	2012-03-19 10:43:44.256034639 +0100
@@ -58,10 +58,10 @@ static int fifo_open(struct inode *inode
 	 */
 		filp->f_op = &read_pipefifo_fops;
 		pipe->r_counter++;
-		if (pipe->readers++ == 0)
+		if (atomic_inc_return(&pipe->readers) == 1)
 			wake_up_partner(inode);
 
-		if (!pipe->writers) {
+		if (!atomic_read(&pipe->writers)) {
 			if ((filp->f_flags & O_NONBLOCK)) {
 				/* suppress POLLHUP until we have
 				 * seen a writer */
@@ -81,15 +81,15 @@ static int fifo_open(struct inode *inode
 	 *  errno=ENXIO when there is no process reading the FIFO.
 	 */
 		ret = -ENXIO;
-		if ((filp->f_flags & O_NONBLOCK) && !pipe->readers)
+		if ((filp->f_flags & O_NONBLOCK) && !atomic_read(&pipe->readers))
 			goto err;
 
 		filp->f_op = &write_pipefifo_fops;
 		pipe->w_counter++;
-		if (!pipe->writers++)
+		if (atomic_inc_return(&pipe->writers) == 1)
 			wake_up_partner(inode);
 
-		if (!pipe->readers) {
+		if (!atomic_read(&pipe->readers)) {
 			wait_for_partner(inode, &pipe->r_counter);
 			if (signal_pending(current))
 				goto err_wr;
@@ -105,11 +105,11 @@ static int fifo_open(struct inode *inode
 	 */
 		filp->f_op = &rdwr_pipefifo_fops;
 
-		pipe->readers++;
-		pipe->writers++;
+		atomic_inc(&pipe->readers);
+		atomic_inc(&pipe->writers);
 		pipe->r_counter++;
 		pipe->w_counter++;
-		if (pipe->readers == 1 || pipe->writers == 1)
+		if (atomic_read(&pipe->readers) == 1 || atomic_read(&pipe->writers) == 1)
 			wake_up_partner(inode);
 		break;
 
@@ -123,19 +123,19 @@ static int fifo_open(struct inode *inode
 	return 0;
 
 err_rd:
-	if (!--pipe->readers)
+	if (atomic_dec_and_test(&pipe->readers))
 		wake_up_interruptible(&pipe->wait);
 	ret = -ERESTARTSYS;
 	goto err;
 
 err_wr:
-	if (!--pipe->writers)
+	if (atomic_dec_and_test(&pipe->writers))
 		wake_up_interruptible(&pipe->wait);
 	ret = -ERESTARTSYS;
 	goto err;
 
 err:
-	if (!pipe->readers && !pipe->writers)
+	if (!atomic_read(&pipe->readers) && !atomic_read(&pipe->writers))
 		free_pipe_info(inode);
 
 err_nocleanup:
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/fscache/cookie.c linux-3.3.8-pax/fs/fscache/cookie.c
--- linux-3.3.8/fs/fscache/cookie.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/fs/fscache/cookie.c	2012-03-19 10:43:44.256034639 +0100
@@ -68,11 +68,11 @@ struct fscache_cookie *__fscache_acquire
 	       parent ? (char *) parent->def->name : "<no-parent>",
 	       def->name, netfs_data);
 
-	fscache_stat(&fscache_n_acquires);
+	fscache_stat_unchecked(&fscache_n_acquires);
 
 	/* if there's no parent cookie, then we don't create one here either */
 	if (!parent) {
-		fscache_stat(&fscache_n_acquires_null);
+		fscache_stat_unchecked(&fscache_n_acquires_null);
 		_leave(" [no parent]");
 		return NULL;
 	}
@@ -87,7 +87,7 @@ struct fscache_cookie *__fscache_acquire
 	/* allocate and initialise a cookie */
 	cookie = kmem_cache_alloc(fscache_cookie_jar, GFP_KERNEL);
 	if (!cookie) {
-		fscache_stat(&fscache_n_acquires_oom);
+		fscache_stat_unchecked(&fscache_n_acquires_oom);
 		_leave(" [ENOMEM]");
 		return NULL;
 	}
@@ -109,13 +109,13 @@ struct fscache_cookie *__fscache_acquire
 
 	switch (cookie->def->type) {
 	case FSCACHE_COOKIE_TYPE_INDEX:
-		fscache_stat(&fscache_n_cookie_index);
+		fscache_stat_unchecked(&fscache_n_cookie_index);
 		break;
 	case FSCACHE_COOKIE_TYPE_DATAFILE:
-		fscache_stat(&fscache_n_cookie_data);
+		fscache_stat_unchecked(&fscache_n_cookie_data);
 		break;
 	default:
-		fscache_stat(&fscache_n_cookie_special);
+		fscache_stat_unchecked(&fscache_n_cookie_special);
 		break;
 	}
 
@@ -126,13 +126,13 @@ struct fscache_cookie *__fscache_acquire
 		if (fscache_acquire_non_index_cookie(cookie) < 0) {
 			atomic_dec(&parent->n_children);
 			__fscache_cookie_put(cookie);
-			fscache_stat(&fscache_n_acquires_nobufs);
+			fscache_stat_unchecked(&fscache_n_acquires_nobufs);
 			_leave(" = NULL");
 			return NULL;
 		}
 	}
 
-	fscache_stat(&fscache_n_acquires_ok);
+	fscache_stat_unchecked(&fscache_n_acquires_ok);
 	_leave(" = %p", cookie);
 	return cookie;
 }
@@ -168,7 +168,7 @@ static int fscache_acquire_non_index_coo
 	cache = fscache_select_cache_for_object(cookie->parent);
 	if (!cache) {
 		up_read(&fscache_addremove_sem);
-		fscache_stat(&fscache_n_acquires_no_cache);
+		fscache_stat_unchecked(&fscache_n_acquires_no_cache);
 		_leave(" = -ENOMEDIUM [no cache]");
 		return -ENOMEDIUM;
 	}
@@ -256,12 +256,12 @@ static int fscache_alloc_object(struct f
 	object = cache->ops->alloc_object(cache, cookie);
 	fscache_stat_d(&fscache_n_cop_alloc_object);
 	if (IS_ERR(object)) {
-		fscache_stat(&fscache_n_object_no_alloc);
+		fscache_stat_unchecked(&fscache_n_object_no_alloc);
 		ret = PTR_ERR(object);
 		goto error;
 	}
 
-	fscache_stat(&fscache_n_object_alloc);
+	fscache_stat_unchecked(&fscache_n_object_alloc);
 
 	object->debug_id = atomic_inc_return(&fscache_object_debug_id);
 
@@ -377,10 +377,10 @@ void __fscache_update_cookie(struct fsca
 	struct fscache_object *object;
 	struct hlist_node *_p;
 
-	fscache_stat(&fscache_n_updates);
+	fscache_stat_unchecked(&fscache_n_updates);
 
 	if (!cookie) {
-		fscache_stat(&fscache_n_updates_null);
+		fscache_stat_unchecked(&fscache_n_updates_null);
 		_leave(" [no cookie]");
 		return;
 	}
@@ -414,12 +414,12 @@ void __fscache_relinquish_cookie(struct
 	struct fscache_object *object;
 	unsigned long event;
 
-	fscache_stat(&fscache_n_relinquishes);
+	fscache_stat_unchecked(&fscache_n_relinquishes);
 	if (retire)
-		fscache_stat(&fscache_n_relinquishes_retire);
+		fscache_stat_unchecked(&fscache_n_relinquishes_retire);
 
 	if (!cookie) {
-		fscache_stat(&fscache_n_relinquishes_null);
+		fscache_stat_unchecked(&fscache_n_relinquishes_null);
 		_leave(" [no cookie]");
 		return;
 	}
@@ -435,7 +435,7 @@ void __fscache_relinquish_cookie(struct
 
 	/* wait for the cookie to finish being instantiated (or to fail) */
 	if (test_bit(FSCACHE_COOKIE_CREATING, &cookie->flags)) {
-		fscache_stat(&fscache_n_relinquishes_waitcrt);
+		fscache_stat_unchecked(&fscache_n_relinquishes_waitcrt);
 		wait_on_bit(&cookie->flags, FSCACHE_COOKIE_CREATING,
 			    fscache_wait_bit, TASK_UNINTERRUPTIBLE);
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/fscache/internal.h linux-3.3.8-pax/fs/fscache/internal.h
--- linux-3.3.8/fs/fscache/internal.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/fs/fscache/internal.h	2012-03-19 10:43:44.260034637 +0100
@@ -144,94 +144,94 @@ extern void fscache_proc_cleanup(void);
 extern atomic_t fscache_n_ops_processed[FSCACHE_MAX_THREADS];
 extern atomic_t fscache_n_objs_processed[FSCACHE_MAX_THREADS];
 
-extern atomic_t fscache_n_op_pend;
-extern atomic_t fscache_n_op_run;
-extern atomic_t fscache_n_op_enqueue;
-extern atomic_t fscache_n_op_deferred_release;
-extern atomic_t fscache_n_op_release;
-extern atomic_t fscache_n_op_gc;
-extern atomic_t fscache_n_op_cancelled;
-extern atomic_t fscache_n_op_rejected;
-
-extern atomic_t fscache_n_attr_changed;
-extern atomic_t fscache_n_attr_changed_ok;
-extern atomic_t fscache_n_attr_changed_nobufs;
-extern atomic_t fscache_n_attr_changed_nomem;
-extern atomic_t fscache_n_attr_changed_calls;
-
-extern atomic_t fscache_n_allocs;
-extern atomic_t fscache_n_allocs_ok;
-extern atomic_t fscache_n_allocs_wait;
-extern atomic_t fscache_n_allocs_nobufs;
-extern atomic_t fscache_n_allocs_intr;
-extern atomic_t fscache_n_allocs_object_dead;
-extern atomic_t fscache_n_alloc_ops;
-extern atomic_t fscache_n_alloc_op_waits;
-
-extern atomic_t fscache_n_retrievals;
-extern atomic_t fscache_n_retrievals_ok;
-extern atomic_t fscache_n_retrievals_wait;
-extern atomic_t fscache_n_retrievals_nodata;
-extern atomic_t fscache_n_retrievals_nobufs;
-extern atomic_t fscache_n_retrievals_intr;
-extern atomic_t fscache_n_retrievals_nomem;
-extern atomic_t fscache_n_retrievals_object_dead;
-extern atomic_t fscache_n_retrieval_ops;
-extern atomic_t fscache_n_retrieval_op_waits;
-
-extern atomic_t fscache_n_stores;
-extern atomic_t fscache_n_stores_ok;
-extern atomic_t fscache_n_stores_again;
-extern atomic_t fscache_n_stores_nobufs;
-extern atomic_t fscache_n_stores_oom;
-extern atomic_t fscache_n_store_ops;
-extern atomic_t fscache_n_store_calls;
-extern atomic_t fscache_n_store_pages;
-extern atomic_t fscache_n_store_radix_deletes;
-extern atomic_t fscache_n_store_pages_over_limit;
-
-extern atomic_t fscache_n_store_vmscan_not_storing;
-extern atomic_t fscache_n_store_vmscan_gone;
-extern atomic_t fscache_n_store_vmscan_busy;
-extern atomic_t fscache_n_store_vmscan_cancelled;
-
-extern atomic_t fscache_n_marks;
-extern atomic_t fscache_n_uncaches;
-
-extern atomic_t fscache_n_acquires;
-extern atomic_t fscache_n_acquires_null;
-extern atomic_t fscache_n_acquires_no_cache;
-extern atomic_t fscache_n_acquires_ok;
-extern atomic_t fscache_n_acquires_nobufs;
-extern atomic_t fscache_n_acquires_oom;
-
-extern atomic_t fscache_n_updates;
-extern atomic_t fscache_n_updates_null;
-extern atomic_t fscache_n_updates_run;
-
-extern atomic_t fscache_n_relinquishes;
-extern atomic_t fscache_n_relinquishes_null;
-extern atomic_t fscache_n_relinquishes_waitcrt;
-extern atomic_t fscache_n_relinquishes_retire;
-
-extern atomic_t fscache_n_cookie_index;
-extern atomic_t fscache_n_cookie_data;
-extern atomic_t fscache_n_cookie_special;
-
-extern atomic_t fscache_n_object_alloc;
-extern atomic_t fscache_n_object_no_alloc;
-extern atomic_t fscache_n_object_lookups;
-extern atomic_t fscache_n_object_lookups_negative;
-extern atomic_t fscache_n_object_lookups_positive;
-extern atomic_t fscache_n_object_lookups_timed_out;
-extern atomic_t fscache_n_object_created;
-extern atomic_t fscache_n_object_avail;
-extern atomic_t fscache_n_object_dead;
-
-extern atomic_t fscache_n_checkaux_none;
-extern atomic_t fscache_n_checkaux_okay;
-extern atomic_t fscache_n_checkaux_update;
-extern atomic_t fscache_n_checkaux_obsolete;
+extern atomic_unchecked_t fscache_n_op_pend;
+extern atomic_unchecked_t fscache_n_op_run;
+extern atomic_unchecked_t fscache_n_op_enqueue;
+extern atomic_unchecked_t fscache_n_op_deferred_release;
+extern atomic_unchecked_t fscache_n_op_release;
+extern atomic_unchecked_t fscache_n_op_gc;
+extern atomic_unchecked_t fscache_n_op_cancelled;
+extern atomic_unchecked_t fscache_n_op_rejected;
+
+extern atomic_unchecked_t fscache_n_attr_changed;
+extern atomic_unchecked_t fscache_n_attr_changed_ok;
+extern atomic_unchecked_t fscache_n_attr_changed_nobufs;
+extern atomic_unchecked_t fscache_n_attr_changed_nomem;
+extern atomic_unchecked_t fscache_n_attr_changed_calls;
+
+extern atomic_unchecked_t fscache_n_allocs;
+extern atomic_unchecked_t fscache_n_allocs_ok;
+extern atomic_unchecked_t fscache_n_allocs_wait;
+extern atomic_unchecked_t fscache_n_allocs_nobufs;
+extern atomic_unchecked_t fscache_n_allocs_intr;
+extern atomic_unchecked_t fscache_n_allocs_object_dead;
+extern atomic_unchecked_t fscache_n_alloc_ops;
+extern atomic_unchecked_t fscache_n_alloc_op_waits;
+
+extern atomic_unchecked_t fscache_n_retrievals;
+extern atomic_unchecked_t fscache_n_retrievals_ok;
+extern atomic_unchecked_t fscache_n_retrievals_wait;
+extern atomic_unchecked_t fscache_n_retrievals_nodata;
+extern atomic_unchecked_t fscache_n_retrievals_nobufs;
+extern atomic_unchecked_t fscache_n_retrievals_intr;
+extern atomic_unchecked_t fscache_n_retrievals_nomem;
+extern atomic_unchecked_t fscache_n_retrievals_object_dead;
+extern atomic_unchecked_t fscache_n_retrieval_ops;
+extern atomic_unchecked_t fscache_n_retrieval_op_waits;
+
+extern atomic_unchecked_t fscache_n_stores;
+extern atomic_unchecked_t fscache_n_stores_ok;
+extern atomic_unchecked_t fscache_n_stores_again;
+extern atomic_unchecked_t fscache_n_stores_nobufs;
+extern atomic_unchecked_t fscache_n_stores_oom;
+extern atomic_unchecked_t fscache_n_store_ops;
+extern atomic_unchecked_t fscache_n_store_calls;
+extern atomic_unchecked_t fscache_n_store_pages;
+extern atomic_unchecked_t fscache_n_store_radix_deletes;
+extern atomic_unchecked_t fscache_n_store_pages_over_limit;
+
+extern atomic_unchecked_t fscache_n_store_vmscan_not_storing;
+extern atomic_unchecked_t fscache_n_store_vmscan_gone;
+extern atomic_unchecked_t fscache_n_store_vmscan_busy;
+extern atomic_unchecked_t fscache_n_store_vmscan_cancelled;
+
+extern atomic_unchecked_t fscache_n_marks;
+extern atomic_unchecked_t fscache_n_uncaches;
+
+extern atomic_unchecked_t fscache_n_acquires;
+extern atomic_unchecked_t fscache_n_acquires_null;
+extern atomic_unchecked_t fscache_n_acquires_no_cache;
+extern atomic_unchecked_t fscache_n_acquires_ok;
+extern atomic_unchecked_t fscache_n_acquires_nobufs;
+extern atomic_unchecked_t fscache_n_acquires_oom;
+
+extern atomic_unchecked_t fscache_n_updates;
+extern atomic_unchecked_t fscache_n_updates_null;
+extern atomic_unchecked_t fscache_n_updates_run;
+
+extern atomic_unchecked_t fscache_n_relinquishes;
+extern atomic_unchecked_t fscache_n_relinquishes_null;
+extern atomic_unchecked_t fscache_n_relinquishes_waitcrt;
+extern atomic_unchecked_t fscache_n_relinquishes_retire;
+
+extern atomic_unchecked_t fscache_n_cookie_index;
+extern atomic_unchecked_t fscache_n_cookie_data;
+extern atomic_unchecked_t fscache_n_cookie_special;
+
+extern atomic_unchecked_t fscache_n_object_alloc;
+extern atomic_unchecked_t fscache_n_object_no_alloc;
+extern atomic_unchecked_t fscache_n_object_lookups;
+extern atomic_unchecked_t fscache_n_object_lookups_negative;
+extern atomic_unchecked_t fscache_n_object_lookups_positive;
+extern atomic_unchecked_t fscache_n_object_lookups_timed_out;
+extern atomic_unchecked_t fscache_n_object_created;
+extern atomic_unchecked_t fscache_n_object_avail;
+extern atomic_unchecked_t fscache_n_object_dead;
+
+extern atomic_unchecked_t fscache_n_checkaux_none;
+extern atomic_unchecked_t fscache_n_checkaux_okay;
+extern atomic_unchecked_t fscache_n_checkaux_update;
+extern atomic_unchecked_t fscache_n_checkaux_obsolete;
 
 extern atomic_t fscache_n_cop_alloc_object;
 extern atomic_t fscache_n_cop_lookup_object;
@@ -255,6 +255,11 @@ static inline void fscache_stat(atomic_t
 	atomic_inc(stat);
 }
 
+static inline void fscache_stat_unchecked(atomic_unchecked_t *stat)
+{
+	atomic_inc_unchecked(stat);
+}
+
 static inline void fscache_stat_d(atomic_t *stat)
 {
 	atomic_dec(stat);
@@ -267,6 +272,7 @@ extern const struct file_operations fsca
 
 #define __fscache_stat(stat) (NULL)
 #define fscache_stat(stat) do {} while (0)
+#define fscache_stat_unchecked(stat) do {} while (0)
 #define fscache_stat_d(stat) do {} while (0)
 #endif
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/fscache/object.c linux-3.3.8-pax/fs/fscache/object.c
--- linux-3.3.8/fs/fscache/object.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/fs/fscache/object.c	2012-03-19 10:43:44.260034637 +0100
@@ -128,7 +128,7 @@ static void fscache_object_state_machine
 		/* update the object metadata on disk */
 	case FSCACHE_OBJECT_UPDATING:
 		clear_bit(FSCACHE_OBJECT_EV_UPDATE, &object->events);
-		fscache_stat(&fscache_n_updates_run);
+		fscache_stat_unchecked(&fscache_n_updates_run);
 		fscache_stat(&fscache_n_cop_update_object);
 		object->cache->ops->update_object(object);
 		fscache_stat_d(&fscache_n_cop_update_object);
@@ -217,7 +217,7 @@ static void fscache_object_state_machine
 		spin_lock(&object->lock);
 		object->state = FSCACHE_OBJECT_DEAD;
 		spin_unlock(&object->lock);
-		fscache_stat(&fscache_n_object_dead);
+		fscache_stat_unchecked(&fscache_n_object_dead);
 		goto terminal_transit;
 
 		/* handle the parent cache of this object being withdrawn from
@@ -232,7 +232,7 @@ static void fscache_object_state_machine
 		spin_lock(&object->lock);
 		object->state = FSCACHE_OBJECT_DEAD;
 		spin_unlock(&object->lock);
-		fscache_stat(&fscache_n_object_dead);
+		fscache_stat_unchecked(&fscache_n_object_dead);
 		goto terminal_transit;
 
 		/* complain about the object being woken up once it is
@@ -461,7 +461,7 @@ static void fscache_lookup_object(struct
 	       parent->cookie->def->name, cookie->def->name,
 	       object->cache->tag->name);
 
-	fscache_stat(&fscache_n_object_lookups);
+	fscache_stat_unchecked(&fscache_n_object_lookups);
 	fscache_stat(&fscache_n_cop_lookup_object);
 	ret = object->cache->ops->lookup_object(object);
 	fscache_stat_d(&fscache_n_cop_lookup_object);
@@ -472,7 +472,7 @@ static void fscache_lookup_object(struct
 	if (ret == -ETIMEDOUT) {
 		/* probably stuck behind another object, so move this one to
 		 * the back of the queue */
-		fscache_stat(&fscache_n_object_lookups_timed_out);
+		fscache_stat_unchecked(&fscache_n_object_lookups_timed_out);
 		set_bit(FSCACHE_OBJECT_EV_REQUEUE, &object->events);
 	}
 
@@ -495,7 +495,7 @@ void fscache_object_lookup_negative(stru
 
 	spin_lock(&object->lock);
 	if (object->state == FSCACHE_OBJECT_LOOKING_UP) {
-		fscache_stat(&fscache_n_object_lookups_negative);
+		fscache_stat_unchecked(&fscache_n_object_lookups_negative);
 
 		/* transit here to allow write requests to begin stacking up
 		 * and read requests to begin returning ENODATA */
@@ -541,7 +541,7 @@ void fscache_obtained_object(struct fsca
 	 * result, in which case there may be data available */
 	spin_lock(&object->lock);
 	if (object->state == FSCACHE_OBJECT_LOOKING_UP) {
-		fscache_stat(&fscache_n_object_lookups_positive);
+		fscache_stat_unchecked(&fscache_n_object_lookups_positive);
 
 		clear_bit(FSCACHE_COOKIE_NO_DATA_YET, &cookie->flags);
 
@@ -555,7 +555,7 @@ void fscache_obtained_object(struct fsca
 		set_bit(FSCACHE_OBJECT_EV_REQUEUE, &object->events);
 	} else {
 		ASSERTCMP(object->state, ==, FSCACHE_OBJECT_CREATING);
-		fscache_stat(&fscache_n_object_created);
+		fscache_stat_unchecked(&fscache_n_object_created);
 
 		object->state = FSCACHE_OBJECT_AVAILABLE;
 		spin_unlock(&object->lock);
@@ -602,7 +602,7 @@ static void fscache_object_available(str
 	fscache_enqueue_dependents(object);
 
 	fscache_hist(fscache_obj_instantiate_histogram, object->lookup_jif);
-	fscache_stat(&fscache_n_object_avail);
+	fscache_stat_unchecked(&fscache_n_object_avail);
 
 	_leave("");
 }
@@ -861,7 +861,7 @@ enum fscache_checkaux fscache_check_aux(
 	enum fscache_checkaux result;
 
 	if (!object->cookie->def->check_aux) {
-		fscache_stat(&fscache_n_checkaux_none);
+		fscache_stat_unchecked(&fscache_n_checkaux_none);
 		return FSCACHE_CHECKAUX_OKAY;
 	}
 
@@ -870,17 +870,17 @@ enum fscache_checkaux fscache_check_aux(
 	switch (result) {
 		/* entry okay as is */
 	case FSCACHE_CHECKAUX_OKAY:
-		fscache_stat(&fscache_n_checkaux_okay);
+		fscache_stat_unchecked(&fscache_n_checkaux_okay);
 		break;
 
 		/* entry requires update */
 	case FSCACHE_CHECKAUX_NEEDS_UPDATE:
-		fscache_stat(&fscache_n_checkaux_update);
+		fscache_stat_unchecked(&fscache_n_checkaux_update);
 		break;
 
 		/* entry requires deletion */
 	case FSCACHE_CHECKAUX_OBSOLETE:
-		fscache_stat(&fscache_n_checkaux_obsolete);
+		fscache_stat_unchecked(&fscache_n_checkaux_obsolete);
 		break;
 
 	default:
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/fscache/operation.c linux-3.3.8-pax/fs/fscache/operation.c
--- linux-3.3.8/fs/fscache/operation.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/fs/fscache/operation.c	2012-03-19 10:43:44.260034637 +0100
@@ -17,7 +17,7 @@
 #include <linux/slab.h>
 #include "internal.h"
 
-atomic_t fscache_op_debug_id;
+atomic_unchecked_t fscache_op_debug_id;
 EXPORT_SYMBOL(fscache_op_debug_id);
 
 /**
@@ -38,7 +38,7 @@ void fscache_enqueue_operation(struct fs
 	ASSERTCMP(op->object->state, >=, FSCACHE_OBJECT_AVAILABLE);
 	ASSERTCMP(atomic_read(&op->usage), >, 0);
 
-	fscache_stat(&fscache_n_op_enqueue);
+	fscache_stat_unchecked(&fscache_n_op_enqueue);
 	switch (op->flags & FSCACHE_OP_TYPE) {
 	case FSCACHE_OP_ASYNC:
 		_debug("queue async");
@@ -69,7 +69,7 @@ static void fscache_run_op(struct fscach
 		wake_up_bit(&op->flags, FSCACHE_OP_WAITING);
 	if (op->processor)
 		fscache_enqueue_operation(op);
-	fscache_stat(&fscache_n_op_run);
+	fscache_stat_unchecked(&fscache_n_op_run);
 }
 
 /*
@@ -98,11 +98,11 @@ int fscache_submit_exclusive_op(struct f
 		if (object->n_ops > 1) {
 			atomic_inc(&op->usage);
 			list_add_tail(&op->pend_link, &object->pending_ops);
-			fscache_stat(&fscache_n_op_pend);
+			fscache_stat_unchecked(&fscache_n_op_pend);
 		} else if (!list_empty(&object->pending_ops)) {
 			atomic_inc(&op->usage);
 			list_add_tail(&op->pend_link, &object->pending_ops);
-			fscache_stat(&fscache_n_op_pend);
+			fscache_stat_unchecked(&fscache_n_op_pend);
 			fscache_start_operations(object);
 		} else {
 			ASSERTCMP(object->n_in_progress, ==, 0);
@@ -118,7 +118,7 @@ int fscache_submit_exclusive_op(struct f
 		object->n_exclusive++;	/* reads and writes must wait */
 		atomic_inc(&op->usage);
 		list_add_tail(&op->pend_link, &object->pending_ops);
-		fscache_stat(&fscache_n_op_pend);
+		fscache_stat_unchecked(&fscache_n_op_pend);
 		ret = 0;
 	} else {
 		/* not allowed to submit ops in any other state */
@@ -203,11 +203,11 @@ int fscache_submit_op(struct fscache_obj
 		if (object->n_exclusive > 0) {
 			atomic_inc(&op->usage);
 			list_add_tail(&op->pend_link, &object->pending_ops);
-			fscache_stat(&fscache_n_op_pend);
+			fscache_stat_unchecked(&fscache_n_op_pend);
 		} else if (!list_empty(&object->pending_ops)) {
 			atomic_inc(&op->usage);
 			list_add_tail(&op->pend_link, &object->pending_ops);
-			fscache_stat(&fscache_n_op_pend);
+			fscache_stat_unchecked(&fscache_n_op_pend);
 			fscache_start_operations(object);
 		} else {
 			ASSERTCMP(object->n_exclusive, ==, 0);
@@ -219,12 +219,12 @@ int fscache_submit_op(struct fscache_obj
 		object->n_ops++;
 		atomic_inc(&op->usage);
 		list_add_tail(&op->pend_link, &object->pending_ops);
-		fscache_stat(&fscache_n_op_pend);
+		fscache_stat_unchecked(&fscache_n_op_pend);
 		ret = 0;
 	} else if (object->state == FSCACHE_OBJECT_DYING ||
 		   object->state == FSCACHE_OBJECT_LC_DYING ||
 		   object->state == FSCACHE_OBJECT_WITHDRAWING) {
-		fscache_stat(&fscache_n_op_rejected);
+		fscache_stat_unchecked(&fscache_n_op_rejected);
 		ret = -ENOBUFS;
 	} else if (!test_bit(FSCACHE_IOERROR, &object->cache->flags)) {
 		fscache_report_unexpected_submission(object, op, ostate);
@@ -294,7 +294,7 @@ int fscache_cancel_op(struct fscache_ope
 
 	ret = -EBUSY;
 	if (!list_empty(&op->pend_link)) {
-		fscache_stat(&fscache_n_op_cancelled);
+		fscache_stat_unchecked(&fscache_n_op_cancelled);
 		list_del_init(&op->pend_link);
 		object->n_ops--;
 		if (test_bit(FSCACHE_OP_EXCLUSIVE, &op->flags))
@@ -331,7 +331,7 @@ void fscache_put_operation(struct fscach
 	if (test_and_set_bit(FSCACHE_OP_DEAD, &op->flags))
 		BUG();
 
-	fscache_stat(&fscache_n_op_release);
+	fscache_stat_unchecked(&fscache_n_op_release);
 
 	if (op->release) {
 		op->release(op);
@@ -348,7 +348,7 @@ void fscache_put_operation(struct fscach
 	 * lock, and defer it otherwise */
 	if (!spin_trylock(&object->lock)) {
 		_debug("defer put");
-		fscache_stat(&fscache_n_op_deferred_release);
+		fscache_stat_unchecked(&fscache_n_op_deferred_release);
 
 		cache = object->cache;
 		spin_lock(&cache->op_gc_list_lock);
@@ -410,7 +410,7 @@ void fscache_operation_gc(struct work_st
 
 		_debug("GC DEFERRED REL OBJ%x OP%x",
 		       object->debug_id, op->debug_id);
-		fscache_stat(&fscache_n_op_gc);
+		fscache_stat_unchecked(&fscache_n_op_gc);
 
 		ASSERTCMP(atomic_read(&op->usage), ==, 0);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/fscache/page.c linux-3.3.8-pax/fs/fscache/page.c
--- linux-3.3.8/fs/fscache/page.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/fs/fscache/page.c	2012-03-19 10:43:44.264034635 +0100
@@ -60,7 +60,7 @@ bool __fscache_maybe_release_page(struct
 	val = radix_tree_lookup(&cookie->stores, page->index);
 	if (!val) {
 		rcu_read_unlock();
-		fscache_stat(&fscache_n_store_vmscan_not_storing);
+		fscache_stat_unchecked(&fscache_n_store_vmscan_not_storing);
 		__fscache_uncache_page(cookie, page);
 		return true;
 	}
@@ -90,11 +90,11 @@ bool __fscache_maybe_release_page(struct
 	spin_unlock(&cookie->stores_lock);
 
 	if (xpage) {
-		fscache_stat(&fscache_n_store_vmscan_cancelled);
-		fscache_stat(&fscache_n_store_radix_deletes);
+		fscache_stat_unchecked(&fscache_n_store_vmscan_cancelled);
+		fscache_stat_unchecked(&fscache_n_store_radix_deletes);
 		ASSERTCMP(xpage, ==, page);
 	} else {
-		fscache_stat(&fscache_n_store_vmscan_gone);
+		fscache_stat_unchecked(&fscache_n_store_vmscan_gone);
 	}
 
 	wake_up_bit(&cookie->flags, 0);
@@ -107,7 +107,7 @@ page_busy:
 	/* we might want to wait here, but that could deadlock the allocator as
 	 * the work threads writing to the cache may all end up sleeping
 	 * on memory allocation */
-	fscache_stat(&fscache_n_store_vmscan_busy);
+	fscache_stat_unchecked(&fscache_n_store_vmscan_busy);
 	return false;
 }
 EXPORT_SYMBOL(__fscache_maybe_release_page);
@@ -131,7 +131,7 @@ static void fscache_end_page_write(struc
 				     FSCACHE_COOKIE_STORING_TAG);
 		if (!radix_tree_tag_get(&cookie->stores, page->index,
 					FSCACHE_COOKIE_PENDING_TAG)) {
-			fscache_stat(&fscache_n_store_radix_deletes);
+			fscache_stat_unchecked(&fscache_n_store_radix_deletes);
 			xpage = radix_tree_delete(&cookie->stores, page->index);
 		}
 		spin_unlock(&cookie->stores_lock);
@@ -152,7 +152,7 @@ static void fscache_attr_changed_op(stru
 
 	_enter("{OBJ%x OP%x}", object->debug_id, op->debug_id);
 
-	fscache_stat(&fscache_n_attr_changed_calls);
+	fscache_stat_unchecked(&fscache_n_attr_changed_calls);
 
 	if (fscache_object_is_active(object)) {
 		fscache_stat(&fscache_n_cop_attr_changed);
@@ -177,11 +177,11 @@ int __fscache_attr_changed(struct fscach
 
 	ASSERTCMP(cookie->def->type, !=, FSCACHE_COOKIE_TYPE_INDEX);
 
-	fscache_stat(&fscache_n_attr_changed);
+	fscache_stat_unchecked(&fscache_n_attr_changed);
 
 	op = kzalloc(sizeof(*op), GFP_KERNEL);
 	if (!op) {
-		fscache_stat(&fscache_n_attr_changed_nomem);
+		fscache_stat_unchecked(&fscache_n_attr_changed_nomem);
 		_leave(" = -ENOMEM");
 		return -ENOMEM;
 	}
@@ -199,7 +199,7 @@ int __fscache_attr_changed(struct fscach
 	if (fscache_submit_exclusive_op(object, op) < 0)
 		goto nobufs;
 	spin_unlock(&cookie->lock);
-	fscache_stat(&fscache_n_attr_changed_ok);
+	fscache_stat_unchecked(&fscache_n_attr_changed_ok);
 	fscache_put_operation(op);
 	_leave(" = 0");
 	return 0;
@@ -207,7 +207,7 @@ int __fscache_attr_changed(struct fscach
 nobufs:
 	spin_unlock(&cookie->lock);
 	kfree(op);
-	fscache_stat(&fscache_n_attr_changed_nobufs);
+	fscache_stat_unchecked(&fscache_n_attr_changed_nobufs);
 	_leave(" = %d", -ENOBUFS);
 	return -ENOBUFS;
 }
@@ -243,7 +243,7 @@ static struct fscache_retrieval *fscache
 	/* allocate a retrieval operation and attempt to submit it */
 	op = kzalloc(sizeof(*op), GFP_NOIO);
 	if (!op) {
-		fscache_stat(&fscache_n_retrievals_nomem);
+		fscache_stat_unchecked(&fscache_n_retrievals_nomem);
 		return NULL;
 	}
 
@@ -271,13 +271,13 @@ static int fscache_wait_for_deferred_loo
 		return 0;
 	}
 
-	fscache_stat(&fscache_n_retrievals_wait);
+	fscache_stat_unchecked(&fscache_n_retrievals_wait);
 
 	jif = jiffies;
 	if (wait_on_bit(&cookie->flags, FSCACHE_COOKIE_LOOKING_UP,
 			fscache_wait_bit_interruptible,
 			TASK_INTERRUPTIBLE) != 0) {
-		fscache_stat(&fscache_n_retrievals_intr);
+		fscache_stat_unchecked(&fscache_n_retrievals_intr);
 		_leave(" = -ERESTARTSYS");
 		return -ERESTARTSYS;
 	}
@@ -295,8 +295,8 @@ static int fscache_wait_for_deferred_loo
  */
 static int fscache_wait_for_retrieval_activation(struct fscache_object *object,
 						 struct fscache_retrieval *op,
-						 atomic_t *stat_op_waits,
-						 atomic_t *stat_object_dead)
+						 atomic_unchecked_t *stat_op_waits,
+						 atomic_unchecked_t *stat_object_dead)
 {
 	int ret;
 
@@ -304,7 +304,7 @@ static int fscache_wait_for_retrieval_ac
 		goto check_if_dead;
 
 	_debug(">>> WT");
-	fscache_stat(stat_op_waits);
+	fscache_stat_unchecked(stat_op_waits);
 	if (wait_on_bit(&op->op.flags, FSCACHE_OP_WAITING,
 			fscache_wait_bit_interruptible,
 			TASK_INTERRUPTIBLE) < 0) {
@@ -321,7 +321,7 @@ static int fscache_wait_for_retrieval_ac
 
 check_if_dead:
 	if (unlikely(fscache_object_is_dead(object))) {
-		fscache_stat(stat_object_dead);
+		fscache_stat_unchecked(stat_object_dead);
 		return -ENOBUFS;
 	}
 	return 0;
@@ -348,7 +348,7 @@ int __fscache_read_or_alloc_page(struct
 
 	_enter("%p,%p,,,", cookie, page);
 
-	fscache_stat(&fscache_n_retrievals);
+	fscache_stat_unchecked(&fscache_n_retrievals);
 
 	if (hlist_empty(&cookie->backing_objects))
 		goto nobufs;
@@ -381,7 +381,7 @@ int __fscache_read_or_alloc_page(struct
 		goto nobufs_unlock;
 	spin_unlock(&cookie->lock);
 
-	fscache_stat(&fscache_n_retrieval_ops);
+	fscache_stat_unchecked(&fscache_n_retrieval_ops);
 
 	/* pin the netfs read context in case we need to do the actual netfs
 	 * read because we've encountered a cache read failure */
@@ -411,15 +411,15 @@ int __fscache_read_or_alloc_page(struct
 
 error:
 	if (ret == -ENOMEM)
-		fscache_stat(&fscache_n_retrievals_nomem);
+		fscache_stat_unchecked(&fscache_n_retrievals_nomem);
 	else if (ret == -ERESTARTSYS)
-		fscache_stat(&fscache_n_retrievals_intr);
+		fscache_stat_unchecked(&fscache_n_retrievals_intr);
 	else if (ret == -ENODATA)
-		fscache_stat(&fscache_n_retrievals_nodata);
+		fscache_stat_unchecked(&fscache_n_retrievals_nodata);
 	else if (ret < 0)
-		fscache_stat(&fscache_n_retrievals_nobufs);
+		fscache_stat_unchecked(&fscache_n_retrievals_nobufs);
 	else
-		fscache_stat(&fscache_n_retrievals_ok);
+		fscache_stat_unchecked(&fscache_n_retrievals_ok);
 
 	fscache_put_retrieval(op);
 	_leave(" = %d", ret);
@@ -429,7 +429,7 @@ nobufs_unlock:
 	spin_unlock(&cookie->lock);
 	kfree(op);
 nobufs:
-	fscache_stat(&fscache_n_retrievals_nobufs);
+	fscache_stat_unchecked(&fscache_n_retrievals_nobufs);
 	_leave(" = -ENOBUFS");
 	return -ENOBUFS;
 }
@@ -467,7 +467,7 @@ int __fscache_read_or_alloc_pages(struct
 
 	_enter("%p,,%d,,,", cookie, *nr_pages);
 
-	fscache_stat(&fscache_n_retrievals);
+	fscache_stat_unchecked(&fscache_n_retrievals);
 
 	if (hlist_empty(&cookie->backing_objects))
 		goto nobufs;
@@ -497,7 +497,7 @@ int __fscache_read_or_alloc_pages(struct
 		goto nobufs_unlock;
 	spin_unlock(&cookie->lock);
 
-	fscache_stat(&fscache_n_retrieval_ops);
+	fscache_stat_unchecked(&fscache_n_retrieval_ops);
 
 	/* pin the netfs read context in case we need to do the actual netfs
 	 * read because we've encountered a cache read failure */
@@ -527,15 +527,15 @@ int __fscache_read_or_alloc_pages(struct
 
 error:
 	if (ret == -ENOMEM)
-		fscache_stat(&fscache_n_retrievals_nomem);
+		fscache_stat_unchecked(&fscache_n_retrievals_nomem);
 	else if (ret == -ERESTARTSYS)
-		fscache_stat(&fscache_n_retrievals_intr);
+		fscache_stat_unchecked(&fscache_n_retrievals_intr);
 	else if (ret == -ENODATA)
-		fscache_stat(&fscache_n_retrievals_nodata);
+		fscache_stat_unchecked(&fscache_n_retrievals_nodata);
 	else if (ret < 0)
-		fscache_stat(&fscache_n_retrievals_nobufs);
+		fscache_stat_unchecked(&fscache_n_retrievals_nobufs);
 	else
-		fscache_stat(&fscache_n_retrievals_ok);
+		fscache_stat_unchecked(&fscache_n_retrievals_ok);
 
 	fscache_put_retrieval(op);
 	_leave(" = %d", ret);
@@ -545,7 +545,7 @@ nobufs_unlock:
 	spin_unlock(&cookie->lock);
 	kfree(op);
 nobufs:
-	fscache_stat(&fscache_n_retrievals_nobufs);
+	fscache_stat_unchecked(&fscache_n_retrievals_nobufs);
 	_leave(" = -ENOBUFS");
 	return -ENOBUFS;
 }
@@ -569,7 +569,7 @@ int __fscache_alloc_page(struct fscache_
 
 	_enter("%p,%p,,,", cookie, page);
 
-	fscache_stat(&fscache_n_allocs);
+	fscache_stat_unchecked(&fscache_n_allocs);
 
 	if (hlist_empty(&cookie->backing_objects))
 		goto nobufs;
@@ -595,7 +595,7 @@ int __fscache_alloc_page(struct fscache_
 		goto nobufs_unlock;
 	spin_unlock(&cookie->lock);
 
-	fscache_stat(&fscache_n_alloc_ops);
+	fscache_stat_unchecked(&fscache_n_alloc_ops);
 
 	ret = fscache_wait_for_retrieval_activation(
 		object, op,
@@ -611,11 +611,11 @@ int __fscache_alloc_page(struct fscache_
 
 error:
 	if (ret == -ERESTARTSYS)
-		fscache_stat(&fscache_n_allocs_intr);
+		fscache_stat_unchecked(&fscache_n_allocs_intr);
 	else if (ret < 0)
-		fscache_stat(&fscache_n_allocs_nobufs);
+		fscache_stat_unchecked(&fscache_n_allocs_nobufs);
 	else
-		fscache_stat(&fscache_n_allocs_ok);
+		fscache_stat_unchecked(&fscache_n_allocs_ok);
 
 	fscache_put_retrieval(op);
 	_leave(" = %d", ret);
@@ -625,7 +625,7 @@ nobufs_unlock:
 	spin_unlock(&cookie->lock);
 	kfree(op);
 nobufs:
-	fscache_stat(&fscache_n_allocs_nobufs);
+	fscache_stat_unchecked(&fscache_n_allocs_nobufs);
 	_leave(" = -ENOBUFS");
 	return -ENOBUFS;
 }
@@ -666,7 +666,7 @@ static void fscache_write_op(struct fsca
 
 	spin_lock(&cookie->stores_lock);
 
-	fscache_stat(&fscache_n_store_calls);
+	fscache_stat_unchecked(&fscache_n_store_calls);
 
 	/* find a page to store */
 	page = NULL;
@@ -677,7 +677,7 @@ static void fscache_write_op(struct fsca
 	page = results[0];
 	_debug("gang %d [%lx]", n, page->index);
 	if (page->index > op->store_limit) {
-		fscache_stat(&fscache_n_store_pages_over_limit);
+		fscache_stat_unchecked(&fscache_n_store_pages_over_limit);
 		goto superseded;
 	}
 
@@ -689,7 +689,7 @@ static void fscache_write_op(struct fsca
 	spin_unlock(&cookie->stores_lock);
 	spin_unlock(&object->lock);
 
-	fscache_stat(&fscache_n_store_pages);
+	fscache_stat_unchecked(&fscache_n_store_pages);
 	fscache_stat(&fscache_n_cop_write_page);
 	ret = object->cache->ops->write_page(op, page);
 	fscache_stat_d(&fscache_n_cop_write_page);
@@ -757,7 +757,7 @@ int __fscache_write_page(struct fscache_
 	ASSERTCMP(cookie->def->type, !=, FSCACHE_COOKIE_TYPE_INDEX);
 	ASSERT(PageFsCache(page));
 
-	fscache_stat(&fscache_n_stores);
+	fscache_stat_unchecked(&fscache_n_stores);
 
 	op = kzalloc(sizeof(*op), GFP_NOIO);
 	if (!op)
@@ -808,7 +808,7 @@ int __fscache_write_page(struct fscache_
 	spin_unlock(&cookie->stores_lock);
 	spin_unlock(&object->lock);
 
-	op->op.debug_id	= atomic_inc_return(&fscache_op_debug_id);
+	op->op.debug_id	= atomic_inc_return_unchecked(&fscache_op_debug_id);
 	op->store_limit = object->store_limit;
 
 	if (fscache_submit_op(object, &op->op) < 0)
@@ -816,8 +816,8 @@ int __fscache_write_page(struct fscache_
 
 	spin_unlock(&cookie->lock);
 	radix_tree_preload_end();
-	fscache_stat(&fscache_n_store_ops);
-	fscache_stat(&fscache_n_stores_ok);
+	fscache_stat_unchecked(&fscache_n_store_ops);
+	fscache_stat_unchecked(&fscache_n_stores_ok);
 
 	/* the work queue now carries its own ref on the object */
 	fscache_put_operation(&op->op);
@@ -825,14 +825,14 @@ int __fscache_write_page(struct fscache_
 	return 0;
 
 already_queued:
-	fscache_stat(&fscache_n_stores_again);
+	fscache_stat_unchecked(&fscache_n_stores_again);
 already_pending:
 	spin_unlock(&cookie->stores_lock);
 	spin_unlock(&object->lock);
 	spin_unlock(&cookie->lock);
 	radix_tree_preload_end();
 	kfree(op);
-	fscache_stat(&fscache_n_stores_ok);
+	fscache_stat_unchecked(&fscache_n_stores_ok);
 	_leave(" = 0");
 	return 0;
 
@@ -851,14 +851,14 @@ nobufs:
 	spin_unlock(&cookie->lock);
 	radix_tree_preload_end();
 	kfree(op);
-	fscache_stat(&fscache_n_stores_nobufs);
+	fscache_stat_unchecked(&fscache_n_stores_nobufs);
 	_leave(" = -ENOBUFS");
 	return -ENOBUFS;
 
 nomem_free:
 	kfree(op);
 nomem:
-	fscache_stat(&fscache_n_stores_oom);
+	fscache_stat_unchecked(&fscache_n_stores_oom);
 	_leave(" = -ENOMEM");
 	return -ENOMEM;
 }
@@ -876,7 +876,7 @@ void __fscache_uncache_page(struct fscac
 	ASSERTCMP(cookie->def->type, !=, FSCACHE_COOKIE_TYPE_INDEX);
 	ASSERTCMP(page, !=, NULL);
 
-	fscache_stat(&fscache_n_uncaches);
+	fscache_stat_unchecked(&fscache_n_uncaches);
 
 	/* cache withdrawal may beat us to it */
 	if (!PageFsCache(page))
@@ -929,7 +929,7 @@ void fscache_mark_pages_cached(struct fs
 	unsigned long loop;
 
 #ifdef CONFIG_FSCACHE_STATS
-	atomic_add(pagevec->nr, &fscache_n_marks);
+	atomic_add_unchecked(pagevec->nr, &fscache_n_marks);
 #endif
 
 	for (loop = 0; loop < pagevec->nr; loop++) {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/fscache/stats.c linux-3.3.8-pax/fs/fscache/stats.c
--- linux-3.3.8/fs/fscache/stats.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/fs/fscache/stats.c	2012-03-19 10:43:44.264034635 +0100
@@ -18,95 +18,95 @@
 /*
  * operation counters
  */
-atomic_t fscache_n_op_pend;
-atomic_t fscache_n_op_run;
-atomic_t fscache_n_op_enqueue;
-atomic_t fscache_n_op_requeue;
-atomic_t fscache_n_op_deferred_release;
-atomic_t fscache_n_op_release;
-atomic_t fscache_n_op_gc;
-atomic_t fscache_n_op_cancelled;
-atomic_t fscache_n_op_rejected;
-
-atomic_t fscache_n_attr_changed;
-atomic_t fscache_n_attr_changed_ok;
-atomic_t fscache_n_attr_changed_nobufs;
-atomic_t fscache_n_attr_changed_nomem;
-atomic_t fscache_n_attr_changed_calls;
-
-atomic_t fscache_n_allocs;
-atomic_t fscache_n_allocs_ok;
-atomic_t fscache_n_allocs_wait;
-atomic_t fscache_n_allocs_nobufs;
-atomic_t fscache_n_allocs_intr;
-atomic_t fscache_n_allocs_object_dead;
-atomic_t fscache_n_alloc_ops;
-atomic_t fscache_n_alloc_op_waits;
-
-atomic_t fscache_n_retrievals;
-atomic_t fscache_n_retrievals_ok;
-atomic_t fscache_n_retrievals_wait;
-atomic_t fscache_n_retrievals_nodata;
-atomic_t fscache_n_retrievals_nobufs;
-atomic_t fscache_n_retrievals_intr;
-atomic_t fscache_n_retrievals_nomem;
-atomic_t fscache_n_retrievals_object_dead;
-atomic_t fscache_n_retrieval_ops;
-atomic_t fscache_n_retrieval_op_waits;
-
-atomic_t fscache_n_stores;
-atomic_t fscache_n_stores_ok;
-atomic_t fscache_n_stores_again;
-atomic_t fscache_n_stores_nobufs;
-atomic_t fscache_n_stores_oom;
-atomic_t fscache_n_store_ops;
-atomic_t fscache_n_store_calls;
-atomic_t fscache_n_store_pages;
-atomic_t fscache_n_store_radix_deletes;
-atomic_t fscache_n_store_pages_over_limit;
-
-atomic_t fscache_n_store_vmscan_not_storing;
-atomic_t fscache_n_store_vmscan_gone;
-atomic_t fscache_n_store_vmscan_busy;
-atomic_t fscache_n_store_vmscan_cancelled;
-
-atomic_t fscache_n_marks;
-atomic_t fscache_n_uncaches;
-
-atomic_t fscache_n_acquires;
-atomic_t fscache_n_acquires_null;
-atomic_t fscache_n_acquires_no_cache;
-atomic_t fscache_n_acquires_ok;
-atomic_t fscache_n_acquires_nobufs;
-atomic_t fscache_n_acquires_oom;
-
-atomic_t fscache_n_updates;
-atomic_t fscache_n_updates_null;
-atomic_t fscache_n_updates_run;
-
-atomic_t fscache_n_relinquishes;
-atomic_t fscache_n_relinquishes_null;
-atomic_t fscache_n_relinquishes_waitcrt;
-atomic_t fscache_n_relinquishes_retire;
-
-atomic_t fscache_n_cookie_index;
-atomic_t fscache_n_cookie_data;
-atomic_t fscache_n_cookie_special;
-
-atomic_t fscache_n_object_alloc;
-atomic_t fscache_n_object_no_alloc;
-atomic_t fscache_n_object_lookups;
-atomic_t fscache_n_object_lookups_negative;
-atomic_t fscache_n_object_lookups_positive;
-atomic_t fscache_n_object_lookups_timed_out;
-atomic_t fscache_n_object_created;
-atomic_t fscache_n_object_avail;
-atomic_t fscache_n_object_dead;
-
-atomic_t fscache_n_checkaux_none;
-atomic_t fscache_n_checkaux_okay;
-atomic_t fscache_n_checkaux_update;
-atomic_t fscache_n_checkaux_obsolete;
+atomic_unchecked_t fscache_n_op_pend;
+atomic_unchecked_t fscache_n_op_run;
+atomic_unchecked_t fscache_n_op_enqueue;
+atomic_unchecked_t fscache_n_op_requeue;
+atomic_unchecked_t fscache_n_op_deferred_release;
+atomic_unchecked_t fscache_n_op_release;
+atomic_unchecked_t fscache_n_op_gc;
+atomic_unchecked_t fscache_n_op_cancelled;
+atomic_unchecked_t fscache_n_op_rejected;
+
+atomic_unchecked_t fscache_n_attr_changed;
+atomic_unchecked_t fscache_n_attr_changed_ok;
+atomic_unchecked_t fscache_n_attr_changed_nobufs;
+atomic_unchecked_t fscache_n_attr_changed_nomem;
+atomic_unchecked_t fscache_n_attr_changed_calls;
+
+atomic_unchecked_t fscache_n_allocs;
+atomic_unchecked_t fscache_n_allocs_ok;
+atomic_unchecked_t fscache_n_allocs_wait;
+atomic_unchecked_t fscache_n_allocs_nobufs;
+atomic_unchecked_t fscache_n_allocs_intr;
+atomic_unchecked_t fscache_n_allocs_object_dead;
+atomic_unchecked_t fscache_n_alloc_ops;
+atomic_unchecked_t fscache_n_alloc_op_waits;
+
+atomic_unchecked_t fscache_n_retrievals;
+atomic_unchecked_t fscache_n_retrievals_ok;
+atomic_unchecked_t fscache_n_retrievals_wait;
+atomic_unchecked_t fscache_n_retrievals_nodata;
+atomic_unchecked_t fscache_n_retrievals_nobufs;
+atomic_unchecked_t fscache_n_retrievals_intr;
+atomic_unchecked_t fscache_n_retrievals_nomem;
+atomic_unchecked_t fscache_n_retrievals_object_dead;
+atomic_unchecked_t fscache_n_retrieval_ops;
+atomic_unchecked_t fscache_n_retrieval_op_waits;
+
+atomic_unchecked_t fscache_n_stores;
+atomic_unchecked_t fscache_n_stores_ok;
+atomic_unchecked_t fscache_n_stores_again;
+atomic_unchecked_t fscache_n_stores_nobufs;
+atomic_unchecked_t fscache_n_stores_oom;
+atomic_unchecked_t fscache_n_store_ops;
+atomic_unchecked_t fscache_n_store_calls;
+atomic_unchecked_t fscache_n_store_pages;
+atomic_unchecked_t fscache_n_store_radix_deletes;
+atomic_unchecked_t fscache_n_store_pages_over_limit;
+
+atomic_unchecked_t fscache_n_store_vmscan_not_storing;
+atomic_unchecked_t fscache_n_store_vmscan_gone;
+atomic_unchecked_t fscache_n_store_vmscan_busy;
+atomic_unchecked_t fscache_n_store_vmscan_cancelled;
+
+atomic_unchecked_t fscache_n_marks;
+atomic_unchecked_t fscache_n_uncaches;
+
+atomic_unchecked_t fscache_n_acquires;
+atomic_unchecked_t fscache_n_acquires_null;
+atomic_unchecked_t fscache_n_acquires_no_cache;
+atomic_unchecked_t fscache_n_acquires_ok;
+atomic_unchecked_t fscache_n_acquires_nobufs;
+atomic_unchecked_t fscache_n_acquires_oom;
+
+atomic_unchecked_t fscache_n_updates;
+atomic_unchecked_t fscache_n_updates_null;
+atomic_unchecked_t fscache_n_updates_run;
+
+atomic_unchecked_t fscache_n_relinquishes;
+atomic_unchecked_t fscache_n_relinquishes_null;
+atomic_unchecked_t fscache_n_relinquishes_waitcrt;
+atomic_unchecked_t fscache_n_relinquishes_retire;
+
+atomic_unchecked_t fscache_n_cookie_index;
+atomic_unchecked_t fscache_n_cookie_data;
+atomic_unchecked_t fscache_n_cookie_special;
+
+atomic_unchecked_t fscache_n_object_alloc;
+atomic_unchecked_t fscache_n_object_no_alloc;
+atomic_unchecked_t fscache_n_object_lookups;
+atomic_unchecked_t fscache_n_object_lookups_negative;
+atomic_unchecked_t fscache_n_object_lookups_positive;
+atomic_unchecked_t fscache_n_object_lookups_timed_out;
+atomic_unchecked_t fscache_n_object_created;
+atomic_unchecked_t fscache_n_object_avail;
+atomic_unchecked_t fscache_n_object_dead;
+
+atomic_unchecked_t fscache_n_checkaux_none;
+atomic_unchecked_t fscache_n_checkaux_okay;
+atomic_unchecked_t fscache_n_checkaux_update;
+atomic_unchecked_t fscache_n_checkaux_obsolete;
 
 atomic_t fscache_n_cop_alloc_object;
 atomic_t fscache_n_cop_lookup_object;
@@ -133,113 +133,113 @@ static int fscache_stats_show(struct seq
 	seq_puts(m, "FS-Cache statistics\n");
 
 	seq_printf(m, "Cookies: idx=%u dat=%u spc=%u\n",
-		   atomic_read(&fscache_n_cookie_index),
-		   atomic_read(&fscache_n_cookie_data),
-		   atomic_read(&fscache_n_cookie_special));
+		   atomic_read_unchecked(&fscache_n_cookie_index),
+		   atomic_read_unchecked(&fscache_n_cookie_data),
+		   atomic_read_unchecked(&fscache_n_cookie_special));
 
 	seq_printf(m, "Objects: alc=%u nal=%u avl=%u ded=%u\n",
-		   atomic_read(&fscache_n_object_alloc),
-		   atomic_read(&fscache_n_object_no_alloc),
-		   atomic_read(&fscache_n_object_avail),
-		   atomic_read(&fscache_n_object_dead));
+		   atomic_read_unchecked(&fscache_n_object_alloc),
+		   atomic_read_unchecked(&fscache_n_object_no_alloc),
+		   atomic_read_unchecked(&fscache_n_object_avail),
+		   atomic_read_unchecked(&fscache_n_object_dead));
 	seq_printf(m, "ChkAux : non=%u ok=%u upd=%u obs=%u\n",
-		   atomic_read(&fscache_n_checkaux_none),
-		   atomic_read(&fscache_n_checkaux_okay),
-		   atomic_read(&fscache_n_checkaux_update),
-		   atomic_read(&fscache_n_checkaux_obsolete));
+		   atomic_read_unchecked(&fscache_n_checkaux_none),
+		   atomic_read_unchecked(&fscache_n_checkaux_okay),
+		   atomic_read_unchecked(&fscache_n_checkaux_update),
+		   atomic_read_unchecked(&fscache_n_checkaux_obsolete));
 
 	seq_printf(m, "Pages  : mrk=%u unc=%u\n",
-		   atomic_read(&fscache_n_marks),
-		   atomic_read(&fscache_n_uncaches));
+		   atomic_read_unchecked(&fscache_n_marks),
+		   atomic_read_unchecked(&fscache_n_uncaches));
 
 	seq_printf(m, "Acquire: n=%u nul=%u noc=%u ok=%u nbf=%u"
 		   " oom=%u\n",
-		   atomic_read(&fscache_n_acquires),
-		   atomic_read(&fscache_n_acquires_null),
-		   atomic_read(&fscache_n_acquires_no_cache),
-		   atomic_read(&fscache_n_acquires_ok),
-		   atomic_read(&fscache_n_acquires_nobufs),
-		   atomic_read(&fscache_n_acquires_oom));
+		   atomic_read_unchecked(&fscache_n_acquires),
+		   atomic_read_unchecked(&fscache_n_acquires_null),
+		   atomic_read_unchecked(&fscache_n_acquires_no_cache),
+		   atomic_read_unchecked(&fscache_n_acquires_ok),
+		   atomic_read_unchecked(&fscache_n_acquires_nobufs),
+		   atomic_read_unchecked(&fscache_n_acquires_oom));
 
 	seq_printf(m, "Lookups: n=%u neg=%u pos=%u crt=%u tmo=%u\n",
-		   atomic_read(&fscache_n_object_lookups),
-		   atomic_read(&fscache_n_object_lookups_negative),
-		   atomic_read(&fscache_n_object_lookups_positive),
-		   atomic_read(&fscache_n_object_created),
-		   atomic_read(&fscache_n_object_lookups_timed_out));
+		   atomic_read_unchecked(&fscache_n_object_lookups),
+		   atomic_read_unchecked(&fscache_n_object_lookups_negative),
+		   atomic_read_unchecked(&fscache_n_object_lookups_positive),
+		   atomic_read_unchecked(&fscache_n_object_created),
+		   atomic_read_unchecked(&fscache_n_object_lookups_timed_out));
 
 	seq_printf(m, "Updates: n=%u nul=%u run=%u\n",
-		   atomic_read(&fscache_n_updates),
-		   atomic_read(&fscache_n_updates_null),
-		   atomic_read(&fscache_n_updates_run));
+		   atomic_read_unchecked(&fscache_n_updates),
+		   atomic_read_unchecked(&fscache_n_updates_null),
+		   atomic_read_unchecked(&fscache_n_updates_run));
 
 	seq_printf(m, "Relinqs: n=%u nul=%u wcr=%u rtr=%u\n",
-		   atomic_read(&fscache_n_relinquishes),
-		   atomic_read(&fscache_n_relinquishes_null),
-		   atomic_read(&fscache_n_relinquishes_waitcrt),
-		   atomic_read(&fscache_n_relinquishes_retire));
+		   atomic_read_unchecked(&fscache_n_relinquishes),
+		   atomic_read_unchecked(&fscache_n_relinquishes_null),
+		   atomic_read_unchecked(&fscache_n_relinquishes_waitcrt),
+		   atomic_read_unchecked(&fscache_n_relinquishes_retire));
 
 	seq_printf(m, "AttrChg: n=%u ok=%u nbf=%u oom=%u run=%u\n",
-		   atomic_read(&fscache_n_attr_changed),
-		   atomic_read(&fscache_n_attr_changed_ok),
-		   atomic_read(&fscache_n_attr_changed_nobufs),
-		   atomic_read(&fscache_n_attr_changed_nomem),
-		   atomic_read(&fscache_n_attr_changed_calls));
+		   atomic_read_unchecked(&fscache_n_attr_changed),
+		   atomic_read_unchecked(&fscache_n_attr_changed_ok),
+		   atomic_read_unchecked(&fscache_n_attr_changed_nobufs),
+		   atomic_read_unchecked(&fscache_n_attr_changed_nomem),
+		   atomic_read_unchecked(&fscache_n_attr_changed_calls));
 
 	seq_printf(m, "Allocs : n=%u ok=%u wt=%u nbf=%u int=%u\n",
-		   atomic_read(&fscache_n_allocs),
-		   atomic_read(&fscache_n_allocs_ok),
-		   atomic_read(&fscache_n_allocs_wait),
-		   atomic_read(&fscache_n_allocs_nobufs),
-		   atomic_read(&fscache_n_allocs_intr));
+		   atomic_read_unchecked(&fscache_n_allocs),
+		   atomic_read_unchecked(&fscache_n_allocs_ok),
+		   atomic_read_unchecked(&fscache_n_allocs_wait),
+		   atomic_read_unchecked(&fscache_n_allocs_nobufs),
+		   atomic_read_unchecked(&fscache_n_allocs_intr));
 	seq_printf(m, "Allocs : ops=%u owt=%u abt=%u\n",
-		   atomic_read(&fscache_n_alloc_ops),
-		   atomic_read(&fscache_n_alloc_op_waits),
-		   atomic_read(&fscache_n_allocs_object_dead));
+		   atomic_read_unchecked(&fscache_n_alloc_ops),
+		   atomic_read_unchecked(&fscache_n_alloc_op_waits),
+		   atomic_read_unchecked(&fscache_n_allocs_object_dead));
 
 	seq_printf(m, "Retrvls: n=%u ok=%u wt=%u nod=%u nbf=%u"
 		   " int=%u oom=%u\n",
-		   atomic_read(&fscache_n_retrievals),
-		   atomic_read(&fscache_n_retrievals_ok),
-		   atomic_read(&fscache_n_retrievals_wait),
-		   atomic_read(&fscache_n_retrievals_nodata),
-		   atomic_read(&fscache_n_retrievals_nobufs),
-		   atomic_read(&fscache_n_retrievals_intr),
-		   atomic_read(&fscache_n_retrievals_nomem));
+		   atomic_read_unchecked(&fscache_n_retrievals),
+		   atomic_read_unchecked(&fscache_n_retrievals_ok),
+		   atomic_read_unchecked(&fscache_n_retrievals_wait),
+		   atomic_read_unchecked(&fscache_n_retrievals_nodata),
+		   atomic_read_unchecked(&fscache_n_retrievals_nobufs),
+		   atomic_read_unchecked(&fscache_n_retrievals_intr),
+		   atomic_read_unchecked(&fscache_n_retrievals_nomem));
 	seq_printf(m, "Retrvls: ops=%u owt=%u abt=%u\n",
-		   atomic_read(&fscache_n_retrieval_ops),
-		   atomic_read(&fscache_n_retrieval_op_waits),
-		   atomic_read(&fscache_n_retrievals_object_dead));
+		   atomic_read_unchecked(&fscache_n_retrieval_ops),
+		   atomic_read_unchecked(&fscache_n_retrieval_op_waits),
+		   atomic_read_unchecked(&fscache_n_retrievals_object_dead));
 
 	seq_printf(m, "Stores : n=%u ok=%u agn=%u nbf=%u oom=%u\n",
-		   atomic_read(&fscache_n_stores),
-		   atomic_read(&fscache_n_stores_ok),
-		   atomic_read(&fscache_n_stores_again),
-		   atomic_read(&fscache_n_stores_nobufs),
-		   atomic_read(&fscache_n_stores_oom));
+		   atomic_read_unchecked(&fscache_n_stores),
+		   atomic_read_unchecked(&fscache_n_stores_ok),
+		   atomic_read_unchecked(&fscache_n_stores_again),
+		   atomic_read_unchecked(&fscache_n_stores_nobufs),
+		   atomic_read_unchecked(&fscache_n_stores_oom));
 	seq_printf(m, "Stores : ops=%u run=%u pgs=%u rxd=%u olm=%u\n",
-		   atomic_read(&fscache_n_store_ops),
-		   atomic_read(&fscache_n_store_calls),
-		   atomic_read(&fscache_n_store_pages),
-		   atomic_read(&fscache_n_store_radix_deletes),
-		   atomic_read(&fscache_n_store_pages_over_limit));
+		   atomic_read_unchecked(&fscache_n_store_ops),
+		   atomic_read_unchecked(&fscache_n_store_calls),
+		   atomic_read_unchecked(&fscache_n_store_pages),
+		   atomic_read_unchecked(&fscache_n_store_radix_deletes),
+		   atomic_read_unchecked(&fscache_n_store_pages_over_limit));
 
 	seq_printf(m, "VmScan : nos=%u gon=%u bsy=%u can=%u\n",
-		   atomic_read(&fscache_n_store_vmscan_not_storing),
-		   atomic_read(&fscache_n_store_vmscan_gone),
-		   atomic_read(&fscache_n_store_vmscan_busy),
-		   atomic_read(&fscache_n_store_vmscan_cancelled));
+		   atomic_read_unchecked(&fscache_n_store_vmscan_not_storing),
+		   atomic_read_unchecked(&fscache_n_store_vmscan_gone),
+		   atomic_read_unchecked(&fscache_n_store_vmscan_busy),
+		   atomic_read_unchecked(&fscache_n_store_vmscan_cancelled));
 
 	seq_printf(m, "Ops    : pend=%u run=%u enq=%u can=%u rej=%u\n",
-		   atomic_read(&fscache_n_op_pend),
-		   atomic_read(&fscache_n_op_run),
-		   atomic_read(&fscache_n_op_enqueue),
-		   atomic_read(&fscache_n_op_cancelled),
-		   atomic_read(&fscache_n_op_rejected));
+		   atomic_read_unchecked(&fscache_n_op_pend),
+		   atomic_read_unchecked(&fscache_n_op_run),
+		   atomic_read_unchecked(&fscache_n_op_enqueue),
+		   atomic_read_unchecked(&fscache_n_op_cancelled),
+		   atomic_read_unchecked(&fscache_n_op_rejected));
 	seq_printf(m, "Ops    : dfr=%u rel=%u gc=%u\n",
-		   atomic_read(&fscache_n_op_deferred_release),
-		   atomic_read(&fscache_n_op_release),
-		   atomic_read(&fscache_n_op_gc));
+		   atomic_read_unchecked(&fscache_n_op_deferred_release),
+		   atomic_read_unchecked(&fscache_n_op_release),
+		   atomic_read_unchecked(&fscache_n_op_gc));
 
 	seq_printf(m, "CacheOp: alo=%d luo=%d luc=%d gro=%d\n",
 		   atomic_read(&fscache_n_cop_alloc_object),
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/fs_struct.c linux-3.3.8-pax/fs/fs_struct.c
--- linux-3.3.8/fs/fs_struct.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/fs/fs_struct.c	2012-03-19 10:43:44.264034635 +0100
@@ -109,7 +109,7 @@ void exit_fs(struct task_struct *tsk)
 		spin_lock(&fs->lock);
 		write_seqcount_begin(&fs->seq);
 		tsk->fs = NULL;
-		kill = !--fs->users;
+		kill = !atomic_dec_return(&fs->users);
 		write_seqcount_end(&fs->seq);
 		spin_unlock(&fs->lock);
 		task_unlock(tsk);
@@ -123,7 +123,7 @@ struct fs_struct *copy_fs_struct(struct
 	struct fs_struct *fs = kmem_cache_alloc(fs_cachep, GFP_KERNEL);
 	/* We don't need to lock fs - think why ;-) */
 	if (fs) {
-		fs->users = 1;
+		atomic_set(&fs->users, 1);
 		fs->in_exec = 0;
 		spin_lock_init(&fs->lock);
 		seqcount_init(&fs->seq);
@@ -150,7 +150,7 @@ int unshare_fs_struct(void)
 
 	task_lock(current);
 	spin_lock(&fs->lock);
-	kill = !--fs->users;
+	kill = !atomic_dec_return(&fs->users);
 	current->fs = new_fs;
 	spin_unlock(&fs->lock);
 	task_unlock(current);
@@ -170,7 +170,7 @@ EXPORT_SYMBOL(current_umask);
 
 /* to be mentioned only in INIT_TASK */
 struct fs_struct init_fs = {
-	.users		= 1,
+	.users		= ATOMIC_INIT(1),
 	.lock		= __SPIN_LOCK_UNLOCKED(init_fs.lock),
 	.seq		= SEQCNT_ZERO,
 	.umask		= 0022,
@@ -186,12 +186,12 @@ void daemonize_fs_struct(void)
 		task_lock(current);
 
 		spin_lock(&init_fs.lock);
-		init_fs.users++;
+		atomic_inc(&init_fs.users);
 		spin_unlock(&init_fs.lock);
 
 		spin_lock(&fs->lock);
 		current->fs = &init_fs;
-		kill = !--fs->users;
+		kill = !atomic_dec_return(&fs->users);
 		spin_unlock(&fs->lock);
 
 		task_unlock(current);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/fuse/cuse.c linux-3.3.8-pax/fs/fuse/cuse.c
--- linux-3.3.8/fs/fuse/cuse.c	2012-01-08 19:48:24.807471101 +0100
+++ linux-3.3.8-pax/fs/fuse/cuse.c	2012-03-19 10:43:44.264034635 +0100
@@ -587,10 +587,12 @@ static int __init cuse_init(void)
 		INIT_LIST_HEAD(&cuse_conntbl[i]);
 
 	/* inherit and extend fuse_dev_operations */
-	cuse_channel_fops		= fuse_dev_operations;
-	cuse_channel_fops.owner		= THIS_MODULE;
-	cuse_channel_fops.open		= cuse_channel_open;
-	cuse_channel_fops.release	= cuse_channel_release;
+	pax_open_kernel();
+	memcpy((void *)&cuse_channel_fops, &fuse_dev_operations, sizeof(fuse_dev_operations));
+	*(void **)&cuse_channel_fops.owner	= THIS_MODULE;
+	*(void **)&cuse_channel_fops.open	= cuse_channel_open;
+	*(void **)&cuse_channel_fops.release	= cuse_channel_release;
+	pax_close_kernel();
 
 	cuse_class = class_create(THIS_MODULE, "cuse");
 	if (IS_ERR(cuse_class))
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/fuse/dev.c linux-3.3.8-pax/fs/fuse/dev.c
--- linux-3.3.8/fs/fuse/dev.c	2012-03-19 10:39:09.884049286 +0100
+++ linux-3.3.8-pax/fs/fuse/dev.c	2012-03-19 10:43:44.272034635 +0100
@@ -1242,7 +1242,7 @@ static ssize_t fuse_dev_splice_read(stru
 	ret = 0;
 	pipe_lock(pipe);
 
-	if (!pipe->readers) {
+	if (!atomic_read(&pipe->readers)) {
 		send_sig(SIGPIPE, current, 0);
 		if (!ret)
 			ret = -EPIPE;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/fuse/dir.c linux-3.3.8-pax/fs/fuse/dir.c
--- linux-3.3.8/fs/fuse/dir.c	2012-03-19 10:39:09.884049286 +0100
+++ linux-3.3.8-pax/fs/fuse/dir.c	2012-03-19 10:43:44.272034635 +0100
@@ -1175,7 +1175,7 @@ static char *read_link(struct dentry *de
 	return link;
 }
 
-static void free_link(char *link)
+static void free_link(const char *link)
 {
 	if (!IS_ERR(link))
 		free_page((unsigned long) link);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/gfs2/inode.c linux-3.3.8-pax/fs/gfs2/inode.c
--- linux-3.3.8/fs/gfs2/inode.c	2012-03-19 10:39:09.904049288 +0100
+++ linux-3.3.8-pax/fs/gfs2/inode.c	2012-03-19 10:43:44.272034636 +0100
@@ -1487,7 +1487,7 @@ out:
 
 static void gfs2_put_link(struct dentry *dentry, struct nameidata *nd, void *p)
 {
-	char *s = nd_get_link(nd);
+	const char *s = nd_get_link(nd);
 	if (!IS_ERR(s))
 		kfree(s);
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/inode.c linux-3.3.8-pax/fs/inode.c
--- linux-3.3.8/fs/inode.c	2012-03-19 10:39:09.944049286 +0100
+++ linux-3.3.8-pax/fs/inode.c	2012-03-19 10:43:44.272034636 +0100
@@ -870,8 +870,8 @@ unsigned int get_next_ino(void)
 
 #ifdef CONFIG_SMP
 	if (unlikely((res & (LAST_INO_BATCH-1)) == 0)) {
-		static atomic_t shared_last_ino;
-		int next = atomic_add_return(LAST_INO_BATCH, &shared_last_ino);
+		static atomic_unchecked_t shared_last_ino;
+		int next = atomic_add_return_unchecked(LAST_INO_BATCH, &shared_last_ino);
 
 		res = next - LAST_INO_BATCH;
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/jffs2/erase.c linux-3.3.8-pax/fs/jffs2/erase.c
--- linux-3.3.8/fs/jffs2/erase.c	2012-03-19 10:39:09.996049279 +0100
+++ linux-3.3.8-pax/fs/jffs2/erase.c	2012-03-19 10:43:44.272034636 +0100
@@ -438,7 +438,8 @@ static void jffs2_mark_erased_block(stru
 		struct jffs2_unknown_node marker = {
 			.magic =	cpu_to_je16(JFFS2_MAGIC_BITMASK),
 			.nodetype =	cpu_to_je16(JFFS2_NODETYPE_CLEANMARKER),
-			.totlen =	cpu_to_je32(c->cleanmarker_size)
+			.totlen =	cpu_to_je32(c->cleanmarker_size),
+			.hdr_crc =	cpu_to_je32(0)
 		};
 
 		jffs2_prealloc_raw_node_refs(c, jeb, 1);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/jffs2/wbuf.c linux-3.3.8-pax/fs/jffs2/wbuf.c
--- linux-3.3.8/fs/jffs2/wbuf.c	2012-03-19 10:39:10.000049280 +0100
+++ linux-3.3.8-pax/fs/jffs2/wbuf.c	2012-03-19 10:43:44.276034637 +0100
@@ -1012,7 +1012,8 @@ static const struct jffs2_unknown_node o
 {
 	.magic = constant_cpu_to_je16(JFFS2_MAGIC_BITMASK),
 	.nodetype = constant_cpu_to_je16(JFFS2_NODETYPE_CLEANMARKER),
-	.totlen = constant_cpu_to_je32(8)
+	.totlen = constant_cpu_to_je32(8),
+	.hdr_crc = constant_cpu_to_je32(0)
 };
 
 /*
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/jfs/super.c linux-3.3.8-pax/fs/jfs/super.c
--- linux-3.3.8/fs/jfs/super.c	2012-03-19 10:39:10.008049281 +0100
+++ linux-3.3.8-pax/fs/jfs/super.c	2012-03-19 10:43:44.276034637 +0100
@@ -801,7 +801,7 @@ static int __init init_jfs_fs(void)
 
 	jfs_inode_cachep =
 	    kmem_cache_create("jfs_ip", sizeof(struct jfs_inode_info), 0,
-			    SLAB_RECLAIM_ACCOUNT|SLAB_MEM_SPREAD,
+			    SLAB_RECLAIM_ACCOUNT|SLAB_MEM_SPREAD|SLAB_USERCOPY,
 			    init_once);
 	if (jfs_inode_cachep == NULL)
 		return -ENOMEM;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/Kconfig.binfmt linux-3.3.8-pax/fs/Kconfig.binfmt
--- linux-3.3.8/fs/Kconfig.binfmt	2012-03-19 10:39:09.408049311 +0100
+++ linux-3.3.8-pax/fs/Kconfig.binfmt	2012-03-19 10:43:44.276034637 +0100
@@ -89,7 +89,7 @@ config HAVE_AOUT
 
 config BINFMT_AOUT
 	tristate "Kernel support for a.out and ECOFF binaries"
-	depends on HAVE_AOUT
+	depends on HAVE_AOUT && BROKEN
 	---help---
 	  A.out (Assembler.OUTput) is a set of formats for libraries and
 	  executables used in the earliest versions of UNIX.  Linux used
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/libfs.c linux-3.3.8-pax/fs/libfs.c
--- linux-3.3.8/fs/libfs.c	2012-03-19 10:39:10.008049281 +0100
+++ linux-3.3.8-pax/fs/libfs.c	2012-03-19 10:43:44.280034638 +0100
@@ -165,6 +165,9 @@ int dcache_readdir(struct file * filp, v
 
 			for (p=q->next; p != &dentry->d_subdirs; p=p->next) {
 				struct dentry *next;
+				char d_name[sizeof(next->d_iname)];
+				const unsigned char *name;
+
 				next = list_entry(p, struct dentry, d_u.d_child);
 				spin_lock_nested(&next->d_lock, DENTRY_D_LOCK_NESTED);
 				if (!simple_positive(next)) {
@@ -174,7 +177,12 @@ int dcache_readdir(struct file * filp, v
 
 				spin_unlock(&next->d_lock);
 				spin_unlock(&dentry->d_lock);
-				if (filldir(dirent, next->d_name.name, 
+				name = next->d_name.name;
+				if (name == next->d_iname) {
+					memcpy(d_name, name, next->d_name.len);
+					name = d_name;
+				}
+				if (filldir(dirent, name, 
 					    next->d_name.len, filp->f_pos, 
 					    next->d_inode->i_ino, 
 					    dt_type(next->d_inode)) < 0)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/lockd/clntproc.c linux-3.3.8-pax/fs/lockd/clntproc.c
--- linux-3.3.8/fs/lockd/clntproc.c	2011-10-24 12:48:39.983091040 +0200
+++ linux-3.3.8-pax/fs/lockd/clntproc.c	2012-03-19 10:43:44.280034638 +0100
@@ -36,11 +36,11 @@ static const struct rpc_call_ops nlmclnt
 /*
  * Cookie counter for NLM requests
  */
-static atomic_t	nlm_cookie = ATOMIC_INIT(0x1234);
+static atomic_unchecked_t	nlm_cookie = ATOMIC_INIT(0x1234);
 
 void nlmclnt_next_cookie(struct nlm_cookie *c)
 {
-	u32	cookie = atomic_inc_return(&nlm_cookie);
+	u32	cookie = atomic_inc_return_unchecked(&nlm_cookie);
 
 	memcpy(c->data, &cookie, 4);
 	c->len=4;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/locks.c linux-3.3.8-pax/fs/locks.c
--- linux-3.3.8/fs/locks.c	2012-04-15 15:08:29.406606354 +0200
+++ linux-3.3.8-pax/fs/locks.c	2012-04-15 15:08:34.662606069 +0200
@@ -2075,16 +2075,16 @@ void locks_remove_flock(struct file *fil
 		return;
 
 	if (filp->f_op && filp->f_op->flock) {
-		struct file_lock fl = {
+		struct file_lock flock = {
 			.fl_pid = current->tgid,
 			.fl_file = filp,
 			.fl_flags = FL_FLOCK,
 			.fl_type = F_UNLCK,
 			.fl_end = OFFSET_MAX,
 		};
-		filp->f_op->flock(filp, F_SETLKW, &fl);
-		if (fl.fl_ops && fl.fl_ops->fl_release_private)
-			fl.fl_ops->fl_release_private(&fl);
+		filp->f_op->flock(filp, F_SETLKW, &flock);
+		if (flock.fl_ops && flock.fl_ops->fl_release_private)
+			flock.fl_ops->fl_release_private(&flock);
 	}
 
 	lock_flocks();
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/namei.c linux-3.3.8-pax/fs/namei.c
--- linux-3.3.8/fs/namei.c	2012-03-19 10:39:10.192049269 +0100
+++ linux-3.3.8-pax/fs/namei.c	2012-03-19 10:43:44.284034638 +0100
@@ -656,7 +656,7 @@ follow_link(struct path *link, struct na
 	*p = dentry->d_inode->i_op->follow_link(dentry, nd);
 	error = PTR_ERR(*p);
 	if (!IS_ERR(*p)) {
-		char *s = nd_get_link(nd);
+		const char *s = nd_get_link(nd);
 		error = 0;
 		if (s)
 			error = __vfs_follow_link(nd, s);
@@ -3265,6 +3265,8 @@ SYSCALL_DEFINE2(rename, const char __use
 
 int vfs_readlink(struct dentry *dentry, char __user *buffer, int buflen, const char *link)
 {
+	char tmpbuf[64];
+	const char *newlink;
 	int len;
 
 	len = PTR_ERR(link);
@@ -3274,7 +3276,14 @@ int vfs_readlink(struct dentry *dentry,
 	len = strlen(link);
 	if (len > (unsigned) buflen)
 		len = buflen;
-	if (copy_to_user(buffer, link, len))
+
+	if (len < sizeof(tmpbuf)) {
+		memcpy(tmpbuf, link, len);
+		newlink = tmpbuf;
+	} else
+		newlink = link;
+
+	if (copy_to_user(buffer, newlink, len))
 		len = -EFAULT;
 out:
 	return len;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/nfs/inode.c linux-3.3.8-pax/fs/nfs/inode.c
--- linux-3.3.8/fs/nfs/inode.c	2012-03-19 10:39:10.220049267 +0100
+++ linux-3.3.8-pax/fs/nfs/inode.c	2012-03-19 10:43:44.284034638 +0100
@@ -151,7 +151,7 @@ static void nfs_zap_caches_locked(struct
 	nfsi->attrtimeo = NFS_MINATTRTIMEO(inode);
 	nfsi->attrtimeo_timestamp = jiffies;
 
-	memset(NFS_COOKIEVERF(inode), 0, sizeof(NFS_COOKIEVERF(inode)));
+	memset(NFS_COOKIEVERF(inode), 0, sizeof(NFS_I(inode)->cookieverf));
 	if (S_ISREG(mode) || S_ISDIR(mode) || S_ISLNK(mode))
 		nfsi->cache_validity |= NFS_INO_INVALID_ATTR|NFS_INO_INVALID_DATA|NFS_INO_INVALID_ACCESS|NFS_INO_INVALID_ACL|NFS_INO_REVAL_PAGECACHE;
 	else
@@ -1003,16 +1003,16 @@ static int nfs_size_need_update(const st
 	return nfs_size_to_loff_t(fattr->size) > i_size_read(inode);
 }
 
-static atomic_long_t nfs_attr_generation_counter;
+static atomic_long_unchecked_t nfs_attr_generation_counter;
 
 static unsigned long nfs_read_attr_generation_counter(void)
 {
-	return atomic_long_read(&nfs_attr_generation_counter);
+	return atomic_long_read_unchecked(&nfs_attr_generation_counter);
 }
 
 unsigned long nfs_inc_attr_generation_counter(void)
 {
-	return atomic_long_inc_return(&nfs_attr_generation_counter);
+	return atomic_long_inc_return_unchecked(&nfs_attr_generation_counter);
 }
 
 void nfs_fattr_init(struct nfs_fattr *fattr)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/nfsd/vfs.c linux-3.3.8-pax/fs/nfsd/vfs.c
--- linux-3.3.8/fs/nfsd/vfs.c	2012-05-12 22:26:33.808957810 +0200
+++ linux-3.3.8-pax/fs/nfsd/vfs.c	2012-05-12 22:26:42.752957331 +0200
@@ -925,7 +925,7 @@ nfsd_vfs_read(struct svc_rqst *rqstp, st
 	} else {
 		oldfs = get_fs();
 		set_fs(KERNEL_DS);
-		host_err = vfs_readv(file, (struct iovec __user *)vec, vlen, &offset);
+		host_err = vfs_readv(file, (struct iovec __force_user *)vec, vlen, &offset);
 		set_fs(oldfs);
 	}
 
@@ -1029,7 +1029,7 @@ nfsd_vfs_write(struct svc_rqst *rqstp, s
 
 	/* Write the data. */
 	oldfs = get_fs(); set_fs(KERNEL_DS);
-	host_err = vfs_writev(file, (struct iovec __user *)vec, vlen, &offset);
+	host_err = vfs_writev(file, (struct iovec __force_user *)vec, vlen, &offset);
 	set_fs(oldfs);
 	if (host_err < 0)
 		goto out_nfserr;
@@ -1564,7 +1564,7 @@ nfsd_readlink(struct svc_rqst *rqstp, st
 	 */
 
 	oldfs = get_fs(); set_fs(KERNEL_DS);
-	host_err = inode->i_op->readlink(dentry, buf, *lenp);
+	host_err = inode->i_op->readlink(dentry, (char __force_user *)buf, *lenp);
 	set_fs(oldfs);
 
 	if (host_err < 0)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/notify/fanotify/fanotify_user.c linux-3.3.8-pax/fs/notify/fanotify/fanotify_user.c
--- linux-3.3.8/fs/notify/fanotify/fanotify_user.c	2012-03-19 10:39:10.316049265 +0100
+++ linux-3.3.8-pax/fs/notify/fanotify/fanotify_user.c	2012-03-19 10:43:44.292034636 +0100
@@ -278,7 +278,8 @@ static ssize_t copy_event_to_user(struct
 		goto out_close_fd;
 
 	ret = -EFAULT;
-	if (copy_to_user(buf, &fanotify_event_metadata,
+	if (fanotify_event_metadata.event_len > sizeof fanotify_event_metadata ||
+	    copy_to_user(buf, &fanotify_event_metadata,
 			 fanotify_event_metadata.event_len))
 		goto out_kill_access_response;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/notify/notification.c linux-3.3.8-pax/fs/notify/notification.c
--- linux-3.3.8/fs/notify/notification.c	2011-10-24 12:48:40.123091033 +0200
+++ linux-3.3.8-pax/fs/notify/notification.c	2012-03-19 10:43:44.292034636 +0100
@@ -57,7 +57,7 @@ static struct kmem_cache *fsnotify_event
  * get set to 0 so it will never get 'freed'
  */
 static struct fsnotify_event *q_overflow_event;
-static atomic_t fsnotify_sync_cookie = ATOMIC_INIT(0);
+static atomic_unchecked_t fsnotify_sync_cookie = ATOMIC_INIT(0);
 
 /**
  * fsnotify_get_cookie - return a unique cookie for use in synchronizing events.
@@ -65,7 +65,7 @@ static atomic_t fsnotify_sync_cookie = A
  */
 u32 fsnotify_get_cookie(void)
 {
-	return atomic_inc_return(&fsnotify_sync_cookie);
+	return atomic_inc_return_unchecked(&fsnotify_sync_cookie);
 }
 EXPORT_SYMBOL_GPL(fsnotify_get_cookie);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/ntfs/dir.c linux-3.3.8-pax/fs/ntfs/dir.c
--- linux-3.3.8/fs/ntfs/dir.c	2011-10-24 12:48:40.127091033 +0200
+++ linux-3.3.8-pax/fs/ntfs/dir.c	2012-03-19 10:43:44.296034635 +0100
@@ -1329,7 +1329,7 @@ find_next_index_buffer:
 	ia = (INDEX_ALLOCATION*)(kaddr + (ia_pos & ~PAGE_CACHE_MASK &
 			~(s64)(ndir->itype.index.block_size - 1)));
 	/* Bounds checks. */
-	if (unlikely((u8*)ia < kaddr || (u8*)ia > kaddr + PAGE_CACHE_SIZE)) {
+	if (unlikely(!kaddr || (u8*)ia < kaddr || (u8*)ia > kaddr + PAGE_CACHE_SIZE)) {
 		ntfs_error(sb, "Out of bounds check failed. Corrupt directory "
 				"inode 0x%lx or driver bug.", vdir->i_ino);
 		goto err_out;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/ntfs/file.c linux-3.3.8-pax/fs/ntfs/file.c
--- linux-3.3.8/fs/ntfs/file.c	2011-10-24 12:48:40.131091032 +0200
+++ linux-3.3.8-pax/fs/ntfs/file.c	2012-03-19 10:43:44.296034635 +0100
@@ -2229,6 +2229,6 @@ const struct inode_operations ntfs_file_
 #endif /* NTFS_RW */
 };
 
-const struct file_operations ntfs_empty_file_ops = {};
+const struct file_operations ntfs_empty_file_ops __read_only;
 
-const struct inode_operations ntfs_empty_inode_ops = {};
+const struct inode_operations ntfs_empty_inode_ops __read_only;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/ocfs2/localalloc.c linux-3.3.8-pax/fs/ocfs2/localalloc.c
--- linux-3.3.8/fs/ocfs2/localalloc.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/fs/ocfs2/localalloc.c	2012-03-19 10:43:44.296034636 +0100
@@ -1283,7 +1283,7 @@ static int ocfs2_local_alloc_slide_windo
 		goto bail;
 	}
 
-	atomic_inc(&osb->alloc_stats.moves);
+	atomic_inc_unchecked(&osb->alloc_stats.moves);
 
 bail:
 	if (handle)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/ocfs2/ocfs2.h linux-3.3.8-pax/fs/ocfs2/ocfs2.h
--- linux-3.3.8/fs/ocfs2/ocfs2.h	2012-01-08 19:48:26.091471032 +0100
+++ linux-3.3.8-pax/fs/ocfs2/ocfs2.h	2012-03-19 10:43:44.296034636 +0100
@@ -235,11 +235,11 @@ enum ocfs2_vol_state
 
 struct ocfs2_alloc_stats
 {
-	atomic_t moves;
-	atomic_t local_data;
-	atomic_t bitmap_data;
-	atomic_t bg_allocs;
-	atomic_t bg_extends;
+	atomic_unchecked_t moves;
+	atomic_unchecked_t local_data;
+	atomic_unchecked_t bitmap_data;
+	atomic_unchecked_t bg_allocs;
+	atomic_unchecked_t bg_extends;
 };
 
 enum ocfs2_local_alloc_state
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/ocfs2/suballoc.c linux-3.3.8-pax/fs/ocfs2/suballoc.c
--- linux-3.3.8/fs/ocfs2/suballoc.c	2012-04-27 22:14:17.877191281 +0200
+++ linux-3.3.8-pax/fs/ocfs2/suballoc.c	2012-04-27 22:14:29.229190665 +0200
@@ -872,7 +872,7 @@ static int ocfs2_reserve_suballoc_bits(s
 				mlog_errno(status);
 			goto bail;
 		}
-		atomic_inc(&osb->alloc_stats.bg_extends);
+		atomic_inc_unchecked(&osb->alloc_stats.bg_extends);
 
 		/* You should never ask for this much metadata */
 		BUG_ON(bits_wanted >
@@ -2008,7 +2008,7 @@ int ocfs2_claim_metadata(handle_t *handl
 		mlog_errno(status);
 		goto bail;
 	}
-	atomic_inc(&OCFS2_SB(ac->ac_inode->i_sb)->alloc_stats.bg_allocs);
+	atomic_inc_unchecked(&OCFS2_SB(ac->ac_inode->i_sb)->alloc_stats.bg_allocs);
 
 	*suballoc_loc = res.sr_bg_blkno;
 	*suballoc_bit_start = res.sr_bit_offset;
@@ -2172,7 +2172,7 @@ int ocfs2_claim_new_inode_at_loc(handle_
 	trace_ocfs2_claim_new_inode_at_loc((unsigned long long)di_blkno,
 					   res->sr_bits);
 
-	atomic_inc(&OCFS2_SB(ac->ac_inode->i_sb)->alloc_stats.bg_allocs);
+	atomic_inc_unchecked(&OCFS2_SB(ac->ac_inode->i_sb)->alloc_stats.bg_allocs);
 
 	BUG_ON(res->sr_bits != 1);
 
@@ -2214,7 +2214,7 @@ int ocfs2_claim_new_inode(handle_t *hand
 		mlog_errno(status);
 		goto bail;
 	}
-	atomic_inc(&OCFS2_SB(ac->ac_inode->i_sb)->alloc_stats.bg_allocs);
+	atomic_inc_unchecked(&OCFS2_SB(ac->ac_inode->i_sb)->alloc_stats.bg_allocs);
 
 	BUG_ON(res.sr_bits != 1);
 
@@ -2318,7 +2318,7 @@ int __ocfs2_claim_clusters(handle_t *han
 						      cluster_start,
 						      num_clusters);
 		if (!status)
-			atomic_inc(&osb->alloc_stats.local_data);
+			atomic_inc_unchecked(&osb->alloc_stats.local_data);
 	} else {
 		if (min_clusters > (osb->bitmap_cpg - 1)) {
 			/* The only paths asking for contiguousness
@@ -2344,7 +2344,7 @@ int __ocfs2_claim_clusters(handle_t *han
 				ocfs2_desc_bitmap_to_cluster_off(ac->ac_inode,
 								 res.sr_bg_blkno,
 								 res.sr_bit_offset);
-			atomic_inc(&osb->alloc_stats.bitmap_data);
+			atomic_inc_unchecked(&osb->alloc_stats.bitmap_data);
 			*num_clusters = res.sr_bits;
 		}
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/ocfs2/super.c linux-3.3.8-pax/fs/ocfs2/super.c
--- linux-3.3.8/fs/ocfs2/super.c	2012-03-19 10:39:10.372049262 +0100
+++ linux-3.3.8-pax/fs/ocfs2/super.c	2012-03-19 10:43:44.300034635 +0100
@@ -301,11 +301,11 @@ static int ocfs2_osb_dump(struct ocfs2_s
 			"%10s => GlobalAllocs: %d  LocalAllocs: %d  "
 			"SubAllocs: %d  LAWinMoves: %d  SAExtends: %d\n",
 			"Stats",
-			atomic_read(&osb->alloc_stats.bitmap_data),
-			atomic_read(&osb->alloc_stats.local_data),
-			atomic_read(&osb->alloc_stats.bg_allocs),
-			atomic_read(&osb->alloc_stats.moves),
-			atomic_read(&osb->alloc_stats.bg_extends));
+			atomic_read_unchecked(&osb->alloc_stats.bitmap_data),
+			atomic_read_unchecked(&osb->alloc_stats.local_data),
+			atomic_read_unchecked(&osb->alloc_stats.bg_allocs),
+			atomic_read_unchecked(&osb->alloc_stats.moves),
+			atomic_read_unchecked(&osb->alloc_stats.bg_extends));
 
 	out += snprintf(buf + out, len - out,
 			"%10s => State: %u  Descriptor: %llu  Size: %u bits  "
@@ -2117,11 +2117,11 @@ static int ocfs2_initialize_super(struct
 	spin_lock_init(&osb->osb_xattr_lock);
 	ocfs2_init_steal_slots(osb);
 
-	atomic_set(&osb->alloc_stats.moves, 0);
-	atomic_set(&osb->alloc_stats.local_data, 0);
-	atomic_set(&osb->alloc_stats.bitmap_data, 0);
-	atomic_set(&osb->alloc_stats.bg_allocs, 0);
-	atomic_set(&osb->alloc_stats.bg_extends, 0);
+	atomic_set_unchecked(&osb->alloc_stats.moves, 0);
+	atomic_set_unchecked(&osb->alloc_stats.local_data, 0);
+	atomic_set_unchecked(&osb->alloc_stats.bitmap_data, 0);
+	atomic_set_unchecked(&osb->alloc_stats.bg_allocs, 0);
+	atomic_set_unchecked(&osb->alloc_stats.bg_extends, 0);
 
 	/* Copy the blockcheck stats from the superblock probe */
 	osb->osb_ecc_stats = *stats;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/ocfs2/symlink.c linux-3.3.8-pax/fs/ocfs2/symlink.c
--- linux-3.3.8/fs/ocfs2/symlink.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/fs/ocfs2/symlink.c	2012-03-19 10:43:44.300034635 +0100
@@ -142,7 +142,7 @@ bail:
 
 static void ocfs2_fast_put_link(struct dentry *dentry, struct nameidata *nd, void *cookie)
 {
-	char *link = nd_get_link(nd);
+	const char *link = nd_get_link(nd);
 	if (!IS_ERR(link))
 		kfree(link);
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/pipe.c linux-3.3.8-pax/fs/pipe.c
--- linux-3.3.8/fs/pipe.c	2012-05-07 20:26:56.071609315 +0200
+++ linux-3.3.8-pax/fs/pipe.c	2012-05-07 20:27:02.119608992 +0200
@@ -437,9 +437,9 @@ redo:
 		}
 		if (bufs)	/* More to do? */
 			continue;
-		if (!pipe->writers)
+		if (!atomic_read(&pipe->writers))
 			break;
-		if (!pipe->waiting_writers) {
+		if (!atomic_read(&pipe->waiting_writers)) {
 			/* syscall merging: Usually we must not sleep
 			 * if O_NONBLOCK is set, or if we got some data.
 			 * But if a writer sleeps in kernel space, then
@@ -503,7 +503,7 @@ pipe_write(struct kiocb *iocb, const str
 	mutex_lock(&inode->i_mutex);
 	pipe = inode->i_pipe;
 
-	if (!pipe->readers) {
+	if (!atomic_read(&pipe->readers)) {
 		send_sig(SIGPIPE, current, 0);
 		ret = -EPIPE;
 		goto out;
@@ -552,7 +552,7 @@ redo1:
 	for (;;) {
 		int bufs;
 
-		if (!pipe->readers) {
+		if (!atomic_read(&pipe->readers)) {
 			send_sig(SIGPIPE, current, 0);
 			if (!ret)
 				ret = -EPIPE;
@@ -643,9 +643,9 @@ redo2:
 			kill_fasync(&pipe->fasync_readers, SIGIO, POLL_IN);
 			do_wakeup = 0;
 		}
-		pipe->waiting_writers++;
+		atomic_inc(&pipe->waiting_writers);
 		pipe_wait(pipe);
-		pipe->waiting_writers--;
+		atomic_dec(&pipe->waiting_writers);
 	}
 out:
 	mutex_unlock(&inode->i_mutex);
@@ -712,7 +712,7 @@ pipe_poll(struct file *filp, poll_table
 	mask = 0;
 	if (filp->f_mode & FMODE_READ) {
 		mask = (nrbufs > 0) ? POLLIN | POLLRDNORM : 0;
-		if (!pipe->writers && filp->f_version != pipe->w_counter)
+		if (!atomic_read(&pipe->writers) && filp->f_version != pipe->w_counter)
 			mask |= POLLHUP;
 	}
 
@@ -722,7 +722,7 @@ pipe_poll(struct file *filp, poll_table
 		 * Most Unices do not set POLLERR for FIFOs but on Linux they
 		 * behave exactly like pipes for poll().
 		 */
-		if (!pipe->readers)
+		if (!atomic_read(&pipe->readers))
 			mask |= POLLERR;
 	}
 
@@ -736,10 +736,10 @@ pipe_release(struct inode *inode, int de
 
 	mutex_lock(&inode->i_mutex);
 	pipe = inode->i_pipe;
-	pipe->readers -= decr;
-	pipe->writers -= decw;
+	atomic_sub(decr, &pipe->readers);
+	atomic_sub(decw, &pipe->writers);
 
-	if (!pipe->readers && !pipe->writers) {
+	if (!atomic_read(&pipe->readers) && !atomic_read(&pipe->writers)) {
 		free_pipe_info(inode);
 	} else {
 		wake_up_interruptible_sync_poll(&pipe->wait, POLLIN | POLLOUT | POLLRDNORM | POLLWRNORM | POLLERR | POLLHUP);
@@ -829,7 +829,7 @@ pipe_read_open(struct inode *inode, stru
 
 	if (inode->i_pipe) {
 		ret = 0;
-		inode->i_pipe->readers++;
+		atomic_inc(&inode->i_pipe->readers);
 	}
 
 	mutex_unlock(&inode->i_mutex);
@@ -846,7 +846,7 @@ pipe_write_open(struct inode *inode, str
 
 	if (inode->i_pipe) {
 		ret = 0;
-		inode->i_pipe->writers++;
+		atomic_inc(&inode->i_pipe->writers);
 	}
 
 	mutex_unlock(&inode->i_mutex);
@@ -864,9 +864,9 @@ pipe_rdwr_open(struct inode *inode, stru
 	if (inode->i_pipe) {
 		ret = 0;
 		if (filp->f_mode & FMODE_READ)
-			inode->i_pipe->readers++;
+			atomic_inc(&inode->i_pipe->readers);
 		if (filp->f_mode & FMODE_WRITE)
-			inode->i_pipe->writers++;
+			atomic_inc(&inode->i_pipe->writers);
 	}
 
 	mutex_unlock(&inode->i_mutex);
@@ -988,7 +988,8 @@ static struct inode * get_pipe_inode(voi
 		goto fail_iput;
 	inode->i_pipe = pipe;
 
-	pipe->readers = pipe->writers = 1;
+	atomic_set(&pipe->readers, 1);
+	atomic_set(&pipe->writers, 1);
 	inode->i_fop = &rdwr_pipefifo_fops;
 
 	/*
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/proc/array.c linux-3.3.8-pax/fs/proc/array.c
--- linux-3.3.8/fs/proc/array.c	2012-03-19 10:39:10.416049257 +0100
+++ linux-3.3.8-pax/fs/proc/array.c	2012-03-19 10:43:44.304034635 +0100
@@ -337,6 +337,21 @@ static void task_cpus_allowed(struct seq
 	seq_putc(m, '\n');
 }
 
+#if defined(CONFIG_PAX_NOEXEC) || defined(CONFIG_PAX_ASLR)
+static inline void task_pax(struct seq_file *m, struct task_struct *p)
+{
+	if (p->mm)
+		seq_printf(m, "PaX:\t%c%c%c%c%c\n",
+			   p->mm->pax_flags & MF_PAX_PAGEEXEC ? 'P' : 'p',
+			   p->mm->pax_flags & MF_PAX_EMUTRAMP ? 'E' : 'e',
+			   p->mm->pax_flags & MF_PAX_MPROTECT ? 'M' : 'm',
+			   p->mm->pax_flags & MF_PAX_RANDMMAP ? 'R' : 'r',
+			   p->mm->pax_flags & MF_PAX_SEGMEXEC ? 'S' : 's');
+	else
+		seq_printf(m, "PaX:\t-----\n");
+}
+#endif
+
 int proc_pid_status(struct seq_file *m, struct pid_namespace *ns,
 			struct pid *pid, struct task_struct *task)
 {
@@ -354,6 +369,11 @@ int proc_pid_status(struct seq_file *m,
 	task_cpus_allowed(m, task);
 	cpuset_task_status_allowed(m, task);
 	task_context_switch_counts(m, task);
+
+#if defined(CONFIG_PAX_NOEXEC) || defined(CONFIG_PAX_ASLR)
+	task_pax(m, task);
+#endif
+
 	return 0;
 }
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/proc/base.c linux-3.3.8-pax/fs/proc/base.c
--- linux-3.3.8/fs/proc/base.c	2012-03-19 10:39:10.416049257 +0100
+++ linux-3.3.8-pax/fs/proc/base.c	2012-03-19 10:43:44.308034635 +0100
@@ -2783,7 +2783,7 @@ static void *proc_self_follow_link(struc
 static void proc_self_put_link(struct dentry *dentry, struct nameidata *nd,
 				void *cookie)
 {
-	char *s = nd_get_link(nd);
+	const char *s = nd_get_link(nd);
 	if (!IS_ERR(s))
 		__putname(s);
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/proc/kcore.c linux-3.3.8-pax/fs/proc/kcore.c
--- linux-3.3.8/fs/proc/kcore.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/fs/proc/kcore.c	2012-03-19 10:43:44.308034635 +0100
@@ -478,9 +478,10 @@ read_kcore(struct file *file, char __use
 	 * the addresses in the elf_phdr on our list.
 	 */
 	start = kc_offset_to_vaddr(*fpos - elf_buflen);
-	if ((tsz = (PAGE_SIZE - (start & ~PAGE_MASK))) > buflen)
+	tsz = PAGE_SIZE - (start & ~PAGE_MASK);
+	if (tsz > buflen)
 		tsz = buflen;
-		
+
 	while (buflen) {
 		struct kcore_list *m;
 
@@ -509,20 +510,23 @@ read_kcore(struct file *file, char __use
 			kfree(elf_buf);
 		} else {
 			if (kern_addr_valid(start)) {
-				unsigned long n;
+				char *elf_buf;
+				mm_segment_t oldfs;
 
-				n = copy_to_user(buffer, (char *)start, tsz);
-				/*
-				 * We cannot distingush between fault on source
-				 * and fault on destination. When this happens
-				 * we clear too and hope it will trigger the
-				 * EFAULT again.
-				 */
-				if (n) { 
-					if (clear_user(buffer + tsz - n,
-								n))
+				elf_buf = kmalloc(tsz, GFP_KERNEL);
+				if (!elf_buf)
+					return -ENOMEM;
+				oldfs = get_fs();
+				set_fs(KERNEL_DS);
+				if (!__copy_from_user(elf_buf, (const void __user *)start, tsz)) {
+					set_fs(oldfs);
+					if (copy_to_user(buffer, elf_buf, tsz)) {
+						kfree(elf_buf);
 						return -EFAULT;
+					}
 				}
+				set_fs(oldfs);
+				kfree(elf_buf);
 			} else {
 				if (clear_user(buffer, tsz))
 					return -EFAULT;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/proc/meminfo.c linux-3.3.8-pax/fs/proc/meminfo.c
--- linux-3.3.8/fs/proc/meminfo.c	2012-01-08 19:48:26.167471028 +0100
+++ linux-3.3.8-pax/fs/proc/meminfo.c	2012-03-19 10:43:44.308034635 +0100
@@ -158,7 +158,7 @@ static int meminfo_proc_show(struct seq_
 		vmi.used >> 10,
 		vmi.largest_chunk >> 10
 #ifdef CONFIG_MEMORY_FAILURE
-		,atomic_long_read(&mce_bad_pages) << (PAGE_SHIFT - 10)
+		,atomic_long_read_unchecked(&mce_bad_pages) << (PAGE_SHIFT - 10)
 #endif
 #ifdef CONFIG_TRANSPARENT_HUGEPAGE
 		,K(global_page_state(NR_ANON_TRANSPARENT_HUGEPAGES) *
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/proc/nommu.c linux-3.3.8-pax/fs/proc/nommu.c
--- linux-3.3.8/fs/proc/nommu.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/fs/proc/nommu.c	2012-03-19 10:43:44.308034635 +0100
@@ -66,7 +66,7 @@ static int nommu_region_show(struct seq_
 		if (len < 1)
 			len = 1;
 		seq_printf(m, "%*c", len, ' ');
-		seq_path(m, &file->f_path, "");
+		seq_path(m, &file->f_path, "\n\\");
 	}
 
 	seq_putc(m, '\n');
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/proc/task_mmu.c linux-3.3.8-pax/fs/proc/task_mmu.c
--- linux-3.3.8/fs/proc/task_mmu.c	2012-04-03 22:02:50.446110028 +0200
+++ linux-3.3.8-pax/fs/proc/task_mmu.c	2012-04-03 22:03:07.054110928 +0200
@@ -52,8 +52,13 @@ void task_mem(struct seq_file *m, struct
 		"VmExe:\t%8lu kB\n"
 		"VmLib:\t%8lu kB\n"
 		"VmPTE:\t%8lu kB\n"
-		"VmSwap:\t%8lu kB\n",
-		hiwater_vm << (PAGE_SHIFT-10),
+		"VmSwap:\t%8lu kB\n"
+
+#ifdef CONFIG_ARCH_TRACK_EXEC_LIMIT
+		"CsBase:\t%8lx\nCsLim:\t%8lx\n"
+#endif
+
+		,hiwater_vm << (PAGE_SHIFT-10),
 		(total_vm - mm->reserved_vm) << (PAGE_SHIFT-10),
 		mm->locked_vm << (PAGE_SHIFT-10),
 		mm->pinned_vm << (PAGE_SHIFT-10),
@@ -62,7 +67,13 @@ void task_mem(struct seq_file *m, struct
 		data << (PAGE_SHIFT-10),
 		mm->stack_vm << (PAGE_SHIFT-10), text, lib,
 		(PTRS_PER_PTE*sizeof(pte_t)*mm->nr_ptes) >> 10,
-		swap << (PAGE_SHIFT-10));
+		swap << (PAGE_SHIFT-10)
+
+#ifdef CONFIG_ARCH_TRACK_EXEC_LIMIT
+		, mm->context.user_cs_base, mm->context.user_cs_limit
+#endif
+
+	);
 }
 
 unsigned long task_vsize(struct mm_struct *mm)
@@ -227,20 +238,23 @@ static void show_map_vma(struct seq_file
 		pgoff = ((loff_t)vma->vm_pgoff) << PAGE_SHIFT;
 	}
 
-	/* We don't show the stack guard page in /proc/maps */
 	start = vma->vm_start;
-	if (stack_guard_page_start(vma, start))
-		start += PAGE_SIZE;
 	end = vma->vm_end;
-	if (stack_guard_page_end(vma, end))
-		end -= PAGE_SIZE;
 
 	seq_printf(m, "%08lx-%08lx %c%c%c%c %08llx %02x:%02x %lu %n",
 			start,
 			end,
+
+#if 0
+			flags & VM_MAYREAD ? flags & VM_READ ? 'R' : '+' : flags & VM_READ ? 'r' : '-',
+			flags & VM_MAYWRITE ? flags & VM_WRITE ? 'W' : '+' : flags & VM_WRITE ? 'w' : '-',
+			flags & VM_MAYEXEC ? flags & VM_EXEC ? 'X' : '+' : flags & VM_EXEC ? 'x' : '-',
+#else
 			flags & VM_READ ? 'r' : '-',
 			flags & VM_WRITE ? 'w' : '-',
 			flags & VM_EXEC ? 'x' : '-',
+#endif
+
 			flags & VM_MAYSHARE ? 's' : 'p',
 			pgoff,
 			MAJOR(dev), MINOR(dev), ino, &len);
@@ -251,7 +265,7 @@ static void show_map_vma(struct seq_file
 	 */
 	if (file) {
 		pad_len_spaces(m, len);
-		seq_path(m, &file->f_path, "\n");
+		seq_path(m, &file->f_path, "\n\\");
 	} else {
 		const char *name = arch_vma_name(vma);
 		if (!name) {
@@ -259,8 +273,9 @@ static void show_map_vma(struct seq_file
 				if (vma->vm_start <= mm->brk &&
 						vma->vm_end >= mm->start_brk) {
 					name = "[heap]";
-				} else if (vma->vm_start <= mm->start_stack &&
-					   vma->vm_end >= mm->start_stack) {
+				} else if ((vma->vm_flags & (VM_GROWSDOWN | VM_GROWSUP)) ||
+					   (vma->vm_start <= mm->start_stack &&
+					    vma->vm_end >= mm->start_stack)) {
 					name = "[stack]";
 				}
 			} else {
@@ -1045,7 +1060,7 @@ static int show_numa_map(struct seq_file
 
 	if (file) {
 		seq_printf(m, " file=");
-		seq_path(m, &file->f_path, "\n\t= ");
+		seq_path(m, &file->f_path, "\n\t\\= ");
 	} else if (vma->vm_start <= mm->brk && vma->vm_end >= mm->start_brk) {
 		seq_printf(m, " heap");
 	} else if (vma->vm_start <= mm->start_stack &&
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/proc/task_nommu.c linux-3.3.8-pax/fs/proc/task_nommu.c
--- linux-3.3.8/fs/proc/task_nommu.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/fs/proc/task_nommu.c	2012-03-19 10:43:44.312034635 +0100
@@ -51,7 +51,7 @@ void task_mem(struct seq_file *m, struct
 	else
 		bytes += kobjsize(mm);
 	
-	if (current->fs && current->fs->users > 1)
+	if (current->fs && atomic_read(&current->fs->users) > 1)
 		sbytes += kobjsize(current->fs);
 	else
 		bytes += kobjsize(current->fs);
@@ -166,7 +166,7 @@ static int nommu_vma_show(struct seq_fil
 
 	if (file) {
 		pad_len_spaces(m, len);
-		seq_path(m, &file->f_path, "");
+		seq_path(m, &file->f_path, "\n\\");
 	} else if (mm) {
 		if (vma->vm_start <= mm->start_stack &&
 			vma->vm_end >= mm->start_stack) {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/quota/netlink.c linux-3.3.8-pax/fs/quota/netlink.c
--- linux-3.3.8/fs/quota/netlink.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/fs/quota/netlink.c	2012-03-19 10:43:44.312034635 +0100
@@ -33,7 +33,7 @@ static struct genl_family quota_genl_fam
 void quota_send_warning(short type, unsigned int id, dev_t dev,
 			const char warntype)
 {
-	static atomic_t seq;
+	static atomic_unchecked_t seq;
 	struct sk_buff *skb;
 	void *msg_head;
 	int ret;
@@ -49,7 +49,7 @@ void quota_send_warning(short type, unsi
 		  "VFS: Not enough memory to send quota warning.\n");
 		return;
 	}
-	msg_head = genlmsg_put(skb, 0, atomic_add_return(1, &seq),
+	msg_head = genlmsg_put(skb, 0, atomic_add_return_unchecked(1, &seq),
 			&quota_genl_family, 0, QUOTA_NL_C_WARNING);
 	if (!msg_head) {
 		printk(KERN_ERR
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/readdir.c linux-3.3.8-pax/fs/readdir.c
--- linux-3.3.8/fs/readdir.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/fs/readdir.c	2012-03-19 10:43:44.312034635 +0100
@@ -299,7 +299,7 @@ SYSCALL_DEFINE3(getdents64, unsigned int
 		error = buf.error;
 	lastdirent = buf.previous;
 	if (lastdirent) {
-		typeof(lastdirent->d_off) d_off = file->f_pos;
+		typeof(((struct linux_dirent64 *)0)->d_off) d_off = file->f_pos;
 		if (__put_user(d_off, &lastdirent->d_off))
 			error = -EFAULT;
 		else
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/reiserfs/do_balan.c linux-3.3.8-pax/fs/reiserfs/do_balan.c
--- linux-3.3.8/fs/reiserfs/do_balan.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/fs/reiserfs/do_balan.c	2012-03-19 10:43:44.316034634 +0100
@@ -2051,7 +2051,7 @@ void do_balance(struct tree_balance *tb,
 		return;
 	}
 
-	atomic_inc(&(fs_generation(tb->tb_sb)));
+	atomic_inc_unchecked(&(fs_generation(tb->tb_sb)));
 	do_balance_starts(tb);
 
 	/* balance leaf returns 0 except if combining L R and S into
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/reiserfs/procfs.c linux-3.3.8-pax/fs/reiserfs/procfs.c
--- linux-3.3.8/fs/reiserfs/procfs.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/fs/reiserfs/procfs.c	2012-03-19 10:43:44.316034634 +0100
@@ -113,7 +113,7 @@ static int show_super(struct seq_file *m
 		   "SMALL_TAILS " : "NO_TAILS ",
 		   replay_only(sb) ? "REPLAY_ONLY " : "",
 		   convert_reiserfs(sb) ? "CONV " : "",
-		   atomic_read(&r->s_generation_counter),
+		   atomic_read_unchecked(&r->s_generation_counter),
 		   SF(s_disk_reads), SF(s_disk_writes), SF(s_fix_nodes),
 		   SF(s_do_balance), SF(s_unneeded_left_neighbor),
 		   SF(s_good_search_by_key_reada), SF(s_bmaps),
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/seq_file.c linux-3.3.8-pax/fs/seq_file.c
--- linux-3.3.8/fs/seq_file.c	2012-03-19 10:39:10.460049256 +0100
+++ linux-3.3.8-pax/fs/seq_file.c	2012-03-26 19:56:48.699809106 +0200
@@ -549,7 +549,7 @@ static void single_stop(struct seq_file
 int single_open(struct file *file, int (*show)(struct seq_file *, void *),
 		void *data)
 {
-	struct seq_operations *op = kmalloc(sizeof(*op), GFP_KERNEL);
+	seq_operations_no_const *op = kmalloc(sizeof(*op), GFP_KERNEL);
 	int res = -ENOMEM;
 
 	if (op) {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/splice.c linux-3.3.8-pax/fs/splice.c
--- linux-3.3.8/fs/splice.c	2012-04-27 22:14:17.881191276 +0200
+++ linux-3.3.8-pax/fs/splice.c	2012-04-27 22:14:29.233190664 +0200
@@ -194,7 +194,7 @@ ssize_t splice_to_pipe(struct pipe_inode
 	pipe_lock(pipe);
 
 	for (;;) {
-		if (!pipe->readers) {
+		if (!atomic_read(&pipe->readers)) {
 			send_sig(SIGPIPE, current, 0);
 			if (!ret)
 				ret = -EPIPE;
@@ -248,9 +248,9 @@ ssize_t splice_to_pipe(struct pipe_inode
 			do_wakeup = 0;
 		}
 
-		pipe->waiting_writers++;
+		atomic_inc(&pipe->waiting_writers);
 		pipe_wait(pipe);
-		pipe->waiting_writers--;
+		atomic_dec(&pipe->waiting_writers);
 	}
 
 	pipe_unlock(pipe);
@@ -560,7 +560,7 @@ static ssize_t kernel_readv(struct file
 	old_fs = get_fs();
 	set_fs(get_ds());
 	/* The cast to a user pointer is valid due to the set_fs() */
-	res = vfs_readv(file, (const struct iovec __user *)vec, vlen, &pos);
+	res = vfs_readv(file, (const struct iovec __force_user *)vec, vlen, &pos);
 	set_fs(old_fs);
 
 	return res;
@@ -575,7 +575,7 @@ static ssize_t kernel_write(struct file
 	old_fs = get_fs();
 	set_fs(get_ds());
 	/* The cast to a user pointer is valid due to the set_fs() */
-	res = vfs_write(file, (const char __user *)buf, count, &pos);
+	res = vfs_write(file, (const char __force_user *)buf, count, &pos);
 	set_fs(old_fs);
 
 	return res;
@@ -626,7 +626,7 @@ ssize_t default_file_splice_read(struct
 			goto err;
 
 		this_len = min_t(size_t, len, PAGE_CACHE_SIZE - offset);
-		vec[i].iov_base = (void __user *) page_address(page);
+		vec[i].iov_base = (void __force_user *) page_address(page);
 		vec[i].iov_len = this_len;
 		spd.pages[i] = page;
 		spd.nr_pages++;
@@ -848,10 +848,10 @@ EXPORT_SYMBOL(splice_from_pipe_feed);
 int splice_from_pipe_next(struct pipe_inode_info *pipe, struct splice_desc *sd)
 {
 	while (!pipe->nrbufs) {
-		if (!pipe->writers)
+		if (!atomic_read(&pipe->writers))
 			return 0;
 
-		if (!pipe->waiting_writers && sd->num_spliced)
+		if (!atomic_read(&pipe->waiting_writers) && sd->num_spliced)
 			return 0;
 
 		if (sd->flags & SPLICE_F_NONBLOCK)
@@ -1184,7 +1184,7 @@ ssize_t splice_direct_to_actor(struct fi
 		 * out of the pipe right after the splice_to_pipe(). So set
 		 * PIPE_READERS appropriately.
 		 */
-		pipe->readers = 1;
+		atomic_set(&pipe->readers, 1);
 
 		current->splice_pipe = pipe;
 	}
@@ -1736,9 +1736,9 @@ static int ipipe_prep(struct pipe_inode_
 			ret = -ERESTARTSYS;
 			break;
 		}
-		if (!pipe->writers)
+		if (!atomic_read(&pipe->writers))
 			break;
-		if (!pipe->waiting_writers) {
+		if (!atomic_read(&pipe->waiting_writers)) {
 			if (flags & SPLICE_F_NONBLOCK) {
 				ret = -EAGAIN;
 				break;
@@ -1770,7 +1770,7 @@ static int opipe_prep(struct pipe_inode_
 	pipe_lock(pipe);
 
 	while (pipe->nrbufs >= pipe->buffers) {
-		if (!pipe->readers) {
+		if (!atomic_read(&pipe->readers)) {
 			send_sig(SIGPIPE, current, 0);
 			ret = -EPIPE;
 			break;
@@ -1783,9 +1783,9 @@ static int opipe_prep(struct pipe_inode_
 			ret = -ERESTARTSYS;
 			break;
 		}
-		pipe->waiting_writers++;
+		atomic_inc(&pipe->waiting_writers);
 		pipe_wait(pipe);
-		pipe->waiting_writers--;
+		atomic_dec(&pipe->waiting_writers);
 	}
 
 	pipe_unlock(pipe);
@@ -1821,14 +1821,14 @@ retry:
 	pipe_double_lock(ipipe, opipe);
 
 	do {
-		if (!opipe->readers) {
+		if (!atomic_read(&opipe->readers)) {
 			send_sig(SIGPIPE, current, 0);
 			if (!ret)
 				ret = -EPIPE;
 			break;
 		}
 
-		if (!ipipe->nrbufs && !ipipe->writers)
+		if (!ipipe->nrbufs && !atomic_read(&ipipe->writers))
 			break;
 
 		/*
@@ -1925,7 +1925,7 @@ static int link_pipe(struct pipe_inode_i
 	pipe_double_lock(ipipe, opipe);
 
 	do {
-		if (!opipe->readers) {
+		if (!atomic_read(&opipe->readers)) {
 			send_sig(SIGPIPE, current, 0);
 			if (!ret)
 				ret = -EPIPE;
@@ -1970,7 +1970,7 @@ static int link_pipe(struct pipe_inode_i
 	 * return EAGAIN if we have the potential of some data in the
 	 * future, otherwise just return 0
 	 */
-	if (!ret && ipipe->waiting_writers && (flags & SPLICE_F_NONBLOCK))
+	if (!ret && atomic_read(&ipipe->waiting_writers) && (flags & SPLICE_F_NONBLOCK))
 		ret = -EAGAIN;
 
 	pipe_unlock(ipipe);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/sysfs/file.c linux-3.3.8-pax/fs/sysfs/file.c
--- linux-3.3.8/fs/sysfs/file.c	2012-03-19 10:39:10.472049254 +0100
+++ linux-3.3.8-pax/fs/sysfs/file.c	2012-03-19 10:43:44.324034633 +0100
@@ -37,7 +37,7 @@ static DEFINE_SPINLOCK(sysfs_open_dirent
 
 struct sysfs_open_dirent {
 	atomic_t		refcnt;
-	atomic_t		event;
+	atomic_unchecked_t	event;
 	wait_queue_head_t	poll;
 	struct list_head	buffers; /* goes through sysfs_buffer.list */
 };
@@ -81,7 +81,7 @@ static int fill_read_buffer(struct dentr
 	if (!sysfs_get_active(attr_sd))
 		return -ENODEV;
 
-	buffer->event = atomic_read(&attr_sd->s_attr.open->event);
+	buffer->event = atomic_read_unchecked(&attr_sd->s_attr.open->event);
 	count = ops->show(kobj, attr_sd->s_attr.attr, buffer->page);
 
 	sysfs_put_active(attr_sd);
@@ -287,7 +287,7 @@ static int sysfs_get_open_dirent(struct
 		return -ENOMEM;
 
 	atomic_set(&new_od->refcnt, 0);
-	atomic_set(&new_od->event, 1);
+	atomic_set_unchecked(&new_od->event, 1);
 	init_waitqueue_head(&new_od->poll);
 	INIT_LIST_HEAD(&new_od->buffers);
 	goto retry;
@@ -432,7 +432,7 @@ static unsigned int sysfs_poll(struct fi
 
 	sysfs_put_active(attr_sd);
 
-	if (buffer->event != atomic_read(&od->event))
+	if (buffer->event != atomic_read_unchecked(&od->event))
 		goto trigger;
 
 	return DEFAULT_POLLMASK;
@@ -451,7 +451,7 @@ void sysfs_notify_dirent(struct sysfs_di
 
 	od = sd->s_attr.open;
 	if (od) {
-		atomic_inc(&od->event);
+		atomic_inc_unchecked(&od->event);
 		wake_up_interruptible(&od->poll);
 	}
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/sysfs/symlink.c linux-3.3.8-pax/fs/sysfs/symlink.c
--- linux-3.3.8/fs/sysfs/symlink.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/fs/sysfs/symlink.c	2012-03-19 10:43:44.324034633 +0100
@@ -286,7 +286,7 @@ static void *sysfs_follow_link(struct de
 
 static void sysfs_put_link(struct dentry *dentry, struct nameidata *nd, void *cookie)
 {
-	char *page = nd_get_link(nd);
+	const char *page = nd_get_link(nd);
 	if (!IS_ERR(page))
 		free_page((unsigned long)page);
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/udf/misc.c linux-3.3.8-pax/fs/udf/misc.c
--- linux-3.3.8/fs/udf/misc.c	2012-01-08 19:48:26.387471016 +0100
+++ linux-3.3.8-pax/fs/udf/misc.c	2012-03-19 10:43:44.324034634 +0100
@@ -289,7 +289,7 @@ void udf_new_tag(char *data, uint16_t id
 
 u8 udf_tag_checksum(const struct tag *t)
 {
-	u8 *data = (u8 *)t;
+	const u8 *data = (const u8 *)t;
 	u8 checksum = 0;
 	int i;
 	for (i = 0; i < sizeof(struct tag); ++i)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/xattr_acl.c linux-3.3.8-pax/fs/xattr_acl.c
--- linux-3.3.8/fs/xattr_acl.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/fs/xattr_acl.c	2012-03-19 10:43:44.324034634 +0100
@@ -17,8 +17,8 @@
 struct posix_acl *
 posix_acl_from_xattr(const void *value, size_t size)
 {
-	posix_acl_xattr_header *header = (posix_acl_xattr_header *)value;
-	posix_acl_xattr_entry *entry = (posix_acl_xattr_entry *)(header+1), *end;
+	const posix_acl_xattr_header *header = (const posix_acl_xattr_header *)value;
+	const posix_acl_xattr_entry *entry = (const posix_acl_xattr_entry *)(header+1), *end;
 	int count;
 	struct posix_acl *acl;
 	struct posix_acl_entry *acl_e;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/xfs/xfs_bmap.c linux-3.3.8-pax/fs/xfs/xfs_bmap.c
--- linux-3.3.8/fs/xfs/xfs_bmap.c	2012-03-19 10:39:10.540049253 +0100
+++ linux-3.3.8-pax/fs/xfs/xfs_bmap.c	2012-03-19 10:43:44.328034634 +0100
@@ -190,7 +190,7 @@ xfs_bmap_validate_ret(
 	int			nmap,
 	int			ret_nmap);
 #else
-#define	xfs_bmap_validate_ret(bno,len,flags,mval,onmap,nmap)
+#define	xfs_bmap_validate_ret(bno,len,flags,mval,onmap,nmap) do {} while (0)
 #endif /* DEBUG */
 
 STATIC int
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/xfs/xfs_dir2_sf.c linux-3.3.8-pax/fs/xfs/xfs_dir2_sf.c
--- linux-3.3.8/fs/xfs/xfs_dir2_sf.c	2011-10-24 12:48:40.563091008 +0200
+++ linux-3.3.8-pax/fs/xfs/xfs_dir2_sf.c	2012-03-19 10:43:44.328034634 +0100
@@ -852,7 +852,15 @@ xfs_dir2_sf_getdents(
 		}
 
 		ino = xfs_dir2_sfe_get_ino(sfp, sfep);
-		if (filldir(dirent, (char *)sfep->name, sfep->namelen,
+		if (dp->i_df.if_u1.if_data == dp->i_df.if_u2.if_inline_data) {
+			char name[sfep->namelen];
+			memcpy(name, sfep->name, sfep->namelen);
+			if (filldir(dirent, name, sfep->namelen,
+			    off & 0x7fffffff, ino, DT_UNKNOWN)) {
+				*offset = off & 0x7fffffff;
+				return 0;
+			}
+		} else if (filldir(dirent, (char *)sfep->name, sfep->namelen,
 			    off & 0x7fffffff, ino, DT_UNKNOWN)) {
 			*offset = off & 0x7fffffff;
 			return 0;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/xfs/xfs_ioctl.c linux-3.3.8-pax/fs/xfs/xfs_ioctl.c
--- linux-3.3.8/fs/xfs/xfs_ioctl.c	2012-03-19 10:39:10.568049250 +0100
+++ linux-3.3.8-pax/fs/xfs/xfs_ioctl.c	2012-03-19 10:43:44.332034633 +0100
@@ -128,7 +128,7 @@ xfs_find_handle(
 	}
 
 	error = -EFAULT;
-	if (copy_to_user(hreq->ohandle, &handle, hsize) ||
+	if (hsize > sizeof handle || copy_to_user(hreq->ohandle, &handle, hsize) ||
 	    copy_to_user(hreq->ohandlen, &hsize, sizeof(__s32)))
 		goto out_put;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/fs/xfs/xfs_iops.c linux-3.3.8-pax/fs/xfs/xfs_iops.c
--- linux-3.3.8/fs/xfs/xfs_iops.c	2012-03-19 10:39:10.572049250 +0100
+++ linux-3.3.8-pax/fs/xfs/xfs_iops.c	2012-03-19 10:43:44.332034633 +0100
@@ -447,7 +447,7 @@ xfs_vn_put_link(
 	struct nameidata *nd,
 	void		*p)
 {
-	char		*s = nd_get_link(nd);
+	const char	*s = nd_get_link(nd);
 
 	if (!IS_ERR(s))
 		kfree(s);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/acpi/acpi_bus.h linux-3.3.8-pax/include/acpi/acpi_bus.h
--- linux-3.3.8/include/acpi/acpi_bus.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/acpi/acpi_bus.h	2012-03-19 10:43:44.332034633 +0100
@@ -107,7 +107,7 @@ struct acpi_device_ops {
 	acpi_op_bind bind;
 	acpi_op_unbind unbind;
 	acpi_op_notify notify;
-};
+} __no_const;
 
 #define ACPI_DRIVER_ALL_NOTIFY_EVENTS	0x1	/* system AND device events */
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/asm-generic/atomic64.h linux-3.3.8-pax/include/asm-generic/atomic64.h
--- linux-3.3.8/include/asm-generic/atomic64.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/asm-generic/atomic64.h	2012-03-19 10:43:44.332034633 +0100
@@ -16,6 +16,8 @@ typedef struct {
 	long long counter;
 } atomic64_t;
 
+typedef atomic64_t atomic64_unchecked_t;
+
 #define ATOMIC64_INIT(i)	{ (i) }
 
 extern long long atomic64_read(const atomic64_t *v);
@@ -39,4 +41,14 @@ extern int	 atomic64_add_unless(atomic64
 #define atomic64_dec_and_test(v)	(atomic64_dec_return((v)) == 0)
 #define atomic64_inc_not_zero(v) 	atomic64_add_unless((v), 1LL, 0LL)
 
+#define atomic64_read_unchecked(v) atomic64_read(v)
+#define atomic64_set_unchecked(v, i) atomic64_set((v), (i))
+#define atomic64_add_unchecked(a, v) atomic64_add((a), (v))
+#define atomic64_add_return_unchecked(a, v) atomic64_add_return((a), (v))
+#define atomic64_sub_unchecked(a, v) atomic64_sub((a), (v))
+#define atomic64_inc_unchecked(v) atomic64_inc(v)
+#define atomic64_inc_return_unchecked(v) atomic64_inc_return(v)
+#define atomic64_dec_unchecked(v) atomic64_dec(v)
+#define atomic64_cmpxchg_unchecked(v, o, n) atomic64_cmpxchg((v), (o), (n))
+
 #endif  /*  _ASM_GENERIC_ATOMIC64_H  */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/asm-generic/atomic-long.h linux-3.3.8-pax/include/asm-generic/atomic-long.h
--- linux-3.3.8/include/asm-generic/atomic-long.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/asm-generic/atomic-long.h	2012-03-19 10:43:44.340034632 +0100
@@ -22,6 +22,12 @@
 
 typedef atomic64_t atomic_long_t;
 
+#ifdef CONFIG_PAX_REFCOUNT
+typedef atomic64_unchecked_t atomic_long_unchecked_t;
+#else
+typedef atomic64_t atomic_long_unchecked_t;
+#endif
+
 #define ATOMIC_LONG_INIT(i)	ATOMIC64_INIT(i)
 
 static inline long atomic_long_read(atomic_long_t *l)
@@ -31,6 +37,15 @@ static inline long atomic_long_read(atom
 	return (long)atomic64_read(v);
 }
 
+#ifdef CONFIG_PAX_REFCOUNT
+static inline long atomic_long_read_unchecked(atomic_long_unchecked_t *l)
+{
+	atomic64_unchecked_t *v = (atomic64_unchecked_t *)l;
+
+	return (long)atomic64_read_unchecked(v);
+}
+#endif
+
 static inline void atomic_long_set(atomic_long_t *l, long i)
 {
 	atomic64_t *v = (atomic64_t *)l;
@@ -38,6 +53,15 @@ static inline void atomic_long_set(atomi
 	atomic64_set(v, i);
 }
 
+#ifdef CONFIG_PAX_REFCOUNT
+static inline void atomic_long_set_unchecked(atomic_long_unchecked_t *l, long i)
+{
+	atomic64_unchecked_t *v = (atomic64_unchecked_t *)l;
+
+	atomic64_set_unchecked(v, i);
+}
+#endif
+
 static inline void atomic_long_inc(atomic_long_t *l)
 {
 	atomic64_t *v = (atomic64_t *)l;
@@ -45,6 +69,15 @@ static inline void atomic_long_inc(atomi
 	atomic64_inc(v);
 }
 
+#ifdef CONFIG_PAX_REFCOUNT
+static inline void atomic_long_inc_unchecked(atomic_long_unchecked_t *l)
+{
+	atomic64_unchecked_t *v = (atomic64_unchecked_t *)l;
+
+	atomic64_inc_unchecked(v);
+}
+#endif
+
 static inline void atomic_long_dec(atomic_long_t *l)
 {
 	atomic64_t *v = (atomic64_t *)l;
@@ -52,6 +85,15 @@ static inline void atomic_long_dec(atomi
 	atomic64_dec(v);
 }
 
+#ifdef CONFIG_PAX_REFCOUNT
+static inline void atomic_long_dec_unchecked(atomic_long_unchecked_t *l)
+{
+	atomic64_unchecked_t *v = (atomic64_unchecked_t *)l;
+
+	atomic64_dec_unchecked(v);
+}
+#endif
+
 static inline void atomic_long_add(long i, atomic_long_t *l)
 {
 	atomic64_t *v = (atomic64_t *)l;
@@ -59,6 +101,15 @@ static inline void atomic_long_add(long
 	atomic64_add(i, v);
 }
 
+#ifdef CONFIG_PAX_REFCOUNT
+static inline void atomic_long_add_unchecked(long i, atomic_long_unchecked_t *l)
+{
+	atomic64_unchecked_t *v = (atomic64_unchecked_t *)l;
+
+	atomic64_add_unchecked(i, v);
+}
+#endif
+
 static inline void atomic_long_sub(long i, atomic_long_t *l)
 {
 	atomic64_t *v = (atomic64_t *)l;
@@ -66,6 +117,15 @@ static inline void atomic_long_sub(long
 	atomic64_sub(i, v);
 }
 
+#ifdef CONFIG_PAX_REFCOUNT
+static inline void atomic_long_sub_unchecked(long i, atomic_long_unchecked_t *l)
+{
+	atomic64_unchecked_t *v = (atomic64_unchecked_t *)l;
+
+	atomic64_sub_unchecked(i, v);
+}
+#endif
+
 static inline int atomic_long_sub_and_test(long i, atomic_long_t *l)
 {
 	atomic64_t *v = (atomic64_t *)l;
@@ -115,6 +175,15 @@ static inline long atomic_long_inc_retur
 	return (long)atomic64_inc_return(v);
 }
 
+#ifdef CONFIG_PAX_REFCOUNT
+static inline long atomic_long_inc_return_unchecked(atomic_long_unchecked_t *l)
+{
+	atomic64_unchecked_t *v = (atomic64_unchecked_t *)l;
+
+	return (long)atomic64_inc_return_unchecked(v);
+}
+#endif
+
 static inline long atomic_long_dec_return(atomic_long_t *l)
 {
 	atomic64_t *v = (atomic64_t *)l;
@@ -140,6 +209,12 @@ static inline long atomic_long_add_unles
 
 typedef atomic_t atomic_long_t;
 
+#ifdef CONFIG_PAX_REFCOUNT
+typedef atomic_unchecked_t atomic_long_unchecked_t;
+#else
+typedef atomic_t atomic_long_unchecked_t;
+#endif
+
 #define ATOMIC_LONG_INIT(i)	ATOMIC_INIT(i)
 static inline long atomic_long_read(atomic_long_t *l)
 {
@@ -148,6 +223,15 @@ static inline long atomic_long_read(atom
 	return (long)atomic_read(v);
 }
 
+#ifdef CONFIG_PAX_REFCOUNT
+static inline long atomic_long_read_unchecked(atomic_long_unchecked_t *l)
+{
+	atomic_unchecked_t *v = (atomic_unchecked_t *)l;
+
+	return (long)atomic_read_unchecked(v);
+}
+#endif
+
 static inline void atomic_long_set(atomic_long_t *l, long i)
 {
 	atomic_t *v = (atomic_t *)l;
@@ -155,6 +239,15 @@ static inline void atomic_long_set(atomi
 	atomic_set(v, i);
 }
 
+#ifdef CONFIG_PAX_REFCOUNT
+static inline void atomic_long_set_unchecked(atomic_long_unchecked_t *l, long i)
+{
+	atomic_unchecked_t *v = (atomic_unchecked_t *)l;
+
+	atomic_set_unchecked(v, i);
+}
+#endif
+
 static inline void atomic_long_inc(atomic_long_t *l)
 {
 	atomic_t *v = (atomic_t *)l;
@@ -162,6 +255,15 @@ static inline void atomic_long_inc(atomi
 	atomic_inc(v);
 }
 
+#ifdef CONFIG_PAX_REFCOUNT
+static inline void atomic_long_inc_unchecked(atomic_long_unchecked_t *l)
+{
+	atomic_unchecked_t *v = (atomic_unchecked_t *)l;
+
+	atomic_inc_unchecked(v);
+}
+#endif
+
 static inline void atomic_long_dec(atomic_long_t *l)
 {
 	atomic_t *v = (atomic_t *)l;
@@ -169,6 +271,15 @@ static inline void atomic_long_dec(atomi
 	atomic_dec(v);
 }
 
+#ifdef CONFIG_PAX_REFCOUNT
+static inline void atomic_long_dec_unchecked(atomic_long_unchecked_t *l)
+{
+	atomic_unchecked_t *v = (atomic_unchecked_t *)l;
+
+	atomic_dec_unchecked(v);
+}
+#endif
+
 static inline void atomic_long_add(long i, atomic_long_t *l)
 {
 	atomic_t *v = (atomic_t *)l;
@@ -176,6 +287,15 @@ static inline void atomic_long_add(long
 	atomic_add(i, v);
 }
 
+#ifdef CONFIG_PAX_REFCOUNT
+static inline void atomic_long_add_unchecked(long i, atomic_long_unchecked_t *l)
+{
+	atomic_unchecked_t *v = (atomic_unchecked_t *)l;
+
+	atomic_add_unchecked(i, v);
+}
+#endif
+
 static inline void atomic_long_sub(long i, atomic_long_t *l)
 {
 	atomic_t *v = (atomic_t *)l;
@@ -183,6 +303,15 @@ static inline void atomic_long_sub(long
 	atomic_sub(i, v);
 }
 
+#ifdef CONFIG_PAX_REFCOUNT
+static inline void atomic_long_sub_unchecked(long i, atomic_long_unchecked_t *l)
+{
+	atomic_unchecked_t *v = (atomic_unchecked_t *)l;
+
+	atomic_sub_unchecked(i, v);
+}
+#endif
+
 static inline int atomic_long_sub_and_test(long i, atomic_long_t *l)
 {
 	atomic_t *v = (atomic_t *)l;
@@ -232,6 +361,15 @@ static inline long atomic_long_inc_retur
 	return (long)atomic_inc_return(v);
 }
 
+#ifdef CONFIG_PAX_REFCOUNT
+static inline long atomic_long_inc_return_unchecked(atomic_long_unchecked_t *l)
+{
+	atomic_unchecked_t *v = (atomic_unchecked_t *)l;
+
+	return (long)atomic_inc_return_unchecked(v);
+}
+#endif
+
 static inline long atomic_long_dec_return(atomic_long_t *l)
 {
 	atomic_t *v = (atomic_t *)l;
@@ -255,4 +393,49 @@ static inline long atomic_long_add_unles
 
 #endif  /*  BITS_PER_LONG == 64  */
 
+#ifdef CONFIG_PAX_REFCOUNT
+static inline void pax_refcount_needs_these_functions(void)
+{
+	atomic_read_unchecked((atomic_unchecked_t *)NULL);
+	atomic_set_unchecked((atomic_unchecked_t *)NULL, 0);
+	atomic_add_unchecked(0, (atomic_unchecked_t *)NULL);
+	atomic_sub_unchecked(0, (atomic_unchecked_t *)NULL);
+	atomic_inc_unchecked((atomic_unchecked_t *)NULL);
+	(void)atomic_inc_and_test_unchecked((atomic_unchecked_t *)NULL);
+	atomic_inc_return_unchecked((atomic_unchecked_t *)NULL);
+	atomic_add_return_unchecked(0, (atomic_unchecked_t *)NULL);
+	atomic_dec_unchecked((atomic_unchecked_t *)NULL);
+	atomic_cmpxchg_unchecked((atomic_unchecked_t *)NULL, 0, 0);
+	(void)atomic_xchg_unchecked((atomic_unchecked_t *)NULL, 0);
+
+	atomic_long_read_unchecked((atomic_long_unchecked_t *)NULL);
+	atomic_long_set_unchecked((atomic_long_unchecked_t *)NULL, 0);
+	atomic_long_add_unchecked(0, (atomic_long_unchecked_t *)NULL);
+	atomic_long_sub_unchecked(0, (atomic_long_unchecked_t *)NULL);
+	atomic_long_inc_unchecked((atomic_long_unchecked_t *)NULL);
+	atomic_long_inc_return_unchecked((atomic_long_unchecked_t *)NULL);
+	atomic_long_dec_unchecked((atomic_long_unchecked_t *)NULL);
+}
+#else
+#define atomic_read_unchecked(v) atomic_read(v)
+#define atomic_set_unchecked(v, i) atomic_set((v), (i))
+#define atomic_add_unchecked(i, v) atomic_add((i), (v))
+#define atomic_sub_unchecked(i, v) atomic_sub((i), (v))
+#define atomic_inc_unchecked(v) atomic_inc(v)
+#define atomic_inc_and_test_unchecked(v) atomic_inc_and_test(v)
+#define atomic_inc_return_unchecked(v) atomic_inc_return(v)
+#define atomic_add_return_unchecked(i, v) atomic_add_return((i), (v))
+#define atomic_dec_unchecked(v) atomic_dec(v)
+#define atomic_cmpxchg_unchecked(v, o, n) atomic_cmpxchg((v), (o), (n))
+#define atomic_xchg_unchecked(v, i) atomic_xchg((v), (i))
+
+#define atomic_long_read_unchecked(v) atomic_long_read(v)
+#define atomic_long_set_unchecked(v, i) atomic_long_set((v), (i))
+#define atomic_long_add_unchecked(i, v) atomic_long_add((i), (v))
+#define atomic_long_sub_unchecked(i, v) atomic_long_sub((i), (v))
+#define atomic_long_inc_unchecked(v) atomic_long_inc(v)
+#define atomic_long_inc_return_unchecked(v) atomic_long_inc_return(v)
+#define atomic_long_dec_unchecked(v) atomic_long_dec(v)
+#endif
+
 #endif  /*  _ASM_GENERIC_ATOMIC_LONG_H  */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/asm-generic/cache.h linux-3.3.8-pax/include/asm-generic/cache.h
--- linux-3.3.8/include/asm-generic/cache.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/asm-generic/cache.h	2012-03-19 10:43:44.340034632 +0100
@@ -6,7 +6,7 @@
  * cache lines need to provide their own cache.h.
  */
 
-#define L1_CACHE_SHIFT		5
-#define L1_CACHE_BYTES		(1 << L1_CACHE_SHIFT)
+#define L1_CACHE_SHIFT		5UL
+#define L1_CACHE_BYTES		(1UL << L1_CACHE_SHIFT)
 
 #endif /* __ASM_GENERIC_CACHE_H */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/asm-generic/emergency-restart.h linux-3.3.8-pax/include/asm-generic/emergency-restart.h
--- linux-3.3.8/include/asm-generic/emergency-restart.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/asm-generic/emergency-restart.h	2012-03-19 10:43:44.340034632 +0100
@@ -1,7 +1,7 @@
 #ifndef _ASM_GENERIC_EMERGENCY_RESTART_H
 #define _ASM_GENERIC_EMERGENCY_RESTART_H
 
-static inline void machine_emergency_restart(void)
+static inline __noreturn void machine_emergency_restart(void)
 {
 	machine_restart(NULL);
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/asm-generic/kmap_types.h linux-3.3.8-pax/include/asm-generic/kmap_types.h
--- linux-3.3.8/include/asm-generic/kmap_types.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/asm-generic/kmap_types.h	2012-03-19 10:43:44.344034632 +0100
@@ -29,10 +29,11 @@ KMAP_D(16)	KM_IRQ_PTE,
 KMAP_D(17)	KM_NMI,
 KMAP_D(18)	KM_NMI_PTE,
 KMAP_D(19)	KM_KDB,
+KMAP_D(20)	KM_CLEARPAGE,
 /*
  * Remember to update debug_kmap_atomic() when adding new kmap types!
  */
-KMAP_D(20)	KM_TYPE_NR
+KMAP_D(21)	KM_TYPE_NR
 };
 
 #undef KMAP_D
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/asm-generic/local.h linux-3.3.8-pax/include/asm-generic/local.h
--- linux-3.3.8/include/asm-generic/local.h	2011-10-24 12:48:40.939091028 +0200
+++ linux-3.3.8-pax/include/asm-generic/local.h	2012-03-19 10:43:44.344034632 +0100
@@ -39,6 +39,7 @@ typedef struct
 #define local_add_return(i, l) atomic_long_add_return((i), (&(l)->a))
 #define local_sub_return(i, l) atomic_long_sub_return((i), (&(l)->a))
 #define local_inc_return(l) atomic_long_inc_return(&(l)->a)
+#define local_dec_return(l) atomic_long_dec_return(&(l)->a)
 
 #define local_cmpxchg(l, o, n) atomic_long_cmpxchg((&(l)->a), (o), (n))
 #define local_xchg(l, n) atomic_long_xchg((&(l)->a), (n))
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/asm-generic/pgtable.h linux-3.3.8-pax/include/asm-generic/pgtable.h
--- linux-3.3.8/include/asm-generic/pgtable.h	2012-04-03 22:02:50.474110027 +0200
+++ linux-3.3.8-pax/include/asm-generic/pgtable.h	2012-04-03 22:05:56.534119410 +0200
@@ -502,6 +502,14 @@ static inline int pmd_trans_unstable(pmd
 #endif
 }
 
+#ifndef __HAVE_ARCH_PAX_OPEN_KERNEL
+static inline unsigned long pax_open_kernel(void) { return 0; }
+#endif
+
+#ifndef __HAVE_ARCH_PAX_CLOSE_KERNEL
+static inline unsigned long pax_close_kernel(void) { return 0; }
+#endif
+
 #endif /* CONFIG_MMU */
 
 #endif /* !__ASSEMBLY__ */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/asm-generic/pgtable-nopmd.h linux-3.3.8-pax/include/asm-generic/pgtable-nopmd.h
--- linux-3.3.8/include/asm-generic/pgtable-nopmd.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/asm-generic/pgtable-nopmd.h	2012-03-19 10:43:44.344034633 +0100
@@ -1,14 +1,19 @@
 #ifndef _PGTABLE_NOPMD_H
 #define _PGTABLE_NOPMD_H
 
-#ifndef __ASSEMBLY__
-
 #include <asm-generic/pgtable-nopud.h>
 
-struct mm_struct;
-
 #define __PAGETABLE_PMD_FOLDED
 
+#define PMD_SHIFT	PUD_SHIFT
+#define PTRS_PER_PMD	1
+#define PMD_SIZE  	(_AC(1,UL) << PMD_SHIFT)
+#define PMD_MASK  	(~(PMD_SIZE-1))
+
+#ifndef __ASSEMBLY__
+
+struct mm_struct;
+
 /*
  * Having the pmd type consist of a pud gets the size right, and allows
  * us to conceptually access the pud entry that this pmd is folded into
@@ -16,11 +21,6 @@ struct mm_struct;
  */
 typedef struct { pud_t pud; } pmd_t;
 
-#define PMD_SHIFT	PUD_SHIFT
-#define PTRS_PER_PMD	1
-#define PMD_SIZE  	(1UL << PMD_SHIFT)
-#define PMD_MASK  	(~(PMD_SIZE-1))
-
 /*
  * The "pud_xxx()" functions here are trivial for a folded two-level
  * setup: the pmd is never bad, and a pmd always exists (as it's folded
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/asm-generic/pgtable-nopud.h linux-3.3.8-pax/include/asm-generic/pgtable-nopud.h
--- linux-3.3.8/include/asm-generic/pgtable-nopud.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/asm-generic/pgtable-nopud.h	2012-05-21 18:00:37.873190994 +0200
@@ -1,10 +1,15 @@
 #ifndef _PGTABLE_NOPUD_H
 #define _PGTABLE_NOPUD_H
 
-#ifndef __ASSEMBLY__
-
 #define __PAGETABLE_PUD_FOLDED
 
+#define PUD_SHIFT	PGDIR_SHIFT
+#define PTRS_PER_PUD	1
+#define PUD_SIZE  	(_AC(1,UL) << PUD_SHIFT)
+#define PUD_MASK  	(~(PUD_SIZE-1))
+
+#ifndef __ASSEMBLY__
+
 /*
  * Having the pud type consist of a pgd gets the size right, and allows
  * us to conceptually access the pgd entry that this pud is folded into
@@ -12,11 +17,6 @@
  */
 typedef struct { pgd_t pgd; } pud_t;
 
-#define PUD_SHIFT	PGDIR_SHIFT
-#define PTRS_PER_PUD	1
-#define PUD_SIZE  	(1UL << PUD_SHIFT)
-#define PUD_MASK  	(~(PUD_SIZE-1))
-
 /*
  * The "pgd_xxx()" functions here are trivial for a folded two-level
  * setup: the pud is never bad, and a pud always exists (as it's folded
@@ -29,6 +29,7 @@ static inline void pgd_clear(pgd_t *pgd)
 #define pud_ERROR(pud)				(pgd_ERROR((pud).pgd))
 
 #define pgd_populate(mm, pgd, pud)		do { } while (0)
+#define pgd_populate_kernel(mm, pgd, pud)	do { } while (0)
 /*
  * (puds are folded into pgds so this doesn't get actually called,
  * but the define is needed for a generic inline function.)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/asm-generic/vmlinux.lds.h linux-3.3.8-pax/include/asm-generic/vmlinux.lds.h
--- linux-3.3.8/include/asm-generic/vmlinux.lds.h	2012-01-08 19:48:26.655471002 +0100
+++ linux-3.3.8-pax/include/asm-generic/vmlinux.lds.h	2012-03-19 10:43:44.344034633 +0100
@@ -217,6 +217,7 @@
 	.rodata           : AT(ADDR(.rodata) - LOAD_OFFSET) {		\
 		VMLINUX_SYMBOL(__start_rodata) = .;			\
 		*(.rodata) *(.rodata.*)					\
+		*(.data..read_only)					\
 		*(__vermagic)		/* Kernel version magic */	\
 		. = ALIGN(8);						\
 		VMLINUX_SYMBOL(__start___tracepoints_ptrs) = .;		\
@@ -722,17 +723,18 @@
  * section in the linker script will go there too.  @phdr should have
  * a leading colon.
  *
- * Note that this macros defines __per_cpu_load as an absolute symbol.
+ * Note that this macros defines per_cpu_load as an absolute symbol.
  * If there is no need to put the percpu section at a predetermined
  * address, use PERCPU_SECTION.
  */
 #define PERCPU_VADDR(cacheline, vaddr, phdr)				\
-	VMLINUX_SYMBOL(__per_cpu_load) = .;				\
-	.data..percpu vaddr : AT(VMLINUX_SYMBOL(__per_cpu_load)		\
+	per_cpu_load = .;						\
+	.data..percpu vaddr : AT(VMLINUX_SYMBOL(per_cpu_load)		\
 				- LOAD_OFFSET) {			\
+		VMLINUX_SYMBOL(__per_cpu_load) = . + per_cpu_load;	\
 		PERCPU_INPUT(cacheline)					\
 	} phdr								\
-	. = VMLINUX_SYMBOL(__per_cpu_load) + SIZEOF(.data..percpu);
+	. = VMLINUX_SYMBOL(per_cpu_load) + SIZEOF(.data..percpu);
 
 /**
  * PERCPU_SECTION - define output section for percpu area, simple version
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/drm/drm_crtc_helper.h linux-3.3.8-pax/include/drm/drm_crtc_helper.h
--- linux-3.3.8/include/drm/drm_crtc_helper.h	2012-03-19 10:39:10.800049513 +0100
+++ linux-3.3.8-pax/include/drm/drm_crtc_helper.h	2012-03-19 10:43:44.344034633 +0100
@@ -74,7 +74,7 @@ struct drm_crtc_helper_funcs {
 
 	/* disable crtc when not in use - more explicit than dpms off */
 	void (*disable)(struct drm_crtc *crtc);
-};
+} __no_const;
 
 struct drm_encoder_helper_funcs {
 	void (*dpms)(struct drm_encoder *encoder, int mode);
@@ -95,7 +95,7 @@ struct drm_encoder_helper_funcs {
 					    struct drm_connector *connector);
 	/* disable encoder when not in use - more explicit than dpms off */
 	void (*disable)(struct drm_encoder *encoder);
-};
+} __no_const;
 
 struct drm_connector_helper_funcs {
 	int (*get_modes)(struct drm_connector *connector);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/drm/drmP.h linux-3.3.8-pax/include/drm/drmP.h
--- linux-3.3.8/include/drm/drmP.h	2012-03-19 10:39:10.796049549 +0100
+++ linux-3.3.8-pax/include/drm/drmP.h	2012-03-19 10:43:44.348034633 +0100
@@ -72,6 +72,7 @@
 #include <linux/workqueue.h>
 #include <linux/poll.h>
 #include <asm/pgalloc.h>
+#include <asm/local.h>
 #include "drm.h"
 
 #include <linux/idr.h>
@@ -1038,7 +1039,7 @@ struct drm_device {
 
 	/** \name Usage Counters */
 	/*@{ */
-	int open_count;			/**< Outstanding files open */
+	local_t open_count;		/**< Outstanding files open */
 	atomic_t ioctl_count;		/**< Outstanding IOCTLs pending */
 	atomic_t vma_count;		/**< Outstanding vma areas open */
 	int buf_use;			/**< Buffers in use -- cannot alloc */
@@ -1049,7 +1050,7 @@ struct drm_device {
 	/*@{ */
 	unsigned long counters;
 	enum drm_stat_type types[15];
-	atomic_t counts[15];
+	atomic_unchecked_t counts[15];
 	/*@} */
 
 	struct list_head filelist;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/drm/ttm/ttm_memory.h linux-3.3.8-pax/include/drm/ttm/ttm_memory.h
--- linux-3.3.8/include/drm/ttm/ttm_memory.h	2011-10-24 12:48:41.031090982 +0200
+++ linux-3.3.8-pax/include/drm/ttm/ttm_memory.h	2012-03-19 10:43:44.348034633 +0100
@@ -47,7 +47,7 @@
 
 struct ttm_mem_shrink {
 	int (*do_shrink) (struct ttm_mem_shrink *);
-};
+} __no_const;
 
 /**
  * struct ttm_mem_global - Global memory accounting structure.
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/a.out.h linux-3.3.8-pax/include/linux/a.out.h
--- linux-3.3.8/include/linux/a.out.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/linux/a.out.h	2012-03-19 10:43:44.348034633 +0100
@@ -39,6 +39,14 @@ enum machine_type {
   M_MIPS2 = 152		/* MIPS R6000/R4000 binary */
 };
 
+/* Constants for the N_FLAGS field */
+#define F_PAX_PAGEEXEC	1	/* Paging based non-executable pages */
+#define F_PAX_EMUTRAMP	2	/* Emulate trampolines */
+#define F_PAX_MPROTECT	4	/* Restrict mprotect() */
+#define F_PAX_RANDMMAP	8	/* Randomize mmap() base */
+/*#define F_PAX_RANDEXEC	16*/	/* Randomize ET_EXEC base */
+#define F_PAX_SEGMEXEC	32	/* Segmentation based non-executable pages */
+
 #if !defined (N_MAGIC)
 #define N_MAGIC(exec) ((exec).a_info & 0xffff)
 #endif
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/atmdev.h linux-3.3.8-pax/include/linux/atmdev.h
--- linux-3.3.8/include/linux/atmdev.h	2012-03-19 10:39:10.836049241 +0100
+++ linux-3.3.8-pax/include/linux/atmdev.h	2012-03-19 10:43:44.352034632 +0100
@@ -237,7 +237,7 @@ struct compat_atm_iobuf {
 #endif
 
 struct k_atm_aal_stats {
-#define __HANDLE_ITEM(i) atomic_t i
+#define __HANDLE_ITEM(i) atomic_unchecked_t i
 	__AAL_STAT_ITEMS
 #undef __HANDLE_ITEM
 };
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/binfmts.h linux-3.3.8-pax/include/linux/binfmts.h
--- linux-3.3.8/include/linux/binfmts.h	2012-03-19 10:39:10.840049237 +0100
+++ linux-3.3.8-pax/include/linux/binfmts.h	2012-03-19 10:43:44.352034632 +0100
@@ -89,6 +89,7 @@ struct linux_binfmt {
 	int (*load_binary)(struct linux_binprm *, struct  pt_regs * regs);
 	int (*load_shlib)(struct file *);
 	int (*core_dump)(struct coredump_params *cprm);
+	void (*handle_mprotect)(struct vm_area_struct *vma, unsigned long newflags);
 	unsigned long min_coredump;	/* minimal dump size */
 };
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/blkdev.h linux-3.3.8-pax/include/linux/blkdev.h
--- linux-3.3.8/include/linux/blkdev.h	2012-03-19 10:39:10.844049232 +0100
+++ linux-3.3.8-pax/include/linux/blkdev.h	2012-03-19 10:43:44.352034632 +0100
@@ -1379,7 +1379,7 @@ struct block_device_operations {
 	/* this callback is with swap_lock and sometimes page table lock held */
 	void (*swap_slot_free_notify) (struct block_device *, unsigned long);
 	struct module *owner;
-};
+} __do_const;
 
 extern int __blkdev_driver_ioctl(struct block_device *, fmode_t, unsigned int,
 				 unsigned long);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/blktrace_api.h linux-3.3.8-pax/include/linux/blktrace_api.h
--- linux-3.3.8/include/linux/blktrace_api.h	2012-01-08 19:48:26.739470998 +0100
+++ linux-3.3.8-pax/include/linux/blktrace_api.h	2012-03-19 10:43:44.356034632 +0100
@@ -162,7 +162,7 @@ struct blk_trace {
 	struct dentry *dir;
 	struct dentry *dropped_file;
 	struct dentry *msg_file;
-	atomic_t dropped;
+	atomic_unchecked_t dropped;
 };
 
 extern int blk_trace_ioctl(struct block_device *, unsigned, char __user *);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/byteorder/little_endian.h linux-3.3.8-pax/include/linux/byteorder/little_endian.h
--- linux-3.3.8/include/linux/byteorder/little_endian.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/linux/byteorder/little_endian.h	2012-03-19 10:43:44.356034632 +0100
@@ -42,51 +42,51 @@
 
 static inline __le64 __cpu_to_le64p(const __u64 *p)
 {
-	return (__force __le64)*p;
+	return (__force const __le64)*p;
 }
 static inline __u64 __le64_to_cpup(const __le64 *p)
 {
-	return (__force __u64)*p;
+	return (__force const __u64)*p;
 }
 static inline __le32 __cpu_to_le32p(const __u32 *p)
 {
-	return (__force __le32)*p;
+	return (__force const __le32)*p;
 }
 static inline __u32 __le32_to_cpup(const __le32 *p)
 {
-	return (__force __u32)*p;
+	return (__force const __u32)*p;
 }
 static inline __le16 __cpu_to_le16p(const __u16 *p)
 {
-	return (__force __le16)*p;
+	return (__force const __le16)*p;
 }
 static inline __u16 __le16_to_cpup(const __le16 *p)
 {
-	return (__force __u16)*p;
+	return (__force const __u16)*p;
 }
 static inline __be64 __cpu_to_be64p(const __u64 *p)
 {
-	return (__force __be64)__swab64p(p);
+	return (__force const __be64)__swab64p(p);
 }
 static inline __u64 __be64_to_cpup(const __be64 *p)
 {
-	return __swab64p((__u64 *)p);
+	return __swab64p((const __u64 *)p);
 }
 static inline __be32 __cpu_to_be32p(const __u32 *p)
 {
-	return (__force __be32)__swab32p(p);
+	return (__force const __be32)__swab32p(p);
 }
 static inline __u32 __be32_to_cpup(const __be32 *p)
 {
-	return __swab32p((__u32 *)p);
+	return __swab32p((const __u32 *)p);
 }
 static inline __be16 __cpu_to_be16p(const __u16 *p)
 {
-	return (__force __be16)__swab16p(p);
+	return (__force const __be16)__swab16p(p);
 }
 static inline __u16 __be16_to_cpup(const __be16 *p)
 {
-	return __swab16p((__u16 *)p);
+	return __swab16p((const __u16 *)p);
 }
 #define __cpu_to_le64s(x) do { (void)(x); } while (0)
 #define __le64_to_cpus(x) do { (void)(x); } while (0)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/cache.h linux-3.3.8-pax/include/linux/cache.h
--- linux-3.3.8/include/linux/cache.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/linux/cache.h	2012-03-19 10:43:44.356034632 +0100
@@ -16,6 +16,10 @@
 #define __read_mostly
 #endif
 
+#ifndef __read_only
+#define __read_only __read_mostly
+#endif
+
 #ifndef ____cacheline_aligned
 #define ____cacheline_aligned __attribute__((__aligned__(SMP_CACHE_BYTES)))
 #endif
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/cleancache.h linux-3.3.8-pax/include/linux/cleancache.h
--- linux-3.3.8/include/linux/cleancache.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/linux/cleancache.h	2012-03-19 10:43:44.356034632 +0100
@@ -31,7 +31,7 @@ struct cleancache_ops {
 	void (*flush_page)(int, struct cleancache_filekey, pgoff_t);
 	void (*flush_inode)(int, struct cleancache_filekey);
 	void (*flush_fs)(int);
-};
+} __no_const;
 
 extern struct cleancache_ops
 	cleancache_register_ops(struct cleancache_ops *ops);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/compiler-gcc4.h linux-3.3.8-pax/include/linux/compiler-gcc4.h
--- linux-3.3.8/include/linux/compiler-gcc4.h	2012-03-19 10:39:10.852049231 +0100
+++ linux-3.3.8-pax/include/linux/compiler-gcc4.h	2012-05-16 21:21:02.197543440 +0200
@@ -32,6 +32,16 @@
 #define __linktime_error(message) __attribute__((__error__(message)))
 
 #if __GNUC_MINOR__ >= 5
+
+#ifdef CONSTIFY_PLUGIN
+#define __no_const __attribute__((no_const))
+#define __do_const __attribute__((do_const))
+#endif
+
+#ifdef SIZE_OVERFLOW_PLUGIN
+#define __size_overflow(...) __attribute__((size_overflow(__VA_ARGS__)))
+#endif
+
 /*
  * Mark a position in code as unreachable.  This can be used to
  * suppress control flow warnings after asm blocks that transfer
@@ -47,6 +57,11 @@
 #define __noclone	__attribute__((__noclone__))
 
 #endif
+
+#define __alloc_size(...)	__attribute((alloc_size(__VA_ARGS__)))
+#define __bos(ptr, arg)		__builtin_object_size((ptr), (arg))
+#define __bos0(ptr)		__bos((ptr), 0)
+#define __bos1(ptr)		__bos((ptr), 1)
 #endif
 
 #if __GNUC_MINOR__ > 0
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/compiler.h linux-3.3.8-pax/include/linux/compiler.h
--- linux-3.3.8/include/linux/compiler.h	2012-03-19 10:39:10.856049235 +0100
+++ linux-3.3.8-pax/include/linux/compiler.h	2012-05-16 21:21:02.233543442 +0200
@@ -5,31 +5,62 @@
 
 #ifdef __CHECKER__
 # define __user		__attribute__((noderef, address_space(1)))
+# define __force_user	__force __user
 # define __kernel	__attribute__((address_space(0)))
+# define __force_kernel	__force __kernel
 # define __safe		__attribute__((safe))
 # define __force	__attribute__((force))
 # define __nocast	__attribute__((nocast))
 # define __iomem	__attribute__((noderef, address_space(2)))
+# define __force_iomem	__force __iomem
 # define __acquires(x)	__attribute__((context(x,0,1)))
 # define __releases(x)	__attribute__((context(x,1,0)))
 # define __acquire(x)	__context__(x,1)
 # define __release(x)	__context__(x,-1)
 # define __cond_lock(x,c)	((c) ? ({ __acquire(x); 1; }) : 0)
 # define __percpu	__attribute__((noderef, address_space(3)))
+# define __force_percpu	__force __percpu
 #ifdef CONFIG_SPARSE_RCU_POINTER
 # define __rcu		__attribute__((noderef, address_space(4)))
+# define __force_rcu	__force __rcu
 #else
 # define __rcu
+# define __force_rcu
 #endif
 extern void __chk_user_ptr(const volatile void __user *);
 extern void __chk_io_ptr(const volatile void __iomem *);
+#elif defined(CHECKER_PLUGIN)
+//# define __user
+//# define __force_user
+//# define __kernel
+//# define __force_kernel
+# define __safe
+# define __force
+# define __nocast
+# define __iomem
+# define __force_iomem
+# define __chk_user_ptr(x) (void)0
+# define __chk_io_ptr(x) (void)0
+# define __builtin_warning(x, y...) (1)
+# define __acquires(x)
+# define __releases(x)
+# define __acquire(x) (void)0
+# define __release(x) (void)0
+# define __cond_lock(x,c) (c)
+# define __percpu
+# define __force_percpu
+# define __rcu
+# define __force_rcu
 #else
 # define __user
+# define __force_user
 # define __kernel
+# define __force_kernel
 # define __safe
 # define __force
 # define __nocast
 # define __iomem
+# define __force_iomem
 # define __chk_user_ptr(x) (void)0
 # define __chk_io_ptr(x) (void)0
 # define __builtin_warning(x, y...) (1)
@@ -39,7 +70,9 @@ extern void __chk_io_ptr(const volatile
 # define __release(x) (void)0
 # define __cond_lock(x,c) (c)
 # define __percpu
+# define __force_percpu
 # define __rcu
+# define __force_rcu
 #endif
 
 #ifdef __KERNEL__
@@ -264,6 +297,18 @@ void ftrace_likely_update(struct ftrace_
 # define __attribute_const__	/* unimplemented */
 #endif
 
+#ifndef __no_const
+# define __no_const
+#endif
+
+#ifndef __do_const
+# define __do_const
+#endif
+
+#ifndef __size_overflow
+# define __size_overflow(...)
+#endif
+
 /*
  * Tell gcc if a function is cold. The compiler will assume any path
  * directly leading to the call is unlikely.
@@ -273,6 +318,22 @@ void ftrace_likely_update(struct ftrace_
 #define __cold
 #endif
 
+#ifndef __alloc_size
+#define __alloc_size(...)
+#endif
+
+#ifndef __bos
+#define __bos(ptr, arg)
+#endif
+
+#ifndef __bos0
+#define __bos0(ptr)
+#endif
+
+#ifndef __bos1
+#define __bos1(ptr)
+#endif
+
 /* Simple shorthand for a section definition */
 #ifndef __section
 # define __section(S) __attribute__ ((__section__(#S)))
@@ -308,6 +369,7 @@ void ftrace_likely_update(struct ftrace_
  * use is to mediate communication between process-level code and irq/NMI
  * handlers, all running on the same CPU.
  */
-#define ACCESS_ONCE(x) (*(volatile typeof(x) *)&(x))
+#define ACCESS_ONCE(x) (*(volatile const typeof(x) *)&(x))
+#define ACCESS_ONCE_RW(x) (*(volatile typeof(x) *)&(x))
 
 #endif /* __LINUX_COMPILER_H */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/cpuset.h linux-3.3.8-pax/include/linux/cpuset.h
--- linux-3.3.8/include/linux/cpuset.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/linux/cpuset.h	2012-03-19 10:43:44.364034631 +0100
@@ -118,7 +118,7 @@ static inline void put_mems_allowed(void
 	 * nodemask.
 	 */
 	smp_mb();
-	--ACCESS_ONCE(current->mems_allowed_change_disable);
+	--ACCESS_ONCE_RW(current->mems_allowed_change_disable);
 }
 
 static inline void set_mems_allowed(nodemask_t nodemask)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/crypto.h linux-3.3.8-pax/include/linux/crypto.h
--- linux-3.3.8/include/linux/crypto.h	2012-01-08 19:48:26.831470993 +0100
+++ linux-3.3.8-pax/include/linux/crypto.h	2012-03-19 10:43:44.364034631 +0100
@@ -365,7 +365,7 @@ struct cipher_tfm {
 	                  const u8 *key, unsigned int keylen);
 	void (*cit_encrypt_one)(struct crypto_tfm *tfm, u8 *dst, const u8 *src);
 	void (*cit_decrypt_one)(struct crypto_tfm *tfm, u8 *dst, const u8 *src);
-};
+} __no_const;
 
 struct hash_tfm {
 	int (*init)(struct hash_desc *desc);
@@ -386,13 +386,13 @@ struct compress_tfm {
 	int (*cot_decompress)(struct crypto_tfm *tfm,
 	                      const u8 *src, unsigned int slen,
 	                      u8 *dst, unsigned int *dlen);
-};
+} __no_const;
 
 struct rng_tfm {
 	int (*rng_gen_random)(struct crypto_rng *tfm, u8 *rdata,
 			      unsigned int dlen);
 	int (*rng_reset)(struct crypto_rng *tfm, u8 *seed, unsigned int slen);
-};
+} __no_const;
 
 #define crt_ablkcipher	crt_u.ablkcipher
 #define crt_aead	crt_u.aead
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/decompress/mm.h linux-3.3.8-pax/include/linux/decompress/mm.h
--- linux-3.3.8/include/linux/decompress/mm.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/linux/decompress/mm.h	2012-03-19 10:43:44.364034632 +0100
@@ -77,7 +77,7 @@ static void free(void *where)
  * warnings when not needed (indeed large_malloc / large_free are not
  * needed by inflate */
 
-#define malloc(a) kmalloc(a, GFP_KERNEL)
+#define malloc(a) kmalloc((a), GFP_KERNEL)
 #define free(a) kfree(a)
 
 #define large_malloc(a) vmalloc(a)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/dma-mapping.h linux-3.3.8-pax/include/linux/dma-mapping.h
--- linux-3.3.8/include/linux/dma-mapping.h	2012-01-08 19:48:26.871470991 +0100
+++ linux-3.3.8-pax/include/linux/dma-mapping.h	2012-03-19 10:43:44.364034632 +0100
@@ -46,7 +46,7 @@ struct dma_map_ops {
 	u64 (*get_required_mask)(struct device *dev);
 #endif
 	int is_phys;
-};
+} __do_const;
 
 #define DMA_BIT_MASK(n)	(((n) == 64) ? ~0ULL : ((1ULL<<(n))-1))
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/efi.h linux-3.3.8-pax/include/linux/efi.h
--- linux-3.3.8/include/linux/efi.h	2012-05-07 20:26:56.075609314 +0200
+++ linux-3.3.8-pax/include/linux/efi.h	2012-05-07 20:27:02.123608992 +0200
@@ -591,7 +591,7 @@ struct efivar_operations {
 	efi_get_variable_t *get_variable;
 	efi_get_next_variable_t *get_next_variable;
 	efi_set_variable_t *set_variable;
-};
+} __no_const;
 
 struct efivars {
 	/*
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/elf.h linux-3.3.8-pax/include/linux/elf.h
--- linux-3.3.8/include/linux/elf.h	2012-03-19 10:39:10.892049236 +0100
+++ linux-3.3.8-pax/include/linux/elf.h	2012-03-19 10:43:44.368034632 +0100
@@ -40,6 +40,17 @@ typedef __s64	Elf64_Sxword;
 #define PT_GNU_EH_FRAME		0x6474e550
 
 #define PT_GNU_STACK	(PT_LOOS + 0x474e551)
+#define PT_GNU_RELRO	(PT_LOOS + 0x474e552)
+
+#define PT_PAX_FLAGS	(PT_LOOS + 0x5041580)
+
+/* Constants for the e_flags field */
+#define EF_PAX_PAGEEXEC		1	/* Paging based non-executable pages */
+#define EF_PAX_EMUTRAMP		2	/* Emulate trampolines */
+#define EF_PAX_MPROTECT		4	/* Restrict mprotect() */
+#define EF_PAX_RANDMMAP		8	/* Randomize mmap() base */
+/*#define EF_PAX_RANDEXEC		16*/	/* Randomize ET_EXEC base */
+#define EF_PAX_SEGMEXEC		32	/* Segmentation based non-executable pages */
 
 /*
  * Extended Numbering
@@ -97,6 +108,8 @@ typedef __s64	Elf64_Sxword;
 #define DT_DEBUG	21
 #define DT_TEXTREL	22
 #define DT_JMPREL	23
+#define DT_FLAGS	30
+  #define DF_TEXTREL  0x00000004
 #define DT_ENCODING	32
 #define OLD_DT_LOOS	0x60000000
 #define DT_LOOS		0x6000000d
@@ -243,6 +256,19 @@ typedef struct elf64_hdr {
 #define PF_W		0x2
 #define PF_X		0x1
 
+#define PF_PAGEEXEC	(1U << 4)	/* Enable  PAGEEXEC */
+#define PF_NOPAGEEXEC	(1U << 5)	/* Disable PAGEEXEC */
+#define PF_SEGMEXEC	(1U << 6)	/* Enable  SEGMEXEC */
+#define PF_NOSEGMEXEC	(1U << 7)	/* Disable SEGMEXEC */
+#define PF_MPROTECT	(1U << 8)	/* Enable  MPROTECT */
+#define PF_NOMPROTECT	(1U << 9)	/* Disable MPROTECT */
+/*#define PF_RANDEXEC	(1U << 10)*/	/* Enable  RANDEXEC */
+/*#define PF_NORANDEXEC	(1U << 11)*/	/* Disable RANDEXEC */
+#define PF_EMUTRAMP	(1U << 12)	/* Enable  EMUTRAMP */
+#define PF_NOEMUTRAMP	(1U << 13)	/* Disable EMUTRAMP */
+#define PF_RANDMMAP	(1U << 14)	/* Enable  RANDMMAP */
+#define PF_NORANDMMAP	(1U << 15)	/* Disable RANDMMAP */
+
 typedef struct elf32_phdr{
   Elf32_Word	p_type;
   Elf32_Off	p_offset;
@@ -335,6 +361,8 @@ typedef struct elf64_shdr {
 #define	EI_OSABI	7
 #define	EI_PAD		8
 
+#define	EI_PAX		14
+
 #define	ELFMAG0		0x7f		/* EI_MAG */
 #define	ELFMAG1		'E'
 #define	ELFMAG2		'L'
@@ -421,6 +449,7 @@ extern Elf32_Dyn _DYNAMIC [];
 #define elf_note	elf32_note
 #define elf_addr_t	Elf32_Off
 #define Elf_Half	Elf32_Half
+#define elf_dyn		Elf32_Dyn
 
 #else
 
@@ -431,6 +460,7 @@ extern Elf64_Dyn _DYNAMIC [];
 #define elf_note	elf64_note
 #define elf_addr_t	Elf64_Off
 #define Elf_Half	Elf64_Half
+#define elf_dyn		Elf64_Dyn
 
 #endif
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/filter.h linux-3.3.8-pax/include/linux/filter.h
--- linux-3.3.8/include/linux/filter.h	2012-01-08 19:48:26.931470987 +0100
+++ linux-3.3.8-pax/include/linux/filter.h	2012-03-19 10:43:44.368034632 +0100
@@ -134,6 +134,7 @@ struct sock_fprog {	/* Required for SO_A
 
 struct sk_buff;
 struct sock;
+struct bpf_jit_work;
 
 struct sk_filter
 {
@@ -141,6 +142,9 @@ struct sk_filter
 	unsigned int         	len;	/* Number of filter blocks */
 	unsigned int		(*bpf_func)(const struct sk_buff *skb,
 					    const struct sock_filter *filter);
+#ifdef CONFIG_BPF_JIT
+	struct bpf_jit_work	*work;
+#endif
 	struct rcu_head		rcu;
 	struct sock_filter     	insns[0];
 };
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/firewire.h linux-3.3.8-pax/include/linux/firewire.h
--- linux-3.3.8/include/linux/firewire.h	2011-10-24 12:48:41.155090979 +0200
+++ linux-3.3.8-pax/include/linux/firewire.h	2012-03-19 10:43:44.368034632 +0100
@@ -428,7 +428,7 @@ struct fw_iso_context {
 	union {
 		fw_iso_callback_t sc;
 		fw_iso_mc_callback_t mc;
-	} callback;
+	} __no_const callback;
 	void *callback_data;
 };
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/fscache-cache.h linux-3.3.8-pax/include/linux/fscache-cache.h
--- linux-3.3.8/include/linux/fscache-cache.h	2012-01-08 19:48:26.947470986 +0100
+++ linux-3.3.8-pax/include/linux/fscache-cache.h	2012-03-19 10:43:44.368034632 +0100
@@ -102,7 +102,7 @@ struct fscache_operation {
 	fscache_operation_release_t release;
 };
 
-extern atomic_t fscache_op_debug_id;
+extern atomic_unchecked_t fscache_op_debug_id;
 extern void fscache_op_work_func(struct work_struct *work);
 
 extern void fscache_enqueue_operation(struct fscache_operation *);
@@ -122,7 +122,7 @@ static inline void fscache_operation_ini
 {
 	INIT_WORK(&op->work, fscache_op_work_func);
 	atomic_set(&op->usage, 1);
-	op->debug_id = atomic_inc_return(&fscache_op_debug_id);
+	op->debug_id = atomic_inc_return_unchecked(&fscache_op_debug_id);
 	op->processor = processor;
 	op->release = release;
 	INIT_LIST_HEAD(&op->pend_link);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/fs.h linux-3.3.8-pax/include/linux/fs.h
--- linux-3.3.8/include/linux/fs.h	2012-06-11 19:36:39.352445758 +0200
+++ linux-3.3.8-pax/include/linux/fs.h	2012-06-11 19:36:45.840446115 +0200
@@ -1628,7 +1628,8 @@ struct file_operations {
 	int (*setlease)(struct file *, long, struct file_lock **);
 	long (*fallocate)(struct file *file, int mode, loff_t offset,
 			  loff_t len);
-};
+} __do_const;
+typedef struct file_operations __no_const file_operations_no_const;
 
 struct inode_operations {
 	struct dentry * (*lookup) (struct inode *,struct dentry *, struct nameidata *);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/fsnotify_backend.h linux-3.3.8-pax/include/linux/fsnotify_backend.h
--- linux-3.3.8/include/linux/fsnotify_backend.h	2011-10-24 12:48:41.163090979 +0200
+++ linux-3.3.8-pax/include/linux/fsnotify_backend.h	2012-03-19 10:43:44.376034630 +0100
@@ -105,6 +105,7 @@ struct fsnotify_ops {
 	void (*freeing_mark)(struct fsnotify_mark *mark, struct fsnotify_group *group);
 	void (*free_event_priv)(struct fsnotify_event_private_data *priv);
 };
+typedef struct fsnotify_ops __no_const fsnotify_ops_no_const;
 
 /*
  * A group is a "thing" that wants to receive notification about filesystem
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/fsnotify.h linux-3.3.8-pax/include/linux/fsnotify.h
--- linux-3.3.8/include/linux/fsnotify.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/linux/fsnotify.h	2012-03-19 10:43:44.376034631 +0100
@@ -314,7 +314,7 @@ static inline void fsnotify_change(struc
  */
 static inline const unsigned char *fsnotify_oldname_init(const unsigned char *name)
 {
-	return kstrdup(name, GFP_KERNEL);
+	return (const unsigned char *)kstrdup((const char *)name, GFP_KERNEL);
 }
 
 /*
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/fs_struct.h linux-3.3.8-pax/include/linux/fs_struct.h
--- linux-3.3.8/include/linux/fs_struct.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/linux/fs_struct.h	2012-03-19 10:43:44.376034631 +0100
@@ -6,7 +6,7 @@
 #include <linux/seqlock.h>
 
 struct fs_struct {
-	int users;
+	atomic_t users;
 	spinlock_t lock;
 	seqcount_t seq;
 	int umask;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/ftrace_event.h linux-3.3.8-pax/include/linux/ftrace_event.h
--- linux-3.3.8/include/linux/ftrace_event.h	2012-01-08 19:48:26.955470986 +0100
+++ linux-3.3.8-pax/include/linux/ftrace_event.h	2012-03-19 10:43:44.376034631 +0100
@@ -97,7 +97,7 @@ struct trace_event_functions {
 	trace_print_func	raw;
 	trace_print_func	hex;
 	trace_print_func	binary;
-};
+} __no_const;
 
 struct trace_event {
 	struct hlist_node		node;
@@ -254,7 +254,7 @@ extern int trace_define_field(struct ftr
 extern int trace_add_event_call(struct ftrace_event_call *call);
 extern void trace_remove_event_call(struct ftrace_event_call *call);
 
-#define is_signed_type(type)	(((type)(-1)) < 0)
+#define is_signed_type(type)	(((type)(-1)) < (type)1)
 
 int trace_set_clr_event(const char *system, const char *event, int set);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/genhd.h linux-3.3.8-pax/include/linux/genhd.h
--- linux-3.3.8/include/linux/genhd.h	2012-06-11 19:36:40.508445826 +0200
+++ linux-3.3.8-pax/include/linux/genhd.h	2012-06-11 19:36:46.472446149 +0200
@@ -185,7 +185,7 @@ struct gendisk {
 	struct kobject *slave_dir;
 
 	struct timer_rand_state *random;
-	atomic_t sync_io;		/* RAID */
+	atomic_unchecked_t sync_io;	/* RAID */
 	struct disk_events *ev;
 #ifdef  CONFIG_BLK_DEV_INTEGRITY
 	struct blk_integrity *integrity;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/hid.h linux-3.3.8-pax/include/linux/hid.h
--- linux-3.3.8/include/linux/hid.h	2012-03-19 10:39:10.960049233 +0100
+++ linux-3.3.8-pax/include/linux/hid.h	2012-03-19 10:43:44.380034632 +0100
@@ -696,7 +696,7 @@ struct hid_ll_driver {
 			unsigned int code, int value);
 
 	int (*parse)(struct hid_device *hdev);
-};
+} __no_const;
 
 #define	PM_HINT_FULLON	1<<5
 #define PM_HINT_NORMAL	1<<1
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/highmem.h linux-3.3.8-pax/include/linux/highmem.h
--- linux-3.3.8/include/linux/highmem.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/linux/highmem.h	2012-03-19 10:43:44.380034632 +0100
@@ -185,6 +185,18 @@ static inline void clear_highpage(struct
 	kunmap_atomic(kaddr, KM_USER0);
 }
 
+static inline void sanitize_highpage(struct page *page)
+{
+	void *kaddr;
+	unsigned long flags;
+
+	local_irq_save(flags);
+	kaddr = kmap_atomic(page, KM_CLEARPAGE);
+	clear_page(kaddr);
+	kunmap_atomic(kaddr, KM_CLEARPAGE);
+	local_irq_restore(flags);
+}
+
 static inline void zero_user_segments(struct page *page,
 	unsigned start1, unsigned end1,
 	unsigned start2, unsigned end2)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/i2c.h linux-3.3.8-pax/include/linux/i2c.h
--- linux-3.3.8/include/linux/i2c.h	2012-03-19 10:39:10.964049234 +0100
+++ linux-3.3.8-pax/include/linux/i2c.h	2012-03-19 10:43:44.380034632 +0100
@@ -364,6 +364,7 @@ struct i2c_algorithm {
 	/* To determine what the adapter supports */
 	u32 (*functionality) (struct i2c_adapter *);
 };
+typedef struct i2c_algorithm __no_const i2c_algorithm_no_const;
 
 /*
  * i2c_adapter is the structure used to identify a physical i2c bus along
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/i2o.h linux-3.3.8-pax/include/linux/i2o.h
--- linux-3.3.8/include/linux/i2o.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/linux/i2o.h	2012-03-19 10:43:44.384034632 +0100
@@ -564,7 +564,7 @@ struct i2o_controller {
 	struct i2o_device *exec;	/* Executive */
 #if BITS_PER_LONG == 64
 	spinlock_t context_list_lock;	/* lock for context_list */
-	atomic_t context_list_counter;	/* needed for unique contexts */
+	atomic_unchecked_t context_list_counter;	/* needed for unique contexts */
 	struct list_head context_list;	/* list of context id's
 					   and pointers */
 #endif
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/if_team.h linux-3.3.8-pax/include/linux/if_team.h
--- linux-3.3.8/include/linux/if_team.h	2012-03-19 10:39:10.972049232 +0100
+++ linux-3.3.8-pax/include/linux/if_team.h	2012-03-19 10:43:44.384034632 +0100
@@ -64,6 +64,7 @@ struct team_mode_ops {
 	void (*port_leave)(struct team *team, struct team_port *port);
 	void (*port_change_mac)(struct team *team, struct team_port *port);
 };
+typedef struct team_mode_ops __no_const team_mode_ops_no_const;
 
 enum team_option_type {
 	TEAM_OPTION_TYPE_U32,
@@ -112,7 +113,7 @@ struct team {
 	struct list_head option_list;
 
 	const struct team_mode *mode;
-	struct team_mode_ops ops;
+	team_mode_ops_no_const ops;
 	long mode_priv[TEAM_MODE_PRIV_LONGS];
 };
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/init.h linux-3.3.8-pax/include/linux/init.h
--- linux-3.3.8/include/linux/init.h	2012-03-19 10:39:10.976049229 +0100
+++ linux-3.3.8-pax/include/linux/init.h	2012-03-19 10:43:44.384034632 +0100
@@ -294,13 +294,13 @@ void __init parse_early_options(char *cm
 
 /* Each module must use one module_init(). */
 #define module_init(initfn)					\
-	static inline initcall_t __inittest(void)		\
+	static inline __used initcall_t __inittest(void)	\
 	{ return initfn; }					\
 	int init_module(void) __attribute__((alias(#initfn)));
 
 /* This is only required if you want to be unloadable. */
 #define module_exit(exitfn)					\
-	static inline exitcall_t __exittest(void)		\
+	static inline __used exitcall_t __exittest(void)	\
 	{ return exitfn; }					\
 	void cleanup_module(void) __attribute__((alias(#exitfn)));
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/init_task.h linux-3.3.8-pax/include/linux/init_task.h
--- linux-3.3.8/include/linux/init_task.h	2012-03-19 10:39:10.976049229 +0100
+++ linux-3.3.8-pax/include/linux/init_task.h	2012-03-19 10:43:44.384034632 +0100
@@ -127,6 +127,12 @@ extern struct cred init_cred;
 
 #define INIT_TASK_COMM "swapper"
 
+#ifdef CONFIG_X86
+#define INIT_TASK_THREAD_INFO .tinfo = INIT_THREAD_INFO,
+#else
+#define INIT_TASK_THREAD_INFO
+#endif
+
 /*
  *  INIT_TASK is used to set up the first task table, touch at
  * your own risk!. Base=0, limit=0x1fffff (=2MB)
@@ -165,6 +171,7 @@ extern struct cred init_cred;
 	RCU_INIT_POINTER(.cred, &init_cred),				\
 	.comm		= INIT_TASK_COMM,				\
 	.thread		= INIT_THREAD,					\
+	INIT_TASK_THREAD_INFO						\
 	.fs		= &init_fs,					\
 	.files		= &init_files,					\
 	.signal		= &init_signals,				\
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/intel-iommu.h linux-3.3.8-pax/include/linux/intel-iommu.h
--- linux-3.3.8/include/linux/intel-iommu.h	2012-01-08 19:48:27.059470980 +0100
+++ linux-3.3.8-pax/include/linux/intel-iommu.h	2012-03-19 10:43:44.388034632 +0100
@@ -296,7 +296,7 @@ struct iommu_flush {
 			      u8 fm, u64 type);
 	void (*flush_iotlb)(struct intel_iommu *iommu, u16 did, u64 addr,
 			    unsigned int size_order, u64 type);
-};
+} __no_const;
 
 enum {
 	SR_DMAR_FECTL_REG,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/interrupt.h linux-3.3.8-pax/include/linux/interrupt.h
--- linux-3.3.8/include/linux/interrupt.h	2012-01-08 19:48:27.063470980 +0100
+++ linux-3.3.8-pax/include/linux/interrupt.h	2012-03-19 10:43:44.388034632 +0100
@@ -441,7 +441,7 @@ enum
 /* map softirq index to softirq name. update 'softirq_to_name' in
  * kernel/softirq.c when adding a new softirq.
  */
-extern char *softirq_to_name[NR_SOFTIRQS];
+extern const char * const softirq_to_name[NR_SOFTIRQS];
 
 /* softirq mask and active fields moved to irq_cpustat_t in
  * asm/hardirq.h to get better cache usage.  KAO
@@ -449,12 +449,12 @@ extern char *softirq_to_name[NR_SOFTIRQS
 
 struct softirq_action
 {
-	void	(*action)(struct softirq_action *);
+	void	(*action)(void);
 };
 
 asmlinkage void do_softirq(void);
 asmlinkage void __do_softirq(void);
-extern void open_softirq(int nr, void (*action)(struct softirq_action *));
+extern void open_softirq(int nr, void (*action)(void));
 extern void softirq_init(void);
 static inline void __raise_softirq_irqoff(unsigned int nr)
 {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/kgdb.h linux-3.3.8-pax/include/linux/kgdb.h
--- linux-3.3.8/include/linux/kgdb.h	2012-04-15 15:08:29.410606354 +0200
+++ linux-3.3.8-pax/include/linux/kgdb.h	2012-04-15 15:08:34.666606066 +0200
@@ -53,7 +53,7 @@ extern int kgdb_connected;
 extern int kgdb_io_module_registered;
 
 extern atomic_t			kgdb_setting_breakpoint;
-extern atomic_t			kgdb_cpu_doing_single_step;
+extern atomic_unchecked_t	kgdb_cpu_doing_single_step;
 
 extern struct task_struct	*kgdb_usethread;
 extern struct task_struct	*kgdb_contthread;
@@ -252,7 +252,7 @@ struct kgdb_arch {
 	void	(*disable_hw_break)(struct pt_regs *regs);
 	void	(*remove_all_hw_break)(void);
 	void	(*correct_hw_break)(void);
-};
+} __do_const;
 
 /**
  * struct kgdb_io - Describe the interface for an I/O driver to talk with KGDB.
@@ -277,7 +277,7 @@ struct kgdb_io {
 	void			(*pre_exception) (void);
 	void			(*post_exception) (void);
 	int			is_console;
-};
+} __do_const;
 
 extern struct kgdb_arch		arch_kgdb_ops;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/kref.h linux-3.3.8-pax/include/linux/kref.h
--- linux-3.3.8/include/linux/kref.h	2012-03-19 10:39:11.000049230 +0100
+++ linux-3.3.8-pax/include/linux/kref.h	2012-03-19 10:43:44.392034630 +0100
@@ -63,7 +63,7 @@ static inline void kref_get(struct kref
 static inline int kref_sub(struct kref *kref, unsigned int count,
 	     void (*release)(struct kref *kref))
 {
-	WARN_ON(release == NULL);
+	BUG_ON(release == NULL);
 
 	if (atomic_sub_and_test((int) count, &kref->refcount)) {
 		release(kref);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/kvm_host.h linux-3.3.8-pax/include/linux/kvm_host.h
--- linux-3.3.8/include/linux/kvm_host.h	2012-05-12 22:26:33.492956627 +0200
+++ linux-3.3.8-pax/include/linux/kvm_host.h	2012-05-16 21:21:02.245543443 +0200
@@ -326,7 +326,7 @@ void kvm_vcpu_uninit(struct kvm_vcpu *vc
 void vcpu_load(struct kvm_vcpu *vcpu);
 void vcpu_put(struct kvm_vcpu *vcpu);
 
-int kvm_init(void *opaque, unsigned vcpu_size, unsigned vcpu_align,
+int kvm_init(const void *opaque, unsigned vcpu_size, unsigned vcpu_align,
 		  struct module *module);
 void kvm_exit(void);
 
@@ -485,7 +485,7 @@ int kvm_arch_vcpu_ioctl_set_guest_debug(
 					struct kvm_guest_debug *dbg);
 int kvm_arch_vcpu_ioctl_run(struct kvm_vcpu *vcpu, struct kvm_run *kvm_run);
 
-int kvm_arch_init(void *opaque);
+int kvm_arch_init(const void *opaque);
 void kvm_arch_exit(void);
 
 int kvm_arch_vcpu_init(struct kvm_vcpu *vcpu);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/libata.h linux-3.3.8-pax/include/linux/libata.h
--- linux-3.3.8/include/linux/libata.h	2012-01-08 19:48:27.143470976 +0100
+++ linux-3.3.8-pax/include/linux/libata.h	2012-03-19 10:43:44.392034630 +0100
@@ -909,7 +909,7 @@ struct ata_port_operations {
 	 * fields must be pointers.
 	 */
 	const struct ata_port_operations	*inherits;
-};
+} __do_const;
 
 struct ata_port_info {
 	unsigned long		flags;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/mca.h linux-3.3.8-pax/include/linux/mca.h
--- linux-3.3.8/include/linux/mca.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/linux/mca.h	2012-03-19 10:43:44.392034630 +0100
@@ -80,7 +80,7 @@ struct mca_bus_accessor_functions {
 						  int region);
 	void *		(*mca_transform_memory)(struct mca_device *,
 						void *memory);
-};
+} __no_const;
 
 struct mca_bus {
 	u64			default_dma_mask;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/memory.h linux-3.3.8-pax/include/linux/memory.h
--- linux-3.3.8/include/linux/memory.h	2012-03-19 10:39:11.012049227 +0100
+++ linux-3.3.8-pax/include/linux/memory.h	2012-03-19 10:43:44.396034628 +0100
@@ -143,7 +143,7 @@ struct memory_accessor {
 			size_t count);
 	ssize_t (*write)(struct memory_accessor *, const char *buf,
 			 off_t offset, size_t count);
-};
+} __no_const;
 
 /*
  * Kernel text modification mutex, used for code patching. Users of this lock
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/mfd/abx500.h linux-3.3.8-pax/include/linux/mfd/abx500.h
--- linux-3.3.8/include/linux/mfd/abx500.h	2012-01-08 19:48:27.187470974 +0100
+++ linux-3.3.8-pax/include/linux/mfd/abx500.h	2012-03-19 10:43:44.396034628 +0100
@@ -188,6 +188,7 @@ struct abx500_ops {
 	int (*event_registers_startup_state_get) (struct device *, u8 *);
 	int (*startup_irq_enabled) (struct device *, unsigned int);
 };
+typedef struct abx500_ops __no_const abx500_ops_no_const;
 
 int abx500_register_ops(struct device *core_dev, struct abx500_ops *ops);
 void abx500_remove_ops(struct device *dev);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/mm.h linux-3.3.8-pax/include/linux/mm.h
--- linux-3.3.8/include/linux/mm.h	2012-03-19 10:39:11.044049226 +0100
+++ linux-3.3.8-pax/include/linux/mm.h	2012-05-02 03:10:45.861348178 +0200
@@ -115,7 +115,14 @@ extern unsigned int kobjsize(const void
 
 #define VM_CAN_NONLINEAR 0x08000000	/* Has ->fault & does nonlinear pages */
 #define VM_MIXEDMAP	0x10000000	/* Can contain "struct page" and pure PFN pages */
+
+#if defined(CONFIG_PAX_PAGEEXEC) && defined(CONFIG_X86_32)
+#define VM_SAO		0x00000000	/* Strong Access Ordering (powerpc) */
+#define VM_PAGEEXEC	0x20000000	/* vma->vm_page_prot needs special handling */
+#else
 #define VM_SAO		0x20000000	/* Strong Access Ordering (powerpc) */
+#endif
+
 #define VM_PFN_AT_MMAP	0x40000000	/* PFNMAP vma that is fully mapped at mmap time */
 #define VM_MERGEABLE	0x80000000	/* KSM may merge identical pages */
 
@@ -1012,34 +1019,6 @@ int set_page_dirty(struct page *page);
 int set_page_dirty_lock(struct page *page);
 int clear_page_dirty_for_io(struct page *page);
 
-/* Is the vma a continuation of the stack vma above it? */
-static inline int vma_growsdown(struct vm_area_struct *vma, unsigned long addr)
-{
-	return vma && (vma->vm_end == addr) && (vma->vm_flags & VM_GROWSDOWN);
-}
-
-static inline int stack_guard_page_start(struct vm_area_struct *vma,
-					     unsigned long addr)
-{
-	return (vma->vm_flags & VM_GROWSDOWN) &&
-		(vma->vm_start == addr) &&
-		!vma_growsdown(vma->vm_prev, addr);
-}
-
-/* Is the vma a continuation of the stack vma below it? */
-static inline int vma_growsup(struct vm_area_struct *vma, unsigned long addr)
-{
-	return vma && (vma->vm_start == addr) && (vma->vm_flags & VM_GROWSUP);
-}
-
-static inline int stack_guard_page_end(struct vm_area_struct *vma,
-					   unsigned long addr)
-{
-	return (vma->vm_flags & VM_GROWSUP) &&
-		(vma->vm_end == addr) &&
-		!vma_growsup(vma->vm_next, addr);
-}
-
 extern unsigned long move_page_tables(struct vm_area_struct *vma,
 		unsigned long old_addr, struct vm_area_struct *new_vma,
 		unsigned long new_addr, unsigned long len);
@@ -1134,6 +1113,15 @@ static inline void sync_mm_rss(struct ta
 }
 #endif
 
+#ifdef CONFIG_MMU
+pgprot_t vm_get_page_prot(vm_flags_t vm_flags);
+#else
+static inline pgprot_t vm_get_page_prot(vm_flags_t vm_flags)
+{
+	return __pgprot(0);
+}
+#endif
+
 int vma_wants_writenotify(struct vm_area_struct *vma);
 
 extern pte_t *__get_locked_pte(struct mm_struct *mm, unsigned long addr,
@@ -1152,8 +1140,15 @@ static inline int __pud_alloc(struct mm_
 {
 	return 0;
 }
+
+static inline int __pud_alloc_kernel(struct mm_struct *mm, pgd_t *pgd,
+						unsigned long address)
+{
+	return 0;
+}
 #else
 int __pud_alloc(struct mm_struct *mm, pgd_t *pgd, unsigned long address);
+int __pud_alloc_kernel(struct mm_struct *mm, pgd_t *pgd, unsigned long address);
 #endif
 
 #ifdef __PAGETABLE_PMD_FOLDED
@@ -1162,8 +1157,15 @@ static inline int __pmd_alloc(struct mm_
 {
 	return 0;
 }
+
+static inline int __pmd_alloc_kernel(struct mm_struct *mm, pud_t *pud,
+						unsigned long address)
+{
+	return 0;
+}
 #else
 int __pmd_alloc(struct mm_struct *mm, pud_t *pud, unsigned long address);
+int __pmd_alloc_kernel(struct mm_struct *mm, pud_t *pud, unsigned long address);
 #endif
 
 int __pte_alloc(struct mm_struct *mm, struct vm_area_struct *vma,
@@ -1181,11 +1183,23 @@ static inline pud_t *pud_alloc(struct mm
 		NULL: pud_offset(pgd, address);
 }
 
+static inline pud_t *pud_alloc_kernel(struct mm_struct *mm, pgd_t *pgd, unsigned long address)
+{
+	return (unlikely(pgd_none(*pgd)) && __pud_alloc_kernel(mm, pgd, address))?
+		NULL: pud_offset(pgd, address);
+}
+
 static inline pmd_t *pmd_alloc(struct mm_struct *mm, pud_t *pud, unsigned long address)
 {
 	return (unlikely(pud_none(*pud)) && __pmd_alloc(mm, pud, address))?
 		NULL: pmd_offset(pud, address);
 }
+
+static inline pmd_t *pmd_alloc_kernel(struct mm_struct *mm, pud_t *pud, unsigned long address)
+{
+	return (unlikely(pud_none(*pud)) && __pmd_alloc_kernel(mm, pud, address))?
+		NULL: pmd_offset(pud, address);
+}
 #endif /* CONFIG_MMU && !__ARCH_HAS_4LEVEL_HACK */
 
 #if USE_SPLIT_PTLOCKS
@@ -1409,6 +1423,7 @@ out:
 }
 
 extern int do_munmap(struct mm_struct *, unsigned long, size_t);
+extern int __do_munmap(struct mm_struct *, unsigned long, size_t);
 
 extern unsigned long do_brk(unsigned long, unsigned long);
 
@@ -1466,6 +1481,10 @@ extern struct vm_area_struct * find_vma(
 extern struct vm_area_struct * find_vma_prev(struct mm_struct * mm, unsigned long addr,
 					     struct vm_area_struct **pprev);
 
+extern struct vm_area_struct *pax_find_mirror_vma(struct vm_area_struct *vma);
+extern __must_check long pax_mirror_vma(struct vm_area_struct *vma_m, struct vm_area_struct *vma);
+extern void pax_mirror_file_pte(struct vm_area_struct *vma, unsigned long address, struct page *page_m, spinlock_t *ptl);
+
 /* Look up the first VMA which intersects the interval start_addr..end_addr-1,
    NULL if none.  Assume start_addr < end_addr. */
 static inline struct vm_area_struct * find_vma_intersection(struct mm_struct * mm, unsigned long start_addr, unsigned long end_addr)
@@ -1494,15 +1513,6 @@ static inline struct vm_area_struct *fin
 	return vma;
 }
 
-#ifdef CONFIG_MMU
-pgprot_t vm_get_page_prot(unsigned long vm_flags);
-#else
-static inline pgprot_t vm_get_page_prot(unsigned long vm_flags)
-{
-	return __pgprot(0);
-}
-#endif
-
 struct vm_area_struct *find_extend_vma(struct mm_struct *, unsigned long addr);
 int remap_pfn_range(struct vm_area_struct *, unsigned long addr,
 			unsigned long pfn, unsigned long size, pgprot_t);
@@ -1606,7 +1616,7 @@ extern int unpoison_memory(unsigned long
 extern int sysctl_memory_failure_early_kill;
 extern int sysctl_memory_failure_recovery;
 extern void shake_page(struct page *p, int access);
-extern atomic_long_t mce_bad_pages;
+extern atomic_long_unchecked_t mce_bad_pages;
 extern int soft_offline_page(struct page *page, int flags);
 
 extern void dump_page(struct page *page);
@@ -1637,5 +1647,11 @@ static inline unsigned int debug_guardpa
 static inline bool page_is_guard(struct page *page) { return false; }
 #endif /* CONFIG_DEBUG_PAGEALLOC */
 
+#ifdef CONFIG_ARCH_TRACK_EXEC_LIMIT
+extern void track_exec_limit(struct mm_struct *mm, unsigned long start, unsigned long end, unsigned long prot);
+#else
+static inline void track_exec_limit(struct mm_struct *mm, unsigned long start, unsigned long end, unsigned long prot) {}
+#endif
+
 #endif /* __KERNEL__ */
 #endif /* _LINUX_MM_H */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/mm_types.h linux-3.3.8-pax/include/linux/mm_types.h
--- linux-3.3.8/include/linux/mm_types.h	2012-03-19 10:39:11.048049224 +0100
+++ linux-3.3.8-pax/include/linux/mm_types.h	2012-04-08 18:24:43.840230869 +0200
@@ -252,6 +252,8 @@ struct vm_area_struct {
 #ifdef CONFIG_NUMA
 	struct mempolicy *vm_policy;	/* NUMA policy for the VMA */
 #endif
+
+	struct vm_area_struct *vm_mirror;/* PaX: mirror vma or NULL */
 };
 
 struct core_thread {
@@ -326,7 +328,7 @@ struct mm_struct {
 	unsigned long def_flags;
 	unsigned long nr_ptes;		/* Page table pages */
 	unsigned long start_code, end_code, start_data, end_data;
-	unsigned long start_brk, brk, start_stack;
+	unsigned long brk_gap, start_brk, brk, start_stack;
 	unsigned long arg_start, arg_end, env_start, env_end;
 
 	unsigned long saved_auxv[AT_VECTOR_SIZE]; /* for /proc/PID/auxv */
@@ -388,6 +390,24 @@ struct mm_struct {
 #ifdef CONFIG_CPUMASK_OFFSTACK
 	struct cpumask cpumask_allocation;
 #endif
+
+#if defined(CONFIG_PAX_EI_PAX) || defined(CONFIG_PAX_PT_PAX_FLAGS) || defined(CONFIG_PAX_XATTR_PAX_FLAGS) || defined(CONFIG_PAX_HAVE_ACL_FLAGS) || defined(CONFIG_PAX_HOOK_ACL_FLAGS)
+	unsigned long pax_flags;
+#endif
+
+#ifdef CONFIG_PAX_DLRESOLVE
+	unsigned long call_dl_resolve;
+#endif
+
+#if defined(CONFIG_PPC32) && defined(CONFIG_PAX_EMUSIGRT)
+	unsigned long call_syscall;
+#endif
+
+#ifdef CONFIG_PAX_ASLR
+	unsigned long delta_mmap;		/* randomized offset */
+	unsigned long delta_stack;		/* randomized offset */
+#endif
+
 };
 
 static inline void mm_init_cpumask(struct mm_struct *mm)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/mmu_notifier.h linux-3.3.8-pax/include/linux/mmu_notifier.h
--- linux-3.3.8/include/linux/mmu_notifier.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/linux/mmu_notifier.h	2012-03-19 10:43:44.400034628 +0100
@@ -255,12 +255,12 @@ static inline void mmu_notifier_mm_destr
  */
 #define ptep_clear_flush_notify(__vma, __address, __ptep)		\
 ({									\
-	pte_t __pte;							\
+	pte_t ___pte;							\
 	struct vm_area_struct *___vma = __vma;				\
 	unsigned long ___address = __address;				\
-	__pte = ptep_clear_flush(___vma, ___address, __ptep);		\
+	___pte = ptep_clear_flush(___vma, ___address, __ptep);		\
 	mmu_notifier_invalidate_page(___vma->vm_mm, ___address);	\
-	__pte;								\
+	___pte;								\
 })
 
 #define pmdp_clear_flush_notify(__vma, __address, __pmdp)		\
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/mmzone.h linux-3.3.8-pax/include/linux/mmzone.h
--- linux-3.3.8/include/linux/mmzone.h	2012-03-19 10:39:11.068049225 +0100
+++ linux-3.3.8-pax/include/linux/mmzone.h	2012-03-19 10:43:44.404034629 +0100
@@ -379,7 +379,7 @@ struct zone {
 	unsigned long		flags;		   /* zone flags, see below */
 
 	/* Zone statistics */
-	atomic_long_t		vm_stat[NR_VM_ZONE_STAT_ITEMS];
+	atomic_long_unchecked_t		vm_stat[NR_VM_ZONE_STAT_ITEMS];
 
 	/*
 	 * The target ratio of ACTIVE_ANON to INACTIVE_ANON pages on
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/mod_devicetable.h linux-3.3.8-pax/include/linux/mod_devicetable.h
--- linux-3.3.8/include/linux/mod_devicetable.h	2012-03-19 10:39:11.072049225 +0100
+++ linux-3.3.8-pax/include/linux/mod_devicetable.h	2012-03-19 10:43:44.404034629 +0100
@@ -12,7 +12,7 @@
 typedef unsigned long kernel_ulong_t;
 #endif
 
-#define PCI_ANY_ID (~0)
+#define PCI_ANY_ID ((__u16)~0)
 
 struct pci_device_id {
 	__u32 vendor, device;		/* Vendor and device ID or PCI_ANY_ID*/
@@ -131,7 +131,7 @@ struct usb_device_id {
 #define USB_DEVICE_ID_MATCH_INT_SUBCLASS	0x0100
 #define USB_DEVICE_ID_MATCH_INT_PROTOCOL	0x0200
 
-#define HID_ANY_ID				(~0)
+#define HID_ANY_ID				(~0U)
 
 struct hid_device_id {
 	__u16 bus;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/module.h linux-3.3.8-pax/include/linux/module.h
--- linux-3.3.8/include/linux/module.h	2012-03-19 10:39:11.072049225 +0100
+++ linux-3.3.8-pax/include/linux/module.h	2012-03-19 10:43:44.404034629 +0100
@@ -17,6 +17,7 @@
 #include <linux/moduleparam.h>
 #include <linux/tracepoint.h>
 #include <linux/export.h>
+#include <linux/fs.h>
 
 #include <linux/percpu.h>
 #include <asm/module.h>
@@ -275,19 +276,16 @@ struct module
 	int (*init)(void);
 
 	/* If this is non-NULL, vfree after init() returns */
-	void *module_init;
+	void *module_init_rx, *module_init_rw;
 
 	/* Here is the actual code + data, vfree'd on unload. */
-	void *module_core;
+	void *module_core_rx, *module_core_rw;
 
 	/* Here are the sizes of the init and core sections */
-	unsigned int init_size, core_size;
+	unsigned int init_size_rw, core_size_rw;
 
 	/* The size of the executable code in each section.  */
-	unsigned int init_text_size, core_text_size;
-
-	/* Size of RO sections of the module (text+rodata) */
-	unsigned int init_ro_size, core_ro_size;
+	unsigned int init_size_rx, core_size_rx;
 
 	/* Arch-specific module values */
 	struct mod_arch_specific arch;
@@ -343,6 +341,10 @@ struct module
 #ifdef CONFIG_EVENT_TRACING
 	struct ftrace_event_call **trace_events;
 	unsigned int num_trace_events;
+	struct file_operations trace_id;
+	struct file_operations trace_enable;
+	struct file_operations trace_format;
+	struct file_operations trace_filter;
 #endif
 #ifdef CONFIG_FTRACE_MCOUNT_RECORD
 	unsigned int num_ftrace_callsites;
@@ -390,16 +392,46 @@ bool is_module_address(unsigned long add
 bool is_module_percpu_address(unsigned long addr);
 bool is_module_text_address(unsigned long addr);
 
+static inline int within_module_range(unsigned long addr, void *start, unsigned long size)
+{
+
+#ifdef CONFIG_PAX_KERNEXEC
+	if (ktla_ktva(addr) >= (unsigned long)start &&
+	    ktla_ktva(addr) < (unsigned long)start + size)
+		return 1;
+#endif
+
+	return ((void *)addr >= start && (void *)addr < start + size);
+}
+
+static inline int within_module_core_rx(unsigned long addr, struct module *mod)
+{
+	return within_module_range(addr, mod->module_core_rx, mod->core_size_rx);
+}
+
+static inline int within_module_core_rw(unsigned long addr, struct module *mod)
+{
+	return within_module_range(addr, mod->module_core_rw, mod->core_size_rw);
+}
+
+static inline int within_module_init_rx(unsigned long addr, struct module *mod)
+{
+	return within_module_range(addr, mod->module_init_rx, mod->init_size_rx);
+}
+
+static inline int within_module_init_rw(unsigned long addr, struct module *mod)
+{
+	return within_module_range(addr, mod->module_init_rw, mod->init_size_rw);
+}
+
 static inline int within_module_core(unsigned long addr, struct module *mod)
 {
-	return (unsigned long)mod->module_core <= addr &&
-	       addr < (unsigned long)mod->module_core + mod->core_size;
+	return within_module_core_rx(addr, mod) || within_module_core_rw(addr, mod);
 }
 
 static inline int within_module_init(unsigned long addr, struct module *mod)
 {
-	return (unsigned long)mod->module_init <= addr &&
-	       addr < (unsigned long)mod->module_init + mod->init_size;
+	return within_module_init_rx(addr, mod) || within_module_init_rw(addr, mod);
 }
 
 /* Search for module by name: must hold module_mutex. */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/moduleloader.h linux-3.3.8-pax/include/linux/moduleloader.h
--- linux-3.3.8/include/linux/moduleloader.h	2011-10-24 12:48:41.295090970 +0200
+++ linux-3.3.8-pax/include/linux/moduleloader.h	2012-05-16 21:22:09.157547077 +0200
@@ -25,9 +25,21 @@ unsigned int arch_mod_section_prepend(st
    sections.  Returns NULL on failure. */
 void *module_alloc(unsigned long size);
 
+#ifdef CONFIG_PAX_KERNEXEC
+void *module_alloc_exec(unsigned long size) __size_overflow(1);
+#else
+#define module_alloc_exec(x) module_alloc(x)
+#endif
+
 /* Free memory returned from module_alloc. */
 void module_free(struct module *mod, void *module_region);
 
+#ifdef CONFIG_PAX_KERNEXEC
+void module_free_exec(struct module *mod, void *module_region);
+#else
+#define module_free_exec(x, y) module_free((x), (y))
+#endif
+
 /* Apply the given relocation to the (simplified) ELF.  Return -error
    or 0. */
 int apply_relocate(Elf_Shdr *sechdrs,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/moduleparam.h linux-3.3.8-pax/include/linux/moduleparam.h
--- linux-3.3.8/include/linux/moduleparam.h	2012-03-19 10:39:11.072049225 +0100
+++ linux-3.3.8-pax/include/linux/moduleparam.h	2012-03-19 10:43:44.408034630 +0100
@@ -260,7 +260,7 @@ static inline void __kernel_param_unlock
  * @len is usually just sizeof(string).
  */
 #define module_param_string(name, string, len, perm)			\
-	static const struct kparam_string __param_string_##name		\
+	static const struct kparam_string __param_string_##name __used	\
 		= { len, string };					\
 	__module_param_call(MODULE_PARAM_PREFIX, name,			\
 			    &param_ops_string,				\
@@ -396,7 +396,7 @@ extern int param_set_bint(const char *va
  */
 #define module_param_array_named(name, array, type, nump, perm)		\
 	param_check_##type(name, &(array)[0]);				\
-	static const struct kparam_array __param_arr_##name		\
+	static const struct kparam_array __param_arr_##name __used	\
 	= { .max = ARRAY_SIZE(array), .num = nump,                      \
 	    .ops = &param_ops_##type,					\
 	    .elemsize = sizeof(array[0]), .elem = array };		\
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/namei.h linux-3.3.8-pax/include/linux/namei.h
--- linux-3.3.8/include/linux/namei.h	2012-01-08 19:48:27.327470966 +0100
+++ linux-3.3.8-pax/include/linux/namei.h	2012-03-19 10:43:44.408034630 +0100
@@ -24,7 +24,7 @@ struct nameidata {
 	unsigned	seq;
 	int		last_type;
 	unsigned	depth;
-	char *saved_names[MAX_NESTED_LINKS + 1];
+	const char *saved_names[MAX_NESTED_LINKS + 1];
 
 	/* Intent data */
 	union {
@@ -94,12 +94,12 @@ extern int follow_up(struct path *);
 extern struct dentry *lock_rename(struct dentry *, struct dentry *);
 extern void unlock_rename(struct dentry *, struct dentry *);
 
-static inline void nd_set_link(struct nameidata *nd, char *path)
+static inline void nd_set_link(struct nameidata *nd, const char *path)
 {
 	nd->saved_names[nd->depth] = path;
 }
 
-static inline char *nd_get_link(struct nameidata *nd)
+static inline const char *nd_get_link(const struct nameidata *nd)
 {
 	return nd->saved_names[nd->depth];
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/netdevice.h linux-3.3.8-pax/include/linux/netdevice.h
--- linux-3.3.8/include/linux/netdevice.h	2012-05-12 22:26:33.492956627 +0200
+++ linux-3.3.8-pax/include/linux/netdevice.h	2012-05-12 22:26:42.672957331 +0200
@@ -1002,6 +1002,7 @@ struct net_device_ops {
 	int			(*ndo_neigh_construct)(struct neighbour *n);
 	void			(*ndo_neigh_destroy)(struct neighbour *n);
 };
+typedef struct net_device_ops __no_const net_device_ops_no_const;
 
 /*
  *	The DEVICE structure.
@@ -1063,7 +1064,7 @@ struct net_device {
 	int			iflink;
 
 	struct net_device_stats	stats;
-	atomic_long_t		rx_dropped; /* dropped packets by core network
+	atomic_long_unchecked_t	rx_dropped; /* dropped packets by core network
 					     * Do not use this in drivers.
 					     */
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/of_pdt.h linux-3.3.8-pax/include/linux/of_pdt.h
--- linux-3.3.8/include/linux/of_pdt.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/linux/of_pdt.h	2012-03-19 10:43:44.412034630 +0100
@@ -32,7 +32,7 @@ struct of_pdt_ops {
 
 	/* return 0 on success; fill in 'len' with number of bytes in path */
 	int (*pkg2path)(phandle node, char *buf, const int buflen, int *len);
-};
+} __no_const;
 
 extern void *prom_early_alloc(unsigned long size);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/oprofile.h linux-3.3.8-pax/include/linux/oprofile.h
--- linux-3.3.8/include/linux/oprofile.h	2012-01-08 19:48:27.415470961 +0100
+++ linux-3.3.8-pax/include/linux/oprofile.h	2012-05-16 21:21:02.269543444 +0200
@@ -139,9 +139,9 @@ int oprofilefs_create_ulong(struct super
 int oprofilefs_create_ro_ulong(struct super_block * sb, struct dentry * root,
 	char const * name, ulong * val);
  
-/** Create a file for read-only access to an atomic_t. */
+/** Create a file for read-only access to an atomic_unchecked_t. */
 int oprofilefs_create_ro_atomic(struct super_block * sb, struct dentry * root,
-	char const * name, atomic_t * val);
+	char const * name, atomic_unchecked_t * val);
  
 /** create a directory */
 struct dentry * oprofilefs_mkdir(struct super_block * sb, struct dentry * root,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/padata.h linux-3.3.8-pax/include/linux/padata.h
--- linux-3.3.8/include/linux/padata.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/linux/padata.h	2012-03-19 10:43:44.412034630 +0100
@@ -129,7 +129,7 @@ struct parallel_data {
 	struct padata_instance		*pinst;
 	struct padata_parallel_queue	__percpu *pqueue;
 	struct padata_serial_queue	__percpu *squeue;
-	atomic_t			seq_nr;
+	atomic_unchecked_t		seq_nr;
 	atomic_t			reorder_objects;
 	atomic_t			refcnt;
 	unsigned int			max_seq_nr;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/perf_event.h linux-3.3.8-pax/include/linux/perf_event.h
--- linux-3.3.8/include/linux/perf_event.h	2012-03-19 10:39:11.272049216 +0100
+++ linux-3.3.8-pax/include/linux/perf_event.h	2012-03-19 10:43:44.416034629 +0100
@@ -750,8 +750,8 @@ struct perf_event {
 
 	enum perf_event_active_state	state;
 	unsigned int			attach_state;
-	local64_t			count;
-	atomic64_t			child_count;
+	local64_t			count; /* PaX: fix it one day */
+	atomic64_unchecked_t		child_count;
 
 	/*
 	 * These are the total time in nanoseconds that the event
@@ -802,8 +802,8 @@ struct perf_event {
 	 * These accumulate total time (in nanoseconds) that children
 	 * events have been enabled and running, respectively.
 	 */
-	atomic64_t			child_total_time_enabled;
-	atomic64_t			child_total_time_running;
+	atomic64_unchecked_t		child_total_time_enabled;
+	atomic64_unchecked_t		child_total_time_running;
 
 	/*
 	 * Protect attach/detach and child_list:
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/pipe_fs_i.h linux-3.3.8-pax/include/linux/pipe_fs_i.h
--- linux-3.3.8/include/linux/pipe_fs_i.h	2012-05-07 20:26:56.075609314 +0200
+++ linux-3.3.8-pax/include/linux/pipe_fs_i.h	2012-05-07 20:27:02.123608992 +0200
@@ -47,9 +47,9 @@ struct pipe_buffer {
 struct pipe_inode_info {
 	wait_queue_head_t wait;
 	unsigned int nrbufs, curbuf, buffers;
-	unsigned int readers;
-	unsigned int writers;
-	unsigned int waiting_writers;
+	atomic_t readers;
+	atomic_t writers;
+	atomic_t waiting_writers;
 	unsigned int r_counter;
 	unsigned int w_counter;
 	struct page *tmp_page;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/pm_runtime.h linux-3.3.8-pax/include/linux/pm_runtime.h
--- linux-3.3.8/include/linux/pm_runtime.h	2012-03-19 10:39:11.284049214 +0100
+++ linux-3.3.8-pax/include/linux/pm_runtime.h	2012-03-19 10:43:44.416034629 +0100
@@ -97,7 +97,7 @@ static inline bool pm_runtime_callbacks_
 
 static inline void pm_runtime_mark_last_busy(struct device *dev)
 {
-	ACCESS_ONCE(dev->power.last_busy) = jiffies;
+	ACCESS_ONCE_RW(dev->power.last_busy) = jiffies;
 }
 
 #else /* !CONFIG_PM_RUNTIME */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/poison.h linux-3.3.8-pax/include/linux/poison.h
--- linux-3.3.8/include/linux/poison.h	2012-03-19 10:39:11.288049213 +0100
+++ linux-3.3.8-pax/include/linux/poison.h	2012-03-19 10:43:44.416034629 +0100
@@ -19,8 +19,8 @@
  * under normal circumstances, used to verify that nobody uses
  * non-initialized list entries.
  */
-#define LIST_POISON1  ((void *) 0x00100100 + POISON_POINTER_DELTA)
-#define LIST_POISON2  ((void *) 0x00200200 + POISON_POINTER_DELTA)
+#define LIST_POISON1  ((void *) (long)0xFFFFFF01)
+#define LIST_POISON2  ((void *) (long)0xFFFFFF02)
 
 /********** include/linux/timer.h **********/
 /*
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/preempt.h linux-3.3.8-pax/include/linux/preempt.h
--- linux-3.3.8/include/linux/preempt.h	2011-10-24 12:48:41.419090966 +0200
+++ linux-3.3.8-pax/include/linux/preempt.h	2012-03-19 10:43:44.416034629 +0100
@@ -123,7 +123,7 @@ struct preempt_ops {
 	void (*sched_in)(struct preempt_notifier *notifier, int cpu);
 	void (*sched_out)(struct preempt_notifier *notifier,
 			  struct task_struct *next);
-};
+} __no_const;
 
 /**
  * preempt_notifier - key for installing preemption notifiers
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/proc_fs.h linux-3.3.8-pax/include/linux/proc_fs.h
--- linux-3.3.8/include/linux/proc_fs.h	2012-03-19 10:39:11.292049211 +0100
+++ linux-3.3.8-pax/include/linux/proc_fs.h	2012-03-19 10:43:44.420034628 +0100
@@ -258,7 +258,7 @@ union proc_op {
 	int (*proc_show)(struct seq_file *m,
 		struct pid_namespace *ns, struct pid *pid,
 		struct task_struct *task);
-};
+} __no_const;
 
 struct ctl_table_header;
 struct ctl_table;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/random.h linux-3.3.8-pax/include/linux/random.h
--- linux-3.3.8/include/linux/random.h	2012-01-08 19:48:27.503470957 +0100
+++ linux-3.3.8-pax/include/linux/random.h	2012-03-19 10:43:44.420034628 +0100
@@ -69,12 +69,17 @@ void srandom32(u32 seed);
 
 u32 prandom32(struct rnd_state *);
 
+static inline unsigned long pax_get_random_long(void)
+{
+	return random32() + (sizeof(long) > 4 ? (unsigned long)random32() << 32 : 0);
+}
+
 /*
  * Handle minimum values for seeds
  */
 static inline u32 __seed(u32 x, u32 m)
 {
-	return (x < m) ? x + m : x;
+	return (x <= m) ? x + m + 1 : x;
 }
 
 /**
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/reboot.h linux-3.3.8-pax/include/linux/reboot.h
--- linux-3.3.8/include/linux/reboot.h	2011-10-24 12:48:41.455090964 +0200
+++ linux-3.3.8-pax/include/linux/reboot.h	2012-03-19 10:43:44.420034628 +0100
@@ -52,9 +52,9 @@ extern int unregister_reboot_notifier(st
  * Architecture-specific implementations of sys_reboot commands.
  */
 
-extern void machine_restart(char *cmd);
-extern void machine_halt(void);
-extern void machine_power_off(void);
+extern void machine_restart(char *cmd) __noreturn;
+extern void machine_halt(void) __noreturn;
+extern void machine_power_off(void) __noreturn;
 
 extern void machine_shutdown(void);
 struct pt_regs;
@@ -65,9 +65,9 @@ extern void machine_crash_shutdown(struc
  */
 
 extern void kernel_restart_prepare(char *cmd);
-extern void kernel_restart(char *cmd);
-extern void kernel_halt(void);
-extern void kernel_power_off(void);
+extern void kernel_restart(char *cmd) __noreturn;
+extern void kernel_halt(void) __noreturn;
+extern void kernel_power_off(void) __noreturn;
 
 extern int C_A_D; /* for sysctl */
 void ctrl_alt_del(void);
@@ -81,7 +81,7 @@ extern int orderly_poweroff(bool force);
  * Emergency restart, callable from an interrupt handler.
  */
 
-extern void emergency_restart(void);
+extern void emergency_restart(void) __noreturn;
 #include <asm/emergency-restart.h>
 
 #endif
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/reiserfs_fs.h linux-3.3.8-pax/include/linux/reiserfs_fs.h
--- linux-3.3.8/include/linux/reiserfs_fs.h	2012-03-19 10:39:11.304049209 +0100
+++ linux-3.3.8-pax/include/linux/reiserfs_fs.h	2012-03-19 10:43:44.424034627 +0100
@@ -1406,7 +1406,7 @@ static inline loff_t max_reiserfs_offset
 #define REISERFS_USER_MEM		1	/* reiserfs user memory mode            */
 
 #define fs_generation(s) (REISERFS_SB(s)->s_generation_counter)
-#define get_generation(s) atomic_read (&fs_generation(s))
+#define get_generation(s) atomic_read_unchecked (&fs_generation(s))
 #define FILESYSTEM_CHANGED_TB(tb)  (get_generation((tb)->tb_sb) != (tb)->fs_gen)
 #define __fs_changed(gen,s) (gen != get_generation (s))
 #define fs_changed(gen,s)		\
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/reiserfs_fs_sb.h linux-3.3.8-pax/include/linux/reiserfs_fs_sb.h
--- linux-3.3.8/include/linux/reiserfs_fs_sb.h	2012-03-19 10:39:11.308049211 +0100
+++ linux-3.3.8-pax/include/linux/reiserfs_fs_sb.h	2012-03-19 10:43:44.424034627 +0100
@@ -386,7 +386,7 @@ struct reiserfs_sb_info {
 	/* Comment? -Hans */
 	wait_queue_head_t s_wait;
 	/* To be obsoleted soon by per buffer seals.. -Hans */
-	atomic_t s_generation_counter;	// increased by one every time the
+	atomic_unchecked_t s_generation_counter;	// increased by one every time the
 	// tree gets re-balanced
 	unsigned long s_properties;	/* File system properties. Currently holds
 					   on-disk FS format */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/relay.h linux-3.3.8-pax/include/linux/relay.h
--- linux-3.3.8/include/linux/relay.h	2012-03-19 10:39:11.308049211 +0100
+++ linux-3.3.8-pax/include/linux/relay.h	2012-03-19 10:43:44.424034627 +0100
@@ -159,7 +159,7 @@ struct rchan_callbacks
 	 * The callback should return 0 if successful, negative if not.
 	 */
 	int (*remove_buf_file)(struct dentry *dentry);
-};
+} __no_const;
 
 /*
  * CONFIG_RELAY kernel API, kernel/relay.c
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/rfkill.h linux-3.3.8-pax/include/linux/rfkill.h
--- linux-3.3.8/include/linux/rfkill.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/linux/rfkill.h	2012-03-19 10:43:44.428034627 +0100
@@ -147,6 +147,7 @@ struct rfkill_ops {
 	void	(*query)(struct rfkill *rfkill, void *data);
 	int	(*set_block)(void *data, bool blocked);
 };
+typedef struct rfkill_ops __no_const rfkill_ops_no_const;
 
 #if defined(CONFIG_RFKILL) || defined(CONFIG_RFKILL_MODULE)
 /**
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/rio.h linux-3.3.8-pax/include/linux/rio.h
--- linux-3.3.8/include/linux/rio.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/linux/rio.h	2012-03-19 10:43:44.432034627 +0100
@@ -315,7 +315,7 @@ struct rio_ops {
 				 int mbox, void *buffer, size_t len);
 	int (*add_inb_buffer)(struct rio_mport *mport, int mbox, void *buf);
 	void *(*get_inb_message)(struct rio_mport *mport, int mbox);
-};
+} __no_const;
 
 #define RIO_RESOURCE_MEM	0x00000100
 #define RIO_RESOURCE_DOORBELL	0x00000200
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/rmap.h linux-3.3.8-pax/include/linux/rmap.h
--- linux-3.3.8/include/linux/rmap.h	2012-03-19 10:39:11.312049212 +0100
+++ linux-3.3.8-pax/include/linux/rmap.h	2012-03-19 10:43:44.436034627 +0100
@@ -119,9 +119,9 @@ static inline void anon_vma_unlock(struc
 void anon_vma_init(void);	/* create anon_vma_cachep */
 int  anon_vma_prepare(struct vm_area_struct *);
 void unlink_anon_vmas(struct vm_area_struct *);
-int anon_vma_clone(struct vm_area_struct *, struct vm_area_struct *);
+int anon_vma_clone(struct vm_area_struct *, const struct vm_area_struct *);
 void anon_vma_moveto_tail(struct vm_area_struct *);
-int anon_vma_fork(struct vm_area_struct *, struct vm_area_struct *);
+int anon_vma_fork(struct vm_area_struct *, const struct vm_area_struct *);
 void __anon_vma_link(struct vm_area_struct *);
 
 static inline void anon_vma_merge(struct vm_area_struct *vma,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/sched.h linux-3.3.8-pax/include/linux/sched.h
--- linux-3.3.8/include/linux/sched.h	2012-03-19 10:39:11.312049212 +0100
+++ linux-3.3.8-pax/include/linux/sched.h	2012-03-19 10:43:44.444034627 +0100
@@ -101,6 +101,7 @@ struct bio_list;
 struct fs_struct;
 struct perf_event_context;
 struct blk_plug;
+struct linux_binprm;
 
 /*
  * List of flags we want to share for kernel threads,
@@ -382,10 +383,13 @@ struct user_namespace;
 #define DEFAULT_MAX_MAP_COUNT	(USHRT_MAX - MAPCOUNT_ELF_CORE_MARGIN)
 
 extern int sysctl_max_map_count;
+extern unsigned long sysctl_heap_stack_gap;
 
 #include <linux/aio.h>
 
 #ifdef CONFIG_MMU
+extern bool check_heap_stack_gap(const struct vm_area_struct *vma, unsigned long addr, unsigned long len);
+extern unsigned long skip_heap_stack_gap(const struct vm_area_struct *vma, unsigned long len);
 extern void arch_pick_mmap_layout(struct mm_struct *mm);
 extern unsigned long
 arch_get_unmapped_area(struct file *, unsigned long, unsigned long,
@@ -1354,8 +1358,8 @@ struct task_struct {
 	struct list_head thread_group;
 
 	struct completion *vfork_done;		/* for vfork() */
-	int __user *set_child_tid;		/* CLONE_CHILD_SETTID */
-	int __user *clear_child_tid;		/* CLONE_CHILD_CLEARTID */
+	pid_t __user *set_child_tid;		/* CLONE_CHILD_SETTID */
+	pid_t __user *clear_child_tid;		/* CLONE_CHILD_CLEARTID */
 
 	cputime_t utime, stime, utimescaled, stimescaled;
 	cputime_t gtime;
@@ -1394,6 +1398,10 @@ struct task_struct {
 #endif
 /* CPU-specific state of this task */
 	struct thread_struct thread;
+/* thread_info moved to task_struct */
+#ifdef CONFIG_X86
+	struct thread_info tinfo;
+#endif
 /* filesystem information */
 	struct fs_struct *fs;
 /* open file information */
@@ -1592,6 +1600,51 @@ struct task_struct {
 #endif
 };
 
+#define MF_PAX_PAGEEXEC		0x01000000	/* Paging based non-executable pages */
+#define MF_PAX_EMUTRAMP		0x02000000	/* Emulate trampolines */
+#define MF_PAX_MPROTECT		0x04000000	/* Restrict mprotect() */
+#define MF_PAX_RANDMMAP		0x08000000	/* Randomize mmap() base */
+/*#define MF_PAX_RANDEXEC		0x10000000*/	/* Randomize ET_EXEC base */
+#define MF_PAX_SEGMEXEC		0x20000000	/* Segmentation based non-executable pages */
+
+#ifdef CONFIG_PAX_SOFTMODE
+extern int pax_softmode;
+#endif
+
+extern int pax_check_flags(unsigned long *);
+
+/* if tsk != current then task_lock must be held on it */
+#if defined(CONFIG_PAX_NOEXEC) || defined(CONFIG_PAX_ASLR)
+static inline unsigned long pax_get_flags(struct task_struct *tsk)
+{
+	if (likely(tsk->mm))
+		return tsk->mm->pax_flags;
+	else
+		return 0UL;
+}
+
+/* if tsk != current then task_lock must be held on it */
+static inline long pax_set_flags(struct task_struct *tsk, unsigned long flags)
+{
+	if (likely(tsk->mm)) {
+		tsk->mm->pax_flags = flags;
+		return 0;
+	}
+	return -EINVAL;
+}
+#endif
+
+#ifdef CONFIG_PAX_HAVE_ACL_FLAGS
+extern void pax_set_initial_flags(struct linux_binprm *bprm);
+#elif defined(CONFIG_PAX_HOOK_ACL_FLAGS)
+extern void (*pax_set_initial_flags_func)(struct linux_binprm *bprm);
+#endif
+
+extern void pax_report_fault(struct pt_regs *regs, void *pc, void *sp);
+extern void pax_report_insns(struct pt_regs *regs, void *pc, void *sp);
+extern void pax_report_refcount_overflow(struct pt_regs *regs);
+extern __noreturn void pax_report_usercopy(const void *ptr, unsigned long len, bool to, const char *type);
+
 /* Future-safe accessor for struct task_struct's cpus_allowed. */
 #define tsk_cpus_allowed(tsk) (&(tsk)->cpus_allowed)
 
@@ -2104,7 +2157,9 @@ void yield(void);
 extern struct exec_domain	default_exec_domain;
 
 union thread_union {
+#ifndef CONFIG_X86
 	struct thread_info thread_info;
+#endif
 	unsigned long stack[THREAD_SIZE/sizeof(long)];
 };
 
@@ -2280,7 +2335,7 @@ extern void __cleanup_sighand(struct sig
 extern void exit_itimers(struct signal_struct *);
 extern void flush_itimer_signals(void);
 
-extern void do_group_exit(int);
+extern __noreturn void do_group_exit(int);
 
 extern void daemonize(const char *, ...);
 extern int allow_signal(int);
@@ -2478,13 +2533,17 @@ static inline unsigned long *end_of_stac
 
 #endif
 
-static inline int object_is_on_stack(void *obj)
+static inline int object_starts_on_stack(void *obj)
 {
-	void *stack = task_stack_page(current);
+	const void *stack = task_stack_page(current);
 
 	return (obj >= stack) && (obj < (stack + THREAD_SIZE));
 }
 
+#ifdef CONFIG_PAX_USERCOPY
+extern int object_is_on_stack(const void *obj, unsigned long len);
+#endif
+
 extern void thread_info_cache_init(void);
 
 #ifdef CONFIG_DEBUG_STACK_USAGE
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/screen_info.h linux-3.3.8-pax/include/linux/screen_info.h
--- linux-3.3.8/include/linux/screen_info.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/linux/screen_info.h	2012-03-19 10:43:44.444034627 +0100
@@ -43,7 +43,8 @@ struct screen_info {
 	__u16 pages;		/* 0x32 */
 	__u16 vesa_attributes;	/* 0x34 */
 	__u32 capabilities;     /* 0x36 */
-	__u8  _reserved[6];	/* 0x3a */
+	__u16 vesapm_size;	/* 0x3a */
+	__u8  _reserved[4];	/* 0x3c */
 } __attribute__((packed));
 
 #define VIDEO_TYPE_MDA		0x10	/* Monochrome Text Display	*/
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/seq_file.h linux-3.3.8-pax/include/linux/seq_file.h
--- linux-3.3.8/include/linux/seq_file.h	2012-03-19 10:39:11.316049212 +0100
+++ linux-3.3.8-pax/include/linux/seq_file.h	2012-03-19 10:43:44.444034627 +0100
@@ -33,6 +33,7 @@ struct seq_operations {
 	void * (*next) (struct seq_file *m, void *v, loff_t *pos);
 	int (*show) (struct seq_file *m, void *v);
 };
+typedef struct seq_operations __no_const seq_operations_no_const;
 
 #define SEQ_SKIP 1
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/skbuff.h linux-3.3.8-pax/include/linux/skbuff.h
--- linux-3.3.8/include/linux/skbuff.h	2012-04-27 22:14:17.885191272 +0200
+++ linux-3.3.8-pax/include/linux/skbuff.h	2012-04-27 22:14:29.245190664 +0200
@@ -655,7 +655,7 @@ static inline struct skb_shared_hwtstamp
  */
 static inline int skb_queue_empty(const struct sk_buff_head *list)
 {
-	return list->next == (struct sk_buff *)list;
+	return list->next == (const struct sk_buff *)list;
 }
 
 /**
@@ -668,7 +668,7 @@ static inline int skb_queue_empty(const
 static inline bool skb_queue_is_last(const struct sk_buff_head *list,
 				     const struct sk_buff *skb)
 {
-	return skb->next == (struct sk_buff *)list;
+	return skb->next == (const struct sk_buff *)list;
 }
 
 /**
@@ -681,7 +681,7 @@ static inline bool skb_queue_is_last(con
 static inline bool skb_queue_is_first(const struct sk_buff_head *list,
 				      const struct sk_buff *skb)
 {
-	return skb->prev == (struct sk_buff *)list;
+	return skb->prev == (const struct sk_buff *)list;
 }
 
 /**
@@ -1558,7 +1558,7 @@ static inline int pskb_network_may_pull(
  * NET_IP_ALIGN(2) + ethernet_header(14) + IP_header(20/40) + ports(8)
  */
 #ifndef NET_SKB_PAD
-#define NET_SKB_PAD	max(32, L1_CACHE_BYTES)
+#define NET_SKB_PAD	max(_AC(32,UL), L1_CACHE_BYTES)
 #endif
 
 extern int ___pskb_trim(struct sk_buff *skb, unsigned int len);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/slab_def.h linux-3.3.8-pax/include/linux/slab_def.h
--- linux-3.3.8/include/linux/slab_def.h	2012-03-19 10:39:11.332049207 +0100
+++ linux-3.3.8-pax/include/linux/slab_def.h	2012-05-16 21:21:02.285543445 +0200
@@ -66,10 +66,10 @@ struct kmem_cache {
 	unsigned long node_allocs;
 	unsigned long node_frees;
 	unsigned long node_overflow;
-	atomic_t allochit;
-	atomic_t allocmiss;
-	atomic_t freehit;
-	atomic_t freemiss;
+	atomic_unchecked_t allochit;
+	atomic_unchecked_t allocmiss;
+	atomic_unchecked_t freehit;
+	atomic_unchecked_t freemiss;
 
 	/*
 	 * If debugging is enabled, then the allocator can add additional
@@ -107,7 +107,7 @@ struct cache_sizes {
 extern struct cache_sizes malloc_sizes[];
 
 void *kmem_cache_alloc(struct kmem_cache *, gfp_t);
-void *__kmalloc(size_t size, gfp_t flags);
+void *__kmalloc(size_t size, gfp_t flags) __size_overflow(1);
 
 #ifdef CONFIG_TRACING
 extern void *kmem_cache_alloc_trace(size_t size,
@@ -160,7 +160,7 @@ found:
 }
 
 #ifdef CONFIG_NUMA
-extern void *__kmalloc_node(size_t size, gfp_t flags, int node);
+extern void *__kmalloc_node(size_t size, gfp_t flags, int node) __size_overflow(1);
 extern void *kmem_cache_alloc_node(struct kmem_cache *, gfp_t flags, int node);
 
 #ifdef CONFIG_TRACING
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/slab.h linux-3.3.8-pax/include/linux/slab.h
--- linux-3.3.8/include/linux/slab.h	2011-10-24 12:48:41.495090962 +0200
+++ linux-3.3.8-pax/include/linux/slab.h	2012-05-16 21:21:02.273543444 +0200
@@ -11,12 +11,20 @@
 
 #include <linux/gfp.h>
 #include <linux/types.h>
+#include <linux/err.h>
 
 /*
  * Flags to pass to kmem_cache_create().
  * The ones marked DEBUG are only valid if CONFIG_SLAB_DEBUG is set.
  */
 #define SLAB_DEBUG_FREE		0x00000100UL	/* DEBUG: Perform (expensive) checks on free */
+
+#ifdef CONFIG_PAX_USERCOPY
+#define SLAB_USERCOPY		0x00000200UL	/* PaX: Allow copying objs to/from userland */
+#else
+#define SLAB_USERCOPY		0x00000000UL
+#endif
+
 #define SLAB_RED_ZONE		0x00000400UL	/* DEBUG: Red zone objs in a cache */
 #define SLAB_POISON		0x00000800UL	/* DEBUG: Poison objects */
 #define SLAB_HWCACHE_ALIGN	0x00002000UL	/* Align objs on cache lines */
@@ -87,10 +95,13 @@
  * ZERO_SIZE_PTR can be passed to kfree though in the same way that NULL can.
  * Both make kfree a no-op.
  */
-#define ZERO_SIZE_PTR ((void *)16)
+#define ZERO_SIZE_PTR				\
+({						\
+	BUILD_BUG_ON(!(MAX_ERRNO & ~PAGE_MASK));\
+	(void *)(-MAX_ERRNO-1L);		\
+})
 
-#define ZERO_OR_NULL_PTR(x) ((unsigned long)(x) <= \
-				(unsigned long)ZERO_SIZE_PTR)
+#define ZERO_OR_NULL_PTR(x) ((unsigned long)(x) - 1 >= (unsigned long)ZERO_SIZE_PTR - 1)
 
 /*
  * struct kmem_cache related prototypes
@@ -161,6 +172,7 @@ void * __must_check krealloc(const void
 void kfree(const void *);
 void kzfree(const void *);
 size_t ksize(const void *);
+void check_object_size(const void *ptr, unsigned long n, bool to);
 
 /*
  * Allocator specific definitions. These are mainly used to establish optimized
@@ -287,7 +299,7 @@ static inline void *kmem_cache_alloc_nod
  */
 #if defined(CONFIG_DEBUG_SLAB) || defined(CONFIG_SLUB) || \
 	(defined(CONFIG_SLAB) && defined(CONFIG_TRACING))
-extern void *__kmalloc_track_caller(size_t, gfp_t, unsigned long);
+extern void *__kmalloc_track_caller(size_t, gfp_t, unsigned long) __size_overflow(1);
 #define kmalloc_track_caller(size, flags) \
 	__kmalloc_track_caller(size, flags, _RET_IP_)
 #else
@@ -306,7 +318,7 @@ extern void *__kmalloc_track_caller(size
  */
 #if defined(CONFIG_DEBUG_SLAB) || defined(CONFIG_SLUB) || \
 	(defined(CONFIG_SLAB) && defined(CONFIG_TRACING))
-extern void *__kmalloc_node_track_caller(size_t, gfp_t, int, unsigned long);
+extern void *__kmalloc_node_track_caller(size_t, gfp_t, int, unsigned long) __size_overflow(1);
 #define kmalloc_node_track_caller(size, flags, node) \
 	__kmalloc_node_track_caller(size, flags, node, \
 			_RET_IP_)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/slob_def.h linux-3.3.8-pax/include/linux/slob_def.h
--- linux-3.3.8/include/linux/slob_def.h	2011-10-24 12:48:41.499090961 +0200
+++ linux-3.3.8-pax/include/linux/slob_def.h	2012-05-16 21:21:02.285543445 +0200
@@ -9,7 +9,7 @@ static __always_inline void *kmem_cache_
 	return kmem_cache_alloc_node(cachep, flags, -1);
 }
 
-void *__kmalloc_node(size_t size, gfp_t flags, int node);
+void *__kmalloc_node(size_t size, gfp_t flags, int node) __size_overflow(1);
 
 static __always_inline void *kmalloc_node(size_t size, gfp_t flags, int node)
 {
@@ -29,6 +29,7 @@ static __always_inline void *kmalloc(siz
 	return __kmalloc_node(size, flags, -1);
 }
 
+static __always_inline void *__kmalloc(size_t size, gfp_t flags) __size_overflow(1);
 static __always_inline void *__kmalloc(size_t size, gfp_t flags)
 {
 	return kmalloc(size, flags);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/slub_def.h linux-3.3.8-pax/include/linux/slub_def.h
--- linux-3.3.8/include/linux/slub_def.h	2012-01-08 19:48:27.607470951 +0100
+++ linux-3.3.8-pax/include/linux/slub_def.h	2012-05-16 21:29:08.573569857 +0200
@@ -89,7 +89,7 @@ struct kmem_cache {
 	struct kmem_cache_order_objects max;
 	struct kmem_cache_order_objects min;
 	gfp_t allocflags;	/* gfp flags to use on each alloc */
-	int refcount;		/* Refcount for slab cache destroy */
+	atomic_t refcount;	/* Refcount for slab cache destroy */
 	void (*ctor)(void *);
 	int inuse;		/* Offset to metadata */
 	int align;		/* Alignment */
@@ -150,6 +150,7 @@ extern struct kmem_cache *kmalloc_caches
  * Sorry that the following has to be that ugly but some versions of GCC
  * have trouble with constant propagation and loops.
  */
+static __always_inline int kmalloc_index(size_t size) __size_overflow(1);
 static __always_inline int kmalloc_index(size_t size)
 {
 	if (!size)
@@ -215,7 +216,7 @@ static __always_inline struct kmem_cache
 }
 
 void *kmem_cache_alloc(struct kmem_cache *, gfp_t);
-void *__kmalloc(size_t size, gfp_t flags);
+void *__kmalloc(size_t size, gfp_t flags) __alloc_size(1) __size_overflow(1);
 
 static __always_inline void *
 kmalloc_order(size_t size, gfp_t flags, unsigned int order)
@@ -256,6 +257,7 @@ kmalloc_order_trace(size_t size, gfp_t f
 }
 #endif
 
+static __always_inline void *kmalloc_large(size_t size, gfp_t flags) __size_overflow(1);
 static __always_inline void *kmalloc_large(size_t size, gfp_t flags)
 {
 	unsigned int order = get_order(size);
@@ -281,7 +283,7 @@ static __always_inline void *kmalloc(siz
 }
 
 #ifdef CONFIG_NUMA
-void *__kmalloc_node(size_t size, gfp_t flags, int node);
+void *__kmalloc_node(size_t size, gfp_t flags, int node) __size_overflow(1);
 void *kmem_cache_alloc_node(struct kmem_cache *, gfp_t flags, int node);
 
 #ifdef CONFIG_TRACING
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/sonet.h linux-3.3.8-pax/include/linux/sonet.h
--- linux-3.3.8/include/linux/sonet.h	2011-10-24 12:48:41.503090958 +0200
+++ linux-3.3.8-pax/include/linux/sonet.h	2012-03-19 10:43:44.448034628 +0100
@@ -61,7 +61,7 @@ struct sonet_stats {
 #include <linux/atomic.h>
 
 struct k_sonet_stats {
-#define __HANDLE_ITEM(i) atomic_t i
+#define __HANDLE_ITEM(i) atomic_unchecked_t i
 	__SONET_ITEMS
 #undef __HANDLE_ITEM
 };
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/sunrpc/clnt.h linux-3.3.8-pax/include/linux/sunrpc/clnt.h
--- linux-3.3.8/include/linux/sunrpc/clnt.h	2012-03-19 10:39:11.344049209 +0100
+++ linux-3.3.8-pax/include/linux/sunrpc/clnt.h	2012-03-19 10:43:44.448034628 +0100
@@ -172,9 +172,9 @@ static inline unsigned short rpc_get_por
 {
 	switch (sap->sa_family) {
 	case AF_INET:
-		return ntohs(((struct sockaddr_in *)sap)->sin_port);
+		return ntohs(((const struct sockaddr_in *)sap)->sin_port);
 	case AF_INET6:
-		return ntohs(((struct sockaddr_in6 *)sap)->sin6_port);
+		return ntohs(((const struct sockaddr_in6 *)sap)->sin6_port);
 	}
 	return 0;
 }
@@ -207,7 +207,7 @@ static inline bool __rpc_cmp_addr4(const
 static inline bool __rpc_copy_addr4(struct sockaddr *dst,
 				    const struct sockaddr *src)
 {
-	const struct sockaddr_in *ssin = (struct sockaddr_in *) src;
+	const struct sockaddr_in *ssin = (const struct sockaddr_in *) src;
 	struct sockaddr_in *dsin = (struct sockaddr_in *) dst;
 
 	dsin->sin_family = ssin->sin_family;
@@ -310,7 +310,7 @@ static inline u32 rpc_get_scope_id(const
 	if (sa->sa_family != AF_INET6)
 		return 0;
 
-	return ((struct sockaddr_in6 *) sa)->sin6_scope_id;
+	return ((const struct sockaddr_in6 *) sa)->sin6_scope_id;
 }
 
 #endif /* __KERNEL__ */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/sunrpc/sched.h linux-3.3.8-pax/include/linux/sunrpc/sched.h
--- linux-3.3.8/include/linux/sunrpc/sched.h	2011-10-24 12:48:41.523090960 +0200
+++ linux-3.3.8-pax/include/linux/sunrpc/sched.h	2012-03-19 10:43:44.448034628 +0100
@@ -105,6 +105,7 @@ struct rpc_call_ops {
 	void (*rpc_call_done)(struct rpc_task *, void *);
 	void (*rpc_release)(void *);
 };
+typedef struct rpc_call_ops __no_const rpc_call_ops_no_const;
 
 struct rpc_task_setup {
 	struct rpc_task *task;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/sunrpc/svc_rdma.h linux-3.3.8-pax/include/linux/sunrpc/svc_rdma.h
--- linux-3.3.8/include/linux/sunrpc/svc_rdma.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/linux/sunrpc/svc_rdma.h	2012-03-19 10:43:44.448034628 +0100
@@ -53,15 +53,15 @@ extern unsigned int svcrdma_ord;
 extern unsigned int svcrdma_max_requests;
 extern unsigned int svcrdma_max_req_size;
 
-extern atomic_t rdma_stat_recv;
-extern atomic_t rdma_stat_read;
-extern atomic_t rdma_stat_write;
-extern atomic_t rdma_stat_sq_starve;
-extern atomic_t rdma_stat_rq_starve;
-extern atomic_t rdma_stat_rq_poll;
-extern atomic_t rdma_stat_rq_prod;
-extern atomic_t rdma_stat_sq_poll;
-extern atomic_t rdma_stat_sq_prod;
+extern atomic_unchecked_t rdma_stat_recv;
+extern atomic_unchecked_t rdma_stat_read;
+extern atomic_unchecked_t rdma_stat_write;
+extern atomic_unchecked_t rdma_stat_sq_starve;
+extern atomic_unchecked_t rdma_stat_rq_starve;
+extern atomic_unchecked_t rdma_stat_rq_poll;
+extern atomic_unchecked_t rdma_stat_rq_prod;
+extern atomic_unchecked_t rdma_stat_sq_poll;
+extern atomic_unchecked_t rdma_stat_sq_prod;
 
 #define RPCRDMA_VERSION 1
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/sysctl.h linux-3.3.8-pax/include/linux/sysctl.h
--- linux-3.3.8/include/linux/sysctl.h	2012-03-19 10:39:11.352049210 +0100
+++ linux-3.3.8-pax/include/linux/sysctl.h	2012-03-19 10:43:44.452034627 +0100
@@ -155,7 +155,11 @@ enum
 	KERN_PANIC_ON_NMI=76, /* int: whether we will panic on an unrecovered */
 };
 
-
+#ifdef CONFIG_PAX_SOFTMODE
+enum {
+	PAX_SOFTMODE=1		/* PaX: disable/enable soft mode */
+};
+#endif
 
 /* CTL_VM names: */
 enum
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/tty_ldisc.h linux-3.3.8-pax/include/linux/tty_ldisc.h
--- linux-3.3.8/include/linux/tty_ldisc.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/linux/tty_ldisc.h	2012-03-19 10:43:44.452034627 +0100
@@ -148,7 +148,7 @@ struct tty_ldisc_ops {
 
 	struct  module *owner;
 	
-	int refcount;
+	atomic_t refcount;
 };
 
 struct tty_ldisc {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/types.h linux-3.3.8-pax/include/linux/types.h
--- linux-3.3.8/include/linux/types.h	2012-03-19 10:39:11.360049209 +0100
+++ linux-3.3.8-pax/include/linux/types.h	2012-03-19 10:43:44.452034627 +0100
@@ -214,10 +214,26 @@ typedef struct {
 	int counter;
 } atomic_t;
 
+#ifdef CONFIG_PAX_REFCOUNT
+typedef struct {
+	int counter;
+} atomic_unchecked_t;
+#else
+typedef atomic_t atomic_unchecked_t;
+#endif
+
 #ifdef CONFIG_64BIT
 typedef struct {
 	long counter;
 } atomic64_t;
+
+#ifdef CONFIG_PAX_REFCOUNT
+typedef struct {
+	long counter;
+} atomic64_unchecked_t;
+#else
+typedef atomic64_t atomic64_unchecked_t;
+#endif
 #endif
 
 struct list_head {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/uaccess.h linux-3.3.8-pax/include/linux/uaccess.h
--- linux-3.3.8/include/linux/uaccess.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/linux/uaccess.h	2012-05-16 21:21:02.297543446 +0200
@@ -76,11 +76,11 @@ static inline unsigned long __copy_from_
 		long ret;				\
 		mm_segment_t old_fs = get_fs();		\
 							\
-		set_fs(KERNEL_DS);			\
 		pagefault_disable();			\
-		ret = __copy_from_user_inatomic(&(retval), (__force typeof(retval) __user *)(addr), sizeof(retval));		\
-		pagefault_enable();			\
+		set_fs(KERNEL_DS);			\
+		ret = __copy_from_user_inatomic(&(retval), (typeof(retval) __force_user *)(addr), sizeof(retval));		\
 		set_fs(old_fs);				\
+		pagefault_enable();			\
 		ret;					\
 	})
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/unaligned/access_ok.h linux-3.3.8-pax/include/linux/unaligned/access_ok.h
--- linux-3.3.8/include/linux/unaligned/access_ok.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/linux/unaligned/access_ok.h	2012-03-19 10:43:44.452034627 +0100
@@ -6,32 +6,32 @@
 
 static inline u16 get_unaligned_le16(const void *p)
 {
-	return le16_to_cpup((__le16 *)p);
+	return le16_to_cpup((const __le16 *)p);
 }
 
 static inline u32 get_unaligned_le32(const void *p)
 {
-	return le32_to_cpup((__le32 *)p);
+	return le32_to_cpup((const __le32 *)p);
 }
 
 static inline u64 get_unaligned_le64(const void *p)
 {
-	return le64_to_cpup((__le64 *)p);
+	return le64_to_cpup((const __le64 *)p);
 }
 
 static inline u16 get_unaligned_be16(const void *p)
 {
-	return be16_to_cpup((__be16 *)p);
+	return be16_to_cpup((const __be16 *)p);
 }
 
 static inline u32 get_unaligned_be32(const void *p)
 {
-	return be32_to_cpup((__be32 *)p);
+	return be32_to_cpup((const __be32 *)p);
 }
 
 static inline u64 get_unaligned_be64(const void *p)
 {
-	return be64_to_cpup((__be64 *)p);
+	return be64_to_cpup((const __be64 *)p);
 }
 
 static inline void put_unaligned_le16(u16 val, void *p)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/usb/renesas_usbhs.h linux-3.3.8-pax/include/linux/usb/renesas_usbhs.h
--- linux-3.3.8/include/linux/usb/renesas_usbhs.h	2012-03-19 10:39:11.380049207 +0100
+++ linux-3.3.8-pax/include/linux/usb/renesas_usbhs.h	2012-03-19 10:43:44.456034626 +0100
@@ -39,7 +39,7 @@ enum {
  */
 struct renesas_usbhs_driver_callback {
 	int (*notify_hotplug)(struct platform_device *pdev);
-};
+} __no_const;
 
 /*
  * callback functions for platform
@@ -97,7 +97,7 @@ struct renesas_usbhs_platform_callback {
 	 * VBUS control is needed for Host
 	 */
 	int (*set_vbus)(struct platform_device *pdev, int enable);
-};
+} __no_const;
 
 /*
  * parameters for renesas usbhs
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/vermagic.h linux-3.3.8-pax/include/linux/vermagic.h
--- linux-3.3.8/include/linux/vermagic.h	2012-01-08 19:48:27.795470941 +0100
+++ linux-3.3.8-pax/include/linux/vermagic.h	2012-03-19 10:43:44.456034626 +0100
@@ -25,9 +25,28 @@
 #define MODULE_ARCH_VERMAGIC ""
 #endif
 
+#ifdef CONFIG_PAX_REFCOUNT
+#define MODULE_PAX_REFCOUNT "REFCOUNT "
+#else
+#define MODULE_PAX_REFCOUNT ""
+#endif
+
+#ifdef CONSTIFY_PLUGIN
+#define MODULE_CONSTIFY_PLUGIN "CONSTIFY_PLUGIN "
+#else
+#define MODULE_CONSTIFY_PLUGIN ""
+#endif
+
+#ifdef STACKLEAK_PLUGIN
+#define MODULE_STACKLEAK_PLUGIN "STACKLEAK_PLUGIN "
+#else
+#define MODULE_STACKLEAK_PLUGIN ""
+#endif
+
 #define VERMAGIC_STRING 						\
 	UTS_RELEASE " "							\
 	MODULE_VERMAGIC_SMP MODULE_VERMAGIC_PREEMPT 			\
 	MODULE_VERMAGIC_MODULE_UNLOAD MODULE_VERMAGIC_MODVERSIONS	\
-	MODULE_ARCH_VERMAGIC
+	MODULE_ARCH_VERMAGIC						\
+	MODULE_PAX_REFCOUNT MODULE_CONSTIFY_PLUGIN MODULE_STACKLEAK_PLUGIN
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/vmalloc.h linux-3.3.8-pax/include/linux/vmalloc.h
--- linux-3.3.8/include/linux/vmalloc.h	2012-03-19 10:39:11.388049209 +0100
+++ linux-3.3.8-pax/include/linux/vmalloc.h	2012-05-16 21:21:02.301543446 +0200
@@ -14,6 +14,11 @@ struct vm_area_struct;		/* vma defining
 #define VM_USERMAP	0x00000008	/* suitable for remap_vmalloc_range */
 #define VM_VPAGES	0x00000010	/* buffer for pages was vmalloc'ed */
 #define VM_UNLIST	0x00000020	/* vm_struct is not listed in vmlist */
+
+#if defined(CONFIG_MODULES) && defined(CONFIG_X86) && defined(CONFIG_PAX_KERNEXEC)
+#define VM_KERNEXEC	0x00000040	/* allocate from executable kernel memory range */
+#endif
+
 /* bits [20..32] reserved for arch specific ioremap internals */
 
 /*
@@ -62,7 +67,7 @@ extern void *vmalloc_32_user(unsigned lo
 extern void *__vmalloc(unsigned long size, gfp_t gfp_mask, pgprot_t prot);
 extern void *__vmalloc_node_range(unsigned long size, unsigned long align,
 			unsigned long start, unsigned long end, gfp_t gfp_mask,
-			pgprot_t prot, int node, void *caller);
+			pgprot_t prot, int node, void *caller) __size_overflow(1);
 extern void vfree(const void *addr);
 
 extern void *vmap(struct page **pages, unsigned int count,
@@ -123,8 +128,8 @@ extern struct vm_struct *alloc_vm_area(s
 extern void free_vm_area(struct vm_struct *area);
 
 /* for /dev/kmem */
-extern long vread(char *buf, char *addr, unsigned long count);
-extern long vwrite(char *buf, char *addr, unsigned long count);
+extern long vread(char *buf, char *addr, unsigned long count) __size_overflow(3);
+extern long vwrite(char *buf, char *addr, unsigned long count) __size_overflow(3);
 
 /*
  *	Internals.  Dont't use..
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/vmstat.h linux-3.3.8-pax/include/linux/vmstat.h
--- linux-3.3.8/include/linux/vmstat.h	2011-10-24 12:48:41.579090956 +0200
+++ linux-3.3.8-pax/include/linux/vmstat.h	2012-03-19 10:43:44.456034626 +0100
@@ -87,18 +87,18 @@ static inline void vm_events_fold_cpu(in
 /*
  * Zone based page accounting with per cpu differentials.
  */
-extern atomic_long_t vm_stat[NR_VM_ZONE_STAT_ITEMS];
+extern atomic_long_unchecked_t vm_stat[NR_VM_ZONE_STAT_ITEMS];
 
 static inline void zone_page_state_add(long x, struct zone *zone,
 				 enum zone_stat_item item)
 {
-	atomic_long_add(x, &zone->vm_stat[item]);
-	atomic_long_add(x, &vm_stat[item]);
+	atomic_long_add_unchecked(x, &zone->vm_stat[item]);
+	atomic_long_add_unchecked(x, &vm_stat[item]);
 }
 
 static inline unsigned long global_page_state(enum zone_stat_item item)
 {
-	long x = atomic_long_read(&vm_stat[item]);
+	long x = atomic_long_read_unchecked(&vm_stat[item]);
 #ifdef CONFIG_SMP
 	if (x < 0)
 		x = 0;
@@ -109,7 +109,7 @@ static inline unsigned long global_page_
 static inline unsigned long zone_page_state(struct zone *zone,
 					enum zone_stat_item item)
 {
-	long x = atomic_long_read(&zone->vm_stat[item]);
+	long x = atomic_long_read_unchecked(&zone->vm_stat[item]);
 #ifdef CONFIG_SMP
 	if (x < 0)
 		x = 0;
@@ -126,7 +126,7 @@ static inline unsigned long zone_page_st
 static inline unsigned long zone_page_state_snapshot(struct zone *zone,
 					enum zone_stat_item item)
 {
-	long x = atomic_long_read(&zone->vm_stat[item]);
+	long x = atomic_long_read_unchecked(&zone->vm_stat[item]);
 
 #ifdef CONFIG_SMP
 	int cpu;
@@ -221,8 +221,8 @@ static inline void __mod_zone_page_state
 
 static inline void __inc_zone_state(struct zone *zone, enum zone_stat_item item)
 {
-	atomic_long_inc(&zone->vm_stat[item]);
-	atomic_long_inc(&vm_stat[item]);
+	atomic_long_inc_unchecked(&zone->vm_stat[item]);
+	atomic_long_inc_unchecked(&vm_stat[item]);
 }
 
 static inline void __inc_zone_page_state(struct page *page,
@@ -233,8 +233,8 @@ static inline void __inc_zone_page_state
 
 static inline void __dec_zone_state(struct zone *zone, enum zone_stat_item item)
 {
-	atomic_long_dec(&zone->vm_stat[item]);
-	atomic_long_dec(&vm_stat[item]);
+	atomic_long_dec_unchecked(&zone->vm_stat[item]);
+	atomic_long_dec_unchecked(&vm_stat[item]);
 }
 
 static inline void __dec_zone_page_state(struct page *page,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/linux/xattr.h linux-3.3.8-pax/include/linux/xattr.h
--- linux-3.3.8/include/linux/xattr.h	2012-01-08 19:48:27.851470938 +0100
+++ linux-3.3.8-pax/include/linux/xattr.h	2012-03-19 10:43:44.456034626 +0100
@@ -57,6 +57,11 @@
 #define XATTR_POSIX_ACL_DEFAULT  "posix_acl_default"
 #define XATTR_NAME_POSIX_ACL_DEFAULT XATTR_SYSTEM_PREFIX XATTR_POSIX_ACL_DEFAULT
 
+/* User namespace */
+#define XATTR_PAX_PREFIX XATTR_USER_PREFIX "pax."
+#define XATTR_PAX_FLAGS_SUFFIX "flags"
+#define XATTR_NAME_PAX_FLAGS XATTR_PAX_PREFIX XATTR_PAX_FLAGS_SUFFIX
+
 #ifdef  __KERNEL__
 
 #include <linux/types.h>
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/media/saa7146_vv.h linux-3.3.8-pax/include/media/saa7146_vv.h
--- linux-3.3.8/include/media/saa7146_vv.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/media/saa7146_vv.h	2012-03-19 10:43:44.460034625 +0100
@@ -163,7 +163,7 @@ struct saa7146_ext_vv
 	int (*std_callback)(struct saa7146_dev*, struct saa7146_standard *);
 
 	/* the extension can override this */
-	struct v4l2_ioctl_ops ops;
+	v4l2_ioctl_ops_no_const ops;
 	/* pointer to the saa7146 core ops */
 	const struct v4l2_ioctl_ops *core_ops;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/media/v4l2-dev.h linux-3.3.8-pax/include/media/v4l2-dev.h
--- linux-3.3.8/include/media/v4l2-dev.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/media/v4l2-dev.h	2012-03-19 10:43:44.460034625 +0100
@@ -56,7 +56,7 @@ int v4l2_prio_check(struct v4l2_prio_sta
 
 
 struct v4l2_file_operations {
-	struct module *owner;
+	struct module * const owner;
 	ssize_t (*read) (struct file *, char __user *, size_t, loff_t *);
 	ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *);
 	unsigned int (*poll) (struct file *, struct poll_table_struct *);
@@ -68,6 +68,7 @@ struct v4l2_file_operations {
 	int (*open) (struct file *);
 	int (*release) (struct file *);
 };
+typedef struct v4l2_file_operations __no_const v4l2_file_operations_no_const;
 
 /*
  * Newer version of video_device, handled by videodev2.c
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/media/v4l2-ioctl.h linux-3.3.8-pax/include/media/v4l2-ioctl.h
--- linux-3.3.8/include/media/v4l2-ioctl.h	2012-03-19 10:39:11.404049203 +0100
+++ linux-3.3.8-pax/include/media/v4l2-ioctl.h	2012-03-19 10:43:44.460034625 +0100
@@ -278,7 +278,7 @@ struct v4l2_ioctl_ops {
 	long (*vidioc_default)	       (struct file *file, void *fh,
 					bool valid_prio, int cmd, void *arg);
 };
-
+typedef struct v4l2_ioctl_ops __no_const v4l2_ioctl_ops_no_const;
 
 /* v4l debugging and diagnostics */
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/net/caif/caif_hsi.h linux-3.3.8-pax/include/net/caif/caif_hsi.h
--- linux-3.3.8/include/net/caif/caif_hsi.h	2012-01-08 19:48:27.967470932 +0100
+++ linux-3.3.8-pax/include/net/caif/caif_hsi.h	2012-03-19 10:43:44.460034625 +0100
@@ -98,7 +98,7 @@ struct cfhsi_drv {
 	void (*rx_done_cb) (struct cfhsi_drv *drv);
 	void (*wake_up_cb) (struct cfhsi_drv *drv);
 	void (*wake_down_cb) (struct cfhsi_drv *drv);
-};
+} __no_const;
 
 /* Structure implemented by HSI device. */
 struct cfhsi_dev {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/net/caif/cfctrl.h linux-3.3.8-pax/include/net/caif/cfctrl.h
--- linux-3.3.8/include/net/caif/cfctrl.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/net/caif/cfctrl.h	2012-03-19 10:43:44.460034625 +0100
@@ -52,7 +52,7 @@ struct cfctrl_rsp {
 	void (*radioset_rsp)(void);
 	void (*reject_rsp)(struct cflayer *layer, u8 linkid,
 				struct cflayer *client_layer);
-};
+} __no_const;
 
 /* Link Setup Parameters for CAIF-Links. */
 struct cfctrl_link_param {
@@ -101,8 +101,8 @@ struct cfctrl_request_info {
 struct cfctrl {
 	struct cfsrvl serv;
 	struct cfctrl_rsp res;
-	atomic_t req_seq_no;
-	atomic_t rsp_seq_no;
+	atomic_unchecked_t req_seq_no;
+	atomic_unchecked_t rsp_seq_no;
 	struct list_head list;
 	/* Protects from simultaneous access to first_req list */
 	spinlock_t info_list_lock;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/net/flow.h linux-3.3.8-pax/include/net/flow.h
--- linux-3.3.8/include/net/flow.h	2012-03-19 10:39:11.432049206 +0100
+++ linux-3.3.8-pax/include/net/flow.h	2012-03-19 10:43:44.464034625 +0100
@@ -221,6 +221,6 @@ extern struct flow_cache_object *flow_ca
 
 extern void flow_cache_flush(void);
 extern void flow_cache_flush_deferred(void);
-extern atomic_t flow_cache_genid;
+extern atomic_unchecked_t flow_cache_genid;
 
 #endif
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/net/inetpeer.h linux-3.3.8-pax/include/net/inetpeer.h
--- linux-3.3.8/include/net/inetpeer.h	2012-03-19 10:39:11.440049201 +0100
+++ linux-3.3.8-pax/include/net/inetpeer.h	2012-03-19 10:43:44.464034625 +0100
@@ -48,8 +48,8 @@ struct inet_peer {
 	 */
 	union {
 		struct {
-			atomic_t			rid;		/* Frag reception counter */
-			atomic_t			ip_id_count;	/* IP ID for the next packet */
+			atomic_unchecked_t		rid;		/* Frag reception counter */
+			atomic_unchecked_t		ip_id_count;	/* IP ID for the next packet */
 			__u32				tcp_ts;
 			__u32				tcp_ts_stamp;
 		};
@@ -115,11 +115,11 @@ static inline int inet_getid(struct inet
 	more++;
 	inet_peer_refcheck(p);
 	do {
-		old = atomic_read(&p->ip_id_count);
+		old = atomic_read_unchecked(&p->ip_id_count);
 		new = old + more;
 		if (!new)
 			new = 1;
-	} while (atomic_cmpxchg(&p->ip_id_count, old, new) != old);
+	} while (atomic_cmpxchg_unchecked(&p->ip_id_count, old, new) != old);
 	return new;
 }
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/net/ip_fib.h linux-3.3.8-pax/include/net/ip_fib.h
--- linux-3.3.8/include/net/ip_fib.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/net/ip_fib.h	2012-03-19 10:43:44.464034625 +0100
@@ -146,7 +146,7 @@ extern __be32 fib_info_update_nh_saddr(s
 
 #define FIB_RES_SADDR(net, res)				\
 	((FIB_RES_NH(res).nh_saddr_genid ==		\
-	  atomic_read(&(net)->ipv4.dev_addr_genid)) ?	\
+	  atomic_read_unchecked(&(net)->ipv4.dev_addr_genid)) ?	\
 	 FIB_RES_NH(res).nh_saddr :			\
 	 fib_info_update_nh_saddr((net), &FIB_RES_NH(res)))
 #define FIB_RES_GW(res)			(FIB_RES_NH(res).nh_gw)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/net/ip_vs.h linux-3.3.8-pax/include/net/ip_vs.h
--- linux-3.3.8/include/net/ip_vs.h	2012-03-19 10:39:11.444049200 +0100
+++ linux-3.3.8-pax/include/net/ip_vs.h	2012-03-19 10:43:44.464034625 +0100
@@ -509,7 +509,7 @@ struct ip_vs_conn {
 	struct ip_vs_conn       *control;       /* Master control connection */
 	atomic_t                n_control;      /* Number of controlled ones */
 	struct ip_vs_dest       *dest;          /* real server */
-	atomic_t                in_pkts;        /* incoming packet counter */
+	atomic_unchecked_t      in_pkts;        /* incoming packet counter */
 
 	/* packet transmitter for different forwarding methods.  If it
 	   mangles the packet, it must return NF_DROP or better NF_STOLEN,
@@ -647,7 +647,7 @@ struct ip_vs_dest {
 	__be16			port;		/* port number of the server */
 	union nf_inet_addr	addr;		/* IP address of the server */
 	volatile unsigned	flags;		/* dest status flags */
-	atomic_t		conn_flags;	/* flags to copy to conn */
+	atomic_unchecked_t	conn_flags;	/* flags to copy to conn */
 	atomic_t		weight;		/* server weight */
 
 	atomic_t		refcnt;		/* reference counter */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/net/irda/ircomm_core.h linux-3.3.8-pax/include/net/irda/ircomm_core.h
--- linux-3.3.8/include/net/irda/ircomm_core.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/net/irda/ircomm_core.h	2012-03-19 10:43:44.468034626 +0100
@@ -51,7 +51,7 @@ typedef struct {
 	int (*connect_response)(struct ircomm_cb *, struct sk_buff *);
 	int (*disconnect_request)(struct ircomm_cb *, struct sk_buff *, 
 				  struct ircomm_info *);	
-} call_t;
+} __no_const call_t;
 
 struct ircomm_cb {
 	irda_queue_t queue;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/net/irda/ircomm_tty.h linux-3.3.8-pax/include/net/irda/ircomm_tty.h
--- linux-3.3.8/include/net/irda/ircomm_tty.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/net/irda/ircomm_tty.h	2012-03-19 10:43:44.468034626 +0100
@@ -35,6 +35,7 @@
 #include <linux/termios.h>
 #include <linux/timer.h>
 #include <linux/tty.h>		/* struct tty_struct */
+#include <asm/local.h>
 
 #include <net/irda/irias_object.h>
 #include <net/irda/ircomm_core.h>
@@ -105,8 +106,8 @@ struct ircomm_tty_cb {
         unsigned short    close_delay;
         unsigned short    closing_wait; /* time to wait before closing */
 
-	int  open_count;
-	int  blocked_open;	/* # of blocked opens */
+	local_t open_count;
+	local_t blocked_open;	/* # of blocked opens */
 
 	/* Protect concurent access to :
 	 *	o self->open_count
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/net/iucv/af_iucv.h linux-3.3.8-pax/include/net/iucv/af_iucv.h
--- linux-3.3.8/include/net/iucv/af_iucv.h	2012-03-19 10:39:11.444049200 +0100
+++ linux-3.3.8-pax/include/net/iucv/af_iucv.h	2012-03-19 10:43:44.468034626 +0100
@@ -138,7 +138,7 @@ struct iucv_sock {
 struct iucv_sock_list {
 	struct hlist_head head;
 	rwlock_t	  lock;
-	atomic_t	  autobind_name;
+	atomic_unchecked_t autobind_name;
 };
 
 unsigned int iucv_sock_poll(struct file *file, struct socket *sock,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/net/neighbour.h linux-3.3.8-pax/include/net/neighbour.h
--- linux-3.3.8/include/net/neighbour.h	2012-03-19 10:39:11.448049201 +0100
+++ linux-3.3.8-pax/include/net/neighbour.h	2012-03-19 10:43:44.468034626 +0100
@@ -123,7 +123,7 @@ struct neigh_ops {
 	void			(*error_report)(struct neighbour *, struct sk_buff *);
 	int			(*output)(struct neighbour *, struct sk_buff *);
 	int			(*connected_output)(struct neighbour *, struct sk_buff *);
-};
+} __do_const;
 
 struct pneigh_entry {
 	struct pneigh_entry	*next;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/net/netlink.h linux-3.3.8-pax/include/net/netlink.h
--- linux-3.3.8/include/net/netlink.h	2012-01-08 19:48:28.059470927 +0100
+++ linux-3.3.8-pax/include/net/netlink.h	2012-03-19 10:43:44.468034626 +0100
@@ -569,7 +569,7 @@ static inline void *nlmsg_get_pos(struct
 static inline void nlmsg_trim(struct sk_buff *skb, const void *mark)
 {
 	if (mark)
-		skb_trim(skb, (unsigned char *) mark - skb->data);
+		skb_trim(skb, (const unsigned char *) mark - skb->data);
 }
 
 /**
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/net/netns/ipv4.h linux-3.3.8-pax/include/net/netns/ipv4.h
--- linux-3.3.8/include/net/netns/ipv4.h	2012-03-19 10:39:11.456049205 +0100
+++ linux-3.3.8-pax/include/net/netns/ipv4.h	2012-03-19 10:43:44.472034627 +0100
@@ -57,8 +57,8 @@ struct netns_ipv4 {
 	unsigned int sysctl_ping_group_range[2];
 	long sysctl_tcp_mem[3];
 
-	atomic_t rt_genid;
-	atomic_t dev_addr_genid;
+	atomic_unchecked_t rt_genid;
+	atomic_unchecked_t dev_addr_genid;
 
 #ifdef CONFIG_IP_MROUTE
 #ifndef CONFIG_IP_MROUTE_MULTIPLE_TABLES
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/net/sctp/sctp.h linux-3.3.8-pax/include/net/sctp/sctp.h
--- linux-3.3.8/include/net/sctp/sctp.h	2012-03-19 10:39:11.468049204 +0100
+++ linux-3.3.8-pax/include/net/sctp/sctp.h	2012-03-19 10:43:44.472034627 +0100
@@ -318,9 +318,9 @@ do {									\
 
 #else	/* SCTP_DEBUG */
 
-#define SCTP_DEBUG_PRINTK(whatever...)
-#define SCTP_DEBUG_PRINTK_CONT(fmt, args...)
-#define SCTP_DEBUG_PRINTK_IPADDR(whatever...)
+#define SCTP_DEBUG_PRINTK(whatever...) do {} while (0)
+#define SCTP_DEBUG_PRINTK_CONT(fmt, args...) do {} while (0)
+#define SCTP_DEBUG_PRINTK_IPADDR(whatever...) do {} while (0)
 #define SCTP_ENABLE_DEBUG
 #define SCTP_DISABLE_DEBUG
 #define SCTP_ASSERT(expr, str, func)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/net/sock.h linux-3.3.8-pax/include/net/sock.h
--- linux-3.3.8/include/net/sock.h	2012-03-19 10:39:11.472049201 +0100
+++ linux-3.3.8-pax/include/net/sock.h	2012-03-19 10:43:44.472034627 +0100
@@ -299,7 +299,7 @@ struct sock {
 #ifdef CONFIG_RPS
 	__u32			sk_rxhash;
 #endif
-	atomic_t		sk_drops;
+	atomic_unchecked_t	sk_drops;
 	int			sk_rcvbuf;
 
 	struct sk_filter __rcu	*sk_filter;
@@ -1660,7 +1660,7 @@ static inline void sk_nocaps_add(struct
 }
 
 static inline int skb_do_copy_data_nocache(struct sock *sk, struct sk_buff *skb,
-					   char __user *from, char *to,
+					   char __user *from, unsigned char *to,
 					   int copy, int offset)
 {
 	if (skb->ip_summed == CHECKSUM_NONE) {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/net/tcp.h linux-3.3.8-pax/include/net/tcp.h
--- linux-3.3.8/include/net/tcp.h	2012-03-19 10:39:11.476049199 +0100
+++ linux-3.3.8-pax/include/net/tcp.h	2012-03-19 10:43:44.476034627 +0100
@@ -1426,7 +1426,7 @@ struct tcp_seq_afinfo {
 	char				*name;
 	sa_family_t			family;
 	const struct file_operations	*seq_fops;
-	struct seq_operations		seq_ops;
+	seq_operations_no_const		seq_ops;
 };
 
 struct tcp_iter_state {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/net/udp.h linux-3.3.8-pax/include/net/udp.h
--- linux-3.3.8/include/net/udp.h	2012-03-19 10:39:11.476049199 +0100
+++ linux-3.3.8-pax/include/net/udp.h	2012-03-19 10:43:44.476034627 +0100
@@ -243,7 +243,7 @@ struct udp_seq_afinfo {
 	sa_family_t			family;
 	struct udp_table		*udp_table;
 	const struct file_operations	*seq_fops;
-	struct seq_operations		seq_ops;
+	seq_operations_no_const		seq_ops;
 };
 
 struct udp_iter_state {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/net/xfrm.h linux-3.3.8-pax/include/net/xfrm.h
--- linux-3.3.8/include/net/xfrm.h	2012-03-19 10:39:11.476049199 +0100
+++ linux-3.3.8-pax/include/net/xfrm.h	2012-03-19 10:43:44.476034627 +0100
@@ -505,7 +505,7 @@ struct xfrm_policy {
 	struct timer_list	timer;
 
 	struct flow_cache_object flo;
-	atomic_t		genid;
+	atomic_unchecked_t	genid;
 	u32			priority;
 	u32			index;
 	struct xfrm_mark	mark;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/rdma/iw_cm.h linux-3.3.8-pax/include/rdma/iw_cm.h
--- linux-3.3.8/include/rdma/iw_cm.h	2012-01-08 19:48:28.211470919 +0100
+++ linux-3.3.8-pax/include/rdma/iw_cm.h	2012-03-19 10:43:44.476034627 +0100
@@ -122,7 +122,7 @@ struct iw_cm_verbs {
 					 int backlog);
 
 	int		(*destroy_listen)(struct iw_cm_id *cm_id);
-};
+} __no_const;
 
 /**
  * iw_create_cm_id - Create an IW CM identifier.
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/scsi/libfc.h linux-3.3.8-pax/include/scsi/libfc.h
--- linux-3.3.8/include/scsi/libfc.h	2012-03-19 10:39:11.480049198 +0100
+++ linux-3.3.8-pax/include/scsi/libfc.h	2012-03-19 10:43:44.480034627 +0100
@@ -748,6 +748,7 @@ struct libfc_function_template {
 	 */
 	void (*disc_stop_final) (struct fc_lport *);
 };
+typedef struct libfc_function_template __no_const libfc_function_template_no_const;
 
 /**
  * struct fc_disc - Discovery context
@@ -851,7 +852,7 @@ struct fc_lport {
 	struct fc_vport		       *vport;
 
 	/* Operational Information */
-	struct libfc_function_template tt;
+	libfc_function_template_no_const tt;
 	u8			       link_up;
 	u8			       qfull;
 	enum fc_lport_state	       state;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/scsi/scsi_device.h linux-3.3.8-pax/include/scsi/scsi_device.h
--- linux-3.3.8/include/scsi/scsi_device.h	2012-03-19 10:39:11.480049198 +0100
+++ linux-3.3.8-pax/include/scsi/scsi_device.h	2012-03-19 10:43:44.480034627 +0100
@@ -161,9 +161,9 @@ struct scsi_device {
 	unsigned int max_device_blocked; /* what device_blocked counts down from  */
 #define SCSI_DEFAULT_DEVICE_BLOCKED	3
 
-	atomic_t iorequest_cnt;
-	atomic_t iodone_cnt;
-	atomic_t ioerr_cnt;
+	atomic_unchecked_t iorequest_cnt;
+	atomic_unchecked_t iodone_cnt;
+	atomic_unchecked_t ioerr_cnt;
 
 	struct device		sdev_gendev,
 				sdev_dev;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/scsi/scsi_transport_fc.h linux-3.3.8-pax/include/scsi/scsi_transport_fc.h
--- linux-3.3.8/include/scsi/scsi_transport_fc.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/scsi/scsi_transport_fc.h	2012-03-19 10:43:44.480034627 +0100
@@ -711,7 +711,7 @@ struct fc_function_template {
 	unsigned long	show_host_system_hostname:1;
 
 	unsigned long	disable_target_scan:1;
-};
+} __do_const;
 
 
 /**
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/sound/ak4xxx-adda.h linux-3.3.8-pax/include/sound/ak4xxx-adda.h
--- linux-3.3.8/include/sound/ak4xxx-adda.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/sound/ak4xxx-adda.h	2012-03-19 10:43:44.484034625 +0100
@@ -35,7 +35,7 @@ struct snd_ak4xxx_ops {
 	void (*write)(struct snd_akm4xxx *ak, int chip, unsigned char reg,
 		      unsigned char val);
 	void (*set_rate_val)(struct snd_akm4xxx *ak, unsigned int rate);
-};
+} __no_const;
 
 #define AK4XXX_IMAGE_SIZE	(AK4XXX_MAX_CHIPS * 16)	/* 64 bytes */
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/sound/hwdep.h linux-3.3.8-pax/include/sound/hwdep.h
--- linux-3.3.8/include/sound/hwdep.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/sound/hwdep.h	2012-03-19 10:43:44.484034625 +0100
@@ -49,7 +49,7 @@ struct snd_hwdep_ops {
 			  struct snd_hwdep_dsp_status *status);
 	int (*dsp_load)(struct snd_hwdep *hw,
 			struct snd_hwdep_dsp_image *image);
-};
+} __no_const;
 
 struct snd_hwdep {
 	struct snd_card *card;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/sound/info.h linux-3.3.8-pax/include/sound/info.h
--- linux-3.3.8/include/sound/info.h	2012-03-19 10:39:11.748049215 +0100
+++ linux-3.3.8-pax/include/sound/info.h	2012-03-19 10:43:44.484034625 +0100
@@ -44,7 +44,7 @@ struct snd_info_entry_text {
 		     struct snd_info_buffer *buffer);
 	void (*write)(struct snd_info_entry *entry,
 		      struct snd_info_buffer *buffer);
-};
+} __no_const;
 
 struct snd_info_entry_ops {
 	int (*open)(struct snd_info_entry *entry,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/sound/pcm.h linux-3.3.8-pax/include/sound/pcm.h
--- linux-3.3.8/include/sound/pcm.h	2012-01-08 19:48:28.423470908 +0100
+++ linux-3.3.8-pax/include/sound/pcm.h	2012-03-19 10:43:44.484034625 +0100
@@ -81,6 +81,7 @@ struct snd_pcm_ops {
 	int (*mmap)(struct snd_pcm_substream *substream, struct vm_area_struct *vma);
 	int (*ack)(struct snd_pcm_substream *substream);
 };
+typedef struct snd_pcm_ops __no_const snd_pcm_ops_no_const;
 
 /*
  *
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/sound/sb16_csp.h linux-3.3.8-pax/include/sound/sb16_csp.h
--- linux-3.3.8/include/sound/sb16_csp.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/sound/sb16_csp.h	2012-03-19 10:43:44.484034625 +0100
@@ -146,7 +146,7 @@ struct snd_sb_csp_ops {
 	int (*csp_start) (struct snd_sb_csp * p, int sample_width, int channels);
 	int (*csp_stop) (struct snd_sb_csp * p);
 	int (*csp_qsound_transfer) (struct snd_sb_csp * p);
-};
+} __no_const;
 
 /*
  * CSP private data
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/sound/soc.h linux-3.3.8-pax/include/sound/soc.h
--- linux-3.3.8/include/sound/soc.h	2012-03-19 10:39:11.752049197 +0100
+++ linux-3.3.8-pax/include/sound/soc.h	2012-03-19 10:43:44.488034623 +0100
@@ -682,7 +682,7 @@ struct snd_soc_platform_driver {
 	/* platform IO - used for platform DAPM */
 	unsigned int (*read)(struct snd_soc_platform *, unsigned int);
 	int (*write)(struct snd_soc_platform *, unsigned int, unsigned int);
-};
+} __do_const;
 
 struct snd_soc_platform {
 	const char *name;
@@ -852,7 +852,7 @@ struct snd_soc_pcm_runtime {
 	struct snd_soc_dai_link *dai_link;
 	struct mutex pcm_mutex;
 	enum snd_soc_pcm_subclass pcm_subclass;
-	struct snd_pcm_ops ops;
+	snd_pcm_ops_no_const ops;
 
 	unsigned int complete:1;
 	unsigned int dev_registered:1;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/sound/ymfpci.h linux-3.3.8-pax/include/sound/ymfpci.h
--- linux-3.3.8/include/sound/ymfpci.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/sound/ymfpci.h	2012-03-19 10:43:44.488034623 +0100
@@ -358,7 +358,7 @@ struct snd_ymfpci {
 	spinlock_t reg_lock;
 	spinlock_t voice_lock;
 	wait_queue_head_t interrupt_sleep;
-	atomic_t interrupt_sleep_count;
+	atomic_unchecked_t interrupt_sleep_count;
 	struct snd_info_entry *proc_entry;
 	const struct firmware *dsp_microcode;
 	const struct firmware *controller_microcode;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/target/target_core_base.h linux-3.3.8-pax/include/target/target_core_base.h
--- linux-3.3.8/include/target/target_core_base.h	2012-04-03 22:02:50.482110031 +0200
+++ linux-3.3.8-pax/include/target/target_core_base.h	2012-04-03 22:03:07.070110931 +0200
@@ -443,7 +443,7 @@ struct t10_reservation_ops {
 	int (*t10_seq_non_holder)(struct se_cmd *, unsigned char *, u32);
 	int (*t10_pr_register)(struct se_cmd *);
 	int (*t10_pr_clear)(struct se_cmd *);
-};
+} __no_const;
 
 struct t10_reservation {
 	/* Reservation effects all target ports */
@@ -561,8 +561,8 @@ struct se_cmd {
 	atomic_t		t_se_count;
 	atomic_t		t_task_cdbs_left;
 	atomic_t		t_task_cdbs_ex_left;
-	atomic_t		t_task_cdbs_sent;
-	atomic_t		t_transport_aborted;
+	atomic_unchecked_t	t_task_cdbs_sent;
+	atomic_unchecked_t	t_transport_aborted;
 	atomic_t		t_transport_active;
 	atomic_t		t_transport_complete;
 	atomic_t		t_transport_queue_active;
@@ -799,7 +799,7 @@ struct se_device {
 	spinlock_t		stats_lock;
 	/* Active commands on this virtual SE device */
 	atomic_t		simple_cmds;
-	atomic_t		dev_ordered_id;
+	atomic_unchecked_t	dev_ordered_id;
 	atomic_t		execute_tasks;
 	atomic_t		dev_ordered_sync;
 	atomic_t		dev_qf_count;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/trace/events/irq.h linux-3.3.8-pax/include/trace/events/irq.h
--- linux-3.3.8/include/trace/events/irq.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/trace/events/irq.h	2012-03-19 10:43:44.488034623 +0100
@@ -36,7 +36,7 @@ struct softirq_action;
  */
 TRACE_EVENT(irq_handler_entry,
 
-	TP_PROTO(int irq, struct irqaction *action),
+	TP_PROTO(int irq, const struct irqaction *action),
 
 	TP_ARGS(irq, action),
 
@@ -66,7 +66,7 @@ TRACE_EVENT(irq_handler_entry,
  */
 TRACE_EVENT(irq_handler_exit,
 
-	TP_PROTO(int irq, struct irqaction *action, int ret),
+	TP_PROTO(int irq, const struct irqaction *action, int ret),
 
 	TP_ARGS(irq, action, ret),
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/video/udlfb.h linux-3.3.8-pax/include/video/udlfb.h
--- linux-3.3.8/include/video/udlfb.h	2012-06-11 19:36:40.564445828 +0200
+++ linux-3.3.8-pax/include/video/udlfb.h	2012-06-11 19:36:46.600446127 +0200
@@ -53,10 +53,10 @@ struct dlfb_data {
 	u32 pseudo_palette[256];
 	int blank_mode; /*one of FB_BLANK_ */
 	/* blit-only rendering path metrics, exposed through sysfs */
-	atomic_t bytes_rendered; /* raw pixel-bytes driver asked to render */
-	atomic_t bytes_identical; /* saved effort with backbuffer comparison */
-	atomic_t bytes_sent; /* to usb, after compression including overhead */
-	atomic_t cpu_kcycles_used; /* transpired during pixel processing */
+	atomic_unchecked_t bytes_rendered; /* raw pixel-bytes driver asked to render */
+	atomic_unchecked_t bytes_identical; /* saved effort with backbuffer comparison */
+	atomic_unchecked_t bytes_sent; /* to usb, after compression including overhead */
+	atomic_unchecked_t cpu_kcycles_used; /* transpired during pixel processing */
 };
 
 #define NR_USB_REQUEST_I2C_SUB_IO 0x02
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/include/video/uvesafb.h linux-3.3.8-pax/include/video/uvesafb.h
--- linux-3.3.8/include/video/uvesafb.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/include/video/uvesafb.h	2012-03-19 10:43:44.492034623 +0100
@@ -177,6 +177,7 @@ struct uvesafb_par {
 	u8 ypan;			/* 0 - nothing, 1 - ypan, 2 - ywrap */
 	u8 pmi_setpal;			/* PMI for palette changes */
 	u16 *pmi_base;			/* protected mode interface location */
+	u8 *pmi_code;			/* protected mode code location */
 	void *pmi_start;
 	void *pmi_pal;
 	u8 *vbe_state_orig;		/*
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/init/do_mounts.c linux-3.3.8-pax/init/do_mounts.c
--- linux-3.3.8/init/do_mounts.c	2012-05-24 17:32:19.661142875 +0200
+++ linux-3.3.8-pax/init/do_mounts.c	2012-05-24 17:32:27.113142473 +0200
@@ -326,11 +326,11 @@ static void __init get_fs_names(char *pa
 static int __init do_mount_root(char *name, char *fs, int flags, void *data)
 {
 	struct super_block *s;
-	int err = sys_mount(name, "/root", fs, flags, data);
+	int err = sys_mount((char __force_user *)name, (char __force_user *)"/root", (char __force_user *)fs, flags, (void __force_user *)data);
 	if (err)
 		return err;
 
-	sys_chdir((const char __user __force *)"/root");
+	sys_chdir((const char __force_user *)"/root");
 	s = current->fs->pwd.dentry->d_sb;
 	ROOT_DEV = s->s_dev;
 	printk(KERN_INFO
@@ -450,18 +450,18 @@ void __init change_floppy(char *fmt, ...
 	va_start(args, fmt);
 	vsprintf(buf, fmt, args);
 	va_end(args);
-	fd = sys_open("/dev/root", O_RDWR | O_NDELAY, 0);
+	fd = sys_open((char __user *)"/dev/root", O_RDWR | O_NDELAY, 0);
 	if (fd >= 0) {
 		sys_ioctl(fd, FDEJECT, 0);
 		sys_close(fd);
 	}
 	printk(KERN_NOTICE "VFS: Insert %s and press ENTER\n", buf);
-	fd = sys_open("/dev/console", O_RDWR, 0);
+	fd = sys_open((__force const char __user *)"/dev/console", O_RDWR, 0);
 	if (fd >= 0) {
 		sys_ioctl(fd, TCGETS, (long)&termios);
 		termios.c_lflag &= ~ICANON;
 		sys_ioctl(fd, TCSETSF, (long)&termios);
-		sys_read(fd, &c, 1);
+		sys_read(fd, (char __user *)&c, 1);
 		termios.c_lflag |= ICANON;
 		sys_ioctl(fd, TCSETSF, (long)&termios);
 		sys_close(fd);
@@ -555,6 +555,6 @@ void __init prepare_namespace(void)
 	mount_root();
 out:
 	devtmpfs_mount("dev");
-	sys_mount(".", "/", NULL, MS_MOVE, NULL);
-	sys_chroot((const char __user __force *)".");
+	sys_mount((char __force_user *)".", (char __force_user *)"/", NULL, MS_MOVE, NULL);
+	sys_chroot((const char __force_user *)".");
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/init/do_mounts.h linux-3.3.8-pax/init/do_mounts.h
--- linux-3.3.8/init/do_mounts.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/init/do_mounts.h	2012-03-19 10:43:44.492034623 +0100
@@ -15,15 +15,15 @@ extern int root_mountflags;
 
 static inline int create_dev(char *name, dev_t dev)
 {
-	sys_unlink(name);
-	return sys_mknod(name, S_IFBLK|0600, new_encode_dev(dev));
+	sys_unlink((char __force_user *)name);
+	return sys_mknod((char __force_user *)name, S_IFBLK|0600, new_encode_dev(dev));
 }
 
 #if BITS_PER_LONG == 32
 static inline u32 bstat(char *name)
 {
 	struct stat64 stat;
-	if (sys_stat64(name, &stat) != 0)
+	if (sys_stat64((char __force_user *)name, (struct stat64 __force_user *)&stat) != 0)
 		return 0;
 	if (!S_ISBLK(stat.st_mode))
 		return 0;
@@ -35,7 +35,7 @@ static inline u32 bstat(char *name)
 static inline u32 bstat(char *name)
 {
 	struct stat stat;
-	if (sys_newstat(name, &stat) != 0)
+	if (sys_newstat((const char __force_user *)name, (struct stat __force_user *)&stat) != 0)
 		return 0;
 	if (!S_ISBLK(stat.st_mode))
 		return 0;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/init/do_mounts_initrd.c linux-3.3.8-pax/init/do_mounts_initrd.c
--- linux-3.3.8/init/do_mounts_initrd.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/init/do_mounts_initrd.c	2012-03-19 10:43:44.492034623 +0100
@@ -44,13 +44,13 @@ static void __init handle_initrd(void)
 	create_dev("/dev/root.old", Root_RAM0);
 	/* mount initrd on rootfs' /root */
 	mount_block_root("/dev/root.old", root_mountflags & ~MS_RDONLY);
-	sys_mkdir("/old", 0700);
-	root_fd = sys_open("/", 0, 0);
-	old_fd = sys_open("/old", 0, 0);
+	sys_mkdir((const char __force_user *)"/old", 0700);
+	root_fd = sys_open((const char __force_user *)"/", 0, 0);
+	old_fd = sys_open((const char __force_user *)"/old", 0, 0);
 	/* move initrd over / and chdir/chroot in initrd root */
-	sys_chdir("/root");
-	sys_mount(".", "/", NULL, MS_MOVE, NULL);
-	sys_chroot(".");
+	sys_chdir((const char __force_user *)"/root");
+	sys_mount((char __force_user *)".", (char __force_user *)"/", NULL, MS_MOVE, NULL);
+	sys_chroot((const char __force_user *)".");
 
 	/*
 	 * In case that a resume from disk is carried out by linuxrc or one of
@@ -67,15 +67,15 @@ static void __init handle_initrd(void)
 
 	/* move initrd to rootfs' /old */
 	sys_fchdir(old_fd);
-	sys_mount("/", ".", NULL, MS_MOVE, NULL);
+	sys_mount((char __force_user *)"/", (char __force_user *)".", NULL, MS_MOVE, NULL);
 	/* switch root and cwd back to / of rootfs */
 	sys_fchdir(root_fd);
-	sys_chroot(".");
+	sys_chroot((const char __force_user *)".");
 	sys_close(old_fd);
 	sys_close(root_fd);
 
 	if (new_decode_dev(real_root_dev) == Root_RAM0) {
-		sys_chdir("/old");
+		sys_chdir((const char __force_user *)"/old");
 		return;
 	}
 
@@ -83,17 +83,17 @@ static void __init handle_initrd(void)
 	mount_root();
 
 	printk(KERN_NOTICE "Trying to move old root to /initrd ... ");
-	error = sys_mount("/old", "/root/initrd", NULL, MS_MOVE, NULL);
+	error = sys_mount((char __force_user *)"/old", (char __force_user *)"/root/initrd", NULL, MS_MOVE, NULL);
 	if (!error)
 		printk("okay\n");
 	else {
-		int fd = sys_open("/dev/root.old", O_RDWR, 0);
+		int fd = sys_open((const char __force_user *)"/dev/root.old", O_RDWR, 0);
 		if (error == -ENOENT)
 			printk("/initrd does not exist. Ignored.\n");
 		else
 			printk("failed\n");
 		printk(KERN_NOTICE "Unmounting old root\n");
-		sys_umount("/old", MNT_DETACH);
+		sys_umount((char __force_user *)"/old", MNT_DETACH);
 		printk(KERN_NOTICE "Trying to free ramdisk memory ... ");
 		if (fd < 0) {
 			error = fd;
@@ -116,11 +116,11 @@ int __init initrd_load(void)
 		 * mounted in the normal path.
 		 */
 		if (rd_load_image("/initrd.image") && ROOT_DEV != Root_RAM0) {
-			sys_unlink("/initrd.image");
+			sys_unlink((const char __force_user *)"/initrd.image");
 			handle_initrd();
 			return 1;
 		}
 	}
-	sys_unlink("/initrd.image");
+	sys_unlink((const char __force_user *)"/initrd.image");
 	return 0;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/init/do_mounts_md.c linux-3.3.8-pax/init/do_mounts_md.c
--- linux-3.3.8/init/do_mounts_md.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/init/do_mounts_md.c	2012-03-19 10:43:44.496034624 +0100
@@ -170,7 +170,7 @@ static void __init md_setup_drive(void)
 			partitioned ? "_d" : "", minor,
 			md_setup_args[ent].device_names);
 
-		fd = sys_open(name, 0, 0);
+		fd = sys_open((char __force_user *)name, 0, 0);
 		if (fd < 0) {
 			printk(KERN_ERR "md: open failed - cannot start "
 					"array %s\n", name);
@@ -233,7 +233,7 @@ static void __init md_setup_drive(void)
 			 * array without it
 			 */
 			sys_close(fd);
-			fd = sys_open(name, 0, 0);
+			fd = sys_open((char __force_user *)name, 0, 0);
 			sys_ioctl(fd, BLKRRPART, 0);
 		}
 		sys_close(fd);
@@ -283,7 +283,7 @@ static void __init autodetect_raid(void)
 
 	wait_for_device_probe();
 
-	fd = sys_open((const char __user __force *) "/dev/md0", 0, 0);
+	fd = sys_open((const char __force_user *) "/dev/md0", 0, 0);
 	if (fd >= 0) {
 		sys_ioctl(fd, RAID_AUTORUN, raid_autopart);
 		sys_close(fd);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/init/initramfs.c linux-3.3.8-pax/init/initramfs.c
--- linux-3.3.8/init/initramfs.c	2012-03-19 10:39:11.784049196 +0100
+++ linux-3.3.8-pax/init/initramfs.c	2012-03-19 10:43:44.496034624 +0100
@@ -74,7 +74,7 @@ static void __init free_hash(void)
 	}
 }
 
-static long __init do_utime(char __user *filename, time_t mtime)
+static long __init do_utime(__force char __user *filename, time_t mtime)
 {
 	struct timespec t[2];
 
@@ -109,7 +109,7 @@ static void __init dir_utime(void)
 	struct dir_entry *de, *tmp;
 	list_for_each_entry_safe(de, tmp, &dir_list, list) {
 		list_del(&de->list);
-		do_utime(de->name, de->mtime);
+		do_utime((char __force_user *)de->name, de->mtime);
 		kfree(de->name);
 		kfree(de);
 	}
@@ -271,7 +271,7 @@ static int __init maybe_link(void)
 	if (nlink >= 2) {
 		char *old = find_link(major, minor, ino, mode, collected);
 		if (old)
-			return (sys_link(old, collected) < 0) ? -1 : 1;
+			return (sys_link((char __force_user *)old, (char __force_user *)collected) < 0) ? -1 : 1;
 	}
 	return 0;
 }
@@ -280,11 +280,11 @@ static void __init clean_path(char *path
 {
 	struct stat st;
 
-	if (!sys_newlstat(path, &st) && (st.st_mode^mode) & S_IFMT) {
+	if (!sys_newlstat((char __force_user *)path, (struct stat __force_user *)&st) && (st.st_mode^mode) & S_IFMT) {
 		if (S_ISDIR(st.st_mode))
-			sys_rmdir(path);
+			sys_rmdir((char __force_user *)path);
 		else
-			sys_unlink(path);
+			sys_unlink((char __force_user *)path);
 	}
 }
 
@@ -305,7 +305,7 @@ static int __init do_name(void)
 			int openflags = O_WRONLY|O_CREAT;
 			if (ml != 1)
 				openflags |= O_TRUNC;
-			wfd = sys_open(collected, openflags, mode);
+			wfd = sys_open((char __force_user *)collected, openflags, mode);
 
 			if (wfd >= 0) {
 				sys_fchown(wfd, uid, gid);
@@ -317,17 +317,17 @@ static int __init do_name(void)
 			}
 		}
 	} else if (S_ISDIR(mode)) {
-		sys_mkdir(collected, mode);
-		sys_chown(collected, uid, gid);
-		sys_chmod(collected, mode);
+		sys_mkdir((char __force_user *)collected, mode);
+		sys_chown((char __force_user *)collected, uid, gid);
+		sys_chmod((char __force_user *)collected, mode);
 		dir_add(collected, mtime);
 	} else if (S_ISBLK(mode) || S_ISCHR(mode) ||
 		   S_ISFIFO(mode) || S_ISSOCK(mode)) {
 		if (maybe_link() == 0) {
-			sys_mknod(collected, mode, rdev);
-			sys_chown(collected, uid, gid);
-			sys_chmod(collected, mode);
-			do_utime(collected, mtime);
+			sys_mknod((char __force_user *)collected, mode, rdev);
+			sys_chown((char __force_user *)collected, uid, gid);
+			sys_chmod((char __force_user *)collected, mode);
+			do_utime((char __force_user *)collected, mtime);
 		}
 	}
 	return 0;
@@ -336,15 +336,15 @@ static int __init do_name(void)
 static int __init do_copy(void)
 {
 	if (count >= body_len) {
-		sys_write(wfd, victim, body_len);
+		sys_write(wfd, (char __force_user *)victim, body_len);
 		sys_close(wfd);
-		do_utime(vcollected, mtime);
+		do_utime((char __force_user *)vcollected, mtime);
 		kfree(vcollected);
 		eat(body_len);
 		state = SkipIt;
 		return 0;
 	} else {
-		sys_write(wfd, victim, count);
+		sys_write(wfd, (char __force_user *)victim, count);
 		body_len -= count;
 		eat(count);
 		return 1;
@@ -355,9 +355,9 @@ static int __init do_symlink(void)
 {
 	collected[N_ALIGN(name_len) + body_len] = '\0';
 	clean_path(collected, 0);
-	sys_symlink(collected + N_ALIGN(name_len), collected);
-	sys_lchown(collected, uid, gid);
-	do_utime(collected, mtime);
+	sys_symlink((char __force_user *)collected + N_ALIGN(name_len), (char __force_user *)collected);
+	sys_lchown((char __force_user *)collected, uid, gid);
+	do_utime((char __force_user *)collected, mtime);
 	state = SkipIt;
 	next_state = Reset;
 	return 0;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/init/Kconfig linux-3.3.8-pax/init/Kconfig
--- linux-3.3.8/init/Kconfig	2012-03-19 10:39:11.780049204 +0100
+++ linux-3.3.8-pax/init/Kconfig	2012-03-19 10:43:44.496034624 +0100
@@ -1249,7 +1249,7 @@ config SLUB_DEBUG
 
 config COMPAT_BRK
 	bool "Disable heap randomization"
-	default y
+	default n
 	help
 	  Randomizing heap placement makes heap exploits harder, but it
 	  also breaks ancient binaries (including anything libc5 based).
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/init/main.c linux-3.3.8-pax/init/main.c
--- linux-3.3.8/init/main.c	2012-06-11 19:36:40.604445828 +0200
+++ linux-3.3.8-pax/init/main.c	2012-06-11 19:36:46.640446125 +0200
@@ -149,6 +149,49 @@ static int __init set_reset_devices(char
 
 __setup("reset_devices", set_reset_devices);
 
+#if defined(CONFIG_X86_64) && defined(CONFIG_PAX_MEMORY_UDEREF)
+extern char pax_enter_kernel_user[];
+extern char pax_exit_kernel_user[];
+extern pgdval_t clone_pgd_mask;
+#endif
+
+#if defined(CONFIG_X86) && defined(CONFIG_PAX_MEMORY_UDEREF)
+static int __init setup_pax_nouderef(char *str)
+{
+#ifdef CONFIG_X86_32
+	unsigned int cpu;
+	struct desc_struct *gdt;
+
+	for (cpu = 0; cpu < nr_cpu_ids; cpu++) {
+		gdt = get_cpu_gdt_table(cpu);
+		gdt[GDT_ENTRY_KERNEL_DS].type = 3;
+		gdt[GDT_ENTRY_KERNEL_DS].limit = 0xf;
+		gdt[GDT_ENTRY_DEFAULT_USER_CS].limit = 0xf;
+		gdt[GDT_ENTRY_DEFAULT_USER_DS].limit = 0xf;
+	}
+	asm("mov %0, %%ds; mov %0, %%es; mov %0, %%ss" : : "r" (__KERNEL_DS) : "memory");
+#else
+	memcpy(pax_enter_kernel_user, (unsigned char []){0xc3}, 1);
+	memcpy(pax_exit_kernel_user, (unsigned char []){0xc3}, 1);
+	clone_pgd_mask = ~(pgdval_t)0UL;
+#endif
+
+	return 0;
+}
+early_param("pax_nouderef", setup_pax_nouderef);
+#endif
+
+#ifdef CONFIG_PAX_SOFTMODE
+int pax_softmode;
+
+static int __init setup_pax_softmode(char *str)
+{
+	get_option(&str, &pax_softmode);
+	return 1;
+}
+__setup("pax_softmode=", setup_pax_softmode);
+#endif
+
 static const char * argv_init[MAX_INIT_ARGS+2] = { "init", NULL, };
 const char * envp_init[MAX_INIT_ENVS+2] = { "HOME=/", "TERM=linux", NULL, };
 static const char *panic_later, *panic_param;
@@ -672,6 +715,7 @@ int __init_or_module do_one_initcall(ini
 {
 	int count = preempt_count();
 	int ret;
+	const char *msg1 = "", *msg2 = "";
 
 	if (initcall_debug)
 		ret = do_one_initcall_debug(fn);
@@ -684,15 +728,15 @@ int __init_or_module do_one_initcall(ini
 		sprintf(msgbuf, "error code %d ", ret);
 
 	if (preempt_count() != count) {
-		strlcat(msgbuf, "preemption imbalance ", sizeof(msgbuf));
+		msg1 = " preemption imbalance";
 		preempt_count() = count;
 	}
 	if (irqs_disabled()) {
-		strlcat(msgbuf, "disabled interrupts ", sizeof(msgbuf));
+		msg2 = " disabled interrupts";
 		local_irq_enable();
 	}
-	if (msgbuf[0]) {
-		printk("initcall %pF returned with %s\n", fn, msgbuf);
+	if (msgbuf[0] || *msg1 || *msg2) {
+		printk("initcall %pF returned with %s%s%s\n", fn, msgbuf, msg1, msg2);
 	}
 
 	return ret;
@@ -815,7 +859,7 @@ static int __init kernel_init(void * unu
 	do_basic_setup();
 
 	/* Open the /dev/console on the rootfs, this should never fail */
-	if (sys_open((const char __user *) "/dev/console", O_RDWR, 0) < 0)
+	if (sys_open((const char __force_user *) "/dev/console", O_RDWR, 0) < 0)
 		printk(KERN_WARNING "Warning: unable to open an initial console.\n");
 
 	(void) sys_dup(0);
@@ -828,7 +872,7 @@ static int __init kernel_init(void * unu
 	if (!ramdisk_execute_command)
 		ramdisk_execute_command = "/init";
 
-	if (sys_access((const char __user *) ramdisk_execute_command, 0) != 0) {
+	if (sys_access((const char __force_user *) ramdisk_execute_command, 0) != 0) {
 		ramdisk_execute_command = NULL;
 		prepare_namespace();
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/ipc/msg.c linux-3.3.8-pax/ipc/msg.c
--- linux-3.3.8/ipc/msg.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/ipc/msg.c	2012-03-19 10:43:44.500034625 +0100
@@ -309,18 +309,19 @@ static inline int msg_security(struct ke
 	return security_msg_queue_associate(msq, msgflg);
 }
 
+static struct ipc_ops msg_ops = {
+	.getnew		= newque,
+	.associate	= msg_security,
+	.more_checks	= NULL
+};
+
 SYSCALL_DEFINE2(msgget, key_t, key, int, msgflg)
 {
 	struct ipc_namespace *ns;
-	struct ipc_ops msg_ops;
 	struct ipc_params msg_params;
 
 	ns = current->nsproxy->ipc_ns;
 
-	msg_ops.getnew = newque;
-	msg_ops.associate = msg_security;
-	msg_ops.more_checks = NULL;
-
 	msg_params.key = key;
 	msg_params.flg = msgflg;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/ipc/sem.c linux-3.3.8-pax/ipc/sem.c
--- linux-3.3.8/ipc/sem.c	2012-01-08 19:48:28.579470899 +0100
+++ linux-3.3.8-pax/ipc/sem.c	2012-03-19 10:43:44.500034625 +0100
@@ -364,10 +364,15 @@ static inline int sem_more_checks(struct
 	return 0;
 }
 
+static struct ipc_ops sem_ops = {
+	.getnew		= newary,
+	.associate	= sem_security,
+	.more_checks	= sem_more_checks
+};
+
 SYSCALL_DEFINE3(semget, key_t, key, int, nsems, int, semflg)
 {
 	struct ipc_namespace *ns;
-	struct ipc_ops sem_ops;
 	struct ipc_params sem_params;
 
 	ns = current->nsproxy->ipc_ns;
@@ -375,10 +380,6 @@ SYSCALL_DEFINE3(semget, key_t, key, int,
 	if (nsems < 0 || nsems > ns->sc_semmsl)
 		return -EINVAL;
 
-	sem_ops.getnew = newary;
-	sem_ops.associate = sem_security;
-	sem_ops.more_checks = sem_more_checks;
-
 	sem_params.key = key;
 	sem_params.flg = semflg;
 	sem_params.u.nsems = nsems;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/ipc/shm.c linux-3.3.8-pax/ipc/shm.c
--- linux-3.3.8/ipc/shm.c	2012-03-19 10:39:11.784049196 +0100
+++ linux-3.3.8-pax/ipc/shm.c	2012-03-19 10:43:44.500034625 +0100
@@ -559,18 +559,19 @@ static inline int shm_more_checks(struct
 	return 0;
 }
 
+static struct ipc_ops shm_ops = {
+	.getnew		= newseg,
+	.associate	= shm_security,
+	.more_checks	= shm_more_checks
+};
+
 SYSCALL_DEFINE3(shmget, key_t, key, size_t, size, int, shmflg)
 {
 	struct ipc_namespace *ns;
-	struct ipc_ops shm_ops;
 	struct ipc_params shm_params;
 
 	ns = current->nsproxy->ipc_ns;
 
-	shm_ops.getnew = newseg;
-	shm_ops.associate = shm_security;
-	shm_ops.more_checks = shm_more_checks;
-
 	shm_params.key = key;
 	shm_params.flg = shmflg;
 	shm_params.u.size = size;
@@ -988,6 +989,12 @@ long do_shmat(int shmid, char __user *sh
 		f_mode = FMODE_READ | FMODE_WRITE;
 	}
 	if (shmflg & SHM_EXEC) {
+
+#ifdef CONFIG_PAX_MPROTECT
+		if (current->mm->pax_flags & MF_PAX_MPROTECT)
+			goto out;
+#endif
+
 		prot |= PROT_EXEC;
 		acc_mode |= S_IXUGO;
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/acct.c linux-3.3.8-pax/kernel/acct.c
--- linux-3.3.8/kernel/acct.c	2012-03-19 10:39:11.804049197 +0100
+++ linux-3.3.8-pax/kernel/acct.c	2012-03-19 10:43:44.504034625 +0100
@@ -550,7 +550,7 @@ static void do_acct_process(struct bsd_a
 	 */
 	flim = current->signal->rlim[RLIMIT_FSIZE].rlim_cur;
 	current->signal->rlim[RLIMIT_FSIZE].rlim_cur = RLIM_INFINITY;
-	file->f_op->write(file, (char *)&ac,
+	file->f_op->write(file, (char __force_user *)&ac,
 			       sizeof(acct_t), &file->f_pos);
 	current->signal->rlim[RLIMIT_FSIZE].rlim_cur = flim;
 	set_fs(fs);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/audit.c linux-3.3.8-pax/kernel/audit.c
--- linux-3.3.8/kernel/audit.c	2012-03-19 10:39:11.804049197 +0100
+++ linux-3.3.8-pax/kernel/audit.c	2012-03-19 10:43:44.504034625 +0100
@@ -115,7 +115,7 @@ u32		audit_sig_sid = 0;
    3) suppressed due to audit_rate_limit
    4) suppressed due to audit_backlog_limit
 */
-static atomic_t    audit_lost = ATOMIC_INIT(0);
+static atomic_unchecked_t    audit_lost = ATOMIC_INIT(0);
 
 /* The netlink socket. */
 static struct sock *audit_sock;
@@ -237,7 +237,7 @@ void audit_log_lost(const char *message)
 	unsigned long		now;
 	int			print;
 
-	atomic_inc(&audit_lost);
+	atomic_inc_unchecked(&audit_lost);
 
 	print = (audit_failure == AUDIT_FAIL_PANIC || !audit_rate_limit);
 
@@ -256,7 +256,7 @@ void audit_log_lost(const char *message)
 			printk(KERN_WARNING
 				"audit: audit_lost=%d audit_rate_limit=%d "
 				"audit_backlog_limit=%d\n",
-				atomic_read(&audit_lost),
+				atomic_read_unchecked(&audit_lost),
 				audit_rate_limit,
 				audit_backlog_limit);
 		audit_panic(message);
@@ -689,7 +689,7 @@ static int audit_receive_msg(struct sk_b
 		status_set.pid		 = audit_pid;
 		status_set.rate_limit	 = audit_rate_limit;
 		status_set.backlog_limit = audit_backlog_limit;
-		status_set.lost		 = atomic_read(&audit_lost);
+		status_set.lost		 = atomic_read_unchecked(&audit_lost);
 		status_set.backlog	 = skb_queue_len(&audit_skb_queue);
 		audit_send_reply(NETLINK_CB(skb).pid, seq, AUDIT_GET, 0, 0,
 				 &status_set, sizeof(status_set));
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/auditsc.c linux-3.3.8-pax/kernel/auditsc.c
--- linux-3.3.8/kernel/auditsc.c	2012-03-19 10:39:11.812049196 +0100
+++ linux-3.3.8-pax/kernel/auditsc.c	2012-03-19 10:43:44.504034625 +0100
@@ -2288,7 +2288,7 @@ int auditsc_get_stamp(struct audit_conte
 }
 
 /* global counter which is incremented every time something logs in */
-static atomic_t session_id = ATOMIC_INIT(0);
+static atomic_unchecked_t session_id = ATOMIC_INIT(0);
 
 /**
  * audit_set_loginuid - set current task's audit_context loginuid
@@ -2312,7 +2312,7 @@ int audit_set_loginuid(uid_t loginuid)
 		return -EPERM;
 #endif  /* CONFIG_AUDIT_LOGINUID_IMMUTABLE */
 
-	sessionid = atomic_inc_return(&session_id);
+	sessionid = atomic_inc_return_unchecked(&session_id);
 	if (context && context->in_syscall) {
 		struct audit_buffer *ab;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/capability.c linux-3.3.8-pax/kernel/capability.c
--- linux-3.3.8/kernel/capability.c	2012-03-19 10:39:11.812049196 +0100
+++ linux-3.3.8-pax/kernel/capability.c	2012-03-19 10:43:44.508034624 +0100
@@ -202,6 +202,9 @@ SYSCALL_DEFINE2(capget, cap_user_header_
 		 * before modification is attempted and the application
 		 * fails.
 		 */
+		if (tocopy > ARRAY_SIZE(kdata))
+			return -EFAULT;
+
 		if (copy_to_user(dataptr, kdata, tocopy
 				 * sizeof(struct __user_cap_data_struct))) {
 			return -EFAULT;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/compat.c linux-3.3.8-pax/kernel/compat.c
--- linux-3.3.8/kernel/compat.c	2012-05-24 17:32:19.661142875 +0200
+++ linux-3.3.8-pax/kernel/compat.c	2012-05-24 17:34:52.921134336 +0200
@@ -168,7 +168,7 @@ static long compat_nanosleep_restart(str
 	mm_segment_t oldfs;
 	long ret;
 
-	restart->nanosleep.rmtp = (struct timespec __user *) &rmt;
+	restart->nanosleep.rmtp = (struct timespec __force_user *) &rmt;
 	oldfs = get_fs();
 	set_fs(KERNEL_DS);
 	ret = hrtimer_nanosleep_restart(restart);
@@ -200,7 +200,7 @@ asmlinkage long compat_sys_nanosleep(str
 	oldfs = get_fs();
 	set_fs(KERNEL_DS);
 	ret = hrtimer_nanosleep(&tu,
-				rmtp ? (struct timespec __user *)&rmt : NULL,
+				rmtp ? (struct timespec __force_user *)&rmt : NULL,
 				HRTIMER_MODE_REL, CLOCK_MONOTONIC);
 	set_fs(oldfs);
 
@@ -309,7 +309,7 @@ asmlinkage long compat_sys_sigpending(co
 	mm_segment_t old_fs = get_fs();
 
 	set_fs(KERNEL_DS);
-	ret = sys_sigpending((old_sigset_t __user *) &s);
+	ret = sys_sigpending((old_sigset_t __force_user *) &s);
 	set_fs(old_fs);
 	if (ret == 0)
 		ret = put_user(s, set);
@@ -399,7 +399,7 @@ asmlinkage long compat_sys_old_getrlimit
 	mm_segment_t old_fs = get_fs();
 
 	set_fs(KERNEL_DS);
-	ret = sys_old_getrlimit(resource, &r);
+	ret = sys_old_getrlimit(resource, (struct rlimit __force_user *)&r);
 	set_fs(old_fs);
 
 	if (!ret) {
@@ -471,7 +471,7 @@ asmlinkage long compat_sys_getrusage(int
 	mm_segment_t old_fs = get_fs();
 
 	set_fs(KERNEL_DS);
-	ret = sys_getrusage(who, (struct rusage __user *) &r);
+	ret = sys_getrusage(who, (struct rusage __force_user *) &r);
 	set_fs(old_fs);
 
 	if (ret)
@@ -498,8 +498,8 @@ compat_sys_wait4(compat_pid_t pid, compa
 		set_fs (KERNEL_DS);
 		ret = sys_wait4(pid,
 				(stat_addr ?
-				 (unsigned int __user *) &status : NULL),
-				options, (struct rusage __user *) &r);
+				 (unsigned int __force_user *) &status : NULL),
+				options, (struct rusage __force_user *) &r);
 		set_fs (old_fs);
 
 		if (ret > 0) {
@@ -524,8 +524,8 @@ asmlinkage long compat_sys_waitid(int wh
 	memset(&info, 0, sizeof(info));
 
 	set_fs(KERNEL_DS);
-	ret = sys_waitid(which, pid, (siginfo_t __user *)&info, options,
-			 uru ? (struct rusage __user *)&ru : NULL);
+	ret = sys_waitid(which, pid, (siginfo_t __force_user *)&info, options,
+			 uru ? (struct rusage __force_user *)&ru : NULL);
 	set_fs(old_fs);
 
 	if ((ret < 0) || (info.si_signo == 0))
@@ -655,8 +655,8 @@ long compat_sys_timer_settime(timer_t ti
 	oldfs = get_fs();
 	set_fs(KERNEL_DS);
 	err = sys_timer_settime(timer_id, flags,
-				(struct itimerspec __user *) &newts,
-				(struct itimerspec __user *) &oldts);
+				(struct itimerspec __force_user *) &newts,
+				(struct itimerspec __force_user *) &oldts);
 	set_fs(oldfs);
 	if (!err && old && put_compat_itimerspec(old, &oldts))
 		return -EFAULT;
@@ -673,7 +673,7 @@ long compat_sys_timer_gettime(timer_t ti
 	oldfs = get_fs();
 	set_fs(KERNEL_DS);
 	err = sys_timer_gettime(timer_id,
-				(struct itimerspec __user *) &ts);
+				(struct itimerspec __force_user *) &ts);
 	set_fs(oldfs);
 	if (!err && put_compat_itimerspec(setting, &ts))
 		return -EFAULT;
@@ -692,7 +692,7 @@ long compat_sys_clock_settime(clockid_t
 	oldfs = get_fs();
 	set_fs(KERNEL_DS);
 	err = sys_clock_settime(which_clock,
-				(struct timespec __user *) &ts);
+				(struct timespec __force_user *) &ts);
 	set_fs(oldfs);
 	return err;
 }
@@ -707,7 +707,7 @@ long compat_sys_clock_gettime(clockid_t
 	oldfs = get_fs();
 	set_fs(KERNEL_DS);
 	err = sys_clock_gettime(which_clock,
-				(struct timespec __user *) &ts);
+				(struct timespec __force_user *) &ts);
 	set_fs(oldfs);
 	if (!err && put_compat_timespec(&ts, tp))
 		return -EFAULT;
@@ -727,7 +727,7 @@ long compat_sys_clock_adjtime(clockid_t
 
 	oldfs = get_fs();
 	set_fs(KERNEL_DS);
-	ret = sys_clock_adjtime(which_clock, (struct timex __user *) &txc);
+	ret = sys_clock_adjtime(which_clock, (struct timex __force_user *) &txc);
 	set_fs(oldfs);
 
 	err = compat_put_timex(utp, &txc);
@@ -747,7 +747,7 @@ long compat_sys_clock_getres(clockid_t w
 	oldfs = get_fs();
 	set_fs(KERNEL_DS);
 	err = sys_clock_getres(which_clock,
-			       (struct timespec __user *) &ts);
+			       (struct timespec __force_user *) &ts);
 	set_fs(oldfs);
 	if (!err && tp && put_compat_timespec(&ts, tp))
 		return -EFAULT;
@@ -759,9 +759,9 @@ static long compat_clock_nanosleep_resta
 	long err;
 	mm_segment_t oldfs;
 	struct timespec tu;
-	struct compat_timespec *rmtp = restart->nanosleep.compat_rmtp;
+	struct compat_timespec __user *rmtp = restart->nanosleep.compat_rmtp;
 
-	restart->nanosleep.rmtp = (struct timespec __user *) &tu;
+	restart->nanosleep.rmtp = (struct timespec __force_user *) &tu;
 	oldfs = get_fs();
 	set_fs(KERNEL_DS);
 	err = clock_nanosleep_restart(restart);
@@ -793,8 +793,8 @@ long compat_sys_clock_nanosleep(clockid_
 	oldfs = get_fs();
 	set_fs(KERNEL_DS);
 	err = sys_clock_nanosleep(which_clock, flags,
-				  (struct timespec __user *) &in,
-				  (struct timespec __user *) &out);
+				  (struct timespec __force_user *) &in,
+				  (struct timespec __force_user *) &out);
 	set_fs(oldfs);
 
 	if ((err == -ERESTART_RESTARTBLOCK) && rmtp &&
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/debug/debug_core.c linux-3.3.8-pax/kernel/debug/debug_core.c
--- linux-3.3.8/kernel/debug/debug_core.c	2012-04-15 15:08:29.414606353 +0200
+++ linux-3.3.8-pax/kernel/debug/debug_core.c	2012-04-15 15:08:34.674606068 +0200
@@ -119,7 +119,7 @@ static DEFINE_RAW_SPINLOCK(dbg_slave_loc
  */
 static atomic_t			masters_in_kgdb;
 static atomic_t			slaves_in_kgdb;
-static atomic_t			kgdb_break_tasklet_var;
+static atomic_unchecked_t	kgdb_break_tasklet_var;
 atomic_t			kgdb_setting_breakpoint;
 
 struct task_struct		*kgdb_usethread;
@@ -129,7 +129,7 @@ int				kgdb_single_step;
 static pid_t			kgdb_sstep_pid;
 
 /* to keep track of the CPU which is doing the single stepping*/
-atomic_t			kgdb_cpu_doing_single_step = ATOMIC_INIT(-1);
+atomic_unchecked_t		kgdb_cpu_doing_single_step = ATOMIC_INIT(-1);
 
 /*
  * If you are debugging a problem where roundup (the collection of
@@ -537,7 +537,7 @@ return_normal:
 	 * kernel will only try for the value of sstep_tries before
 	 * giving up and continuing on.
 	 */
-	if (atomic_read(&kgdb_cpu_doing_single_step) != -1 &&
+	if (atomic_read_unchecked(&kgdb_cpu_doing_single_step) != -1 &&
 	    (kgdb_info[cpu].task &&
 	     kgdb_info[cpu].task->pid != kgdb_sstep_pid) && --sstep_tries) {
 		atomic_set(&kgdb_active, -1);
@@ -631,8 +631,8 @@ cpu_master_loop:
 	}
 
 kgdb_restore:
-	if (atomic_read(&kgdb_cpu_doing_single_step) != -1) {
-		int sstep_cpu = atomic_read(&kgdb_cpu_doing_single_step);
+	if (atomic_read_unchecked(&kgdb_cpu_doing_single_step) != -1) {
+		int sstep_cpu = atomic_read_unchecked(&kgdb_cpu_doing_single_step);
 		if (kgdb_info[sstep_cpu].task)
 			kgdb_sstep_pid = kgdb_info[sstep_cpu].task->pid;
 		else
@@ -829,18 +829,18 @@ static void kgdb_unregister_callbacks(vo
 static void kgdb_tasklet_bpt(unsigned long ing)
 {
 	kgdb_breakpoint();
-	atomic_set(&kgdb_break_tasklet_var, 0);
+	atomic_set_unchecked(&kgdb_break_tasklet_var, 0);
 }
 
 static DECLARE_TASKLET(kgdb_tasklet_breakpoint, kgdb_tasklet_bpt, 0);
 
 void kgdb_schedule_breakpoint(void)
 {
-	if (atomic_read(&kgdb_break_tasklet_var) ||
+	if (atomic_read_unchecked(&kgdb_break_tasklet_var) ||
 		atomic_read(&kgdb_active) != -1 ||
 		atomic_read(&kgdb_setting_breakpoint))
 		return;
-	atomic_inc(&kgdb_break_tasklet_var);
+	atomic_inc_unchecked(&kgdb_break_tasklet_var);
 	tasklet_schedule(&kgdb_tasklet_breakpoint);
 }
 EXPORT_SYMBOL_GPL(kgdb_schedule_breakpoint);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/debug/kdb/kdb_main.c linux-3.3.8-pax/kernel/debug/kdb/kdb_main.c
--- linux-3.3.8/kernel/debug/kdb/kdb_main.c	2012-03-19 10:39:11.820049183 +0100
+++ linux-3.3.8-pax/kernel/debug/kdb/kdb_main.c	2012-03-19 10:43:44.512034623 +0100
@@ -1980,7 +1980,7 @@ static int kdb_lsmod(int argc, const cha
 	list_for_each_entry(mod, kdb_modules, list) {
 
 		kdb_printf("%-20s%8u  0x%p ", mod->name,
-			   mod->core_size, (void *)mod);
+			   mod->core_size_rx + mod->core_size_rw, (void *)mod);
 #ifdef CONFIG_MODULE_UNLOAD
 		kdb_printf("%4ld ", module_refcount(mod));
 #endif
@@ -1990,7 +1990,7 @@ static int kdb_lsmod(int argc, const cha
 			kdb_printf(" (Loading)");
 		else
 			kdb_printf(" (Live)");
-		kdb_printf(" 0x%p", mod->module_core);
+		kdb_printf(" 0x%p 0x%p", mod->module_core_rx,  mod->module_core_rw);
 
 #ifdef CONFIG_MODULE_UNLOAD
 		{
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/events/core.c linux-3.3.8-pax/kernel/events/core.c
--- linux-3.3.8/kernel/events/core.c	2012-03-19 10:39:11.844049186 +0100
+++ linux-3.3.8-pax/kernel/events/core.c	2012-03-19 10:43:44.512034623 +0100
@@ -173,7 +173,7 @@ int perf_proc_update_handler(struct ctl_
 	return 0;
 }
 
-static atomic64_t perf_event_id;
+static atomic64_unchecked_t perf_event_id;
 
 static void cpu_ctx_sched_out(struct perf_cpu_context *cpuctx,
 			      enum event_type_t event_type);
@@ -2581,7 +2581,7 @@ static void __perf_event_read(void *info
 
 static inline u64 perf_event_count(struct perf_event *event)
 {
-	return local64_read(&event->count) + atomic64_read(&event->child_count);
+	return local64_read(&event->count) + atomic64_read_unchecked(&event->child_count);
 }
 
 static u64 perf_event_read(struct perf_event *event)
@@ -2897,9 +2897,9 @@ u64 perf_event_read_value(struct perf_ev
 	mutex_lock(&event->child_mutex);
 	total += perf_event_read(event);
 	*enabled += event->total_time_enabled +
-			atomic64_read(&event->child_total_time_enabled);
+			atomic64_read_unchecked(&event->child_total_time_enabled);
 	*running += event->total_time_running +
-			atomic64_read(&event->child_total_time_running);
+			atomic64_read_unchecked(&event->child_total_time_running);
 
 	list_for_each_entry(child, &event->child_list, child_list) {
 		total += perf_event_read(child);
@@ -3306,10 +3306,10 @@ void perf_event_update_userpage(struct p
 		userpg->offset -= local64_read(&event->hw.prev_count);
 
 	userpg->time_enabled = enabled +
-			atomic64_read(&event->child_total_time_enabled);
+			atomic64_read_unchecked(&event->child_total_time_enabled);
 
 	userpg->time_running = running +
-			atomic64_read(&event->child_total_time_running);
+			atomic64_read_unchecked(&event->child_total_time_running);
 
 	barrier();
 	++userpg->lock;
@@ -3738,11 +3738,11 @@ static void perf_output_read_one(struct
 	values[n++] = perf_event_count(event);
 	if (read_format & PERF_FORMAT_TOTAL_TIME_ENABLED) {
 		values[n++] = enabled +
-			atomic64_read(&event->child_total_time_enabled);
+			atomic64_read_unchecked(&event->child_total_time_enabled);
 	}
 	if (read_format & PERF_FORMAT_TOTAL_TIME_RUNNING) {
 		values[n++] = running +
-			atomic64_read(&event->child_total_time_running);
+			atomic64_read_unchecked(&event->child_total_time_running);
 	}
 	if (read_format & PERF_FORMAT_ID)
 		values[n++] = primary_event_id(event);
@@ -4393,12 +4393,12 @@ static void perf_event_mmap_event(struct
 		 * need to add enough zero bytes after the string to handle
 		 * the 64bit alignment we do later.
 		 */
-		buf = kzalloc(PATH_MAX + sizeof(u64), GFP_KERNEL);
+		buf = kzalloc(PATH_MAX, GFP_KERNEL);
 		if (!buf) {
 			name = strncpy(tmp, "//enomem", sizeof(tmp));
 			goto got_name;
 		}
-		name = d_path(&file->f_path, buf, PATH_MAX);
+		name = d_path(&file->f_path, buf, PATH_MAX - sizeof(u64));
 		if (IS_ERR(name)) {
 			name = strncpy(tmp, "//toolong", sizeof(tmp));
 			goto got_name;
@@ -5765,7 +5765,7 @@ perf_event_alloc(struct perf_event_attr
 	event->parent		= parent_event;
 
 	event->ns		= get_pid_ns(current->nsproxy->pid_ns);
-	event->id		= atomic64_inc_return(&perf_event_id);
+	event->id		= atomic64_inc_return_unchecked(&perf_event_id);
 
 	event->state		= PERF_EVENT_STATE_INACTIVE;
 
@@ -6287,10 +6287,10 @@ static void sync_child_event(struct perf
 	/*
 	 * Add back the child's count to the parent's count:
 	 */
-	atomic64_add(child_val, &parent_event->child_count);
-	atomic64_add(child_event->total_time_enabled,
+	atomic64_add_unchecked(child_val, &parent_event->child_count);
+	atomic64_add_unchecked(child_event->total_time_enabled,
 		     &parent_event->child_total_time_enabled);
-	atomic64_add(child_event->total_time_running,
+	atomic64_add_unchecked(child_event->total_time_running,
 		     &parent_event->child_total_time_running);
 
 	/*
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/exit.c linux-3.3.8-pax/kernel/exit.c
--- linux-3.3.8/kernel/exit.c	2012-05-07 20:26:56.079609314 +0200
+++ linux-3.3.8-pax/kernel/exit.c	2012-05-07 20:27:02.127608991 +0200
@@ -381,7 +381,7 @@ int allow_signal(int sig)
 	 * know it'll be handled, so that they don't get converted to
 	 * SIGKILL or just silently dropped.
 	 */
-	current->sighand->action[(sig)-1].sa.sa_handler = (void __user *)2;
+	current->sighand->action[(sig)-1].sa.sa_handler = (__force void __user *)2;
 	recalc_sigpending();
 	spin_unlock_irq(&current->sighand->siglock);
 	return 0;
@@ -1066,7 +1066,7 @@ SYSCALL_DEFINE1(exit, int, error_code)
  * Take down every thread in the group.  This is called by fatal signals
  * as well as by sys_exit_group (below).
  */
-void
+__noreturn void
 do_group_exit(int exit_code)
 {
 	struct signal_struct *sig = current->signal;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/fork.c linux-3.3.8-pax/kernel/fork.c
--- linux-3.3.8/kernel/fork.c	2012-05-24 17:32:19.661142875 +0200
+++ linux-3.3.8-pax/kernel/fork.c	2012-06-11 19:50:27.016490901 +0200
@@ -285,7 +285,7 @@ static struct task_struct *dup_task_stru
 	*stackend = STACK_END_MAGIC;	/* for overflow detection */
 
 #ifdef CONFIG_CC_STACKPROTECTOR
-	tsk->stack_canary = get_random_int();
+	tsk->stack_canary = pax_get_random_long();
 #endif
 
 	/*
@@ -309,13 +309,78 @@ out:
 }
 
 #ifdef CONFIG_MMU
+static struct vm_area_struct *dup_vma(struct mm_struct *mm, struct vm_area_struct *mpnt)
+{
+	struct vm_area_struct *tmp;
+	unsigned long charge;
+	struct mempolicy *pol;
+	struct file *file;
+
+	charge = 0;
+	if (mpnt->vm_flags & VM_ACCOUNT) {
+		unsigned long len;
+		len = (mpnt->vm_end - mpnt->vm_start) >> PAGE_SHIFT;
+		if (security_vm_enough_memory(len))
+			goto fail_nomem;
+		charge = len;
+	}
+	tmp = kmem_cache_alloc(vm_area_cachep, GFP_KERNEL);
+	if (!tmp)
+		goto fail_nomem;
+	*tmp = *mpnt;
+	tmp->vm_mm = mm;
+	INIT_LIST_HEAD(&tmp->anon_vma_chain);
+	pol = mpol_dup(vma_policy(mpnt));
+	if (IS_ERR(pol))
+		goto fail_nomem_policy;
+	vma_set_policy(tmp, pol);
+	if (anon_vma_fork(tmp, mpnt))
+		goto fail_nomem_anon_vma_fork;
+	tmp->vm_flags &= ~VM_LOCKED;
+	tmp->vm_next = tmp->vm_prev = NULL;
+	tmp->vm_mirror = NULL;
+	file = tmp->vm_file;
+	if (file) {
+		struct inode *inode = file->f_path.dentry->d_inode;
+		struct address_space *mapping = file->f_mapping;
+
+		get_file(file);
+		if (tmp->vm_flags & VM_DENYWRITE)
+			atomic_dec(&inode->i_writecount);
+		mutex_lock(&mapping->i_mmap_mutex);
+		if (tmp->vm_flags & VM_SHARED)
+			mapping->i_mmap_writable++;
+		flush_dcache_mmap_lock(mapping);
+		/* insert tmp into the share list, just after mpnt */
+		vma_prio_tree_add(tmp, mpnt);
+		flush_dcache_mmap_unlock(mapping);
+		mutex_unlock(&mapping->i_mmap_mutex);
+	}
+
+	/*
+	 * Clear hugetlb-related page reserves for children. This only
+	 * affects MAP_PRIVATE mappings. Faults generated by the child
+	 * are not guaranteed to succeed, even if read-only
+	 */
+	if (is_vm_hugetlb_page(tmp))
+		reset_vma_resv_huge_pages(tmp);
+
+	return tmp;
+
+fail_nomem_anon_vma_fork:
+	mpol_put(pol);
+fail_nomem_policy:
+	kmem_cache_free(vm_area_cachep, tmp);
+fail_nomem:
+	vm_unacct_memory(charge);
+	return NULL;
+}
+
 static int dup_mmap(struct mm_struct *mm, struct mm_struct *oldmm)
 {
 	struct vm_area_struct *mpnt, *tmp, *prev, **pprev;
 	struct rb_node **rb_link, *rb_parent;
 	int retval;
-	unsigned long charge;
-	struct mempolicy *pol;
 
 	down_write(&oldmm->mmap_sem);
 	flush_cache_dup_mm(oldmm);
@@ -327,8 +392,8 @@ static int dup_mmap(struct mm_struct *mm
 	mm->locked_vm = 0;
 	mm->mmap = NULL;
 	mm->mmap_cache = NULL;
-	mm->free_area_cache = oldmm->mmap_base;
-	mm->cached_hole_size = ~0UL;
+	mm->free_area_cache = oldmm->free_area_cache;
+	mm->cached_hole_size = oldmm->cached_hole_size;
 	mm->map_count = 0;
 	cpumask_clear(mm_cpumask(mm));
 	mm->mm_rb = RB_ROOT;
@@ -344,8 +409,6 @@ static int dup_mmap(struct mm_struct *mm
 
 	prev = NULL;
 	for (mpnt = oldmm->mmap; mpnt; mpnt = mpnt->vm_next) {
-		struct file *file;
-
 		if (mpnt->vm_flags & VM_DONTCOPY) {
 			long pages = vma_pages(mpnt);
 			mm->total_vm -= pages;
@@ -353,55 +416,13 @@ static int dup_mmap(struct mm_struct *mm
 								-pages);
 			continue;
 		}
-		charge = 0;
-		if (mpnt->vm_flags & VM_ACCOUNT) {
-			unsigned int len = (mpnt->vm_end - mpnt->vm_start) >> PAGE_SHIFT;
-			if (security_vm_enough_memory(len))
-				goto fail_nomem;
-			charge = len;
-		}
-		tmp = kmem_cache_alloc(vm_area_cachep, GFP_KERNEL);
-		if (!tmp)
-			goto fail_nomem;
-		*tmp = *mpnt;
-		INIT_LIST_HEAD(&tmp->anon_vma_chain);
-		pol = mpol_dup(vma_policy(mpnt));
-		retval = PTR_ERR(pol);
-		if (IS_ERR(pol))
-			goto fail_nomem_policy;
-		vma_set_policy(tmp, pol);
-		tmp->vm_mm = mm;
-		if (anon_vma_fork(tmp, mpnt))
-			goto fail_nomem_anon_vma_fork;
-		tmp->vm_flags &= ~VM_LOCKED;
-		tmp->vm_next = tmp->vm_prev = NULL;
-		file = tmp->vm_file;
-		if (file) {
-			struct inode *inode = file->f_path.dentry->d_inode;
-			struct address_space *mapping = file->f_mapping;
-
-			get_file(file);
-			if (tmp->vm_flags & VM_DENYWRITE)
-				atomic_dec(&inode->i_writecount);
-			mutex_lock(&mapping->i_mmap_mutex);
-			if (tmp->vm_flags & VM_SHARED)
-				mapping->i_mmap_writable++;
-			flush_dcache_mmap_lock(mapping);
-			/* insert tmp into the share list, just after mpnt */
-			vma_prio_tree_add(tmp, mpnt);
-			flush_dcache_mmap_unlock(mapping);
-			mutex_unlock(&mapping->i_mmap_mutex);
+		tmp = dup_vma(mm, mpnt);
+		if (!tmp) {
+			retval = -ENOMEM;
+			goto out;
 		}
 
 		/*
-		 * Clear hugetlb-related page reserves for children. This only
-		 * affects MAP_PRIVATE mappings. Faults generated by the child
-		 * are not guaranteed to succeed, even if read-only
-		 */
-		if (is_vm_hugetlb_page(tmp))
-			reset_vma_resv_huge_pages(tmp);
-
-		/*
 		 * Link in the new vma and copy the page table entries.
 		 */
 		*pprev = tmp;
@@ -422,6 +443,31 @@ static int dup_mmap(struct mm_struct *mm
 		if (retval)
 			goto out;
 	}
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (oldmm->pax_flags & MF_PAX_SEGMEXEC) {
+		struct vm_area_struct *mpnt_m;
+
+		for (mpnt = oldmm->mmap, mpnt_m = mm->mmap; mpnt; mpnt = mpnt->vm_next, mpnt_m = mpnt_m->vm_next) {
+			BUG_ON(!mpnt_m || mpnt_m->vm_mirror || mpnt->vm_mm != oldmm || mpnt_m->vm_mm != mm);
+
+			if (!mpnt->vm_mirror)
+				continue;
+
+			if (mpnt->vm_end <= SEGMEXEC_TASK_SIZE) {
+				BUG_ON(mpnt->vm_mirror->vm_mirror != mpnt);
+				mpnt->vm_mirror = mpnt_m;
+			} else {
+				BUG_ON(mpnt->vm_mirror->vm_mirror == mpnt || mpnt->vm_mirror->vm_mirror->vm_mm != mm);
+				mpnt_m->vm_mirror = mpnt->vm_mirror->vm_mirror;
+				mpnt_m->vm_mirror->vm_mirror = mpnt_m;
+				mpnt->vm_mirror->vm_mirror = mpnt;
+			}
+		}
+		BUG_ON(mpnt_m);
+	}
+#endif
+
 	/* a new mm has just been created */
 	arch_dup_mmap(oldmm, mm);
 	retval = 0;
@@ -430,14 +476,6 @@ out:
 	flush_tlb_mm(oldmm);
 	up_write(&oldmm->mmap_sem);
 	return retval;
-fail_nomem_anon_vma_fork:
-	mpol_put(pol);
-fail_nomem_policy:
-	kmem_cache_free(vm_area_cachep, tmp);
-fail_nomem:
-	retval = -ENOMEM;
-	vm_unacct_memory(charge);
-	goto out;
 }
 
 static inline int mm_alloc_pgd(struct mm_struct *mm)
@@ -882,7 +920,7 @@ static int copy_fs(unsigned long clone_f
 			spin_unlock(&fs->lock);
 			return -EAGAIN;
 		}
-		fs->users++;
+		atomic_inc(&fs->users);
 		spin_unlock(&fs->lock);
 		return 0;
 	}
@@ -1673,7 +1711,7 @@ static int unshare_fs(unsigned long unsh
 		return 0;
 
 	/* don't need lock here; in the worst case we'll do useless copy */
-	if (fs->users == 1)
+	if (atomic_read(&fs->users) == 1)
 		return 0;
 
 	*new_fsp = copy_fs_struct(fs);
@@ -1762,7 +1800,7 @@ SYSCALL_DEFINE1(unshare, unsigned long,
 			fs = current->fs;
 			spin_lock(&fs->lock);
 			current->fs = new_fs;
-			if (--fs->users)
+			if (atomic_dec_return(&fs->users))
 				new_fs = NULL;
 			else
 				new_fs = fs;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/futex.c linux-3.3.8-pax/kernel/futex.c
--- linux-3.3.8/kernel/futex.c	2012-04-23 14:06:58.771285879 +0200
+++ linux-3.3.8-pax/kernel/futex.c	2012-04-23 14:07:11.639285159 +0200
@@ -239,6 +239,11 @@ get_futex_key(u32 __user *uaddr, int fsh
 	struct page *page, *page_head;
 	int err, ro = 0;
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	if ((mm->pax_flags & MF_PAX_SEGMEXEC) && address >= SEGMEXEC_TASK_SIZE)
+		return -EFAULT;
+#endif
+
 	/*
 	 * The futex address must be "naturally" aligned.
 	 */
@@ -2721,6 +2726,7 @@ static int __init futex_init(void)
 {
 	u32 curval;
 	int i;
+	mm_segment_t oldfs;
 
 	/*
 	 * This will fail and we want it. Some arch implementations do
@@ -2732,8 +2738,11 @@ static int __init futex_init(void)
 	 * implementation, the non-functional ones will return
 	 * -ENOSYS.
 	 */
+	oldfs = get_fs();
+	set_fs(USER_DS);
 	if (cmpxchg_futex_value_locked(&curval, NULL, 0, 0) == -EFAULT)
 		futex_cmpxchg_enabled = 1;
+	set_fs(oldfs);
 
 	for (i = 0; i < ARRAY_SIZE(futex_queues); i++) {
 		plist_head_init(&futex_queues[i].chain);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/gcov/base.c linux-3.3.8-pax/kernel/gcov/base.c
--- linux-3.3.8/kernel/gcov/base.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/kernel/gcov/base.c	2012-03-19 10:43:44.520034622 +0100
@@ -102,11 +102,6 @@ void gcov_enable_events(void)
 }
 
 #ifdef CONFIG_MODULES
-static inline int within(void *addr, void *start, unsigned long size)
-{
-	return ((addr >= start) && (addr < start + size));
-}
-
 /* Update list and generate events when modules are unloaded. */
 static int gcov_module_notifier(struct notifier_block *nb, unsigned long event,
 				void *data)
@@ -121,7 +116,7 @@ static int gcov_module_notifier(struct n
 	prev = NULL;
 	/* Remove entries located in module from linked list. */
 	for (info = gcov_info_head; info; info = info->next) {
-		if (within(info, mod->module_core, mod->core_size)) {
+		if (within_module_core_rw((unsigned long)info, mod)) {
 			if (prev)
 				prev->next = info->next;
 			else
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/hrtimer.c linux-3.3.8-pax/kernel/hrtimer.c
--- linux-3.3.8/kernel/hrtimer.c	2012-01-08 19:48:28.683470894 +0100
+++ linux-3.3.8-pax/kernel/hrtimer.c	2012-03-19 10:43:44.520034622 +0100
@@ -1393,7 +1393,7 @@ void hrtimer_peek_ahead_timers(void)
 	local_irq_restore(flags);
 }
 
-static void run_hrtimer_softirq(struct softirq_action *h)
+static void run_hrtimer_softirq(void)
 {
 	hrtimer_peek_ahead_timers();
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/jump_label.c linux-3.3.8-pax/kernel/jump_label.c
--- linux-3.3.8/kernel/jump_label.c	2012-03-19 10:39:11.864049179 +0100
+++ linux-3.3.8-pax/kernel/jump_label.c	2012-03-19 10:43:44.524034623 +0100
@@ -55,7 +55,9 @@ jump_label_sort_entries(struct jump_entr
 
 	size = (((unsigned long)stop - (unsigned long)start)
 					/ sizeof(struct jump_entry));
+	pax_open_kernel();
 	sort(start, size, sizeof(struct jump_entry), jump_label_cmp, NULL);
+	pax_close_kernel();
 }
 
 static void jump_label_update(struct jump_label_key *key, int enable);
@@ -340,10 +342,12 @@ static void jump_label_invalidate_module
 	struct jump_entry *iter_stop = iter_start + mod->num_jump_entries;
 	struct jump_entry *iter;
 
+	pax_open_kernel();
 	for (iter = iter_start; iter < iter_stop; iter++) {
 		if (within_module_init(iter->code, mod))
 			iter->code = 0;
 	}
+	pax_close_kernel();
 }
 
 static int
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/kallsyms.c linux-3.3.8-pax/kernel/kallsyms.c
--- linux-3.3.8/kernel/kallsyms.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/kernel/kallsyms.c	2012-03-19 10:43:44.524034623 +0100
@@ -53,12 +53,33 @@ extern const unsigned long kallsyms_mark
 
 static inline int is_kernel_inittext(unsigned long addr)
 {
+	if (system_state != SYSTEM_BOOTING)
+		return 0;
+
 	if (addr >= (unsigned long)_sinittext
 	    && addr <= (unsigned long)_einittext)
 		return 1;
 	return 0;
 }
 
+#if defined(CONFIG_X86_32) && defined(CONFIG_PAX_KERNEXEC)
+#ifdef CONFIG_MODULES
+static inline int is_module_text(unsigned long addr)
+{
+	if ((unsigned long)MODULES_EXEC_VADDR <= addr && addr <= (unsigned long)MODULES_EXEC_END)
+		return 1;
+
+	addr = ktla_ktva(addr);
+	return (unsigned long)MODULES_EXEC_VADDR <= addr && addr <= (unsigned long)MODULES_EXEC_END;
+}
+#else
+static inline int is_module_text(unsigned long addr)
+{
+	return 0;
+}
+#endif
+#endif
+
 static inline int is_kernel_text(unsigned long addr)
 {
 	if ((addr >= (unsigned long)_stext && addr <= (unsigned long)_etext) ||
@@ -69,13 +90,28 @@ static inline int is_kernel_text(unsigne
 
 static inline int is_kernel(unsigned long addr)
 {
+
+#if defined(CONFIG_X86_32) && defined(CONFIG_PAX_KERNEXEC)
+	if (is_kernel_text(addr) || is_kernel_inittext(addr))
+		return 1;
+
+	if (ktla_ktva((unsigned long)_text) <= addr && addr < (unsigned long)_end)
+#else
 	if (addr >= (unsigned long)_stext && addr <= (unsigned long)_end)
+#endif
+
 		return 1;
 	return in_gate_area_no_mm(addr);
 }
 
 static int is_ksym_addr(unsigned long addr)
 {
+
+#if defined(CONFIG_X86_32) && defined(CONFIG_PAX_KERNEXEC)
+	if (is_module_text(addr))
+		return 0;
+#endif
+
 	if (all_var)
 		return is_kernel(addr);
 
@@ -454,7 +490,6 @@ static unsigned long get_ksymbol_core(st
 
 static void reset_iter(struct kallsym_iter *iter, loff_t new_pos)
 {
-	iter->name[0] = '\0';
 	iter->nameoff = get_symbol_offset(new_pos);
 	iter->pos = new_pos;
 }
@@ -540,7 +575,7 @@ static int kallsyms_open(struct inode *i
 	struct kallsym_iter *iter;
 	int ret;
 
-	iter = kmalloc(sizeof(*iter), GFP_KERNEL);
+	iter = kzalloc(sizeof(*iter), GFP_KERNEL);
 	if (!iter)
 		return -ENOMEM;
 	reset_iter(iter, 0);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/kexec.c linux-3.3.8-pax/kernel/kexec.c
--- linux-3.3.8/kernel/kexec.c	2012-03-19 10:39:11.868049182 +0100
+++ linux-3.3.8-pax/kernel/kexec.c	2012-03-19 10:43:44.524034623 +0100
@@ -1047,7 +1047,8 @@ asmlinkage long compat_sys_kexec_load(un
 				unsigned long flags)
 {
 	struct compat_kexec_segment in;
-	struct kexec_segment out, __user *ksegments;
+	struct kexec_segment out;
+	struct kexec_segment __user *ksegments;
 	unsigned long i, result;
 
 	/* Don't allow clients that don't understand the native
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/kmod.c linux-3.3.8-pax/kernel/kmod.c
--- linux-3.3.8/kernel/kmod.c	2012-04-15 15:08:29.414606353 +0200
+++ linux-3.3.8-pax/kernel/kmod.c	2012-04-15 15:08:34.682606071 +0200
@@ -224,7 +224,7 @@ static int wait_for_helper(void *data)
 		 *
 		 * Thus the __user pointer cast is valid here.
 		 */
-		sys_wait4(pid, (int __user *)&ret, 0, NULL);
+		sys_wait4(pid, (int __force_user *)&ret, 0, NULL);
 
 		/*
 		 * If ret is 0, either ____call_usermodehelper failed and the
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/kprobes.c linux-3.3.8-pax/kernel/kprobes.c
--- linux-3.3.8/kernel/kprobes.c	2012-03-19 10:39:11.868049182 +0100
+++ linux-3.3.8-pax/kernel/kprobes.c	2012-03-19 10:43:44.528034624 +0100
@@ -185,7 +185,7 @@ static kprobe_opcode_t __kprobes *__get_
 	 * kernel image and loaded module images reside. This is required
 	 * so x86_64 can correctly handle the %rip-relative fixups.
 	 */
-	kip->insns = module_alloc(PAGE_SIZE);
+	kip->insns = module_alloc_exec(PAGE_SIZE);
 	if (!kip->insns) {
 		kfree(kip);
 		return NULL;
@@ -225,7 +225,7 @@ static int __kprobes collect_one_slot(st
 		 */
 		if (!list_is_singular(&kip->list)) {
 			list_del(&kip->list);
-			module_free(NULL, kip->insns);
+			module_free_exec(NULL, kip->insns);
 			kfree(kip);
 		}
 		return 1;
@@ -1955,7 +1955,7 @@ static int __init init_kprobes(void)
 {
 	int i, err = 0;
 	unsigned long offset = 0, size = 0;
-	char *modname, namebuf[128];
+	char *modname, namebuf[KSYM_NAME_LEN];
 	const char *symbol_name;
 	void *addr;
 	struct kprobe_blackpoint *kb;
@@ -2081,7 +2081,7 @@ static int __kprobes show_kprobe_addr(st
 	const char *sym = NULL;
 	unsigned int i = *(loff_t *) v;
 	unsigned long offset = 0;
-	char *modname, namebuf[128];
+	char *modname, namebuf[KSYM_NAME_LEN];
 
 	head = &kprobe_table[i];
 	preempt_disable();
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/lockdep.c linux-3.3.8-pax/kernel/lockdep.c
--- linux-3.3.8/kernel/lockdep.c	2012-03-19 10:39:11.872049184 +0100
+++ linux-3.3.8-pax/kernel/lockdep.c	2012-03-19 10:43:44.528034624 +0100
@@ -590,6 +590,10 @@ static int static_obj(void *obj)
 		      end   = (unsigned long) &_end,
 		      addr  = (unsigned long) obj;
 
+#ifdef CONFIG_PAX_KERNEXEC
+	start = ktla_ktva(start);
+#endif
+
 	/*
 	 * static variable?
 	 */
@@ -730,6 +734,7 @@ register_lock_class(struct lockdep_map *
 	if (!static_obj(lock->key)) {
 		debug_locks_off();
 		printk("INFO: trying to register non-static key.\n");
+		printk("lock:%pS key:%pS.\n", lock, lock->key);
 		printk("the code is fine but needs lockdep annotation.\n");
 		printk("turning off the locking correctness validator.\n");
 		dump_stack();
@@ -3042,7 +3047,7 @@ static int __lock_acquire(struct lockdep
 		if (!class)
 			return 0;
 	}
-	atomic_inc((atomic_t *)&class->ops);
+	atomic_inc_unchecked((atomic_unchecked_t *)&class->ops);
 	if (very_verbose(class)) {
 		printk("\nacquire class [%p] %s", class->key, class->name);
 		if (class->name_version > 1)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/lockdep_proc.c linux-3.3.8-pax/kernel/lockdep_proc.c
--- linux-3.3.8/kernel/lockdep_proc.c	2012-01-08 19:48:28.755470890 +0100
+++ linux-3.3.8-pax/kernel/lockdep_proc.c	2012-03-19 10:43:44.532034624 +0100
@@ -39,7 +39,7 @@ static void l_stop(struct seq_file *m, v
 
 static void print_name(struct seq_file *m, struct lock_class *class)
 {
-	char str[128];
+	char str[KSYM_NAME_LEN];
 	const char *name = class->name;
 
 	if (!name) {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/module.c linux-3.3.8-pax/kernel/module.c
--- linux-3.3.8/kernel/module.c	2012-04-03 22:02:50.486110032 +0200
+++ linux-3.3.8-pax/kernel/module.c	2012-05-10 15:31:47.990197260 +0200
@@ -113,7 +113,8 @@ static BLOCKING_NOTIFIER_HEAD(module_not
 
 /* Bounds of module allocation, for speeding __module_address.
  * Protected by module_mutex. */
-static unsigned long module_addr_min = -1UL, module_addr_max = 0;
+static unsigned long module_addr_min_rw = -1UL, module_addr_max_rw = 0;
+static unsigned long module_addr_min_rx = -1UL, module_addr_max_rx = 0;
 
 int register_module_notifier(struct notifier_block * nb)
 {
@@ -277,7 +278,7 @@ bool each_symbol_section(bool (*fn)(cons
 		return true;
 
 	list_for_each_entry_rcu(mod, &modules, list) {
-		struct symsearch arr[] = {
+		struct symsearch modarr[] = {
 			{ mod->syms, mod->syms + mod->num_syms, mod->crcs,
 			  NOT_GPL_ONLY, false },
 			{ mod->gpl_syms, mod->gpl_syms + mod->num_gpl_syms,
@@ -299,7 +300,7 @@ bool each_symbol_section(bool (*fn)(cons
 #endif
 		};
 
-		if (each_symbol_in_section(arr, ARRAY_SIZE(arr), mod, fn, data))
+		if (each_symbol_in_section(modarr, ARRAY_SIZE(modarr), mod, fn, data))
 			return true;
 	}
 	return false;
@@ -431,7 +432,7 @@ static inline void __percpu *mod_percpu(
 static int percpu_modalloc(struct module *mod,
 			   unsigned long size, unsigned long align)
 {
-	if (align > PAGE_SIZE) {
+	if (align-1 >= PAGE_SIZE) {
 		printk(KERN_WARNING "%s: per-cpu alignment %li > %li\n",
 		       mod->name, align, PAGE_SIZE);
 		align = PAGE_SIZE;
@@ -1001,7 +1002,7 @@ struct module_attribute module_uevent =
 static ssize_t show_coresize(struct module_attribute *mattr,
 			     struct module_kobject *mk, char *buffer)
 {
-	return sprintf(buffer, "%u\n", mk->mod->core_size);
+	return sprintf(buffer, "%u\n", mk->mod->core_size_rx + mk->mod->core_size_rw);
 }
 
 static struct module_attribute modinfo_coresize =
@@ -1010,7 +1011,7 @@ static struct module_attribute modinfo_c
 static ssize_t show_initsize(struct module_attribute *mattr,
 			     struct module_kobject *mk, char *buffer)
 {
-	return sprintf(buffer, "%u\n", mk->mod->init_size);
+	return sprintf(buffer, "%u\n", mk->mod->init_size_rx +  mk->mod->init_size_rw);
 }
 
 static struct module_attribute modinfo_initsize =
@@ -1690,21 +1691,21 @@ static void set_section_ro_nx(void *base
 
 static void unset_module_core_ro_nx(struct module *mod)
 {
-	set_page_attributes(mod->module_core + mod->core_text_size,
-		mod->module_core + mod->core_size,
+	set_page_attributes(mod->module_core_rw,
+		mod->module_core_rw + mod->core_size_rw,
 		set_memory_x);
-	set_page_attributes(mod->module_core,
-		mod->module_core + mod->core_ro_size,
+	set_page_attributes(mod->module_core_rx,
+		mod->module_core_rx + mod->core_size_rx,
 		set_memory_rw);
 }
 
 static void unset_module_init_ro_nx(struct module *mod)
 {
-	set_page_attributes(mod->module_init + mod->init_text_size,
-		mod->module_init + mod->init_size,
+	set_page_attributes(mod->module_init_rw,
+		mod->module_init_rw + mod->init_size_rw,
 		set_memory_x);
-	set_page_attributes(mod->module_init,
-		mod->module_init + mod->init_ro_size,
+	set_page_attributes(mod->module_init_rx,
+		mod->module_init_rx + mod->init_size_rx,
 		set_memory_rw);
 }
 
@@ -1715,14 +1716,14 @@ void set_all_modules_text_rw(void)
 
 	mutex_lock(&module_mutex);
 	list_for_each_entry_rcu(mod, &modules, list) {
-		if ((mod->module_core) && (mod->core_text_size)) {
-			set_page_attributes(mod->module_core,
-						mod->module_core + mod->core_text_size,
+		if ((mod->module_core_rx) && (mod->core_size_rx)) {
+			set_page_attributes(mod->module_core_rx,
+						mod->module_core_rx + mod->core_size_rx,
 						set_memory_rw);
 		}
-		if ((mod->module_init) && (mod->init_text_size)) {
-			set_page_attributes(mod->module_init,
-						mod->module_init + mod->init_text_size,
+		if ((mod->module_init_rx) && (mod->init_size_rx)) {
+			set_page_attributes(mod->module_init_rx,
+						mod->module_init_rx + mod->init_size_rx,
 						set_memory_rw);
 		}
 	}
@@ -1736,14 +1737,14 @@ void set_all_modules_text_ro(void)
 
 	mutex_lock(&module_mutex);
 	list_for_each_entry_rcu(mod, &modules, list) {
-		if ((mod->module_core) && (mod->core_text_size)) {
-			set_page_attributes(mod->module_core,
-						mod->module_core + mod->core_text_size,
+		if ((mod->module_core_rx) && (mod->core_size_rx)) {
+			set_page_attributes(mod->module_core_rx,
+						mod->module_core_rx + mod->core_size_rx,
 						set_memory_ro);
 		}
-		if ((mod->module_init) && (mod->init_text_size)) {
-			set_page_attributes(mod->module_init,
-						mod->module_init + mod->init_text_size,
+		if ((mod->module_init_rx) && (mod->init_size_rx)) {
+			set_page_attributes(mod->module_init_rx,
+						mod->module_init_rx + mod->init_size_rx,
 						set_memory_ro);
 		}
 	}
@@ -1789,16 +1790,19 @@ static void free_module(struct module *m
 
 	/* This may be NULL, but that's OK */
 	unset_module_init_ro_nx(mod);
-	module_free(mod, mod->module_init);
+	module_free(mod, mod->module_init_rw);
+	module_free_exec(mod, mod->module_init_rx);
 	kfree(mod->args);
 	percpu_modfree(mod);
 
 	/* Free lock-classes: */
-	lockdep_free_key_range(mod->module_core, mod->core_size);
+	lockdep_free_key_range(mod->module_core_rx, mod->core_size_rx);
+	lockdep_free_key_range(mod->module_core_rw, mod->core_size_rw);
 
 	/* Finally, free the core (containing the module structure) */
 	unset_module_core_ro_nx(mod);
-	module_free(mod, mod->module_core);
+	module_free_exec(mod, mod->module_core_rx);
+	module_free(mod, mod->module_core_rw);
 
 #ifdef CONFIG_MPU
 	update_protections(current->mm);
@@ -1891,7 +1895,9 @@ static int simplify_symbols(struct modul
 			ksym = resolve_symbol_wait(mod, info, name);
 			/* Ok if resolved.  */
 			if (ksym && !IS_ERR(ksym)) {
+				pax_open_kernel();
 				sym[i].st_value = ksym->value;
+				pax_close_kernel();
 				break;
 			}
 
@@ -1910,7 +1916,9 @@ static int simplify_symbols(struct modul
 				secbase = (unsigned long)mod_percpu(mod);
 			else
 				secbase = info->sechdrs[sym[i].st_shndx].sh_addr;
+			pax_open_kernel();
 			sym[i].st_value += secbase;
+			pax_close_kernel();
 			break;
 		}
 	}
@@ -2018,22 +2026,12 @@ static void layout_sections(struct modul
 			    || s->sh_entsize != ~0UL
 			    || strstarts(sname, ".init"))
 				continue;
-			s->sh_entsize = get_offset(mod, &mod->core_size, s, i);
+			if ((s->sh_flags & SHF_WRITE) || !(s->sh_flags & SHF_ALLOC))
+				s->sh_entsize = get_offset(mod, &mod->core_size_rw, s, i);
+			else
+				s->sh_entsize = get_offset(mod, &mod->core_size_rx, s, i);
 			pr_debug("\t%s\n", sname);
 		}
-		switch (m) {
-		case 0: /* executable */
-			mod->core_size = debug_align(mod->core_size);
-			mod->core_text_size = mod->core_size;
-			break;
-		case 1: /* RO: text and ro-data */
-			mod->core_size = debug_align(mod->core_size);
-			mod->core_ro_size = mod->core_size;
-			break;
-		case 3: /* whole core */
-			mod->core_size = debug_align(mod->core_size);
-			break;
-		}
 	}
 
 	pr_debug("Init section allocation order:\n");
@@ -2047,23 +2045,13 @@ static void layout_sections(struct modul
 			    || s->sh_entsize != ~0UL
 			    || !strstarts(sname, ".init"))
 				continue;
-			s->sh_entsize = (get_offset(mod, &mod->init_size, s, i)
-					 | INIT_OFFSET_MASK);
+			if ((s->sh_flags & SHF_WRITE) || !(s->sh_flags & SHF_ALLOC))
+				s->sh_entsize = get_offset(mod, &mod->init_size_rw, s, i);
+			else
+				s->sh_entsize = get_offset(mod, &mod->init_size_rx, s, i);
+			s->sh_entsize |= INIT_OFFSET_MASK;
 			pr_debug("\t%s\n", sname);
 		}
-		switch (m) {
-		case 0: /* executable */
-			mod->init_size = debug_align(mod->init_size);
-			mod->init_text_size = mod->init_size;
-			break;
-		case 1: /* RO: text and ro-data */
-			mod->init_size = debug_align(mod->init_size);
-			mod->init_ro_size = mod->init_size;
-			break;
-		case 3: /* whole init */
-			mod->init_size = debug_align(mod->init_size);
-			break;
-		}
 	}
 }
 
@@ -2235,7 +2223,7 @@ static void layout_symtab(struct module
 
 	/* Put symbol section at end of init part of module. */
 	symsect->sh_flags |= SHF_ALLOC;
-	symsect->sh_entsize = get_offset(mod, &mod->init_size, symsect,
+	symsect->sh_entsize = get_offset(mod, &mod->init_size_rx, symsect,
 					 info->index.sym) | INIT_OFFSET_MASK;
 	pr_debug("\t%s\n", info->secstrings + symsect->sh_name);
 
@@ -2250,13 +2238,13 @@ static void layout_symtab(struct module
 		}
 
 	/* Append room for core symbols at end of core part. */
-	info->symoffs = ALIGN(mod->core_size, symsect->sh_addralign ?: 1);
-	info->stroffs = mod->core_size = info->symoffs + ndst * sizeof(Elf_Sym);
-	mod->core_size += strtab_size;
+	info->symoffs = ALIGN(mod->core_size_rx, symsect->sh_addralign ?: 1);
+	info->stroffs = mod->core_size_rx = info->symoffs + ndst * sizeof(Elf_Sym);
+	mod->core_size_rx += strtab_size;
 
 	/* Put string table section at end of init part of module. */
 	strsect->sh_flags |= SHF_ALLOC;
-	strsect->sh_entsize = get_offset(mod, &mod->init_size, strsect,
+	strsect->sh_entsize = get_offset(mod, &mod->init_size_rx, strsect,
 					 info->index.str) | INIT_OFFSET_MASK;
 	pr_debug("\t%s\n", info->secstrings + strsect->sh_name);
 }
@@ -2274,12 +2262,14 @@ static void add_kallsyms(struct module *
 	/* Make sure we get permanent strtab: don't use info->strtab. */
 	mod->strtab = (void *)info->sechdrs[info->index.str].sh_addr;
 
+	pax_open_kernel();
+
 	/* Set types up while we still have access to sections. */
 	for (i = 0; i < mod->num_symtab; i++)
 		mod->symtab[i].st_info = elf_type(&mod->symtab[i], info);
 
-	mod->core_symtab = dst = mod->module_core + info->symoffs;
-	mod->core_strtab = s = mod->module_core + info->stroffs;
+	mod->core_symtab = dst = mod->module_core_rx + info->symoffs;
+	mod->core_strtab = s = mod->module_core_rx + info->stroffs;
 	src = mod->symtab;
 	*dst = *src;
 	*s++ = 0;
@@ -2292,6 +2282,8 @@ static void add_kallsyms(struct module *
 		s += strlcpy(s, &mod->strtab[src->st_name], KSYM_NAME_LEN) + 1;
 	}
 	mod->core_num_syms = ndst;
+
+	pax_close_kernel();
 }
 #else
 static inline void layout_symtab(struct module *mod, struct load_info *info)
@@ -2325,17 +2317,33 @@ void * __weak module_alloc(unsigned long
 	return size == 0 ? NULL : vmalloc_exec(size);
 }
 
-static void *module_alloc_update_bounds(unsigned long size)
+static void *module_alloc_update_bounds_rw(unsigned long size)
 {
 	void *ret = module_alloc(size);
 
 	if (ret) {
 		mutex_lock(&module_mutex);
 		/* Update module bounds. */
-		if ((unsigned long)ret < module_addr_min)
-			module_addr_min = (unsigned long)ret;
-		if ((unsigned long)ret + size > module_addr_max)
-			module_addr_max = (unsigned long)ret + size;
+		if ((unsigned long)ret < module_addr_min_rw)
+			module_addr_min_rw = (unsigned long)ret;
+		if ((unsigned long)ret + size > module_addr_max_rw)
+			module_addr_max_rw = (unsigned long)ret + size;
+		mutex_unlock(&module_mutex);
+	}
+	return ret;
+}
+
+static void *module_alloc_update_bounds_rx(unsigned long size)
+{
+	void *ret = module_alloc_exec(size);
+
+	if (ret) {
+		mutex_lock(&module_mutex);
+		/* Update module bounds. */
+		if ((unsigned long)ret < module_addr_min_rx)
+			module_addr_min_rx = (unsigned long)ret;
+		if ((unsigned long)ret + size > module_addr_max_rx)
+			module_addr_max_rx = (unsigned long)ret + size;
 		mutex_unlock(&module_mutex);
 	}
 	return ret;
@@ -2512,8 +2520,14 @@ static struct module *setup_load_info(st
 static int check_modinfo(struct module *mod, struct load_info *info)
 {
 	const char *modmagic = get_modinfo(info, "vermagic");
+	const char *license = get_modinfo(info, "license");
 	int err;
 
+#ifdef CONFIG_PAX_KERNEXEC_PLUGIN_METHOD_OR
+	if (!license || !license_is_gpl_compatible(license))
+		return -ENOEXEC;
+#endif
+
 	/* This is allowed: modprobe --force will invalidate it. */
 	if (!modmagic) {
 		err = try_to_force_load(mod, "bad vermagic");
@@ -2536,7 +2550,7 @@ static int check_modinfo(struct module *
 	}
 
 	/* Set up license info based on the info section */
-	set_license(mod, get_modinfo(info, "license"));
+	set_license(mod, license);
 
 	return 0;
 }
@@ -2630,7 +2644,7 @@ static int move_module(struct module *mo
 	void *ptr;
 
 	/* Do the allocs. */
-	ptr = module_alloc_update_bounds(mod->core_size);
+	ptr = module_alloc_update_bounds_rw(mod->core_size_rw);
 	/*
 	 * The pointer to this block is stored in the module structure
 	 * which is inside the block. Just mark it as not being a
@@ -2640,23 +2654,50 @@ static int move_module(struct module *mo
 	if (!ptr)
 		return -ENOMEM;
 
-	memset(ptr, 0, mod->core_size);
-	mod->module_core = ptr;
+	memset(ptr, 0, mod->core_size_rw);
+	mod->module_core_rw = ptr;
 
-	ptr = module_alloc_update_bounds(mod->init_size);
+	ptr = module_alloc_update_bounds_rw(mod->init_size_rw);
 	/*
 	 * The pointer to this block is stored in the module structure
 	 * which is inside the block. This block doesn't need to be
 	 * scanned as it contains data and code that will be freed
 	 * after the module is initialized.
 	 */
-	kmemleak_ignore(ptr);
-	if (!ptr && mod->init_size) {
-		module_free(mod, mod->module_core);
+	kmemleak_not_leak(ptr);
+	if (!ptr && mod->init_size_rw) {
+		module_free(mod, mod->module_core_rw);
 		return -ENOMEM;
 	}
-	memset(ptr, 0, mod->init_size);
-	mod->module_init = ptr;
+	memset(ptr, 0, mod->init_size_rw);
+	mod->module_init_rw = ptr;
+
+	ptr = module_alloc_update_bounds_rx(mod->core_size_rx);
+	kmemleak_not_leak(ptr);
+	if (!ptr) {
+		module_free(mod, mod->module_init_rw);
+		module_free(mod, mod->module_core_rw);
+		return -ENOMEM;
+	}
+
+	pax_open_kernel();
+	memset(ptr, 0, mod->core_size_rx);
+	pax_close_kernel();
+	mod->module_core_rx = ptr;
+
+	ptr = module_alloc_update_bounds_rx(mod->init_size_rx);
+	kmemleak_not_leak(ptr);
+	if (!ptr && mod->init_size_rx) {
+		module_free_exec(mod, mod->module_core_rx);
+		module_free(mod, mod->module_init_rw);
+		module_free(mod, mod->module_core_rw);
+		return -ENOMEM;
+	}
+
+	pax_open_kernel();
+	memset(ptr, 0, mod->init_size_rx);
+	pax_close_kernel();
+	mod->module_init_rx = ptr;
 
 	/* Transfer each section which specifies SHF_ALLOC */
 	pr_debug("final section addresses:\n");
@@ -2667,16 +2708,45 @@ static int move_module(struct module *mo
 		if (!(shdr->sh_flags & SHF_ALLOC))
 			continue;
 
-		if (shdr->sh_entsize & INIT_OFFSET_MASK)
-			dest = mod->module_init
-				+ (shdr->sh_entsize & ~INIT_OFFSET_MASK);
-		else
-			dest = mod->module_core + shdr->sh_entsize;
+		if (shdr->sh_entsize & INIT_OFFSET_MASK) {
+			if ((shdr->sh_flags & SHF_WRITE) || !(shdr->sh_flags & SHF_ALLOC))
+				dest = mod->module_init_rw
+					+ (shdr->sh_entsize & ~INIT_OFFSET_MASK);
+			else
+				dest = mod->module_init_rx
+					+ (shdr->sh_entsize & ~INIT_OFFSET_MASK);
+		} else {
+			if ((shdr->sh_flags & SHF_WRITE) || !(shdr->sh_flags & SHF_ALLOC))
+				dest = mod->module_core_rw + shdr->sh_entsize;
+			else
+				dest = mod->module_core_rx + shdr->sh_entsize;
+		}
+
+		if (shdr->sh_type != SHT_NOBITS) {
+
+#ifdef CONFIG_PAX_KERNEXEC
+#ifdef CONFIG_X86_64
+			if ((shdr->sh_flags & SHF_WRITE) && (shdr->sh_flags & SHF_EXECINSTR))
+				set_memory_x((unsigned long)dest, (shdr->sh_size + PAGE_SIZE) >> PAGE_SHIFT);
+#endif
+			if (!(shdr->sh_flags & SHF_WRITE) && (shdr->sh_flags & SHF_ALLOC)) {
+				pax_open_kernel();
+				memcpy(dest, (void *)shdr->sh_addr, shdr->sh_size);
+				pax_close_kernel();
+			} else
+#endif
 
-		if (shdr->sh_type != SHT_NOBITS)
 			memcpy(dest, (void *)shdr->sh_addr, shdr->sh_size);
+		}
 		/* Update sh_addr to point to copy in image. */
-		shdr->sh_addr = (unsigned long)dest;
+
+#ifdef CONFIG_PAX_KERNEXEC
+		if (shdr->sh_flags & SHF_EXECINSTR)
+			shdr->sh_addr = ktva_ktla((unsigned long)dest);
+		else
+#endif
+
+			shdr->sh_addr = (unsigned long)dest;
 		pr_debug("\t0x%lx %s\n",
 			 (long)shdr->sh_addr, info->secstrings + shdr->sh_name);
 	}
@@ -2727,12 +2797,12 @@ static void flush_module_icache(const st
 	 * Do it before processing of module parameters, so the module
 	 * can provide parameter accessor functions of its own.
 	 */
-	if (mod->module_init)
-		flush_icache_range((unsigned long)mod->module_init,
-				   (unsigned long)mod->module_init
-				   + mod->init_size);
-	flush_icache_range((unsigned long)mod->module_core,
-			   (unsigned long)mod->module_core + mod->core_size);
+	if (mod->module_init_rx)
+		flush_icache_range((unsigned long)mod->module_init_rx,
+				   (unsigned long)mod->module_init_rx
+				   + mod->init_size_rx);
+	flush_icache_range((unsigned long)mod->module_core_rx,
+			   (unsigned long)mod->module_core_rx + mod->core_size_rx);
 
 	set_fs(old_fs);
 }
@@ -2802,8 +2872,10 @@ out:
 static void module_deallocate(struct module *mod, struct load_info *info)
 {
 	percpu_modfree(mod);
-	module_free(mod, mod->module_init);
-	module_free(mod, mod->module_core);
+	module_free_exec(mod, mod->module_init_rx);
+	module_free_exec(mod, mod->module_core_rx);
+	module_free(mod, mod->module_init_rw);
+	module_free(mod, mod->module_core_rw);
 }
 
 int __weak module_finalize(const Elf_Ehdr *hdr,
@@ -2993,16 +3065,16 @@ SYSCALL_DEFINE3(init_module, void __user
 			MODULE_STATE_COMING, mod);
 
 	/* Set RO and NX regions for core */
-	set_section_ro_nx(mod->module_core,
-				mod->core_text_size,
-				mod->core_ro_size,
-				mod->core_size);
+	set_section_ro_nx(mod->module_core_rx,
+				mod->core_size_rx,
+				mod->core_size_rx,
+				mod->core_size_rx);
 
 	/* Set RO and NX regions for init */
-	set_section_ro_nx(mod->module_init,
-				mod->init_text_size,
-				mod->init_ro_size,
-				mod->init_size);
+	set_section_ro_nx(mod->module_init_rx,
+				mod->init_size_rx,
+				mod->init_size_rx,
+				mod->init_size_rx);
 
 	do_mod_ctors(mod);
 	/* Start the module */
@@ -3048,11 +3120,12 @@ SYSCALL_DEFINE3(init_module, void __user
 	mod->strtab = mod->core_strtab;
 #endif
 	unset_module_init_ro_nx(mod);
-	module_free(mod, mod->module_init);
-	mod->module_init = NULL;
-	mod->init_size = 0;
-	mod->init_ro_size = 0;
-	mod->init_text_size = 0;
+	module_free(mod, mod->module_init_rw);
+	module_free_exec(mod, mod->module_init_rx);
+	mod->module_init_rw = NULL;
+	mod->module_init_rx = NULL;
+	mod->init_size_rw = 0;
+	mod->init_size_rx = 0;
 	mutex_unlock(&module_mutex);
 
 	return 0;
@@ -3083,10 +3156,16 @@ static const char *get_ksymbol(struct mo
 	unsigned long nextval;
 
 	/* At worse, next value is at end of module */
-	if (within_module_init(addr, mod))
-		nextval = (unsigned long)mod->module_init+mod->init_text_size;
+	if (within_module_init_rx(addr, mod))
+		nextval = (unsigned long)mod->module_init_rx+mod->init_size_rx;
+	else if (within_module_init_rw(addr, mod))
+		nextval = (unsigned long)mod->module_init_rw+mod->init_size_rw;
+	else if (within_module_core_rx(addr, mod))
+		nextval = (unsigned long)mod->module_core_rx+mod->core_size_rx;
+	else if (within_module_core_rw(addr, mod))
+		nextval = (unsigned long)mod->module_core_rw+mod->core_size_rw;
 	else
-		nextval = (unsigned long)mod->module_core+mod->core_text_size;
+		return NULL;
 
 	/* Scan for closest preceding symbol, and next symbol. (ELF
 	   starts real symbols at 1). */
@@ -3321,7 +3400,7 @@ static int m_show(struct seq_file *m, vo
 	char buf[8];
 
 	seq_printf(m, "%s %u",
-		   mod->name, mod->init_size + mod->core_size);
+		   mod->name, mod->init_size_rx + mod->init_size_rw + mod->core_size_rx + mod->core_size_rw);
 	print_unload_info(m, mod);
 
 	/* Informative for users. */
@@ -3330,7 +3409,7 @@ static int m_show(struct seq_file *m, vo
 		   mod->state == MODULE_STATE_COMING ? "Loading":
 		   "Live");
 	/* Used by oprofile and other similar tools. */
-	seq_printf(m, " 0x%pK", mod->module_core);
+	seq_printf(m, " 0x%pK 0x%pK", mod->module_core_rx, mod->module_core_rw);
 
 	/* Taints info */
 	if (mod->taints)
@@ -3425,12 +3504,12 @@ struct module *__module_address(unsigned
 {
 	struct module *mod;
 
-	if (addr < module_addr_min || addr > module_addr_max)
+	if ((addr < module_addr_min_rx || addr > module_addr_max_rx) &&
+	    (addr < module_addr_min_rw || addr > module_addr_max_rw))
 		return NULL;
 
 	list_for_each_entry_rcu(mod, &modules, list)
-		if (within_module_core(addr, mod)
-		    || within_module_init(addr, mod))
+		if (within_module_init(addr, mod) || within_module_core(addr, mod))
 			return mod;
 	return NULL;
 }
@@ -3464,11 +3543,20 @@ bool is_module_text_address(unsigned lon
  */
 struct module *__module_text_address(unsigned long addr)
 {
-	struct module *mod = __module_address(addr);
+	struct module *mod;
+
+#ifdef CONFIG_X86_32
+	addr = ktla_ktva(addr);
+#endif
+
+	if (addr < module_addr_min_rx || addr > module_addr_max_rx)
+		return NULL;
+
+	mod = __module_address(addr);
+
 	if (mod) {
 		/* Make sure it's within the text section. */
-		if (!within(addr, mod->module_init, mod->init_text_size)
-		    && !within(addr, mod->module_core, mod->core_text_size))
+		if (!within_module_init_rx(addr, mod) && !within_module_core_rx(addr, mod))
 			mod = NULL;
 	}
 	return mod;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/mutex.c linux-3.3.8-pax/kernel/mutex.c
--- linux-3.3.8/kernel/mutex.c	2012-01-08 19:48:28.767470889 +0100
+++ linux-3.3.8-pax/kernel/mutex.c	2012-03-19 10:43:44.536034624 +0100
@@ -198,7 +198,7 @@ __mutex_lock_common(struct mutex *lock,
 	spin_lock_mutex(&lock->wait_lock, flags);
 
 	debug_mutex_lock_common(lock, &waiter);
-	debug_mutex_add_waiter(lock, &waiter, task_thread_info(task));
+	debug_mutex_add_waiter(lock, &waiter, task);
 
 	/* add waiting tasks to the end of the waitqueue (FIFO): */
 	list_add_tail(&waiter.list, &lock->wait_list);
@@ -227,8 +227,7 @@ __mutex_lock_common(struct mutex *lock,
 		 * TASK_UNINTERRUPTIBLE case.)
 		 */
 		if (unlikely(signal_pending_state(state, task))) {
-			mutex_remove_waiter(lock, &waiter,
-					    task_thread_info(task));
+			mutex_remove_waiter(lock, &waiter, task);
 			mutex_release(&lock->dep_map, 1, ip);
 			spin_unlock_mutex(&lock->wait_lock, flags);
 
@@ -249,7 +248,7 @@ __mutex_lock_common(struct mutex *lock,
 done:
 	lock_acquired(&lock->dep_map, ip);
 	/* got the lock - rejoice! */
-	mutex_remove_waiter(lock, &waiter, current_thread_info());
+	mutex_remove_waiter(lock, &waiter, task);
 	mutex_set_owner(lock);
 
 	/* set it to 0 if there are no waiters left: */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/mutex-debug.c linux-3.3.8-pax/kernel/mutex-debug.c
--- linux-3.3.8/kernel/mutex-debug.c	2012-01-08 19:48:28.763470889 +0100
+++ linux-3.3.8-pax/kernel/mutex-debug.c	2012-03-19 10:43:44.536034624 +0100
@@ -49,21 +49,21 @@ void debug_mutex_free_waiter(struct mute
 }
 
 void debug_mutex_add_waiter(struct mutex *lock, struct mutex_waiter *waiter,
-			    struct thread_info *ti)
+			    struct task_struct *task)
 {
 	SMP_DEBUG_LOCKS_WARN_ON(!spin_is_locked(&lock->wait_lock));
 
 	/* Mark the current thread as blocked on the lock: */
-	ti->task->blocked_on = waiter;
+	task->blocked_on = waiter;
 }
 
 void mutex_remove_waiter(struct mutex *lock, struct mutex_waiter *waiter,
-			 struct thread_info *ti)
+			 struct task_struct *task)
 {
 	DEBUG_LOCKS_WARN_ON(list_empty(&waiter->list));
-	DEBUG_LOCKS_WARN_ON(waiter->task != ti->task);
-	DEBUG_LOCKS_WARN_ON(ti->task->blocked_on != waiter);
-	ti->task->blocked_on = NULL;
+	DEBUG_LOCKS_WARN_ON(waiter->task != task);
+	DEBUG_LOCKS_WARN_ON(task->blocked_on != waiter);
+	task->blocked_on = NULL;
 
 	list_del_init(&waiter->list);
 	waiter->task = NULL;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/mutex-debug.h linux-3.3.8-pax/kernel/mutex-debug.h
--- linux-3.3.8/kernel/mutex-debug.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/kernel/mutex-debug.h	2012-03-19 10:43:44.536034624 +0100
@@ -20,9 +20,9 @@ extern void debug_mutex_wake_waiter(stru
 extern void debug_mutex_free_waiter(struct mutex_waiter *waiter);
 extern void debug_mutex_add_waiter(struct mutex *lock,
 				   struct mutex_waiter *waiter,
-				   struct thread_info *ti);
+				   struct task_struct *task);
 extern void mutex_remove_waiter(struct mutex *lock, struct mutex_waiter *waiter,
-				struct thread_info *ti);
+				struct task_struct *task);
 extern void debug_mutex_unlock(struct mutex *lock);
 extern void debug_mutex_init(struct mutex *lock, const char *name,
 			     struct lock_class_key *key);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/padata.c linux-3.3.8-pax/kernel/padata.c
--- linux-3.3.8/kernel/padata.c	2012-01-08 19:48:28.775470889 +0100
+++ linux-3.3.8-pax/kernel/padata.c	2012-03-19 10:43:44.536034624 +0100
@@ -132,10 +132,10 @@ int padata_do_parallel(struct padata_ins
 	padata->pd = pd;
 	padata->cb_cpu = cb_cpu;
 
-	if (unlikely(atomic_read(&pd->seq_nr) == pd->max_seq_nr))
-		atomic_set(&pd->seq_nr, -1);
+	if (unlikely(atomic_read_unchecked(&pd->seq_nr) == pd->max_seq_nr))
+		atomic_set_unchecked(&pd->seq_nr, -1);
 
-	padata->seq_nr = atomic_inc_return(&pd->seq_nr);
+	padata->seq_nr = atomic_inc_return_unchecked(&pd->seq_nr);
 
 	target_cpu = padata_cpu_hash(padata);
 	queue = per_cpu_ptr(pd->pqueue, target_cpu);
@@ -444,7 +444,7 @@ static struct parallel_data *padata_allo
 	padata_init_pqueues(pd);
 	padata_init_squeues(pd);
 	setup_timer(&pd->timer, padata_reorder_timer, (unsigned long)pd);
-	atomic_set(&pd->seq_nr, -1);
+	atomic_set_unchecked(&pd->seq_nr, -1);
 	atomic_set(&pd->reorder_objects, 0);
 	atomic_set(&pd->refcnt, 0);
 	pd->pinst = pinst;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/panic.c linux-3.3.8-pax/kernel/panic.c
--- linux-3.3.8/kernel/panic.c	2012-04-23 14:06:59.599285805 +0200
+++ linux-3.3.8-pax/kernel/panic.c	2012-04-15 15:36:02.338518098 +0200
@@ -457,7 +457,8 @@ EXPORT_SYMBOL(warn_slowpath_null);
  */
 void __stack_chk_fail(void)
 {
-	panic("stack-protector: Kernel stack is corrupted in: %p\n",
+	dump_stack();
+	panic("stack-protector: Kernel stack is corrupted in: %pS\n",
 		__builtin_return_address(0));
 }
 EXPORT_SYMBOL(__stack_chk_fail);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/pid.c linux-3.3.8-pax/kernel/pid.c
--- linux-3.3.8/kernel/pid.c	2012-03-19 10:39:11.880049184 +0100
+++ linux-3.3.8-pax/kernel/pid.c	2012-03-19 10:43:44.540034622 +0100
@@ -45,7 +45,7 @@ struct pid init_struct_pid = INIT_STRUCT
 
 int pid_max = PID_MAX_DEFAULT;
 
-#define RESERVED_PIDS		300
+#define RESERVED_PIDS		500
 
 int pid_max_min = RESERVED_PIDS + 1;
 int pid_max_max = PID_MAX_LIMIT;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/posix-cpu-timers.c linux-3.3.8-pax/kernel/posix-cpu-timers.c
--- linux-3.3.8/kernel/posix-cpu-timers.c	2012-03-19 10:39:11.880049184 +0100
+++ linux-3.3.8-pax/kernel/posix-cpu-timers.c	2012-03-19 10:43:44.540034622 +0100
@@ -1578,14 +1578,14 @@ struct k_clock clock_posix_cpu = {
 
 static __init int init_posix_cpu_timers(void)
 {
-	struct k_clock process = {
+	static struct k_clock process = {
 		.clock_getres	= process_cpu_clock_getres,
 		.clock_get	= process_cpu_clock_get,
 		.timer_create	= process_cpu_timer_create,
 		.nsleep		= process_cpu_nsleep,
 		.nsleep_restart	= process_cpu_nsleep_restart,
 	};
-	struct k_clock thread = {
+	static struct k_clock thread = {
 		.clock_getres	= thread_cpu_clock_getres,
 		.clock_get	= thread_cpu_clock_get,
 		.timer_create	= thread_cpu_timer_create,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/posix-timers.c linux-3.3.8-pax/kernel/posix-timers.c
--- linux-3.3.8/kernel/posix-timers.c	2012-01-08 19:48:28.791470888 +0100
+++ linux-3.3.8-pax/kernel/posix-timers.c	2012-03-19 10:43:44.540034622 +0100
@@ -129,7 +129,7 @@ static DEFINE_SPINLOCK(idr_lock);
  *	    which we beg off on and pass to do_sys_settimeofday().
  */
 
-static struct k_clock posix_clocks[MAX_CLOCKS];
+static struct k_clock *posix_clocks[MAX_CLOCKS];
 
 /*
  * These ones are defined below.
@@ -227,7 +227,7 @@ static int posix_get_boottime(const cloc
  */
 static __init int init_posix_timers(void)
 {
-	struct k_clock clock_realtime = {
+	static struct k_clock clock_realtime = {
 		.clock_getres	= hrtimer_get_res,
 		.clock_get	= posix_clock_realtime_get,
 		.clock_set	= posix_clock_realtime_set,
@@ -239,7 +239,7 @@ static __init int init_posix_timers(void
 		.timer_get	= common_timer_get,
 		.timer_del	= common_timer_del,
 	};
-	struct k_clock clock_monotonic = {
+	static struct k_clock clock_monotonic = {
 		.clock_getres	= hrtimer_get_res,
 		.clock_get	= posix_ktime_get_ts,
 		.nsleep		= common_nsleep,
@@ -249,19 +249,19 @@ static __init int init_posix_timers(void
 		.timer_get	= common_timer_get,
 		.timer_del	= common_timer_del,
 	};
-	struct k_clock clock_monotonic_raw = {
+	static struct k_clock clock_monotonic_raw = {
 		.clock_getres	= hrtimer_get_res,
 		.clock_get	= posix_get_monotonic_raw,
 	};
-	struct k_clock clock_realtime_coarse = {
+	static struct k_clock clock_realtime_coarse = {
 		.clock_getres	= posix_get_coarse_res,
 		.clock_get	= posix_get_realtime_coarse,
 	};
-	struct k_clock clock_monotonic_coarse = {
+	static struct k_clock clock_monotonic_coarse = {
 		.clock_getres	= posix_get_coarse_res,
 		.clock_get	= posix_get_monotonic_coarse,
 	};
-	struct k_clock clock_boottime = {
+	static struct k_clock clock_boottime = {
 		.clock_getres	= hrtimer_get_res,
 		.clock_get	= posix_get_boottime,
 		.nsleep		= common_nsleep,
@@ -473,7 +473,7 @@ void posix_timers_register_clock(const c
 		return;
 	}
 
-	posix_clocks[clock_id] = *new_clock;
+	posix_clocks[clock_id] = new_clock;
 }
 EXPORT_SYMBOL_GPL(posix_timers_register_clock);
 
@@ -519,9 +519,9 @@ static struct k_clock *clockid_to_kclock
 		return (id & CLOCKFD_MASK) == CLOCKFD ?
 			&clock_posix_dynamic : &clock_posix_cpu;
 
-	if (id >= MAX_CLOCKS || !posix_clocks[id].clock_getres)
+	if (id >= MAX_CLOCKS || !posix_clocks[id] || !posix_clocks[id]->clock_getres)
 		return NULL;
-	return &posix_clocks[id];
+	return posix_clocks[id];
 }
 
 static int common_timer_create(struct k_itimer *new_timer)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/power/poweroff.c linux-3.3.8-pax/kernel/power/poweroff.c
--- linux-3.3.8/kernel/power/poweroff.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/kernel/power/poweroff.c	2012-03-19 10:43:44.544034620 +0100
@@ -37,7 +37,7 @@ static struct sysrq_key_op	sysrq_powerof
 	.enable_mask	= SYSRQ_ENABLE_BOOT,
 };
 
-static int pm_sysrq_init(void)
+static int __init pm_sysrq_init(void)
 {
 	register_sysrq_key('o', &sysrq_poweroff_op);
 	return 0;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/power/process.c linux-3.3.8-pax/kernel/power/process.c
--- linux-3.3.8/kernel/power/process.c	2012-04-15 15:08:29.418606351 +0200
+++ linux-3.3.8-pax/kernel/power/process.c	2012-04-15 15:08:34.682606071 +0200
@@ -33,6 +33,7 @@ static int try_to_freeze_tasks(bool user
 	u64 elapsed_csecs64;
 	unsigned int elapsed_csecs;
 	bool wakeup = false;
+	bool timedout = false;
 
 	do_gettimeofday(&start);
 
@@ -43,6 +44,8 @@ static int try_to_freeze_tasks(bool user
 
 	while (true) {
 		todo = 0;
+		if (time_after(jiffies, end_time))
+			timedout = true;
 		read_lock(&tasklist_lock);
 		do_each_thread(g, p) {
 			if (p == current || !freeze_task(p))
@@ -60,9 +63,13 @@ static int try_to_freeze_tasks(bool user
 			 * try_to_stop() after schedule() in ptrace/signal
 			 * stop sees TIF_FREEZE.
 			 */
-			if (!task_is_stopped_or_traced(p) &&
-			    !freezer_should_skip(p))
+			if (!task_is_stopped_or_traced(p) && !freezer_should_skip(p)) {
 				todo++;
+				if (timedout) {
+					printk(KERN_ERR "Task refusing to freeze:\n");
+					sched_show_task(p);
+				}
+			}
 		} while_each_thread(g, p);
 		read_unlock(&tasklist_lock);
 
@@ -71,7 +78,7 @@ static int try_to_freeze_tasks(bool user
 			todo += wq_busy;
 		}
 
-		if (!todo || time_after(jiffies, end_time))
+		if (!todo || timedout)
 			break;
 
 		if (pm_wakeup_pending()) {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/profile.c linux-3.3.8-pax/kernel/profile.c
--- linux-3.3.8/kernel/profile.c	2012-01-08 19:48:28.831470886 +0100
+++ linux-3.3.8-pax/kernel/profile.c	2012-03-19 10:43:44.544034620 +0100
@@ -39,7 +39,7 @@ struct profile_hit {
 /* Oprofile timer tick hook */
 static int (*timer_hook)(struct pt_regs *) __read_mostly;
 
-static atomic_t *prof_buffer;
+static atomic_unchecked_t *prof_buffer;
 static unsigned long prof_len, prof_shift;
 
 int prof_on __read_mostly;
@@ -281,7 +281,7 @@ static void profile_flip_buffers(void)
 					hits[i].pc = 0;
 				continue;
 			}
-			atomic_add(hits[i].hits, &prof_buffer[hits[i].pc]);
+			atomic_add_unchecked(hits[i].hits, &prof_buffer[hits[i].pc]);
 			hits[i].hits = hits[i].pc = 0;
 		}
 	}
@@ -342,9 +342,9 @@ static void do_profile_hits(int type, vo
 	 * Add the current hit(s) and flush the write-queue out
 	 * to the global buffer:
 	 */
-	atomic_add(nr_hits, &prof_buffer[pc]);
+	atomic_add_unchecked(nr_hits, &prof_buffer[pc]);
 	for (i = 0; i < NR_PROFILE_HIT; ++i) {
-		atomic_add(hits[i].hits, &prof_buffer[hits[i].pc]);
+		atomic_add_unchecked(hits[i].hits, &prof_buffer[hits[i].pc]);
 		hits[i].pc = hits[i].hits = 0;
 	}
 out:
@@ -419,7 +419,7 @@ static void do_profile_hits(int type, vo
 {
 	unsigned long pc;
 	pc = ((unsigned long)__pc - (unsigned long)_stext) >> prof_shift;
-	atomic_add(nr_hits, &prof_buffer[min(pc, prof_len - 1)]);
+	atomic_add_unchecked(nr_hits, &prof_buffer[min(pc, prof_len - 1)]);
 }
 #endif /* !CONFIG_SMP */
 
@@ -517,7 +517,7 @@ read_profile(struct file *file, char __u
 			return -EFAULT;
 		buf++; p++; count--; read++;
 	}
-	pnt = (char *)prof_buffer + p - sizeof(atomic_t);
+	pnt = (char *)prof_buffer + p - sizeof(atomic_unchecked_t);
 	if (copy_to_user(buf, (void *)pnt, count))
 		return -EFAULT;
 	read += count;
@@ -548,7 +548,7 @@ static ssize_t write_profile(struct file
 	}
 #endif
 	profile_discard_flip_buffers();
-	memset(prof_buffer, 0, prof_len * sizeof(atomic_t));
+	memset(prof_buffer, 0, prof_len * sizeof(atomic_unchecked_t));
 	return count;
 }
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/ptrace.c linux-3.3.8-pax/kernel/ptrace.c
--- linux-3.3.8/kernel/ptrace.c	2012-03-19 10:39:11.892049175 +0100
+++ linux-3.3.8-pax/kernel/ptrace.c	2012-03-19 10:43:44.544034620 +0100
@@ -491,7 +491,7 @@ int ptrace_readdata(struct task_struct *
 				break;
 			return -EIO;
 		}
-		if (copy_to_user(dst, buf, retval))
+		if (retval > sizeof(buf) || copy_to_user(dst, buf, retval))
 			return -EFAULT;
 		copied += retval;
 		src += retval;
@@ -688,7 +688,7 @@ int ptrace_request(struct task_struct *c
 	bool seized = child->ptrace & PT_SEIZED;
 	int ret = -EIO;
 	siginfo_t siginfo, *si;
-	void __user *datavp = (void __user *) data;
+	void __user *datavp = (__force void __user *) data;
 	unsigned long __user *datalp = datavp;
 	unsigned long flags;
 
@@ -923,7 +923,7 @@ int generic_ptrace_peekdata(struct task_
 	copied = access_process_vm(tsk, addr, &tmp, sizeof(tmp), 0);
 	if (copied != sizeof(tmp))
 		return -EIO;
-	return put_user(tmp, (unsigned long __user *)data);
+	return put_user(tmp, (__force unsigned long __user *)data);
 }
 
 int generic_ptrace_pokedata(struct task_struct *tsk, unsigned long addr,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/rcutiny.c linux-3.3.8-pax/kernel/rcutiny.c
--- linux-3.3.8/kernel/rcutiny.c	2012-03-19 10:39:11.896049174 +0100
+++ linux-3.3.8-pax/kernel/rcutiny.c	2012-03-19 10:43:44.548034620 +0100
@@ -46,7 +46,7 @@
 struct rcu_ctrlblk;
 static void invoke_rcu_callbacks(void);
 static void __rcu_process_callbacks(struct rcu_ctrlblk *rcp);
-static void rcu_process_callbacks(struct softirq_action *unused);
+static void rcu_process_callbacks(void);
 static void __call_rcu(struct rcu_head *head,
 		       void (*func)(struct rcu_head *rcu),
 		       struct rcu_ctrlblk *rcp);
@@ -297,7 +297,7 @@ static void __rcu_process_callbacks(stru
 				      rcu_is_callbacks_kthread()));
 }
 
-static void rcu_process_callbacks(struct softirq_action *unused)
+static void rcu_process_callbacks(void)
 {
 	__rcu_process_callbacks(&rcu_sched_ctrlblk);
 	__rcu_process_callbacks(&rcu_bh_ctrlblk);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/rcutiny_plugin.h linux-3.3.8-pax/kernel/rcutiny_plugin.h
--- linux-3.3.8/kernel/rcutiny_plugin.h	2012-03-19 10:39:11.896049174 +0100
+++ linux-3.3.8-pax/kernel/rcutiny_plugin.h	2012-03-25 17:51:39.735239527 +0200
@@ -920,7 +920,7 @@ static int rcu_kthread(void *arg)
 		have_rcu_kthread_work = morework;
 		local_irq_restore(flags);
 		if (work)
-			rcu_process_callbacks(NULL);
+			rcu_process_callbacks();
 		schedule_timeout_interruptible(1); /* Leave CPU for others. */
 	}
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/rcutorture.c linux-3.3.8-pax/kernel/rcutorture.c
--- linux-3.3.8/kernel/rcutorture.c	2012-03-19 10:39:11.900049178 +0100
+++ linux-3.3.8-pax/kernel/rcutorture.c	2012-03-19 10:43:44.548034620 +0100
@@ -148,12 +148,12 @@ static DEFINE_PER_CPU(long [RCU_TORTURE_
 	{ 0 };
 static DEFINE_PER_CPU(long [RCU_TORTURE_PIPE_LEN + 1], rcu_torture_batch) =
 	{ 0 };
-static atomic_t rcu_torture_wcount[RCU_TORTURE_PIPE_LEN + 1];
-static atomic_t n_rcu_torture_alloc;
-static atomic_t n_rcu_torture_alloc_fail;
-static atomic_t n_rcu_torture_free;
-static atomic_t n_rcu_torture_mberror;
-static atomic_t n_rcu_torture_error;
+static atomic_unchecked_t rcu_torture_wcount[RCU_TORTURE_PIPE_LEN + 1];
+static atomic_unchecked_t n_rcu_torture_alloc;
+static atomic_unchecked_t n_rcu_torture_alloc_fail;
+static atomic_unchecked_t n_rcu_torture_free;
+static atomic_unchecked_t n_rcu_torture_mberror;
+static atomic_unchecked_t n_rcu_torture_error;
 static long n_rcu_torture_boost_ktrerror;
 static long n_rcu_torture_boost_rterror;
 static long n_rcu_torture_boost_failure;
@@ -243,11 +243,11 @@ rcu_torture_alloc(void)
 
 	spin_lock_bh(&rcu_torture_lock);
 	if (list_empty(&rcu_torture_freelist)) {
-		atomic_inc(&n_rcu_torture_alloc_fail);
+		atomic_inc_unchecked(&n_rcu_torture_alloc_fail);
 		spin_unlock_bh(&rcu_torture_lock);
 		return NULL;
 	}
-	atomic_inc(&n_rcu_torture_alloc);
+	atomic_inc_unchecked(&n_rcu_torture_alloc);
 	p = rcu_torture_freelist.next;
 	list_del_init(p);
 	spin_unlock_bh(&rcu_torture_lock);
@@ -260,7 +260,7 @@ rcu_torture_alloc(void)
 static void
 rcu_torture_free(struct rcu_torture *p)
 {
-	atomic_inc(&n_rcu_torture_free);
+	atomic_inc_unchecked(&n_rcu_torture_free);
 	spin_lock_bh(&rcu_torture_lock);
 	list_add_tail(&p->rtort_free, &rcu_torture_freelist);
 	spin_unlock_bh(&rcu_torture_lock);
@@ -380,7 +380,7 @@ rcu_torture_cb(struct rcu_head *p)
 	i = rp->rtort_pipe_count;
 	if (i > RCU_TORTURE_PIPE_LEN)
 		i = RCU_TORTURE_PIPE_LEN;
-	atomic_inc(&rcu_torture_wcount[i]);
+	atomic_inc_unchecked(&rcu_torture_wcount[i]);
 	if (++rp->rtort_pipe_count >= RCU_TORTURE_PIPE_LEN) {
 		rp->rtort_mbtest = 0;
 		rcu_torture_free(rp);
@@ -427,7 +427,7 @@ static void rcu_sync_torture_deferred_fr
 		i = rp->rtort_pipe_count;
 		if (i > RCU_TORTURE_PIPE_LEN)
 			i = RCU_TORTURE_PIPE_LEN;
-		atomic_inc(&rcu_torture_wcount[i]);
+		atomic_inc_unchecked(&rcu_torture_wcount[i]);
 		if (++rp->rtort_pipe_count >= RCU_TORTURE_PIPE_LEN) {
 			rp->rtort_mbtest = 0;
 			list_del(&rp->rtort_free);
@@ -916,7 +916,7 @@ rcu_torture_writer(void *arg)
 			i = old_rp->rtort_pipe_count;
 			if (i > RCU_TORTURE_PIPE_LEN)
 				i = RCU_TORTURE_PIPE_LEN;
-			atomic_inc(&rcu_torture_wcount[i]);
+			atomic_inc_unchecked(&rcu_torture_wcount[i]);
 			old_rp->rtort_pipe_count++;
 			cur_ops->deferred_free(old_rp);
 		}
@@ -997,7 +997,7 @@ static void rcu_torture_timer(unsigned l
 		return;
 	}
 	if (p->rtort_mbtest == 0)
-		atomic_inc(&n_rcu_torture_mberror);
+		atomic_inc_unchecked(&n_rcu_torture_mberror);
 	spin_lock(&rand_lock);
 	cur_ops->read_delay(&rand);
 	n_rcu_torture_timers++;
@@ -1061,7 +1061,7 @@ rcu_torture_reader(void *arg)
 			continue;
 		}
 		if (p->rtort_mbtest == 0)
-			atomic_inc(&n_rcu_torture_mberror);
+			atomic_inc_unchecked(&n_rcu_torture_mberror);
 		cur_ops->read_delay(&rand);
 		preempt_disable();
 		pipe_count = p->rtort_pipe_count;
@@ -1123,10 +1123,10 @@ rcu_torture_printk(char *page)
 		       rcu_torture_current,
 		       rcu_torture_current_version,
 		       list_empty(&rcu_torture_freelist),
-		       atomic_read(&n_rcu_torture_alloc),
-		       atomic_read(&n_rcu_torture_alloc_fail),
-		       atomic_read(&n_rcu_torture_free),
-		       atomic_read(&n_rcu_torture_mberror),
+		       atomic_read_unchecked(&n_rcu_torture_alloc),
+		       atomic_read_unchecked(&n_rcu_torture_alloc_fail),
+		       atomic_read_unchecked(&n_rcu_torture_free),
+		       atomic_read_unchecked(&n_rcu_torture_mberror),
 		       n_rcu_torture_boost_ktrerror,
 		       n_rcu_torture_boost_rterror,
 		       n_rcu_torture_boost_failure,
@@ -1136,7 +1136,7 @@ rcu_torture_printk(char *page)
 		       n_online_attempts,
 		       n_offline_successes,
 		       n_offline_attempts);
-	if (atomic_read(&n_rcu_torture_mberror) != 0 ||
+	if (atomic_read_unchecked(&n_rcu_torture_mberror) != 0 ||
 	    n_rcu_torture_boost_ktrerror != 0 ||
 	    n_rcu_torture_boost_rterror != 0 ||
 	    n_rcu_torture_boost_failure != 0)
@@ -1144,7 +1144,7 @@ rcu_torture_printk(char *page)
 	cnt += sprintf(&page[cnt], "\n%s%s ", torture_type, TORTURE_FLAG);
 	if (i > 1) {
 		cnt += sprintf(&page[cnt], "!!! ");
-		atomic_inc(&n_rcu_torture_error);
+		atomic_inc_unchecked(&n_rcu_torture_error);
 		WARN_ON_ONCE(1);
 	}
 	cnt += sprintf(&page[cnt], "Reader Pipe: ");
@@ -1158,7 +1158,7 @@ rcu_torture_printk(char *page)
 	cnt += sprintf(&page[cnt], "Free-Block Circulation: ");
 	for (i = 0; i < RCU_TORTURE_PIPE_LEN + 1; i++) {
 		cnt += sprintf(&page[cnt], " %d",
-			       atomic_read(&rcu_torture_wcount[i]));
+			       atomic_read_unchecked(&rcu_torture_wcount[i]));
 	}
 	cnt += sprintf(&page[cnt], "\n");
 	if (cur_ops->stats)
@@ -1600,7 +1600,7 @@ rcu_torture_cleanup(void)
 
 	if (cur_ops->cleanup)
 		cur_ops->cleanup();
-	if (atomic_read(&n_rcu_torture_error))
+	if (atomic_read_unchecked(&n_rcu_torture_error))
 		rcu_torture_print_module_parms(cur_ops, "End of test: FAILURE");
 	else
 		rcu_torture_print_module_parms(cur_ops, "End of test: SUCCESS");
@@ -1664,17 +1664,17 @@ rcu_torture_init(void)
 
 	rcu_torture_current = NULL;
 	rcu_torture_current_version = 0;
-	atomic_set(&n_rcu_torture_alloc, 0);
-	atomic_set(&n_rcu_torture_alloc_fail, 0);
-	atomic_set(&n_rcu_torture_free, 0);
-	atomic_set(&n_rcu_torture_mberror, 0);
-	atomic_set(&n_rcu_torture_error, 0);
+	atomic_set_unchecked(&n_rcu_torture_alloc, 0);
+	atomic_set_unchecked(&n_rcu_torture_alloc_fail, 0);
+	atomic_set_unchecked(&n_rcu_torture_free, 0);
+	atomic_set_unchecked(&n_rcu_torture_mberror, 0);
+	atomic_set_unchecked(&n_rcu_torture_error, 0);
 	n_rcu_torture_boost_ktrerror = 0;
 	n_rcu_torture_boost_rterror = 0;
 	n_rcu_torture_boost_failure = 0;
 	n_rcu_torture_boosts = 0;
 	for (i = 0; i < RCU_TORTURE_PIPE_LEN + 1; i++)
-		atomic_set(&rcu_torture_wcount[i], 0);
+		atomic_set_unchecked(&rcu_torture_wcount[i], 0);
 	for_each_possible_cpu(cpu) {
 		for (i = 0; i < RCU_TORTURE_PIPE_LEN + 1; i++) {
 			per_cpu(rcu_torture_count, cpu)[i] = 0;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/rcutree.c linux-3.3.8-pax/kernel/rcutree.c
--- linux-3.3.8/kernel/rcutree.c	2012-03-19 10:39:11.900049178 +0100
+++ linux-3.3.8-pax/kernel/rcutree.c	2012-03-19 10:43:44.548034620 +0100
@@ -363,9 +363,9 @@ static void rcu_idle_enter_common(struct
 	rcu_prepare_for_idle(smp_processor_id());
 	/* CPUs seeing atomic_inc() must see prior RCU read-side crit sects */
 	smp_mb__before_atomic_inc();  /* See above. */
-	atomic_inc(&rdtp->dynticks);
+	atomic_inc_unchecked(&rdtp->dynticks);
 	smp_mb__after_atomic_inc();  /* Force ordering with next sojourn. */
-	WARN_ON_ONCE(atomic_read(&rdtp->dynticks) & 0x1);
+	WARN_ON_ONCE(atomic_read_unchecked(&rdtp->dynticks) & 0x1);
 }
 
 /**
@@ -438,10 +438,10 @@ void rcu_irq_exit(void)
 static void rcu_idle_exit_common(struct rcu_dynticks *rdtp, long long oldval)
 {
 	smp_mb__before_atomic_inc();  /* Force ordering w/previous sojourn. */
-	atomic_inc(&rdtp->dynticks);
+	atomic_inc_unchecked(&rdtp->dynticks);
 	/* CPUs seeing atomic_inc() must see later RCU read-side crit sects */
 	smp_mb__after_atomic_inc();  /* See above. */
-	WARN_ON_ONCE(!(atomic_read(&rdtp->dynticks) & 0x1));
+	WARN_ON_ONCE(!(atomic_read_unchecked(&rdtp->dynticks) & 0x1));
 	rcu_cleanup_after_idle(smp_processor_id());
 	trace_rcu_dyntick("End", oldval, rdtp->dynticks_nesting);
 	if (!is_idle_task(current)) {
@@ -531,14 +531,14 @@ void rcu_nmi_enter(void)
 	struct rcu_dynticks *rdtp = &__get_cpu_var(rcu_dynticks);
 
 	if (rdtp->dynticks_nmi_nesting == 0 &&
-	    (atomic_read(&rdtp->dynticks) & 0x1))
+	    (atomic_read_unchecked(&rdtp->dynticks) & 0x1))
 		return;
 	rdtp->dynticks_nmi_nesting++;
 	smp_mb__before_atomic_inc();  /* Force delay from prior write. */
-	atomic_inc(&rdtp->dynticks);
+	atomic_inc_unchecked(&rdtp->dynticks);
 	/* CPUs seeing atomic_inc() must see later RCU read-side crit sects */
 	smp_mb__after_atomic_inc();  /* See above. */
-	WARN_ON_ONCE(!(atomic_read(&rdtp->dynticks) & 0x1));
+	WARN_ON_ONCE(!(atomic_read_unchecked(&rdtp->dynticks) & 0x1));
 }
 
 /**
@@ -557,9 +557,9 @@ void rcu_nmi_exit(void)
 		return;
 	/* CPUs seeing atomic_inc() must see prior RCU read-side crit sects */
 	smp_mb__before_atomic_inc();  /* See above. */
-	atomic_inc(&rdtp->dynticks);
+	atomic_inc_unchecked(&rdtp->dynticks);
 	smp_mb__after_atomic_inc();  /* Force delay to next write. */
-	WARN_ON_ONCE(atomic_read(&rdtp->dynticks) & 0x1);
+	WARN_ON_ONCE(atomic_read_unchecked(&rdtp->dynticks) & 0x1);
 }
 
 #ifdef CONFIG_PROVE_RCU
@@ -575,7 +575,7 @@ int rcu_is_cpu_idle(void)
 	int ret;
 
 	preempt_disable();
-	ret = (atomic_read(&__get_cpu_var(rcu_dynticks).dynticks) & 0x1) == 0;
+	ret = (atomic_read_unchecked(&__get_cpu_var(rcu_dynticks).dynticks) & 0x1) == 0;
 	preempt_enable();
 	return ret;
 }
@@ -604,7 +604,7 @@ int rcu_is_cpu_rrupt_from_idle(void)
  */
 static int dyntick_save_progress_counter(struct rcu_data *rdp)
 {
-	rdp->dynticks_snap = atomic_add_return(0, &rdp->dynticks->dynticks);
+	rdp->dynticks_snap = atomic_add_return_unchecked(0, &rdp->dynticks->dynticks);
 	return (rdp->dynticks_snap & 0x1) == 0;
 }
 
@@ -619,7 +619,7 @@ static int rcu_implicit_dynticks_qs(stru
 	unsigned int curr;
 	unsigned int snap;
 
-	curr = (unsigned int)atomic_add_return(0, &rdp->dynticks->dynticks);
+	curr = (unsigned int)atomic_add_return_unchecked(0, &rdp->dynticks->dynticks);
 	snap = (unsigned int)rdp->dynticks_snap;
 
 	/*
@@ -1667,7 +1667,7 @@ __rcu_process_callbacks(struct rcu_state
 /*
  * Do RCU core processing for the current CPU.
  */
-static void rcu_process_callbacks(struct softirq_action *unused)
+static void rcu_process_callbacks(void)
 {
 	trace_rcu_utilization("Start RCU core");
 	__rcu_process_callbacks(&rcu_sched_state,
@@ -2030,7 +2030,7 @@ rcu_boot_init_percpu_data(int cpu, struc
 	rdp->qlen = 0;
 	rdp->dynticks = &per_cpu(rcu_dynticks, cpu);
 	WARN_ON_ONCE(rdp->dynticks->dynticks_nesting != DYNTICK_TASK_NESTING);
-	WARN_ON_ONCE(atomic_read(&rdp->dynticks->dynticks) != 1);
+	WARN_ON_ONCE(atomic_read_unchecked(&rdp->dynticks->dynticks) != 1);
 	rdp->cpu = cpu;
 	rdp->rsp = rsp;
 	raw_spin_unlock_irqrestore(&rnp->lock, flags);
@@ -2058,8 +2058,8 @@ rcu_init_percpu_data(int cpu, struct rcu
 	rdp->n_force_qs_snap = rsp->n_force_qs;
 	rdp->blimit = blimit;
 	rdp->dynticks->dynticks_nesting = DYNTICK_TASK_NESTING;
-	atomic_set(&rdp->dynticks->dynticks,
-		   (atomic_read(&rdp->dynticks->dynticks) & ~0x1) + 1);
+	atomic_set_unchecked(&rdp->dynticks->dynticks,
+		   (atomic_read_unchecked(&rdp->dynticks->dynticks) & ~0x1) + 1);
 	rcu_prepare_for_idle_init(cpu);
 	raw_spin_unlock(&rnp->lock);		/* irqs remain disabled. */
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/rcutree.h linux-3.3.8-pax/kernel/rcutree.h
--- linux-3.3.8/kernel/rcutree.h	2012-03-19 10:39:11.904049182 +0100
+++ linux-3.3.8-pax/kernel/rcutree.h	2012-03-19 10:43:44.552034621 +0100
@@ -87,7 +87,7 @@ struct rcu_dynticks {
 	long long dynticks_nesting; /* Track irq/process nesting level. */
 				    /* Process level is worth LLONG_MAX/2. */
 	int dynticks_nmi_nesting;   /* Track NMI nesting level. */
-	atomic_t dynticks;	    /* Even value for idle, else odd. */
+	atomic_unchecked_t dynticks;/* Even value for idle, else odd. */
 };
 
 /* RCU's kthread states for tracing. */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/rcutree_plugin.h linux-3.3.8-pax/kernel/rcutree_plugin.h
--- linux-3.3.8/kernel/rcutree_plugin.h	2012-03-19 10:39:11.904049182 +0100
+++ linux-3.3.8-pax/kernel/rcutree_plugin.h	2012-03-19 10:43:44.552034621 +0100
@@ -850,7 +850,7 @@ void synchronize_rcu_expedited(void)
 
 	/* Clean up and exit. */
 	smp_mb(); /* ensure expedited GP seen before counter increment. */
-	ACCESS_ONCE(sync_rcu_preempt_exp_count)++;
+	ACCESS_ONCE_RW(sync_rcu_preempt_exp_count)++;
 unlock_mb_ret:
 	mutex_unlock(&sync_rcu_preempt_exp_mutex);
 mb_ret:
@@ -1833,8 +1833,8 @@ EXPORT_SYMBOL_GPL(synchronize_sched_expe
 
 #else /* #ifndef CONFIG_SMP */
 
-static atomic_t sync_sched_expedited_started = ATOMIC_INIT(0);
-static atomic_t sync_sched_expedited_done = ATOMIC_INIT(0);
+static atomic_unchecked_t sync_sched_expedited_started = ATOMIC_INIT(0);
+static atomic_unchecked_t sync_sched_expedited_done = ATOMIC_INIT(0);
 
 static int synchronize_sched_expedited_cpu_stop(void *data)
 {
@@ -1889,7 +1889,7 @@ void synchronize_sched_expedited(void)
 	int firstsnap, s, snap, trycount = 0;
 
 	/* Note that atomic_inc_return() implies full memory barrier. */
-	firstsnap = snap = atomic_inc_return(&sync_sched_expedited_started);
+	firstsnap = snap = atomic_inc_return_unchecked(&sync_sched_expedited_started);
 	get_online_cpus();
 
 	/*
@@ -1910,7 +1910,7 @@ void synchronize_sched_expedited(void)
 		}
 
 		/* Check to see if someone else did our work for us. */
-		s = atomic_read(&sync_sched_expedited_done);
+		s = atomic_read_unchecked(&sync_sched_expedited_done);
 		if (UINT_CMP_GE((unsigned)s, (unsigned)firstsnap)) {
 			smp_mb(); /* ensure test happens before caller kfree */
 			return;
@@ -1925,7 +1925,7 @@ void synchronize_sched_expedited(void)
 		 * grace period works for us.
 		 */
 		get_online_cpus();
-		snap = atomic_read(&sync_sched_expedited_started);
+		snap = atomic_read_unchecked(&sync_sched_expedited_started);
 		smp_mb(); /* ensure read is before try_stop_cpus(). */
 	}
 
@@ -1936,12 +1936,12 @@ void synchronize_sched_expedited(void)
 	 * than we did beat us to the punch.
 	 */
 	do {
-		s = atomic_read(&sync_sched_expedited_done);
+		s = atomic_read_unchecked(&sync_sched_expedited_done);
 		if (UINT_CMP_GE((unsigned)s, (unsigned)snap)) {
 			smp_mb(); /* ensure test happens before caller kfree */
 			break;
 		}
-	} while (atomic_cmpxchg(&sync_sched_expedited_done, s, snap) != s);
+	} while (atomic_cmpxchg_unchecked(&sync_sched_expedited_done, s, snap) != s);
 
 	put_online_cpus();
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/rcutree_trace.c linux-3.3.8-pax/kernel/rcutree_trace.c
--- linux-3.3.8/kernel/rcutree_trace.c	2012-03-19 10:39:11.904049182 +0100
+++ linux-3.3.8-pax/kernel/rcutree_trace.c	2012-03-19 10:43:44.552034621 +0100
@@ -68,7 +68,7 @@ static void print_one_rcu_data(struct se
 		   rdp->passed_quiesce, rdp->passed_quiesce_gpnum,
 		   rdp->qs_pending);
 	seq_printf(m, " dt=%d/%llx/%d df=%lu",
-		   atomic_read(&rdp->dynticks->dynticks),
+		   atomic_read_unchecked(&rdp->dynticks->dynticks),
 		   rdp->dynticks->dynticks_nesting,
 		   rdp->dynticks->dynticks_nmi_nesting,
 		   rdp->dynticks_fqs);
@@ -140,7 +140,7 @@ static void print_one_rcu_data_csv(struc
 		   rdp->passed_quiesce, rdp->passed_quiesce_gpnum,
 		   rdp->qs_pending);
 	seq_printf(m, ",%d,%llx,%d,%lu",
-		   atomic_read(&rdp->dynticks->dynticks),
+		   atomic_read_unchecked(&rdp->dynticks->dynticks),
 		   rdp->dynticks->dynticks_nesting,
 		   rdp->dynticks->dynticks_nmi_nesting,
 		   rdp->dynticks_fqs);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/rtmutex-tester.c linux-3.3.8-pax/kernel/rtmutex-tester.c
--- linux-3.3.8/kernel/rtmutex-tester.c	2012-03-19 10:39:11.908049183 +0100
+++ linux-3.3.8-pax/kernel/rtmutex-tester.c	2012-03-19 10:43:44.556034622 +0100
@@ -20,7 +20,7 @@
 #define MAX_RT_TEST_MUTEXES	8
 
 static spinlock_t rttest_lock;
-static atomic_t rttest_event;
+static atomic_unchecked_t rttest_event;
 
 struct test_thread_data {
 	int			opcode;
@@ -61,7 +61,7 @@ static int handle_op(struct test_thread_
 
 	case RTTEST_LOCKCONT:
 		td->mutexes[td->opdata] = 1;
-		td->event = atomic_add_return(1, &rttest_event);
+		td->event = atomic_add_return_unchecked(1, &rttest_event);
 		return 0;
 
 	case RTTEST_RESET:
@@ -74,7 +74,7 @@ static int handle_op(struct test_thread_
 		return 0;
 
 	case RTTEST_RESETEVENT:
-		atomic_set(&rttest_event, 0);
+		atomic_set_unchecked(&rttest_event, 0);
 		return 0;
 
 	default:
@@ -91,9 +91,9 @@ static int handle_op(struct test_thread_
 			return ret;
 
 		td->mutexes[id] = 1;
-		td->event = atomic_add_return(1, &rttest_event);
+		td->event = atomic_add_return_unchecked(1, &rttest_event);
 		rt_mutex_lock(&mutexes[id]);
-		td->event = atomic_add_return(1, &rttest_event);
+		td->event = atomic_add_return_unchecked(1, &rttest_event);
 		td->mutexes[id] = 4;
 		return 0;
 
@@ -104,9 +104,9 @@ static int handle_op(struct test_thread_
 			return ret;
 
 		td->mutexes[id] = 1;
-		td->event = atomic_add_return(1, &rttest_event);
+		td->event = atomic_add_return_unchecked(1, &rttest_event);
 		ret = rt_mutex_lock_interruptible(&mutexes[id], 0);
-		td->event = atomic_add_return(1, &rttest_event);
+		td->event = atomic_add_return_unchecked(1, &rttest_event);
 		td->mutexes[id] = ret ? 0 : 4;
 		return ret ? -EINTR : 0;
 
@@ -115,9 +115,9 @@ static int handle_op(struct test_thread_
 		if (id < 0 || id >= MAX_RT_TEST_MUTEXES || td->mutexes[id] != 4)
 			return ret;
 
-		td->event = atomic_add_return(1, &rttest_event);
+		td->event = atomic_add_return_unchecked(1, &rttest_event);
 		rt_mutex_unlock(&mutexes[id]);
-		td->event = atomic_add_return(1, &rttest_event);
+		td->event = atomic_add_return_unchecked(1, &rttest_event);
 		td->mutexes[id] = 0;
 		return 0;
 
@@ -164,7 +164,7 @@ void schedule_rt_mutex_test(struct rt_mu
 			break;
 
 		td->mutexes[dat] = 2;
-		td->event = atomic_add_return(1, &rttest_event);
+		td->event = atomic_add_return_unchecked(1, &rttest_event);
 		break;
 
 	default:
@@ -184,7 +184,7 @@ void schedule_rt_mutex_test(struct rt_mu
 			return;
 
 		td->mutexes[dat] = 3;
-		td->event = atomic_add_return(1, &rttest_event);
+		td->event = atomic_add_return_unchecked(1, &rttest_event);
 		break;
 
 	case RTTEST_LOCKNOWAIT:
@@ -196,7 +196,7 @@ void schedule_rt_mutex_test(struct rt_mu
 			return;
 
 		td->mutexes[dat] = 1;
-		td->event = atomic_add_return(1, &rttest_event);
+		td->event = atomic_add_return_unchecked(1, &rttest_event);
 		return;
 
 	default:
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/sched/auto_group.c linux-3.3.8-pax/kernel/sched/auto_group.c
--- linux-3.3.8/kernel/sched/auto_group.c	2012-03-19 10:39:11.916049181 +0100
+++ linux-3.3.8-pax/kernel/sched/auto_group.c	2012-03-19 10:43:44.556034622 +0100
@@ -11,7 +11,7 @@
 
 unsigned int __read_mostly sysctl_sched_autogroup_enabled = 1;
 static struct autogroup autogroup_default;
-static atomic_t autogroup_seq_nr;
+static atomic_unchecked_t autogroup_seq_nr;
 
 void __init autogroup_init(struct task_struct *init_task)
 {
@@ -78,7 +78,7 @@ static inline struct autogroup *autogrou
 
 	kref_init(&ag->kref);
 	init_rwsem(&ag->lock);
-	ag->id = atomic_inc_return(&autogroup_seq_nr);
+	ag->id = atomic_inc_return_unchecked(&autogroup_seq_nr);
 	ag->tg = tg;
 #ifdef CONFIG_RT_GROUP_SCHED
 	/*
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/sched/fair.c linux-3.3.8-pax/kernel/sched/fair.c
--- linux-3.3.8/kernel/sched/fair.c	2012-03-19 10:39:11.928049172 +0100
+++ linux-3.3.8-pax/kernel/sched/fair.c	2012-03-19 10:43:44.556034622 +0100
@@ -5147,7 +5147,7 @@ static void nohz_idle_balance(int this_c
  * run_rebalance_domains is triggered when needed from the scheduler tick.
  * Also triggered for nohz idle balancing (with nohz_balancing_kick set).
  */
-static void run_rebalance_domains(struct softirq_action *h)
+static void run_rebalance_domains(void)
 {
 	int this_cpu = smp_processor_id();
 	struct rq *this_rq = cpu_rq(this_cpu);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/signal.c linux-3.3.8-pax/kernel/signal.c
--- linux-3.3.8/kernel/signal.c	2012-05-07 20:26:56.103609313 +0200
+++ linux-3.3.8-pax/kernel/signal.c	2012-05-07 20:27:02.135608991 +0200
@@ -46,12 +46,12 @@ static struct kmem_cache *sigqueue_cache
 
 int print_fatal_signals __read_mostly;
 
-static void __user *sig_handler(struct task_struct *t, int sig)
+static __sighandler_t sig_handler(struct task_struct *t, int sig)
 {
 	return t->sighand->action[sig - 1].sa.sa_handler;
 }
 
-static int sig_handler_ignored(void __user *handler, int sig)
+static int sig_handler_ignored(__sighandler_t handler, int sig)
 {
 	/* Is it explicitly or implicitly ignored? */
 	return handler == SIG_IGN ||
@@ -61,7 +61,7 @@ static int sig_handler_ignored(void __us
 static int sig_task_ignored(struct task_struct *t, int sig,
 		int from_ancestor_ns)
 {
-	void __user *handler;
+	__sighandler_t handler;
 
 	handler = sig_handler(t, sig);
 
@@ -489,7 +489,7 @@ flush_signal_handlers(struct task_struct
 
 int unhandled_signal(struct task_struct *tsk, int sig)
 {
-	void __user *handler = tsk->sighand->action[sig-1].sa.sa_handler;
+	__sighandler_t handler = tsk->sighand->action[sig-1].sa.sa_handler;
 	if (is_global_init(tsk))
 		return 1;
 	if (handler != SIG_IGN && handler != SIG_DFL)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/smp.c linux-3.3.8-pax/kernel/smp.c
--- linux-3.3.8/kernel/smp.c	2012-01-08 19:48:28.995470877 +0100
+++ linux-3.3.8-pax/kernel/smp.c	2012-03-19 10:43:44.560034622 +0100
@@ -580,22 +580,22 @@ int smp_call_function(smp_call_func_t fu
 }
 EXPORT_SYMBOL(smp_call_function);
 
-void ipi_call_lock(void)
+void ipi_call_lock(void) __acquires(call_function.lock)
 {
 	raw_spin_lock(&call_function.lock);
 }
 
-void ipi_call_unlock(void)
+void ipi_call_unlock(void) __releases(call_function.lock)
 {
 	raw_spin_unlock(&call_function.lock);
 }
 
-void ipi_call_lock_irq(void)
+void ipi_call_lock_irq(void) __acquires(call_function.lock)
 {
 	raw_spin_lock_irq(&call_function.lock);
 }
 
-void ipi_call_unlock_irq(void)
+void ipi_call_unlock_irq(void) __releases(call_function.lock)
 {
 	raw_spin_unlock_irq(&call_function.lock);
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/softirq.c linux-3.3.8-pax/kernel/softirq.c
--- linux-3.3.8/kernel/softirq.c	2012-03-19 10:39:11.944049182 +0100
+++ linux-3.3.8-pax/kernel/softirq.c	2012-03-19 10:43:44.564034621 +0100
@@ -56,7 +56,7 @@ static struct softirq_action softirq_vec
 
 DEFINE_PER_CPU(struct task_struct *, ksoftirqd);
 
-char *softirq_to_name[NR_SOFTIRQS] = {
+const char * const softirq_to_name[NR_SOFTIRQS] = {
 	"HI", "TIMER", "NET_TX", "NET_RX", "BLOCK", "BLOCK_IOPOLL",
 	"TASKLET", "SCHED", "HRTIMER", "RCU"
 };
@@ -235,7 +235,7 @@ restart:
 			kstat_incr_softirqs_this_cpu(vec_nr);
 
 			trace_softirq_entry(vec_nr);
-			h->action(h);
+			h->action();
 			trace_softirq_exit(vec_nr);
 			if (unlikely(prev_count != preempt_count())) {
 				printk(KERN_ERR "huh, entered softirq %u %s %p"
@@ -385,9 +385,11 @@ void raise_softirq(unsigned int nr)
 	local_irq_restore(flags);
 }
 
-void open_softirq(int nr, void (*action)(struct softirq_action *))
+void open_softirq(int nr, void (*action)(void))
 {
-	softirq_vec[nr].action = action;
+	pax_open_kernel();
+	*(void **)&softirq_vec[nr].action = action;
+	pax_close_kernel();
 }
 
 /*
@@ -441,7 +443,7 @@ void __tasklet_hi_schedule_first(struct
 
 EXPORT_SYMBOL(__tasklet_hi_schedule_first);
 
-static void tasklet_action(struct softirq_action *a)
+static void tasklet_action(void)
 {
 	struct tasklet_struct *list;
 
@@ -476,7 +478,7 @@ static void tasklet_action(struct softir
 	}
 }
 
-static void tasklet_hi_action(struct softirq_action *a)
+static void tasklet_hi_action(void)
 {
 	struct tasklet_struct *list;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/sys.c linux-3.3.8-pax/kernel/sys.c
--- linux-3.3.8/kernel/sys.c	2012-03-19 10:39:11.944049182 +0100
+++ linux-3.3.8-pax/kernel/sys.c	2012-03-19 10:43:44.564034621 +0100
@@ -1243,19 +1243,19 @@ SYSCALL_DEFINE1(olduname, struct oldold_
 		return -EFAULT;
 
 	down_read(&uts_sem);
-	error = __copy_to_user(&name->sysname, &utsname()->sysname,
+	error = __copy_to_user(name->sysname, &utsname()->sysname,
 			       __OLD_UTS_LEN);
 	error |= __put_user(0, name->sysname + __OLD_UTS_LEN);
-	error |= __copy_to_user(&name->nodename, &utsname()->nodename,
+	error |= __copy_to_user(name->nodename, &utsname()->nodename,
 				__OLD_UTS_LEN);
 	error |= __put_user(0, name->nodename + __OLD_UTS_LEN);
-	error |= __copy_to_user(&name->release, &utsname()->release,
+	error |= __copy_to_user(name->release, &utsname()->release,
 				__OLD_UTS_LEN);
 	error |= __put_user(0, name->release + __OLD_UTS_LEN);
-	error |= __copy_to_user(&name->version, &utsname()->version,
+	error |= __copy_to_user(name->version, &utsname()->version,
 				__OLD_UTS_LEN);
 	error |= __put_user(0, name->version + __OLD_UTS_LEN);
-	error |= __copy_to_user(&name->machine, &utsname()->machine,
+	error |= __copy_to_user(name->machine, &utsname()->machine,
 				__OLD_UTS_LEN);
 	error |= __put_user(0, name->machine + __OLD_UTS_LEN);
 	up_read(&uts_sem);
@@ -1838,7 +1838,7 @@ SYSCALL_DEFINE5(prctl, int, option, unsi
 			error = get_dumpable(me->mm);
 			break;
 		case PR_SET_DUMPABLE:
-			if (arg2 < 0 || arg2 > 1) {
+			if (arg2 > 1) {
 				error = -EINVAL;
 				break;
 			}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/sysctl_binary.c linux-3.3.8-pax/kernel/sysctl_binary.c
--- linux-3.3.8/kernel/sysctl_binary.c	2012-01-08 19:48:29.027470875 +0100
+++ linux-3.3.8-pax/kernel/sysctl_binary.c	2012-03-19 10:43:44.564034621 +0100
@@ -989,7 +989,7 @@ static ssize_t bin_intvec(struct file *f
 		int i;
 
 		set_fs(KERNEL_DS);
-		result = vfs_read(file, buffer, BUFSZ - 1, &pos);
+		result = vfs_read(file, (char __force_user *)buffer, BUFSZ - 1, &pos);
 		set_fs(old_fs);
 		if (result < 0)
 			goto out_kfree;
@@ -1034,7 +1034,7 @@ static ssize_t bin_intvec(struct file *f
 		}
 
 		set_fs(KERNEL_DS);
-		result = vfs_write(file, buffer, str - buffer, &pos);
+		result = vfs_write(file, (const char __force_user *)buffer, str - buffer, &pos);
 		set_fs(old_fs);
 		if (result < 0)
 			goto out_kfree;
@@ -1067,7 +1067,7 @@ static ssize_t bin_ulongvec(struct file
 		int i;
 
 		set_fs(KERNEL_DS);
-		result = vfs_read(file, buffer, BUFSZ - 1, &pos);
+		result = vfs_read(file, (char __force_user *)buffer, BUFSZ - 1, &pos);
 		set_fs(old_fs);
 		if (result < 0)
 			goto out_kfree;
@@ -1112,7 +1112,7 @@ static ssize_t bin_ulongvec(struct file
 		}
 
 		set_fs(KERNEL_DS);
-		result = vfs_write(file, buffer, str - buffer, &pos);
+		result = vfs_write(file, (const char __force_user *)buffer, str - buffer, &pos);
 		set_fs(old_fs);
 		if (result < 0)
 			goto out_kfree;
@@ -1138,7 +1138,7 @@ static ssize_t bin_uuid(struct file *fil
 		int i;
 
 		set_fs(KERNEL_DS);
-		result = vfs_read(file, buf, sizeof(buf) - 1, &pos);
+		result = vfs_read(file, (char __force_user *)buf, sizeof(buf) - 1, &pos);
 		set_fs(old_fs);
 		if (result < 0)
 			goto out;
@@ -1185,7 +1185,7 @@ static ssize_t bin_dn_node_address(struc
 		__le16 dnaddr;
 
 		set_fs(KERNEL_DS);
-		result = vfs_read(file, buf, sizeof(buf) - 1, &pos);
+		result = vfs_read(file, (char __force_user *)buf, sizeof(buf) - 1, &pos);
 		set_fs(old_fs);
 		if (result < 0)
 			goto out;
@@ -1233,7 +1233,7 @@ static ssize_t bin_dn_node_address(struc
 				le16_to_cpu(dnaddr) & 0x3ff);
 
 		set_fs(KERNEL_DS);
-		result = vfs_write(file, buf, len, &pos);
+		result = vfs_write(file, (const char __force_user *)buf, len, &pos);
 		set_fs(old_fs);
 		if (result < 0)
 			goto out;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/sysctl.c linux-3.3.8-pax/kernel/sysctl.c
--- linux-3.3.8/kernel/sysctl.c	2012-04-15 15:08:29.426606347 +0200
+++ linux-3.3.8-pax/kernel/sysctl.c	2012-04-15 15:08:34.686606071 +0200
@@ -220,6 +220,20 @@ extern struct ctl_table epoll_table[];
 int sysctl_legacy_va_layout;
 #endif
 
+#ifdef CONFIG_PAX_SOFTMODE
+static ctl_table pax_table[] = {
+	{
+		.procname	= "softmode",
+		.data		= &pax_softmode,
+		.maxlen		= sizeof(unsigned int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec,
+	},
+
+	{ }
+};
+#endif
+
 /* The default sysctl tables: */
 
 static struct ctl_table root_table[] = {
@@ -266,6 +280,15 @@ static int max_extfrag_threshold = 1000;
 #endif
 
 static struct ctl_table kern_table[] = {
+
+#ifdef CONFIG_PAX_SOFTMODE
+	{
+		.procname	= "pax",
+		.mode		= 0500,
+		.child		= pax_table,
+	},
+#endif
+
 	{
 		.procname	= "sched_child_runs_first",
 		.data		= &sysctl_sched_child_runs_first,
@@ -1225,6 +1248,13 @@ static struct ctl_table vm_table[] = {
 		.proc_handler	= proc_dointvec_minmax,
 		.extra1		= &zero,
 	},
+	{
+		.procname	= "heap_stack_gap",
+		.data		= &sysctl_heap_stack_gap,
+		.maxlen		= sizeof(sysctl_heap_stack_gap),
+		.mode		= 0644,
+		.proc_handler	= proc_doulongvec_minmax,
+	},
 #else
 	{
 		.procname	= "nr_trim_pages",
@@ -2238,6 +2268,8 @@ static int proc_put_long(void __user **b
 	len = strlen(tmp);
 	if (len > *size)
 		len = *size;
+	if (len > sizeof(tmp))
+		len = sizeof(tmp);
 	if (copy_to_user(*buf, tmp, len))
 		return -EFAULT;
 	*size -= len;
@@ -2554,8 +2586,11 @@ static int __do_proc_doulongvec_minmax(v
 			*i = val;
 		} else {
 			val = convdiv * (*i) / convmul;
-			if (!first)
+			if (!first) {
 				err = proc_put_char(&buffer, &left, '\t');
+				if (err)
+					break;
+			}
 			err = proc_put_long(&buffer, &left, val, false);
 			if (err)
 				break;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/time/alarmtimer.c linux-3.3.8-pax/kernel/time/alarmtimer.c
--- linux-3.3.8/kernel/time/alarmtimer.c	2012-01-08 19:48:29.039470875 +0100
+++ linux-3.3.8-pax/kernel/time/alarmtimer.c	2012-03-19 10:43:44.568034620 +0100
@@ -773,7 +773,7 @@ static int __init alarmtimer_init(void)
 	struct platform_device *pdev;
 	int error = 0;
 	int i;
-	struct k_clock alarm_clock = {
+	static struct k_clock alarm_clock = {
 		.clock_getres	= alarm_clock_getres,
 		.clock_get	= alarm_clock_get,
 		.timer_create	= alarm_timer_create,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/time/tick-broadcast.c linux-3.3.8-pax/kernel/time/tick-broadcast.c
--- linux-3.3.8/kernel/time/tick-broadcast.c	2012-01-08 19:48:29.063470873 +0100
+++ linux-3.3.8-pax/kernel/time/tick-broadcast.c	2012-03-19 10:43:44.572034619 +0100
@@ -115,7 +115,7 @@ int tick_device_uses_broadcast(struct cl
 		 * then clear the broadcast bit.
 		 */
 		if (!(dev->features & CLOCK_EVT_FEAT_C3STOP)) {
-			int cpu = smp_processor_id();
+			cpu = smp_processor_id();
 
 			cpumask_clear_cpu(cpu, tick_get_broadcast_mask());
 			tick_broadcast_clear_oneshot(cpu);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/time/timer_stats.c linux-3.3.8-pax/kernel/time/timer_stats.c
--- linux-3.3.8/kernel/time/timer_stats.c	2012-01-08 19:48:29.095470872 +0100
+++ linux-3.3.8-pax/kernel/time/timer_stats.c	2012-03-19 10:43:44.572034619 +0100
@@ -116,7 +116,7 @@ static ktime_t time_start, time_stop;
 static unsigned long nr_entries;
 static struct entry entries[MAX_ENTRIES];
 
-static atomic_t overflow_count;
+static atomic_unchecked_t overflow_count;
 
 /*
  * The entries are in a hash-table, for fast lookup:
@@ -140,7 +140,7 @@ static void reset_entries(void)
 	nr_entries = 0;
 	memset(entries, 0, sizeof(entries));
 	memset(tstat_hash_table, 0, sizeof(tstat_hash_table));
-	atomic_set(&overflow_count, 0);
+	atomic_set_unchecked(&overflow_count, 0);
 }
 
 static struct entry *alloc_entry(void)
@@ -261,7 +261,7 @@ void timer_stats_update_stats(void *time
 	if (likely(entry))
 		entry->count++;
 	else
-		atomic_inc(&overflow_count);
+		atomic_inc_unchecked(&overflow_count);
 
  out_unlock:
 	raw_spin_unlock_irqrestore(lock, flags);
@@ -300,9 +300,9 @@ static int tstats_show(struct seq_file *
 
 	seq_puts(m, "Timer Stats Version: v0.2\n");
 	seq_printf(m, "Sample period: %ld.%03ld s\n", period.tv_sec, ms);
-	if (atomic_read(&overflow_count))
+	if (atomic_read_unchecked(&overflow_count))
 		seq_printf(m, "Overflow: %d entries\n",
-			atomic_read(&overflow_count));
+			atomic_read_unchecked(&overflow_count));
 
 	for (i = 0; i < nr_entries; i++) {
 		entry = entries + i;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/timer.c linux-3.3.8-pax/kernel/timer.c
--- linux-3.3.8/kernel/timer.c	2012-03-19 10:39:11.968049177 +0100
+++ linux-3.3.8-pax/kernel/timer.c	2012-03-19 10:43:44.572034619 +0100
@@ -1354,7 +1354,7 @@ void update_process_times(int user_tick)
 /*
  * This function runs timers and the timer-tq in bottom half context.
  */
-static void run_timer_softirq(struct softirq_action *h)
+static void run_timer_softirq(void)
 {
 	struct tvec_base *base = __this_cpu_read(tvec_bases);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/trace/blktrace.c linux-3.3.8-pax/kernel/trace/blktrace.c
--- linux-3.3.8/kernel/trace/blktrace.c	2012-03-19 10:39:11.972049179 +0100
+++ linux-3.3.8-pax/kernel/trace/blktrace.c	2012-03-19 10:43:44.572034619 +0100
@@ -324,7 +324,7 @@ static ssize_t blk_dropped_read(struct f
 	struct blk_trace *bt = filp->private_data;
 	char buf[16];
 
-	snprintf(buf, sizeof(buf), "%u\n", atomic_read(&bt->dropped));
+	snprintf(buf, sizeof(buf), "%u\n", atomic_read_unchecked(&bt->dropped));
 
 	return simple_read_from_buffer(buffer, count, ppos, buf, strlen(buf));
 }
@@ -389,7 +389,7 @@ static int blk_subbuf_start_callback(str
 		return 1;
 
 	bt = buf->chan->private_data;
-	atomic_inc(&bt->dropped);
+	atomic_inc_unchecked(&bt->dropped);
 	return 0;
 }
 
@@ -490,7 +490,7 @@ int do_blk_trace_setup(struct request_qu
 
 	bt->dir = dir;
 	bt->dev = dev;
-	atomic_set(&bt->dropped, 0);
+	atomic_set_unchecked(&bt->dropped, 0);
 
 	ret = -EIO;
 	bt->dropped_file = debugfs_create_file("dropped", 0444, dir, bt,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/trace/ftrace.c linux-3.3.8-pax/kernel/trace/ftrace.c
--- linux-3.3.8/kernel/trace/ftrace.c	2012-03-19 10:39:11.972049179 +0100
+++ linux-3.3.8-pax/kernel/trace/ftrace.c	2012-03-19 10:43:44.576034619 +0100
@@ -1726,12 +1726,17 @@ ftrace_code_disable(struct module *mod,
 	if (unlikely(ftrace_disabled))
 		return 0;
 
+	ret = ftrace_arch_code_modify_prepare();
+	FTRACE_WARN_ON(ret);
+	if (ret)
+		return 0;
+
 	ret = ftrace_make_nop(mod, rec, MCOUNT_ADDR);
+	FTRACE_WARN_ON(ftrace_arch_code_modify_post_process());
 	if (ret) {
 		ftrace_bug(ret, ip);
-		return 0;
 	}
-	return 1;
+	return ret ? 0 : 1;
 }
 
 /*
@@ -2843,7 +2848,7 @@ static void ftrace_free_entry_rcu(struct
 
 int
 register_ftrace_function_probe(char *glob, struct ftrace_probe_ops *ops,
-			      void *data)
+				void *data)
 {
 	struct ftrace_func_probe *entry;
 	struct ftrace_page *pg;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/trace/trace.c linux-3.3.8-pax/kernel/trace/trace.c
--- linux-3.3.8/kernel/trace/trace.c	2012-04-15 15:08:29.430606350 +0200
+++ linux-3.3.8-pax/kernel/trace/trace.c	2012-04-15 15:08:34.694606070 +0200
@@ -4258,10 +4258,9 @@ static const struct file_operations trac
 };
 #endif
 
-static struct dentry *d_tracer;
-
 struct dentry *tracing_init_dentry(void)
 {
+	static struct dentry *d_tracer;
 	static int once;
 
 	if (d_tracer)
@@ -4281,10 +4280,9 @@ struct dentry *tracing_init_dentry(void)
 	return d_tracer;
 }
 
-static struct dentry *d_percpu;
-
 struct dentry *tracing_dentry_percpu(void)
 {
+	static struct dentry *d_percpu;
 	static int once;
 	struct dentry *d_tracer;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/trace/trace_events.c linux-3.3.8-pax/kernel/trace/trace_events.c
--- linux-3.3.8/kernel/trace/trace_events.c	2012-01-08 19:48:29.127470870 +0100
+++ linux-3.3.8-pax/kernel/trace/trace_events.c	2012-03-19 10:43:44.580034620 +0100
@@ -1299,10 +1299,6 @@ static LIST_HEAD(ftrace_module_file_list
 struct ftrace_module_file_ops {
 	struct list_head		list;
 	struct module			*mod;
-	struct file_operations		id;
-	struct file_operations		enable;
-	struct file_operations		format;
-	struct file_operations		filter;
 };
 
 static struct ftrace_module_file_ops *
@@ -1323,17 +1319,12 @@ trace_create_file_ops(struct module *mod
 
 	file_ops->mod = mod;
 
-	file_ops->id = ftrace_event_id_fops;
-	file_ops->id.owner = mod;
-
-	file_ops->enable = ftrace_enable_fops;
-	file_ops->enable.owner = mod;
-
-	file_ops->filter = ftrace_event_filter_fops;
-	file_ops->filter.owner = mod;
-
-	file_ops->format = ftrace_event_format_fops;
-	file_ops->format.owner = mod;
+	pax_open_kernel();
+	*(void **)&mod->trace_id.owner = mod;
+	*(void **)&mod->trace_enable.owner = mod;
+	*(void **)&mod->trace_filter.owner = mod;
+	*(void **)&mod->trace_format.owner = mod;
+	pax_close_kernel();
 
 	list_add(&file_ops->list, &ftrace_module_file_list);
 
@@ -1357,8 +1348,8 @@ static void trace_module_add_events(stru
 
 	for_each_event(call, start, end) {
 		__trace_add_event_call(*call, mod,
-				       &file_ops->id, &file_ops->enable,
-				       &file_ops->filter, &file_ops->format);
+				       &mod->trace_id, &mod->trace_enable,
+				       &mod->trace_filter, &mod->trace_format);
 	}
 }
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/trace/trace_kprobe.c linux-3.3.8-pax/kernel/trace/trace_kprobe.c
--- linux-3.3.8/kernel/trace/trace_kprobe.c	2012-01-08 19:48:29.139470869 +0100
+++ linux-3.3.8-pax/kernel/trace/trace_kprobe.c	2012-03-19 10:43:44.580034620 +0100
@@ -217,7 +217,7 @@ static __kprobes void FETCH_FUNC_NAME(me
 	long ret;
 	int maxlen = get_rloc_len(*(u32 *)dest);
 	u8 *dst = get_rloc_data(dest);
-	u8 *src = addr;
+	const u8 __user *src = (const u8 __force_user *)addr;
 	mm_segment_t old_fs = get_fs();
 	if (!maxlen)
 		return;
@@ -229,7 +229,7 @@ static __kprobes void FETCH_FUNC_NAME(me
 	pagefault_disable();
 	do
 		ret = __copy_from_user_inatomic(dst++, src++, 1);
-	while (dst[-1] && ret == 0 && src - (u8 *)addr < maxlen);
+	while (dst[-1] && ret == 0 && src - (const u8 __force_user *)addr < maxlen);
 	dst[-1] = '\0';
 	pagefault_enable();
 	set_fs(old_fs);
@@ -238,7 +238,7 @@ static __kprobes void FETCH_FUNC_NAME(me
 		((u8 *)get_rloc_data(dest))[0] = '\0';
 		*(u32 *)dest = make_data_rloc(0, get_rloc_offs(*(u32 *)dest));
 	} else
-		*(u32 *)dest = make_data_rloc(src - (u8 *)addr,
+		*(u32 *)dest = make_data_rloc(src - (const u8 __force_user *)addr,
 					      get_rloc_offs(*(u32 *)dest));
 }
 /* Return the length of string -- including null terminal byte */
@@ -252,7 +252,7 @@ static __kprobes void FETCH_FUNC_NAME(me
 	set_fs(KERNEL_DS);
 	pagefault_disable();
 	do {
-		ret = __copy_from_user_inatomic(&c, (u8 *)addr + len, 1);
+		ret = __copy_from_user_inatomic(&c, (const u8 __force_user *)addr + len, 1);
 		len++;
 	} while (c && ret == 0 && len < MAX_STRING_SIZE);
 	pagefault_enable();
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/trace/trace_mmiotrace.c linux-3.3.8-pax/kernel/trace/trace_mmiotrace.c
--- linux-3.3.8/kernel/trace/trace_mmiotrace.c	2011-10-24 12:48:42.103090928 +0200
+++ linux-3.3.8-pax/kernel/trace/trace_mmiotrace.c	2012-03-19 10:43:44.584034621 +0100
@@ -24,7 +24,7 @@ struct header_iter {
 static struct trace_array *mmio_trace_array;
 static bool overrun_detected;
 static unsigned long prev_overruns;
-static atomic_t dropped_count;
+static atomic_unchecked_t dropped_count;
 
 static void mmio_reset_data(struct trace_array *tr)
 {
@@ -127,7 +127,7 @@ static void mmio_close(struct trace_iter
 
 static unsigned long count_overruns(struct trace_iterator *iter)
 {
-	unsigned long cnt = atomic_xchg(&dropped_count, 0);
+	unsigned long cnt = atomic_xchg_unchecked(&dropped_count, 0);
 	unsigned long over = ring_buffer_overruns(iter->tr->buffer);
 
 	if (over > prev_overruns)
@@ -317,7 +317,7 @@ static void __trace_mmiotrace_rw(struct
 	event = trace_buffer_lock_reserve(buffer, TRACE_MMIO_RW,
 					  sizeof(*entry), 0, pc);
 	if (!event) {
-		atomic_inc(&dropped_count);
+		atomic_inc_unchecked(&dropped_count);
 		return;
 	}
 	entry	= ring_buffer_event_data(event);
@@ -347,7 +347,7 @@ static void __trace_mmiotrace_map(struct
 	event = trace_buffer_lock_reserve(buffer, TRACE_MMIO_MAP,
 					  sizeof(*entry), 0, pc);
 	if (!event) {
-		atomic_inc(&dropped_count);
+		atomic_inc_unchecked(&dropped_count);
 		return;
 	}
 	entry	= ring_buffer_event_data(event);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/trace/trace_output.c linux-3.3.8-pax/kernel/trace/trace_output.c
--- linux-3.3.8/kernel/trace/trace_output.c	2012-05-07 20:26:56.107609313 +0200
+++ linux-3.3.8-pax/kernel/trace/trace_output.c	2012-05-07 20:27:02.135608991 +0200
@@ -278,7 +278,7 @@ int trace_seq_path(struct trace_seq *s,
 
 	p = d_path(path, s->buffer + s->len, PAGE_SIZE - s->len);
 	if (!IS_ERR(p)) {
-		p = mangle_path(s->buffer + s->len, p, "\n");
+		p = mangle_path(s->buffer + s->len, p, "\n\\");
 		if (p) {
 			s->len = p - s->buffer;
 			return 1;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/trace/trace_stack.c linux-3.3.8-pax/kernel/trace/trace_stack.c
--- linux-3.3.8/kernel/trace/trace_stack.c	2012-03-19 10:39:11.988049175 +0100
+++ linux-3.3.8-pax/kernel/trace/trace_stack.c	2012-03-19 10:43:44.584034621 +0100
@@ -53,7 +53,7 @@ static inline void check_stack(void)
 		return;
 
 	/* we do not handle interrupt stacks yet */
-	if (!object_is_on_stack(&this_size))
+	if (!object_starts_on_stack(&this_size))
 		return;
 
 	local_irq_save(flags);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/kernel/trace/trace_workqueue.c linux-3.3.8-pax/kernel/trace/trace_workqueue.c
--- linux-3.3.8/kernel/trace/trace_workqueue.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/kernel/trace/trace_workqueue.c	2012-03-19 10:43:44.584034621 +0100
@@ -22,7 +22,7 @@ struct cpu_workqueue_stats {
 	int		            cpu;
 	pid_t			    pid;
 /* Can be inserted from interrupt or user context, need to be atomic */
-	atomic_t	            inserted;
+	atomic_unchecked_t          inserted;
 /*
  *  Don't need to be atomic, works are serialized in a single workqueue thread
  *  on a single CPU.
@@ -60,7 +60,7 @@ probe_workqueue_insertion(void *ignore,
 	spin_lock_irqsave(&workqueue_cpu_stat(cpu)->lock, flags);
 	list_for_each_entry(node, &workqueue_cpu_stat(cpu)->list, list) {
 		if (node->pid == wq_thread->pid) {
-			atomic_inc(&node->inserted);
+			atomic_inc_unchecked(&node->inserted);
 			goto found;
 		}
 	}
@@ -210,7 +210,7 @@ static int workqueue_stat_show(struct se
 		tsk = get_pid_task(pid, PIDTYPE_PID);
 		if (tsk) {
 			seq_printf(s, "%3d %6d     %6u       %s\n", cws->cpu,
-				   atomic_read(&cws->inserted), cws->executed,
+				   atomic_read_unchecked(&cws->inserted), cws->executed,
 				   tsk->comm);
 			put_task_struct(tsk);
 		}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/lib/bitmap.c linux-3.3.8-pax/lib/bitmap.c
--- linux-3.3.8/lib/bitmap.c	2012-01-08 19:48:29.195470866 +0100
+++ linux-3.3.8-pax/lib/bitmap.c	2012-03-19 10:43:44.588034621 +0100
@@ -419,7 +419,7 @@ int __bitmap_parse(const char *buf, unsi
 {
 	int c, old_c, totaldigits, ndigits, nchunks, nbits;
 	u32 chunk;
-	const char __user __force *ubuf = (const char __user __force *)buf;
+	const char __user *ubuf = (const char __force_user *)buf;
 
 	bitmap_zero(maskp, nmaskbits);
 
@@ -504,7 +504,7 @@ int bitmap_parse_user(const char __user
 {
 	if (!access_ok(VERIFY_READ, ubuf, ulen))
 		return -EFAULT;
-	return __bitmap_parse((const char __force *)ubuf,
+	return __bitmap_parse((const char __force_kernel *)ubuf,
 				ulen, 1, maskp, nmaskbits);
 
 }
@@ -596,7 +596,7 @@ static int __bitmap_parselist(const char
 {
 	unsigned a, b;
 	int c, old_c, totaldigits;
-	const char __user __force *ubuf = (const char __user __force *)buf;
+	const char __user *ubuf = (const char __force_user *)buf;
 	int exp_digit, in_range;
 
 	totaldigits = c = 0;
@@ -696,7 +696,7 @@ int bitmap_parselist_user(const char __u
 {
 	if (!access_ok(VERIFY_READ, ubuf, ulen))
 		return -EFAULT;
-	return __bitmap_parselist((const char __force *)ubuf,
+	return __bitmap_parselist((const char __force_kernel *)ubuf,
 					ulen, 1, maskp, nmaskbits);
 }
 EXPORT_SYMBOL(bitmap_parselist_user);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/lib/bug.c linux-3.3.8-pax/lib/bug.c
--- linux-3.3.8/lib/bug.c	2012-03-19 10:39:12.028049173 +0100
+++ linux-3.3.8-pax/lib/bug.c	2012-03-19 10:43:44.588034621 +0100
@@ -133,6 +133,8 @@ enum bug_trap_type report_bug(unsigned l
 		return BUG_TRAP_TYPE_NONE;
 
 	bug = find_bug(bugaddr);
+	if (!bug)
+		return BUG_TRAP_TYPE_NONE;
 
 	file = NULL;
 	line = 0;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/lib/debugobjects.c linux-3.3.8-pax/lib/debugobjects.c
--- linux-3.3.8/lib/debugobjects.c	2012-03-19 10:39:12.032049172 +0100
+++ linux-3.3.8-pax/lib/debugobjects.c	2012-03-19 10:43:44.588034621 +0100
@@ -288,7 +288,7 @@ static void debug_object_is_on_stack(voi
 	if (limit > 4)
 		return;
 
-	is_on_stack = object_is_on_stack(addr);
+	is_on_stack = object_starts_on_stack(addr);
 	if (is_on_stack == onstack)
 		return;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/lib/devres.c linux-3.3.8-pax/lib/devres.c
--- linux-3.3.8/lib/devres.c	2012-03-19 10:39:12.036049172 +0100
+++ linux-3.3.8-pax/lib/devres.c	2012-03-19 10:43:44.588034621 +0100
@@ -80,7 +80,7 @@ EXPORT_SYMBOL(devm_ioremap_nocache);
 void devm_iounmap(struct device *dev, void __iomem *addr)
 {
 	WARN_ON(devres_destroy(dev, devm_ioremap_release, devm_ioremap_match,
-			       (void *)addr));
+			       (void __force *)addr));
 	iounmap(addr);
 }
 EXPORT_SYMBOL(devm_iounmap);
@@ -192,7 +192,7 @@ void devm_ioport_unmap(struct device *de
 {
 	ioport_unmap(addr);
 	WARN_ON(devres_destroy(dev, devm_ioport_map_release,
-			       devm_ioport_map_match, (void *)addr));
+			       devm_ioport_map_match, (void __force *)addr));
 }
 EXPORT_SYMBOL(devm_ioport_unmap);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/lib/dma-debug.c linux-3.3.8-pax/lib/dma-debug.c
--- linux-3.3.8/lib/dma-debug.c	2012-01-08 19:48:29.207470866 +0100
+++ linux-3.3.8-pax/lib/dma-debug.c	2012-03-19 10:43:44.596034619 +0100
@@ -925,7 +925,7 @@ out:
 
 static void check_for_stack(struct device *dev, void *addr)
 {
-	if (object_is_on_stack(addr))
+	if (object_starts_on_stack(addr))
 		err_printk(dev, NULL, "DMA-API: device driver maps memory from"
 				"stack [addr=%p]\n", addr);
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/lib/extable.c linux-3.3.8-pax/lib/extable.c
--- linux-3.3.8/lib/extable.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/lib/extable.c	2012-03-19 10:43:44.596034619 +0100
@@ -13,6 +13,7 @@
 #include <linux/init.h>
 #include <linux/sort.h>
 #include <asm/uaccess.h>
+#include <asm/pgtable.h>
 
 #ifndef ARCH_HAS_SORT_EXTABLE
 /*
@@ -36,8 +37,10 @@ static int cmp_ex(const void *a, const v
 void sort_extable(struct exception_table_entry *start,
 		  struct exception_table_entry *finish)
 {
+	pax_open_kernel();
 	sort(start, finish - start, sizeof(struct exception_table_entry),
 	     cmp_ex, NULL);
+	pax_close_kernel();
 }
 
 #ifdef CONFIG_MODULES
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/lib/inflate.c linux-3.3.8-pax/lib/inflate.c
--- linux-3.3.8/lib/inflate.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/lib/inflate.c	2012-03-19 10:43:44.596034619 +0100
@@ -269,7 +269,7 @@ static void free(void *where)
 		malloc_ptr = free_mem_ptr;
 }
 #else
-#define malloc(a) kmalloc(a, GFP_KERNEL)
+#define malloc(a) kmalloc((a), GFP_KERNEL)
 #define free(a) kfree(a)
 #endif
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/lib/ioremap.c linux-3.3.8-pax/lib/ioremap.c
--- linux-3.3.8/lib/ioremap.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/lib/ioremap.c	2012-05-08 22:40:14.199995786 +0200
@@ -38,7 +38,7 @@ static inline int ioremap_pmd_range(pud_
 	unsigned long next;
 
 	phys_addr -= addr;
-	pmd = pmd_alloc(&init_mm, pud, addr);
+	pmd = pmd_alloc_kernel(&init_mm, pud, addr);
 	if (!pmd)
 		return -ENOMEM;
 	do {
@@ -56,7 +56,7 @@ static inline int ioremap_pud_range(pgd_
 	unsigned long next;
 
 	phys_addr -= addr;
-	pud = pud_alloc(&init_mm, pgd, addr);
+	pud = pud_alloc_kernel(&init_mm, pgd, addr);
 	if (!pud)
 		return -ENOMEM;
 	do {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/lib/radix-tree.c linux-3.3.8-pax/lib/radix-tree.c
--- linux-3.3.8/lib/radix-tree.c	2012-03-19 10:39:12.116049168 +0100
+++ linux-3.3.8-pax/lib/radix-tree.c	2012-03-19 10:43:44.596034620 +0100
@@ -78,7 +78,7 @@ struct radix_tree_preload {
 	int nr;
 	struct radix_tree_node *nodes[RADIX_TREE_MAX_PATH];
 };
-static DEFINE_PER_CPU(struct radix_tree_preload, radix_tree_preloads) = { 0, };
+static DEFINE_PER_CPU(struct radix_tree_preload, radix_tree_preloads);
 
 static inline void *ptr_to_indirect(void *ptr)
 {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/lib/vsprintf.c linux-3.3.8-pax/lib/vsprintf.c
--- linux-3.3.8/lib/vsprintf.c	2012-03-19 10:39:12.120049167 +0100
+++ linux-3.3.8-pax/lib/vsprintf.c	2012-03-19 10:43:44.596034620 +0100
@@ -848,12 +848,12 @@ char *pointer(const char *fmt, char *buf
 {
 	if (!ptr && *fmt != 'K') {
 		/*
-		 * Print (null) with the same width as a pointer so it makes
+		 * Print (nil) with the same width as a pointer so it makes
 		 * tabular output look nice.
 		 */
 		if (spec.field_width == -1)
 			spec.field_width = 2 * sizeof(void *);
-		return string(buf, end, "(null)", spec);
+		return string(buf, end, "(nil)", spec);
 	}
 
 	switch (*fmt) {
@@ -1633,11 +1633,11 @@ int bstr_printf(char *buf, size_t size,
 	typeof(type) value;						\
 	if (sizeof(type) == 8) {					\
 		args = PTR_ALIGN(args, sizeof(u32));			\
-		*(u32 *)&value = *(u32 *)args;				\
-		*((u32 *)&value + 1) = *(u32 *)(args + 4);		\
+		*(u32 *)&value = *(const u32 *)args;			\
+		*((u32 *)&value + 1) = *(const u32 *)(args + 4);	\
 	} else {							\
 		args = PTR_ALIGN(args, sizeof(type));			\
-		value = *(typeof(type) *)args;				\
+		value = *(const typeof(type) *)args;			\
 	}								\
 	args += sizeof(type);						\
 	value;								\
@@ -1700,7 +1700,7 @@ int bstr_printf(char *buf, size_t size,
 		case FORMAT_TYPE_STR: {
 			const char *str_arg = args;
 			args += strlen(str_arg) + 1;
-			str = string(str, end, (char *)str_arg, spec);
+			str = string(str, end, str_arg, spec);
 			break;
 		}
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/Makefile linux-3.3.8-pax/Makefile
--- linux-3.3.8/Makefile	2012-06-11 19:36:38.820445783 +0200
+++ linux-3.3.8-pax/Makefile	2012-06-11 19:36:45.316446084 +0200
@@ -245,8 +245,9 @@ CONFIG_SHELL := $(shell if [ -x "$$BASH"
 
 HOSTCC       = gcc
 HOSTCXX      = g++
-HOSTCFLAGS   = -Wall -Wmissing-prototypes -Wstrict-prototypes -O2 -fomit-frame-pointer
-HOSTCXXFLAGS = -O2
+HOSTCFLAGS   = -Wall -W -Wmissing-prototypes -Wstrict-prototypes -Wno-unused-parameter -Wno-missing-field-initializers -O2 -fomit-frame-pointer -fno-delete-null-pointer-checks
+HOSTCLFAGS  += $(call cc-option, -Wno-empty-body)
+HOSTCXXFLAGS = -O2 -Wall -W -fno-delete-null-pointer-checks
 
 # Decide whether to build built-in, modular, or both.
 # Normally, just do built-in.
@@ -407,8 +408,8 @@ export RCS_TAR_IGNORE := --exclude SCCS
 # Rules shared between *config targets and build targets
 
 # Basic helpers built in scripts/
-PHONY += scripts_basic
-scripts_basic:
+PHONY += scripts_basic gcc-plugins
+scripts_basic: gcc-plugins
 	$(Q)$(MAKE) $(build)=scripts/basic
 	$(Q)rm -f .tmp_quiet_recordmcount
 
@@ -564,6 +565,51 @@ else
 KBUILD_CFLAGS	+= -O2
 endif
 
+ifeq ($(shell $(CONFIG_SHELL) $(srctree)/scripts/gcc-plugin.sh "$(HOSTCC)" "$(CC)"), y)
+ifdef CONFIG_PAX_CONSTIFY_PLUGIN
+CONSTIFY_PLUGIN_CFLAGS := -fplugin=$(objtree)/tools/gcc/constify_plugin.so -DCONSTIFY_PLUGIN
+endif
+ifdef CONFIG_PAX_MEMORY_STACKLEAK
+STACKLEAK_PLUGIN_CFLAGS := -fplugin=$(objtree)/tools/gcc/stackleak_plugin.so -DSTACKLEAK_PLUGIN
+STACKLEAK_PLUGIN_CFLAGS += -fplugin-arg-stackleak_plugin-track-lowest-sp=100
+endif
+ifdef CONFIG_KALLOCSTAT_PLUGIN
+KALLOCSTAT_PLUGIN_CFLAGS := -fplugin=$(objtree)/tools/gcc/kallocstat_plugin.so
+endif
+ifdef CONFIG_PAX_KERNEXEC_PLUGIN
+KERNEXEC_PLUGIN_CFLAGS := -fplugin=$(objtree)/tools/gcc/kernexec_plugin.so
+KERNEXEC_PLUGIN_CFLAGS += -fplugin-arg-kernexec_plugin-method=$(CONFIG_PAX_KERNEXEC_PLUGIN_METHOD) -DKERNEXEC_PLUGIN
+KERNEXEC_PLUGIN_AFLAGS := -DKERNEXEC_PLUGIN
+endif
+ifdef CONFIG_CHECKER_PLUGIN
+ifeq ($(call cc-ifversion, -ge, 0406, y), y)
+CHECKER_PLUGIN_CFLAGS := -fplugin=$(objtree)/tools/gcc/checker_plugin.so -DCHECKER_PLUGIN
+endif
+endif
+COLORIZE_PLUGIN_CFLAGS := -fplugin=$(objtree)/tools/gcc/colorize_plugin.so
+ifdef CONFIG_PAX_SIZE_OVERFLOW
+SIZE_OVERFLOW_PLUGIN := -fplugin=$(objtree)/tools/gcc/size_overflow_plugin.so -DSIZE_OVERFLOW_PLUGIN
+endif
+GCC_PLUGINS_CFLAGS := $(CONSTIFY_PLUGIN_CFLAGS) $(STACKLEAK_PLUGIN_CFLAGS) $(KALLOCSTAT_PLUGIN_CFLAGS)
+GCC_PLUGINS_CFLAGS += $(KERNEXEC_PLUGIN_CFLAGS) $(CHECKER_PLUGIN_CFLAGS) $(COLORIZE_PLUGIN_CFLAGS) $(SIZE_OVERFLOW_PLUGIN)
+GCC_PLUGINS_AFLAGS := $(KERNEXEC_PLUGIN_AFLAGS)
+export CONSTIFY_PLUGIN STACKLEAK_PLUGIN KERNEXEC_PLUGIN CHECKER_PLUGIN SIZE_OVERFLOW_PLUGIN
+ifeq ($(KBUILD_EXTMOD),)
+gcc-plugins:
+	$(Q)$(MAKE) $(build)=tools/gcc
+else
+gcc-plugins: ;
+endif
+else
+gcc-plugins:
+ifeq ($(call cc-ifversion, -ge, 0405, y), y)
+	$(Q)echo "warning, your gcc installation does not support plugins, perhaps the necessary headers are missing?"
+else
+	$(Q)echo "warning, your gcc version does not support plugins, you should upgrade it to gcc 4.5 at least"
+endif
+	$(Q)echo "PAX_MEMORY_STACKLEAK and other features will be less secure"
+endif
+
 include $(srctree)/arch/$(SRCARCH)/Makefile
 
 ifneq ($(CONFIG_FRAME_WARN),0)
@@ -932,6 +978,8 @@ vmlinux.o: $(modpost-init) $(vmlinux-mai
 
 # The actual objects are generated when descending, 
 # make sure no implicit rule kicks in
+$(sort $(vmlinux-init) $(vmlinux-main)) $(vmlinux-lds): KBUILD_CFLAGS += $(GCC_PLUGINS_CFLAGS)
+$(sort $(vmlinux-init) $(vmlinux-main)) $(vmlinux-lds): KBUILD_AFLAGS += $(GCC_PLUGINS_AFLAGS)
 $(sort $(vmlinux-init) $(vmlinux-main)) $(vmlinux-lds): $(vmlinux-dirs) ;
 
 # Handle descending into subdirectories listed in $(vmlinux-dirs)
@@ -941,7 +989,7 @@ $(sort $(vmlinux-init) $(vmlinux-main))
 # Error messages still appears in the original language
 
 PHONY += $(vmlinux-dirs)
-$(vmlinux-dirs): prepare scripts
+$(vmlinux-dirs): gcc-plugins prepare scripts
 	$(Q)$(MAKE) $(build)=$@
 
 # Store (new) KERNELRELASE string in include/config/kernel.release
@@ -985,6 +1033,7 @@ prepare0: archprepare FORCE
 	$(Q)$(MAKE) $(build)=.
 
 # All the preparing..
+prepare: KBUILD_CFLAGS := $(filter-out $(GCC_PLUGINS_CFLAGS),$(KBUILD_CFLAGS))
 prepare: prepare0
 
 # Generate some files
@@ -1092,6 +1141,8 @@ all: modules
 #	using awk while concatenating to the final file.
 
 PHONY += modules
+modules: KBUILD_CFLAGS += $(GCC_PLUGINS_CFLAGS)
+modules: KBUILD_AFLAGS += $(GCC_PLUGINS_AFLAGS)
 modules: $(vmlinux-dirs) $(if $(KBUILD_BUILTIN),vmlinux) modules.builtin
 	$(Q)$(AWK) '!x[$$0]++' $(vmlinux-dirs:%=$(objtree)/%/modules.order) > $(objtree)/modules.order
 	@$(kecho) '  Building modules, stage 2.';
@@ -1107,7 +1158,7 @@ modules.builtin: $(vmlinux-dirs:%=%/modu
 
 # Target to prepare building external modules
 PHONY += modules_prepare
-modules_prepare: prepare scripts
+modules_prepare: gcc-plugins prepare scripts
 
 # Target to install modules
 PHONY += modules_install
@@ -1204,6 +1255,7 @@ distclean: mrproper
 		\( -name '*.orig' -o -name '*.rej' -o -name '*~' \
 		-o -name '*.bak' -o -name '#*#' -o -name '.*.orig' \
 		-o -name '.*.rej' \
+		-o -name '.*.rej' -o -name '*.so' \
 		-o -name '*%' -o -name '.*.cmd' -o -name 'core' \) \
 		-type f -print | xargs rm -f
 
@@ -1364,6 +1416,8 @@ PHONY += $(module-dirs) modules
 $(module-dirs): crmodverdir $(objtree)/Module.symvers
 	$(Q)$(MAKE) $(build)=$(patsubst _module_%,%,$@)
 
+modules: KBUILD_CFLAGS += $(GCC_PLUGINS_CFLAGS)
+modules: KBUILD_AFLAGS += $(GCC_PLUGINS_AFLAGS)
 modules: $(module-dirs)
 	@$(kecho) '  Building modules, stage 2.';
 	$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modpost
@@ -1490,17 +1544,21 @@ else
         target-dir = $(if $(KBUILD_EXTMOD),$(dir $<),$(dir $@))
 endif
 
-%.s: %.c prepare scripts FORCE
+%.s: KBUILD_CFLAGS += $(GCC_PLUGINS_CFLAGS)
+%.s: KBUILD_AFLAGS += $(GCC_PLUGINS_AFLAGS)
+%.s: %.c gcc-plugins prepare scripts FORCE
 	$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)
 %.i: %.c prepare scripts FORCE
 	$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)
-%.o: %.c prepare scripts FORCE
+%.o: KBUILD_CFLAGS += $(GCC_PLUGINS_CFLAGS)
+%.o: KBUILD_AFLAGS += $(GCC_PLUGINS_AFLAGS)
+%.o: %.c gcc-plugins prepare scripts FORCE
 	$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)
 %.lst: %.c prepare scripts FORCE
 	$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)
-%.s: %.S prepare scripts FORCE
+%.s: %.S gcc-plugins prepare scripts FORCE
 	$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)
-%.o: %.S prepare scripts FORCE
+%.o: %.S gcc-plugins prepare scripts FORCE
 	$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)
 %.symtypes: %.c prepare scripts FORCE
 	$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)
@@ -1510,11 +1568,15 @@ endif
 	$(cmd_crmodverdir)
 	$(Q)$(MAKE) KBUILD_MODULES=$(if $(CONFIG_MODULES),1) \
 	$(build)=$(build-dir)
-%/: prepare scripts FORCE
+%/: KBUILD_CFLAGS += $(GCC_PLUGINS_CFLAGS)
+%/: KBUILD_AFLAGS += $(GCC_PLUGINS_AFLAGS)
+%/: gcc-plugins prepare scripts FORCE
 	$(cmd_crmodverdir)
 	$(Q)$(MAKE) KBUILD_MODULES=$(if $(CONFIG_MODULES),1) \
 	$(build)=$(build-dir)
-%.ko: prepare scripts FORCE
+%.ko: KBUILD_CFLAGS += $(GCC_PLUGINS_CFLAGS)
+%.ko: KBUILD_AFLAGS += $(GCC_PLUGINS_AFLAGS)
+%.ko: gcc-plugins prepare scripts FORCE
 	$(cmd_crmodverdir)
 	$(Q)$(MAKE) KBUILD_MODULES=$(if $(CONFIG_MODULES),1)   \
 	$(build)=$(build-dir) $(@:.ko=.o)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/filemap.c linux-3.3.8-pax/mm/filemap.c
--- linux-3.3.8/mm/filemap.c	2012-03-19 10:39:12.152049166 +0100
+++ linux-3.3.8-pax/mm/filemap.c	2012-03-19 10:43:44.600034619 +0100
@@ -1770,7 +1770,7 @@ int generic_file_mmap(struct file * file
 	struct address_space *mapping = file->f_mapping;
 
 	if (!mapping->a_ops->readpage)
-		return -ENOEXEC;
+		return -ENODEV;
 	file_accessed(file);
 	vma->vm_ops = &generic_file_vm_ops;
 	vma->vm_flags |= VM_CAN_NONLINEAR;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/fremap.c linux-3.3.8-pax/mm/fremap.c
--- linux-3.3.8/mm/fremap.c	2012-01-08 19:48:29.299470861 +0100
+++ linux-3.3.8-pax/mm/fremap.c	2012-03-19 10:43:44.600034619 +0100
@@ -155,6 +155,11 @@ SYSCALL_DEFINE5(remap_file_pages, unsign
  retry:
 	vma = find_vma(mm, start);
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (vma && (mm->pax_flags & MF_PAX_SEGMEXEC) && (vma->vm_flags & VM_MAYEXEC))
+		goto out;
+#endif
+
 	/*
 	 * Make sure the vma is shared, that it supports prefaulting,
 	 * and that the remapped range is valid and fully within
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/highmem.c linux-3.3.8-pax/mm/highmem.c
--- linux-3.3.8/mm/highmem.c	2012-01-08 19:48:29.303470861 +0100
+++ linux-3.3.8-pax/mm/highmem.c	2012-03-19 10:43:44.600034619 +0100
@@ -125,9 +125,10 @@ static void flush_all_zero_pkmaps(void)
 		 * So no dangers, even with speculative execution.
 		 */
 		page = pte_page(pkmap_page_table[i]);
+		pax_open_kernel();
 		pte_clear(&init_mm, (unsigned long)page_address(page),
 			  &pkmap_page_table[i]);
-
+		pax_close_kernel();
 		set_page_address(page, NULL);
 		need_flush = 1;
 	}
@@ -186,9 +187,11 @@ start:
 		}
 	}
 	vaddr = PKMAP_ADDR(last_pkmap_nr);
+
+	pax_open_kernel();
 	set_pte_at(&init_mm, vaddr,
 		   &(pkmap_page_table[last_pkmap_nr]), mk_pte(page, kmap_prot));
-
+	pax_close_kernel();
 	pkmap_count[last_pkmap_nr] = 1;
 	set_page_address(page, (void *)vaddr);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/huge_memory.c linux-3.3.8-pax/mm/huge_memory.c
--- linux-3.3.8/mm/huge_memory.c	2012-03-19 10:39:12.156049166 +0100
+++ linux-3.3.8-pax/mm/huge_memory.c	2012-03-19 10:43:44.604034618 +0100
@@ -733,7 +733,7 @@ out:
 	 * run pte_offset_map on the pmd, if an huge pmd could
 	 * materialize from under us from a different thread.
 	 */
-	if (unlikely(__pte_alloc(mm, vma, pmd, address)))
+	if (unlikely(pmd_none(*pmd) && __pte_alloc(mm, vma, pmd, address)))
 		return VM_FAULT_OOM;
 	/* if an huge pmd materialized from under us just retry later */
 	if (unlikely(pmd_trans_huge(*pmd)))
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/hugetlb.c linux-3.3.8-pax/mm/hugetlb.c
--- linux-3.3.8/mm/hugetlb.c	2012-05-24 17:32:19.301142906 +0200
+++ linux-3.3.8-pax/mm/hugetlb.c	2012-05-24 17:32:27.029146891 +0200
@@ -2425,6 +2425,27 @@ static int unmap_ref_private(struct mm_s
 	return 1;
 }
 
+#ifdef CONFIG_PAX_SEGMEXEC
+static void pax_mirror_huge_pte(struct vm_area_struct *vma, unsigned long address, struct page *page_m)
+{
+	struct mm_struct *mm = vma->vm_mm;
+	struct vm_area_struct *vma_m;
+	unsigned long address_m;
+	pte_t *ptep_m;
+
+	vma_m = pax_find_mirror_vma(vma);
+	if (!vma_m)
+		return;
+
+	BUG_ON(address >= SEGMEXEC_TASK_SIZE);
+	address_m = address + SEGMEXEC_TASK_SIZE;
+	ptep_m = huge_pte_offset(mm, address_m & HPAGE_MASK);
+	get_page(page_m);
+	hugepage_add_anon_rmap(page_m, vma_m, address_m);
+	set_huge_pte_at(mm, address_m, ptep_m, make_huge_pte(vma_m, page_m, 0));
+}
+#endif
+
 /*
  * Hugetlb_cow() should be called with page lock of the original hugepage held.
  * Called with hugetlb_instantiation_mutex held and pte_page locked so we
@@ -2537,6 +2558,11 @@ retry_avoidcopy:
 				make_huge_pte(vma, new_page, 1));
 		page_remove_rmap(old_page);
 		hugepage_add_new_anon_rmap(new_page, vma, address);
+
+#ifdef CONFIG_PAX_SEGMEXEC
+		pax_mirror_huge_pte(vma, address, new_page);
+#endif
+
 		/* Make the old page be freed below */
 		new_page = old_page;
 		mmu_notifier_invalidate_range_end(mm,
@@ -2691,6 +2717,10 @@ retry:
 				&& (vma->vm_flags & VM_SHARED)));
 	set_huge_pte_at(mm, address, ptep, new_pte);
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	pax_mirror_huge_pte(vma, address, page);
+#endif
+
 	if ((flags & FAULT_FLAG_WRITE) && !(vma->vm_flags & VM_SHARED)) {
 		/* Optimization, do the COW without a second fault */
 		ret = hugetlb_cow(mm, vma, address, ptep, new_pte, page);
@@ -2720,6 +2750,10 @@ int hugetlb_fault(struct mm_struct *mm,
 	static DEFINE_MUTEX(hugetlb_instantiation_mutex);
 	struct hstate *h = hstate_vma(vma);
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	struct vm_area_struct *vma_m;
+#endif
+
 	address &= huge_page_mask(h);
 
 	ptep = huge_pte_offset(mm, address);
@@ -2733,6 +2767,26 @@ int hugetlb_fault(struct mm_struct *mm,
 			       VM_FAULT_SET_HINDEX(h - hstates);
 	}
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	vma_m = pax_find_mirror_vma(vma);
+	if (vma_m) {
+		unsigned long address_m;
+
+		if (vma->vm_start > vma_m->vm_start) {
+			address_m = address;
+			address -= SEGMEXEC_TASK_SIZE;
+			vma = vma_m;
+			h = hstate_vma(vma);
+		} else
+			address_m = address + SEGMEXEC_TASK_SIZE;
+
+		if (!huge_pte_alloc(mm, address_m, huge_page_size(h)))
+			return VM_FAULT_OOM;
+		address_m &= HPAGE_MASK;
+		unmap_hugepage_range(vma, address_m, address_m + HPAGE_SIZE, NULL);
+	}
+#endif
+
 	ptep = huge_pte_alloc(mm, address, huge_page_size(h));
 	if (!ptep)
 		return VM_FAULT_OOM;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/internal.h linux-3.3.8-pax/mm/internal.h
--- linux-3.3.8/mm/internal.h	2012-01-08 19:48:29.311470860 +0100
+++ linux-3.3.8-pax/mm/internal.h	2012-03-19 10:43:44.608034617 +0100
@@ -95,6 +95,7 @@ extern void putback_lru_page(struct page
  * in mm/page_alloc.c
  */
 extern void __free_pages_bootmem(struct page *page, unsigned int order);
+extern void free_compound_page(struct page *page);
 extern void prep_compound_page(struct page *page, unsigned long order);
 #ifdef CONFIG_MEMORY_FAILURE
 extern bool is_free_buddy_page(struct page *page);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/Kconfig linux-3.3.8-pax/mm/Kconfig
--- linux-3.3.8/mm/Kconfig	2012-03-19 10:39:12.120049167 +0100
+++ linux-3.3.8-pax/mm/Kconfig	2012-03-19 10:43:44.608034617 +0100
@@ -247,10 +247,10 @@ config KSM
 	  root has set /sys/kernel/mm/ksm/run to 1 (if CONFIG_SYSFS is set).
 
 config DEFAULT_MMAP_MIN_ADDR
-        int "Low address space to protect from user allocation"
+	int "Low address space to protect from user allocation"
 	depends on MMU
-        default 4096
-        help
+	default 32768
+	help
 	  This is the portion of low virtual memory which should be protected
 	  from userspace allocation.  Keeping a user from writing to low pages
 	  can help reduce the impact of kernel NULL pointer bugs.
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/maccess.c linux-3.3.8-pax/mm/maccess.c
--- linux-3.3.8/mm/maccess.c	2012-01-08 19:48:29.327470859 +0100
+++ linux-3.3.8-pax/mm/maccess.c	2012-03-19 10:43:44.608034617 +0100
@@ -26,7 +26,7 @@ long __probe_kernel_read(void *dst, cons
 	set_fs(KERNEL_DS);
 	pagefault_disable();
 	ret = __copy_from_user_inatomic(dst,
-			(__force const void __user *)src, size);
+			(const void __force_user *)src, size);
 	pagefault_enable();
 	set_fs(old_fs);
 
@@ -53,7 +53,7 @@ long __probe_kernel_write(void *dst, con
 
 	set_fs(KERNEL_DS);
 	pagefault_disable();
-	ret = __copy_to_user_inatomic((__force void __user *)dst, src, size);
+	ret = __copy_to_user_inatomic((void __force_user *)dst, src, size);
 	pagefault_enable();
 	set_fs(old_fs);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/madvise.c linux-3.3.8-pax/mm/madvise.c
--- linux-3.3.8/mm/madvise.c	2011-10-24 12:48:42.187090923 +0200
+++ linux-3.3.8-pax/mm/madvise.c	2012-03-19 10:43:44.608034617 +0100
@@ -45,6 +45,10 @@ static long madvise_behavior(struct vm_a
 	pgoff_t pgoff;
 	unsigned long new_flags = vma->vm_flags;
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	struct vm_area_struct *vma_m;
+#endif
+
 	switch (behavior) {
 	case MADV_NORMAL:
 		new_flags = new_flags & ~VM_RAND_READ & ~VM_SEQ_READ;
@@ -110,6 +114,13 @@ success:
 	/*
 	 * vm_flags is protected by the mmap_sem held in write mode.
 	 */
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	vma_m = pax_find_mirror_vma(vma);
+	if (vma_m)
+		vma_m->vm_flags = new_flags & ~(VM_WRITE | VM_MAYWRITE | VM_ACCOUNT);
+#endif
+
 	vma->vm_flags = new_flags;
 
 out:
@@ -168,6 +179,11 @@ static long madvise_dontneed(struct vm_a
 			     struct vm_area_struct ** prev,
 			     unsigned long start, unsigned long end)
 {
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	struct vm_area_struct *vma_m;
+#endif
+
 	*prev = vma;
 	if (vma->vm_flags & (VM_LOCKED|VM_HUGETLB|VM_PFNMAP))
 		return -EINVAL;
@@ -180,6 +196,21 @@ static long madvise_dontneed(struct vm_a
 		zap_page_range(vma, start, end - start, &details);
 	} else
 		zap_page_range(vma, start, end - start, NULL);
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	vma_m = pax_find_mirror_vma(vma);
+	if (vma_m) {
+		if (unlikely(vma->vm_flags & VM_NONLINEAR)) {
+			struct zap_details details = {
+				.nonlinear_vma = vma_m,
+				.last_index = ULONG_MAX,
+			};
+			zap_page_range(vma, start + SEGMEXEC_TASK_SIZE, end - start, &details);
+		} else
+			zap_page_range(vma, start + SEGMEXEC_TASK_SIZE, end - start, NULL);
+	}
+#endif
+
 	return 0;
 }
 
@@ -376,6 +407,16 @@ SYSCALL_DEFINE3(madvise, unsigned long,
 	if (end < start)
 		goto out;
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (current->mm->pax_flags & MF_PAX_SEGMEXEC) {
+		if (end > SEGMEXEC_TASK_SIZE)
+			goto out;
+	} else
+#endif
+
+	if (end > TASK_SIZE)
+		goto out;
+
 	error = 0;
 	if (end == start)
 		goto out;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/memory.c linux-3.3.8-pax/mm/memory.c
--- linux-3.3.8/mm/memory.c	2012-04-03 22:02:50.502110028 +0200
+++ linux-3.3.8-pax/mm/memory.c	2012-05-08 22:47:08.503984315 +0200
@@ -457,8 +457,12 @@ static inline void free_pmd_range(struct
 		return;
 
 	pmd = pmd_offset(pud, start);
+
+#if !defined(CONFIG_X86_32) || !defined(CONFIG_PAX_PER_CPU_PGD)
 	pud_clear(pud);
 	pmd_free_tlb(tlb, pmd, start);
+#endif
+
 }
 
 static inline void free_pud_range(struct mmu_gather *tlb, pgd_t *pgd,
@@ -489,9 +493,12 @@ static inline void free_pud_range(struct
 	if (end - 1 > ceiling - 1)
 		return;
 
+#if !defined(CONFIG_X86_64) || !defined(CONFIG_PAX_PER_CPU_PGD)
 	pud = pud_offset(pgd, start);
 	pgd_clear(pgd);
 	pud_free_tlb(tlb, pud, start);
+#endif
+
 }
 
 /*
@@ -1593,12 +1600,6 @@ no_page_table:
 	return page;
 }
 
-static inline int stack_guard_page(struct vm_area_struct *vma, unsigned long addr)
-{
-	return stack_guard_page_start(vma, addr) ||
-	       stack_guard_page_end(vma, addr+PAGE_SIZE);
-}
-
 /**
  * __get_user_pages() - pin user pages in memory
  * @tsk:	task_struct of target task
@@ -1671,10 +1672,10 @@ int __get_user_pages(struct task_struct
 			(VM_MAYREAD | VM_MAYWRITE) : (VM_READ | VM_WRITE);
 	i = 0;
 
-	do {
+	while (nr_pages) {
 		struct vm_area_struct *vma;
 
-		vma = find_extend_vma(mm, start);
+		vma = find_vma(mm, start);
 		if (!vma && in_gate_area(mm, start)) {
 			unsigned long pg = start & PAGE_MASK;
 			pgd_t *pgd;
@@ -1722,7 +1723,7 @@ int __get_user_pages(struct task_struct
 			goto next_page;
 		}
 
-		if (!vma ||
+		if (!vma || start < vma->vm_start ||
 		    (vma->vm_flags & (VM_IO | VM_PFNMAP)) ||
 		    !(vm_flags & vma->vm_flags))
 			return i ? : -EFAULT;
@@ -1749,11 +1750,6 @@ int __get_user_pages(struct task_struct
 				int ret;
 				unsigned int fault_flags = 0;
 
-				/* For mlock, just skip the stack guard page. */
-				if (foll_flags & FOLL_MLOCK) {
-					if (stack_guard_page(vma, start))
-						goto next_page;
-				}
 				if (foll_flags & FOLL_WRITE)
 					fault_flags |= FAULT_FLAG_WRITE;
 				if (nonblocking)
@@ -1827,7 +1823,7 @@ next_page:
 			start += PAGE_SIZE;
 			nr_pages--;
 		} while (nr_pages && start < vma->vm_end);
-	} while (nr_pages);
+	}
 	return i;
 }
 EXPORT_SYMBOL(__get_user_pages);
@@ -2034,6 +2030,10 @@ static int insert_page(struct vm_area_st
 	page_add_file_rmap(page);
 	set_pte_at(mm, addr, pte, mk_pte(page, prot));
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	pax_mirror_file_pte(vma, addr, page, ptl);
+#endif
+
 	retval = 0;
 	pte_unmap_unlock(pte, ptl);
 	return retval;
@@ -2068,10 +2068,22 @@ out:
 int vm_insert_page(struct vm_area_struct *vma, unsigned long addr,
 			struct page *page)
 {
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	struct vm_area_struct *vma_m;
+#endif
+
 	if (addr < vma->vm_start || addr >= vma->vm_end)
 		return -EFAULT;
 	if (!page_count(page))
 		return -EINVAL;
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	vma_m = pax_find_mirror_vma(vma);
+	if (vma_m)
+		vma_m->vm_flags |= VM_INSERTPAGE;
+#endif
+
 	vma->vm_flags |= VM_INSERTPAGE;
 	return insert_page(vma, addr, page, vma->vm_page_prot);
 }
@@ -2157,6 +2169,7 @@ int vm_insert_mixed(struct vm_area_struc
 			unsigned long pfn)
 {
 	BUG_ON(!(vma->vm_flags & VM_MIXEDMAP));
+	BUG_ON(vma->vm_mirror);
 
 	if (addr < vma->vm_start || addr >= vma->vm_end)
 		return -EFAULT;
@@ -2364,7 +2377,9 @@ static int apply_to_pmd_range(struct mm_
 
 	BUG_ON(pud_huge(*pud));
 
-	pmd = pmd_alloc(mm, pud, addr);
+	pmd = (mm == &init_mm) ?
+		pmd_alloc_kernel(mm, pud, addr) :
+		pmd_alloc(mm, pud, addr);
 	if (!pmd)
 		return -ENOMEM;
 	do {
@@ -2384,7 +2399,9 @@ static int apply_to_pud_range(struct mm_
 	unsigned long next;
 	int err;
 
-	pud = pud_alloc(mm, pgd, addr);
+	pud = (mm == &init_mm) ?
+		pud_alloc_kernel(mm, pgd, addr) :
+		pud_alloc(mm, pgd, addr);
 	if (!pud)
 		return -ENOMEM;
 	do {
@@ -2472,6 +2489,186 @@ static inline void cow_user_page(struct
 		copy_user_highpage(dst, src, va, vma);
 }
 
+#ifdef CONFIG_PAX_SEGMEXEC
+static void pax_unmap_mirror_pte(struct vm_area_struct *vma, unsigned long address, pmd_t *pmd)
+{
+	struct mm_struct *mm = vma->vm_mm;
+	spinlock_t *ptl;
+	pte_t *pte, entry;
+
+	pte = pte_offset_map_lock(mm, pmd, address, &ptl);
+	entry = *pte;
+	if (!pte_present(entry)) {
+		if (!pte_none(entry)) {
+			BUG_ON(pte_file(entry));
+			free_swap_and_cache(pte_to_swp_entry(entry));
+			pte_clear_not_present_full(mm, address, pte, 0);
+		}
+	} else {
+		struct page *page;
+
+		flush_cache_page(vma, address, pte_pfn(entry));
+		entry = ptep_clear_flush(vma, address, pte);
+		BUG_ON(pte_dirty(entry));
+		page = vm_normal_page(vma, address, entry);
+		if (page) {
+			update_hiwater_rss(mm);
+			if (PageAnon(page))
+				dec_mm_counter_fast(mm, MM_ANONPAGES);
+			else
+				dec_mm_counter_fast(mm, MM_FILEPAGES);
+			page_remove_rmap(page);
+			page_cache_release(page);
+		}
+	}
+	pte_unmap_unlock(pte, ptl);
+}
+
+/* PaX: if vma is mirrored, synchronize the mirror's PTE
+ *
+ * the ptl of the lower mapped page is held on entry and is not released on exit
+ * or inside to ensure atomic changes to the PTE states (swapout, mremap, munmap, etc)
+ */
+static void pax_mirror_anon_pte(struct vm_area_struct *vma, unsigned long address, struct page *page_m, spinlock_t *ptl)
+{
+	struct mm_struct *mm = vma->vm_mm;
+	unsigned long address_m;
+	spinlock_t *ptl_m;
+	struct vm_area_struct *vma_m;
+	pmd_t *pmd_m;
+	pte_t *pte_m, entry_m;
+
+	BUG_ON(!page_m || !PageAnon(page_m));
+
+	vma_m = pax_find_mirror_vma(vma);
+	if (!vma_m)
+		return;
+
+	BUG_ON(!PageLocked(page_m));
+	BUG_ON(address >= SEGMEXEC_TASK_SIZE);
+	address_m = address + SEGMEXEC_TASK_SIZE;
+	pmd_m = pmd_offset(pud_offset(pgd_offset(mm, address_m), address_m), address_m);
+	pte_m = pte_offset_map(pmd_m, address_m);
+	ptl_m = pte_lockptr(mm, pmd_m);
+	if (ptl != ptl_m) {
+		spin_lock_nested(ptl_m, SINGLE_DEPTH_NESTING);
+		if (!pte_none(*pte_m))
+			goto out;
+	}
+
+	entry_m = pfn_pte(page_to_pfn(page_m), vma_m->vm_page_prot);
+	page_cache_get(page_m);
+	page_add_anon_rmap(page_m, vma_m, address_m);
+	inc_mm_counter_fast(mm, MM_ANONPAGES);
+	set_pte_at(mm, address_m, pte_m, entry_m);
+	update_mmu_cache(vma_m, address_m, entry_m);
+out:
+	if (ptl != ptl_m)
+		spin_unlock(ptl_m);
+	pte_unmap(pte_m);
+	unlock_page(page_m);
+}
+
+void pax_mirror_file_pte(struct vm_area_struct *vma, unsigned long address, struct page *page_m, spinlock_t *ptl)
+{
+	struct mm_struct *mm = vma->vm_mm;
+	unsigned long address_m;
+	spinlock_t *ptl_m;
+	struct vm_area_struct *vma_m;
+	pmd_t *pmd_m;
+	pte_t *pte_m, entry_m;
+
+	BUG_ON(!page_m || PageAnon(page_m));
+
+	vma_m = pax_find_mirror_vma(vma);
+	if (!vma_m)
+		return;
+
+	BUG_ON(address >= SEGMEXEC_TASK_SIZE);
+	address_m = address + SEGMEXEC_TASK_SIZE;
+	pmd_m = pmd_offset(pud_offset(pgd_offset(mm, address_m), address_m), address_m);
+	pte_m = pte_offset_map(pmd_m, address_m);
+	ptl_m = pte_lockptr(mm, pmd_m);
+	if (ptl != ptl_m) {
+		spin_lock_nested(ptl_m, SINGLE_DEPTH_NESTING);
+		if (!pte_none(*pte_m))
+			goto out;
+	}
+
+	entry_m = pfn_pte(page_to_pfn(page_m), vma_m->vm_page_prot);
+	page_cache_get(page_m);
+	page_add_file_rmap(page_m);
+	inc_mm_counter_fast(mm, MM_FILEPAGES);
+	set_pte_at(mm, address_m, pte_m, entry_m);
+	update_mmu_cache(vma_m, address_m, entry_m);
+out:
+	if (ptl != ptl_m)
+		spin_unlock(ptl_m);
+	pte_unmap(pte_m);
+}
+
+static void pax_mirror_pfn_pte(struct vm_area_struct *vma, unsigned long address, unsigned long pfn_m, spinlock_t *ptl)
+{
+	struct mm_struct *mm = vma->vm_mm;
+	unsigned long address_m;
+	spinlock_t *ptl_m;
+	struct vm_area_struct *vma_m;
+	pmd_t *pmd_m;
+	pte_t *pte_m, entry_m;
+
+	vma_m = pax_find_mirror_vma(vma);
+	if (!vma_m)
+		return;
+
+	BUG_ON(address >= SEGMEXEC_TASK_SIZE);
+	address_m = address + SEGMEXEC_TASK_SIZE;
+	pmd_m = pmd_offset(pud_offset(pgd_offset(mm, address_m), address_m), address_m);
+	pte_m = pte_offset_map(pmd_m, address_m);
+	ptl_m = pte_lockptr(mm, pmd_m);
+	if (ptl != ptl_m) {
+		spin_lock_nested(ptl_m, SINGLE_DEPTH_NESTING);
+		if (!pte_none(*pte_m))
+			goto out;
+	}
+
+	entry_m = pfn_pte(pfn_m, vma_m->vm_page_prot);
+	set_pte_at(mm, address_m, pte_m, entry_m);
+out:
+	if (ptl != ptl_m)
+		spin_unlock(ptl_m);
+	pte_unmap(pte_m);
+}
+
+static void pax_mirror_pte(struct vm_area_struct *vma, unsigned long address, pte_t *pte, pmd_t *pmd, spinlock_t *ptl)
+{
+	struct page *page_m;
+	pte_t entry;
+
+	if (!(vma->vm_mm->pax_flags & MF_PAX_SEGMEXEC))
+		goto out;
+
+	entry = *pte;
+	page_m  = vm_normal_page(vma, address, entry);
+	if (!page_m)
+		pax_mirror_pfn_pte(vma, address, pte_pfn(entry), ptl);
+	else if (PageAnon(page_m)) {
+		if (pax_find_mirror_vma(vma)) {
+			pte_unmap_unlock(pte, ptl);
+			lock_page(page_m);
+			pte = pte_offset_map_lock(vma->vm_mm, pmd, address, &ptl);
+			if (pte_same(entry, *pte))
+				pax_mirror_anon_pte(vma, address, page_m, ptl);
+			else
+				unlock_page(page_m);
+		}
+	} else
+		pax_mirror_file_pte(vma, address, page_m, ptl);
+
+out:
+	pte_unmap_unlock(pte, ptl);
+}
+#endif
+
 /*
  * This routine handles present pages, when users try to write
  * to a shared page. It is done by copying the page to a new address
@@ -2683,6 +2880,12 @@ gotten:
 	 */
 	page_table = pte_offset_map_lock(mm, pmd, address, &ptl);
 	if (likely(pte_same(*page_table, orig_pte))) {
+
+#ifdef CONFIG_PAX_SEGMEXEC
+		if (pax_find_mirror_vma(vma))
+			BUG_ON(!trylock_page(new_page));
+#endif
+
 		if (old_page) {
 			if (!PageAnon(old_page)) {
 				dec_mm_counter_fast(mm, MM_FILEPAGES);
@@ -2734,6 +2937,10 @@ gotten:
 			page_remove_rmap(old_page);
 		}
 
+#ifdef CONFIG_PAX_SEGMEXEC
+		pax_mirror_anon_pte(vma, address, new_page, ptl);
+#endif
+
 		/* Free the old page.. */
 		new_page = old_page;
 		ret |= VM_FAULT_WRITE;
@@ -3013,6 +3220,11 @@ static int do_swap_page(struct mm_struct
 	swap_free(entry);
 	if (vm_swap_full() || (vma->vm_flags & VM_LOCKED) || PageMlocked(page))
 		try_to_free_swap(page);
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if ((flags & FAULT_FLAG_WRITE) || !pax_find_mirror_vma(vma))
+#endif
+
 	unlock_page(page);
 	if (swapcache) {
 		/*
@@ -3036,6 +3248,11 @@ static int do_swap_page(struct mm_struct
 
 	/* No need to invalidate - it was non-present before */
 	update_mmu_cache(vma, address, page_table);
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	pax_mirror_anon_pte(vma, address, page, ptl);
+#endif
+
 unlock:
 	pte_unmap_unlock(page_table, ptl);
 out:
@@ -3055,40 +3272,6 @@ out_release:
 }
 
 /*
- * This is like a special single-page "expand_{down|up}wards()",
- * except we must first make sure that 'address{-|+}PAGE_SIZE'
- * doesn't hit another vma.
- */
-static inline int check_stack_guard_page(struct vm_area_struct *vma, unsigned long address)
-{
-	address &= PAGE_MASK;
-	if ((vma->vm_flags & VM_GROWSDOWN) && address == vma->vm_start) {
-		struct vm_area_struct *prev = vma->vm_prev;
-
-		/*
-		 * Is there a mapping abutting this one below?
-		 *
-		 * That's only ok if it's the same stack mapping
-		 * that has gotten split..
-		 */
-		if (prev && prev->vm_end == address)
-			return prev->vm_flags & VM_GROWSDOWN ? 0 : -ENOMEM;
-
-		expand_downwards(vma, address - PAGE_SIZE);
-	}
-	if ((vma->vm_flags & VM_GROWSUP) && address + PAGE_SIZE == vma->vm_end) {
-		struct vm_area_struct *next = vma->vm_next;
-
-		/* As VM_GROWSDOWN but s/below/above/ */
-		if (next && next->vm_start == address + PAGE_SIZE)
-			return next->vm_flags & VM_GROWSUP ? 0 : -ENOMEM;
-
-		expand_upwards(vma, address + PAGE_SIZE);
-	}
-	return 0;
-}
-
-/*
  * We enter with non-exclusive mmap_sem (to exclude vma changes,
  * but allow concurrent faults), and pte mapped but not yet locked.
  * We return with mmap_sem still held, but pte unmapped and unlocked.
@@ -3097,27 +3280,23 @@ static int do_anonymous_page(struct mm_s
 		unsigned long address, pte_t *page_table, pmd_t *pmd,
 		unsigned int flags)
 {
-	struct page *page;
+	struct page *page = NULL;
 	spinlock_t *ptl;
 	pte_t entry;
 
-	pte_unmap(page_table);
-
-	/* Check if we need to add a guard page to the stack */
-	if (check_stack_guard_page(vma, address) < 0)
-		return VM_FAULT_SIGBUS;
-
-	/* Use the zero-page for reads */
 	if (!(flags & FAULT_FLAG_WRITE)) {
 		entry = pte_mkspecial(pfn_pte(my_zero_pfn(address),
 						vma->vm_page_prot));
-		page_table = pte_offset_map_lock(mm, pmd, address, &ptl);
+		ptl = pte_lockptr(mm, pmd);
+		spin_lock(ptl);
 		if (!pte_none(*page_table))
 			goto unlock;
 		goto setpte;
 	}
 
 	/* Allocate our own private page. */
+	pte_unmap(page_table);
+
 	if (unlikely(anon_vma_prepare(vma)))
 		goto oom;
 	page = alloc_zeroed_user_highpage_movable(vma, address);
@@ -3136,6 +3315,11 @@ static int do_anonymous_page(struct mm_s
 	if (!pte_none(*page_table))
 		goto release;
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (pax_find_mirror_vma(vma))
+		BUG_ON(!trylock_page(page));
+#endif
+
 	inc_mm_counter_fast(mm, MM_ANONPAGES);
 	page_add_new_anon_rmap(page, vma, address);
 setpte:
@@ -3143,6 +3327,12 @@ setpte:
 
 	/* No need to invalidate - it was non-present before */
 	update_mmu_cache(vma, address, page_table);
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (page)
+		pax_mirror_anon_pte(vma, address, page, ptl);
+#endif
+
 unlock:
 	pte_unmap_unlock(page_table, ptl);
 	return 0;
@@ -3286,6 +3476,12 @@ static int __do_fault(struct mm_struct *
 	 */
 	/* Only go through if we didn't race with anybody else... */
 	if (likely(pte_same(*page_table, orig_pte))) {
+
+#ifdef CONFIG_PAX_SEGMEXEC
+		if (anon && pax_find_mirror_vma(vma))
+			BUG_ON(!trylock_page(page));
+#endif
+
 		flush_icache_page(vma, page);
 		entry = mk_pte(page, vma->vm_page_prot);
 		if (flags & FAULT_FLAG_WRITE)
@@ -3305,6 +3501,14 @@ static int __do_fault(struct mm_struct *
 
 		/* no need to invalidate: a not-present page won't be cached */
 		update_mmu_cache(vma, address, page_table);
+
+#ifdef CONFIG_PAX_SEGMEXEC
+		if (anon)
+			pax_mirror_anon_pte(vma, address, page, ptl);
+		else
+			pax_mirror_file_pte(vma, address, page, ptl);
+#endif
+
 	} else {
 		if (cow_page)
 			mem_cgroup_uncharge_page(cow_page);
@@ -3458,6 +3662,12 @@ int handle_pte_fault(struct mm_struct *m
 		if (flags & FAULT_FLAG_WRITE)
 			flush_tlb_fix_spurious_fault(vma, address);
 	}
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	pax_mirror_pte(vma, address, pte, pmd, ptl);
+	return 0;
+#endif
+
 unlock:
 	pte_unmap_unlock(pte, ptl);
 	return 0;
@@ -3474,6 +3684,10 @@ int handle_mm_fault(struct mm_struct *mm
 	pmd_t *pmd;
 	pte_t *pte;
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	struct vm_area_struct *vma_m;
+#endif
+
 	__set_current_state(TASK_RUNNING);
 
 	count_vm_event(PGFAULT);
@@ -3485,6 +3699,34 @@ int handle_mm_fault(struct mm_struct *mm
 	if (unlikely(is_vm_hugetlb_page(vma)))
 		return hugetlb_fault(mm, vma, address, flags);
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	vma_m = pax_find_mirror_vma(vma);
+	if (vma_m) {
+		unsigned long address_m;
+		pgd_t *pgd_m;
+		pud_t *pud_m;
+		pmd_t *pmd_m;
+
+		if (vma->vm_start > vma_m->vm_start) {
+			address_m = address;
+			address -= SEGMEXEC_TASK_SIZE;
+			vma = vma_m;
+		} else
+			address_m = address + SEGMEXEC_TASK_SIZE;
+
+		pgd_m = pgd_offset(mm, address_m);
+		pud_m = pud_alloc(mm, pgd_m, address_m);
+		if (!pud_m)
+			return VM_FAULT_OOM;
+		pmd_m = pmd_alloc(mm, pud_m, address_m);
+		if (!pmd_m)
+			return VM_FAULT_OOM;
+		if (!pmd_present(*pmd_m) && __pte_alloc(mm, vma_m, pmd_m, address_m))
+			return VM_FAULT_OOM;
+		pax_unmap_mirror_pte(vma_m, address_m, pmd_m);
+	}
+#endif
+
 	pgd = pgd_offset(mm, address);
 	pud = pud_alloc(mm, pgd, address);
 	if (!pud)
@@ -3514,7 +3756,7 @@ int handle_mm_fault(struct mm_struct *mm
 	 * run pte_offset_map on the pmd, if an huge pmd could
 	 * materialize from under us from a different thread.
 	 */
-	if (unlikely(pmd_none(*pmd)) && __pte_alloc(mm, vma, pmd, address))
+	if (unlikely(pmd_none(*pmd) && __pte_alloc(mm, vma, pmd, address)))
 		return VM_FAULT_OOM;
 	/* if an huge pmd materialized from under us just retry later */
 	if (unlikely(pmd_trans_huge(*pmd)))
@@ -3551,6 +3793,23 @@ int __pud_alloc(struct mm_struct *mm, pg
 	spin_unlock(&mm->page_table_lock);
 	return 0;
 }
+
+int __pud_alloc_kernel(struct mm_struct *mm, pgd_t *pgd, unsigned long address)
+{
+	pud_t *new = pud_alloc_one(mm, address);
+	if (!new)
+		return -ENOMEM;
+
+	smp_wmb(); /* See comment in __pte_alloc */
+
+	spin_lock(&mm->page_table_lock);
+	if (pgd_present(*pgd))		/* Another has populated it */
+		pud_free(mm, new);
+	else
+		pgd_populate_kernel(mm, pgd, new);
+	spin_unlock(&mm->page_table_lock);
+	return 0;
+}
 #endif /* __PAGETABLE_PUD_FOLDED */
 
 #ifndef __PAGETABLE_PMD_FOLDED
@@ -3581,6 +3840,30 @@ int __pmd_alloc(struct mm_struct *mm, pu
 	spin_unlock(&mm->page_table_lock);
 	return 0;
 }
+
+int __pmd_alloc_kernel(struct mm_struct *mm, pud_t *pud, unsigned long address)
+{
+	pmd_t *new = pmd_alloc_one(mm, address);
+	if (!new)
+		return -ENOMEM;
+
+	smp_wmb(); /* See comment in __pte_alloc */
+
+	spin_lock(&mm->page_table_lock);
+#ifndef __ARCH_HAS_4LEVEL_HACK
+	if (pud_present(*pud))		/* Another has populated it */
+		pmd_free(mm, new);
+	else
+		pud_populate_kernel(mm, pud, new);
+#else
+	if (pgd_present(*pud))		/* Another has populated it */
+		pmd_free(mm, new);
+	else
+		pgd_populate_kernel(mm, pud, new);
+#endif /* __ARCH_HAS_4LEVEL_HACK */
+	spin_unlock(&mm->page_table_lock);
+	return 0;
+}
 #endif /* __PAGETABLE_PMD_FOLDED */
 
 int make_pages_present(unsigned long addr, unsigned long end)
@@ -3618,7 +3901,7 @@ static int __init gate_vma_init(void)
 	gate_vma.vm_start = FIXADDR_USER_START;
 	gate_vma.vm_end = FIXADDR_USER_END;
 	gate_vma.vm_flags = VM_READ | VM_MAYREAD | VM_EXEC | VM_MAYEXEC;
-	gate_vma.vm_page_prot = __P101;
+	gate_vma.vm_page_prot = vm_get_page_prot(gate_vma.vm_flags);
 	/*
 	 * Make sure the vDSO gets into every core dump.
 	 * Dumping its contents makes post-mortem fully interpretable later
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/memory-failure.c linux-3.3.8-pax/mm/memory-failure.c
--- linux-3.3.8/mm/memory-failure.c	2012-03-19 10:39:12.164049165 +0100
+++ linux-3.3.8-pax/mm/memory-failure.c	2012-03-19 10:43:44.612034617 +0100
@@ -61,7 +61,7 @@ int sysctl_memory_failure_early_kill __r
 
 int sysctl_memory_failure_recovery __read_mostly = 1;
 
-atomic_long_t mce_bad_pages __read_mostly = ATOMIC_LONG_INIT(0);
+atomic_long_unchecked_t mce_bad_pages __read_mostly = ATOMIC_LONG_INIT(0);
 
 #if defined(CONFIG_HWPOISON_INJECT) || defined(CONFIG_HWPOISON_INJECT_MODULE)
 
@@ -202,7 +202,7 @@ static int kill_proc_ao(struct task_stru
 	si.si_signo = SIGBUS;
 	si.si_errno = 0;
 	si.si_code = BUS_MCEERR_AO;
-	si.si_addr = (void *)addr;
+	si.si_addr = (void __user *)addr;
 #ifdef __ARCH_SI_TRAPNO
 	si.si_trapno = trapno;
 #endif
@@ -1010,7 +1010,7 @@ int __memory_failure(unsigned long pfn,
 	}
 
 	nr_pages = 1 << compound_trans_order(hpage);
-	atomic_long_add(nr_pages, &mce_bad_pages);
+	atomic_long_add_unchecked(nr_pages, &mce_bad_pages);
 
 	/*
 	 * We need/can do nothing about count=0 pages.
@@ -1040,7 +1040,7 @@ int __memory_failure(unsigned long pfn,
 			if (!PageHWPoison(hpage)
 			    || (hwpoison_filter(p) && TestClearPageHWPoison(p))
 			    || (p != hpage && TestSetPageHWPoison(hpage))) {
-				atomic_long_sub(nr_pages, &mce_bad_pages);
+				atomic_long_sub_unchecked(nr_pages, &mce_bad_pages);
 				return 0;
 			}
 			set_page_hwpoison_huge_page(hpage);
@@ -1098,7 +1098,7 @@ int __memory_failure(unsigned long pfn,
 	}
 	if (hwpoison_filter(p)) {
 		if (TestClearPageHWPoison(p))
-			atomic_long_sub(nr_pages, &mce_bad_pages);
+			atomic_long_sub_unchecked(nr_pages, &mce_bad_pages);
 		unlock_page(hpage);
 		put_page(hpage);
 		return 0;
@@ -1315,7 +1315,7 @@ int unpoison_memory(unsigned long pfn)
 			return 0;
 		}
 		if (TestClearPageHWPoison(p))
-			atomic_long_sub(nr_pages, &mce_bad_pages);
+			atomic_long_sub_unchecked(nr_pages, &mce_bad_pages);
 		pr_info("MCE: Software-unpoisoned free page %#lx\n", pfn);
 		return 0;
 	}
@@ -1329,7 +1329,7 @@ int unpoison_memory(unsigned long pfn)
 	 */
 	if (TestClearPageHWPoison(page)) {
 		pr_info("MCE: Software-unpoisoned page %#lx\n", pfn);
-		atomic_long_sub(nr_pages, &mce_bad_pages);
+		atomic_long_sub_unchecked(nr_pages, &mce_bad_pages);
 		freeit = 1;
 		if (PageHuge(page))
 			clear_page_hwpoison_huge_page(page);
@@ -1442,7 +1442,7 @@ static int soft_offline_huge_page(struct
 	}
 done:
 	if (!PageHWPoison(hpage))
-		atomic_long_add(1 << compound_trans_order(hpage), &mce_bad_pages);
+		atomic_long_add_unchecked(1 << compound_trans_order(hpage), &mce_bad_pages);
 	set_page_hwpoison_huge_page(hpage);
 	dequeue_hwpoisoned_huge_page(hpage);
 	/* keep elevated page count for bad page */
@@ -1573,7 +1573,7 @@ int soft_offline_page(struct page *page,
 		return ret;
 
 done:
-	atomic_long_add(1, &mce_bad_pages);
+	atomic_long_add_unchecked(1, &mce_bad_pages);
 	SetPageHWPoison(page);
 	/* keep elevated page count for bad page */
 	return ret;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/mempolicy.c linux-3.3.8-pax/mm/mempolicy.c
--- linux-3.3.8/mm/mempolicy.c	2012-06-11 19:36:39.372445764 +0200
+++ linux-3.3.8-pax/mm/mempolicy.c	2012-06-11 19:53:30.404500680 +0200
@@ -619,6 +619,10 @@ static int mbind_range(struct mm_struct
 	unsigned long vmstart;
 	unsigned long vmend;
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	struct vm_area_struct *vma_m;
+#endif
+
 	vma = find_vma(mm, start);
 	if (!vma || vma->vm_start > start)
 		return -EFAULT;
@@ -672,6 +676,16 @@ static int mbind_range(struct mm_struct
 			if (err)
 				goto out;
 		}
+
+#ifdef CONFIG_PAX_SEGMEXEC
+		vma_m = pax_find_mirror_vma(vma);
+		if (vma_m && vma_m->vm_ops && vma_m->vm_ops->set_policy) {
+			err = vma_m->vm_ops->set_policy(vma_m, new_pol);
+			if (err)
+				goto out;
+		}
+#endif
+
 	}
 
  out:
@@ -1105,6 +1119,17 @@ static long do_mbind(unsigned long start
 
 	if (end < start)
 		return -EINVAL;
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (mm->pax_flags & MF_PAX_SEGMEXEC) {
+		if (end > SEGMEXEC_TASK_SIZE)
+			return -EINVAL;
+	} else
+#endif
+
+	if (end > TASK_SIZE)
+		return -EINVAL;
+
 	if (end == start)
 		return 0;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/mlock.c linux-3.3.8-pax/mm/mlock.c
--- linux-3.3.8/mm/mlock.c	2012-03-19 10:39:12.600049141 +0100
+++ linux-3.3.8-pax/mm/mlock.c	2012-03-19 10:43:44.616034618 +0100
@@ -385,6 +385,9 @@ static int do_mlock(unsigned long start,
 		return -EINVAL;
 	if (end == start)
 		return 0;
+	if (end > TASK_SIZE)
+		return -EINVAL;
+
 	vma = find_vma(current->mm, start);
 	if (!vma || vma->vm_start > start)
 		return -ENOMEM;
@@ -396,6 +399,11 @@ static int do_mlock(unsigned long start,
 	for (nstart = start ; ; ) {
 		vm_flags_t newflags;
 
+#ifdef CONFIG_PAX_SEGMEXEC
+		if ((current->mm->pax_flags & MF_PAX_SEGMEXEC) && (vma->vm_start >= SEGMEXEC_TASK_SIZE))
+			break;
+#endif
+
 		/* Here we know that  vma->vm_start <= nstart < vma->vm_end. */
 
 		newflags = vma->vm_flags | VM_LOCKED;
@@ -524,17 +532,23 @@ SYSCALL_DEFINE2(munlock, unsigned long,
 static int do_mlockall(int flags)
 {
 	struct vm_area_struct * vma, * prev = NULL;
-	unsigned int def_flags = 0;
 
 	if (flags & MCL_FUTURE)
-		def_flags = VM_LOCKED;
-	current->mm->def_flags = def_flags;
+		current->mm->def_flags |= VM_LOCKED;
+	else
+		current->mm->def_flags &= ~VM_LOCKED;
 	if (flags == MCL_FUTURE)
 		goto out;
 
 	for (vma = current->mm->mmap; vma ; vma = prev->vm_next) {
 		vm_flags_t newflags;
 
+#ifdef CONFIG_PAX_SEGMEXEC
+		if ((current->mm->pax_flags & MF_PAX_SEGMEXEC) && (vma->vm_start >= SEGMEXEC_TASK_SIZE))
+			break;
+#endif
+
+		BUG_ON(vma->vm_end > TASK_SIZE);
 		newflags = vma->vm_flags | VM_LOCKED;
 		if (!(flags & MCL_CURRENT))
 			newflags &= ~VM_LOCKED;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/mmap.c linux-3.3.8-pax/mm/mmap.c
--- linux-3.3.8/mm/mmap.c	2012-03-19 10:39:12.604049140 +0100
+++ linux-3.3.8-pax/mm/mmap.c	2012-04-08 19:01:16.520238915 +0200
@@ -46,6 +46,16 @@
 #define arch_rebalance_pgtables(addr, len)		(addr)
 #endif
 
+static inline void verify_mm_writelocked(struct mm_struct *mm)
+{
+#if defined(CONFIG_DEBUG_VM) || defined(CONFIG_PAX)
+	if (unlikely(down_read_trylock(&mm->mmap_sem))) {
+		up_read(&mm->mmap_sem);
+		BUG();
+	}
+#endif
+}
+
 static void unmap_region(struct mm_struct *mm,
 		struct vm_area_struct *vma, struct vm_area_struct *prev,
 		unsigned long start, unsigned long end);
@@ -71,22 +81,32 @@ static void unmap_region(struct mm_struc
  *		x: (no) no	x: (no) yes	x: (no) yes	x: (yes) yes
  *
  */
-pgprot_t protection_map[16] = {
+pgprot_t protection_map[16] __read_only = {
 	__P000, __P001, __P010, __P011, __P100, __P101, __P110, __P111,
 	__S000, __S001, __S010, __S011, __S100, __S101, __S110, __S111
 };
 
-pgprot_t vm_get_page_prot(unsigned long vm_flags)
+pgprot_t vm_get_page_prot(vm_flags_t vm_flags)
 {
-	return __pgprot(pgprot_val(protection_map[vm_flags &
+	pgprot_t prot = __pgprot(pgprot_val(protection_map[vm_flags &
 				(VM_READ|VM_WRITE|VM_EXEC|VM_SHARED)]) |
 			pgprot_val(arch_vm_get_page_prot(vm_flags)));
+
+#if defined(CONFIG_PAX_PAGEEXEC) && defined(CONFIG_X86_32)
+	if (!(__supported_pte_mask & _PAGE_NX) &&
+	    (vm_flags & (VM_PAGEEXEC | VM_EXEC)) == VM_PAGEEXEC &&
+	    (vm_flags & (VM_READ | VM_WRITE)))
+		prot = __pgprot(pte_val(pte_exprotect(__pte(pgprot_val(prot)))));
+#endif
+
+	return prot;
 }
 EXPORT_SYMBOL(vm_get_page_prot);
 
 int sysctl_overcommit_memory __read_mostly = OVERCOMMIT_GUESS;  /* heuristic overcommit */
 int sysctl_overcommit_ratio __read_mostly = 50;	/* default is 50% */
 int sysctl_max_map_count __read_mostly = DEFAULT_MAX_MAP_COUNT;
+unsigned long sysctl_heap_stack_gap __read_mostly = 64*1024;
 /*
  * Make sure vm_committed_as in one cacheline and not cacheline shared with
  * other variables. It can be updated by several CPUs frequently.
@@ -228,6 +248,7 @@ static struct vm_area_struct *remove_vma
 	struct vm_area_struct *next = vma->vm_next;
 
 	might_sleep();
+	BUG_ON(vma->vm_mirror);
 	if (vma->vm_ops && vma->vm_ops->close)
 		vma->vm_ops->close(vma);
 	if (vma->vm_file) {
@@ -689,6 +710,12 @@ static int
 can_vma_merge_before(struct vm_area_struct *vma, unsigned long vm_flags,
 	struct anon_vma *anon_vma, struct file *file, pgoff_t vm_pgoff)
 {
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if ((vma->vm_mm->pax_flags & MF_PAX_SEGMEXEC) && vma->vm_start == SEGMEXEC_TASK_SIZE)
+		return 0;
+#endif
+
 	if (is_mergeable_vma(vma, file, vm_flags) &&
 	    is_mergeable_anon_vma(anon_vma, vma->anon_vma, vma)) {
 		if (vma->vm_pgoff == vm_pgoff)
@@ -708,6 +735,12 @@ static int
 can_vma_merge_after(struct vm_area_struct *vma, unsigned long vm_flags,
 	struct anon_vma *anon_vma, struct file *file, pgoff_t vm_pgoff)
 {
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if ((vma->vm_mm->pax_flags & MF_PAX_SEGMEXEC) && vma->vm_end == SEGMEXEC_TASK_SIZE)
+		return 0;
+#endif
+
 	if (is_mergeable_vma(vma, file, vm_flags) &&
 	    is_mergeable_anon_vma(anon_vma, vma->anon_vma, vma)) {
 		pgoff_t vm_pglen;
@@ -750,13 +783,20 @@ can_vma_merge_after(struct vm_area_struc
 struct vm_area_struct *vma_merge(struct mm_struct *mm,
 			struct vm_area_struct *prev, unsigned long addr,
 			unsigned long end, unsigned long vm_flags,
-		     	struct anon_vma *anon_vma, struct file *file,
+			struct anon_vma *anon_vma, struct file *file,
 			pgoff_t pgoff, struct mempolicy *policy)
 {
 	pgoff_t pglen = (end - addr) >> PAGE_SHIFT;
 	struct vm_area_struct *area, *next;
 	int err;
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	unsigned long addr_m = addr + SEGMEXEC_TASK_SIZE, end_m = end + SEGMEXEC_TASK_SIZE;
+	struct vm_area_struct *area_m = NULL, *next_m = NULL, *prev_m = NULL;
+
+	BUG_ON((mm->pax_flags & MF_PAX_SEGMEXEC) && SEGMEXEC_TASK_SIZE < end);
+#endif
+
 	/*
 	 * We later require that vma->vm_flags == vm_flags,
 	 * so this tests vma->vm_flags & VM_SPECIAL, too.
@@ -772,6 +812,15 @@ struct vm_area_struct *vma_merge(struct
 	if (next && next->vm_end == end)		/* cases 6, 7, 8 */
 		next = next->vm_next;
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (prev)
+		prev_m = pax_find_mirror_vma(prev);
+	if (area)
+		area_m = pax_find_mirror_vma(area);
+	if (next)
+		next_m = pax_find_mirror_vma(next);
+#endif
+
 	/*
 	 * Can it merge with the predecessor?
 	 */
@@ -791,9 +840,24 @@ struct vm_area_struct *vma_merge(struct
 							/* cases 1, 6 */
 			err = vma_adjust(prev, prev->vm_start,
 				next->vm_end, prev->vm_pgoff, NULL);
-		} else					/* cases 2, 5, 7 */
+
+#ifdef CONFIG_PAX_SEGMEXEC
+			if (!err && prev_m)
+				err = vma_adjust(prev_m, prev_m->vm_start,
+					next_m->vm_end, prev_m->vm_pgoff, NULL);
+#endif
+
+		} else {				/* cases 2, 5, 7 */
 			err = vma_adjust(prev, prev->vm_start,
 				end, prev->vm_pgoff, NULL);
+
+#ifdef CONFIG_PAX_SEGMEXEC
+			if (!err && prev_m)
+				err = vma_adjust(prev_m, prev_m->vm_start,
+						end_m, prev_m->vm_pgoff, NULL);
+#endif
+
+		}
 		if (err)
 			return NULL;
 		khugepaged_enter_vma_merge(prev);
@@ -807,12 +871,27 @@ struct vm_area_struct *vma_merge(struct
  			mpol_equal(policy, vma_policy(next)) &&
 			can_vma_merge_before(next, vm_flags,
 					anon_vma, file, pgoff+pglen)) {
-		if (prev && addr < prev->vm_end)	/* case 4 */
+		if (prev && addr < prev->vm_end) {	/* case 4 */
 			err = vma_adjust(prev, prev->vm_start,
 				addr, prev->vm_pgoff, NULL);
-		else					/* cases 3, 8 */
+
+#ifdef CONFIG_PAX_SEGMEXEC
+			if (!err && prev_m)
+				err = vma_adjust(prev_m, prev_m->vm_start,
+						addr_m, prev_m->vm_pgoff, NULL);
+#endif
+
+		} else {				/* cases 3, 8 */
 			err = vma_adjust(area, addr, next->vm_end,
 				next->vm_pgoff - pglen, NULL);
+
+#ifdef CONFIG_PAX_SEGMEXEC
+			if (!err && area_m)
+				err = vma_adjust(area_m, addr_m, next_m->vm_end,
+						next_m->vm_pgoff - pglen, NULL);
+#endif
+
+		}
 		if (err)
 			return NULL;
 		khugepaged_enter_vma_merge(area);
@@ -921,14 +1000,11 @@ none:
 void vm_stat_account(struct mm_struct *mm, unsigned long flags,
 						struct file *file, long pages)
 {
-	const unsigned long stack_flags
-		= VM_STACK_FLAGS & (VM_GROWSUP|VM_GROWSDOWN);
-
 	if (file) {
 		mm->shared_vm += pages;
 		if ((flags & (VM_EXEC|VM_WRITE)) == VM_EXEC)
 			mm->exec_vm += pages;
-	} else if (flags & stack_flags)
+	} else if (flags & (VM_GROWSUP|VM_GROWSDOWN))
 		mm->stack_vm += pages;
 	if (flags & (VM_RESERVED|VM_IO))
 		mm->reserved_vm += pages;
@@ -955,7 +1031,7 @@ unsigned long do_mmap_pgoff(struct file
 	 * (the exception is when the underlying filesystem is noexec
 	 *  mounted, in which case we dont add PROT_EXEC.)
 	 */
-	if ((prot & PROT_READ) && (current->personality & READ_IMPLIES_EXEC))
+	if ((prot & (PROT_READ | PROT_WRITE)) && (current->personality & READ_IMPLIES_EXEC))
 		if (!(file && (file->f_path.mnt->mnt_flags & MNT_NOEXEC)))
 			prot |= PROT_EXEC;
 
@@ -981,7 +1057,7 @@ unsigned long do_mmap_pgoff(struct file
 	/* Obtain the address to map to. we verify (or select) it and ensure
 	 * that it represents a valid section of the address space.
 	 */
-	addr = get_unmapped_area(file, addr, len, pgoff, flags);
+	addr = get_unmapped_area(file, addr, len, pgoff, flags | ((prot & PROT_EXEC) ? MAP_EXECUTABLE : 0));
 	if (addr & ~PAGE_MASK)
 		return addr;
 
@@ -992,6 +1068,28 @@ unsigned long do_mmap_pgoff(struct file
 	vm_flags = calc_vm_prot_bits(prot) | calc_vm_flag_bits(flags) |
 			mm->def_flags | VM_MAYREAD | VM_MAYWRITE | VM_MAYEXEC;
 
+#ifdef CONFIG_PAX_MPROTECT
+	if (mm->pax_flags & MF_PAX_MPROTECT) {
+		if ((vm_flags & (VM_WRITE | VM_EXEC)) == (VM_WRITE | VM_EXEC))
+
+#ifdef CONFIG_PAX_EMUPLT
+			vm_flags &= ~VM_EXEC;
+#else
+			return -EPERM;
+#endif
+
+		if (!(vm_flags & VM_EXEC))
+			vm_flags &= ~VM_MAYEXEC;
+		else
+			vm_flags &= ~VM_MAYWRITE;
+	}
+#endif
+
+#if defined(CONFIG_PAX_PAGEEXEC) && defined(CONFIG_X86_32)
+	if ((mm->pax_flags & MF_PAX_PAGEEXEC) && file)
+		vm_flags &= ~VM_PAGEEXEC;
+#endif
+
 	if (flags & MAP_LOCKED)
 		if (!can_do_mlock())
 			return -EPERM;
@@ -1153,7 +1251,7 @@ int vma_wants_writenotify(struct vm_area
 	vm_flags_t vm_flags = vma->vm_flags;
 
 	/* If it was private or non-writable, the write bit is already clear */
-	if ((vm_flags & (VM_WRITE|VM_SHARED)) != ((VM_WRITE|VM_SHARED)))
+	if ((vm_flags & (VM_WRITE|VM_SHARED)) != (VM_WRITE|VM_SHARED))
 		return 0;
 
 	/* The backer wishes to know when pages are first written to? */
@@ -1202,14 +1300,24 @@ unsigned long mmap_region(struct file *f
 	unsigned long charged = 0;
 	struct inode *inode =  file ? file->f_path.dentry->d_inode : NULL;
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	struct vm_area_struct *vma_m = NULL;
+#endif
+
+	/*
+	 * mm->mmap_sem is required to protect against another thread
+	 * changing the mappings in case we sleep.
+	 */
+	verify_mm_writelocked(mm);
+
 	/* Clear old maps */
 	error = -ENOMEM;
-munmap_back:
 	vma = find_vma_prepare(mm, addr, &prev, &rb_link, &rb_parent);
 	if (vma && vma->vm_start < addr + len) {
 		if (do_munmap(mm, addr, len))
 			return -ENOMEM;
-		goto munmap_back;
+		vma = find_vma_prepare(mm, addr, &prev, &rb_link, &rb_parent);
+		BUG_ON(vma && vma->vm_start < addr + len);
 	}
 
 	/* Check against address space limit. */
@@ -1258,6 +1366,16 @@ munmap_back:
 		goto unacct_error;
 	}
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	if ((mm->pax_flags & MF_PAX_SEGMEXEC) && (vm_flags & VM_EXEC)) {
+		vma_m = kmem_cache_zalloc(vm_area_cachep, GFP_KERNEL);
+		if (!vma_m) {
+			error = -ENOMEM;
+			goto free_vma;
+		}
+	}
+#endif
+
 	vma->vm_mm = mm;
 	vma->vm_start = addr;
 	vma->vm_end = addr + len;
@@ -1282,6 +1400,19 @@ munmap_back:
 		error = file->f_op->mmap(file, vma);
 		if (error)
 			goto unmap_and_free_vma;
+
+#ifdef CONFIG_PAX_SEGMEXEC
+		if (vma_m && (vm_flags & VM_EXECUTABLE))
+			added_exe_file_vma(mm);
+#endif
+
+#if defined(CONFIG_PAX_PAGEEXEC) && defined(CONFIG_X86_32)
+		if ((mm->pax_flags & MF_PAX_PAGEEXEC) && !(vma->vm_flags & VM_SPECIAL)) {
+			vma->vm_flags |= VM_PAGEEXEC;
+			vma->vm_page_prot = vm_get_page_prot(vma->vm_flags);
+		}
+#endif
+
 		if (vm_flags & VM_EXECUTABLE)
 			added_exe_file_vma(mm);
 
@@ -1319,6 +1450,11 @@ munmap_back:
 	vma_link(mm, vma, prev, rb_link, rb_parent);
 	file = vma->vm_file;
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (vma_m)
+		BUG_ON(pax_mirror_vma(vma_m, vma));
+#endif
+
 	/* Once vma denies write, undo our temporary denial count */
 	if (correct_wcount)
 		atomic_inc(&inode->i_writecount);
@@ -1327,6 +1463,7 @@ out:
 
 	mm->total_vm += len >> PAGE_SHIFT;
 	vm_stat_account(mm, vm_flags, file, len >> PAGE_SHIFT);
+	track_exec_limit(mm, addr, addr + len, vm_flags);
 	if (vm_flags & VM_LOCKED) {
 		if (!mlock_vma_pages_range(vma, addr, addr + len))
 			mm->locked_vm += (len >> PAGE_SHIFT);
@@ -1344,6 +1481,12 @@ unmap_and_free_vma:
 	unmap_region(mm, vma, prev, vma->vm_start, vma->vm_end);
 	charged = 0;
 free_vma:
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (vma_m)
+		kmem_cache_free(vm_area_cachep, vma_m);
+#endif
+
 	kmem_cache_free(vm_area_cachep, vma);
 unacct_error:
 	if (charged)
@@ -1351,6 +1494,44 @@ unacct_error:
 	return error;
 }
 
+bool check_heap_stack_gap(const struct vm_area_struct *vma, unsigned long addr, unsigned long len)
+{
+	if (!vma) {
+#ifdef CONFIG_STACK_GROWSUP
+		if (addr > sysctl_heap_stack_gap)
+			vma = find_vma(current->mm, addr - sysctl_heap_stack_gap);
+		else
+			vma = find_vma(current->mm, 0);
+		if (vma && (vma->vm_flags & VM_GROWSUP))
+			return false;
+#endif
+		return true;
+	}
+
+	if (addr + len > vma->vm_start)
+		return false;
+
+	if (vma->vm_flags & VM_GROWSDOWN)
+		return sysctl_heap_stack_gap <= vma->vm_start - addr - len;
+#ifdef CONFIG_STACK_GROWSUP
+	else if (vma->vm_prev && (vma->vm_prev->vm_flags & VM_GROWSUP))
+		return addr - vma->vm_prev->vm_end <= sysctl_heap_stack_gap;
+#endif
+
+	return true;
+}
+
+unsigned long skip_heap_stack_gap(const struct vm_area_struct *vma, unsigned long len)
+{
+	if (vma->vm_start < len)
+		return -ENOMEM;
+	if (!(vma->vm_flags & VM_GROWSDOWN))
+		return vma->vm_start - len;
+	if (sysctl_heap_stack_gap <= vma->vm_start - len)
+		return vma->vm_start - len - sysctl_heap_stack_gap;
+	return -ENOMEM;
+}
+
 /* Get an address range which is currently unmapped.
  * For shmat() with addr=0.
  *
@@ -1377,18 +1558,23 @@ arch_get_unmapped_area(struct file *filp
 	if (flags & MAP_FIXED)
 		return addr;
 
+#ifdef CONFIG_PAX_RANDMMAP
+	if (!(mm->pax_flags & MF_PAX_RANDMMAP))
+#endif
+
 	if (addr) {
 		addr = PAGE_ALIGN(addr);
-		vma = find_vma(mm, addr);
-		if (TASK_SIZE - len >= addr &&
-		    (!vma || addr + len <= vma->vm_start))
-			return addr;
+		if (TASK_SIZE - len >= addr) {
+			vma = find_vma(mm, addr);
+			if (check_heap_stack_gap(vma, addr, len))
+				return addr;
+		}
 	}
 	if (len > mm->cached_hole_size) {
-	        start_addr = addr = mm->free_area_cache;
+		start_addr = addr = mm->free_area_cache;
 	} else {
-	        start_addr = addr = TASK_UNMAPPED_BASE;
-	        mm->cached_hole_size = 0;
+		start_addr = addr = mm->mmap_base;
+		mm->cached_hole_size = 0;
 	}
 
 full_search:
@@ -1399,34 +1585,40 @@ full_search:
 			 * Start a new search - just in case we missed
 			 * some holes.
 			 */
-			if (start_addr != TASK_UNMAPPED_BASE) {
-				addr = TASK_UNMAPPED_BASE;
-			        start_addr = addr;
+			if (start_addr != mm->mmap_base) {
+				start_addr = addr = mm->mmap_base;
 				mm->cached_hole_size = 0;
 				goto full_search;
 			}
 			return -ENOMEM;
 		}
-		if (!vma || addr + len <= vma->vm_start) {
-			/*
-			 * Remember the place where we stopped the search:
-			 */
-			mm->free_area_cache = addr + len;
-			return addr;
-		}
+		if (check_heap_stack_gap(vma, addr, len))
+			break;
 		if (addr + mm->cached_hole_size < vma->vm_start)
 		        mm->cached_hole_size = vma->vm_start - addr;
 		addr = vma->vm_end;
 	}
+
+	/*
+	 * Remember the place where we stopped the search:
+	 */
+	mm->free_area_cache = addr + len;
+	return addr;
 }
 #endif	
 
 void arch_unmap_area(struct mm_struct *mm, unsigned long addr)
 {
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if ((mm->pax_flags & MF_PAX_SEGMEXEC) && SEGMEXEC_TASK_SIZE <= addr)
+		return;
+#endif
+
 	/*
 	 * Is this a new hole at the lowest possible address?
 	 */
-	if (addr >= TASK_UNMAPPED_BASE && addr < mm->free_area_cache) {
+	if (addr >= mm->mmap_base && addr < mm->free_area_cache) {
 		mm->free_area_cache = addr;
 		mm->cached_hole_size = ~0UL;
 	}
@@ -1444,7 +1636,7 @@ arch_get_unmapped_area_topdown(struct fi
 {
 	struct vm_area_struct *vma;
 	struct mm_struct *mm = current->mm;
-	unsigned long addr = addr0;
+	unsigned long base = mm->mmap_base, addr = addr0;
 
 	/* requested length too big for entire address space */
 	if (len > TASK_SIZE)
@@ -1453,13 +1645,18 @@ arch_get_unmapped_area_topdown(struct fi
 	if (flags & MAP_FIXED)
 		return addr;
 
+#ifdef CONFIG_PAX_RANDMMAP
+	if (!(mm->pax_flags & MF_PAX_RANDMMAP))
+#endif
+
 	/* requesting a specific address */
 	if (addr) {
 		addr = PAGE_ALIGN(addr);
-		vma = find_vma(mm, addr);
-		if (TASK_SIZE - len >= addr &&
-				(!vma || addr + len <= vma->vm_start))
-			return addr;
+		if (TASK_SIZE - len >= addr) {
+			vma = find_vma(mm, addr);
+			if (check_heap_stack_gap(vma, addr, len))
+				return addr;
+		}
 	}
 
 	/* check if free_area_cache is useful for us */
@@ -1474,7 +1671,7 @@ arch_get_unmapped_area_topdown(struct fi
 	/* make sure it can fit in the remaining address space */
 	if (addr > len) {
 		vma = find_vma(mm, addr-len);
-		if (!vma || addr <= vma->vm_start)
+		if (check_heap_stack_gap(vma, addr - len, len))
 			/* remember the address as a hint for next time */
 			return (mm->free_area_cache = addr-len);
 	}
@@ -1491,7 +1688,7 @@ arch_get_unmapped_area_topdown(struct fi
 		 * return with success:
 		 */
 		vma = find_vma(mm, addr);
-		if (!vma || addr+len <= vma->vm_start)
+		if (check_heap_stack_gap(vma, addr, len))
 			/* remember the address as a hint for next time */
 			return (mm->free_area_cache = addr);
 
@@ -1500,8 +1697,8 @@ arch_get_unmapped_area_topdown(struct fi
  		        mm->cached_hole_size = vma->vm_start - addr;
 
 		/* try just below the current vma->vm_start */
-		addr = vma->vm_start-len;
-	} while (len < vma->vm_start);
+		addr = skip_heap_stack_gap(vma, len);
+	} while (!IS_ERR_VALUE(addr));
 
 bottomup:
 	/*
@@ -1510,13 +1707,21 @@ bottomup:
 	 * can happen with large stack limits and large mmap()
 	 * allocations.
 	 */
+	mm->mmap_base = TASK_UNMAPPED_BASE;
+
+#ifdef CONFIG_PAX_RANDMMAP
+	if (mm->pax_flags & MF_PAX_RANDMMAP)
+		mm->mmap_base += mm->delta_mmap;
+#endif
+
+	mm->free_area_cache = mm->mmap_base;
 	mm->cached_hole_size = ~0UL;
-  	mm->free_area_cache = TASK_UNMAPPED_BASE;
 	addr = arch_get_unmapped_area(filp, addr0, len, pgoff, flags);
 	/*
 	 * Restore the topdown base:
 	 */
-	mm->free_area_cache = mm->mmap_base;
+	mm->mmap_base = base;
+	mm->free_area_cache = base;
 	mm->cached_hole_size = ~0UL;
 
 	return addr;
@@ -1525,6 +1730,12 @@ bottomup:
 
 void arch_unmap_area_topdown(struct mm_struct *mm, unsigned long addr)
 {
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if ((mm->pax_flags & MF_PAX_SEGMEXEC) && SEGMEXEC_TASK_SIZE <= addr)
+		return;
+#endif
+
 	/*
 	 * Is this a new hole at the highest possible address?
 	 */
@@ -1532,8 +1743,10 @@ void arch_unmap_area_topdown(struct mm_s
 		mm->free_area_cache = addr;
 
 	/* dont allow allocations above current base */
-	if (mm->free_area_cache > mm->mmap_base)
+	if (mm->free_area_cache > mm->mmap_base) {
 		mm->free_area_cache = mm->mmap_base;
+		mm->cached_hole_size = ~0UL;
+	}
 }
 
 unsigned long
@@ -1629,6 +1842,28 @@ find_vma_prev(struct mm_struct *mm, unsi
 	return vma;
 }
 
+#ifdef CONFIG_PAX_SEGMEXEC
+struct vm_area_struct *pax_find_mirror_vma(struct vm_area_struct *vma)
+{
+	struct vm_area_struct *vma_m;
+
+	BUG_ON(!vma || vma->vm_start >= vma->vm_end);
+	if (!(vma->vm_mm->pax_flags & MF_PAX_SEGMEXEC) || !(vma->vm_flags & VM_EXEC)) {
+		BUG_ON(vma->vm_mirror);
+		return NULL;
+	}
+	BUG_ON(vma->vm_start < SEGMEXEC_TASK_SIZE && SEGMEXEC_TASK_SIZE < vma->vm_end);
+	vma_m = vma->vm_mirror;
+	BUG_ON(!vma_m || vma_m->vm_mirror != vma);
+	BUG_ON(vma->vm_file != vma_m->vm_file);
+	BUG_ON(vma->vm_end - vma->vm_start != vma_m->vm_end - vma_m->vm_start);
+	BUG_ON(vma->vm_pgoff != vma_m->vm_pgoff);
+	BUG_ON(vma->anon_vma != vma_m->anon_vma && vma->anon_vma->root != vma_m->anon_vma->root);
+	BUG_ON((vma->vm_flags ^ vma_m->vm_flags) & ~(VM_WRITE | VM_MAYWRITE | VM_ACCOUNT | VM_LOCKED | VM_RESERVED));
+	return vma_m;
+}
+#endif
+
 /*
  * Verify that the stack growth is acceptable and
  * update accounting. This is shared with both the
@@ -1688,34 +1923,42 @@ static int acct_stack_growth(struct vm_a
 int expand_upwards(struct vm_area_struct *vma, unsigned long address)
 {
 	int error;
+	bool locknext;
 
 	if (!(vma->vm_flags & VM_GROWSUP))
 		return -EFAULT;
 
+	/* Also guard against wrapping around to address 0. */
+	if (address < PAGE_ALIGN(address+1))
+		address = PAGE_ALIGN(address+1);
+	else
+		return -ENOMEM;
+
 	/*
 	 * We must make sure the anon_vma is allocated
 	 * so that the anon_vma locking is not a noop.
 	 */
 	if (unlikely(anon_vma_prepare(vma)))
 		return -ENOMEM;
+	locknext = vma->vm_next && (vma->vm_next->vm_flags & VM_GROWSDOWN);
+	if (locknext && anon_vma_prepare(vma->vm_next))
+		return -ENOMEM;
 	vma_lock_anon_vma(vma);
+	if (locknext)
+		vma_lock_anon_vma(vma->vm_next);
 
 	/*
 	 * vma->vm_start/vm_end cannot change under us because the caller
 	 * is required to hold the mmap_sem in read mode.  We need the
-	 * anon_vma lock to serialize against concurrent expand_stacks.
-	 * Also guard against wrapping around to address 0.
+	 * anon_vma locks to serialize against concurrent expand_stacks
+	 * and expand_upwards.
 	 */
-	if (address < PAGE_ALIGN(address+4))
-		address = PAGE_ALIGN(address+4);
-	else {
-		vma_unlock_anon_vma(vma);
-		return -ENOMEM;
-	}
 	error = 0;
 
 	/* Somebody else might have raced and expanded it already */
-	if (address > vma->vm_end) {
+	if (vma->vm_next && (vma->vm_next->vm_flags & (VM_READ | VM_WRITE | VM_EXEC)) && vma->vm_next->vm_start - address < sysctl_heap_stack_gap)
+		error = -ENOMEM;
+	else if (address > vma->vm_end && (!locknext || vma->vm_next->vm_start >= address)) {
 		unsigned long size, grow;
 
 		size = address - vma->vm_start;
@@ -1730,6 +1973,8 @@ int expand_upwards(struct vm_area_struct
 			}
 		}
 	}
+	if (locknext)
+		vma_unlock_anon_vma(vma->vm_next);
 	vma_unlock_anon_vma(vma);
 	khugepaged_enter_vma_merge(vma);
 	return error;
@@ -1743,6 +1988,8 @@ int expand_downwards(struct vm_area_stru
 				   unsigned long address)
 {
 	int error;
+	bool lockprev = false;
+	struct vm_area_struct *prev;
 
 	/*
 	 * We must make sure the anon_vma is allocated
@@ -1756,6 +2003,15 @@ int expand_downwards(struct vm_area_stru
 	if (error)
 		return error;
 
+	prev = vma->vm_prev;
+#if defined(CONFIG_STACK_GROWSUP) || defined(CONFIG_IA64)
+	lockprev = prev && (prev->vm_flags & VM_GROWSUP);
+#endif
+	if (lockprev && anon_vma_prepare(prev))
+		return -ENOMEM;
+	if (lockprev)
+		vma_lock_anon_vma(prev);
+
 	vma_lock_anon_vma(vma);
 
 	/*
@@ -1765,9 +2021,17 @@ int expand_downwards(struct vm_area_stru
 	 */
 
 	/* Somebody else might have raced and expanded it already */
-	if (address < vma->vm_start) {
+	if (prev && (prev->vm_flags & (VM_READ | VM_WRITE | VM_EXEC)) && address - prev->vm_end < sysctl_heap_stack_gap)
+		error = -ENOMEM;
+	else if (address < vma->vm_start && (!lockprev || prev->vm_end <= address)) {
 		unsigned long size, grow;
 
+#ifdef CONFIG_PAX_SEGMEXEC
+		struct vm_area_struct *vma_m;
+
+		vma_m = pax_find_mirror_vma(vma);
+#endif
+
 		size = vma->vm_end - address;
 		grow = (vma->vm_start - address) >> PAGE_SHIFT;
 
@@ -1777,11 +2041,22 @@ int expand_downwards(struct vm_area_stru
 			if (!error) {
 				vma->vm_start = address;
 				vma->vm_pgoff -= grow;
+				track_exec_limit(vma->vm_mm, vma->vm_start, vma->vm_end, vma->vm_flags);
+
+#ifdef CONFIG_PAX_SEGMEXEC
+				if (vma_m) {
+					vma_m->vm_start -= grow << PAGE_SHIFT;
+					vma_m->vm_pgoff -= grow;
+				}
+#endif
+
 				perf_event_mmap(vma);
 			}
 		}
 	}
 	vma_unlock_anon_vma(vma);
+	if (lockprev)
+		vma_unlock_anon_vma(prev);
 	khugepaged_enter_vma_merge(vma);
 	return error;
 }
@@ -1851,6 +2126,13 @@ static void remove_vma_list(struct mm_st
 	do {
 		long nrpages = vma_pages(vma);
 
+#ifdef CONFIG_PAX_SEGMEXEC
+		if ((mm->pax_flags & MF_PAX_SEGMEXEC) && (vma->vm_start >= SEGMEXEC_TASK_SIZE)) {
+			vma = remove_vma(vma);
+			continue;
+		}
+#endif
+
 		mm->total_vm -= nrpages;
 		vm_stat_account(mm, vma->vm_flags, vma->vm_file, -nrpages);
 		vma = remove_vma(vma);
@@ -1896,6 +2178,16 @@ detach_vmas_to_be_unmapped(struct mm_str
 	insertion_point = (prev ? &prev->vm_next : &mm->mmap);
 	vma->vm_prev = NULL;
 	do {
+
+#ifdef CONFIG_PAX_SEGMEXEC
+		if (vma->vm_mirror) {
+			BUG_ON(!vma->vm_mirror->vm_mirror || vma->vm_mirror->vm_mirror != vma);
+			vma->vm_mirror->vm_mirror = NULL;
+			vma->vm_mirror->vm_flags &= ~VM_EXEC;
+			vma->vm_mirror = NULL;
+		}
+#endif
+
 		rb_erase(&vma->vm_rb, &mm->mm_rb);
 		mm->map_count--;
 		tail_vma = vma;
@@ -1924,14 +2216,33 @@ static int __split_vma(struct mm_struct
 	struct vm_area_struct *new;
 	int err = -ENOMEM;
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	struct vm_area_struct *vma_m, *new_m = NULL;
+	unsigned long addr_m = addr + SEGMEXEC_TASK_SIZE;
+#endif
+
 	if (is_vm_hugetlb_page(vma) && (addr &
 					~(huge_page_mask(hstate_vma(vma)))))
 		return -EINVAL;
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	vma_m = pax_find_mirror_vma(vma);
+#endif
+
 	new = kmem_cache_alloc(vm_area_cachep, GFP_KERNEL);
 	if (!new)
 		goto out_err;
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (vma_m) {
+		new_m = kmem_cache_alloc(vm_area_cachep, GFP_KERNEL);
+		if (!new_m) {
+			kmem_cache_free(vm_area_cachep, new);
+			goto out_err;
+		}
+	}
+#endif
+
 	/* most fields are the same, copy all, and then fixup */
 	*new = *vma;
 
@@ -1944,6 +2255,22 @@ static int __split_vma(struct mm_struct
 		new->vm_pgoff += ((addr - vma->vm_start) >> PAGE_SHIFT);
 	}
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (vma_m) {
+		*new_m = *vma_m;
+		INIT_LIST_HEAD(&new_m->anon_vma_chain);
+		new_m->vm_mirror = new;
+		new->vm_mirror = new_m;
+
+		if (new_below)
+			new_m->vm_end = addr_m;
+		else {
+			new_m->vm_start = addr_m;
+			new_m->vm_pgoff += ((addr_m - vma_m->vm_start) >> PAGE_SHIFT);
+		}
+	}
+#endif
+
 	pol = mpol_dup(vma_policy(vma));
 	if (IS_ERR(pol)) {
 		err = PTR_ERR(pol);
@@ -1969,6 +2296,42 @@ static int __split_vma(struct mm_struct
 	else
 		err = vma_adjust(vma, vma->vm_start, addr, vma->vm_pgoff, new);
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (!err && vma_m) {
+		if (anon_vma_clone(new_m, vma_m))
+			goto out_free_mpol;
+
+		mpol_get(pol);
+		vma_set_policy(new_m, pol);
+
+		if (new_m->vm_file) {
+			get_file(new_m->vm_file);
+			if (vma_m->vm_flags & VM_EXECUTABLE)
+				added_exe_file_vma(mm);
+		}
+
+		if (new_m->vm_ops && new_m->vm_ops->open)
+			new_m->vm_ops->open(new_m);
+
+		if (new_below)
+			err = vma_adjust(vma_m, addr_m, vma_m->vm_end, vma_m->vm_pgoff +
+				((addr_m - new_m->vm_start) >> PAGE_SHIFT), new_m);
+		else
+			err = vma_adjust(vma_m, vma_m->vm_start, addr_m, vma_m->vm_pgoff, new_m);
+
+		if (err) {
+			if (new_m->vm_ops && new_m->vm_ops->close)
+				new_m->vm_ops->close(new_m);
+			if (new_m->vm_file) {
+				if (vma_m->vm_flags & VM_EXECUTABLE)
+					removed_exe_file_vma(mm);
+				fput(new_m->vm_file);
+			}
+			mpol_put(pol);
+		}
+	}
+#endif
+
 	/* Success. */
 	if (!err)
 		return 0;
@@ -1981,10 +2344,18 @@ static int __split_vma(struct mm_struct
 			removed_exe_file_vma(mm);
 		fput(new->vm_file);
 	}
-	unlink_anon_vmas(new);
  out_free_mpol:
 	mpol_put(pol);
  out_free_vma:
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (new_m) {
+		unlink_anon_vmas(new_m);
+		kmem_cache_free(vm_area_cachep, new_m);
+	}
+#endif
+
+	unlink_anon_vmas(new);
 	kmem_cache_free(vm_area_cachep, new);
  out_err:
 	return err;
@@ -1997,6 +2368,15 @@ static int __split_vma(struct mm_struct
 int split_vma(struct mm_struct *mm, struct vm_area_struct *vma,
 	      unsigned long addr, int new_below)
 {
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (mm->pax_flags & MF_PAX_SEGMEXEC) {
+		BUG_ON(vma->vm_end > SEGMEXEC_TASK_SIZE);
+		if (mm->map_count >= sysctl_max_map_count-1)
+			return -ENOMEM;
+	} else
+#endif
+
 	if (mm->map_count >= sysctl_max_map_count)
 		return -ENOMEM;
 
@@ -2008,11 +2388,30 @@ int split_vma(struct mm_struct *mm, stru
  * work.  This now handles partial unmappings.
  * Jeremy Fitzhardinge <jeremy@goop.org>
  */
+#ifdef CONFIG_PAX_SEGMEXEC
+int do_munmap(struct mm_struct *mm, unsigned long start, size_t len)
+{
+	int ret = __do_munmap(mm, start, len);
+	if (ret || !(mm->pax_flags & MF_PAX_SEGMEXEC))
+		return ret;
+
+	return __do_munmap(mm, start + SEGMEXEC_TASK_SIZE, len);
+}
+
+int __do_munmap(struct mm_struct *mm, unsigned long start, size_t len)
+#else
 int do_munmap(struct mm_struct *mm, unsigned long start, size_t len)
+#endif
 {
 	unsigned long end;
 	struct vm_area_struct *vma, *prev, *last;
 
+	/*
+	 * mm->mmap_sem is required to protect against another thread
+	 * changing the mappings in case we sleep.
+	 */
+	verify_mm_writelocked(mm);
+
 	if ((start & ~PAGE_MASK) || start > TASK_SIZE || len > TASK_SIZE-start)
 		return -EINVAL;
 
@@ -2087,6 +2486,8 @@ int do_munmap(struct mm_struct *mm, unsi
 	/* Fix up all other VM information */
 	remove_vma_list(mm, vma);
 
+	track_exec_limit(mm, start, end, 0UL);
+
 	return 0;
 }
 
@@ -2099,22 +2500,18 @@ SYSCALL_DEFINE2(munmap, unsigned long, a
 
 	profile_munmap(addr);
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	if ((mm->pax_flags & MF_PAX_SEGMEXEC) &&
+	    (len > SEGMEXEC_TASK_SIZE || addr > SEGMEXEC_TASK_SIZE-len))
+		return -EINVAL;
+#endif
+
 	down_write(&mm->mmap_sem);
 	ret = do_munmap(mm, addr, len);
 	up_write(&mm->mmap_sem);
 	return ret;
 }
 
-static inline void verify_mm_writelocked(struct mm_struct *mm)
-{
-#ifdef CONFIG_DEBUG_VM
-	if (unlikely(down_read_trylock(&mm->mmap_sem))) {
-		WARN_ON(1);
-		up_read(&mm->mmap_sem);
-	}
-#endif
-}
-
 /*
  *  this is really a simplified "do_mmap".  it only handles
  *  anonymous maps.  eventually we may be able to do some
@@ -2128,6 +2525,7 @@ unsigned long do_brk(unsigned long addr,
 	struct rb_node ** rb_link, * rb_parent;
 	pgoff_t pgoff = addr >> PAGE_SHIFT;
 	int error;
+	unsigned long charged;
 
 	len = PAGE_ALIGN(len);
 	if (!len)
@@ -2139,16 +2537,30 @@ unsigned long do_brk(unsigned long addr,
 
 	flags = VM_DATA_DEFAULT_FLAGS | VM_ACCOUNT | mm->def_flags;
 
+#if defined(CONFIG_PAX_PAGEEXEC) || defined(CONFIG_PAX_SEGMEXEC)
+	if (mm->pax_flags & (MF_PAX_PAGEEXEC | MF_PAX_SEGMEXEC)) {
+		flags &= ~VM_EXEC;
+
+#ifdef CONFIG_PAX_MPROTECT
+		if (mm->pax_flags & MF_PAX_MPROTECT)
+			flags &= ~VM_MAYEXEC;
+#endif
+
+	}
+#endif
+
 	error = get_unmapped_area(NULL, addr, len, 0, MAP_FIXED);
 	if (error & ~PAGE_MASK)
 		return error;
 
+	charged = len >> PAGE_SHIFT;
+
 	/*
 	 * mlock MCL_FUTURE?
 	 */
 	if (mm->def_flags & VM_LOCKED) {
 		unsigned long locked, lock_limit;
-		locked = len >> PAGE_SHIFT;
+		locked = charged;
 		locked += mm->locked_vm;
 		lock_limit = rlimit(RLIMIT_MEMLOCK);
 		lock_limit >>= PAGE_SHIFT;
@@ -2165,22 +2577,22 @@ unsigned long do_brk(unsigned long addr,
 	/*
 	 * Clear old maps.  this also does some error checking for us
 	 */
- munmap_back:
 	vma = find_vma_prepare(mm, addr, &prev, &rb_link, &rb_parent);
 	if (vma && vma->vm_start < addr + len) {
 		if (do_munmap(mm, addr, len))
 			return -ENOMEM;
-		goto munmap_back;
+		vma = find_vma_prepare(mm, addr, &prev, &rb_link, &rb_parent);
+		BUG_ON(vma && vma->vm_start < addr + len);
 	}
 
 	/* Check against address space limits *after* clearing old maps... */
-	if (!may_expand_vm(mm, len >> PAGE_SHIFT))
+	if (!may_expand_vm(mm, charged))
 		return -ENOMEM;
 
 	if (mm->map_count > sysctl_max_map_count)
 		return -ENOMEM;
 
-	if (security_vm_enough_memory(len >> PAGE_SHIFT))
+	if (security_vm_enough_memory(charged))
 		return -ENOMEM;
 
 	/* Can we just expand an old private anonymous mapping? */
@@ -2194,7 +2606,7 @@ unsigned long do_brk(unsigned long addr,
 	 */
 	vma = kmem_cache_zalloc(vm_area_cachep, GFP_KERNEL);
 	if (!vma) {
-		vm_unacct_memory(len >> PAGE_SHIFT);
+		vm_unacct_memory(charged);
 		return -ENOMEM;
 	}
 
@@ -2208,11 +2620,12 @@ unsigned long do_brk(unsigned long addr,
 	vma_link(mm, vma, prev, rb_link, rb_parent);
 out:
 	perf_event_mmap(vma);
-	mm->total_vm += len >> PAGE_SHIFT;
+	mm->total_vm += charged;
 	if (flags & VM_LOCKED) {
 		if (!mlock_vma_pages_range(vma, addr, addr + len))
-			mm->locked_vm += (len >> PAGE_SHIFT);
+			mm->locked_vm += charged;
 	}
+	track_exec_limit(mm, addr, addr + len, flags);
 	return addr;
 }
 
@@ -2259,8 +2672,10 @@ void exit_mmap(struct mm_struct *mm)
 	 * Walk the list again, actually closing and freeing it,
 	 * with preemption enabled, without holding any MM locks.
 	 */
-	while (vma)
+	while (vma) {
+		vma->vm_mirror = NULL;
 		vma = remove_vma(vma);
+	}
 
 	BUG_ON(mm->nr_ptes > (FIRST_USER_ADDRESS+PMD_SIZE-1)>>PMD_SHIFT);
 }
@@ -2274,6 +2689,10 @@ int insert_vm_struct(struct mm_struct *
 	struct vm_area_struct * __vma, * prev;
 	struct rb_node ** rb_link, * rb_parent;
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	struct vm_area_struct *vma_m = NULL;
+#endif
+
 	/*
 	 * The vm_pgoff of a purely anonymous vma should be irrelevant
 	 * until its first write fault, when page's anon_vma and index
@@ -2296,7 +2715,22 @@ int insert_vm_struct(struct mm_struct *
 	if ((vma->vm_flags & VM_ACCOUNT) &&
 	     security_vm_enough_memory_mm(mm, vma_pages(vma)))
 		return -ENOMEM;
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if ((mm->pax_flags & MF_PAX_SEGMEXEC) && (vma->vm_flags & VM_EXEC)) {
+		vma_m = kmem_cache_zalloc(vm_area_cachep, GFP_KERNEL);
+		if (!vma_m)
+			return -ENOMEM;
+	}
+#endif
+
 	vma_link(mm, vma, prev, rb_link, rb_parent);
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (vma_m)
+		BUG_ON(pax_mirror_vma(vma_m, vma));
+#endif
+
 	return 0;
 }
 
@@ -2315,6 +2749,8 @@ struct vm_area_struct *copy_vma(struct v
 	struct mempolicy *pol;
 	bool faulted_in_anon_vma = true;
 
+	BUG_ON(vma->vm_mirror);
+
 	/*
 	 * If anonymous vma has not yet been faulted, update new pgoff
 	 * to match new location, to increase its chance of merging.
@@ -2382,6 +2818,39 @@ struct vm_area_struct *copy_vma(struct v
 	return NULL;
 }
 
+#ifdef CONFIG_PAX_SEGMEXEC
+long pax_mirror_vma(struct vm_area_struct *vma_m, struct vm_area_struct *vma)
+{
+	struct vm_area_struct *prev_m;
+	struct rb_node **rb_link_m, *rb_parent_m;
+	struct mempolicy *pol_m;
+
+	BUG_ON(!(vma->vm_mm->pax_flags & MF_PAX_SEGMEXEC) || !(vma->vm_flags & VM_EXEC));
+	BUG_ON(vma->vm_mirror || vma_m->vm_mirror);
+	BUG_ON(!mpol_equal(vma_policy(vma), vma_policy(vma_m)));
+	*vma_m = *vma;
+	INIT_LIST_HEAD(&vma_m->anon_vma_chain);
+	if (anon_vma_clone(vma_m, vma))
+		return -ENOMEM;
+	pol_m = vma_policy(vma_m);
+	mpol_get(pol_m);
+	vma_set_policy(vma_m, pol_m);
+	vma_m->vm_start += SEGMEXEC_TASK_SIZE;
+	vma_m->vm_end += SEGMEXEC_TASK_SIZE;
+	vma_m->vm_flags &= ~(VM_WRITE | VM_MAYWRITE | VM_ACCOUNT | VM_LOCKED);
+	vma_m->vm_page_prot = vm_get_page_prot(vma_m->vm_flags);
+	if (vma_m->vm_file)
+		get_file(vma_m->vm_file);
+	if (vma_m->vm_ops && vma_m->vm_ops->open)
+		vma_m->vm_ops->open(vma_m);
+	find_vma_prepare(vma->vm_mm, vma_m->vm_start, &prev_m, &rb_link_m, &rb_parent_m);
+	vma_link(vma->vm_mm, vma_m, prev_m, rb_link_m, rb_parent_m);
+	vma_m->vm_mirror = vma;
+	vma->vm_mirror = vma_m;
+	return 0;
+}
+#endif
+
 /*
  * Return true if the calling process may expand its vm space by the passed
  * number of pages
@@ -2393,6 +2862,11 @@ int may_expand_vm(struct mm_struct *mm,
 
 	lim = rlimit(RLIMIT_AS) >> PAGE_SHIFT;
 
+#ifdef CONFIG_PAX_RANDMMAP
+	if (mm->pax_flags & MF_PAX_RANDMMAP)
+		cur -= mm->brk_gap;
+#endif
+
 	if (cur + npages > lim)
 		return 0;
 	return 1;
@@ -2463,6 +2937,17 @@ int install_special_mapping(struct mm_st
 	vma->vm_start = addr;
 	vma->vm_end = addr + len;
 
+#ifdef CONFIG_PAX_MPROTECT
+	if (mm->pax_flags & MF_PAX_MPROTECT) {
+		if ((vm_flags & (VM_WRITE | VM_EXEC)) == (VM_WRITE | VM_EXEC))
+			return -EPERM;
+		if (!(vm_flags & VM_EXEC))
+			vm_flags &= ~VM_MAYEXEC;
+		else
+			vm_flags &= ~VM_MAYWRITE;
+	}
+#endif
+
 	vma->vm_flags = vm_flags | mm->def_flags | VM_DONTEXPAND;
 	vma->vm_page_prot = vm_get_page_prot(vma->vm_flags);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/mprotect.c linux-3.3.8-pax/mm/mprotect.c
--- linux-3.3.8/mm/mprotect.c	2012-03-19 10:39:12.604049140 +0100
+++ linux-3.3.8-pax/mm/mprotect.c	2012-03-19 10:43:44.620034619 +0100
@@ -23,10 +23,16 @@
 #include <linux/mmu_notifier.h>
 #include <linux/migrate.h>
 #include <linux/perf_event.h>
+
+#ifdef CONFIG_PAX_MPROTECT
+#include <linux/elf.h>
+#endif
+
 #include <asm/uaccess.h>
 #include <asm/pgtable.h>
 #include <asm/cacheflush.h>
 #include <asm/tlbflush.h>
+#include <asm/mmu_context.h>
 
 #ifndef pgprot_modify
 static inline pgprot_t pgprot_modify(pgprot_t oldprot, pgprot_t newprot)
@@ -141,6 +147,48 @@ static void change_protection(struct vm_
 	flush_tlb_range(vma, start, end);
 }
 
+#ifdef CONFIG_ARCH_TRACK_EXEC_LIMIT
+/* called while holding the mmap semaphor for writing except stack expansion */
+void track_exec_limit(struct mm_struct *mm, unsigned long start, unsigned long end, unsigned long prot)
+{
+	unsigned long oldlimit, newlimit = 0UL;
+
+	if (!(mm->pax_flags & MF_PAX_PAGEEXEC) || (__supported_pte_mask & _PAGE_NX))
+		return;
+
+	spin_lock(&mm->page_table_lock);
+	oldlimit = mm->context.user_cs_limit;
+	if ((prot & VM_EXEC) && oldlimit < end)
+		/* USER_CS limit moved up */
+		newlimit = end;
+	else if (!(prot & VM_EXEC) && start < oldlimit && oldlimit <= end)
+		/* USER_CS limit moved down */
+		newlimit = start;
+
+	if (newlimit) {
+		mm->context.user_cs_limit = newlimit;
+
+#ifdef CONFIG_SMP
+		wmb();
+		cpus_clear(mm->context.cpu_user_cs_mask);
+		cpu_set(smp_processor_id(), mm->context.cpu_user_cs_mask);
+#endif
+
+		set_user_cs(mm->context.user_cs_base, mm->context.user_cs_limit, smp_processor_id());
+	}
+	spin_unlock(&mm->page_table_lock);
+	if (newlimit == end) {
+		struct vm_area_struct *vma = find_vma(mm, oldlimit);
+
+		for (; vma && vma->vm_start < end; vma = vma->vm_next)
+			if (is_vm_hugetlb_page(vma))
+				hugetlb_change_protection(vma, vma->vm_start, vma->vm_end, vma->vm_page_prot);
+			else
+				change_protection(vma, vma->vm_start, vma->vm_end, vma->vm_page_prot, vma_wants_writenotify(vma));
+	}
+}
+#endif
+
 int
 mprotect_fixup(struct vm_area_struct *vma, struct vm_area_struct **pprev,
 	unsigned long start, unsigned long end, unsigned long newflags)
@@ -153,11 +201,29 @@ mprotect_fixup(struct vm_area_struct *vm
 	int error;
 	int dirty_accountable = 0;
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	struct vm_area_struct *vma_m = NULL;
+	unsigned long start_m, end_m;
+
+	start_m = start + SEGMEXEC_TASK_SIZE;
+	end_m = end + SEGMEXEC_TASK_SIZE;
+#endif
+
 	if (newflags == oldflags) {
 		*pprev = vma;
 		return 0;
 	}
 
+	if (newflags & (VM_READ | VM_WRITE | VM_EXEC)) {
+		struct vm_area_struct *prev = vma->vm_prev, *next = vma->vm_next;
+
+		if (next && (next->vm_flags & VM_GROWSDOWN) && sysctl_heap_stack_gap > next->vm_start - end)
+			return -ENOMEM;
+
+		if (prev && (prev->vm_flags & VM_GROWSUP) && sysctl_heap_stack_gap > start - prev->vm_end)
+			return -ENOMEM;
+	}
+
 	/*
 	 * If we make a private mapping writable we increase our commit;
 	 * but (without finer accounting) cannot reduce our commit if we
@@ -174,6 +240,42 @@ mprotect_fixup(struct vm_area_struct *vm
 		}
 	}
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	if ((mm->pax_flags & MF_PAX_SEGMEXEC) && ((oldflags ^ newflags) & VM_EXEC)) {
+		if (start != vma->vm_start) {
+			error = split_vma(mm, vma, start, 1);
+			if (error)
+				goto fail;
+			BUG_ON(!*pprev || (*pprev)->vm_next == vma);
+			*pprev = (*pprev)->vm_next;
+		}
+
+		if (end != vma->vm_end) {
+			error = split_vma(mm, vma, end, 0);
+			if (error)
+				goto fail;
+		}
+
+		if (pax_find_mirror_vma(vma)) {
+			error = __do_munmap(mm, start_m, end_m - start_m);
+			if (error)
+				goto fail;
+		} else {
+			vma_m = kmem_cache_zalloc(vm_area_cachep, GFP_KERNEL);
+			if (!vma_m) {
+				error = -ENOMEM;
+				goto fail;
+			}
+			vma->vm_flags = newflags;
+			error = pax_mirror_vma(vma_m, vma);
+			if (error) {
+				vma->vm_flags = oldflags;
+				goto fail;
+			}
+		}
+	}
+#endif
+
 	/*
 	 * First try to merge with previous and/or next vma.
 	 */
@@ -204,9 +306,21 @@ success:
 	 * vm_flags and vm_page_prot are protected by the mmap_sem
 	 * held in write mode.
 	 */
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if ((mm->pax_flags & MF_PAX_SEGMEXEC) && (newflags & VM_EXEC) && ((vma->vm_flags ^ newflags) & VM_READ))
+		pax_find_mirror_vma(vma)->vm_flags ^= VM_READ;
+#endif
+
 	vma->vm_flags = newflags;
+
+#ifdef CONFIG_PAX_MPROTECT
+	if (mm->binfmt && mm->binfmt->handle_mprotect)
+		mm->binfmt->handle_mprotect(vma, newflags);
+#endif
+
 	vma->vm_page_prot = pgprot_modify(vma->vm_page_prot,
-					  vm_get_page_prot(newflags));
+					  vm_get_page_prot(vma->vm_flags));
 
 	if (vma_wants_writenotify(vma)) {
 		vma->vm_page_prot = vm_get_page_prot(newflags & ~VM_SHARED);
@@ -248,6 +362,17 @@ SYSCALL_DEFINE3(mprotect, unsigned long,
 	end = start + len;
 	if (end <= start)
 		return -ENOMEM;
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (current->mm->pax_flags & MF_PAX_SEGMEXEC) {
+		if (end > SEGMEXEC_TASK_SIZE)
+			return -EINVAL;
+	} else
+#endif
+
+	if (end > TASK_SIZE)
+		return -EINVAL;
+
 	if (!arch_validate_prot(prot))
 		return -EINVAL;
 
@@ -255,7 +380,7 @@ SYSCALL_DEFINE3(mprotect, unsigned long,
 	/*
 	 * Does the application expect PROT_READ to imply PROT_EXEC:
 	 */
-	if ((prot & PROT_READ) && (current->personality & READ_IMPLIES_EXEC))
+	if ((prot & (PROT_READ | PROT_WRITE)) && (current->personality & READ_IMPLIES_EXEC))
 		prot |= PROT_EXEC;
 
 	vm_flags = calc_vm_prot_bits(prot);
@@ -288,6 +413,11 @@ SYSCALL_DEFINE3(mprotect, unsigned long,
 	if (start > vma->vm_start)
 		prev = vma;
 
+#ifdef CONFIG_PAX_MPROTECT
+	if (current->mm->binfmt && current->mm->binfmt->handle_mprotect)
+		current->mm->binfmt->handle_mprotect(vma, vm_flags);
+#endif
+
 	for (nstart = start ; ; ) {
 		unsigned long newflags;
 
@@ -311,6 +441,9 @@ SYSCALL_DEFINE3(mprotect, unsigned long,
 		error = mprotect_fixup(vma, &prev, nstart, tmp, newflags);
 		if (error)
 			goto out;
+
+		track_exec_limit(current->mm, nstart, tmp, vm_flags);
+
 		nstart = tmp;
 
 		if (nstart < prev->vm_end)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/mremap.c linux-3.3.8-pax/mm/mremap.c
--- linux-3.3.8/mm/mremap.c	2012-03-19 10:39:12.604049140 +0100
+++ linux-3.3.8-pax/mm/mremap.c	2012-03-19 10:43:44.620034619 +0100
@@ -106,6 +106,12 @@ static void move_ptes(struct vm_area_str
 			continue;
 		pte = ptep_get_and_clear(mm, old_addr, old_pte);
 		pte = move_pte(pte, new_vma->vm_page_prot, old_addr, new_addr);
+
+#ifdef CONFIG_ARCH_TRACK_EXEC_LIMIT
+		if (!(__supported_pte_mask & _PAGE_NX) && (new_vma->vm_flags & (VM_PAGEEXEC | VM_EXEC)) == VM_PAGEEXEC)
+			pte = pte_exprotect(pte);
+#endif
+
 		set_pte_at(mm, new_addr, new_pte, pte);
 	}
 
@@ -299,6 +305,11 @@ static struct vm_area_struct *vma_to_res
 	if (is_vm_hugetlb_page(vma))
 		goto Einval;
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (pax_find_mirror_vma(vma))
+		goto Einval;
+#endif
+
 	/* We can't remap across vm area boundaries */
 	if (old_len > vma->vm_end - addr)
 		goto Efault;
@@ -355,20 +366,25 @@ static unsigned long mremap_to(unsigned
 	unsigned long ret = -EINVAL;
 	unsigned long charged = 0;
 	unsigned long map_flags;
+	unsigned long pax_task_size = TASK_SIZE;
 
 	if (new_addr & ~PAGE_MASK)
 		goto out;
 
-	if (new_len > TASK_SIZE || new_addr > TASK_SIZE - new_len)
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (mm->pax_flags & MF_PAX_SEGMEXEC)
+		pax_task_size = SEGMEXEC_TASK_SIZE;
+#endif
+
+	pax_task_size -= PAGE_SIZE;
+
+	if (new_len > TASK_SIZE || new_addr > pax_task_size - new_len)
 		goto out;
 
 	/* Check if the location we're moving into overlaps the
 	 * old location at all, and fail if it does.
 	 */
-	if ((new_addr <= addr) && (new_addr+new_len) > addr)
-		goto out;
-
-	if ((addr <= new_addr) && (addr+old_len) > new_addr)
+	if (addr + old_len > new_addr && new_addr + new_len > addr)
 		goto out;
 
 	ret = security_file_mmap(NULL, 0, 0, 0, new_addr, 1);
@@ -440,6 +456,7 @@ unsigned long do_mremap(unsigned long ad
 	struct vm_area_struct *vma;
 	unsigned long ret = -EINVAL;
 	unsigned long charged = 0;
+	unsigned long pax_task_size = TASK_SIZE;
 
 	if (flags & ~(MREMAP_FIXED | MREMAP_MAYMOVE))
 		goto out;
@@ -458,6 +475,17 @@ unsigned long do_mremap(unsigned long ad
 	if (!new_len)
 		goto out;
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (mm->pax_flags & MF_PAX_SEGMEXEC)
+		pax_task_size = SEGMEXEC_TASK_SIZE;
+#endif
+
+	pax_task_size -= PAGE_SIZE;
+
+	if (new_len > pax_task_size || addr > pax_task_size-new_len ||
+	    old_len > pax_task_size || addr > pax_task_size-old_len)
+		goto out;
+
 	if (flags & MREMAP_FIXED) {
 		if (flags & MREMAP_MAYMOVE)
 			ret = mremap_to(addr, old_len, new_addr, new_len);
@@ -507,6 +535,7 @@ unsigned long do_mremap(unsigned long ad
 						   addr + new_len);
 			}
 			ret = addr;
+			track_exec_limit(vma->vm_mm, vma->vm_start, addr + new_len, vma->vm_flags);
 			goto out;
 		}
 	}
@@ -533,7 +562,13 @@ unsigned long do_mremap(unsigned long ad
 		ret = security_file_mmap(NULL, 0, 0, 0, new_addr, 1);
 		if (ret)
 			goto out;
+
+		map_flags = vma->vm_flags;
 		ret = move_vma(vma, addr, old_len, new_len, new_addr);
+		if (!(ret & ~PAGE_MASK)) {
+			track_exec_limit(current->mm, addr, addr + old_len, 0UL);
+			track_exec_limit(current->mm, new_addr, new_addr + new_len, map_flags);
+		}
 	}
 out:
 	if (ret & ~PAGE_MASK)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/nommu.c linux-3.3.8-pax/mm/nommu.c
--- linux-3.3.8/mm/nommu.c	2012-03-19 10:39:12.608049140 +0100
+++ linux-3.3.8-pax/mm/nommu.c	2012-03-19 10:43:44.620034619 +0100
@@ -62,7 +62,6 @@ int sysctl_overcommit_memory = OVERCOMMI
 int sysctl_overcommit_ratio = 50; /* default is 50% */
 int sysctl_max_map_count = DEFAULT_MAX_MAP_COUNT;
 int sysctl_nr_trim_pages = CONFIG_NOMMU_INITIAL_TRIM_EXCESS;
-int heap_stack_gap = 0;
 
 atomic_long_t mmap_pages_allocated;
 
@@ -827,15 +826,6 @@ struct vm_area_struct *find_vma(struct m
 EXPORT_SYMBOL(find_vma);
 
 /*
- * find a VMA
- * - we don't extend stack VMAs under NOMMU conditions
- */
-struct vm_area_struct *find_extend_vma(struct mm_struct *mm, unsigned long addr)
-{
-	return find_vma(mm, addr);
-}
-
-/*
  * expand a stack to a given address
  * - not supported under NOMMU conditions
  */
@@ -1555,6 +1545,7 @@ int split_vma(struct mm_struct *mm, stru
 
 	/* most fields are the same, copy all, and then fixup */
 	*new = *vma;
+	INIT_LIST_HEAD(&new->anon_vma_chain);
 	*region = *vma->vm_region;
 	new->vm_region = region;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/page_alloc.c linux-3.3.8-pax/mm/page_alloc.c
--- linux-3.3.8/mm/page_alloc.c	2012-03-19 10:39:12.612049141 +0100
+++ linux-3.3.8-pax/mm/page_alloc.c	2012-03-19 10:43:44.624034619 +0100
@@ -335,7 +335,7 @@ out:
  * This usage means that zero-order pages may not be compound.
  */
 
-static void free_compound_page(struct page *page)
+void free_compound_page(struct page *page)
 {
 	__free_pages_ok(page, compound_order(page));
 }
@@ -692,6 +692,10 @@ static bool free_pages_prepare(struct pa
 	int i;
 	int bad = 0;
 
+#ifdef CONFIG_PAX_MEMORY_SANITIZE
+	unsigned long index = 1UL << order;
+#endif
+
 	trace_mm_page_free(page, order);
 	kmemcheck_free_shadow(page, order);
 
@@ -707,6 +711,12 @@ static bool free_pages_prepare(struct pa
 		debug_check_no_obj_freed(page_address(page),
 					   PAGE_SIZE << order);
 	}
+
+#ifdef CONFIG_PAX_MEMORY_SANITIZE
+	for (; index; --index)
+		sanitize_highpage(page + index - 1);
+#endif
+
 	arch_free_page(page, order);
 	kernel_map_pages(page, 1 << order, 0);
 
@@ -830,8 +840,10 @@ static int prep_new_page(struct page *pa
 	arch_alloc_page(page, order);
 	kernel_map_pages(page, 1 << order, 1);
 
+#ifndef CONFIG_PAX_MEMORY_SANITIZE
 	if (gfp_flags & __GFP_ZERO)
 		prep_zero_page(page, order, gfp_flags);
+#endif
 
 	if (order && (gfp_flags & __GFP_COMP))
 		prep_compound_page(page, order);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/percpu.c linux-3.3.8-pax/mm/percpu.c
--- linux-3.3.8/mm/percpu.c	2012-05-24 17:32:19.681142879 +0200
+++ linux-3.3.8-pax/mm/percpu.c	2012-05-24 17:32:27.121142471 +0200
@@ -122,7 +122,7 @@ static unsigned int pcpu_low_unit_cpu __
 static unsigned int pcpu_high_unit_cpu __read_mostly;
 
 /* the address of the first chunk which starts with the kernel static area */
-void *pcpu_base_addr __read_mostly;
+void *pcpu_base_addr __read_only;
 EXPORT_SYMBOL_GPL(pcpu_base_addr);
 
 static const int *pcpu_unit_map __read_mostly;		/* cpu -> unit */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/process_vm_access.c linux-3.3.8-pax/mm/process_vm_access.c
--- linux-3.3.8/mm/process_vm_access.c	2012-03-19 10:39:12.620049142 +0100
+++ linux-3.3.8-pax/mm/process_vm_access.c	2012-03-19 10:43:44.628034618 +0100
@@ -258,19 +258,19 @@ static ssize_t process_vm_rw_core(pid_t
 	size_t iov_l_curr_offset = 0;
 	ssize_t iov_len;
 
+	return -ENOSYS; // PaX: until properly audited
+
 	/*
 	 * Work out how many pages of struct pages we're going to need
 	 * when eventually calling get_user_pages
 	 */
 	for (i = 0; i < riovcnt; i++) {
 		iov_len = rvec[i].iov_len;
-		if (iov_len > 0) {
-			nr_pages_iov = ((unsigned long)rvec[i].iov_base
-					+ iov_len)
-				/ PAGE_SIZE - (unsigned long)rvec[i].iov_base
-				/ PAGE_SIZE + 1;
-			nr_pages = max(nr_pages, nr_pages_iov);
-		}
+		if (iov_len <= 0)
+			continue;
+		nr_pages_iov = ((unsigned long)rvec[i].iov_base + iov_len) / PAGE_SIZE -
+				(unsigned long)rvec[i].iov_base / PAGE_SIZE + 1;
+		nr_pages = max(nr_pages, nr_pages_iov);
 	}
 
 	if (nr_pages == 0)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/rmap.c linux-3.3.8-pax/mm/rmap.c
--- linux-3.3.8/mm/rmap.c	2012-03-19 10:39:12.620049142 +0100
+++ linux-3.3.8-pax/mm/rmap.c	2012-03-19 10:43:44.628034618 +0100
@@ -152,6 +152,10 @@ int anon_vma_prepare(struct vm_area_stru
 	struct anon_vma *anon_vma = vma->anon_vma;
 	struct anon_vma_chain *avc;
 
+#ifdef CONFIG_PAX_SEGMEXEC
+	struct anon_vma_chain *avc_m = NULL;
+#endif
+
 	might_sleep();
 	if (unlikely(!anon_vma)) {
 		struct mm_struct *mm = vma->vm_mm;
@@ -161,6 +165,12 @@ int anon_vma_prepare(struct vm_area_stru
 		if (!avc)
 			goto out_enomem;
 
+#ifdef CONFIG_PAX_SEGMEXEC
+		avc_m = anon_vma_chain_alloc(GFP_KERNEL);
+		if (!avc_m)
+			goto out_enomem_free_avc;
+#endif
+
 		anon_vma = find_mergeable_anon_vma(vma);
 		allocated = NULL;
 		if (!anon_vma) {
@@ -174,6 +184,21 @@ int anon_vma_prepare(struct vm_area_stru
 		/* page_table_lock to protect against threads */
 		spin_lock(&mm->page_table_lock);
 		if (likely(!vma->anon_vma)) {
+
+#ifdef CONFIG_PAX_SEGMEXEC
+			struct vm_area_struct *vma_m = pax_find_mirror_vma(vma);
+
+			if (vma_m) {
+				BUG_ON(vma_m->anon_vma);
+				vma_m->anon_vma = anon_vma;
+				avc_m->anon_vma = anon_vma;
+				avc_m->vma = vma;
+				list_add(&avc_m->same_vma, &vma_m->anon_vma_chain);
+				list_add(&avc_m->same_anon_vma, &anon_vma->head);
+				avc_m = NULL;
+			}
+#endif
+
 			vma->anon_vma = anon_vma;
 			avc->anon_vma = anon_vma;
 			avc->vma = vma;
@@ -187,12 +212,24 @@ int anon_vma_prepare(struct vm_area_stru
 
 		if (unlikely(allocated))
 			put_anon_vma(allocated);
+
+#ifdef CONFIG_PAX_SEGMEXEC
+		if (unlikely(avc_m))
+			anon_vma_chain_free(avc_m);
+#endif
+
 		if (unlikely(avc))
 			anon_vma_chain_free(avc);
 	}
 	return 0;
 
  out_enomem_free_avc:
+
+#ifdef CONFIG_PAX_SEGMEXEC
+	if (avc_m)
+		anon_vma_chain_free(avc_m);
+#endif
+
 	anon_vma_chain_free(avc);
  out_enomem:
 	return -ENOMEM;
@@ -243,7 +280,7 @@ static void anon_vma_chain_link(struct v
  * Attach the anon_vmas from src to dst.
  * Returns 0 on success, -ENOMEM on failure.
  */
-int anon_vma_clone(struct vm_area_struct *dst, struct vm_area_struct *src)
+int anon_vma_clone(struct vm_area_struct *dst, const struct vm_area_struct *src)
 {
 	struct anon_vma_chain *avc, *pavc;
 	struct anon_vma *root = NULL;
@@ -321,7 +358,7 @@ void anon_vma_moveto_tail(struct vm_area
  * the corresponding VMA in the parent process is attached to.
  * Returns 0 on success, non-zero on failure.
  */
-int anon_vma_fork(struct vm_area_struct *vma, struct vm_area_struct *pvma)
+int anon_vma_fork(struct vm_area_struct *vma, const struct vm_area_struct *pvma)
 {
 	struct anon_vma_chain *avc;
 	struct anon_vma *anon_vma;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/shmem.c linux-3.3.8-pax/mm/shmem.c
--- linux-3.3.8/mm/shmem.c	2012-03-19 10:39:12.620049142 +0100
+++ linux-3.3.8-pax/mm/shmem.c	2012-03-19 10:43:44.632034617 +0100
@@ -74,7 +74,7 @@ static struct vfsmount *shm_mnt;
 #define BOGO_DIRENT_SIZE 20
 
 /* Symlink up to this size is kmalloc'ed instead of using a swappable page */
-#define SHORT_SYMLINK_LEN 128
+#define SHORT_SYMLINK_LEN 64
 
 struct shmem_xattr {
 	struct list_head list;	/* anchored by shmem_inode_info->xattr_list */
@@ -2180,8 +2180,7 @@ int shmem_fill_super(struct super_block
 	int err = -ENOMEM;
 
 	/* Round up to L1_CACHE_BYTES to resist false sharing */
-	sbinfo = kzalloc(max((int)sizeof(struct shmem_sb_info),
-				L1_CACHE_BYTES), GFP_KERNEL);
+	sbinfo = kzalloc(max(sizeof(struct shmem_sb_info), L1_CACHE_BYTES), GFP_KERNEL);
 	if (!sbinfo)
 		return -ENOMEM;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/slab.c linux-3.3.8-pax/mm/slab.c
--- linux-3.3.8/mm/slab.c	2012-03-19 10:39:12.624049142 +0100
+++ linux-3.3.8-pax/mm/slab.c	2012-03-19 10:43:44.632034617 +0100
@@ -153,7 +153,7 @@
 
 /* Legal flag mask for kmem_cache_create(). */
 #if DEBUG
-# define CREATE_MASK	(SLAB_RED_ZONE | \
+# define CREATE_MASK	(SLAB_USERCOPY | SLAB_RED_ZONE | \
 			 SLAB_POISON | SLAB_HWCACHE_ALIGN | \
 			 SLAB_CACHE_DMA | \
 			 SLAB_STORE_USER | \
@@ -161,7 +161,7 @@
 			 SLAB_DESTROY_BY_RCU | SLAB_MEM_SPREAD | \
 			 SLAB_DEBUG_OBJECTS | SLAB_NOLEAKTRACE | SLAB_NOTRACK)
 #else
-# define CREATE_MASK	(SLAB_HWCACHE_ALIGN | \
+# define CREATE_MASK	(SLAB_USERCOPY | SLAB_HWCACHE_ALIGN | \
 			 SLAB_CACHE_DMA | \
 			 SLAB_RECLAIM_ACCOUNT | SLAB_PANIC | \
 			 SLAB_DESTROY_BY_RCU | SLAB_MEM_SPREAD | \
@@ -290,7 +290,7 @@ struct kmem_list3 {
  * Need this for bootstrapping a per node allocator.
  */
 #define NUM_INIT_LISTS (3 * MAX_NUMNODES)
-static struct kmem_list3 __initdata initkmem_list3[NUM_INIT_LISTS];
+static struct kmem_list3 initkmem_list3[NUM_INIT_LISTS];
 #define	CACHE_CACHE 0
 #define	SIZE_AC MAX_NUMNODES
 #define	SIZE_L3 (2 * MAX_NUMNODES)
@@ -391,10 +391,10 @@ static void kmem_list3_init(struct kmem_
 		if ((x)->max_freeable < i)				\
 			(x)->max_freeable = i;				\
 	} while (0)
-#define STATS_INC_ALLOCHIT(x)	atomic_inc(&(x)->allochit)
-#define STATS_INC_ALLOCMISS(x)	atomic_inc(&(x)->allocmiss)
-#define STATS_INC_FREEHIT(x)	atomic_inc(&(x)->freehit)
-#define STATS_INC_FREEMISS(x)	atomic_inc(&(x)->freemiss)
+#define STATS_INC_ALLOCHIT(x)	atomic_inc_unchecked(&(x)->allochit)
+#define STATS_INC_ALLOCMISS(x)	atomic_inc_unchecked(&(x)->allocmiss)
+#define STATS_INC_FREEHIT(x)	atomic_inc_unchecked(&(x)->freehit)
+#define STATS_INC_FREEMISS(x)	atomic_inc_unchecked(&(x)->freemiss)
 #else
 #define	STATS_INC_ACTIVE(x)	do { } while (0)
 #define	STATS_DEC_ACTIVE(x)	do { } while (0)
@@ -542,7 +542,7 @@ static inline void *index_to_obj(struct
  *   reciprocal_divide(offset, cache->reciprocal_buffer_size)
  */
 static inline unsigned int obj_to_index(const struct kmem_cache *cache,
-					const struct slab *slab, void *obj)
+					const struct slab *slab, const void *obj)
 {
 	u32 offset = (obj - slab->s_mem);
 	return reciprocal_divide(offset, cache->reciprocal_buffer_size);
@@ -568,7 +568,7 @@ struct cache_names {
 static struct cache_names __initdata cache_names[] = {
 #define CACHE(x) { .name = "size-" #x, .name_dma = "size-" #x "(DMA)" },
 #include <linux/kmalloc_sizes.h>
-	{NULL,}
+	{NULL}
 #undef CACHE
 };
 
@@ -1588,7 +1588,7 @@ void __init kmem_cache_init(void)
 	sizes[INDEX_AC].cs_cachep = kmem_cache_create(names[INDEX_AC].name,
 					sizes[INDEX_AC].cs_size,
 					ARCH_KMALLOC_MINALIGN,
-					ARCH_KMALLOC_FLAGS|SLAB_PANIC,
+					ARCH_KMALLOC_FLAGS|SLAB_PANIC|SLAB_USERCOPY,
 					NULL);
 
 	if (INDEX_AC != INDEX_L3) {
@@ -1596,7 +1596,7 @@ void __init kmem_cache_init(void)
 			kmem_cache_create(names[INDEX_L3].name,
 				sizes[INDEX_L3].cs_size,
 				ARCH_KMALLOC_MINALIGN,
-				ARCH_KMALLOC_FLAGS|SLAB_PANIC,
+				ARCH_KMALLOC_FLAGS|SLAB_PANIC|SLAB_USERCOPY,
 				NULL);
 	}
 
@@ -1614,7 +1614,7 @@ void __init kmem_cache_init(void)
 			sizes->cs_cachep = kmem_cache_create(names->name,
 					sizes->cs_size,
 					ARCH_KMALLOC_MINALIGN,
-					ARCH_KMALLOC_FLAGS|SLAB_PANIC,
+					ARCH_KMALLOC_FLAGS|SLAB_PANIC|SLAB_USERCOPY,
 					NULL);
 		}
 #ifdef CONFIG_ZONE_DMA
@@ -4339,10 +4339,10 @@ static int s_show(struct seq_file *m, vo
 	}
 	/* cpu stats */
 	{
-		unsigned long allochit = atomic_read(&cachep->allochit);
-		unsigned long allocmiss = atomic_read(&cachep->allocmiss);
-		unsigned long freehit = atomic_read(&cachep->freehit);
-		unsigned long freemiss = atomic_read(&cachep->freemiss);
+		unsigned long allochit = atomic_read_unchecked(&cachep->allochit);
+		unsigned long allocmiss = atomic_read_unchecked(&cachep->allocmiss);
+		unsigned long freehit = atomic_read_unchecked(&cachep->freehit);
+		unsigned long freemiss = atomic_read_unchecked(&cachep->freemiss);
 
 		seq_printf(m, " : cpustat %6lu %6lu %6lu %6lu",
 			   allochit, allocmiss, freehit, freemiss);
@@ -4608,6 +4608,55 @@ static int __init slab_proc_init(void)
 module_init(slab_proc_init);
 #endif
 
+void check_object_size(const void *ptr, unsigned long n, bool to)
+{
+
+#ifdef CONFIG_PAX_USERCOPY
+	struct page *page;
+	struct kmem_cache *cachep = NULL;
+	struct slab *slabp;
+	unsigned int objnr;
+	unsigned long offset;
+	const char *type;
+
+	if (!n)
+		return;
+
+	type = "<null>";
+	if (ZERO_OR_NULL_PTR(ptr))
+		goto report;
+
+	if (!virt_addr_valid(ptr))
+		return;
+
+	page = virt_to_head_page(ptr);
+
+	type = "<process stack>";
+	if (!PageSlab(page)) {
+		if (object_is_on_stack(ptr, n) == -1)
+			goto report;
+		return;
+	}
+
+	cachep = page_get_cache(page);
+	type = cachep->name;
+	if (!(cachep->flags & SLAB_USERCOPY))
+		goto report;
+
+	slabp = page_get_slab(page);
+	objnr = obj_to_index(cachep, slabp, ptr);
+	BUG_ON(objnr >= cachep->num);
+	offset = ptr - index_to_obj(cachep, slabp, objnr) - obj_offset(cachep);
+	if (offset <= obj_size(cachep) && n <= obj_size(cachep) - offset)
+		return;
+
+report:
+	pax_report_usercopy(ptr, n, to, type);
+#endif
+
+}
+EXPORT_SYMBOL(check_object_size);
+
 /**
  * ksize - get the actual amount of memory allocated for a given object
  * @objp: Pointer to the object
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/slob.c linux-3.3.8-pax/mm/slob.c
--- linux-3.3.8/mm/slob.c	2012-01-08 19:48:29.467470852 +0100
+++ linux-3.3.8-pax/mm/slob.c	2012-03-19 10:43:44.636034617 +0100
@@ -29,7 +29,7 @@
  * If kmalloc is asked for objects of PAGE_SIZE or larger, it calls
  * alloc_pages() directly, allocating compound pages so the page order
  * does not have to be separately tracked, and also stores the exact
- * allocation size in page->private so that it can be used to accurately
+ * allocation size in slob_page->size so that it can be used to accurately
  * provide ksize(). These objects are detected in kfree() because slob_page()
  * is false for them.
  *
@@ -58,6 +58,7 @@
  */
 
 #include <linux/kernel.h>
+#include <linux/sched.h>
 #include <linux/slab.h>
 #include <linux/mm.h>
 #include <linux/swap.h> /* struct reclaim_state */
@@ -102,7 +103,8 @@ struct slob_page {
 			unsigned long flags;	/* mandatory */
 			atomic_t _count;	/* mandatory */
 			slobidx_t units;	/* free units left in page */
-			unsigned long pad[2];
+			unsigned long pad[1];
+			unsigned long size;	/* size when >=PAGE_SIZE */
 			slob_t *free;		/* first free slob_t in page */
 			struct list_head list;	/* linked list of free pages */
 		};
@@ -135,7 +137,7 @@ static LIST_HEAD(free_slob_large);
  */
 static inline int is_slob_page(struct slob_page *sp)
 {
-	return PageSlab((struct page *)sp);
+	return PageSlab((struct page *)sp) && !sp->size;
 }
 
 static inline void set_slob_page(struct slob_page *sp)
@@ -150,7 +152,7 @@ static inline void clear_slob_page(struc
 
 static inline struct slob_page *slob_page(const void *addr)
 {
-	return (struct slob_page *)virt_to_page(addr);
+	return (struct slob_page *)virt_to_head_page(addr);
 }
 
 /*
@@ -210,7 +212,7 @@ static void set_slob(slob_t *s, slobidx_
 /*
  * Return the size of a slob block.
  */
-static slobidx_t slob_units(slob_t *s)
+static slobidx_t slob_units(const slob_t *s)
 {
 	if (s->units > 0)
 		return s->units;
@@ -220,7 +222,7 @@ static slobidx_t slob_units(slob_t *s)
 /*
  * Return the next free slob block pointer after this one.
  */
-static slob_t *slob_next(slob_t *s)
+static slob_t *slob_next(const slob_t *s)
 {
 	slob_t *base = (slob_t *)((unsigned long)s & PAGE_MASK);
 	slobidx_t next;
@@ -235,7 +237,7 @@ static slob_t *slob_next(slob_t *s)
 /*
  * Returns true if s is the last free block in its page.
  */
-static int slob_last(slob_t *s)
+static int slob_last(const slob_t *s)
 {
 	return !((unsigned long)slob_next(s) & ~PAGE_MASK);
 }
@@ -254,6 +256,7 @@ static void *slob_new_pages(gfp_t gfp, i
 	if (!page)
 		return NULL;
 
+	set_slob_page(page);
 	return page_address(page);
 }
 
@@ -370,11 +373,11 @@ static void *slob_alloc(size_t size, gfp
 		if (!b)
 			return NULL;
 		sp = slob_page(b);
-		set_slob_page(sp);
 
 		spin_lock_irqsave(&slob_lock, flags);
 		sp->units = SLOB_UNITS(PAGE_SIZE);
 		sp->free = b;
+		sp->size = 0;
 		INIT_LIST_HEAD(&sp->list);
 		set_slob(b, SLOB_UNITS(PAGE_SIZE), b + SLOB_UNITS(PAGE_SIZE));
 		set_slob_page_free(sp, slob_list);
@@ -476,10 +479,9 @@ out:
  * End of slob allocator proper. Begin kmem_cache_alloc and kmalloc frontend.
  */
 
-void *__kmalloc_node(size_t size, gfp_t gfp, int node)
+static void *__kmalloc_node_align(size_t size, gfp_t gfp, int node, int align)
 {
-	unsigned int *m;
-	int align = max(ARCH_KMALLOC_MINALIGN, ARCH_SLAB_MINALIGN);
+	slob_t *m;
 	void *ret;
 
 	gfp &= gfp_allowed_mask;
@@ -494,7 +496,10 @@ void *__kmalloc_node(size_t size, gfp_t
 
 		if (!m)
 			return NULL;
-		*m = size;
+		BUILD_BUG_ON(ARCH_KMALLOC_MINALIGN < 2 * SLOB_UNIT);
+		BUILD_BUG_ON(ARCH_SLAB_MINALIGN < 2 * SLOB_UNIT);
+		m[0].units = size;
+		m[1].units = align;
 		ret = (void *)m + align;
 
 		trace_kmalloc_node(_RET_IP_, ret,
@@ -506,16 +511,25 @@ void *__kmalloc_node(size_t size, gfp_t
 			gfp |= __GFP_COMP;
 		ret = slob_new_pages(gfp, order, node);
 		if (ret) {
-			struct page *page;
-			page = virt_to_page(ret);
-			page->private = size;
+			struct slob_page *sp;
+			sp = slob_page(ret);
+			sp->size = size;
 		}
 
 		trace_kmalloc_node(_RET_IP_, ret,
 				   size, PAGE_SIZE << order, gfp, node);
 	}
 
-	kmemleak_alloc(ret, size, 1, gfp);
+	return ret;
+}
+
+void *__kmalloc_node(size_t size, gfp_t gfp, int node)
+{
+	int align = max(ARCH_KMALLOC_MINALIGN, ARCH_SLAB_MINALIGN);
+	void *ret = __kmalloc_node_align(size, gfp, node, align);
+
+	if (!ZERO_OR_NULL_PTR(ret))
+		kmemleak_alloc(ret, size, 1, gfp);
 	return ret;
 }
 EXPORT_SYMBOL(__kmalloc_node);
@@ -533,13 +547,92 @@ void kfree(const void *block)
 	sp = slob_page(block);
 	if (is_slob_page(sp)) {
 		int align = max(ARCH_KMALLOC_MINALIGN, ARCH_SLAB_MINALIGN);
-		unsigned int *m = (unsigned int *)(block - align);
-		slob_free(m, *m + align);
-	} else
+		slob_t *m = (slob_t *)(block - align);
+		slob_free(m, m[0].units + align);
+	} else {
+		clear_slob_page(sp);
+		free_slob_page(sp);
+		sp->size = 0;
 		put_page(&sp->page);
+	}
 }
 EXPORT_SYMBOL(kfree);
 
+void check_object_size(const void *ptr, unsigned long n, bool to)
+{
+
+#ifdef CONFIG_PAX_USERCOPY
+	struct slob_page *sp;
+	const slob_t *free;
+	const void *base;
+	unsigned long flags;
+	const char *type;
+
+	if (!n)
+		return;
+
+	type = "<null>";
+	if (ZERO_OR_NULL_PTR(ptr))
+		goto report;
+
+	if (!virt_addr_valid(ptr))
+		return;
+
+	type = "<process stack>";
+	sp = slob_page(ptr);
+	if (!PageSlab((struct page *)sp)) {
+		if (object_is_on_stack(ptr, n) == -1)
+			goto report;
+		return;
+	}
+
+	type = "<slob>";
+	if (sp->size) {
+		base = page_address(&sp->page);
+		if (base <= ptr && n <= sp->size - (ptr - base))
+			return;
+		goto report;
+	}
+
+	/* some tricky double walking to find the chunk */
+	spin_lock_irqsave(&slob_lock, flags);
+	base = (void *)((unsigned long)ptr & PAGE_MASK);
+	free = sp->free;
+
+	while (!slob_last(free) && (void *)free <= ptr) {
+		base = free + slob_units(free);
+		free = slob_next(free);
+	}
+
+	while (base < (void *)free) {
+		slobidx_t m = ((slob_t *)base)[0].units, align = ((slob_t *)base)[1].units;
+		int size = SLOB_UNIT * SLOB_UNITS(m + align);
+		int offset;
+
+		if (ptr < base + align)
+			break;
+
+		offset = ptr - base - align;
+		if (offset >= m) {
+			base += size;
+			continue;
+		}
+
+		if (n > m - offset)
+			break;
+
+		spin_unlock_irqrestore(&slob_lock, flags);
+		return;
+	}
+
+	spin_unlock_irqrestore(&slob_lock, flags);
+report:
+	pax_report_usercopy(ptr, n, to, type);
+#endif
+
+}
+EXPORT_SYMBOL(check_object_size);
+
 /* can't use ksize for kmem_cache_alloc memory, only kmalloc */
 size_t ksize(const void *block)
 {
@@ -552,10 +645,10 @@ size_t ksize(const void *block)
 	sp = slob_page(block);
 	if (is_slob_page(sp)) {
 		int align = max(ARCH_KMALLOC_MINALIGN, ARCH_SLAB_MINALIGN);
-		unsigned int *m = (unsigned int *)(block - align);
-		return SLOB_UNITS(*m) * SLOB_UNIT;
+		slob_t *m = (slob_t *)(block - align);
+		return SLOB_UNITS(m[0].units) * SLOB_UNIT;
 	} else
-		return sp->page.private;
+		return sp->size;
 }
 EXPORT_SYMBOL(ksize);
 
@@ -571,8 +664,13 @@ struct kmem_cache *kmem_cache_create(con
 {
 	struct kmem_cache *c;
 
+#ifdef CONFIG_PAX_USERCOPY
+	c = __kmalloc_node_align(sizeof(struct kmem_cache),
+		GFP_KERNEL, -1, ARCH_KMALLOC_MINALIGN);
+#else
 	c = slob_alloc(sizeof(struct kmem_cache),
 		GFP_KERNEL, ARCH_KMALLOC_MINALIGN, -1);
+#endif
 
 	if (c) {
 		c->name = name;
@@ -614,17 +712,25 @@ void *kmem_cache_alloc_node(struct kmem_
 
 	lockdep_trace_alloc(flags);
 
+#ifdef CONFIG_PAX_USERCOPY
+	b = __kmalloc_node_align(c->size, flags, node, c->align);
+#else
 	if (c->size < PAGE_SIZE) {
 		b = slob_alloc(c->size, flags, c->align, node);
 		trace_kmem_cache_alloc_node(_RET_IP_, b, c->size,
 					    SLOB_UNITS(c->size) * SLOB_UNIT,
 					    flags, node);
 	} else {
+		struct slob_page *sp;
+
 		b = slob_new_pages(flags, get_order(c->size), node);
+		sp = slob_page(b);
+		sp->size = c->size;
 		trace_kmem_cache_alloc_node(_RET_IP_, b, c->size,
 					    PAGE_SIZE << get_order(c->size),
 					    flags, node);
 	}
+#endif
 
 	if (c->ctor)
 		c->ctor(b);
@@ -636,10 +742,16 @@ EXPORT_SYMBOL(kmem_cache_alloc_node);
 
 static void __kmem_cache_free(void *b, int size)
 {
-	if (size < PAGE_SIZE)
+	struct slob_page *sp = slob_page(b);
+
+	if (is_slob_page(sp))
 		slob_free(b, size);
-	else
+	else {
+		clear_slob_page(sp);
+		free_slob_page(sp);
+		sp->size = 0;
 		slob_free_pages(b, get_order(size));
+	}
 }
 
 static void kmem_rcu_free(struct rcu_head *head)
@@ -652,17 +764,31 @@ static void kmem_rcu_free(struct rcu_hea
 
 void kmem_cache_free(struct kmem_cache *c, void *b)
 {
+	int size = c->size;
+
+#ifdef CONFIG_PAX_USERCOPY
+	if (size + c->align < PAGE_SIZE) {
+		size += c->align;
+		b -= c->align;
+	}
+#endif
+
 	kmemleak_free_recursive(b, c->flags);
 	if (unlikely(c->flags & SLAB_DESTROY_BY_RCU)) {
 		struct slob_rcu *slob_rcu;
-		slob_rcu = b + (c->size - sizeof(struct slob_rcu));
-		slob_rcu->size = c->size;
+		slob_rcu = b + (size - sizeof(struct slob_rcu));
+		slob_rcu->size = size;
 		call_rcu(&slob_rcu->head, kmem_rcu_free);
 	} else {
-		__kmem_cache_free(b, c->size);
+		__kmem_cache_free(b, size);
 	}
 
+#ifdef CONFIG_PAX_USERCOPY
+	trace_kfree(_RET_IP_, b);
+#else
 	trace_kmem_cache_free(_RET_IP_, b);
+#endif
+
 }
 EXPORT_SYMBOL(kmem_cache_free);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/slub.c linux-3.3.8-pax/mm/slub.c
--- linux-3.3.8/mm/slub.c	2012-04-03 22:02:50.510110032 +0200
+++ linux-3.3.8-pax/mm/slub.c	2012-04-03 22:03:07.094110933 +0200
@@ -2571,6 +2571,8 @@ void kmem_cache_free(struct kmem_cache *
 
 	page = virt_to_head_page(x);
 
+	BUG_ON(!PageSlab(page));
+
 	slab_free(s, page, x, _RET_IP_);
 
 	trace_kmem_cache_free(_RET_IP_, x);
@@ -2604,7 +2606,7 @@ static int slub_min_objects;
  * Merge control. If this is set then no merging of slab caches will occur.
  * (Could be removed. This was introduced to pacify the merge skeptics.)
  */
-static int slub_nomerge;
+static int slub_nomerge = 1;
 
 /*
  * Calculate the order of allocation given an slab object size.
@@ -3057,7 +3059,7 @@ static int kmem_cache_open(struct kmem_c
 	else
 		s->cpu_partial = 30;
 
-	s->refcount = 1;
+	atomic_set(&s->refcount, 1);
 #ifdef CONFIG_NUMA
 	s->remote_node_defrag_ratio = 1000;
 #endif
@@ -3161,8 +3163,7 @@ static inline int kmem_cache_close(struc
 void kmem_cache_destroy(struct kmem_cache *s)
 {
 	down_write(&slub_lock);
-	s->refcount--;
-	if (!s->refcount) {
+	if (atomic_dec_and_test(&s->refcount)) {
 		list_del(&s->list);
 		up_write(&slub_lock);
 		if (kmem_cache_close(s)) {
@@ -3373,6 +3374,50 @@ void *__kmalloc_node(size_t size, gfp_t
 EXPORT_SYMBOL(__kmalloc_node);
 #endif
 
+void check_object_size(const void *ptr, unsigned long n, bool to)
+{
+
+#ifdef CONFIG_PAX_USERCOPY
+	struct page *page;
+	struct kmem_cache *s = NULL;
+	unsigned long offset;
+	const char *type;
+
+	if (!n)
+		return;
+
+	type = "<null>";
+	if (ZERO_OR_NULL_PTR(ptr))
+		goto report;
+
+	if (!virt_addr_valid(ptr))
+		return;
+
+	page = virt_to_head_page(ptr);
+
+	type = "<process stack>";
+	if (!PageSlab(page)) {
+		if (object_is_on_stack(ptr, n) == -1)
+			goto report;
+		return;
+	}
+
+	s = page->slab;
+	type = s->name;
+	if (!(s->flags & SLAB_USERCOPY))
+		goto report;
+
+	offset = (ptr - page_address(page)) % s->size;
+	if (offset <= s->objsize && n <= s->objsize - offset)
+		return;
+
+report:
+	pax_report_usercopy(ptr, n, to, type);
+#endif
+
+}
+EXPORT_SYMBOL(check_object_size);
+
 size_t ksize(const void *object)
 {
 	struct page *page;
@@ -3647,7 +3692,7 @@ static void __init kmem_cache_bootstrap_
 	int node;
 
 	list_add(&s->list, &slab_caches);
-	s->refcount = -1;
+	atomic_set(&s->refcount, -1);
 
 	for_each_node_state(node, N_NORMAL_MEMORY) {
 		struct kmem_cache_node *n = get_node(s, node);
@@ -3767,17 +3812,17 @@ void __init kmem_cache_init(void)
 
 	/* Caches that are not of the two-to-the-power-of size */
 	if (KMALLOC_MIN_SIZE <= 32) {
-		kmalloc_caches[1] = create_kmalloc_cache("kmalloc-96", 96, 0);
+		kmalloc_caches[1] = create_kmalloc_cache("kmalloc-96", 96, SLAB_USERCOPY);
 		caches++;
 	}
 
 	if (KMALLOC_MIN_SIZE <= 64) {
-		kmalloc_caches[2] = create_kmalloc_cache("kmalloc-192", 192, 0);
+		kmalloc_caches[2] = create_kmalloc_cache("kmalloc-192", 192, SLAB_USERCOPY);
 		caches++;
 	}
 
 	for (i = KMALLOC_SHIFT_LOW; i < SLUB_PAGE_SHIFT; i++) {
-		kmalloc_caches[i] = create_kmalloc_cache("kmalloc", 1 << i, 0);
+		kmalloc_caches[i] = create_kmalloc_cache("kmalloc", 1 << i, SLAB_USERCOPY);
 		caches++;
 	}
 
@@ -3845,7 +3890,7 @@ static int slab_unmergeable(struct kmem_
 	/*
 	 * We may have set a slab to be unmergeable during bootstrap.
 	 */
-	if (s->refcount < 0)
+	if (atomic_read(&s->refcount) < 0)
 		return 1;
 
 	return 0;
@@ -3904,7 +3949,7 @@ struct kmem_cache *kmem_cache_create(con
 	down_write(&slub_lock);
 	s = find_mergeable(size, align, flags, name, ctor);
 	if (s) {
-		s->refcount++;
+		atomic_inc(&s->refcount);
 		/*
 		 * Adjust the object sizes so that we clear
 		 * the complete object on kzalloc.
@@ -3913,7 +3958,7 @@ struct kmem_cache *kmem_cache_create(con
 		s->inuse = max_t(int, s->inuse, ALIGN(size, sizeof(void *)));
 
 		if (sysfs_slab_alias(s, name)) {
-			s->refcount--;
+			atomic_dec(&s->refcount);
 			goto err;
 		}
 		up_write(&slub_lock);
@@ -4677,7 +4722,7 @@ SLAB_ATTR_RO(ctor);
 
 static ssize_t aliases_show(struct kmem_cache *s, char *buf)
 {
-	return sprintf(buf, "%d\n", s->refcount - 1);
+	return sprintf(buf, "%d\n", atomic_read(&s->refcount) - 1);
 }
 SLAB_ATTR_RO(aliases);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/sparse-vmemmap.c linux-3.3.8-pax/mm/sparse-vmemmap.c
--- linux-3.3.8/mm/sparse-vmemmap.c	2012-01-08 19:48:29.483470851 +0100
+++ linux-3.3.8-pax/mm/sparse-vmemmap.c	2012-05-02 03:04:08.913359183 +0200
@@ -128,7 +128,7 @@ pud_t * __meminit vmemmap_pud_populate(p
 		void *p = vmemmap_alloc_block(PAGE_SIZE, node);
 		if (!p)
 			return NULL;
-		pud_populate(&init_mm, pud, p);
+		pud_populate_kernel(&init_mm, pud, p);
 	}
 	return pud;
 }
@@ -140,7 +140,7 @@ pgd_t * __meminit vmemmap_pgd_populate(u
 		void *p = vmemmap_alloc_block(PAGE_SIZE, node);
 		if (!p)
 			return NULL;
-		pgd_populate(&init_mm, pgd, p);
+		pgd_populate_kernel(&init_mm, pgd, p);
 	}
 	return pgd;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/swap.c linux-3.3.8-pax/mm/swap.c
--- linux-3.3.8/mm/swap.c	2012-03-19 10:39:12.628049140 +0100
+++ linux-3.3.8-pax/mm/swap.c	2012-03-19 10:43:44.640034617 +0100
@@ -30,6 +30,7 @@
 #include <linux/backing-dev.h>
 #include <linux/memcontrol.h>
 #include <linux/gfp.h>
+#include <linux/hugetlb.h>
 
 #include "internal.h"
 
@@ -70,6 +71,8 @@ static void __put_compound_page(struct p
 
 	__page_cache_release(page);
 	dtor = get_compound_page_dtor(page);
+	if (!PageHuge(page))
+		BUG_ON(dtor != free_compound_page);
 	(*dtor)(page);
 }
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/swapfile.c linux-3.3.8-pax/mm/swapfile.c
--- linux-3.3.8/mm/swapfile.c	2012-06-11 19:36:39.384445762 +0200
+++ linux-3.3.8-pax/mm/swapfile.c	2012-06-11 19:36:45.884446116 +0200
@@ -61,7 +61,7 @@ static DEFINE_MUTEX(swapon_mutex);
 
 static DECLARE_WAIT_QUEUE_HEAD(proc_poll_wait);
 /* Activity counter to indicate that a swapon or swapoff has occurred */
-static atomic_t proc_poll_event = ATOMIC_INIT(0);
+static atomic_unchecked_t proc_poll_event = ATOMIC_INIT(0);
 
 static inline unsigned char swap_count(unsigned char ent)
 {
@@ -1669,7 +1669,7 @@ SYSCALL_DEFINE1(swapoff, const char __us
 	}
 	filp_close(swap_file, NULL);
 	err = 0;
-	atomic_inc(&proc_poll_event);
+	atomic_inc_unchecked(&proc_poll_event);
 	wake_up_interruptible(&proc_poll_wait);
 
 out_dput:
@@ -1685,8 +1685,8 @@ static unsigned swaps_poll(struct file *
 
 	poll_wait(file, &proc_poll_wait, wait);
 
-	if (seq->poll_event != atomic_read(&proc_poll_event)) {
-		seq->poll_event = atomic_read(&proc_poll_event);
+	if (seq->poll_event != atomic_read_unchecked(&proc_poll_event)) {
+		seq->poll_event = atomic_read_unchecked(&proc_poll_event);
 		return POLLIN | POLLRDNORM | POLLERR | POLLPRI;
 	}
 
@@ -1784,7 +1784,7 @@ static int swaps_open(struct inode *inod
 		return ret;
 
 	seq = file->private_data;
-	seq->poll_event = atomic_read(&proc_poll_event);
+	seq->poll_event = atomic_read_unchecked(&proc_poll_event);
 	return 0;
 }
 
@@ -2122,7 +2122,7 @@ SYSCALL_DEFINE2(swapon, const char __use
 		(p->flags & SWP_DISCARDABLE) ? "D" : "");
 
 	mutex_unlock(&swapon_mutex);
-	atomic_inc(&proc_poll_event);
+	atomic_inc_unchecked(&proc_poll_event);
 	wake_up_interruptible(&proc_poll_wait);
 
 	if (S_ISREG(inode->i_mode))
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/util.c linux-3.3.8-pax/mm/util.c
--- linux-3.3.8/mm/util.c	2012-01-08 19:48:29.535470848 +0100
+++ linux-3.3.8-pax/mm/util.c	2012-03-26 19:57:41.831807962 +0200
@@ -243,6 +243,12 @@ void __vma_link_list(struct mm_struct *m
 void arch_pick_mmap_layout(struct mm_struct *mm)
 {
 	mm->mmap_base = TASK_UNMAPPED_BASE;
+
+#ifdef CONFIG_PAX_RANDMMAP
+	if (mm->pax_flags & MF_PAX_RANDMMAP)
+		mm->mmap_base += mm->delta_mmap;
+#endif
+
 	mm->get_unmapped_area = arch_get_unmapped_area;
 	mm->unmap_area = arch_unmap_area;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/vmalloc.c linux-3.3.8-pax/mm/vmalloc.c
--- linux-3.3.8/mm/vmalloc.c	2012-03-19 10:39:12.636049138 +0100
+++ linux-3.3.8-pax/mm/vmalloc.c	2012-05-20 18:58:23.561092275 +0200
@@ -39,8 +39,19 @@ static void vunmap_pte_range(pmd_t *pmd,
 
 	pte = pte_offset_kernel(pmd, addr);
 	do {
-		pte_t ptent = ptep_get_and_clear(&init_mm, addr, pte);
-		WARN_ON(!pte_none(ptent) && !pte_present(ptent));
+
+#if defined(CONFIG_MODULES) && defined(CONFIG_X86_32) && defined(CONFIG_PAX_KERNEXEC)
+		if ((unsigned long)MODULES_EXEC_VADDR <= addr && addr < (unsigned long)MODULES_EXEC_END) {
+			BUG_ON(!pte_exec(*pte));
+			set_pte_at(&init_mm, addr, pte, pfn_pte(__pa(addr) >> PAGE_SHIFT, PAGE_KERNEL_EXEC));
+			continue;
+		}
+#endif
+
+		{
+			pte_t ptent = ptep_get_and_clear(&init_mm, addr, pte);
+			WARN_ON(!pte_none(ptent) && !pte_present(ptent));
+		}
 	} while (pte++, addr += PAGE_SIZE, addr != end);
 }
 
@@ -91,6 +102,7 @@ static int vmap_pte_range(pmd_t *pmd, un
 		unsigned long end, pgprot_t prot, struct page **pages, int *nr)
 {
 	pte_t *pte;
+	int ret = -ENOMEM;
 
 	/*
 	 * nr is a running index into the array which helps higher level
@@ -100,17 +112,30 @@ static int vmap_pte_range(pmd_t *pmd, un
 	pte = pte_alloc_kernel(pmd, addr);
 	if (!pte)
 		return -ENOMEM;
+
+	pax_open_kernel();
 	do {
 		struct page *page = pages[*nr];
 
-		if (WARN_ON(!pte_none(*pte)))
-			return -EBUSY;
-		if (WARN_ON(!page))
-			return -ENOMEM;
+#if defined(CONFIG_MODULES) && defined(CONFIG_X86_32) && defined(CONFIG_PAX_KERNEXEC)
+		if (pgprot_val(prot) & _PAGE_NX)
+#endif
+
+		if (WARN_ON(!pte_none(*pte))) {
+			ret = -EBUSY;
+			goto out;
+		}
+		if (WARN_ON(!page)) {
+			ret = -ENOMEM;
+			goto out;
+		}
 		set_pte_at(&init_mm, addr, pte, mk_pte(page, prot));
 		(*nr)++;
 	} while (pte++, addr += PAGE_SIZE, addr != end);
-	return 0;
+	ret = 0;
+out:
+	pax_close_kernel();
+	return ret;
 }
 
 static int vmap_pmd_range(pud_t *pud, unsigned long addr,
@@ -119,7 +144,7 @@ static int vmap_pmd_range(pud_t *pud, un
 	pmd_t *pmd;
 	unsigned long next;
 
-	pmd = pmd_alloc(&init_mm, pud, addr);
+	pmd = pmd_alloc_kernel(&init_mm, pud, addr);
 	if (!pmd)
 		return -ENOMEM;
 	do {
@@ -136,7 +161,7 @@ static int vmap_pud_range(pgd_t *pgd, un
 	pud_t *pud;
 	unsigned long next;
 
-	pud = pud_alloc(&init_mm, pgd, addr);
+	pud = pud_alloc_kernel(&init_mm, pgd, addr);
 	if (!pud)
 		return -ENOMEM;
 	do {
@@ -191,11 +216,20 @@ int is_vmalloc_or_module_addr(const void
 	 * and fall back on vmalloc() if that fails. Others
 	 * just put it in the vmalloc space.
 	 */
-#if defined(CONFIG_MODULES) && defined(MODULES_VADDR)
+#ifdef CONFIG_MODULES
+#ifdef MODULES_VADDR
 	unsigned long addr = (unsigned long)x;
 	if (addr >= MODULES_VADDR && addr < MODULES_END)
 		return 1;
 #endif
+
+#if defined(CONFIG_X86_32) && defined(CONFIG_PAX_KERNEXEC)
+	if (x >= (const void *)MODULES_EXEC_VADDR && x < (const void *)MODULES_EXEC_END)
+		return 1;
+#endif
+
+#endif
+
 	return is_vmalloc_addr(x);
 }
 
@@ -216,8 +250,14 @@ struct page *vmalloc_to_page(const void
 
 	if (!pgd_none(*pgd)) {
 		pud_t *pud = pud_offset(pgd, addr);
+#ifdef CONFIG_X86
+		if (!pud_large(*pud))
+#endif
 		if (!pud_none(*pud)) {
 			pmd_t *pmd = pmd_offset(pud, addr);
+#ifdef CONFIG_X86
+			if (!pmd_large(*pmd))
+#endif
 			if (!pmd_none(*pmd)) {
 				pte_t *ptep, pte;
 
@@ -332,6 +372,10 @@ static void purge_vmap_area_lazy(void);
 static struct vmap_area *alloc_vmap_area(unsigned long size,
 				unsigned long align,
 				unsigned long vstart, unsigned long vend,
+				int node, gfp_t gfp_mask) __size_overflow(1);
+static struct vmap_area *alloc_vmap_area(unsigned long size,
+				unsigned long align,
+				unsigned long vstart, unsigned long vend,
 				int node, gfp_t gfp_mask)
 {
 	struct vmap_area *va;
@@ -1319,6 +1363,16 @@ static struct vm_struct *__get_vm_area_n
 	struct vm_struct *area;
 
 	BUG_ON(in_interrupt());
+
+#if defined(CONFIG_MODULES) && defined(CONFIG_X86) && defined(CONFIG_PAX_KERNEXEC)
+	if (flags & VM_KERNEXEC) {
+		if (start != VMALLOC_START || end != VMALLOC_END)
+			return NULL;
+		start = (unsigned long)MODULES_EXEC_VADDR;
+		end = (unsigned long)MODULES_EXEC_END;
+	}
+#endif
+
 	if (flags & VM_IOREMAP) {
 		int bit = fls(size);
 
@@ -1551,6 +1605,11 @@ void *vmap(struct page **pages, unsigned
 	if (count > totalram_pages)
 		return NULL;
 
+#if defined(CONFIG_MODULES) && defined(CONFIG_X86) && defined(CONFIG_PAX_KERNEXEC)
+	if (!(pgprot_val(prot) & _PAGE_NX))
+		flags |= VM_KERNEXEC;
+#endif
+
 	area = get_vm_area_caller((count << PAGE_SHIFT), flags,
 					__builtin_return_address(0));
 	if (!area)
@@ -1652,6 +1711,13 @@ void *__vmalloc_node_range(unsigned long
 	if (!size || (size >> PAGE_SHIFT) > totalram_pages)
 		goto fail;
 
+#if defined(CONFIG_MODULES) && defined(CONFIG_X86) && defined(CONFIG_PAX_KERNEXEC)
+	if (!(pgprot_val(prot) & _PAGE_NX))
+		area = __get_vm_area_node(size, align, VM_ALLOC | VM_UNLIST | VM_KERNEXEC,
+					  VMALLOC_START, VMALLOC_END, node, gfp_mask, caller);
+	else
+#endif
+
 	area = __get_vm_area_node(size, align, VM_ALLOC | VM_UNLIST,
 				  start, end, node, gfp_mask, caller);
 	if (!area)
@@ -1825,10 +1891,9 @@ EXPORT_SYMBOL(vzalloc_node);
  *	For tight control over page level allocator and protection flags
  *	use __vmalloc() instead.
  */
-
 void *vmalloc_exec(unsigned long size)
 {
-	return __vmalloc_node(size, 1, GFP_KERNEL | __GFP_HIGHMEM, PAGE_KERNEL_EXEC,
+	return __vmalloc_node(size, 1, GFP_KERNEL | __GFP_HIGHMEM | __GFP_ZERO, PAGE_KERNEL_EXEC,
 			      -1, __builtin_return_address(0));
 }
 
@@ -2123,6 +2188,8 @@ int remap_vmalloc_range(struct vm_area_s
 	unsigned long uaddr = vma->vm_start;
 	unsigned long usize = vma->vm_end - vma->vm_start;
 
+	BUG_ON(vma->vm_mirror);
+
 	if ((PAGE_SIZE-1) & (unsigned long)addr)
 		return -EINVAL;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/mm/vmstat.c linux-3.3.8-pax/mm/vmstat.c
--- linux-3.3.8/mm/vmstat.c	2012-03-19 10:39:12.640049139 +0100
+++ linux-3.3.8-pax/mm/vmstat.c	2012-03-19 10:43:44.660034615 +0100
@@ -78,7 +78,7 @@ void vm_events_fold_cpu(int cpu)
  *
  * vm_stat contains the global counters
  */
-atomic_long_t vm_stat[NR_VM_ZONE_STAT_ITEMS] __cacheline_aligned_in_smp;
+atomic_long_unchecked_t vm_stat[NR_VM_ZONE_STAT_ITEMS] __cacheline_aligned_in_smp;
 EXPORT_SYMBOL(vm_stat);
 
 #ifdef CONFIG_SMP
@@ -454,7 +454,7 @@ void refresh_cpu_vm_stats(int cpu)
 				v = p->vm_stat_diff[i];
 				p->vm_stat_diff[i] = 0;
 				local_irq_restore(flags);
-				atomic_long_add(v, &zone->vm_stat[i]);
+				atomic_long_add_unchecked(v, &zone->vm_stat[i]);
 				global_diff[i] += v;
 #ifdef CONFIG_NUMA
 				/* 3 seconds idle till flush */
@@ -492,7 +492,7 @@ void refresh_cpu_vm_stats(int cpu)
 
 	for (i = 0; i < NR_VM_ZONE_STAT_ITEMS; i++)
 		if (global_diff[i])
-			atomic_long_add(global_diff[i], &vm_stat[i]);
+			atomic_long_add_unchecked(global_diff[i], &vm_stat[i]);
 }
 
 #endif
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/8021q/vlan.c linux-3.3.8-pax/net/8021q/vlan.c
--- linux-3.3.8/net/8021q/vlan.c	2012-03-19 10:39:12.640049139 +0100
+++ linux-3.3.8-pax/net/8021q/vlan.c	2012-03-19 10:43:44.660034615 +0100
@@ -554,8 +554,7 @@ static int vlan_ioctl_handler(struct net
 		err = -EPERM;
 		if (!capable(CAP_NET_ADMIN))
 			break;
-		if ((args.u.name_type >= 0) &&
-		    (args.u.name_type < VLAN_NAME_TYPE_HIGHEST)) {
+		if (args.u.name_type < VLAN_NAME_TYPE_HIGHEST) {
 			struct vlan_net *vn;
 
 			vn = net_generic(net, vlan_net_id);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/9p/trans_fd.c linux-3.3.8-pax/net/9p/trans_fd.c
--- linux-3.3.8/net/9p/trans_fd.c	2012-03-19 10:39:12.652049139 +0100
+++ linux-3.3.8-pax/net/9p/trans_fd.c	2012-03-19 10:43:44.660034616 +0100
@@ -425,7 +425,7 @@ static int p9_fd_write(struct p9_client
 	oldfs = get_fs();
 	set_fs(get_ds());
 	/* The cast to a user pointer is valid due to the set_fs() */
-	ret = vfs_write(ts->wr, (__force void __user *)v, len, &ts->wr->f_pos);
+	ret = vfs_write(ts->wr, (void __force_user *)v, len, &ts->wr->f_pos);
 	set_fs(oldfs);
 
 	if (ret <= 0 && ret != -ERESTARTSYS && ret != -EAGAIN)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/atm/atm_misc.c linux-3.3.8-pax/net/atm/atm_misc.c
--- linux-3.3.8/net/atm/atm_misc.c	2012-03-19 10:39:12.884049125 +0100
+++ linux-3.3.8-pax/net/atm/atm_misc.c	2012-03-19 10:43:44.660034616 +0100
@@ -17,7 +17,7 @@ int atm_charge(struct atm_vcc *vcc, int
 	if (atomic_read(&sk_atm(vcc)->sk_rmem_alloc) <= sk_atm(vcc)->sk_rcvbuf)
 		return 1;
 	atm_return(vcc, truesize);
-	atomic_inc(&vcc->stats->rx_drop);
+	atomic_inc_unchecked(&vcc->stats->rx_drop);
 	return 0;
 }
 EXPORT_SYMBOL(atm_charge);
@@ -39,7 +39,7 @@ struct sk_buff *atm_alloc_charge(struct
 		}
 	}
 	atm_return(vcc, guess);
-	atomic_inc(&vcc->stats->rx_drop);
+	atomic_inc_unchecked(&vcc->stats->rx_drop);
 	return NULL;
 }
 EXPORT_SYMBOL(atm_alloc_charge);
@@ -86,7 +86,7 @@ EXPORT_SYMBOL(atm_pcr_goal);
 
 void sonet_copy_stats(struct k_sonet_stats *from, struct sonet_stats *to)
 {
-#define __HANDLE_ITEM(i) to->i = atomic_read(&from->i)
+#define __HANDLE_ITEM(i) to->i = atomic_read_unchecked(&from->i)
 	__SONET_ITEMS
 #undef __HANDLE_ITEM
 }
@@ -94,7 +94,7 @@ EXPORT_SYMBOL(sonet_copy_stats);
 
 void sonet_subtract_stats(struct k_sonet_stats *from, struct sonet_stats *to)
 {
-#define __HANDLE_ITEM(i) atomic_sub(to->i, &from->i)
+#define __HANDLE_ITEM(i) atomic_sub_unchecked(to->i,&from->i)
 	__SONET_ITEMS
 #undef __HANDLE_ITEM
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/atm/lec.h linux-3.3.8-pax/net/atm/lec.h
--- linux-3.3.8/net/atm/lec.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/net/atm/lec.h	2012-03-19 10:43:44.660034616 +0100
@@ -48,7 +48,7 @@ struct lane2_ops {
 			      const u8 *tlvs, u32 sizeoftlvs);
 	void (*associate_indicator) (struct net_device *dev, const u8 *mac_addr,
 				     const u8 *tlvs, u32 sizeoftlvs);
-};
+} __no_const;
 
 /*
  * ATM LAN Emulation supports both LLC & Dix Ethernet EtherType
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/atm/mpc.h linux-3.3.8-pax/net/atm/mpc.h
--- linux-3.3.8/net/atm/mpc.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/net/atm/mpc.h	2012-03-19 10:43:44.660034616 +0100
@@ -33,7 +33,7 @@ struct mpoa_client {
 	struct mpc_parameters parameters;  /* parameters for this client    */
 
 	const struct net_device_ops *old_ops;
-	struct net_device_ops new_ops;
+	net_device_ops_no_const new_ops;
 };
 
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/atm/proc.c linux-3.3.8-pax/net/atm/proc.c
--- linux-3.3.8/net/atm/proc.c	2011-10-24 12:48:42.271090918 +0200
+++ linux-3.3.8-pax/net/atm/proc.c	2012-03-19 10:43:44.660034616 +0100
@@ -45,9 +45,9 @@ static void add_stats(struct seq_file *s
   const struct k_atm_aal_stats *stats)
 {
 	seq_printf(seq, "%s ( %d %d %d %d %d )", aal,
-		   atomic_read(&stats->tx), atomic_read(&stats->tx_err),
-		   atomic_read(&stats->rx), atomic_read(&stats->rx_err),
-		   atomic_read(&stats->rx_drop));
+		   atomic_read_unchecked(&stats->tx),atomic_read_unchecked(&stats->tx_err),
+		   atomic_read_unchecked(&stats->rx),atomic_read_unchecked(&stats->rx_err),
+		   atomic_read_unchecked(&stats->rx_drop));
 }
 
 static void atm_dev_info(struct seq_file *seq, const struct atm_dev *dev)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/atm/resources.c linux-3.3.8-pax/net/atm/resources.c
--- linux-3.3.8/net/atm/resources.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/net/atm/resources.c	2012-03-19 10:43:44.664034616 +0100
@@ -160,7 +160,7 @@ EXPORT_SYMBOL(atm_dev_deregister);
 static void copy_aal_stats(struct k_atm_aal_stats *from,
     struct atm_aal_stats *to)
 {
-#define __HANDLE_ITEM(i) to->i = atomic_read(&from->i)
+#define __HANDLE_ITEM(i) to->i = atomic_read_unchecked(&from->i)
 	__AAL_STAT_ITEMS
 #undef __HANDLE_ITEM
 }
@@ -168,7 +168,7 @@ static void copy_aal_stats(struct k_atm_
 static void subtract_aal_stats(struct k_atm_aal_stats *from,
     struct atm_aal_stats *to)
 {
-#define __HANDLE_ITEM(i) atomic_sub(to->i, &from->i)
+#define __HANDLE_ITEM(i) atomic_sub_unchecked(to->i, &from->i)
 	__AAL_STAT_ITEMS
 #undef __HANDLE_ITEM
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/batman-adv/bat_iv_ogm.c linux-3.3.8-pax/net/batman-adv/bat_iv_ogm.c
--- linux-3.3.8/net/batman-adv/bat_iv_ogm.c	2012-01-08 19:48:29.631470843 +0100
+++ linux-3.3.8-pax/net/batman-adv/bat_iv_ogm.c	2012-03-19 10:43:44.664034616 +0100
@@ -541,7 +541,7 @@ void bat_ogm_schedule(struct hard_iface
 
 	/* change sequence number to network order */
 	batman_ogm_packet->seqno =
-			htonl((uint32_t)atomic_read(&hard_iface->seqno));
+			htonl((uint32_t)atomic_read_unchecked(&hard_iface->seqno));
 
 	batman_ogm_packet->ttvn = atomic_read(&bat_priv->ttvn);
 	batman_ogm_packet->tt_crc = htons((uint16_t)
@@ -561,7 +561,7 @@ void bat_ogm_schedule(struct hard_iface
 	else
 		batman_ogm_packet->gw_flags = NO_FLAGS;
 
-	atomic_inc(&hard_iface->seqno);
+	atomic_inc_unchecked(&hard_iface->seqno);
 
 	slide_own_bcast_window(hard_iface);
 	bat_ogm_queue_add(bat_priv, hard_iface->packet_buff,
@@ -922,7 +922,7 @@ static void bat_ogm_process(const struct
 		return;
 
 	/* could be changed by schedule_own_packet() */
-	if_incoming_seqno = atomic_read(&if_incoming->seqno);
+	if_incoming_seqno = atomic_read_unchecked(&if_incoming->seqno);
 
 	has_directlink_flag = (batman_ogm_packet->flags & DIRECTLINK ? 1 : 0);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/batman-adv/hard-interface.c linux-3.3.8-pax/net/batman-adv/hard-interface.c
--- linux-3.3.8/net/batman-adv/hard-interface.c	2012-01-08 19:48:29.655470842 +0100
+++ linux-3.3.8-pax/net/batman-adv/hard-interface.c	2012-03-19 10:43:44.664034616 +0100
@@ -326,8 +326,8 @@ int hardif_enable_interface(struct hard_
 	hard_iface->batman_adv_ptype.dev = hard_iface->net_dev;
 	dev_add_pack(&hard_iface->batman_adv_ptype);
 
-	atomic_set(&hard_iface->seqno, 1);
-	atomic_set(&hard_iface->frag_seqno, 1);
+	atomic_set_unchecked(&hard_iface->seqno, 1);
+	atomic_set_unchecked(&hard_iface->frag_seqno, 1);
 	bat_info(hard_iface->soft_iface, "Adding interface: %s\n",
 		 hard_iface->net_dev->name);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/batman-adv/soft-interface.c linux-3.3.8-pax/net/batman-adv/soft-interface.c
--- linux-3.3.8/net/batman-adv/soft-interface.c	2012-03-19 10:39:12.904049130 +0100
+++ linux-3.3.8-pax/net/batman-adv/soft-interface.c	2012-03-19 10:43:44.668034616 +0100
@@ -645,7 +645,7 @@ static int interface_tx(struct sk_buff *
 
 		/* set broadcast sequence number */
 		bcast_packet->seqno =
-			htonl(atomic_inc_return(&bat_priv->bcast_seqno));
+			htonl(atomic_inc_return_unchecked(&bat_priv->bcast_seqno));
 
 		add_bcast_packet_to_list(bat_priv, skb, 1);
 
@@ -843,7 +843,7 @@ struct net_device *softif_create(const c
 	atomic_set(&bat_priv->batman_queue_left, BATMAN_QUEUE_LEN);
 
 	atomic_set(&bat_priv->mesh_state, MESH_INACTIVE);
-	atomic_set(&bat_priv->bcast_seqno, 1);
+	atomic_set_unchecked(&bat_priv->bcast_seqno, 1);
 	atomic_set(&bat_priv->ttvn, 0);
 	atomic_set(&bat_priv->tt_local_changes, 0);
 	atomic_set(&bat_priv->tt_ogm_append_cnt, 0);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/batman-adv/types.h linux-3.3.8-pax/net/batman-adv/types.h
--- linux-3.3.8/net/batman-adv/types.h	2012-03-19 10:39:12.904049130 +0100
+++ linux-3.3.8-pax/net/batman-adv/types.h	2012-03-19 10:43:44.668034616 +0100
@@ -38,8 +38,8 @@ struct hard_iface {
 	int16_t if_num;
 	char if_status;
 	struct net_device *net_dev;
-	atomic_t seqno;
-	atomic_t frag_seqno;
+	atomic_unchecked_t seqno;
+	atomic_unchecked_t frag_seqno;
 	unsigned char *packet_buff;
 	int packet_len;
 	struct kobject *hardif_obj;
@@ -154,7 +154,7 @@ struct bat_priv {
 	atomic_t orig_interval;		/* uint */
 	atomic_t hop_penalty;		/* uint */
 	atomic_t log_level;		/* uint */
-	atomic_t bcast_seqno;
+	atomic_unchecked_t bcast_seqno;
 	atomic_t bcast_queue_left;
 	atomic_t batman_queue_left;
 	atomic_t ttvn; /* translation table version number */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/batman-adv/unicast.c linux-3.3.8-pax/net/batman-adv/unicast.c
--- linux-3.3.8/net/batman-adv/unicast.c	2012-01-08 19:48:29.719470838 +0100
+++ linux-3.3.8-pax/net/batman-adv/unicast.c	2012-03-19 10:43:44.668034616 +0100
@@ -264,7 +264,7 @@ int frag_send_skb(struct sk_buff *skb, s
 	frag1->flags = UNI_FRAG_HEAD | large_tail;
 	frag2->flags = large_tail;
 
-	seqno = atomic_add_return(2, &hard_iface->frag_seqno);
+	seqno = atomic_add_return_unchecked(2, &hard_iface->frag_seqno);
 	frag1->seqno = htons(seqno - 1);
 	frag2->seqno = htons(seqno);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/bluetooth/hci_conn.c linux-3.3.8-pax/net/bluetooth/hci_conn.c
--- linux-3.3.8/net/bluetooth/hci_conn.c	2012-04-23 14:06:59.619285802 +0200
+++ linux-3.3.8-pax/net/bluetooth/hci_conn.c	2012-04-23 14:07:11.751285156 +0200
@@ -234,7 +234,7 @@ void hci_le_ltk_reply(struct hci_conn *c
 	memset(&cp, 0, sizeof(cp));
 
 	cp.handle = cpu_to_le16(conn->handle);
-	memcpy(cp.ltk, ltk, sizeof(ltk));
+	memcpy(cp.ltk, ltk, sizeof(cp.ltk));
 
 	hci_send_cmd(hdev, HCI_OP_LE_LTK_REPLY, sizeof(cp), &cp);
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/bluetooth/l2cap_core.c linux-3.3.8-pax/net/bluetooth/l2cap_core.c
--- linux-3.3.8/net/bluetooth/l2cap_core.c	2012-03-19 10:39:13.368049121 +0100
+++ linux-3.3.8-pax/net/bluetooth/l2cap_core.c	2012-03-19 10:43:44.672034615 +0100
@@ -2418,8 +2418,10 @@ static int l2cap_parse_conf_rsp(struct l
 			break;
 
 		case L2CAP_CONF_RFC:
-			if (olen == sizeof(rfc))
-				memcpy(&rfc, (void *)val, olen);
+			if (olen != sizeof(rfc))
+				break;
+
+			memcpy(&rfc, (void *)val, olen);
 
 			if (test_bit(CONF_STATE2_DEVICE, &chan->conf_state) &&
 							rfc.mode != chan->mode)
@@ -2537,8 +2539,10 @@ static void l2cap_conf_rfc_get(struct l2
 
 		switch (type) {
 		case L2CAP_CONF_RFC:
-			if (olen == sizeof(rfc))
-				memcpy(&rfc, (void *)val, olen);
+			if (olen != sizeof(rfc))
+				break;
+
+			memcpy(&rfc, (void *)val, olen);
 			goto done;
 		}
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/bridge/netfilter/ebtables.c linux-3.3.8-pax/net/bridge/netfilter/ebtables.c
--- linux-3.3.8/net/bridge/netfilter/ebtables.c	2012-03-19 10:39:13.396049117 +0100
+++ linux-3.3.8-pax/net/bridge/netfilter/ebtables.c	2012-03-19 10:43:44.672034615 +0100
@@ -1523,7 +1523,7 @@ static int do_ebt_get_ctl(struct sock *s
 			tmp.valid_hooks = t->table->valid_hooks;
 		}
 		mutex_unlock(&ebt_mutex);
-		if (copy_to_user(user, &tmp, *len) != 0){
+		if (*len > sizeof(tmp) || copy_to_user(user, &tmp, *len) != 0){
 			BUGPRINT("c2u Didn't work\n");
 			ret = -EFAULT;
 			break;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/caif/caif_socket.c linux-3.3.8-pax/net/caif/caif_socket.c
--- linux-3.3.8/net/caif/caif_socket.c	2012-03-19 10:39:13.400049110 +0100
+++ linux-3.3.8-pax/net/caif/caif_socket.c	2012-03-19 10:43:44.676034615 +0100
@@ -48,19 +48,20 @@ static struct dentry *debugfsdir;
 #ifdef CONFIG_DEBUG_FS
 struct debug_fs_counter {
 	atomic_t caif_nr_socks;
-	atomic_t caif_sock_create;
-	atomic_t num_connect_req;
-	atomic_t num_connect_resp;
-	atomic_t num_connect_fail_resp;
-	atomic_t num_disconnect;
-	atomic_t num_remote_shutdown_ind;
-	atomic_t num_tx_flow_off_ind;
-	atomic_t num_tx_flow_on_ind;
-	atomic_t num_rx_flow_off;
-	atomic_t num_rx_flow_on;
+	atomic_unchecked_t caif_sock_create;
+	atomic_unchecked_t num_connect_req;
+	atomic_unchecked_t num_connect_resp;
+	atomic_unchecked_t num_connect_fail_resp;
+	atomic_unchecked_t num_disconnect;
+	atomic_unchecked_t num_remote_shutdown_ind;
+	atomic_unchecked_t num_tx_flow_off_ind;
+	atomic_unchecked_t num_tx_flow_on_ind;
+	atomic_unchecked_t num_rx_flow_off;
+	atomic_unchecked_t num_rx_flow_on;
 };
 static struct debug_fs_counter cnt;
 #define	dbfs_atomic_inc(v) atomic_inc_return(v)
+#define	dbfs_atomic_inc_unchecked(v) atomic_inc_return_unchecked(v)
 #define	dbfs_atomic_dec(v) atomic_dec_return(v)
 #else
 #define	dbfs_atomic_inc(v) 0
@@ -161,7 +162,7 @@ static int caif_queue_rcv_skb(struct soc
 					atomic_read(&cf_sk->sk.sk_rmem_alloc),
 					sk_rcvbuf_lowwater(cf_sk));
 		set_rx_flow_off(cf_sk);
-		dbfs_atomic_inc(&cnt.num_rx_flow_off);
+		dbfs_atomic_inc_unchecked(&cnt.num_rx_flow_off);
 		caif_flow_ctrl(sk, CAIF_MODEMCMD_FLOW_OFF_REQ);
 	}
 
@@ -172,7 +173,7 @@ static int caif_queue_rcv_skb(struct soc
 		set_rx_flow_off(cf_sk);
 		if (net_ratelimit())
 			pr_debug("sending flow OFF due to rmem_schedule\n");
-		dbfs_atomic_inc(&cnt.num_rx_flow_off);
+		dbfs_atomic_inc_unchecked(&cnt.num_rx_flow_off);
 		caif_flow_ctrl(sk, CAIF_MODEMCMD_FLOW_OFF_REQ);
 	}
 	skb->dev = NULL;
@@ -233,14 +234,14 @@ static void caif_ctrl_cb(struct cflayer
 	switch (flow) {
 	case CAIF_CTRLCMD_FLOW_ON_IND:
 		/* OK from modem to start sending again */
-		dbfs_atomic_inc(&cnt.num_tx_flow_on_ind);
+		dbfs_atomic_inc_unchecked(&cnt.num_tx_flow_on_ind);
 		set_tx_flow_on(cf_sk);
 		cf_sk->sk.sk_state_change(&cf_sk->sk);
 		break;
 
 	case CAIF_CTRLCMD_FLOW_OFF_IND:
 		/* Modem asks us to shut up */
-		dbfs_atomic_inc(&cnt.num_tx_flow_off_ind);
+		dbfs_atomic_inc_unchecked(&cnt.num_tx_flow_off_ind);
 		set_tx_flow_off(cf_sk);
 		cf_sk->sk.sk_state_change(&cf_sk->sk);
 		break;
@@ -249,7 +250,7 @@ static void caif_ctrl_cb(struct cflayer
 		/* We're now connected */
 		caif_client_register_refcnt(&cf_sk->layer,
 						cfsk_hold, cfsk_put);
-		dbfs_atomic_inc(&cnt.num_connect_resp);
+		dbfs_atomic_inc_unchecked(&cnt.num_connect_resp);
 		cf_sk->sk.sk_state = CAIF_CONNECTED;
 		set_tx_flow_on(cf_sk);
 		cf_sk->sk.sk_state_change(&cf_sk->sk);
@@ -263,7 +264,7 @@ static void caif_ctrl_cb(struct cflayer
 
 	case CAIF_CTRLCMD_INIT_FAIL_RSP:
 		/* Connect request failed */
-		dbfs_atomic_inc(&cnt.num_connect_fail_resp);
+		dbfs_atomic_inc_unchecked(&cnt.num_connect_fail_resp);
 		cf_sk->sk.sk_err = ECONNREFUSED;
 		cf_sk->sk.sk_state = CAIF_DISCONNECTED;
 		cf_sk->sk.sk_shutdown = SHUTDOWN_MASK;
@@ -277,7 +278,7 @@ static void caif_ctrl_cb(struct cflayer
 
 	case CAIF_CTRLCMD_REMOTE_SHUTDOWN_IND:
 		/* Modem has closed this connection, or device is down. */
-		dbfs_atomic_inc(&cnt.num_remote_shutdown_ind);
+		dbfs_atomic_inc_unchecked(&cnt.num_remote_shutdown_ind);
 		cf_sk->sk.sk_shutdown = SHUTDOWN_MASK;
 		cf_sk->sk.sk_err = ECONNRESET;
 		set_rx_flow_on(cf_sk);
@@ -297,7 +298,7 @@ static void caif_check_flow_release(stru
 		return;
 
 	if (atomic_read(&sk->sk_rmem_alloc) <= sk_rcvbuf_lowwater(cf_sk)) {
-			dbfs_atomic_inc(&cnt.num_rx_flow_on);
+			dbfs_atomic_inc_unchecked(&cnt.num_rx_flow_on);
 			set_rx_flow_on(cf_sk);
 			caif_flow_ctrl(sk, CAIF_MODEMCMD_FLOW_ON_REQ);
 	}
@@ -856,7 +857,7 @@ static int caif_connect(struct socket *s
 	/*ifindex = id of the interface.*/
 	cf_sk->conn_req.ifindex = cf_sk->sk.sk_bound_dev_if;
 
-	dbfs_atomic_inc(&cnt.num_connect_req);
+	dbfs_atomic_inc_unchecked(&cnt.num_connect_req);
 	cf_sk->layer.receive = caif_sktrecv_cb;
 
 	err = caif_connect_client(sock_net(sk), &cf_sk->conn_req,
@@ -945,7 +946,7 @@ static int caif_release(struct socket *s
 	spin_unlock_bh(&sk->sk_receive_queue.lock);
 	sock->sk = NULL;
 
-	dbfs_atomic_inc(&cnt.num_disconnect);
+	dbfs_atomic_inc_unchecked(&cnt.num_disconnect);
 
 	WARN_ON(IS_ERR(cf_sk->debugfs_socket_dir));
 	if (cf_sk->debugfs_socket_dir != NULL)
@@ -1124,7 +1125,7 @@ static int caif_create(struct net *net,
 	cf_sk->conn_req.protocol = protocol;
 	/* Increase the number of sockets created. */
 	dbfs_atomic_inc(&cnt.caif_nr_socks);
-	num = dbfs_atomic_inc(&cnt.caif_sock_create);
+	num = dbfs_atomic_inc_unchecked(&cnt.caif_sock_create);
 #ifdef CONFIG_DEBUG_FS
 	if (!IS_ERR(debugfsdir)) {
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/caif/cfctrl.c linux-3.3.8-pax/net/caif/cfctrl.c
--- linux-3.3.8/net/caif/cfctrl.c	2012-01-08 19:48:29.855470831 +0100
+++ linux-3.3.8-pax/net/caif/cfctrl.c	2012-03-19 10:43:44.676034615 +0100
@@ -9,6 +9,7 @@
 #include <linux/stddef.h>
 #include <linux/spinlock.h>
 #include <linux/slab.h>
+#include <linux/sched.h>
 #include <net/caif/caif_layer.h>
 #include <net/caif/cfpkt.h>
 #include <net/caif/cfctrl.h>
@@ -42,8 +43,8 @@ struct cflayer *cfctrl_create(void)
 	memset(&dev_info, 0, sizeof(dev_info));
 	dev_info.id = 0xff;
 	cfsrvl_init(&this->serv, 0, &dev_info, false);
-	atomic_set(&this->req_seq_no, 1);
-	atomic_set(&this->rsp_seq_no, 1);
+	atomic_set_unchecked(&this->req_seq_no, 1);
+	atomic_set_unchecked(&this->rsp_seq_no, 1);
 	this->serv.layer.receive = cfctrl_recv;
 	sprintf(this->serv.layer.name, "ctrl");
 	this->serv.layer.ctrlcmd = cfctrl_ctrlcmd;
@@ -129,8 +130,8 @@ static void cfctrl_insert_req(struct cfc
 			      struct cfctrl_request_info *req)
 {
 	spin_lock_bh(&ctrl->info_list_lock);
-	atomic_inc(&ctrl->req_seq_no);
-	req->sequence_no = atomic_read(&ctrl->req_seq_no);
+	atomic_inc_unchecked(&ctrl->req_seq_no);
+	req->sequence_no = atomic_read_unchecked(&ctrl->req_seq_no);
 	list_add_tail(&req->list, &ctrl->list);
 	spin_unlock_bh(&ctrl->info_list_lock);
 }
@@ -148,7 +149,7 @@ static struct cfctrl_request_info *cfctr
 			if (p != first)
 				pr_warn("Requests are not received in order\n");
 
-			atomic_set(&ctrl->rsp_seq_no,
+			atomic_set_unchecked(&ctrl->rsp_seq_no,
 					 p->sequence_no);
 			list_del(&p->list);
 			goto out;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/can/gw.c linux-3.3.8-pax/net/can/gw.c
--- linux-3.3.8/net/can/gw.c	2012-01-08 19:48:29.891470829 +0100
+++ linux-3.3.8-pax/net/can/gw.c	2012-03-19 10:43:44.676034615 +0100
@@ -96,7 +96,7 @@ struct cf_mod {
 	struct {
 		void (*xor)(struct can_frame *cf, struct cgw_csum_xor *xor);
 		void (*crc8)(struct can_frame *cf, struct cgw_csum_crc8 *crc8);
-	} csumfunc;
+	} __no_const csumfunc;
 };
 
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/compat.c linux-3.3.8-pax/net/compat.c
--- linux-3.3.8/net/compat.c	2012-01-08 19:48:29.955470826 +0100
+++ linux-3.3.8-pax/net/compat.c	2012-03-19 10:43:44.680034615 +0100
@@ -71,9 +71,9 @@ int get_compat_msghdr(struct msghdr *kms
 	    __get_user(kmsg->msg_controllen, &umsg->msg_controllen) ||
 	    __get_user(kmsg->msg_flags, &umsg->msg_flags))
 		return -EFAULT;
-	kmsg->msg_name = compat_ptr(tmp1);
-	kmsg->msg_iov = compat_ptr(tmp2);
-	kmsg->msg_control = compat_ptr(tmp3);
+	kmsg->msg_name = (void __force_kernel *)compat_ptr(tmp1);
+	kmsg->msg_iov = (void __force_kernel *)compat_ptr(tmp2);
+	kmsg->msg_control = (void __force_kernel *)compat_ptr(tmp3);
 	return 0;
 }
 
@@ -85,7 +85,7 @@ int verify_compat_iovec(struct msghdr *k
 
 	if (kern_msg->msg_namelen) {
 		if (mode == VERIFY_READ) {
-			int err = move_addr_to_kernel(kern_msg->msg_name,
+			int err = move_addr_to_kernel((void __force_user *)kern_msg->msg_name,
 						      kern_msg->msg_namelen,
 						      kern_address);
 			if (err < 0)
@@ -96,7 +96,7 @@ int verify_compat_iovec(struct msghdr *k
 		kern_msg->msg_name = NULL;
 
 	tot_len = iov_from_user_compat_to_kern(kern_iov,
-					  (struct compat_iovec __user *)kern_msg->msg_iov,
+					  (struct compat_iovec __force_user *)kern_msg->msg_iov,
 					  kern_msg->msg_iovlen);
 	if (tot_len >= 0)
 		kern_msg->msg_iov = kern_iov;
@@ -116,20 +116,20 @@ int verify_compat_iovec(struct msghdr *k
 
 #define CMSG_COMPAT_FIRSTHDR(msg)			\
 	(((msg)->msg_controllen) >= sizeof(struct compat_cmsghdr) ?	\
-	 (struct compat_cmsghdr __user *)((msg)->msg_control) :		\
+	 (struct compat_cmsghdr __force_user *)((msg)->msg_control) :		\
 	 (struct compat_cmsghdr __user *)NULL)
 
 #define CMSG_COMPAT_OK(ucmlen, ucmsg, mhdr) \
 	((ucmlen) >= sizeof(struct compat_cmsghdr) && \
 	 (ucmlen) <= (unsigned long) \
 	 ((mhdr)->msg_controllen - \
-	  ((char *)(ucmsg) - (char *)(mhdr)->msg_control)))
+	  ((char __force_kernel *)(ucmsg) - (char *)(mhdr)->msg_control)))
 
 static inline struct compat_cmsghdr __user *cmsg_compat_nxthdr(struct msghdr *msg,
 		struct compat_cmsghdr __user *cmsg, int cmsg_len)
 {
 	char __user *ptr = (char __user *)cmsg + CMSG_COMPAT_ALIGN(cmsg_len);
-	if ((unsigned long)(ptr + 1 - (char __user *)msg->msg_control) >
+	if ((unsigned long)(ptr + 1 - (char __force_user *)msg->msg_control) >
 			msg->msg_controllen)
 		return NULL;
 	return (struct compat_cmsghdr __user *)ptr;
@@ -221,7 +221,7 @@ int put_cmsg_compat(struct msghdr *kmsg,
 {
 	struct compat_timeval ctv;
 	struct compat_timespec cts[3];
-	struct compat_cmsghdr __user *cm = (struct compat_cmsghdr __user *) kmsg->msg_control;
+	struct compat_cmsghdr __user *cm = (struct compat_cmsghdr __force_user *) kmsg->msg_control;
 	struct compat_cmsghdr cmhdr;
 	int cmlen;
 
@@ -273,7 +273,7 @@ int put_cmsg_compat(struct msghdr *kmsg,
 
 void scm_detach_fds_compat(struct msghdr *kmsg, struct scm_cookie *scm)
 {
-	struct compat_cmsghdr __user *cm = (struct compat_cmsghdr __user *) kmsg->msg_control;
+	struct compat_cmsghdr __user *cm = (struct compat_cmsghdr __force_user *) kmsg->msg_control;
 	int fdmax = (kmsg->msg_controllen - sizeof(struct compat_cmsghdr)) / sizeof(int);
 	int fdnum = scm->fp->count;
 	struct file **fp = scm->fp->fp;
@@ -370,7 +370,7 @@ static int do_set_sock_timeout(struct so
 		return -EFAULT;
 	old_fs = get_fs();
 	set_fs(KERNEL_DS);
-	err = sock_setsockopt(sock, level, optname, (char *)&ktime, sizeof(ktime));
+	err = sock_setsockopt(sock, level, optname, (char __force_user *)&ktime, sizeof(ktime));
 	set_fs(old_fs);
 
 	return err;
@@ -431,7 +431,7 @@ static int do_get_sock_timeout(struct so
 	len = sizeof(ktime);
 	old_fs = get_fs();
 	set_fs(KERNEL_DS);
-	err = sock_getsockopt(sock, level, optname, (char *) &ktime, &len);
+	err = sock_getsockopt(sock, level, optname, (char __force_user *) &ktime, (int __force_user *)&len);
 	set_fs(old_fs);
 
 	if (!err) {
@@ -566,7 +566,7 @@ int compat_mc_setsockopt(struct sock *so
 	case MCAST_JOIN_GROUP:
 	case MCAST_LEAVE_GROUP:
 	{
-		struct compat_group_req __user *gr32 = (void *)optval;
+		struct compat_group_req __user *gr32 = (void __user *)optval;
 		struct group_req __user *kgr =
 			compat_alloc_user_space(sizeof(struct group_req));
 		u32 interface;
@@ -587,7 +587,7 @@ int compat_mc_setsockopt(struct sock *so
 	case MCAST_BLOCK_SOURCE:
 	case MCAST_UNBLOCK_SOURCE:
 	{
-		struct compat_group_source_req __user *gsr32 = (void *)optval;
+		struct compat_group_source_req __user *gsr32 = (void __user *)optval;
 		struct group_source_req __user *kgsr = compat_alloc_user_space(
 			sizeof(struct group_source_req));
 		u32 interface;
@@ -608,7 +608,7 @@ int compat_mc_setsockopt(struct sock *so
 	}
 	case MCAST_MSFILTER:
 	{
-		struct compat_group_filter __user *gf32 = (void *)optval;
+		struct compat_group_filter __user *gf32 = (void __user *)optval;
 		struct group_filter __user *kgf;
 		u32 interface, fmode, numsrc;
 
@@ -646,7 +646,7 @@ int compat_mc_getsockopt(struct sock *so
 	char __user *optval, int __user *optlen,
 	int (*getsockopt)(struct sock *, int, int, char __user *, int __user *))
 {
-	struct compat_group_filter __user *gf32 = (void *)optval;
+	struct compat_group_filter __user *gf32 = (void __user *)optval;
 	struct group_filter __user *kgf;
 	int __user	*koptlen;
 	u32 interface, fmode, numsrc;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/core/datagram.c linux-3.3.8-pax/net/core/datagram.c
--- linux-3.3.8/net/core/datagram.c	2012-01-08 19:48:29.959470826 +0100
+++ linux-3.3.8-pax/net/core/datagram.c	2012-03-19 10:43:44.680034615 +0100
@@ -285,7 +285,7 @@ int skb_kill_datagram(struct sock *sk, s
 	}
 
 	kfree_skb(skb);
-	atomic_inc(&sk->sk_drops);
+	atomic_inc_unchecked(&sk->sk_drops);
 	sk_mem_reclaim_partial(sk);
 
 	return err;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/core/dev.c linux-3.3.8-pax/net/core/dev.c
--- linux-3.3.8/net/core/dev.c	2012-05-12 22:26:33.500957180 +0200
+++ linux-3.3.8-pax/net/core/dev.c	2012-05-12 22:26:42.688957336 +0200
@@ -1605,7 +1605,7 @@ int dev_forward_skb(struct net_device *d
 {
 	if (skb_shinfo(skb)->tx_flags & SKBTX_DEV_ZEROCOPY) {
 		if (skb_copy_ubufs(skb, GFP_ATOMIC)) {
-			atomic_long_inc(&dev->rx_dropped);
+			atomic_long_inc_unchecked(&dev->rx_dropped);
 			kfree_skb(skb);
 			return NET_RX_DROP;
 		}
@@ -1615,7 +1615,7 @@ int dev_forward_skb(struct net_device *d
 	nf_reset(skb);
 
 	if (unlikely(!is_skb_forwardable(dev, skb))) {
-		atomic_long_inc(&dev->rx_dropped);
+		atomic_long_inc_unchecked(&dev->rx_dropped);
 		kfree_skb(skb);
 		return NET_RX_DROP;
 	}
@@ -2077,7 +2077,7 @@ static int illegal_highdma(struct net_de
 
 struct dev_gso_cb {
 	void (*destructor)(struct sk_buff *skb);
-};
+} __no_const;
 
 #define DEV_GSO_CB(skb) ((struct dev_gso_cb *)(skb)->cb)
 
@@ -2933,7 +2933,7 @@ enqueue:
 
 	local_irq_restore(flags);
 
-	atomic_long_inc(&skb->dev->rx_dropped);
+	atomic_long_inc_unchecked(&skb->dev->rx_dropped);
 	kfree_skb(skb);
 	return NET_RX_DROP;
 }
@@ -3005,7 +3005,7 @@ int netif_rx_ni(struct sk_buff *skb)
 }
 EXPORT_SYMBOL(netif_rx_ni);
 
-static void net_tx_action(struct softirq_action *h)
+static void net_tx_action(void)
 {
 	struct softnet_data *sd = &__get_cpu_var(softnet_data);
 
@@ -3293,7 +3293,7 @@ ncls:
 	if (pt_prev) {
 		ret = pt_prev->func(skb, skb->dev, pt_prev, orig_dev);
 	} else {
-		atomic_long_inc(&skb->dev->rx_dropped);
+		atomic_long_inc_unchecked(&skb->dev->rx_dropped);
 		kfree_skb(skb);
 		/* Jamal, now you will not able to escape explaining
 		 * me how you were going to use this. :-)
@@ -3853,7 +3853,7 @@ void netif_napi_del(struct napi_struct *
 }
 EXPORT_SYMBOL(netif_napi_del);
 
-static void net_rx_action(struct softirq_action *h)
+static void net_rx_action(void)
 {
 	struct softnet_data *sd = &__get_cpu_var(softnet_data);
 	unsigned long time_limit = jiffies + 2;
@@ -5878,7 +5878,7 @@ struct rtnl_link_stats64 *dev_get_stats(
 	} else {
 		netdev_stats_to_stats64(storage, &dev->stats);
 	}
-	storage->rx_dropped += atomic_long_read(&dev->rx_dropped);
+	storage->rx_dropped += atomic_long_read_unchecked(&dev->rx_dropped);
 	return storage;
 }
 EXPORT_SYMBOL(dev_get_stats);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/core/flow.c linux-3.3.8-pax/net/core/flow.c
--- linux-3.3.8/net/core/flow.c	2012-01-08 19:48:29.983470824 +0100
+++ linux-3.3.8-pax/net/core/flow.c	2012-03-19 10:43:44.684034615 +0100
@@ -61,7 +61,7 @@ struct flow_cache {
 	struct timer_list		rnd_timer;
 };
 
-atomic_t flow_cache_genid = ATOMIC_INIT(0);
+atomic_unchecked_t flow_cache_genid = ATOMIC_INIT(0);
 EXPORT_SYMBOL(flow_cache_genid);
 static struct flow_cache flow_cache_global;
 static struct kmem_cache *flow_cachep __read_mostly;
@@ -86,7 +86,7 @@ static void flow_cache_new_hashrnd(unsig
 
 static int flow_entry_valid(struct flow_cache_entry *fle)
 {
-	if (atomic_read(&flow_cache_genid) != fle->genid)
+	if (atomic_read_unchecked(&flow_cache_genid) != fle->genid)
 		return 0;
 	if (fle->object && !fle->object->ops->check(fle->object))
 		return 0;
@@ -259,7 +259,7 @@ flow_cache_lookup(struct net *net, const
 			hlist_add_head(&fle->u.hlist, &fcp->hash_table[hash]);
 			fcp->hash_count++;
 		}
-	} else if (likely(fle->genid == atomic_read(&flow_cache_genid))) {
+	} else if (likely(fle->genid == atomic_read_unchecked(&flow_cache_genid))) {
 		flo = fle->object;
 		if (!flo)
 			goto ret_object;
@@ -280,7 +280,7 @@ nocache:
 	}
 	flo = resolver(net, key, family, dir, flo, ctx);
 	if (fle) {
-		fle->genid = atomic_read(&flow_cache_genid);
+		fle->genid = atomic_read_unchecked(&flow_cache_genid);
 		if (!IS_ERR(flo))
 			fle->object = flo;
 		else
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/core/iovec.c linux-3.3.8-pax/net/core/iovec.c
--- linux-3.3.8/net/core/iovec.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/net/core/iovec.c	2012-03-19 10:43:44.684034615 +0100
@@ -42,7 +42,7 @@ int verify_iovec(struct msghdr *m, struc
 	if (m->msg_namelen) {
 		if (mode == VERIFY_READ) {
 			void __user *namep;
-			namep = (void __user __force *) m->msg_name;
+			namep = (void __force_user *) m->msg_name;
 			err = move_addr_to_kernel(namep, m->msg_namelen,
 						  address);
 			if (err < 0)
@@ -54,7 +54,7 @@ int verify_iovec(struct msghdr *m, struc
 	}
 
 	size = m->msg_iovlen * sizeof(struct iovec);
-	if (copy_from_user(iov, (void __user __force *) m->msg_iov, size))
+	if (copy_from_user(iov, (void __force_user *) m->msg_iov, size))
 		return -EFAULT;
 
 	m->msg_iov = iov;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/core/rtnetlink.c linux-3.3.8-pax/net/core/rtnetlink.c
--- linux-3.3.8/net/core/rtnetlink.c	2012-04-03 22:02:50.518110034 +0200
+++ linux-3.3.8-pax/net/core/rtnetlink.c	2012-04-03 22:03:07.106110932 +0200
@@ -57,7 +57,7 @@ struct rtnl_link {
 	rtnl_doit_func		doit;
 	rtnl_dumpit_func	dumpit;
 	rtnl_calcit_func 	calcit;
-};
+} __no_const;
 
 static DEFINE_MUTEX(rtnl_mutex);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/core/scm.c linux-3.3.8-pax/net/core/scm.c
--- linux-3.3.8/net/core/scm.c	2012-01-08 19:48:30.063470820 +0100
+++ linux-3.3.8-pax/net/core/scm.c	2012-03-19 10:43:44.688034614 +0100
@@ -220,7 +220,7 @@ EXPORT_SYMBOL(__scm_send);
 int put_cmsg(struct msghdr * msg, int level, int type, int len, void *data)
 {
 	struct cmsghdr __user *cm
-		= (__force struct cmsghdr __user *)msg->msg_control;
+		= (struct cmsghdr __force_user *)msg->msg_control;
 	struct cmsghdr cmhdr;
 	int cmlen = CMSG_LEN(len);
 	int err;
@@ -243,7 +243,7 @@ int put_cmsg(struct msghdr * msg, int le
 	err = -EFAULT;
 	if (copy_to_user(cm, &cmhdr, sizeof cmhdr))
 		goto out;
-	if (copy_to_user(CMSG_DATA(cm), data, cmlen - sizeof(struct cmsghdr)))
+	if (copy_to_user((void __force_user *)CMSG_DATA((void __force_kernel *)cm), data, cmlen - sizeof(struct cmsghdr)))
 		goto out;
 	cmlen = CMSG_SPACE(len);
 	if (msg->msg_controllen < cmlen)
@@ -259,7 +259,7 @@ EXPORT_SYMBOL(put_cmsg);
 void scm_detach_fds(struct msghdr *msg, struct scm_cookie *scm)
 {
 	struct cmsghdr __user *cm
-		= (__force struct cmsghdr __user*)msg->msg_control;
+		= (struct cmsghdr __force_user *)msg->msg_control;
 
 	int fdmax = 0;
 	int fdnum = scm->fp->count;
@@ -279,7 +279,7 @@ void scm_detach_fds(struct msghdr *msg,
 	if (fdnum < fdmax)
 		fdmax = fdnum;
 
-	for (i=0, cmfptr=(__force int __user *)CMSG_DATA(cm); i<fdmax;
+	for (i=0, cmfptr=(int __force_user *)CMSG_DATA((void __force_kernel *)cm); i<fdmax;
 	     i++, cmfptr++)
 	{
 		int new_fd;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/core/sock.c linux-3.3.8-pax/net/core/sock.c
--- linux-3.3.8/net/core/sock.c	2012-03-19 10:39:13.444049096 +0100
+++ linux-3.3.8-pax/net/core/sock.c	2012-03-19 10:43:44.688034614 +0100
@@ -341,7 +341,7 @@ int sock_queue_rcv_skb(struct sock *sk,
 	struct sk_buff_head *list = &sk->sk_receive_queue;
 
 	if (atomic_read(&sk->sk_rmem_alloc) >= sk->sk_rcvbuf) {
-		atomic_inc(&sk->sk_drops);
+		atomic_inc_unchecked(&sk->sk_drops);
 		trace_sock_rcvqueue_full(sk, skb);
 		return -ENOMEM;
 	}
@@ -351,7 +351,7 @@ int sock_queue_rcv_skb(struct sock *sk,
 		return err;
 
 	if (!sk_rmem_schedule(sk, skb->truesize)) {
-		atomic_inc(&sk->sk_drops);
+		atomic_inc_unchecked(&sk->sk_drops);
 		return -ENOBUFS;
 	}
 
@@ -371,7 +371,7 @@ int sock_queue_rcv_skb(struct sock *sk,
 	skb_dst_force(skb);
 
 	spin_lock_irqsave(&list->lock, flags);
-	skb->dropcount = atomic_read(&sk->sk_drops);
+	skb->dropcount = atomic_read_unchecked(&sk->sk_drops);
 	__skb_queue_tail(list, skb);
 	spin_unlock_irqrestore(&list->lock, flags);
 
@@ -391,7 +391,7 @@ int sk_receive_skb(struct sock *sk, stru
 	skb->dev = NULL;
 
 	if (sk_rcvqueues_full(sk, skb)) {
-		atomic_inc(&sk->sk_drops);
+		atomic_inc_unchecked(&sk->sk_drops);
 		goto discard_and_relse;
 	}
 	if (nested)
@@ -409,7 +409,7 @@ int sk_receive_skb(struct sock *sk, stru
 		mutex_release(&sk->sk_lock.dep_map, 1, _RET_IP_);
 	} else if (sk_add_backlog(sk, skb)) {
 		bh_unlock_sock(sk);
-		atomic_inc(&sk->sk_drops);
+		atomic_inc_unchecked(&sk->sk_drops);
 		goto discard_and_relse;
 	}
 
@@ -987,7 +987,7 @@ int sock_getsockopt(struct socket *sock,
 			return -ENOTCONN;
 		if (lv < len)
 			return -EINVAL;
-		if (copy_to_user(optval, address, len))
+		if (len > sizeof(address) || copy_to_user(optval, address, len))
 			return -EFAULT;
 		goto lenout;
 	}
@@ -1024,7 +1024,7 @@ int sock_getsockopt(struct socket *sock,
 
 	if (len > lv)
 		len = lv;
-	if (copy_to_user(optval, &v, len))
+	if (len > sizeof(v) || copy_to_user(optval, &v, len))
 		return -EFAULT;
 lenout:
 	if (put_user(len, optlen))
@@ -2108,7 +2108,7 @@ void sock_init_data(struct socket *sock,
 	 */
 	smp_wmb();
 	atomic_set(&sk->sk_refcnt, 1);
-	atomic_set(&sk->sk_drops, 0);
+	atomic_set_unchecked(&sk->sk_drops, 0);
 }
 EXPORT_SYMBOL(sock_init_data);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/decnet/sysctl_net_decnet.c linux-3.3.8-pax/net/decnet/sysctl_net_decnet.c
--- linux-3.3.8/net/decnet/sysctl_net_decnet.c	2011-10-24 12:48:42.523090905 +0200
+++ linux-3.3.8-pax/net/decnet/sysctl_net_decnet.c	2012-03-19 10:43:44.688034614 +0100
@@ -174,7 +174,7 @@ static int dn_node_address_handler(ctl_t
 
 	if (len > *lenp) len = *lenp;
 
-	if (copy_to_user(buffer, addr, len))
+	if (len > sizeof addr || copy_to_user(buffer, addr, len))
 		return -EFAULT;
 
 	*lenp = len;
@@ -237,7 +237,7 @@ static int dn_def_dev_handler(ctl_table
 
 	if (len > *lenp) len = *lenp;
 
-	if (copy_to_user(buffer, devname, len))
+	if (len > sizeof devname || copy_to_user(buffer, devname, len))
 		return -EFAULT;
 
 	*lenp = len;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/ipv4/fib_frontend.c linux-3.3.8-pax/net/ipv4/fib_frontend.c
--- linux-3.3.8/net/ipv4/fib_frontend.c	2011-10-24 12:48:42.551090903 +0200
+++ linux-3.3.8-pax/net/ipv4/fib_frontend.c	2012-03-19 10:43:44.692034614 +0100
@@ -970,12 +970,12 @@ static int fib_inetaddr_event(struct not
 #ifdef CONFIG_IP_ROUTE_MULTIPATH
 		fib_sync_up(dev);
 #endif
-		atomic_inc(&net->ipv4.dev_addr_genid);
+		atomic_inc_unchecked(&net->ipv4.dev_addr_genid);
 		rt_cache_flush(dev_net(dev), -1);
 		break;
 	case NETDEV_DOWN:
 		fib_del_ifaddr(ifa, NULL);
-		atomic_inc(&net->ipv4.dev_addr_genid);
+		atomic_inc_unchecked(&net->ipv4.dev_addr_genid);
 		if (ifa->ifa_dev->ifa_list == NULL) {
 			/* Last address was deleted from this interface.
 			 * Disable IP.
@@ -1011,7 +1011,7 @@ static int fib_netdev_event(struct notif
 #ifdef CONFIG_IP_ROUTE_MULTIPATH
 		fib_sync_up(dev);
 #endif
-		atomic_inc(&net->ipv4.dev_addr_genid);
+		atomic_inc_unchecked(&net->ipv4.dev_addr_genid);
 		rt_cache_flush(dev_net(dev), -1);
 		break;
 	case NETDEV_DOWN:
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/ipv4/fib_semantics.c linux-3.3.8-pax/net/ipv4/fib_semantics.c
--- linux-3.3.8/net/ipv4/fib_semantics.c	2011-10-24 12:48:42.555090903 +0200
+++ linux-3.3.8-pax/net/ipv4/fib_semantics.c	2012-03-19 10:43:44.692034614 +0100
@@ -699,7 +699,7 @@ __be32 fib_info_update_nh_saddr(struct n
 	nh->nh_saddr = inet_select_addr(nh->nh_dev,
 					nh->nh_gw,
 					nh->nh_parent->fib_scope);
-	nh->nh_saddr_genid = atomic_read(&net->ipv4.dev_addr_genid);
+	nh->nh_saddr_genid = atomic_read_unchecked(&net->ipv4.dev_addr_genid);
 
 	return nh->nh_saddr;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/ipv4/inetpeer.c linux-3.3.8-pax/net/ipv4/inetpeer.c
--- linux-3.3.8/net/ipv4/inetpeer.c	2012-03-19 10:39:13.620049077 +0100
+++ linux-3.3.8-pax/net/ipv4/inetpeer.c	2012-03-19 10:43:44.692034614 +0100
@@ -487,8 +487,8 @@ relookup:
 	if (p) {
 		p->daddr = *daddr;
 		atomic_set(&p->refcnt, 1);
-		atomic_set(&p->rid, 0);
-		atomic_set(&p->ip_id_count,
+		atomic_set_unchecked(&p->rid, 0);
+		atomic_set_unchecked(&p->ip_id_count,
 				(daddr->family == AF_INET) ?
 					secure_ip_id(daddr->addr.a4) :
 					secure_ipv6_id(daddr->addr.a6));
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/ipv4/ipconfig.c linux-3.3.8-pax/net/ipv4/ipconfig.c
--- linux-3.3.8/net/ipv4/ipconfig.c	2012-03-19 10:39:13.628049099 +0100
+++ linux-3.3.8-pax/net/ipv4/ipconfig.c	2012-03-19 10:43:44.696034614 +0100
@@ -318,7 +318,7 @@ static int __init ic_devinet_ioctl(unsig
 
 	mm_segment_t oldfs = get_fs();
 	set_fs(get_ds());
-	res = devinet_ioctl(&init_net, cmd, (struct ifreq __user *) arg);
+	res = devinet_ioctl(&init_net, cmd, (struct ifreq __force_user *) arg);
 	set_fs(oldfs);
 	return res;
 }
@@ -329,7 +329,7 @@ static int __init ic_dev_ioctl(unsigned
 
 	mm_segment_t oldfs = get_fs();
 	set_fs(get_ds());
-	res = dev_ioctl(&init_net, cmd, (struct ifreq __user *) arg);
+	res = dev_ioctl(&init_net, cmd, (struct ifreq __force_user *) arg);
 	set_fs(oldfs);
 	return res;
 }
@@ -340,7 +340,7 @@ static int __init ic_route_ioctl(unsigne
 
 	mm_segment_t oldfs = get_fs();
 	set_fs(get_ds());
-	res = ip_rt_ioctl(&init_net, cmd, (void __user *) arg);
+	res = ip_rt_ioctl(&init_net, cmd, (void __force_user *) arg);
 	set_fs(oldfs);
 	return res;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/ipv4/ip_fragment.c linux-3.3.8-pax/net/ipv4/ip_fragment.c
--- linux-3.3.8/net/ipv4/ip_fragment.c	2012-03-19 10:39:13.620049077 +0100
+++ linux-3.3.8-pax/net/ipv4/ip_fragment.c	2012-03-19 10:43:44.696034614 +0100
@@ -316,7 +316,7 @@ static inline int ip_frag_too_far(struct
 		return 0;
 
 	start = qp->rid;
-	end = atomic_inc_return(&peer->rid);
+	end = atomic_inc_return_unchecked(&peer->rid);
 	qp->rid = end;
 
 	rc = qp->q.fragments && (end - start) > max;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/ipv4/ip_sockglue.c linux-3.3.8-pax/net/ipv4/ip_sockglue.c
--- linux-3.3.8/net/ipv4/ip_sockglue.c	2012-03-19 10:39:13.628049099 +0100
+++ linux-3.3.8-pax/net/ipv4/ip_sockglue.c	2012-03-19 10:43:44.696034614 +0100
@@ -1240,7 +1240,7 @@ static int do_ip_getsockopt(struct sock
 		if (sk->sk_type != SOCK_STREAM)
 			return -ENOPROTOOPT;
 
-		msg.msg_control = optval;
+		msg.msg_control = (void __force_kernel *)optval;
 		msg.msg_controllen = len;
 		msg.msg_flags = flags;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/ipv4/ping.c linux-3.3.8-pax/net/ipv4/ping.c
--- linux-3.3.8/net/ipv4/ping.c	2012-03-19 10:39:13.676049087 +0100
+++ linux-3.3.8-pax/net/ipv4/ping.c	2012-03-19 10:43:44.700034614 +0100
@@ -838,7 +838,7 @@ static void ping_format_sock(struct sock
 		sk_rmem_alloc_get(sp),
 		0, 0L, 0, sock_i_uid(sp), 0, sock_i_ino(sp),
 		atomic_read(&sp->sk_refcnt), sp,
-		atomic_read(&sp->sk_drops), len);
+		atomic_read_unchecked(&sp->sk_drops), len);
 }
 
 static int ping_seq_show(struct seq_file *seq, void *v)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/ipv4/raw.c linux-3.3.8-pax/net/ipv4/raw.c
--- linux-3.3.8/net/ipv4/raw.c	2012-03-19 10:39:13.680049082 +0100
+++ linux-3.3.8-pax/net/ipv4/raw.c	2012-03-19 10:43:44.700034614 +0100
@@ -304,7 +304,7 @@ static int raw_rcv_skb(struct sock * sk,
 int raw_rcv(struct sock *sk, struct sk_buff *skb)
 {
 	if (!xfrm4_policy_check(sk, XFRM_POLICY_IN, skb)) {
-		atomic_inc(&sk->sk_drops);
+		atomic_inc_unchecked(&sk->sk_drops);
 		kfree_skb(skb);
 		return NET_RX_DROP;
 	}
@@ -742,16 +742,20 @@ static int raw_init(struct sock *sk)
 
 static int raw_seticmpfilter(struct sock *sk, char __user *optval, int optlen)
 {
+	struct icmp_filter filter;
+
 	if (optlen > sizeof(struct icmp_filter))
 		optlen = sizeof(struct icmp_filter);
-	if (copy_from_user(&raw_sk(sk)->filter, optval, optlen))
+	if (copy_from_user(&filter, optval, optlen))
 		return -EFAULT;
+	raw_sk(sk)->filter = filter;
 	return 0;
 }
 
 static int raw_geticmpfilter(struct sock *sk, char __user *optval, int __user *optlen)
 {
 	int len, ret = -EFAULT;
+	struct icmp_filter filter;
 
 	if (get_user(len, optlen))
 		goto out;
@@ -761,8 +765,8 @@ static int raw_geticmpfilter(struct sock
 	if (len > sizeof(struct icmp_filter))
 		len = sizeof(struct icmp_filter);
 	ret = -EFAULT;
-	if (put_user(len, optlen) ||
-	    copy_to_user(optval, &raw_sk(sk)->filter, len))
+	filter = raw_sk(sk)->filter;
+	if (put_user(len, optlen) || len > sizeof filter || copy_to_user(optval, &filter, len))
 		goto out;
 	ret = 0;
 out:	return ret;
@@ -990,7 +994,7 @@ static void raw_sock_seq_show(struct seq
 		sk_wmem_alloc_get(sp),
 		sk_rmem_alloc_get(sp),
 		0, 0L, 0, sock_i_uid(sp), 0, sock_i_ino(sp),
-		atomic_read(&sp->sk_refcnt), sp, atomic_read(&sp->sk_drops));
+		atomic_read(&sp->sk_refcnt), sp, atomic_read_unchecked(&sp->sk_drops));
 }
 
 static int raw_seq_show(struct seq_file *seq, void *v)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/ipv4/route.c linux-3.3.8-pax/net/ipv4/route.c
--- linux-3.3.8/net/ipv4/route.c	2012-03-19 10:39:13.680049082 +0100
+++ linux-3.3.8-pax/net/ipv4/route.c	2012-03-19 10:43:44.708034613 +0100
@@ -311,7 +311,7 @@ static inline unsigned int rt_hash(__be3
 
 static inline int rt_genid(struct net *net)
 {
-	return atomic_read(&net->ipv4.rt_genid);
+	return atomic_read_unchecked(&net->ipv4.rt_genid);
 }
 
 #ifdef CONFIG_PROC_FS
@@ -935,7 +935,7 @@ static void rt_cache_invalidate(struct n
 	unsigned char shuffle;
 
 	get_random_bytes(&shuffle, sizeof(shuffle));
-	atomic_add(shuffle + 1U, &net->ipv4.rt_genid);
+	atomic_add_unchecked(shuffle + 1U, &net->ipv4.rt_genid);
 	inetpeer_invalidate_tree(AF_INET);
 }
 
@@ -3010,7 +3010,7 @@ static int rt_fill_info(struct net *net,
 	error = rt->dst.error;
 	if (peer) {
 		inet_peer_refcheck(rt->peer);
-		id = atomic_read(&peer->ip_id_count) & 0xffff;
+		id = atomic_read_unchecked(&peer->ip_id_count) & 0xffff;
 		if (peer->tcp_ts_stamp) {
 			ts = peer->tcp_ts;
 			tsage = get_seconds() - peer->tcp_ts_stamp;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/ipv4/tcp_probe.c linux-3.3.8-pax/net/ipv4/tcp_probe.c
--- linux-3.3.8/net/ipv4/tcp_probe.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/net/ipv4/tcp_probe.c	2012-03-19 10:43:44.708034613 +0100
@@ -202,7 +202,7 @@ static ssize_t tcpprobe_read(struct file
 		if (cnt + width >= len)
 			break;
 
-		if (copy_to_user(buf + cnt, tbuf, width))
+		if (width > sizeof tbuf || copy_to_user(buf + cnt, tbuf, width))
 			return -EFAULT;
 		cnt += width;
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/ipv4/udp.c linux-3.3.8-pax/net/ipv4/udp.c
--- linux-3.3.8/net/ipv4/udp.c	2012-03-19 10:39:13.704049086 +0100
+++ linux-3.3.8-pax/net/ipv4/udp.c	2012-03-19 10:43:44.708034613 +0100
@@ -1100,7 +1100,7 @@ static unsigned int first_packet_length(
 		udp_lib_checksum_complete(skb)) {
 		UDP_INC_STATS_BH(sock_net(sk), UDP_MIB_INERRORS,
 				 IS_UDPLITE(sk));
-		atomic_inc(&sk->sk_drops);
+		atomic_inc_unchecked(&sk->sk_drops);
 		__skb_unlink(skb, rcvq);
 		__skb_queue_tail(&list_kill, skb);
 	}
@@ -1489,7 +1489,7 @@ int udp_queue_rcv_skb(struct sock *sk, s
 
 drop:
 	UDP_INC_STATS_BH(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
-	atomic_inc(&sk->sk_drops);
+	atomic_inc_unchecked(&sk->sk_drops);
 	kfree_skb(skb);
 	return -1;
 }
@@ -1508,7 +1508,7 @@ static void flush_stack(struct sock **st
 			skb1 = (i == final) ? skb : skb_clone(skb, GFP_ATOMIC);
 
 		if (!skb1) {
-			atomic_inc(&sk->sk_drops);
+			atomic_inc_unchecked(&sk->sk_drops);
 			UDP_INC_STATS_BH(sock_net(sk), UDP_MIB_RCVBUFERRORS,
 					 IS_UDPLITE(sk));
 			UDP_INC_STATS_BH(sock_net(sk), UDP_MIB_INERRORS,
@@ -2101,7 +2101,7 @@ static void udp4_format_sock(struct sock
 		sk_rmem_alloc_get(sp),
 		0, 0L, 0, sock_i_uid(sp), 0, sock_i_ino(sp),
 		atomic_read(&sp->sk_refcnt), sp,
-		atomic_read(&sp->sk_drops), len);
+		atomic_read_unchecked(&sp->sk_drops), len);
 }
 
 int udp4_seq_show(struct seq_file *seq, void *v)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/ipv6/addrconf.c linux-3.3.8-pax/net/ipv6/addrconf.c
--- linux-3.3.8/net/ipv6/addrconf.c	2012-03-19 10:39:13.708049084 +0100
+++ linux-3.3.8-pax/net/ipv6/addrconf.c	2012-03-19 10:43:44.708034614 +0100
@@ -2145,7 +2145,7 @@ int addrconf_set_dstaddr(struct net *net
 		p.iph.ihl = 5;
 		p.iph.protocol = IPPROTO_IPV6;
 		p.iph.ttl = 64;
-		ifr.ifr_ifru.ifru_data = (__force void __user *)&p;
+		ifr.ifr_ifru.ifru_data = (void __force_user *)&p;
 
 		if (ops->ndo_do_ioctl) {
 			mm_segment_t oldfs = get_fs();
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/ipv6/inet6_connection_sock.c linux-3.3.8-pax/net/ipv6/inet6_connection_sock.c
--- linux-3.3.8/net/ipv6/inet6_connection_sock.c	2012-03-19 10:39:13.720049080 +0100
+++ linux-3.3.8-pax/net/ipv6/inet6_connection_sock.c	2012-03-19 10:43:44.708034614 +0100
@@ -178,7 +178,7 @@ void __inet6_csk_dst_store(struct sock *
 #ifdef CONFIG_XFRM
 	{
 		struct rt6_info *rt = (struct rt6_info  *)dst;
-		rt->rt6i_flow_cache_genid = atomic_read(&flow_cache_genid);
+		rt->rt6i_flow_cache_genid = atomic_read_unchecked(&flow_cache_genid);
 	}
 #endif
 }
@@ -193,7 +193,7 @@ struct dst_entry *__inet6_csk_dst_check(
 #ifdef CONFIG_XFRM
 	if (dst) {
 		struct rt6_info *rt = (struct rt6_info *)dst;
-		if (rt->rt6i_flow_cache_genid != atomic_read(&flow_cache_genid)) {
+		if (rt->rt6i_flow_cache_genid != atomic_read_unchecked(&flow_cache_genid)) {
 			__sk_dst_reset(sk);
 			dst = NULL;
 		}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/ipv6/ipv6_sockglue.c linux-3.3.8-pax/net/ipv6/ipv6_sockglue.c
--- linux-3.3.8/net/ipv6/ipv6_sockglue.c	2012-03-19 10:39:13.728049081 +0100
+++ linux-3.3.8-pax/net/ipv6/ipv6_sockglue.c	2012-03-19 10:43:44.708034614 +0100
@@ -960,7 +960,7 @@ static int do_ipv6_getsockopt(struct soc
 		if (sk->sk_type != SOCK_STREAM)
 			return -ENOPROTOOPT;
 
-		msg.msg_control = optval;
+		msg.msg_control = (void __force_kernel *)optval;
 		msg.msg_controllen = len;
 		msg.msg_flags = flags;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/ipv6/raw.c linux-3.3.8-pax/net/ipv6/raw.c
--- linux-3.3.8/net/ipv6/raw.c	2012-03-19 10:39:13.768049080 +0100
+++ linux-3.3.8-pax/net/ipv6/raw.c	2012-03-19 10:43:44.712034613 +0100
@@ -377,7 +377,7 @@ static inline int rawv6_rcv_skb(struct s
 {
 	if ((raw6_sk(sk)->checksum || rcu_access_pointer(sk->sk_filter)) &&
 	    skb_checksum_complete(skb)) {
-		atomic_inc(&sk->sk_drops);
+		atomic_inc_unchecked(&sk->sk_drops);
 		kfree_skb(skb);
 		return NET_RX_DROP;
 	}
@@ -405,7 +405,7 @@ int rawv6_rcv(struct sock *sk, struct sk
 	struct raw6_sock *rp = raw6_sk(sk);
 
 	if (!xfrm6_policy_check(sk, XFRM_POLICY_IN, skb)) {
-		atomic_inc(&sk->sk_drops);
+		atomic_inc_unchecked(&sk->sk_drops);
 		kfree_skb(skb);
 		return NET_RX_DROP;
 	}
@@ -429,7 +429,7 @@ int rawv6_rcv(struct sock *sk, struct sk
 
 	if (inet->hdrincl) {
 		if (skb_checksum_complete(skb)) {
-			atomic_inc(&sk->sk_drops);
+			atomic_inc_unchecked(&sk->sk_drops);
 			kfree_skb(skb);
 			return NET_RX_DROP;
 		}
@@ -602,7 +602,7 @@ out:
 	return err;
 }
 
-static int rawv6_send_hdrinc(struct sock *sk, void *from, int length,
+static int rawv6_send_hdrinc(struct sock *sk, void *from, unsigned int length,
 			struct flowi6 *fl6, struct dst_entry **dstp,
 			unsigned int flags)
 {
@@ -912,12 +912,15 @@ do_confirm:
 static int rawv6_seticmpfilter(struct sock *sk, int level, int optname,
 			       char __user *optval, int optlen)
 {
+	struct icmp6_filter filter;
+
 	switch (optname) {
 	case ICMPV6_FILTER:
 		if (optlen > sizeof(struct icmp6_filter))
 			optlen = sizeof(struct icmp6_filter);
-		if (copy_from_user(&raw6_sk(sk)->filter, optval, optlen))
+		if (copy_from_user(&filter, optval, optlen))
 			return -EFAULT;
+		raw6_sk(sk)->filter = filter;
 		return 0;
 	default:
 		return -ENOPROTOOPT;
@@ -930,6 +933,7 @@ static int rawv6_geticmpfilter(struct so
 			       char __user *optval, int __user *optlen)
 {
 	int len;
+	struct icmp6_filter filter;
 
 	switch (optname) {
 	case ICMPV6_FILTER:
@@ -941,7 +945,8 @@ static int rawv6_geticmpfilter(struct so
 			len = sizeof(struct icmp6_filter);
 		if (put_user(len, optlen))
 			return -EFAULT;
-		if (copy_to_user(optval, &raw6_sk(sk)->filter, len))
+		filter = raw6_sk(sk)->filter;
+		if (len > sizeof filter || copy_to_user(optval, &filter, len))
 			return -EFAULT;
 		return 0;
 	default:
@@ -1248,7 +1253,7 @@ static void raw6_sock_seq_show(struct se
 		   0, 0L, 0,
 		   sock_i_uid(sp), 0,
 		   sock_i_ino(sp),
-		   atomic_read(&sp->sk_refcnt), sp, atomic_read(&sp->sk_drops));
+		   atomic_read(&sp->sk_refcnt), sp, atomic_read_unchecked(&sp->sk_drops));
 }
 
 static int raw6_seq_show(struct seq_file *seq, void *v)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/ipv6/udp.c linux-3.3.8-pax/net/ipv6/udp.c
--- linux-3.3.8/net/ipv6/udp.c	2012-03-19 10:39:13.776049079 +0100
+++ linux-3.3.8-pax/net/ipv6/udp.c	2012-03-19 10:43:44.712034613 +0100
@@ -551,7 +551,7 @@ int udpv6_queue_rcv_skb(struct sock * sk
 
 	return 0;
 drop:
-	atomic_inc(&sk->sk_drops);
+	atomic_inc_unchecked(&sk->sk_drops);
 drop_no_sk_drops_inc:
 	UDP6_INC_STATS_BH(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	kfree_skb(skb);
@@ -627,7 +627,7 @@ static void flush_stack(struct sock **st
 			continue;
 		}
 drop:
-		atomic_inc(&sk->sk_drops);
+		atomic_inc_unchecked(&sk->sk_drops);
 		UDP6_INC_STATS_BH(sock_net(sk),
 				UDP_MIB_RCVBUFERRORS, IS_UDPLITE(sk));
 		UDP6_INC_STATS_BH(sock_net(sk),
@@ -798,7 +798,7 @@ int __udp6_lib_rcv(struct sk_buff *skb,
 	if (!sock_owned_by_user(sk))
 		udpv6_queue_rcv_skb(sk, skb);
 	else if (sk_add_backlog(sk, skb)) {
-		atomic_inc(&sk->sk_drops);
+		atomic_inc_unchecked(&sk->sk_drops);
 		bh_unlock_sock(sk);
 		sock_put(sk);
 		goto discard;
@@ -1411,7 +1411,7 @@ static void udp6_sock_seq_show(struct se
 		   sock_i_uid(sp), 0,
 		   sock_i_ino(sp),
 		   atomic_read(&sp->sk_refcnt), sp,
-		   atomic_read(&sp->sk_drops));
+		   atomic_read_unchecked(&sp->sk_drops));
 }
 
 int udp6_seq_show(struct seq_file *seq, void *v)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/irda/ircomm/ircomm_tty.c linux-3.3.8-pax/net/irda/ircomm/ircomm_tty.c
--- linux-3.3.8/net/irda/ircomm/ircomm_tty.c	2012-01-08 19:48:30.543470794 +0100
+++ linux-3.3.8-pax/net/irda/ircomm/ircomm_tty.c	2012-03-19 10:43:44.712034613 +0100
@@ -282,16 +282,16 @@ static int ircomm_tty_block_til_ready(st
 	add_wait_queue(&self->open_wait, &wait);
 
 	IRDA_DEBUG(2, "%s(%d):block_til_ready before block on %s open_count=%d\n",
-	      __FILE__,__LINE__, tty->driver->name, self->open_count );
+	      __FILE__,__LINE__, tty->driver->name, local_read(&self->open_count) );
 
 	/* As far as I can see, we protect open_count - Jean II */
 	spin_lock_irqsave(&self->spinlock, flags);
 	if (!tty_hung_up_p(filp)) {
 		extra_count = 1;
-		self->open_count--;
+		local_dec(&self->open_count);
 	}
 	spin_unlock_irqrestore(&self->spinlock, flags);
-	self->blocked_open++;
+	local_inc(&self->blocked_open);
 
 	while (1) {
 		if (tty->termios->c_cflag & CBAUD) {
@@ -331,7 +331,7 @@ static int ircomm_tty_block_til_ready(st
 		}
 
 		IRDA_DEBUG(1, "%s(%d):block_til_ready blocking on %s open_count=%d\n",
-		      __FILE__,__LINE__, tty->driver->name, self->open_count );
+		      __FILE__,__LINE__, tty->driver->name, local_read(&self->open_count) );
 
 		schedule();
 	}
@@ -342,13 +342,13 @@ static int ircomm_tty_block_til_ready(st
 	if (extra_count) {
 		/* ++ is not atomic, so this should be protected - Jean II */
 		spin_lock_irqsave(&self->spinlock, flags);
-		self->open_count++;
+		local_inc(&self->open_count);
 		spin_unlock_irqrestore(&self->spinlock, flags);
 	}
-	self->blocked_open--;
+	local_dec(&self->blocked_open);
 
 	IRDA_DEBUG(1, "%s(%d):block_til_ready after blocking on %s open_count=%d\n",
-	      __FILE__,__LINE__, tty->driver->name, self->open_count);
+	      __FILE__,__LINE__, tty->driver->name, local_read(&self->open_count));
 
 	if (!retval)
 		self->flags |= ASYNC_NORMAL_ACTIVE;
@@ -417,14 +417,14 @@ static int ircomm_tty_open(struct tty_st
 	}
 	/* ++ is not atomic, so this should be protected - Jean II */
 	spin_lock_irqsave(&self->spinlock, flags);
-	self->open_count++;
+	local_inc(&self->open_count);
 
 	tty->driver_data = self;
 	self->tty = tty;
 	spin_unlock_irqrestore(&self->spinlock, flags);
 
 	IRDA_DEBUG(1, "%s(), %s%d, count = %d\n", __func__ , tty->driver->name,
-		   self->line, self->open_count);
+		   self->line, local_read(&self->open_count));
 
 	/* Not really used by us, but lets do it anyway */
 	self->tty->low_latency = (self->flags & ASYNC_LOW_LATENCY) ? 1 : 0;
@@ -510,7 +510,7 @@ static void ircomm_tty_close(struct tty_
 		return;
 	}
 
-	if ((tty->count == 1) && (self->open_count != 1)) {
+	if ((tty->count == 1) && (local_read(&self->open_count) != 1)) {
 		/*
 		 * Uh, oh.  tty->count is 1, which means that the tty
 		 * structure will be freed.  state->count should always
@@ -520,16 +520,16 @@ static void ircomm_tty_close(struct tty_
 		 */
 		IRDA_DEBUG(0, "%s(), bad serial port count; "
 			   "tty->count is 1, state->count is %d\n", __func__ ,
-			   self->open_count);
-		self->open_count = 1;
+			   local_read(&self->open_count));
+		local_set(&self->open_count, 1);
 	}
 
-	if (--self->open_count < 0) {
+	if (local_dec_return(&self->open_count) < 0) {
 		IRDA_ERROR("%s(), bad serial port count for ttys%d: %d\n",
-			   __func__, self->line, self->open_count);
-		self->open_count = 0;
+			   __func__, self->line, local_read(&self->open_count));
+		local_set(&self->open_count, 0);
 	}
-	if (self->open_count) {
+	if (local_read(&self->open_count)) {
 		spin_unlock_irqrestore(&self->spinlock, flags);
 
 		IRDA_DEBUG(0, "%s(), open count > 0\n", __func__ );
@@ -561,7 +561,7 @@ static void ircomm_tty_close(struct tty_
 	tty->closing = 0;
 	self->tty = NULL;
 
-	if (self->blocked_open) {
+	if (local_read(&self->blocked_open)) {
 		if (self->close_delay)
 			schedule_timeout_interruptible(self->close_delay);
 		wake_up_interruptible(&self->open_wait);
@@ -1013,7 +1013,7 @@ static void ircomm_tty_hangup(struct tty
 	spin_lock_irqsave(&self->spinlock, flags);
 	self->flags &= ~ASYNC_NORMAL_ACTIVE;
 	self->tty = NULL;
-	self->open_count = 0;
+	local_set(&self->open_count, 0);
 	spin_unlock_irqrestore(&self->spinlock, flags);
 
 	wake_up_interruptible(&self->open_wait);
@@ -1360,7 +1360,7 @@ static void ircomm_tty_line_info(struct
 	seq_putc(m, '\n');
 
 	seq_printf(m, "Role: %s\n", self->client ? "client" : "server");
-	seq_printf(m, "Open count: %d\n", self->open_count);
+	seq_printf(m, "Open count: %d\n", local_read(&self->open_count));
 	seq_printf(m, "Max data size: %d\n", self->max_data_size);
 	seq_printf(m, "Max header size: %d\n", self->max_header_size);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/iucv/af_iucv.c linux-3.3.8-pax/net/iucv/af_iucv.c
--- linux-3.3.8/net/iucv/af_iucv.c	2012-03-19 10:39:13.788049078 +0100
+++ linux-3.3.8-pax/net/iucv/af_iucv.c	2012-03-19 10:43:44.716034613 +0100
@@ -764,10 +764,10 @@ static int iucv_sock_autobind(struct soc
 
 	write_lock_bh(&iucv_sk_list.lock);
 
-	sprintf(name, "%08x", atomic_inc_return(&iucv_sk_list.autobind_name));
+	sprintf(name, "%08x", atomic_inc_return_unchecked(&iucv_sk_list.autobind_name));
 	while (__iucv_get_sock_by_name(name)) {
 		sprintf(name, "%08x",
-			atomic_inc_return(&iucv_sk_list.autobind_name));
+			atomic_inc_return_unchecked(&iucv_sk_list.autobind_name));
 	}
 
 	write_unlock_bh(&iucv_sk_list.lock);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/key/af_key.c linux-3.3.8-pax/net/key/af_key.c
--- linux-3.3.8/net/key/af_key.c	2012-03-19 10:39:13.788049078 +0100
+++ linux-3.3.8-pax/net/key/af_key.c	2012-03-19 10:43:44.724034613 +0100
@@ -3016,10 +3016,10 @@ static int pfkey_send_policy_notify(stru
 static u32 get_acqseq(void)
 {
 	u32 res;
-	static atomic_t acqseq;
+	static atomic_unchecked_t acqseq;
 
 	do {
-		res = atomic_inc_return(&acqseq);
+		res = atomic_inc_return_unchecked(&acqseq);
 	} while (!res);
 	return res;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/mac80211/ieee80211_i.h linux-3.3.8-pax/net/mac80211/ieee80211_i.h
--- linux-3.3.8/net/mac80211/ieee80211_i.h	2012-03-19 10:39:13.836049076 +0100
+++ linux-3.3.8-pax/net/mac80211/ieee80211_i.h	2012-03-19 10:43:44.732034611 +0100
@@ -28,6 +28,7 @@
 #include <net/ieee80211_radiotap.h>
 #include <net/cfg80211.h>
 #include <net/mac80211.h>
+#include <asm/local.h>
 #include "key.h"
 #include "sta_info.h"
 
@@ -781,7 +782,7 @@ struct ieee80211_local {
 	/* also used to protect ampdu_ac_queue and amdpu_ac_stop_refcnt */
 	spinlock_t queue_stop_reason_lock;
 
-	int open_count;
+	local_t open_count;
 	int monitors, cooked_mntrs;
 	/* number of interfaces with corresponding FIF_ flags */
 	int fif_fcsfail, fif_plcpfail, fif_control, fif_other_bss, fif_pspoll,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/mac80211/iface.c linux-3.3.8-pax/net/mac80211/iface.c
--- linux-3.3.8/net/mac80211/iface.c	2012-03-19 10:39:13.836049076 +0100
+++ linux-3.3.8-pax/net/mac80211/iface.c	2012-03-19 10:43:44.732034611 +0100
@@ -222,7 +222,7 @@ static int ieee80211_do_open(struct net_
 		break;
 	}
 
-	if (local->open_count == 0) {
+	if (local_read(&local->open_count) == 0) {
 		res = drv_start(local);
 		if (res)
 			goto err_del_bss;
@@ -246,7 +246,7 @@ static int ieee80211_do_open(struct net_
 		memcpy(dev->perm_addr, dev->dev_addr, ETH_ALEN);
 
 		if (!is_valid_ether_addr(dev->dev_addr)) {
-			if (!local->open_count)
+			if (!local_read(&local->open_count))
 				drv_stop(local);
 			return -EADDRNOTAVAIL;
 		}
@@ -347,7 +347,7 @@ static int ieee80211_do_open(struct net_
 	mutex_unlock(&local->mtx);
 
 	if (coming_up)
-		local->open_count++;
+		local_inc(&local->open_count);
 
 	if (hw_reconf_flags)
 		ieee80211_hw_config(local, hw_reconf_flags);
@@ -360,7 +360,7 @@ static int ieee80211_do_open(struct net_
  err_del_interface:
 	drv_remove_interface(local, sdata);
  err_stop:
-	if (!local->open_count)
+	if (!local_read(&local->open_count))
 		drv_stop(local);
  err_del_bss:
 	sdata->bss = NULL;
@@ -489,7 +489,7 @@ static void ieee80211_do_stop(struct iee
 	}
 
 	if (going_down)
-		local->open_count--;
+		local_dec(&local->open_count);
 
 	switch (sdata->vif.type) {
 	case NL80211_IFTYPE_AP_VLAN:
@@ -548,7 +548,7 @@ static void ieee80211_do_stop(struct iee
 
 	ieee80211_recalc_ps(local, -1);
 
-	if (local->open_count == 0) {
+	if (local_read(&local->open_count) == 0) {
 		if (local->ops->napi_poll)
 			napi_disable(&local->napi);
 		ieee80211_clear_tx_pending(local);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/mac80211/main.c linux-3.3.8-pax/net/mac80211/main.c
--- linux-3.3.8/net/mac80211/main.c	2012-03-19 10:39:13.840049076 +0100
+++ linux-3.3.8-pax/net/mac80211/main.c	2012-03-19 10:43:44.732034612 +0100
@@ -166,7 +166,7 @@ int ieee80211_hw_config(struct ieee80211
 		local->hw.conf.power_level = power;
 	}
 
-	if (changed && local->open_count) {
+	if (changed && local_read(&local->open_count)) {
 		ret = drv_config(local, changed);
 		/*
 		 * Goal:
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/mac80211/pm.c linux-3.3.8-pax/net/mac80211/pm.c
--- linux-3.3.8/net/mac80211/pm.c	2012-03-19 10:39:13.848049075 +0100
+++ linux-3.3.8-pax/net/mac80211/pm.c	2012-03-19 10:43:44.732034612 +0100
@@ -34,7 +34,7 @@ int __ieee80211_suspend(struct ieee80211
 	struct ieee80211_sub_if_data *sdata;
 	struct sta_info *sta;
 
-	if (!local->open_count)
+	if (!local_read(&local->open_count))
 		goto suspend;
 
 	ieee80211_scan_cancel(local);
@@ -72,7 +72,7 @@ int __ieee80211_suspend(struct ieee80211
 	cancel_work_sync(&local->dynamic_ps_enable_work);
 	del_timer_sync(&local->dynamic_ps_timer);
 
-	local->wowlan = wowlan && local->open_count;
+	local->wowlan = wowlan && local_read(&local->open_count);
 	if (local->wowlan) {
 		int err = drv_suspend(local, wowlan);
 		if (err < 0) {
@@ -129,7 +129,7 @@ int __ieee80211_suspend(struct ieee80211
 	}
 
 	/* stop hardware - this must stop RX */
-	if (local->open_count)
+	if (local_read(&local->open_count))
 		ieee80211_stop_device(local);
 
  suspend:
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/mac80211/rate.c linux-3.3.8-pax/net/mac80211/rate.c
--- linux-3.3.8/net/mac80211/rate.c	2012-03-19 10:39:13.848049075 +0100
+++ linux-3.3.8-pax/net/mac80211/rate.c	2012-03-19 10:43:44.732034612 +0100
@@ -401,7 +401,7 @@ int ieee80211_init_rate_ctrl_alg(struct
 
 	ASSERT_RTNL();
 
-	if (local->open_count)
+	if (local_read(&local->open_count))
 		return -EBUSY;
 
 	if (local->hw.flags & IEEE80211_HW_HAS_RATE_CONTROL) {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/mac80211/rc80211_pid_debugfs.c linux-3.3.8-pax/net/mac80211/rc80211_pid_debugfs.c
--- linux-3.3.8/net/mac80211/rc80211_pid_debugfs.c	2012-01-08 19:48:30.731470784 +0100
+++ linux-3.3.8-pax/net/mac80211/rc80211_pid_debugfs.c	2012-03-19 10:43:44.732034612 +0100
@@ -193,7 +193,7 @@ static ssize_t rate_control_pid_events_r
 
 	spin_unlock_irqrestore(&events->lock, status);
 
-	if (copy_to_user(buf, pb, p))
+	if (p > sizeof(pb) || copy_to_user(buf, pb, p))
 		return -EFAULT;
 
 	return p;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/mac80211/util.c linux-3.3.8-pax/net/mac80211/util.c
--- linux-3.3.8/net/mac80211/util.c	2012-03-19 10:39:13.868049074 +0100
+++ linux-3.3.8-pax/net/mac80211/util.c	2012-03-19 10:43:44.736034613 +0100
@@ -1143,7 +1143,7 @@ int ieee80211_reconfig(struct ieee80211_
 	}
 #endif
 	/* everything else happens only if HW was up & running */
-	if (!local->open_count)
+	if (!local_read(&local->open_count))
 		goto wake_up;
 
 	/*
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/netfilter/ipvs/ip_vs_conn.c linux-3.3.8-pax/net/netfilter/ipvs/ip_vs_conn.c
--- linux-3.3.8/net/netfilter/ipvs/ip_vs_conn.c	2012-01-08 19:48:30.839470779 +0100
+++ linux-3.3.8-pax/net/netfilter/ipvs/ip_vs_conn.c	2012-03-19 10:43:44.736034613 +0100
@@ -556,7 +556,7 @@ ip_vs_bind_dest(struct ip_vs_conn *cp, s
 	/* Increase the refcnt counter of the dest */
 	atomic_inc(&dest->refcnt);
 
-	conn_flags = atomic_read(&dest->conn_flags);
+	conn_flags = atomic_read_unchecked(&dest->conn_flags);
 	if (cp->protocol != IPPROTO_UDP)
 		conn_flags &= ~IP_VS_CONN_F_ONE_PACKET;
 	/* Bind with the destination and its corresponding transmitter */
@@ -869,7 +869,7 @@ ip_vs_conn_new(const struct ip_vs_conn_p
 	atomic_set(&cp->refcnt, 1);
 
 	atomic_set(&cp->n_control, 0);
-	atomic_set(&cp->in_pkts, 0);
+	atomic_set_unchecked(&cp->in_pkts, 0);
 
 	atomic_inc(&ipvs->conn_count);
 	if (flags & IP_VS_CONN_F_NO_CPORT)
@@ -1149,7 +1149,7 @@ static inline int todrop_entry(struct ip
 
 	/* Don't drop the entry if its number of incoming packets is not
 	   located in [0, 8] */
-	i = atomic_read(&cp->in_pkts);
+	i = atomic_read_unchecked(&cp->in_pkts);
 	if (i > 8 || i < 0) return 0;
 
 	if (!todrop_rate[i]) return 0;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/netfilter/ipvs/ip_vs_core.c linux-3.3.8-pax/net/netfilter/ipvs/ip_vs_core.c
--- linux-3.3.8/net/netfilter/ipvs/ip_vs_core.c	2012-03-19 10:39:13.940049070 +0100
+++ linux-3.3.8-pax/net/netfilter/ipvs/ip_vs_core.c	2012-03-19 10:43:44.736034613 +0100
@@ -562,7 +562,7 @@ int ip_vs_leave(struct ip_vs_service *sv
 		ret = cp->packet_xmit(skb, cp, pd->pp);
 		/* do not touch skb anymore */
 
-		atomic_inc(&cp->in_pkts);
+		atomic_inc_unchecked(&cp->in_pkts);
 		ip_vs_conn_put(cp);
 		return ret;
 	}
@@ -1611,7 +1611,7 @@ ip_vs_in(unsigned int hooknum, struct sk
 	if (cp->flags & IP_VS_CONN_F_ONE_PACKET)
 		pkts = sysctl_sync_threshold(ipvs);
 	else
-		pkts = atomic_add_return(1, &cp->in_pkts);
+		pkts = atomic_add_return_unchecked(1, &cp->in_pkts);
 
 	if ((ipvs->sync_state & IP_VS_STATE_MASTER) &&
 	    cp->protocol == IPPROTO_SCTP) {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/netfilter/ipvs/ip_vs_ctl.c linux-3.3.8-pax/net/netfilter/ipvs/ip_vs_ctl.c
--- linux-3.3.8/net/netfilter/ipvs/ip_vs_ctl.c	2012-03-19 10:39:13.940049071 +0100
+++ linux-3.3.8-pax/net/netfilter/ipvs/ip_vs_ctl.c	2012-03-19 10:43:44.740034613 +0100
@@ -788,7 +788,7 @@ __ip_vs_update_dest(struct ip_vs_service
 		ip_vs_rs_hash(ipvs, dest);
 		write_unlock_bh(&ipvs->rs_lock);
 	}
-	atomic_set(&dest->conn_flags, conn_flags);
+	atomic_set_unchecked(&dest->conn_flags, conn_flags);
 
 	/* bind the service */
 	if (!dest->svc) {
@@ -2028,7 +2028,7 @@ static int ip_vs_info_seq_show(struct se
 					   "      %-7s %-6d %-10d %-10d\n",
 					   &dest->addr.in6,
 					   ntohs(dest->port),
-					   ip_vs_fwd_name(atomic_read(&dest->conn_flags)),
+					   ip_vs_fwd_name(atomic_read_unchecked(&dest->conn_flags)),
 					   atomic_read(&dest->weight),
 					   atomic_read(&dest->activeconns),
 					   atomic_read(&dest->inactconns));
@@ -2039,7 +2039,7 @@ static int ip_vs_info_seq_show(struct se
 					   "%-7s %-6d %-10d %-10d\n",
 					   ntohl(dest->addr.ip),
 					   ntohs(dest->port),
-					   ip_vs_fwd_name(atomic_read(&dest->conn_flags)),
+					   ip_vs_fwd_name(atomic_read_unchecked(&dest->conn_flags)),
 					   atomic_read(&dest->weight),
 					   atomic_read(&dest->activeconns),
 					   atomic_read(&dest->inactconns));
@@ -2509,7 +2509,7 @@ __ip_vs_get_dest_entries(struct net *net
 
 			entry.addr = dest->addr.ip;
 			entry.port = dest->port;
-			entry.conn_flags = atomic_read(&dest->conn_flags);
+			entry.conn_flags = atomic_read_unchecked(&dest->conn_flags);
 			entry.weight = atomic_read(&dest->weight);
 			entry.u_threshold = dest->u_threshold;
 			entry.l_threshold = dest->l_threshold;
@@ -3042,7 +3042,7 @@ static int ip_vs_genl_fill_dest(struct s
 	NLA_PUT_U16(skb, IPVS_DEST_ATTR_PORT, dest->port);
 
 	NLA_PUT_U32(skb, IPVS_DEST_ATTR_FWD_METHOD,
-		    atomic_read(&dest->conn_flags) & IP_VS_CONN_F_FWD_MASK);
+		    atomic_read_unchecked(&dest->conn_flags) & IP_VS_CONN_F_FWD_MASK);
 	NLA_PUT_U32(skb, IPVS_DEST_ATTR_WEIGHT, atomic_read(&dest->weight));
 	NLA_PUT_U32(skb, IPVS_DEST_ATTR_U_THRESH, dest->u_threshold);
 	NLA_PUT_U32(skb, IPVS_DEST_ATTR_L_THRESH, dest->l_threshold);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/netfilter/ipvs/ip_vs_sync.c linux-3.3.8-pax/net/netfilter/ipvs/ip_vs_sync.c
--- linux-3.3.8/net/netfilter/ipvs/ip_vs_sync.c	2012-03-19 10:39:13.944049070 +0100
+++ linux-3.3.8-pax/net/netfilter/ipvs/ip_vs_sync.c	2012-03-19 10:43:44.740034613 +0100
@@ -649,7 +649,7 @@ control:
 	 * i.e only increment in_pkts for Templates.
 	 */
 	if (cp->flags & IP_VS_CONN_F_TEMPLATE) {
-		int pkts = atomic_add_return(1, &cp->in_pkts);
+		int pkts = atomic_add_return_unchecked(1, &cp->in_pkts);
 
 		if (pkts % sysctl_sync_period(ipvs) != 1)
 			return;
@@ -795,7 +795,7 @@ static void ip_vs_proc_conn(struct net *
 
 	if (opt)
 		memcpy(&cp->in_seq, opt, sizeof(*opt));
-	atomic_set(&cp->in_pkts, sysctl_sync_threshold(ipvs));
+	atomic_set_unchecked(&cp->in_pkts, sysctl_sync_threshold(ipvs));
 	cp->state = state;
 	cp->old_state = cp->state;
 	/*
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/netfilter/ipvs/ip_vs_xmit.c linux-3.3.8-pax/net/netfilter/ipvs/ip_vs_xmit.c
--- linux-3.3.8/net/netfilter/ipvs/ip_vs_xmit.c	2012-03-19 10:39:13.944049070 +0100
+++ linux-3.3.8-pax/net/netfilter/ipvs/ip_vs_xmit.c	2012-03-19 10:43:44.744034613 +0100
@@ -1151,7 +1151,7 @@ ip_vs_icmp_xmit(struct sk_buff *skb, str
 		else
 			rc = NF_ACCEPT;
 		/* do not touch skb anymore */
-		atomic_inc(&cp->in_pkts);
+		atomic_inc_unchecked(&cp->in_pkts);
 		goto out;
 	}
 
@@ -1272,7 +1272,7 @@ ip_vs_icmp_xmit_v6(struct sk_buff *skb,
 		else
 			rc = NF_ACCEPT;
 		/* do not touch skb anymore */
-		atomic_inc(&cp->in_pkts);
+		atomic_inc_unchecked(&cp->in_pkts);
 		goto out;
 	}
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/netfilter/nfnetlink_log.c linux-3.3.8-pax/net/netfilter/nfnetlink_log.c
--- linux-3.3.8/net/netfilter/nfnetlink_log.c	2012-01-08 19:48:30.923470774 +0100
+++ linux-3.3.8-pax/net/netfilter/nfnetlink_log.c	2012-03-19 10:43:44.744034613 +0100
@@ -70,7 +70,7 @@ struct nfulnl_instance {
 };
 
 static DEFINE_SPINLOCK(instances_lock);
-static atomic_t global_seq;
+static atomic_unchecked_t global_seq;
 
 #define INSTANCE_BUCKETS	16
 static struct hlist_head instance_table[INSTANCE_BUCKETS];
@@ -502,7 +502,7 @@ __build_packet_message(struct nfulnl_ins
 	/* global sequence number */
 	if (inst->flags & NFULNL_CFG_F_SEQ_GLOBAL)
 		NLA_PUT_BE32(inst->skb, NFULA_SEQ_GLOBAL,
-			     htonl(atomic_inc_return(&global_seq)));
+			     htonl(atomic_inc_return_unchecked(&global_seq)));
 
 	if (data_len) {
 		struct nlattr *nla;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/netfilter/xt_statistic.c linux-3.3.8-pax/net/netfilter/xt_statistic.c
--- linux-3.3.8/net/netfilter/xt_statistic.c	2012-01-08 19:48:30.955470772 +0100
+++ linux-3.3.8-pax/net/netfilter/xt_statistic.c	2012-03-19 10:43:44.744034613 +0100
@@ -19,7 +19,7 @@
 #include <linux/module.h>
 
 struct xt_statistic_priv {
-	atomic_t count;
+	atomic_unchecked_t count;
 } ____cacheline_aligned_in_smp;
 
 MODULE_LICENSE("GPL");
@@ -42,9 +42,9 @@ statistic_mt(const struct sk_buff *skb,
 		break;
 	case XT_STATISTIC_MODE_NTH:
 		do {
-			oval = atomic_read(&info->master->count);
+			oval = atomic_read_unchecked(&info->master->count);
 			nval = (oval == info->u.nth.every) ? 0 : oval + 1;
-		} while (atomic_cmpxchg(&info->master->count, oval, nval) != oval);
+		} while (atomic_cmpxchg_unchecked(&info->master->count, oval, nval) != oval);
 		if (nval == 0)
 			ret = !ret;
 		break;
@@ -64,7 +64,7 @@ static int statistic_mt_check(const stru
 	info->master = kzalloc(sizeof(*info->master), GFP_KERNEL);
 	if (info->master == NULL)
 		return -ENOMEM;
-	atomic_set(&info->master->count, info->u.nth.count);
+	atomic_set_unchecked(&info->master->count, info->u.nth.count);
 
 	return 0;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/netlink/af_netlink.c linux-3.3.8-pax/net/netlink/af_netlink.c
--- linux-3.3.8/net/netlink/af_netlink.c	2012-04-27 22:14:17.913191271 +0200
+++ linux-3.3.8-pax/net/netlink/af_netlink.c	2012-04-27 22:14:29.273190662 +0200
@@ -741,7 +741,7 @@ static void netlink_overrun(struct sock
 			sk->sk_error_report(sk);
 		}
 	}
-	atomic_inc(&sk->sk_drops);
+	atomic_inc_unchecked(&sk->sk_drops);
 }
 
 static struct sock *netlink_getsockbypid(struct sock *ssk, u32 pid)
@@ -1997,7 +1997,7 @@ static int netlink_seq_show(struct seq_f
 			   sk_wmem_alloc_get(s),
 			   nlk->cb,
 			   atomic_read(&s->sk_refcnt),
-			   atomic_read(&s->sk_drops),
+			   atomic_read_unchecked(&s->sk_drops),
 			   sock_i_ino(s)
 			);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/packet/af_packet.c linux-3.3.8-pax/net/packet/af_packet.c
--- linux-3.3.8/net/packet/af_packet.c	2012-03-19 10:39:14.132049059 +0100
+++ linux-3.3.8-pax/net/packet/af_packet.c	2012-03-19 10:43:44.748034611 +0100
@@ -1676,7 +1676,7 @@ static int packet_rcv(struct sk_buff *sk
 
 	spin_lock(&sk->sk_receive_queue.lock);
 	po->stats.tp_packets++;
-	skb->dropcount = atomic_read(&sk->sk_drops);
+	skb->dropcount = atomic_read_unchecked(&sk->sk_drops);
 	__skb_queue_tail(&sk->sk_receive_queue, skb);
 	spin_unlock(&sk->sk_receive_queue.lock);
 	sk->sk_data_ready(sk, skb->len);
@@ -1685,7 +1685,7 @@ static int packet_rcv(struct sk_buff *sk
 drop_n_acct:
 	spin_lock(&sk->sk_receive_queue.lock);
 	po->stats.tp_drops++;
-	atomic_inc(&sk->sk_drops);
+	atomic_inc_unchecked(&sk->sk_drops);
 	spin_unlock(&sk->sk_receive_queue.lock);
 
 drop_n_restore:
@@ -3271,7 +3271,7 @@ static int packet_getsockopt(struct sock
 	case PACKET_HDRLEN:
 		if (len > sizeof(int))
 			len = sizeof(int);
-		if (copy_from_user(&val, optval, len))
+		if (len > sizeof(val) || copy_from_user(&val, optval, len))
 			return -EFAULT;
 		switch (val) {
 		case TPACKET_V1:
@@ -3321,7 +3321,7 @@ static int packet_getsockopt(struct sock
 
 	if (put_user(len, optlen))
 		return -EFAULT;
-	if (copy_to_user(optval, data, len))
+	if (len > sizeof(st) || copy_to_user(optval, data, len))
 		return -EFAULT;
 	return 0;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/phonet/pep.c linux-3.3.8-pax/net/phonet/pep.c
--- linux-3.3.8/net/phonet/pep.c	2012-04-27 22:14:17.917191270 +0200
+++ linux-3.3.8-pax/net/phonet/pep.c	2012-04-27 22:14:29.273190662 +0200
@@ -388,7 +388,7 @@ static int pipe_do_rcv(struct sock *sk,
 
 	case PNS_PEP_CTRL_REQ:
 		if (skb_queue_len(&pn->ctrlreq_queue) >= PNPIPE_CTRLREQ_MAX) {
-			atomic_inc(&sk->sk_drops);
+			atomic_inc_unchecked(&sk->sk_drops);
 			break;
 		}
 		__skb_pull(skb, 4);
@@ -409,7 +409,7 @@ static int pipe_do_rcv(struct sock *sk,
 		}
 
 		if (pn->rx_credits == 0) {
-			atomic_inc(&sk->sk_drops);
+			atomic_inc_unchecked(&sk->sk_drops);
 			err = -ENOBUFS;
 			break;
 		}
@@ -580,7 +580,7 @@ static int pipe_handler_do_rcv(struct so
 		}
 
 		if (pn->rx_credits == 0) {
-			atomic_inc(&sk->sk_drops);
+			atomic_inc_unchecked(&sk->sk_drops);
 			err = NET_RX_DROP;
 			break;
 		}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/phonet/socket.c linux-3.3.8-pax/net/phonet/socket.c
--- linux-3.3.8/net/phonet/socket.c	2012-03-19 10:39:14.136049059 +0100
+++ linux-3.3.8-pax/net/phonet/socket.c	2012-03-19 10:43:44.752034609 +0100
@@ -614,7 +614,7 @@ static int pn_sock_seq_show(struct seq_f
 			sk_wmem_alloc_get(sk), sk_rmem_alloc_get(sk),
 			sock_i_uid(sk), sock_i_ino(sk),
 			atomic_read(&sk->sk_refcnt), sk,
-			atomic_read(&sk->sk_drops), &len);
+			atomic_read_unchecked(&sk->sk_drops), &len);
 	}
 	seq_printf(seq, "%*s\n", 127 - len, "");
 	return 0;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/rds/cong.c linux-3.3.8-pax/net/rds/cong.c
--- linux-3.3.8/net/rds/cong.c	2012-01-08 19:48:31.043470768 +0100
+++ linux-3.3.8-pax/net/rds/cong.c	2012-03-19 10:43:44.752034609 +0100
@@ -78,7 +78,7 @@
  * finds that the saved generation number is smaller than the global generation
  * number, it wakes up the process.
  */
-static atomic_t		rds_cong_generation = ATOMIC_INIT(0);
+static atomic_unchecked_t		rds_cong_generation = ATOMIC_INIT(0);
 
 /*
  * Congestion monitoring
@@ -233,7 +233,7 @@ void rds_cong_map_updated(struct rds_con
 	rdsdebug("waking map %p for %pI4\n",
 	  map, &map->m_addr);
 	rds_stats_inc(s_cong_update_received);
-	atomic_inc(&rds_cong_generation);
+	atomic_inc_unchecked(&rds_cong_generation);
 	if (waitqueue_active(&map->m_waitq))
 		wake_up(&map->m_waitq);
 	if (waitqueue_active(&rds_poll_waitq))
@@ -259,7 +259,7 @@ EXPORT_SYMBOL_GPL(rds_cong_map_updated);
 
 int rds_cong_updated_since(unsigned long *recent)
 {
-	unsigned long gen = atomic_read(&rds_cong_generation);
+	unsigned long gen = atomic_read_unchecked(&rds_cong_generation);
 
 	if (likely(*recent == gen))
 		return 0;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/rds/ib_cm.c linux-3.3.8-pax/net/rds/ib_cm.c
--- linux-3.3.8/net/rds/ib_cm.c	2012-01-08 19:48:31.051470767 +0100
+++ linux-3.3.8-pax/net/rds/ib_cm.c	2012-03-19 10:43:44.752034609 +0100
@@ -718,7 +718,7 @@ void rds_ib_conn_shutdown(struct rds_con
 	/* Clear the ACK state */
 	clear_bit(IB_ACK_IN_FLIGHT, &ic->i_ack_flags);
 #ifdef KERNEL_HAS_ATOMIC64
-	atomic64_set(&ic->i_ack_next, 0);
+	atomic64_set_unchecked(&ic->i_ack_next, 0);
 #else
 	ic->i_ack_next = 0;
 #endif
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/rds/ib.h linux-3.3.8-pax/net/rds/ib.h
--- linux-3.3.8/net/rds/ib.h	2011-10-24 12:48:43.343090860 +0200
+++ linux-3.3.8-pax/net/rds/ib.h	2012-03-19 10:43:44.752034609 +0100
@@ -128,7 +128,7 @@ struct rds_ib_connection {
 	/* sending acks */
 	unsigned long		i_ack_flags;
 #ifdef KERNEL_HAS_ATOMIC64
-	atomic64_t		i_ack_next;	/* next ACK to send */
+	atomic64_unchecked_t	i_ack_next;	/* next ACK to send */
 #else
 	spinlock_t		i_ack_lock;	/* protect i_ack_next */
 	u64			i_ack_next;	/* next ACK to send */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/rds/ib_recv.c linux-3.3.8-pax/net/rds/ib_recv.c
--- linux-3.3.8/net/rds/ib_recv.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/net/rds/ib_recv.c	2012-03-19 10:43:44.756034609 +0100
@@ -592,7 +592,7 @@ static u64 rds_ib_get_ack(struct rds_ib_
 static void rds_ib_set_ack(struct rds_ib_connection *ic, u64 seq,
 				int ack_required)
 {
-	atomic64_set(&ic->i_ack_next, seq);
+	atomic64_set_unchecked(&ic->i_ack_next, seq);
 	if (ack_required) {
 		smp_mb__before_clear_bit();
 		set_bit(IB_ACK_REQUESTED, &ic->i_ack_flags);
@@ -604,7 +604,7 @@ static u64 rds_ib_get_ack(struct rds_ib_
 	clear_bit(IB_ACK_REQUESTED, &ic->i_ack_flags);
 	smp_mb__after_clear_bit();
 
-	return atomic64_read(&ic->i_ack_next);
+	return atomic64_read_unchecked(&ic->i_ack_next);
 }
 #endif
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/rds/iw_cm.c linux-3.3.8-pax/net/rds/iw_cm.c
--- linux-3.3.8/net/rds/iw_cm.c	2011-10-24 12:48:43.355090860 +0200
+++ linux-3.3.8-pax/net/rds/iw_cm.c	2012-03-19 10:43:44.756034609 +0100
@@ -663,7 +663,7 @@ void rds_iw_conn_shutdown(struct rds_con
 	/* Clear the ACK state */
 	clear_bit(IB_ACK_IN_FLIGHT, &ic->i_ack_flags);
 #ifdef KERNEL_HAS_ATOMIC64
-	atomic64_set(&ic->i_ack_next, 0);
+	atomic64_set_unchecked(&ic->i_ack_next, 0);
 #else
 	ic->i_ack_next = 0;
 #endif
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/rds/iw.h linux-3.3.8-pax/net/rds/iw.h
--- linux-3.3.8/net/rds/iw.h	2011-10-24 12:48:43.351090861 +0200
+++ linux-3.3.8-pax/net/rds/iw.h	2012-03-19 10:43:44.756034609 +0100
@@ -134,7 +134,7 @@ struct rds_iw_connection {
 	/* sending acks */
 	unsigned long		i_ack_flags;
 #ifdef KERNEL_HAS_ATOMIC64
-	atomic64_t		i_ack_next;	/* next ACK to send */
+	atomic64_unchecked_t	i_ack_next;	/* next ACK to send */
 #else
 	spinlock_t		i_ack_lock;	/* protect i_ack_next */
 	u64			i_ack_next;	/* next ACK to send */
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/rds/iw_recv.c linux-3.3.8-pax/net/rds/iw_recv.c
--- linux-3.3.8/net/rds/iw_recv.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/net/rds/iw_recv.c	2012-03-19 10:43:44.756034609 +0100
@@ -427,7 +427,7 @@ static u64 rds_iw_get_ack(struct rds_iw_
 static void rds_iw_set_ack(struct rds_iw_connection *ic, u64 seq,
 				int ack_required)
 {
-	atomic64_set(&ic->i_ack_next, seq);
+	atomic64_set_unchecked(&ic->i_ack_next, seq);
 	if (ack_required) {
 		smp_mb__before_clear_bit();
 		set_bit(IB_ACK_REQUESTED, &ic->i_ack_flags);
@@ -439,7 +439,7 @@ static u64 rds_iw_get_ack(struct rds_iw_
 	clear_bit(IB_ACK_REQUESTED, &ic->i_ack_flags);
 	smp_mb__after_clear_bit();
 
-	return atomic64_read(&ic->i_ack_next);
+	return atomic64_read_unchecked(&ic->i_ack_next);
 }
 #endif
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/rds/tcp.c linux-3.3.8-pax/net/rds/tcp.c
--- linux-3.3.8/net/rds/tcp.c	2012-01-08 19:48:31.135470763 +0100
+++ linux-3.3.8-pax/net/rds/tcp.c	2012-03-19 10:43:44.760034610 +0100
@@ -59,7 +59,7 @@ void rds_tcp_nonagle(struct socket *sock
 	int val = 1;
 
 	set_fs(KERNEL_DS);
-	sock->ops->setsockopt(sock, SOL_TCP, TCP_NODELAY, (char __user *)&val,
+	sock->ops->setsockopt(sock, SOL_TCP, TCP_NODELAY, (char __force_user *)&val,
 			      sizeof(val));
 	set_fs(oldfs);
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/rds/tcp_send.c linux-3.3.8-pax/net/rds/tcp_send.c
--- linux-3.3.8/net/rds/tcp_send.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/net/rds/tcp_send.c	2012-03-19 10:43:44.768034610 +0100
@@ -43,7 +43,7 @@ static void rds_tcp_cork(struct socket *
 
 	oldfs = get_fs();
 	set_fs(KERNEL_DS);
-	sock->ops->setsockopt(sock, SOL_TCP, TCP_CORK, (char __user *)&val,
+	sock->ops->setsockopt(sock, SOL_TCP, TCP_CORK, (char __force_user *)&val,
 			      sizeof(val));
 	set_fs(oldfs);
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/rxrpc/af_rxrpc.c linux-3.3.8-pax/net/rxrpc/af_rxrpc.c
--- linux-3.3.8/net/rxrpc/af_rxrpc.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/net/rxrpc/af_rxrpc.c	2012-03-19 10:43:44.768034611 +0100
@@ -39,7 +39,7 @@ static const struct proto_ops rxrpc_rpc_
 __be32 rxrpc_epoch;
 
 /* current debugging ID */
-atomic_t rxrpc_debug_id;
+atomic_unchecked_t rxrpc_debug_id;
 
 /* count of skbs currently in use */
 atomic_t rxrpc_n_skbs;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/rxrpc/ar-ack.c linux-3.3.8-pax/net/rxrpc/ar-ack.c
--- linux-3.3.8/net/rxrpc/ar-ack.c	2012-03-19 10:39:14.152049059 +0100
+++ linux-3.3.8-pax/net/rxrpc/ar-ack.c	2012-03-19 10:43:44.776034609 +0100
@@ -175,7 +175,7 @@ static void rxrpc_resend(struct rxrpc_ca
 
 	_enter("{%d,%d,%d,%d},",
 	       call->acks_hard, call->acks_unacked,
-	       atomic_read(&call->sequence),
+	       atomic_read_unchecked(&call->sequence),
 	       CIRC_CNT(call->acks_head, call->acks_tail, call->acks_winsz));
 
 	stop = 0;
@@ -199,7 +199,7 @@ static void rxrpc_resend(struct rxrpc_ca
 
 			/* each Tx packet has a new serial number */
 			sp->hdr.serial =
-				htonl(atomic_inc_return(&call->conn->serial));
+				htonl(atomic_inc_return_unchecked(&call->conn->serial));
 
 			hdr = (struct rxrpc_header *) txb->head;
 			hdr->serial = sp->hdr.serial;
@@ -403,7 +403,7 @@ static void rxrpc_rotate_tx_window(struc
  */
 static void rxrpc_clear_tx_window(struct rxrpc_call *call)
 {
-	rxrpc_rotate_tx_window(call, atomic_read(&call->sequence));
+	rxrpc_rotate_tx_window(call, atomic_read_unchecked(&call->sequence));
 }
 
 /*
@@ -629,7 +629,7 @@ process_further:
 
 		latest = ntohl(sp->hdr.serial);
 		hard = ntohl(ack.firstPacket);
-		tx = atomic_read(&call->sequence);
+		tx = atomic_read_unchecked(&call->sequence);
 
 		_proto("Rx ACK %%%u { m=%hu f=#%u p=#%u s=%%%u r=%s n=%u }",
 		       latest,
@@ -1161,7 +1161,7 @@ void rxrpc_process_call(struct work_stru
 	goto maybe_reschedule;
 
 send_ACK_with_skew:
-	ack.maxSkew = htons(atomic_read(&call->conn->hi_serial) -
+	ack.maxSkew = htons(atomic_read_unchecked(&call->conn->hi_serial) -
 			    ntohl(ack.serial));
 send_ACK:
 	mtu = call->conn->trans->peer->if_mtu;
@@ -1173,7 +1173,7 @@ send_ACK:
 	ackinfo.rxMTU	= htonl(5692);
 	ackinfo.jumbo_max = htonl(4);
 
-	hdr.serial = htonl(atomic_inc_return(&call->conn->serial));
+	hdr.serial = htonl(atomic_inc_return_unchecked(&call->conn->serial));
 	_proto("Tx ACK %%%u { m=%hu f=#%u p=#%u s=%%%u r=%s n=%u }",
 	       ntohl(hdr.serial),
 	       ntohs(ack.maxSkew),
@@ -1191,7 +1191,7 @@ send_ACK:
 send_message:
 	_debug("send message");
 
-	hdr.serial = htonl(atomic_inc_return(&call->conn->serial));
+	hdr.serial = htonl(atomic_inc_return_unchecked(&call->conn->serial));
 	_proto("Tx %s %%%u", rxrpc_pkts[hdr.type], ntohl(hdr.serial));
 send_message_2:
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/rxrpc/ar-call.c linux-3.3.8-pax/net/rxrpc/ar-call.c
--- linux-3.3.8/net/rxrpc/ar-call.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/net/rxrpc/ar-call.c	2012-03-19 10:43:44.776034609 +0100
@@ -83,7 +83,7 @@ static struct rxrpc_call *rxrpc_alloc_ca
 	spin_lock_init(&call->lock);
 	rwlock_init(&call->state_lock);
 	atomic_set(&call->usage, 1);
-	call->debug_id = atomic_inc_return(&rxrpc_debug_id);
+	call->debug_id = atomic_inc_return_unchecked(&rxrpc_debug_id);
 	call->state = RXRPC_CALL_CLIENT_SEND_REQUEST;
 
 	memset(&call->sock_node, 0xed, sizeof(call->sock_node));
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/rxrpc/ar-connection.c linux-3.3.8-pax/net/rxrpc/ar-connection.c
--- linux-3.3.8/net/rxrpc/ar-connection.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/net/rxrpc/ar-connection.c	2012-03-19 10:43:44.776034610 +0100
@@ -206,7 +206,7 @@ static struct rxrpc_connection *rxrpc_al
 		rwlock_init(&conn->lock);
 		spin_lock_init(&conn->state_lock);
 		atomic_set(&conn->usage, 1);
-		conn->debug_id = atomic_inc_return(&rxrpc_debug_id);
+		conn->debug_id = atomic_inc_return_unchecked(&rxrpc_debug_id);
 		conn->avail_calls = RXRPC_MAXCALLS;
 		conn->size_align = 4;
 		conn->header_size = sizeof(struct rxrpc_header);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/rxrpc/ar-connevent.c linux-3.3.8-pax/net/rxrpc/ar-connevent.c
--- linux-3.3.8/net/rxrpc/ar-connevent.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/net/rxrpc/ar-connevent.c	2012-03-19 10:43:44.776034610 +0100
@@ -109,7 +109,7 @@ static int rxrpc_abort_connection(struct
 
 	len = iov[0].iov_len + iov[1].iov_len;
 
-	hdr.serial = htonl(atomic_inc_return(&conn->serial));
+	hdr.serial = htonl(atomic_inc_return_unchecked(&conn->serial));
 	_proto("Tx CONN ABORT %%%u { %d }", ntohl(hdr.serial), abort_code);
 
 	ret = kernel_sendmsg(conn->trans->local->socket, &msg, iov, 2, len);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/rxrpc/ar-input.c linux-3.3.8-pax/net/rxrpc/ar-input.c
--- linux-3.3.8/net/rxrpc/ar-input.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/net/rxrpc/ar-input.c	2012-03-19 10:43:44.780034610 +0100
@@ -340,9 +340,9 @@ void rxrpc_fast_process_packet(struct rx
 	/* track the latest serial number on this connection for ACK packet
 	 * information */
 	serial = ntohl(sp->hdr.serial);
-	hi_serial = atomic_read(&call->conn->hi_serial);
+	hi_serial = atomic_read_unchecked(&call->conn->hi_serial);
 	while (serial > hi_serial)
-		hi_serial = atomic_cmpxchg(&call->conn->hi_serial, hi_serial,
+		hi_serial = atomic_cmpxchg_unchecked(&call->conn->hi_serial, hi_serial,
 					   serial);
 
 	/* request ACK generation for any ACK or DATA packet that requests
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/rxrpc/ar-internal.h linux-3.3.8-pax/net/rxrpc/ar-internal.h
--- linux-3.3.8/net/rxrpc/ar-internal.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/net/rxrpc/ar-internal.h	2012-03-19 10:43:44.784034609 +0100
@@ -272,8 +272,8 @@ struct rxrpc_connection {
 	int			error;		/* error code for local abort */
 	int			debug_id;	/* debug ID for printks */
 	unsigned		call_counter;	/* call ID counter */
-	atomic_t		serial;		/* packet serial number counter */
-	atomic_t		hi_serial;	/* highest serial number received */
+	atomic_unchecked_t	serial;		/* packet serial number counter */
+	atomic_unchecked_t	hi_serial;	/* highest serial number received */
 	u8			avail_calls;	/* number of calls available */
 	u8			size_align;	/* data size alignment (for security) */
 	u8			header_size;	/* rxrpc + security header size */
@@ -346,7 +346,7 @@ struct rxrpc_call {
 	spinlock_t		lock;
 	rwlock_t		state_lock;	/* lock for state transition */
 	atomic_t		usage;
-	atomic_t		sequence;	/* Tx data packet sequence counter */
+	atomic_unchecked_t	sequence;	/* Tx data packet sequence counter */
 	u32			abort_code;	/* local/remote abort code */
 	enum {					/* current state of call */
 		RXRPC_CALL_CLIENT_SEND_REQUEST,	/* - client sending request phase */
@@ -420,7 +420,7 @@ static inline void rxrpc_abort_call(stru
  */
 extern atomic_t rxrpc_n_skbs;
 extern __be32 rxrpc_epoch;
-extern atomic_t rxrpc_debug_id;
+extern atomic_unchecked_t rxrpc_debug_id;
 extern struct workqueue_struct *rxrpc_workqueue;
 
 /*
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/rxrpc/ar-local.c linux-3.3.8-pax/net/rxrpc/ar-local.c
--- linux-3.3.8/net/rxrpc/ar-local.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/net/rxrpc/ar-local.c	2012-03-19 10:43:44.788034609 +0100
@@ -45,7 +45,7 @@ struct rxrpc_local *rxrpc_alloc_local(st
 		spin_lock_init(&local->lock);
 		rwlock_init(&local->services_lock);
 		atomic_set(&local->usage, 1);
-		local->debug_id = atomic_inc_return(&rxrpc_debug_id);
+		local->debug_id = atomic_inc_return_unchecked(&rxrpc_debug_id);
 		memcpy(&local->srx, srx, sizeof(*srx));
 	}
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/rxrpc/ar-output.c linux-3.3.8-pax/net/rxrpc/ar-output.c
--- linux-3.3.8/net/rxrpc/ar-output.c	2012-03-19 10:39:14.152049059 +0100
+++ linux-3.3.8-pax/net/rxrpc/ar-output.c	2012-03-19 10:43:44.788034609 +0100
@@ -682,9 +682,9 @@ static int rxrpc_send_data(struct kiocb
 			sp->hdr.cid = call->cid;
 			sp->hdr.callNumber = call->call_id;
 			sp->hdr.seq =
-				htonl(atomic_inc_return(&call->sequence));
+				htonl(atomic_inc_return_unchecked(&call->sequence));
 			sp->hdr.serial =
-				htonl(atomic_inc_return(&conn->serial));
+				htonl(atomic_inc_return_unchecked(&conn->serial));
 			sp->hdr.type = RXRPC_PACKET_TYPE_DATA;
 			sp->hdr.userStatus = 0;
 			sp->hdr.securityIndex = conn->security_ix;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/rxrpc/ar-peer.c linux-3.3.8-pax/net/rxrpc/ar-peer.c
--- linux-3.3.8/net/rxrpc/ar-peer.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/net/rxrpc/ar-peer.c	2012-03-19 10:43:44.788034609 +0100
@@ -72,7 +72,7 @@ static struct rxrpc_peer *rxrpc_alloc_pe
 		INIT_LIST_HEAD(&peer->error_targets);
 		spin_lock_init(&peer->lock);
 		atomic_set(&peer->usage, 1);
-		peer->debug_id = atomic_inc_return(&rxrpc_debug_id);
+		peer->debug_id = atomic_inc_return_unchecked(&rxrpc_debug_id);
 		memcpy(&peer->srx, srx, sizeof(*srx));
 
 		rxrpc_assess_MTU_size(peer);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/rxrpc/ar-proc.c linux-3.3.8-pax/net/rxrpc/ar-proc.c
--- linux-3.3.8/net/rxrpc/ar-proc.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/net/rxrpc/ar-proc.c	2012-03-19 10:43:44.788034609 +0100
@@ -164,8 +164,8 @@ static int rxrpc_connection_seq_show(str
 		   atomic_read(&conn->usage),
 		   rxrpc_conn_states[conn->state],
 		   key_serial(conn->key),
-		   atomic_read(&conn->serial),
-		   atomic_read(&conn->hi_serial));
+		   atomic_read_unchecked(&conn->serial),
+		   atomic_read_unchecked(&conn->hi_serial));
 
 	return 0;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/rxrpc/ar-transport.c linux-3.3.8-pax/net/rxrpc/ar-transport.c
--- linux-3.3.8/net/rxrpc/ar-transport.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/net/rxrpc/ar-transport.c	2012-03-19 10:43:44.788034609 +0100
@@ -47,7 +47,7 @@ static struct rxrpc_transport *rxrpc_all
 		spin_lock_init(&trans->client_lock);
 		rwlock_init(&trans->conn_lock);
 		atomic_set(&trans->usage, 1);
-		trans->debug_id = atomic_inc_return(&rxrpc_debug_id);
+		trans->debug_id = atomic_inc_return_unchecked(&rxrpc_debug_id);
 
 		if (peer->srx.transport.family == AF_INET) {
 			switch (peer->srx.transport_type) {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/rxrpc/rxkad.c linux-3.3.8-pax/net/rxrpc/rxkad.c
--- linux-3.3.8/net/rxrpc/rxkad.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/net/rxrpc/rxkad.c	2012-03-19 10:43:44.792034609 +0100
@@ -610,7 +610,7 @@ static int rxkad_issue_challenge(struct
 
 	len = iov[0].iov_len + iov[1].iov_len;
 
-	hdr.serial = htonl(atomic_inc_return(&conn->serial));
+	hdr.serial = htonl(atomic_inc_return_unchecked(&conn->serial));
 	_proto("Tx CHALLENGE %%%u", ntohl(hdr.serial));
 
 	ret = kernel_sendmsg(conn->trans->local->socket, &msg, iov, 2, len);
@@ -660,7 +660,7 @@ static int rxkad_send_response(struct rx
 
 	len = iov[0].iov_len + iov[1].iov_len + iov[2].iov_len;
 
-	hdr->serial = htonl(atomic_inc_return(&conn->serial));
+	hdr->serial = htonl(atomic_inc_return_unchecked(&conn->serial));
 	_proto("Tx RESPONSE %%%u", ntohl(hdr->serial));
 
 	ret = kernel_sendmsg(conn->trans->local->socket, &msg, iov, 3, len);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/sctp/socket.c linux-3.3.8-pax/net/sctp/socket.c
--- linux-3.3.8/net/sctp/socket.c	2012-04-27 22:14:17.933191264 +0200
+++ linux-3.3.8-pax/net/sctp/socket.c	2012-04-27 22:14:29.277190662 +0200
@@ -4575,7 +4575,7 @@ static int sctp_getsockopt_peer_addrs(st
 		addrlen = sctp_get_af_specific(temp.sa.sa_family)->sockaddr_len;
 		if (space_left < addrlen)
 			return -ENOMEM;
-		if (copy_to_user(to, &temp, addrlen))
+		if (addrlen > sizeof(temp) || copy_to_user(to, &temp, addrlen))
 			return -EFAULT;
 		to += addrlen;
 		cnt++;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/socket.c linux-3.3.8-pax/net/socket.c
--- linux-3.3.8/net/socket.c	2012-04-27 22:14:17.945191270 +0200
+++ linux-3.3.8-pax/net/socket.c	2012-04-27 22:14:29.281190662 +0200
@@ -1970,7 +1970,7 @@ static int __sys_sendmsg(struct socket *
 		 * checking falls down on this.
 		 */
 		if (copy_from_user(ctl_buf,
-				   (void __user __force *)msg_sys->msg_control,
+				   (void __force_user *)msg_sys->msg_control,
 				   ctl_len))
 			goto out_freectl;
 		msg_sys->msg_control = ctl_buf;
@@ -2140,7 +2140,7 @@ static int __sys_recvmsg(struct socket *
 	 *      kernel msghdr to use the kernel address space)
 	 */
 
-	uaddr = (__force void __user *)msg_sys->msg_name;
+	uaddr = (void __force_user *)msg_sys->msg_name;
 	uaddr_len = COMPAT_NAMELEN(msg);
 	if (MSG_CMSG_COMPAT & flags) {
 		err = verify_compat_iovec(msg_sys, iov,
@@ -2768,7 +2768,7 @@ static int ethtool_ioctl(struct net *net
 	}
 
 	ifr = compat_alloc_user_space(buf_size);
-	rxnfc = (void *)ifr + ALIGN(sizeof(struct ifreq), 8);
+	rxnfc = (void __user *)ifr + ALIGN(sizeof(struct ifreq), 8);
 
 	if (copy_in_user(&ifr->ifr_name, &ifr32->ifr_name, IFNAMSIZ))
 		return -EFAULT;
@@ -2792,12 +2792,12 @@ static int ethtool_ioctl(struct net *net
 			offsetof(struct ethtool_rxnfc, fs.ring_cookie));
 
 		if (copy_in_user(rxnfc, compat_rxnfc,
-				 (void *)(&rxnfc->fs.m_ext + 1) -
-				 (void *)rxnfc) ||
+				 (void __user *)(&rxnfc->fs.m_ext + 1) -
+				 (void __user *)rxnfc) ||
 		    copy_in_user(&rxnfc->fs.ring_cookie,
 				 &compat_rxnfc->fs.ring_cookie,
-				 (void *)(&rxnfc->fs.location + 1) -
-				 (void *)&rxnfc->fs.ring_cookie) ||
+				 (void __user *)(&rxnfc->fs.location + 1) -
+				 (void __user *)&rxnfc->fs.ring_cookie) ||
 		    copy_in_user(&rxnfc->rule_cnt, &compat_rxnfc->rule_cnt,
 				 sizeof(rxnfc->rule_cnt)))
 			return -EFAULT;
@@ -2809,12 +2809,12 @@ static int ethtool_ioctl(struct net *net
 
 	if (convert_out) {
 		if (copy_in_user(compat_rxnfc, rxnfc,
-				 (const void *)(&rxnfc->fs.m_ext + 1) -
-				 (const void *)rxnfc) ||
+				 (const void __user *)(&rxnfc->fs.m_ext + 1) -
+				 (const void __user *)rxnfc) ||
 		    copy_in_user(&compat_rxnfc->fs.ring_cookie,
 				 &rxnfc->fs.ring_cookie,
-				 (const void *)(&rxnfc->fs.location + 1) -
-				 (const void *)&rxnfc->fs.ring_cookie) ||
+				 (const void __user *)(&rxnfc->fs.location + 1) -
+				 (const void __user *)&rxnfc->fs.ring_cookie) ||
 		    copy_in_user(&compat_rxnfc->rule_cnt, &rxnfc->rule_cnt,
 				 sizeof(rxnfc->rule_cnt)))
 			return -EFAULT;
@@ -2884,7 +2884,7 @@ static int bond_ioctl(struct net *net, u
 		old_fs = get_fs();
 		set_fs(KERNEL_DS);
 		err = dev_ioctl(net, cmd,
-				(struct ifreq __user __force *) &kifr);
+				(struct ifreq __force_user *) &kifr);
 		set_fs(old_fs);
 
 		return err;
@@ -2993,7 +2993,7 @@ static int compat_sioc_ifmap(struct net
 
 	old_fs = get_fs();
 	set_fs(KERNEL_DS);
-	err = dev_ioctl(net, cmd, (void  __user __force *)&ifr);
+	err = dev_ioctl(net, cmd, (void  __force_user *)&ifr);
 	set_fs(old_fs);
 
 	if (cmd == SIOCGIFMAP && !err) {
@@ -3098,7 +3098,7 @@ static int routing_ioctl(struct net *net
 		ret |= __get_user(rtdev, &(ur4->rt_dev));
 		if (rtdev) {
 			ret |= copy_from_user(devname, compat_ptr(rtdev), 15);
-			r4.rt_dev = (char __user __force *)devname;
+			r4.rt_dev = (char __force_user *)devname;
 			devname[15] = 0;
 		} else
 			r4.rt_dev = NULL;
@@ -3324,8 +3324,8 @@ int kernel_getsockopt(struct socket *soc
 	int __user *uoptlen;
 	int err;
 
-	uoptval = (char __user __force *) optval;
-	uoptlen = (int __user __force *) optlen;
+	uoptval = (char __force_user *) optval;
+	uoptlen = (int __force_user *) optlen;
 
 	set_fs(KERNEL_DS);
 	if (level == SOL_SOCKET)
@@ -3345,7 +3345,7 @@ int kernel_setsockopt(struct socket *soc
 	char __user *uoptval;
 	int err;
 
-	uoptval = (char __user __force *) optval;
+	uoptval = (char __force_user *) optval;
 
 	set_fs(KERNEL_DS);
 	if (level == SOL_SOCKET)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/sunrpc/sched.c linux-3.3.8-pax/net/sunrpc/sched.c
--- linux-3.3.8/net/sunrpc/sched.c	2012-04-03 22:02:50.546110034 +0200
+++ linux-3.3.8-pax/net/sunrpc/sched.c	2012-04-03 22:03:07.126110933 +0200
@@ -239,9 +239,9 @@ static int rpc_wait_bit_killable(void *w
 #ifdef RPC_DEBUG
 static void rpc_task_set_debuginfo(struct rpc_task *task)
 {
-	static atomic_t rpc_pid;
+	static atomic_unchecked_t rpc_pid;
 
-	task->tk_pid = atomic_inc_return(&rpc_pid);
+	task->tk_pid = atomic_inc_return_unchecked(&rpc_pid);
 }
 #else
 static inline void rpc_task_set_debuginfo(struct rpc_task *task)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/sunrpc/svcsock.c linux-3.3.8-pax/net/sunrpc/svcsock.c
--- linux-3.3.8/net/sunrpc/svcsock.c	2012-03-19 10:39:14.200049057 +0100
+++ linux-3.3.8-pax/net/sunrpc/svcsock.c	2012-03-19 10:43:44.800034608 +0100
@@ -396,7 +396,7 @@ static int svc_partial_recvfrom(struct s
 				int buflen, unsigned int base)
 {
 	size_t save_iovlen;
-	void __user *save_iovbase;
+	void *save_iovbase;
 	unsigned int i;
 	int ret;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/sunrpc/xprtrdma/svc_rdma.c linux-3.3.8-pax/net/sunrpc/xprtrdma/svc_rdma.c
--- linux-3.3.8/net/sunrpc/xprtrdma/svc_rdma.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/net/sunrpc/xprtrdma/svc_rdma.c	2012-03-19 10:43:44.800034608 +0100
@@ -61,15 +61,15 @@ unsigned int svcrdma_max_req_size = RPCR
 static unsigned int min_max_inline = 4096;
 static unsigned int max_max_inline = 65536;
 
-atomic_t rdma_stat_recv;
-atomic_t rdma_stat_read;
-atomic_t rdma_stat_write;
-atomic_t rdma_stat_sq_starve;
-atomic_t rdma_stat_rq_starve;
-atomic_t rdma_stat_rq_poll;
-atomic_t rdma_stat_rq_prod;
-atomic_t rdma_stat_sq_poll;
-atomic_t rdma_stat_sq_prod;
+atomic_unchecked_t rdma_stat_recv;
+atomic_unchecked_t rdma_stat_read;
+atomic_unchecked_t rdma_stat_write;
+atomic_unchecked_t rdma_stat_sq_starve;
+atomic_unchecked_t rdma_stat_rq_starve;
+atomic_unchecked_t rdma_stat_rq_poll;
+atomic_unchecked_t rdma_stat_rq_prod;
+atomic_unchecked_t rdma_stat_sq_poll;
+atomic_unchecked_t rdma_stat_sq_prod;
 
 /* Temporary NFS request map and context caches */
 struct kmem_cache *svc_rdma_map_cachep;
@@ -109,7 +109,7 @@ static int read_reset_stat(ctl_table *ta
 		len -= *ppos;
 		if (len > *lenp)
 			len = *lenp;
-		if (len && copy_to_user(buffer, str_buf, len))
+		if (len > sizeof str_buf || (len && copy_to_user(buffer, str_buf, len)))
 			return -EFAULT;
 		*lenp = len;
 		*ppos += len;
@@ -150,63 +150,63 @@ static ctl_table svcrdma_parm_table[] =
 	{
 		.procname	= "rdma_stat_read",
 		.data		= &rdma_stat_read,
-		.maxlen		= sizeof(atomic_t),
+		.maxlen		= sizeof(atomic_unchecked_t),
 		.mode		= 0644,
 		.proc_handler	= read_reset_stat,
 	},
 	{
 		.procname	= "rdma_stat_recv",
 		.data		= &rdma_stat_recv,
-		.maxlen		= sizeof(atomic_t),
+		.maxlen		= sizeof(atomic_unchecked_t),
 		.mode		= 0644,
 		.proc_handler	= read_reset_stat,
 	},
 	{
 		.procname	= "rdma_stat_write",
 		.data		= &rdma_stat_write,
-		.maxlen		= sizeof(atomic_t),
+		.maxlen		= sizeof(atomic_unchecked_t),
 		.mode		= 0644,
 		.proc_handler	= read_reset_stat,
 	},
 	{
 		.procname	= "rdma_stat_sq_starve",
 		.data		= &rdma_stat_sq_starve,
-		.maxlen		= sizeof(atomic_t),
+		.maxlen		= sizeof(atomic_unchecked_t),
 		.mode		= 0644,
 		.proc_handler	= read_reset_stat,
 	},
 	{
 		.procname	= "rdma_stat_rq_starve",
 		.data		= &rdma_stat_rq_starve,
-		.maxlen		= sizeof(atomic_t),
+		.maxlen		= sizeof(atomic_unchecked_t),
 		.mode		= 0644,
 		.proc_handler	= read_reset_stat,
 	},
 	{
 		.procname	= "rdma_stat_rq_poll",
 		.data		= &rdma_stat_rq_poll,
-		.maxlen		= sizeof(atomic_t),
+		.maxlen		= sizeof(atomic_unchecked_t),
 		.mode		= 0644,
 		.proc_handler	= read_reset_stat,
 	},
 	{
 		.procname	= "rdma_stat_rq_prod",
 		.data		= &rdma_stat_rq_prod,
-		.maxlen		= sizeof(atomic_t),
+		.maxlen		= sizeof(atomic_unchecked_t),
 		.mode		= 0644,
 		.proc_handler	= read_reset_stat,
 	},
 	{
 		.procname	= "rdma_stat_sq_poll",
 		.data		= &rdma_stat_sq_poll,
-		.maxlen		= sizeof(atomic_t),
+		.maxlen		= sizeof(atomic_unchecked_t),
 		.mode		= 0644,
 		.proc_handler	= read_reset_stat,
 	},
 	{
 		.procname	= "rdma_stat_sq_prod",
 		.data		= &rdma_stat_sq_prod,
-		.maxlen		= sizeof(atomic_t),
+		.maxlen		= sizeof(atomic_unchecked_t),
 		.mode		= 0644,
 		.proc_handler	= read_reset_stat,
 	},
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/sunrpc/xprtrdma/svc_rdma_recvfrom.c linux-3.3.8-pax/net/sunrpc/xprtrdma/svc_rdma_recvfrom.c
--- linux-3.3.8/net/sunrpc/xprtrdma/svc_rdma_recvfrom.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/net/sunrpc/xprtrdma/svc_rdma_recvfrom.c	2012-03-19 10:43:44.800034608 +0100
@@ -499,7 +499,7 @@ next_sge:
 			svc_rdma_put_context(ctxt, 0);
 			goto out;
 		}
-		atomic_inc(&rdma_stat_read);
+		atomic_inc_unchecked(&rdma_stat_read);
 
 		if (read_wr.num_sge < chl_map->ch[ch_no].count) {
 			chl_map->ch[ch_no].count -= read_wr.num_sge;
@@ -609,7 +609,7 @@ int svc_rdma_recvfrom(struct svc_rqst *r
 				  dto_q);
 		list_del_init(&ctxt->dto_q);
 	} else {
-		atomic_inc(&rdma_stat_rq_starve);
+		atomic_inc_unchecked(&rdma_stat_rq_starve);
 		clear_bit(XPT_DATA, &xprt->xpt_flags);
 		ctxt = NULL;
 	}
@@ -629,7 +629,7 @@ int svc_rdma_recvfrom(struct svc_rqst *r
 	dprintk("svcrdma: processing ctxt=%p on xprt=%p, rqstp=%p, status=%d\n",
 		ctxt, rdma_xprt, rqstp, ctxt->wc_status);
 	BUG_ON(ctxt->wc_status != IB_WC_SUCCESS);
-	atomic_inc(&rdma_stat_recv);
+	atomic_inc_unchecked(&rdma_stat_recv);
 
 	/* Build up the XDR from the receive buffers. */
 	rdma_build_arg_xdr(rqstp, ctxt, ctxt->byte_len);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/sunrpc/xprtrdma/svc_rdma_sendto.c linux-3.3.8-pax/net/sunrpc/xprtrdma/svc_rdma_sendto.c
--- linux-3.3.8/net/sunrpc/xprtrdma/svc_rdma_sendto.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/net/sunrpc/xprtrdma/svc_rdma_sendto.c	2012-03-19 10:43:44.804034607 +0100
@@ -362,7 +362,7 @@ static int send_write(struct svcxprt_rdm
 	write_wr.wr.rdma.remote_addr = to;
 
 	/* Post It */
-	atomic_inc(&rdma_stat_write);
+	atomic_inc_unchecked(&rdma_stat_write);
 	if (svc_rdma_send(xprt, &write_wr))
 		goto err;
 	return 0;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/sunrpc/xprtrdma/svc_rdma_transport.c linux-3.3.8-pax/net/sunrpc/xprtrdma/svc_rdma_transport.c
--- linux-3.3.8/net/sunrpc/xprtrdma/svc_rdma_transport.c	2012-03-19 10:39:14.200049057 +0100
+++ linux-3.3.8-pax/net/sunrpc/xprtrdma/svc_rdma_transport.c	2012-03-19 10:43:44.804034607 +0100
@@ -300,7 +300,7 @@ static void rq_cq_reap(struct svcxprt_rd
 		return;
 
 	ib_req_notify_cq(xprt->sc_rq_cq, IB_CQ_NEXT_COMP);
-	atomic_inc(&rdma_stat_rq_poll);
+	atomic_inc_unchecked(&rdma_stat_rq_poll);
 
 	while ((ret = ib_poll_cq(xprt->sc_rq_cq, 1, &wc)) > 0) {
 		ctxt = (struct svc_rdma_op_ctxt *)(unsigned long)wc.wr_id;
@@ -322,7 +322,7 @@ static void rq_cq_reap(struct svcxprt_rd
 	}
 
 	if (ctxt)
-		atomic_inc(&rdma_stat_rq_prod);
+		atomic_inc_unchecked(&rdma_stat_rq_prod);
 
 	set_bit(XPT_DATA, &xprt->sc_xprt.xpt_flags);
 	/*
@@ -394,7 +394,7 @@ static void sq_cq_reap(struct svcxprt_rd
 		return;
 
 	ib_req_notify_cq(xprt->sc_sq_cq, IB_CQ_NEXT_COMP);
-	atomic_inc(&rdma_stat_sq_poll);
+	atomic_inc_unchecked(&rdma_stat_sq_poll);
 	while ((ret = ib_poll_cq(cq, 1, &wc)) > 0) {
 		if (wc.status != IB_WC_SUCCESS)
 			/* Close the transport */
@@ -412,7 +412,7 @@ static void sq_cq_reap(struct svcxprt_rd
 	}
 
 	if (ctxt)
-		atomic_inc(&rdma_stat_sq_prod);
+		atomic_inc_unchecked(&rdma_stat_sq_prod);
 }
 
 static void sq_comp_handler(struct ib_cq *cq, void *cq_context)
@@ -1274,7 +1274,7 @@ int svc_rdma_send(struct svcxprt_rdma *x
 		spin_lock_bh(&xprt->sc_lock);
 		if (xprt->sc_sq_depth < atomic_read(&xprt->sc_sq_count) + wr_count) {
 			spin_unlock_bh(&xprt->sc_lock);
-			atomic_inc(&rdma_stat_sq_starve);
+			atomic_inc_unchecked(&rdma_stat_sq_starve);
 
 			/* See if we can opportunistically reap SQ WR to make room */
 			sq_cq_reap(xprt);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/tipc/link.c linux-3.3.8-pax/net/tipc/link.c
--- linux-3.3.8/net/tipc/link.c	2012-03-19 10:39:14.212049056 +0100
+++ linux-3.3.8-pax/net/tipc/link.c	2012-03-19 10:43:44.804034607 +0100
@@ -1205,7 +1205,7 @@ static int link_send_sections_long(struc
 	struct tipc_msg fragm_hdr;
 	struct sk_buff *buf, *buf_chain, *prev;
 	u32 fragm_crs, fragm_rest, hsz, sect_rest;
-	const unchar *sect_crs;
+	const unchar __user *sect_crs;
 	int curr_sect;
 	u32 fragm_no;
 
@@ -1249,7 +1249,7 @@ again:
 
 		if (!sect_rest) {
 			sect_rest = msg_sect[++curr_sect].iov_len;
-			sect_crs = (const unchar *)msg_sect[curr_sect].iov_base;
+			sect_crs = (const unchar __user *)msg_sect[curr_sect].iov_base;
 		}
 
 		if (sect_rest < fragm_rest)
@@ -1268,7 +1268,7 @@ error:
 			}
 		} else
 			skb_copy_to_linear_data_offset(buf, fragm_crs,
-						       sect_crs, sz);
+						       (const void __force_kernel *)sect_crs, sz);
 		sect_crs += sz;
 		sect_rest -= sz;
 		fragm_crs += sz;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/tipc/msg.c linux-3.3.8-pax/net/tipc/msg.c
--- linux-3.3.8/net/tipc/msg.c	2012-03-19 10:39:14.216049056 +0100
+++ linux-3.3.8-pax/net/tipc/msg.c	2012-03-19 10:43:44.808034607 +0100
@@ -99,7 +99,7 @@ int tipc_msg_build(struct tipc_msg *hdr,
 					      msg_sect[cnt].iov_len);
 		else
 			skb_copy_to_linear_data_offset(*buf, pos,
-						       msg_sect[cnt].iov_base,
+						       (const void __force_kernel *)msg_sect[cnt].iov_base,
 						       msg_sect[cnt].iov_len);
 		pos += msg_sect[cnt].iov_len;
 	}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/tipc/subscr.c linux-3.3.8-pax/net/tipc/subscr.c
--- linux-3.3.8/net/tipc/subscr.c	2012-03-19 10:39:14.228049055 +0100
+++ linux-3.3.8-pax/net/tipc/subscr.c	2012-03-19 10:43:44.808034607 +0100
@@ -101,7 +101,7 @@ static void subscr_send_event(struct tip
 {
 	struct iovec msg_sect;
 
-	msg_sect.iov_base = (void *)&sub->evt;
+	msg_sect.iov_base = (void __force_user *)&sub->evt;
 	msg_sect.iov_len = sizeof(struct tipc_event);
 
 	sub->evt.event = htohl(event, sub->swap);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/wireless/core.h linux-3.3.8-pax/net/wireless/core.h
--- linux-3.3.8/net/wireless/core.h	2012-03-19 10:39:14.264049053 +0100
+++ linux-3.3.8-pax/net/wireless/core.h	2012-03-19 10:43:44.808034607 +0100
@@ -27,7 +27,7 @@ struct cfg80211_registered_device {
 	struct mutex mtx;
 
 	/* rfkill support */
-	struct rfkill_ops rfkill_ops;
+	rfkill_ops_no_const rfkill_ops;
 	struct rfkill *rfkill;
 	struct work_struct rfkill_sync;
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/wireless/wext-core.c linux-3.3.8-pax/net/wireless/wext-core.c
--- linux-3.3.8/net/wireless/wext-core.c	2012-01-08 19:48:31.479470744 +0100
+++ linux-3.3.8-pax/net/wireless/wext-core.c	2012-03-19 10:43:44.808034607 +0100
@@ -747,8 +747,7 @@ static int ioctl_standard_iw_point(struc
 		 */
 
 		/* Support for very large requests */
-		if ((descr->flags & IW_DESCR_FLAG_NOMAX) &&
-		    (user_length > descr->max_tokens)) {
+		if (user_length > descr->max_tokens) {
 			/* Allow userspace to GET more than max so
 			 * we can support any size GET requests.
 			 * There is still a limit : -ENOMEM.
@@ -785,22 +784,6 @@ static int ioctl_standard_iw_point(struc
 		}
 	}
 
-	if (IW_IS_GET(cmd) && !(descr->flags & IW_DESCR_FLAG_NOMAX)) {
-		/*
-		 * If this is a GET, but not NOMAX, it means that the extra
-		 * data is not bounded by userspace, but by max_tokens. Thus
-		 * set the length to max_tokens. This matches the extra data
-		 * allocation.
-		 * The driver should fill it with the number of tokens it
-		 * provided, and it may check iwp->length rather than having
-		 * knowledge of max_tokens. If the driver doesn't change the
-		 * iwp->length, this ioctl just copies back max_token tokens
-		 * filled with zeroes. Hopefully the driver isn't claiming
-		 * them to be valid data.
-		 */
-		iwp->length = descr->max_tokens;
-	}
-
 	err = handler(dev, info, (union iwreq_data *) iwp, extra);
 
 	iwp->length += essid_compat;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/net/xfrm/xfrm_policy.c linux-3.3.8-pax/net/xfrm/xfrm_policy.c
--- linux-3.3.8/net/xfrm/xfrm_policy.c	2012-03-19 10:39:14.288049052 +0100
+++ linux-3.3.8-pax/net/xfrm/xfrm_policy.c	2012-03-19 10:43:44.812034607 +0100
@@ -299,7 +299,7 @@ static void xfrm_policy_kill(struct xfrm
 {
 	policy->walk.dead = 1;
 
-	atomic_inc(&policy->genid);
+	atomic_inc_unchecked(&policy->genid);
 
 	if (del_timer(&policy->timer))
 		xfrm_pol_put(policy);
@@ -583,7 +583,7 @@ int xfrm_policy_insert(int dir, struct x
 		hlist_add_head(&policy->bydst, chain);
 	xfrm_pol_hold(policy);
 	net->xfrm.policy_count[dir]++;
-	atomic_inc(&flow_cache_genid);
+	atomic_inc_unchecked(&flow_cache_genid);
 	if (delpol)
 		__xfrm_policy_unlink(delpol, dir);
 	policy->index = delpol ? delpol->index : xfrm_gen_index(net, dir);
@@ -1530,7 +1530,7 @@ free_dst:
 	goto out;
 }
 
-static int inline
+static inline int
 xfrm_dst_alloc_copy(void **target, const void *src, int size)
 {
 	if (!*target) {
@@ -1542,7 +1542,7 @@ xfrm_dst_alloc_copy(void **target, const
 	return 0;
 }
 
-static int inline
+static inline int
 xfrm_dst_update_parent(struct dst_entry *dst, const struct xfrm_selector *sel)
 {
 #ifdef CONFIG_XFRM_SUB_POLICY
@@ -1554,7 +1554,7 @@ xfrm_dst_update_parent(struct dst_entry
 #endif
 }
 
-static int inline
+static inline int
 xfrm_dst_update_origin(struct dst_entry *dst, const struct flowi *fl)
 {
 #ifdef CONFIG_XFRM_SUB_POLICY
@@ -1648,7 +1648,7 @@ xfrm_resolve_and_create_bundle(struct xf
 
 	xdst->num_pols = num_pols;
 	memcpy(xdst->pols, pols, sizeof(struct xfrm_policy*) * num_pols);
-	xdst->policy_genid = atomic_read(&pols[0]->genid);
+	xdst->policy_genid = atomic_read_unchecked(&pols[0]->genid);
 
 	return xdst;
 }
@@ -2345,7 +2345,7 @@ static int xfrm_bundle_ok(struct xfrm_ds
 		if (xdst->xfrm_genid != dst->xfrm->genid)
 			return 0;
 		if (xdst->num_pols > 0 &&
-		    xdst->policy_genid != atomic_read(&xdst->pols[0]->genid))
+		    xdst->policy_genid != atomic_read_unchecked(&xdst->pols[0]->genid))
 			return 0;
 
 		mtu = dst_mtu(dst->child);
@@ -2882,7 +2882,7 @@ static int xfrm_policy_migrate(struct xf
 			       sizeof(pol->xfrm_vec[i].saddr));
 			pol->xfrm_vec[i].encap_family = mp->new_family;
 			/* flush bundles */
-			atomic_inc(&pol->genid);
+			atomic_inc_unchecked(&pol->genid);
 		}
 	}
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/scripts/basic/fixdep.c linux-3.3.8-pax/scripts/basic/fixdep.c
--- linux-3.3.8/scripts/basic/fixdep.c	2012-01-08 19:48:31.551470741 +0100
+++ linux-3.3.8-pax/scripts/basic/fixdep.c	2012-03-19 10:43:44.812034607 +0100
@@ -161,7 +161,7 @@ static unsigned int strhash(const char *
 /*
  * Lookup a value in the configuration string.
  */
-static int is_defined_config(const char *name, int len, unsigned int hash)
+static int is_defined_config(const char *name, unsigned int len, unsigned int hash)
 {
 	struct item *aux;
 
@@ -211,10 +211,10 @@ static void clear_config(void)
 /*
  * Record the use of a CONFIG_* word.
  */
-static void use_config(const char *m, int slen)
+static void use_config(const char *m, unsigned int slen)
 {
 	unsigned int hash = strhash(m, slen);
-	int c, i;
+	unsigned int c, i;
 
 	if (is_defined_config(m, slen, hash))
 	    return;
@@ -235,9 +235,9 @@ static void use_config(const char *m, in
 
 static void parse_config_file(const char *map, size_t len)
 {
-	const int *end = (const int *) (map + len);
+	const unsigned int *end = (const unsigned int *) (map + len);
 	/* start at +1, so that p can never be < map */
-	const int *m   = (const int *) map + 1;
+	const unsigned int *m   = (const unsigned int *) map + 1;
 	const char *p, *q;
 
 	for (; m < end; m++) {
@@ -406,7 +406,7 @@ static void print_deps(void)
 static void traps(void)
 {
 	static char test[] __attribute__((aligned(sizeof(int)))) = "CONF";
-	int *p = (int *)test;
+	unsigned int *p = (unsigned int *)test;
 
 	if (*p != INT_CONF) {
 		fprintf(stderr, "fixdep: sizeof(int) != 4 or wrong endianess? %#x\n",
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/scripts/gcc-plugin.sh linux-3.3.8-pax/scripts/gcc-plugin.sh
--- linux-3.3.8/scripts/gcc-plugin.sh	1970-01-01 01:00:00.000000000 +0100
+++ linux-3.3.8-pax/scripts/gcc-plugin.sh	2012-03-19 10:43:44.812034607 +0100
@@ -0,0 +1,2 @@
+#!/bin/sh
+echo -e "#include \"gcc-plugin.h\"\n#include \"tree.h\"\n#include \"tm.h\"\n#include \"rtl.h\"" | $1 -x c -shared - -o /dev/null -I`$2 -print-file-name=plugin`/include >/dev/null 2>&1 && echo "y"
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/scripts/Makefile.build linux-3.3.8-pax/scripts/Makefile.build
--- linux-3.3.8/scripts/Makefile.build	2012-01-08 19:48:31.543470741 +0100
+++ linux-3.3.8-pax/scripts/Makefile.build	2012-03-19 10:43:44.816034608 +0100
@@ -62,7 +62,7 @@ endif
 ifdef KBUILD_ENABLE_EXTRA_GCC_CHECKS
 warning-  := $(empty)
 
-warning-1 := -Wextra -Wunused -Wno-unused-parameter
+warning-1 := -Wextra -Wunused -Wno-unused-parameter -Wno-missing-field-initializers
 warning-1 += -Wmissing-declarations
 warning-1 += -Wmissing-format-attribute
 warning-1 += -Wmissing-prototypes
@@ -109,7 +109,7 @@ endif
 endif
 
 # Do not include host rules unless needed
-ifneq ($(hostprogs-y)$(hostprogs-m),)
+ifneq ($(hostprogs-y)$(hostprogs-m)$(hostlibs-y)$(hostlibs-m),)
 include scripts/Makefile.host
 endif
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/scripts/Makefile.clean linux-3.3.8-pax/scripts/Makefile.clean
--- linux-3.3.8/scripts/Makefile.clean	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/scripts/Makefile.clean	2012-03-19 10:43:44.816034608 +0100
@@ -43,7 +43,8 @@ subdir-ymn	:= $(addprefix $(obj)/,$(subd
 __clean-files	:= $(extra-y) $(always)                  \
 		   $(targets) $(clean-files)             \
 		   $(host-progs)                         \
-		   $(hostprogs-y) $(hostprogs-m) $(hostprogs-)
+		   $(hostprogs-y) $(hostprogs-m) $(hostprogs-) \
+		   $(hostlibs-y) $(hostlibs-m) $(hostlibs-)
 
 __clean-files   := $(filter-out $(no-clean-files), $(__clean-files))
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/scripts/Makefile.host linux-3.3.8-pax/scripts/Makefile.host
--- linux-3.3.8/scripts/Makefile.host	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/scripts/Makefile.host	2012-03-19 10:43:44.816034608 +0100
@@ -31,6 +31,7 @@
 # Note: Shared libraries consisting of C++ files are not supported
 
 __hostprogs := $(sort $(hostprogs-y) $(hostprogs-m))
+__hostlibs := $(sort $(hostlibs-y) $(hostlibs-m))
 
 # C code
 # Executables compiled from a single .c file
@@ -54,6 +55,7 @@ host-cxxobjs	:= $(sort $(foreach m,$(hos
 # Shared libaries (only .c supported)
 # Shared libraries (.so) - all .so files referenced in "xxx-objs"
 host-cshlib	:= $(sort $(filter %.so, $(host-cobjs)))
+host-cshlib	+= $(sort $(filter %.so, $(__hostlibs)))
 # Remove .so files from "xxx-objs"
 host-cobjs	:= $(filter-out %.so,$(host-cobjs))
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/scripts/mod/file2alias.c linux-3.3.8-pax/scripts/mod/file2alias.c
--- linux-3.3.8/scripts/mod/file2alias.c	2012-04-27 22:14:17.949191269 +0200
+++ linux-3.3.8-pax/scripts/mod/file2alias.c	2012-04-27 22:14:29.281190662 +0200
@@ -128,7 +128,7 @@ static void device_id_check(const char *
 			    unsigned long size, unsigned long id_size,
 			    void *symval)
 {
-	int i;
+	unsigned int i;
 
 	if (size % id_size || size < id_size) {
 		if (cross_build != 0)
@@ -158,7 +158,7 @@ static void device_id_check(const char *
 /* USB is special because the bcdDevice can be matched against a numeric range */
 /* Looks like "usb:vNpNdNdcNdscNdpNicNiscNipN" */
 static void do_usb_entry(struct usb_device_id *id,
-			 unsigned int bcdDevice_initial, int bcdDevice_initial_digits,
+			 unsigned int bcdDevice_initial, unsigned int bcdDevice_initial_digits,
 			 unsigned char range_lo, unsigned char range_hi,
 			 unsigned char max, struct module *mod)
 {
@@ -259,7 +259,7 @@ static void do_usb_entry_multi(struct us
 {
 	unsigned int devlo, devhi;
 	unsigned char chi, clo, max;
-	int ndigits;
+	unsigned int ndigits;
 
 	id->match_flags = TO_NATIVE(id->match_flags);
 	id->idVendor = TO_NATIVE(id->idVendor);
@@ -501,7 +501,7 @@ static void do_pnp_device_entry(void *sy
 	for (i = 0; i < count; i++) {
 		const char *id = (char *)devs[i].id;
 		char acpi_id[sizeof(devs[0].id)];
-		int j;
+		unsigned int j;
 
 		buf_printf(&mod->dev_table_buf,
 			   "MODULE_ALIAS(\"pnp:d%s*\");\n", id);
@@ -531,7 +531,7 @@ static void do_pnp_card_entries(void *sy
 
 		for (j = 0; j < PNP_MAX_DEVICES; j++) {
 			const char *id = (char *)card->devs[j].id;
-			int i2, j2;
+			unsigned int i2, j2;
 			int dup = 0;
 
 			if (!id[0])
@@ -557,7 +557,7 @@ static void do_pnp_card_entries(void *sy
 			/* add an individual alias for every device entry */
 			if (!dup) {
 				char acpi_id[sizeof(card->devs[0].id)];
-				int k;
+				unsigned int k;
 
 				buf_printf(&mod->dev_table_buf,
 					   "MODULE_ALIAS(\"pnp:d%s*\");\n", id);
@@ -882,7 +882,7 @@ static void dmi_ascii_filter(char *d, co
 static int do_dmi_entry(const char *filename, struct dmi_system_id *id,
 			char *alias)
 {
-	int i, j;
+	unsigned int i, j;
 
 	sprintf(alias, "dmi*");
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/scripts/mod/modpost.c linux-3.3.8-pax/scripts/mod/modpost.c
--- linux-3.3.8/scripts/mod/modpost.c	2012-04-15 15:08:29.442606352 +0200
+++ linux-3.3.8-pax/scripts/mod/modpost.c	2012-04-15 15:08:34.702606066 +0200
@@ -922,6 +922,7 @@ enum mismatch {
 	ANY_INIT_TO_ANY_EXIT,
 	ANY_EXIT_TO_ANY_INIT,
 	EXPORT_TO_INIT_EXIT,
+	DATA_TO_TEXT
 };
 
 struct sectioncheck {
@@ -1030,6 +1031,12 @@ const struct sectioncheck sectioncheck[]
 	.tosec   = { INIT_SECTIONS, EXIT_SECTIONS, NULL },
 	.mismatch = EXPORT_TO_INIT_EXIT,
 	.symbol_white_list = { DEFAULT_SYMBOL_WHITE_LIST, NULL },
+},
+/* Do not reference code from writable data */
+{
+	.fromsec = { DATA_SECTIONS, NULL },
+	.tosec   = { TEXT_SECTIONS, NULL },
+	.mismatch = DATA_TO_TEXT
 }
 };
 
@@ -1152,10 +1159,10 @@ static Elf_Sym *find_elf_symbol(struct e
 			continue;
 		if (ELF_ST_TYPE(sym->st_info) == STT_SECTION)
 			continue;
-		if (sym->st_value == addr)
-			return sym;
 		/* Find a symbol nearby - addr are maybe negative */
 		d = sym->st_value - addr;
+		if (d == 0)
+			return sym;
 		if (d < 0)
 			d = addr - sym->st_value;
 		if (d < distance) {
@@ -1434,6 +1441,14 @@ static void report_sec_mismatch(const ch
 		tosym, prl_to, prl_to, tosym);
 		free(prl_to);
 		break;
+	case DATA_TO_TEXT:
+/*
+		fprintf(stderr,
+		"The variable %s references\n"
+		"the %s %s%s%s\n",
+		fromsym, to, sec2annotation(tosec), tosym, to_p);
+*/
+		break;
 	}
 	fprintf(stderr, "\n");
 }
@@ -1668,7 +1683,7 @@ static void section_rel(const char *modn
 static void check_sec_ref(struct module *mod, const char *modname,
                           struct elf_info *elf)
 {
-	int i;
+	unsigned int i;
 	Elf_Shdr *sechdrs = elf->sechdrs;
 
 	/* Walk through all sections */
@@ -1766,7 +1781,7 @@ void __attribute__((format(printf, 2, 3)
 	va_end(ap);
 }
 
-void buf_write(struct buffer *buf, const char *s, int len)
+void buf_write(struct buffer *buf, const char *s, unsigned int len)
 {
 	if (buf->size - buf->pos < len) {
 		buf->size += len + SZ;
@@ -1984,7 +1999,7 @@ static void write_if_changed(struct buff
 	if (fstat(fileno(file), &st) < 0)
 		goto close_write;
 
-	if (st.st_size != b->pos)
+	if (st.st_size != (off_t)b->pos)
 		goto close_write;
 
 	tmp = NOFAIL(malloc(b->pos));
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/scripts/mod/modpost.h linux-3.3.8-pax/scripts/mod/modpost.h
--- linux-3.3.8/scripts/mod/modpost.h	2012-04-15 15:08:29.454606345 +0200
+++ linux-3.3.8-pax/scripts/mod/modpost.h	2012-04-15 15:08:34.702606066 +0200
@@ -92,15 +92,15 @@ void *do_nofail(void *ptr, const char *e
 
 struct buffer {
 	char *p;
-	int pos;
-	int size;
+	unsigned int pos;
+	unsigned int size;
 };
 
 void __attribute__((format(printf, 2, 3)))
 buf_printf(struct buffer *buf, const char *fmt, ...);
 
 void
-buf_write(struct buffer *buf, const char *s, int len);
+buf_write(struct buffer *buf, const char *s, unsigned int len);
 
 struct module {
 	struct module *next;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/scripts/mod/sumversion.c linux-3.3.8-pax/scripts/mod/sumversion.c
--- linux-3.3.8/scripts/mod/sumversion.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/scripts/mod/sumversion.c	2012-03-19 10:43:44.820034608 +0100
@@ -470,7 +470,7 @@ static void write_version(const char *fi
 		goto out;
 	}
 
-	if (write(fd, sum, strlen(sum)+1) != strlen(sum)+1) {
+	if (write(fd, sum, strlen(sum)+1) != (ssize_t)strlen(sum)+1) {
 		warn("writing sum in %s failed: %s\n",
 			filename, strerror(errno));
 		goto out;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/scripts/pnmtologo.c linux-3.3.8-pax/scripts/pnmtologo.c
--- linux-3.3.8/scripts/pnmtologo.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/scripts/pnmtologo.c	2012-03-19 10:43:44.820034608 +0100
@@ -237,14 +237,14 @@ static void write_header(void)
     fprintf(out, " *  Linux logo %s\n", logoname);
     fputs(" */\n\n", out);
     fputs("#include <linux/linux_logo.h>\n\n", out);
-    fprintf(out, "static unsigned char %s_data[] __initdata = {\n",
+    fprintf(out, "static unsigned char %s_data[] = {\n",
 	    logoname);
 }
 
 static void write_footer(void)
 {
     fputs("\n};\n\n", out);
-    fprintf(out, "const struct linux_logo %s __initconst = {\n", logoname);
+    fprintf(out, "const struct linux_logo %s = {\n", logoname);
     fprintf(out, "\t.type\t\t= %s,\n", logo_types[logo_type]);
     fprintf(out, "\t.width\t\t= %d,\n", logo_width);
     fprintf(out, "\t.height\t\t= %d,\n", logo_height);
@@ -374,7 +374,7 @@ static void write_logo_clut224(void)
     fputs("\n};\n\n", out);
 
     /* write logo clut */
-    fprintf(out, "static unsigned char %s_clut[] __initdata = {\n",
+    fprintf(out, "static unsigned char %s_clut[] = {\n",
 	    logoname);
     write_hex_cnt = 0;
     for (i = 0; i < logo_clutsize; i++) {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/scripts/tags.sh linux-3.3.8-pax/scripts/tags.sh
--- linux-3.3.8/scripts/tags.sh	2012-03-19 10:39:14.536049039 +0100
+++ linux-3.3.8-pax/scripts/tags.sh	2012-04-01 12:27:08.331600739 +0200
@@ -116,7 +116,7 @@ docscope()
 
 dogtags()
 {
-	all_sources | gtags -f -
+	all_sources | gtags -i -f -
 }
 
 exuberant()
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/security/integrity/ima/ima_api.c linux-3.3.8-pax/security/integrity/ima/ima_api.c
--- linux-3.3.8/security/integrity/ima/ima_api.c	2012-03-19 10:39:14.584049035 +0100
+++ linux-3.3.8-pax/security/integrity/ima/ima_api.c	2012-03-19 10:43:44.824034607 +0100
@@ -75,7 +75,7 @@ void ima_add_violation(struct inode *ino
 	int result;
 
 	/* can overflow, only indicator */
-	atomic_long_inc(&ima_htable.violations);
+	atomic_long_inc_unchecked(&ima_htable.violations);
 
 	entry = kmalloc(sizeof(*entry), GFP_KERNEL);
 	if (!entry) {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/security/integrity/ima/ima_fs.c linux-3.3.8-pax/security/integrity/ima/ima_fs.c
--- linux-3.3.8/security/integrity/ima/ima_fs.c	2012-01-08 19:48:31.727470731 +0100
+++ linux-3.3.8-pax/security/integrity/ima/ima_fs.c	2012-03-19 10:43:44.824034607 +0100
@@ -28,12 +28,12 @@
 static int valid_policy = 1;
 #define TMPBUFLEN 12
 static ssize_t ima_show_htable_value(char __user *buf, size_t count,
-				     loff_t *ppos, atomic_long_t *val)
+				     loff_t *ppos, atomic_long_unchecked_t *val)
 {
 	char tmpbuf[TMPBUFLEN];
 	ssize_t len;
 
-	len = scnprintf(tmpbuf, TMPBUFLEN, "%li\n", atomic_long_read(val));
+	len = scnprintf(tmpbuf, TMPBUFLEN, "%li\n", atomic_long_read_unchecked(val));
 	return simple_read_from_buffer(buf, count, ppos, tmpbuf, len);
 }
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/security/integrity/ima/ima.h linux-3.3.8-pax/security/integrity/ima/ima.h
--- linux-3.3.8/security/integrity/ima/ima.h	2012-01-08 19:48:31.703470733 +0100
+++ linux-3.3.8-pax/security/integrity/ima/ima.h	2012-03-19 10:43:44.824034607 +0100
@@ -86,8 +86,8 @@ void ima_add_violation(struct inode *ino
 extern spinlock_t ima_queue_lock;
 
 struct ima_h_table {
-	atomic_long_t len;	/* number of stored measurements in the list */
-	atomic_long_t violations;
+	atomic_long_unchecked_t len;	/* number of stored measurements in the list */
+	atomic_long_unchecked_t violations;
 	struct hlist_head queue[IMA_MEASURE_HTABLE_SIZE];
 };
 extern struct ima_h_table ima_htable;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/security/integrity/ima/ima_queue.c linux-3.3.8-pax/security/integrity/ima/ima_queue.c
--- linux-3.3.8/security/integrity/ima/ima_queue.c	2012-03-19 10:39:14.584049035 +0100
+++ linux-3.3.8-pax/security/integrity/ima/ima_queue.c	2012-03-19 10:43:44.824034607 +0100
@@ -81,7 +81,7 @@ static int ima_add_digest_entry(struct i
 	INIT_LIST_HEAD(&qe->later);
 	list_add_tail_rcu(&qe->later, &ima_measurements);
 
-	atomic_long_inc(&ima_htable.len);
+	atomic_long_inc_unchecked(&ima_htable.len);
 	key = ima_hash_key(entry->digest);
 	hlist_add_head_rcu(&qe->hnext, &ima_htable.queue[key]);
 	return 0;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/security/Kconfig linux-3.3.8-pax/security/Kconfig
--- linux-3.3.8/security/Kconfig	2012-01-08 19:48:31.667470734 +0100
+++ linux-3.3.8-pax/security/Kconfig	2012-04-19 00:22:54.349392885 +0200
@@ -4,6 +4,636 @@
 
 menu "Security options"
 
+menu "PaX"
+
+	config ARCH_TRACK_EXEC_LIMIT
+	bool
+
+	config PAX_KERNEXEC_PLUGIN
+	bool
+
+	config PAX_PER_CPU_PGD
+	bool
+
+	config TASK_SIZE_MAX_SHIFT
+	int
+	depends on X86_64
+	default 47 if !PAX_PER_CPU_PGD
+	default 42 if PAX_PER_CPU_PGD
+
+config PAX
+	bool "Enable various PaX features"
+	depends on ALPHA || ARM || AVR32 || IA64 || MIPS || PARISC || PPC || SPARC || X86
+	help
+	  This allows you to enable various PaX features.  PaX adds
+	  intrusion prevention mechanisms to the kernel that reduce
+	  the risks posed by exploitable memory corruption bugs.
+
+menu "PaX Control"
+	depends on PAX
+
+config PAX_SOFTMODE
+	bool 'Support soft mode'
+	help
+	  Enabling this option will allow you to run PaX in soft mode, that
+	  is, PaX features will not be enforced by default, only on executables
+	  marked explicitly.  You must also enable PT_PAX_FLAGS or XATTR_PAX_FLAGS
+	  support as they are the only way to mark executables for soft mode use.
+
+	  Soft mode can be activated by using the "pax_softmode=1" kernel command
+	  line option on boot.  Furthermore you can control various PaX features
+	  at runtime via the entries in /proc/sys/kernel/pax.
+
+config PAX_EI_PAX
+	bool 'Use legacy ELF header marking'
+	help
+	  Enabling this option will allow you to control PaX features on
+	  a per executable basis via the 'chpax' utility available at
+	  http://pax.grsecurity.net/.  The control flags will be read from
+	  an otherwise reserved part of the ELF header.  This marking has
+	  numerous drawbacks (no support for soft-mode, toolchain does not
+	  know about the non-standard use of the ELF header) therefore it
+	  has been deprecated in favour of PT_PAX_FLAGS and XATTR_PAX_FLAGS
+	  support.
+
+	  If you have applications not marked by the PT_PAX_FLAGS ELF program
+	  header and you cannot use XATTR_PAX_FLAGS then you MUST enable this
+	  option otherwise they will not get any protection.
+
+	  Note that if you enable PT_PAX_FLAGS or XATTR_PAX_FLAGS marking
+	  support as well, they will override the legacy EI_PAX marks.
+
+config PAX_PT_PAX_FLAGS
+	bool 'Use ELF program header marking'
+	help
+	  Enabling this option will allow you to control PaX features on
+	  a per executable basis via the 'paxctl' utility available at
+	  http://pax.grsecurity.net/.  The control flags will be read from
+	  a PaX specific ELF program header (PT_PAX_FLAGS).  This marking
+	  has the benefits of supporting both soft mode and being fully
+	  integrated into the toolchain (the binutils patch is available
+	  from http://pax.grsecurity.net).
+
+	  If you have applications not marked by the PT_PAX_FLAGS ELF program
+	  header then you MUST enable either XATTR_PAX_FLAGS or EI_PAX marking
+	  support otherwise they will not get any protection.
+
+	  If you enable both PT_PAX_FLAGS and XATTR_PAX_FLAGS support then you
+	  must make sure that the marks are the same if a binary has both marks.
+
+	  Note that if you enable the legacy EI_PAX marking support as well,
+	  the EI_PAX marks will be overridden by the PT_PAX_FLAGS marks.
+
+config PAX_XATTR_PAX_FLAGS
+	bool 'Use filesystem extended attributes marking'
+	select CIFS_XATTR if CIFS
+	select EXT2_FS_XATTR if EXT2_FS
+	select EXT3_FS_XATTR if EXT3_FS
+	select EXT4_FS_XATTR if EXT4_FS
+	select JFFS2_FS_XATTR if JFFS2_FS
+	select REISERFS_FS_XATTR if REISERFS_FS
+	select SQUASHFS_XATTR if SQUASHFS
+	select TMPFS_XATTR if TMPFS
+	select UBIFS_FS_XATTR if UBIFS_FS
+	help
+	  Enabling this option will allow you to control PaX features on
+	  a per executable basis via the 'setfattr' utility.  The control
+	  flags will be read from the user.pax.flags extended attribute of
+	  the file.  This marking has the benefit of supporting binary-only
+	  applications that self-check themselves (e.g., skype) and would
+	  not tolerate chpax/paxctl changes.  The main drawback is that
+	  extended attributes are not supported by some filesystems (e.g.,
+	  isofs, udf, vfat) so copying files through such filesystems will
+	  lose the extended attributes and these PaX markings.
+
+	  If you have applications not marked by the PT_PAX_FLAGS ELF program
+	  header then you MUST enable either XATTR_PAX_FLAGS or EI_PAX marking
+	  support otherwise they will not get any protection.
+
+	  If you enable both PT_PAX_FLAGS and XATTR_PAX_FLAGS support then you
+	  must make sure that the marks are the same if a binary has both marks.
+
+	  Note that if you enable the legacy EI_PAX marking support as well,
+	  the EI_PAX marks will be overridden by the XATTR_PAX_FLAGS marks.
+
+choice
+	prompt 'MAC system integration'
+	default PAX_NO_ACL_FLAGS
+	help
+	  Mandatory Access Control systems have the option of controlling
+	  PaX flags on a per executable basis, choose the method supported
+	  by your particular system.
+
+	  - "none": if your MAC system does not interact with PaX,
+	  - "direct": if your MAC system defines pax_set_initial_flags() itself,
+	  - "hook": if your MAC system uses the pax_set_initial_flags_func callback.
+
+	  NOTE: this option is for developers/integrators only.
+
+	config PAX_NO_ACL_FLAGS
+		bool 'none'
+
+	config PAX_HAVE_ACL_FLAGS
+		bool 'direct'
+
+	config PAX_HOOK_ACL_FLAGS
+		bool 'hook'
+endchoice
+
+endmenu
+
+menu "Non-executable pages"
+	depends on PAX
+
+config PAX_NOEXEC
+	bool "Enforce non-executable pages"
+	depends on ALPHA || (ARM && (CPU_V6 || CPU_V7)) || IA64 || MIPS || PARISC || PPC || S390 || SPARC || X86
+	help
+	  By design some architectures do not allow for protecting memory
+	  pages against execution or even if they do, Linux does not make
+	  use of this feature.  In practice this means that if a page is
+	  readable (such as the stack or heap) it is also executable.
+
+	  There is a well known exploit technique that makes use of this
+	  fact and a common programming mistake where an attacker can
+	  introduce code of his choice somewhere in the attacked program's
+	  memory (typically the stack or the heap) and then execute it.
+
+	  If the attacked program was running with different (typically
+	  higher) privileges than that of the attacker, then he can elevate
+	  his own privilege level (e.g. get a root shell, write to files for
+	  which he does not have write access to, etc).
+
+	  Enabling this option will let you choose from various features
+	  that prevent the injection and execution of 'foreign' code in
+	  a program.
+
+	  This will also break programs that rely on the old behaviour and
+	  expect that dynamically allocated memory via the malloc() family
+	  of functions is executable (which it is not).  Notable examples
+	  are the XFree86 4.x server, the java runtime and wine.
+
+config PAX_PAGEEXEC
+	bool "Paging based non-executable pages"
+	depends on !COMPAT_VDSO && PAX_NOEXEC && (!X86_32 || M586 || M586TSC || M586MMX || M686 || MPENTIUMII || MPENTIUMIII || MPENTIUMM || MCORE2 || MPENTIUM4 || MPSC || MATOM || MK7 || MK8 || MWINCHIPC6 || MWINCHIP2 || MWINCHIP3D || MVIAC3_2 || MVIAC7)
+	select X86_PAE if X86_32 && !HIGHMEM4G && (MCORE2 || MPSC || MATOM || MK8)
+	select ARCH_TRACK_EXEC_LIMIT if X86_32
+	select S390_SWITCH_AMODE if S390
+	select S390_EXEC_PROTECT if S390
+	help
+	  This implementation is based on the paging feature of the CPU.
+	  On i386 without hardware non-executable bit support there is a
+	  variable but usually low performance impact, however on Intel's
+	  P4 core based CPUs it is very high so you should not enable this
+	  for kernels meant to be used on such CPUs.
+
+	  On alpha, avr32, ia64, parisc, sparc, sparc64, x86_64 and i386
+	  with hardware non-executable bit support there is no performance
+	  impact, on ppc the impact is negligible.
+
+	  Note that several architectures require various emulations due to
+	  badly designed userland ABIs, this will cause a performance impact
+	  but will disappear as soon as userland is fixed. For example, ppc
+	  userland MUST have been built with secure-plt by a recent toolchain.
+
+config PAX_SEGMEXEC
+	bool "Segmentation based non-executable pages"
+	depends on !COMPAT_VDSO && PAX_NOEXEC && X86_32
+	help
+	  This implementation is based on the segmentation feature of the
+	  CPU and has a very small performance impact, however applications
+	  will be limited to a 1.5 GB address space instead of the normal
+	  3 GB.
+
+config PAX_EMUTRAMP
+	bool "Emulate trampolines" if (PAX_PAGEEXEC || PAX_SEGMEXEC) && (PARISC || X86)
+	default y if PARISC
+	help
+	  There are some programs and libraries that for one reason or
+	  another attempt to execute special small code snippets from
+	  non-executable memory pages.  Most notable examples are the
+	  signal handler return code generated by the kernel itself and
+	  the GCC trampolines.
+
+	  If you enabled CONFIG_PAX_PAGEEXEC or CONFIG_PAX_SEGMEXEC then
+	  such programs will no longer work under your kernel.
+
+	  As a remedy you can say Y here and use the 'chpax' or 'paxctl'
+	  utilities to enable trampoline emulation for the affected programs
+	  yet still have the protection provided by the non-executable pages.
+
+	  On parisc you MUST enable this option and EMUSIGRT as well, otherwise
+	  your system will not even boot.
+
+	  Alternatively you can say N here and use the 'chpax' or 'paxctl'
+	  utilities to disable CONFIG_PAX_PAGEEXEC and CONFIG_PAX_SEGMEXEC
+	  for the affected files.
+
+	  NOTE: enabling this feature *may* open up a loophole in the
+	  protection provided by non-executable pages that an attacker
+	  could abuse.  Therefore the best solution is to not have any
+	  files on your system that would require this option.  This can
+	  be achieved by not using libc5 (which relies on the kernel
+	  signal handler return code) and not using or rewriting programs
+	  that make use of the nested function implementation of GCC.
+	  Skilled users can just fix GCC itself so that it implements
+	  nested function calls in a way that does not interfere with PaX.
+
+config PAX_EMUSIGRT
+	bool "Automatically emulate sigreturn trampolines"
+	depends on PAX_EMUTRAMP && PARISC
+	default y
+	help
+	  Enabling this option will have the kernel automatically detect
+	  and emulate signal return trampolines executing on the stack
+	  that would otherwise lead to task termination.
+
+	  This solution is intended as a temporary one for users with
+	  legacy versions of libc (libc5, glibc 2.0, uClibc before 0.9.17,
+	  Modula-3 runtime, etc) or executables linked to such, basically
+	  everything that does not specify its own SA_RESTORER function in
+	  normal executable memory like glibc 2.1+ does.
+
+	  On parisc you MUST enable this option, otherwise your system will
+	  not even boot.
+
+	  NOTE: this feature cannot be disabled on a per executable basis
+	  and since it *does* open up a loophole in the protection provided
+	  by non-executable pages, the best solution is to not have any
+	  files on your system that would require this option.
+
+config PAX_MPROTECT
+	bool "Restrict mprotect()"
+	depends on (PAX_PAGEEXEC || PAX_SEGMEXEC)
+	help
+	  Enabling this option will prevent programs from
+	   - changing the executable status of memory pages that were
+	     not originally created as executable,
+	   - making read-only executable pages writable again,
+	   - creating executable pages from anonymous memory,
+	   - making read-only-after-relocations (RELRO) data pages writable again.
+
+	  You should say Y here to complete the protection provided by
+	  the enforcement of non-executable pages.
+
+	  NOTE: you can use the 'chpax' or 'paxctl' utilities to control
+	  this feature on a per file basis.
+
+config PAX_ELFRELOCS
+	bool "Allow ELF text relocations"
+	depends on PAX_MPROTECT
+	default n
+	help
+	  Non-executable pages and mprotect() restrictions are effective
+	  in preventing the introduction of new executable code into an
+	  attacked task's address space.  There remain only two venues
+	  for this kind of attack: if the attacker can execute already
+	  existing code in the attacked task then he can either have it
+	  create and mmap() a file containing his code or have it mmap()
+	  an already existing ELF library that does not have position
+	  independent code in it and use mprotect() on it to make it
+	  writable and copy his code there.  While protecting against
+	  the former approach is beyond PaX, the latter can be prevented
+	  by having only PIC ELF libraries on one's system (which do not
+	  need to relocate their code).  If you are sure this is your case,
+	  then disable this option otherwise be careful as you may not even
+	  be able to boot or log on your system (for example, some PAM
+	  modules are erroneously compiled as non-PIC by default).
+
+	  NOTE: if you are using dynamic ELF executables (as suggested
+	  when using ASLR) then you must have made sure that you linked
+	  your files using the PIC version of crt1 (the et_dyn.tar.gz package
+	  referenced there has already been updated to support this).
+
+config PAX_ETEXECRELOCS
+	bool "Allow ELF ET_EXEC text relocations"
+	depends on PAX_MPROTECT && (ALPHA || IA64 || PARISC)
+	select PAX_ELFRELOCS
+	default y
+	help
+	  On some architectures there are incorrectly created applications
+	  that require text relocations and would not work without enabling
+	  this option.  If you are an alpha, ia64 or parisc user, you should
+	  enable this option and disable it once you have made sure that
+	  none of your applications need it.
+
+config PAX_EMUPLT
+	bool "Automatically emulate ELF PLT"
+	depends on PAX_MPROTECT && (ALPHA || PARISC || SPARC)
+	default y
+	help
+	  Enabling this option will have the kernel automatically detect
+	  and emulate the Procedure Linkage Table entries in ELF files.
+	  On some architectures such entries are in writable memory, and
+	  become non-executable leading to task termination.  Therefore
+	  it is mandatory that you enable this option on alpha, parisc,
+	  sparc and sparc64, otherwise your system would not even boot.
+
+	  NOTE: this feature *does* open up a loophole in the protection
+	  provided by the non-executable pages, therefore the proper
+	  solution is to modify the toolchain to produce a PLT that does
+	  not need to be writable.
+
+config PAX_DLRESOLVE
+	bool 'Emulate old glibc resolver stub'
+	depends on PAX_EMUPLT && SPARC
+	default n
+	help
+	  This option is needed if userland has an old glibc (before 2.4)
+	  that puts a 'save' instruction into the runtime generated resolver
+	  stub that needs special emulation.
+
+config PAX_KERNEXEC
+	bool "Enforce non-executable kernel pages"
+	depends on (PPC || X86) && !COMPAT_VDSO && !XEN && (!X86_32 || X86_WP_WORKS_OK)
+	select PAX_PER_CPU_PGD if X86_64 || (X86_32 && X86_PAE)
+	select PAX_KERNEXEC_PLUGIN if X86_64
+	help
+	  This is the kernel land equivalent of PAGEEXEC and MPROTECT,
+	  that is, enabling this option will make it harder to inject
+	  and execute 'foreign' code in kernel memory itself.
+
+	  Note that on x86_64 kernels there is a known regression when
+	  this feature and KVM/VMX are both enabled in the host kernel.
+
+choice
+	prompt "Return Address Instrumentation Method"
+	default PAX_KERNEXEC_PLUGIN_METHOD_BTS
+	depends on PAX_KERNEXEC_PLUGIN
+	help
+	  Select the method used to instrument function pointer dereferences.
+	  Note that binary modules cannot be instrumented by this approach.
+
+	config PAX_KERNEXEC_PLUGIN_METHOD_BTS
+		bool "bts"
+		help
+		  This method is compatible with binary only modules but has
+		  a higher runtime overhead.
+
+	config PAX_KERNEXEC_PLUGIN_METHOD_OR
+		bool "or"
+		depends on !PARAVIRT
+		help
+		  This method is incompatible with binary only modules but has
+		  a lower runtime overhead.
+endchoice
+
+config PAX_KERNEXEC_PLUGIN_METHOD
+	string
+	default "bts" if PAX_KERNEXEC_PLUGIN_METHOD_BTS
+	default "or" if PAX_KERNEXEC_PLUGIN_METHOD_OR
+	default ""
+
+config PAX_KERNEXEC_MODULE_TEXT
+	int "Minimum amount of memory reserved for module code"
+	default "4"
+	depends on PAX_KERNEXEC && X86_32 && MODULES
+	help
+	  Due to implementation details the kernel must reserve a fixed
+	  amount of memory for module code at compile time that cannot be
+	  changed at runtime.  Here you can specify the minimum amount
+	  in MB that will be reserved.  Due to the same implementation
+	  details this size will always be rounded up to the next 2/4 MB
+	  boundary (depends on PAE) so the actually available memory for
+	  module code will usually be more than this minimum.
+
+	  The default 4 MB should be enough for most users but if you have
+	  an excessive number of modules (e.g., most distribution configs
+	  compile many drivers as modules) or use huge modules such as
+	  nvidia's kernel driver, you will need to adjust this amount.
+	  A good rule of thumb is to look at your currently loaded kernel
+	  modules and add up their sizes.
+
+endmenu
+
+menu "Address Space Layout Randomization"
+	depends on PAX
+
+config PAX_ASLR
+	bool "Address Space Layout Randomization"
+	help
+	  Many if not most exploit techniques rely on the knowledge of
+	  certain addresses in the attacked program.  The following options
+	  will allow the kernel to apply a certain amount of randomization
+	  to specific parts of the program thereby forcing an attacker to
+	  guess them in most cases.  Any failed guess will most likely crash
+	  the attacked program which allows the kernel to detect such attempts
+	  and react on them.  PaX itself provides no reaction mechanisms,
+	  instead it is strongly encouraged that you make use of Nergal's
+	  segvguard (ftp://ftp.pl.openwall.com/misc/segvguard/) or grsecurity's
+	  (http://www.grsecurity.net/) built-in crash detection features or
+	  develop one yourself.
+
+	  By saying Y here you can choose to randomize the following areas:
+	   - top of the task's kernel stack
+	   - top of the task's userland stack
+	   - base address for mmap() requests that do not specify one
+	     (this includes all libraries)
+	   - base address of the main executable
+
+	  It is strongly recommended to say Y here as address space layout
+	  randomization has negligible impact on performance yet it provides
+	  a very effective protection.
+
+	  NOTE: you can use the 'chpax' or 'paxctl' utilities to control
+	  this feature on a per file basis.
+
+config PAX_RANDKSTACK
+	bool "Randomize kernel stack base"
+	depends on X86_TSC && X86
+	help
+	  By saying Y here the kernel will randomize every task's kernel
+	  stack on every system call.  This will not only force an attacker
+	  to guess it but also prevent him from making use of possible
+	  leaked information about it.
+
+	  Since the kernel stack is a rather scarce resource, randomization
+	  may cause unexpected stack overflows, therefore you should very
+	  carefully test your system.  Note that once enabled in the kernel
+	  configuration, this feature cannot be disabled on a per file basis.
+
+config PAX_RANDUSTACK
+	bool "Randomize user stack base"
+	depends on PAX_ASLR
+	help
+	  By saying Y here the kernel will randomize every task's userland
+	  stack.  The randomization is done in two steps where the second
+	  one may apply a big amount of shift to the top of the stack and
+	  cause problems for programs that want to use lots of memory (more
+	  than 2.5 GB if SEGMEXEC is not active, or 1.25 GB when it is).
+	  For this reason the second step can be controlled by 'chpax' or
+	  'paxctl' on a per file basis.
+
+config PAX_RANDMMAP
+	bool "Randomize mmap() base"
+	depends on PAX_ASLR
+	help
+	  By saying Y here the kernel will use a randomized base address for
+	  mmap() requests that do not specify one themselves.  As a result
+	  all dynamically loaded libraries will appear at random addresses
+	  and therefore be harder to exploit by a technique where an attacker
+	  attempts to execute library code for his purposes (e.g. spawn a
+	  shell from an exploited program that is running at an elevated
+	  privilege level).
+
+	  Furthermore, if a program is relinked as a dynamic ELF file, its
+	  base address will be randomized as well, completing the full
+	  randomization of the address space layout.  Attacking such programs
+	  becomes a guess game.  You can find an example of doing this at
+	  http://pax.grsecurity.net/et_dyn.tar.gz and practical samples at
+	  http://www.grsecurity.net/grsec-gcc-specs.tar.gz .
+
+	  NOTE: you can use the 'chpax' or 'paxctl' utilities to control this
+	  feature on a per file basis.
+
+endmenu
+
+menu "Miscellaneous hardening features"
+
+config PAX_MEMORY_SANITIZE
+	bool "Sanitize all freed memory"
+	depends on !HIBERNATION
+	help
+	  By saying Y here the kernel will erase memory pages as soon as they
+	  are freed.  This in turn reduces the lifetime of data stored in the
+	  pages, making it less likely that sensitive information such as
+	  passwords, cryptographic secrets, etc stay in memory for too long.
+
+	  This is especially useful for programs whose runtime is short, long
+	  lived processes and the kernel itself benefit from this as long as
+	  they operate on whole memory pages and ensure timely freeing of pages
+	  that may hold sensitive information.
+
+	  The tradeoff is performance impact, on a single CPU system kernel
+	  compilation sees a 3% slowdown, other systems and workloads may vary
+	  and you are advised to test this feature on your expected workload
+	  before deploying it.
+
+	  Note that this feature does not protect data stored in live pages,
+	  e.g., process memory swapped to disk may stay there for a long time.
+
+config PAX_MEMORY_STACKLEAK
+	bool "Sanitize kernel stack"
+	depends on X86
+	help
+	  By saying Y here the kernel will erase the kernel stack before it
+	  returns from a system call.  This in turn reduces the information
+	  that a kernel stack leak bug can reveal.
+
+	  Note that such a bug can still leak information that was put on
+	  the stack by the current system call (the one eventually triggering
+	  the bug) but traces of earlier system calls on the kernel stack
+	  cannot leak anymore.
+
+	  The tradeoff is performance impact, on a single CPU system kernel
+	  compilation sees a 1% slowdown, other systems and workloads may vary
+	  and you are advised to test this feature on your expected workload
+	  before deploying it.
+
+	  Note: full support for this feature requires gcc with plugin support
+	  so make sure your compiler is at least gcc 4.5.0.  Using older gcc
+	  versions means that functions with large enough stack frames may
+	  leave uninitialized memory behind that may be exposed to a later
+	  syscall leaking the stack.
+
+config PAX_MEMORY_UDEREF
+	bool "Prevent invalid userland pointer dereference"
+	depends on X86 && !COMPAT_VDSO && !UML_X86 && !XEN
+	select PAX_PER_CPU_PGD if X86_64
+	help
+	  By saying Y here the kernel will be prevented from dereferencing
+	  userland pointers in contexts where the kernel expects only kernel
+	  pointers.  This is both a useful runtime debugging feature and a
+	  security measure that prevents exploiting a class of kernel bugs.
+
+	  The tradeoff is that some virtualization solutions may experience
+	  a huge slowdown and therefore you should not enable this feature
+	  for kernels meant to run in such environments.  Whether a given VM
+	  solution is affected or not is best determined by simply trying it
+	  out, the performance impact will be obvious right on boot as this
+	  mechanism engages from very early on.  A good rule of thumb is that
+	  VMs running on CPUs without hardware virtualization support (i.e.,
+	  the majority of IA-32 CPUs) will likely experience the slowdown.
+
+config PAX_REFCOUNT
+	bool "Prevent various kernel object reference counter overflows"
+	depends on (ARM && (CPU_32v6 || CPU_32v6K || CPU_32v7)) || SPARC64 || X86
+	help
+	  By saying Y here the kernel will detect and prevent overflowing
+	  various (but not all) kinds of object reference counters.  Such
+	  overflows can normally occur due to bugs only and are often, if
+	  not always, exploitable.
+
+	  The tradeoff is that data structures protected by an overflowed
+	  refcount will never be freed and therefore will leak memory.  Note
+	  that this leak also happens even without this protection but in
+	  that case the overflow can eventually trigger the freeing of the
+	  data structure while it is still being used elsewhere, resulting
+	  in the exploitable situation that this feature prevents.
+
+	  Since this has a negligible performance impact, you should enable
+	  this feature.
+
+config PAX_USERCOPY
+	bool "Harden heap object copies between kernel and userland"
+	depends on ARM || PPC || SPARC || X86
+	depends on SLAB || SLUB || SLOB
+	help
+	  By saying Y here the kernel will enforce the size of heap objects
+	  when they are copied in either direction between the kernel and
+	  userland, even if only a part of the heap object is copied.
+
+	  Specifically, this checking prevents information leaking from the
+	  kernel heap during kernel to userland copies (if the kernel heap
+	  object is otherwise fully initialized) and prevents kernel heap
+	  overflows during userland to kernel copies.  Only objects belonging
+	  to explictly marked slub types are allowed to be copied at all.
+
+	  Note that the current implementation provides the strictest checks
+	  for the SLUB allocator.
+
+	  If frame pointers are enabled on x86, this option will also restrict
+	  copies into and out of the kernel stack to local variables within a
+	  single frame.
+
+	  Since this has a negligible performance impact, you should enable
+	  this feature.
+
+config PAX_CONSTIFY_PLUGIN
+	bool "Automatically constify eligible structures"
+	depends on !UML
+	help
+	  By saying Y here the compiler will automatically constify a class
+	  of types that contain only function pointers.  This reduces the
+	  kernel's attack surface and also produces a better memory layout.
+
+	  Note that the implementation requires a gcc with plugin support,
+	  i.e., gcc 4.5 or newer.  You may need to install the supporting
+	  headers explicitly in addition to the normal gcc package.
+
+	  Note that if some code really has to modify constified variables
+	  then the source code will have to be patched to allow it.  Examples
+	  can be found in PaX itself (the no_const attribute) and for some
+	  out-of-tree modules at http://www.grsecurity.net/~paxguy1/ .
+
+config PAX_SIZE_OVERFLOW
+	bool "Prevent various integer overflows in function size parameters"
+	depends on X86
+	help
+	  By saying Y here the kernel recomputes expressions of function
+	  arguments marked by a size_overflow attribute with double integer
+	  precision (DImode/TImode for 32/64 bit integer types).
+
+	  The recomputed argument is checked against INT_MAX and an event
+	  is logged on overflow and the triggering process is killed.
+
+	  Homepage:
+	  http://www.grsecurity.net/~ephox/overflow_plugin/
+
+endmenu
+
+endmenu
+
 config KEYS
 	bool "Enable access key retention support"
 	help
@@ -169,7 +799,7 @@ config INTEL_TXT
 config LSM_MMAP_MIN_ADDR
 	int "Low address space for LSM to protect from user allocation"
 	depends on SECURITY && SECURITY_SELINUX
-	default 32768 if ARM
+	default 32768 if ALPHA || ARM || PARISC || SPARC32
 	default 65536
 	help
 	  This is the portion of low virtual memory which should be protected
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/security/keys/compat.c linux-3.3.8-pax/security/keys/compat.c
--- linux-3.3.8/security/keys/compat.c	2012-01-08 19:48:31.735470731 +0100
+++ linux-3.3.8-pax/security/keys/compat.c	2012-03-19 10:43:44.828034607 +0100
@@ -44,7 +44,7 @@ long compat_keyctl_instantiate_key_iov(
 	if (ret == 0)
 		goto no_payload_free;
 
-	ret = keyctl_instantiate_key_common(id, iov, ioc, ret, ringid);
+	ret = keyctl_instantiate_key_common(id, (const struct iovec __force_user *)iov, ioc, ret, ringid);
 
 	if (iov != iovstack)
 		kfree(iov);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/security/keys/keyctl.c linux-3.3.8-pax/security/keys/keyctl.c
--- linux-3.3.8/security/keys/keyctl.c	2012-01-08 19:48:31.763470729 +0100
+++ linux-3.3.8-pax/security/keys/keyctl.c	2012-03-19 10:43:44.828034607 +0100
@@ -921,7 +921,7 @@ static int keyctl_change_reqkey_auth(str
 /*
  * Copy the iovec data from userspace
  */
-static long copy_from_user_iovec(void *buffer, const struct iovec *iov,
+static long copy_from_user_iovec(void *buffer, const struct iovec __user *iov,
 				 unsigned ioc)
 {
 	for (; ioc > 0; ioc--) {
@@ -943,7 +943,7 @@ static long copy_from_user_iovec(void *b
  * If successful, 0 will be returned.
  */
 long keyctl_instantiate_key_common(key_serial_t id,
-				   const struct iovec *payload_iov,
+				   const struct iovec __user *payload_iov,
 				   unsigned ioc,
 				   size_t plen,
 				   key_serial_t ringid)
@@ -1038,7 +1038,7 @@ long keyctl_instantiate_key(key_serial_t
 			[0].iov_len  = plen
 		};
 
-		return keyctl_instantiate_key_common(id, iov, 1, plen, ringid);
+		return keyctl_instantiate_key_common(id, (const struct iovec __force_user *)iov, 1, plen, ringid);
 	}
 
 	return keyctl_instantiate_key_common(id, NULL, 0, 0, ringid);
@@ -1071,7 +1071,7 @@ long keyctl_instantiate_key_iov(key_seri
 	if (ret == 0)
 		goto no_payload_free;
 
-	ret = keyctl_instantiate_key_common(id, iov, ioc, ret, ringid);
+	ret = keyctl_instantiate_key_common(id, (const struct iovec __force_user *)iov, ioc, ret, ringid);
 
 	if (iov != iovstack)
 		kfree(iov);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/security/keys/keyring.c linux-3.3.8-pax/security/keys/keyring.c
--- linux-3.3.8/security/keys/keyring.c	2012-03-19 10:39:14.592049034 +0100
+++ linux-3.3.8-pax/security/keys/keyring.c	2012-03-19 10:43:44.828034607 +0100
@@ -214,15 +214,15 @@ static long keyring_read(const struct ke
 			ret = -EFAULT;
 
 			for (loop = 0; loop < klist->nkeys; loop++) {
+				key_serial_t serial;
 				key = klist->keys[loop];
+				serial = key->serial;
 
 				tmp = sizeof(key_serial_t);
 				if (tmp > buflen)
 					tmp = buflen;
 
-				if (copy_to_user(buffer,
-						 &key->serial,
-						 tmp) != 0)
+				if (copy_to_user(buffer, &serial, tmp))
 					goto error;
 
 				buflen -= tmp;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/security/security.c linux-3.3.8-pax/security/security.c
--- linux-3.3.8/security/security.c	2012-03-19 10:39:14.596049035 +0100
+++ linux-3.3.8-pax/security/security.c	2012-03-19 10:43:44.832034607 +0100
@@ -26,8 +26,8 @@
 static __initdata char chosen_lsm[SECURITY_NAME_MAX + 1] =
 	CONFIG_DEFAULT_SECURITY;
 
-static struct security_operations *security_ops;
-static struct security_operations default_security_ops = {
+static struct security_operations *security_ops __read_only;
+static struct security_operations default_security_ops __read_only = {
 	.name	= "default",
 };
 
@@ -68,7 +68,9 @@ int __init security_init(void)
 
 void reset_security_ops(void)
 {
+	pax_open_kernel();
 	security_ops = &default_security_ops;
+	pax_close_kernel();
 }
 
 /* Save user chosen LSM */
@@ -121,7 +123,9 @@ int __init register_security(struct secu
 	if (security_ops != &default_security_ops)
 		return -EAGAIN;
 
+	pax_open_kernel();
 	security_ops = ops;
+	pax_close_kernel();
 
 	return 0;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/security/selinux/hooks.c linux-3.3.8-pax/security/selinux/hooks.c
--- linux-3.3.8/security/selinux/hooks.c	2012-03-19 10:39:14.600049036 +0100
+++ linux-3.3.8-pax/security/selinux/hooks.c	2012-03-19 10:43:44.832034607 +0100
@@ -5429,7 +5429,7 @@ static int selinux_key_getsecurity(struc
 
 #endif
 
-static struct security_operations selinux_ops = {
+static struct security_operations selinux_ops __read_only = {
 	.name =				"selinux",
 
 	.ptrace_access_check =		selinux_ptrace_access_check,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/security/selinux/include/xfrm.h linux-3.3.8-pax/security/selinux/include/xfrm.h
--- linux-3.3.8/security/selinux/include/xfrm.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/security/selinux/include/xfrm.h	2012-03-19 10:43:44.836034607 +0100
@@ -48,7 +48,7 @@ int selinux_xfrm_decode_session(struct s
 
 static inline void selinux_xfrm_notify_policyload(void)
 {
-	atomic_inc(&flow_cache_genid);
+	atomic_inc_unchecked(&flow_cache_genid);
 }
 #else
 static inline int selinux_xfrm_enabled(void)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/security/smack/smack_lsm.c linux-3.3.8-pax/security/smack/smack_lsm.c
--- linux-3.3.8/security/smack/smack_lsm.c	2012-03-19 10:39:14.604049036 +0100
+++ linux-3.3.8-pax/security/smack/smack_lsm.c	2012-03-19 10:43:44.836034607 +0100
@@ -3481,7 +3481,7 @@ static int smack_inode_getsecctx(struct
 	return 0;
 }
 
-struct security_operations smack_ops = {
+struct security_operations smack_ops __read_only = {
 	.name =				"smack",
 
 	.ptrace_access_check =		smack_ptrace_access_check,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/security/tomoyo/tomoyo.c linux-3.3.8-pax/security/tomoyo/tomoyo.c
--- linux-3.3.8/security/tomoyo/tomoyo.c	2012-03-19 10:39:14.612049034 +0100
+++ linux-3.3.8-pax/security/tomoyo/tomoyo.c	2012-03-19 10:43:44.840034606 +0100
@@ -501,7 +501,7 @@ static int tomoyo_socket_sendmsg(struct
  * tomoyo_security_ops is a "struct security_operations" which is used for
  * registering TOMOYO.
  */
-static struct security_operations tomoyo_security_ops = {
+static struct security_operations tomoyo_security_ops __read_only = {
 	.name                = "tomoyo",
 	.cred_alloc_blank    = tomoyo_cred_alloc_blank,
 	.cred_prepare        = tomoyo_cred_prepare,
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/sound/aoa/codecs/onyx.c linux-3.3.8-pax/sound/aoa/codecs/onyx.c
--- linux-3.3.8/sound/aoa/codecs/onyx.c	2012-01-08 19:48:31.931470720 +0100
+++ linux-3.3.8-pax/sound/aoa/codecs/onyx.c	2012-03-19 10:43:44.840034606 +0100
@@ -54,7 +54,7 @@ struct onyx {
 				spdif_locked:1,
 				analog_locked:1,
 				original_mute:2;
-	int			open_count;
+	local_t			open_count;
 	struct codec_info	*codec_info;
 
 	/* mutex serializes concurrent access to the device
@@ -753,7 +753,7 @@ static int onyx_open(struct codec_info_i
 	struct onyx *onyx = cii->codec_data;
 
 	mutex_lock(&onyx->mutex);
-	onyx->open_count++;
+	local_inc(&onyx->open_count);
 	mutex_unlock(&onyx->mutex);
 
 	return 0;
@@ -765,8 +765,7 @@ static int onyx_close(struct codec_info_
 	struct onyx *onyx = cii->codec_data;
 
 	mutex_lock(&onyx->mutex);
-	onyx->open_count--;
-	if (!onyx->open_count)
+	if (local_dec_and_test(&onyx->open_count))
 		onyx->spdif_locked = onyx->analog_locked = 0;
 	mutex_unlock(&onyx->mutex);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/sound/aoa/codecs/onyx.h linux-3.3.8-pax/sound/aoa/codecs/onyx.h
--- linux-3.3.8/sound/aoa/codecs/onyx.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/sound/aoa/codecs/onyx.h	2012-03-19 10:43:44.840034606 +0100
@@ -11,6 +11,7 @@
 #include <linux/i2c.h>
 #include <asm/pmac_low_i2c.h>
 #include <asm/prom.h>
+#include <asm/local.h>
 
 /* PCM3052 register definitions */
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/sound/core/oss/pcm_oss.c linux-3.3.8-pax/sound/core/oss/pcm_oss.c
--- linux-3.3.8/sound/core/oss/pcm_oss.c	2012-03-19 10:39:14.668049032 +0100
+++ linux-3.3.8-pax/sound/core/oss/pcm_oss.c	2012-03-19 10:43:44.840034606 +0100
@@ -1189,10 +1189,10 @@ snd_pcm_sframes_t snd_pcm_oss_write3(str
 		if (in_kernel) {
 			mm_segment_t fs;
 			fs = snd_enter_user();
-			ret = snd_pcm_lib_write(substream, (void __force __user *)ptr, frames);
+			ret = snd_pcm_lib_write(substream, (void __force_user *)ptr, frames);
 			snd_leave_user(fs);
 		} else {
-			ret = snd_pcm_lib_write(substream, (void __force __user *)ptr, frames);
+			ret = snd_pcm_lib_write(substream, (void __force_user *)ptr, frames);
 		}
 		if (ret != -EPIPE && ret != -ESTRPIPE)
 			break;
@@ -1234,10 +1234,10 @@ snd_pcm_sframes_t snd_pcm_oss_read3(stru
 		if (in_kernel) {
 			mm_segment_t fs;
 			fs = snd_enter_user();
-			ret = snd_pcm_lib_read(substream, (void __force __user *)ptr, frames);
+			ret = snd_pcm_lib_read(substream, (void __force_user *)ptr, frames);
 			snd_leave_user(fs);
 		} else {
-			ret = snd_pcm_lib_read(substream, (void __force __user *)ptr, frames);
+			ret = snd_pcm_lib_read(substream, (void __force_user *)ptr, frames);
 		}
 		if (ret == -EPIPE) {
 			if (runtime->status->state == SNDRV_PCM_STATE_DRAINING) {
@@ -1337,7 +1337,7 @@ static ssize_t snd_pcm_oss_write2(struct
 		struct snd_pcm_plugin_channel *channels;
 		size_t oss_frame_bytes = (runtime->oss.plugin_first->src_width * runtime->oss.plugin_first->src_format.channels) / 8;
 		if (!in_kernel) {
-			if (copy_from_user(runtime->oss.buffer, (const char __force __user *)buf, bytes))
+			if (copy_from_user(runtime->oss.buffer, (const char __force_user *)buf, bytes))
 				return -EFAULT;
 			buf = runtime->oss.buffer;
 		}
@@ -1407,7 +1407,7 @@ static ssize_t snd_pcm_oss_write1(struct
 			}
 		} else {
 			tmp = snd_pcm_oss_write2(substream,
-						 (const char __force *)buf,
+						 (const char __force_kernel *)buf,
 						 runtime->oss.period_bytes, 0);
 			if (tmp <= 0)
 				goto err;
@@ -1433,7 +1433,7 @@ static ssize_t snd_pcm_oss_read2(struct
 	struct snd_pcm_runtime *runtime = substream->runtime;
 	snd_pcm_sframes_t frames, frames1;
 #ifdef CONFIG_SND_PCM_OSS_PLUGINS
-	char __user *final_dst = (char __force __user *)buf;
+	char __user *final_dst = (char __force_user *)buf;
 	if (runtime->oss.plugin_first) {
 		struct snd_pcm_plugin_channel *channels;
 		size_t oss_frame_bytes = (runtime->oss.plugin_last->dst_width * runtime->oss.plugin_last->dst_format.channels) / 8;
@@ -1495,7 +1495,7 @@ static ssize_t snd_pcm_oss_read1(struct
 			xfer += tmp;
 			runtime->oss.buffer_used -= tmp;
 		} else {
-			tmp = snd_pcm_oss_read2(substream, (char __force *)buf,
+			tmp = snd_pcm_oss_read2(substream, (char __force_kernel *)buf,
 						runtime->oss.period_bytes, 0);
 			if (tmp <= 0)
 				goto err;
@@ -1663,7 +1663,7 @@ static int snd_pcm_oss_sync(struct snd_p
 								   size1);
 					size1 /= runtime->channels; /* frames */
 					fs = snd_enter_user();
-					snd_pcm_lib_write(substream, (void __force __user *)runtime->oss.buffer, size1);
+					snd_pcm_lib_write(substream, (void __force_user *)runtime->oss.buffer, size1);
 					snd_leave_user(fs);
 				}
 			} else if (runtime->access == SNDRV_PCM_ACCESS_RW_NONINTERLEAVED) {
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/sound/core/pcm_compat.c linux-3.3.8-pax/sound/core/pcm_compat.c
--- linux-3.3.8/sound/core/pcm_compat.c	2011-10-24 12:48:44.127090819 +0200
+++ linux-3.3.8-pax/sound/core/pcm_compat.c	2012-03-19 10:43:44.844034606 +0100
@@ -31,7 +31,7 @@ static int snd_pcm_ioctl_delay_compat(st
 	int err;
 
 	fs = snd_enter_user();
-	err = snd_pcm_delay(substream, &delay);
+	err = snd_pcm_delay(substream, (snd_pcm_sframes_t __force_user *)&delay);
 	snd_leave_user(fs);
 	if (err < 0)
 		return err;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/sound/core/pcm_native.c linux-3.3.8-pax/sound/core/pcm_native.c
--- linux-3.3.8/sound/core/pcm_native.c	2012-01-08 19:48:32.011470716 +0100
+++ linux-3.3.8-pax/sound/core/pcm_native.c	2012-03-19 10:43:44.844034606 +0100
@@ -2765,11 +2765,11 @@ int snd_pcm_kernel_ioctl(struct snd_pcm_
 	switch (substream->stream) {
 	case SNDRV_PCM_STREAM_PLAYBACK:
 		result = snd_pcm_playback_ioctl1(NULL, substream, cmd,
-						 (void __user *)arg);
+						 (void __force_user *)arg);
 		break;
 	case SNDRV_PCM_STREAM_CAPTURE:
 		result = snd_pcm_capture_ioctl1(NULL, substream, cmd,
-						(void __user *)arg);
+						(void __force_user *)arg);
 		break;
 	default:
 		result = -EINVAL;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/sound/core/seq/seq_device.c linux-3.3.8-pax/sound/core/seq/seq_device.c
--- linux-3.3.8/sound/core/seq/seq_device.c	2012-01-08 19:48:32.035470715 +0100
+++ linux-3.3.8-pax/sound/core/seq/seq_device.c	2012-03-19 10:43:44.848034606 +0100
@@ -64,7 +64,7 @@ struct ops_list {
 	int argsize;		/* argument size */
 
 	/* operators */
-	struct snd_seq_dev_ops ops;
+	struct snd_seq_dev_ops *ops;
 
 	/* registred devices */
 	struct list_head dev_list;	/* list of devices */
@@ -333,7 +333,7 @@ int snd_seq_device_register_driver(char
 
 	mutex_lock(&ops->reg_mutex);
 	/* copy driver operators */
-	ops->ops = *entry;
+	ops->ops = entry;
 	ops->driver |= DRIVER_LOADED;
 	ops->argsize = argsize;
 
@@ -463,7 +463,7 @@ static int init_device(struct snd_seq_de
 			   dev->name, ops->id, ops->argsize, dev->argsize);
 		return -EINVAL;
 	}
-	if (ops->ops.init_device(dev) >= 0) {
+	if (ops->ops->init_device(dev) >= 0) {
 		dev->status = SNDRV_SEQ_DEVICE_REGISTERED;
 		ops->num_init_devices++;
 	} else {
@@ -490,7 +490,7 @@ static int free_device(struct snd_seq_de
 			   dev->name, ops->id, ops->argsize, dev->argsize);
 		return -EINVAL;
 	}
-	if ((result = ops->ops.free_device(dev)) >= 0 || result == -ENXIO) {
+	if ((result = ops->ops->free_device(dev)) >= 0 || result == -ENXIO) {
 		dev->status = SNDRV_SEQ_DEVICE_FREE;
 		dev->driver_data = NULL;
 		ops->num_init_devices--;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/sound/drivers/mts64.c linux-3.3.8-pax/sound/drivers/mts64.c
--- linux-3.3.8/sound/drivers/mts64.c	2012-03-19 10:39:14.676049031 +0100
+++ linux-3.3.8-pax/sound/drivers/mts64.c	2012-03-19 10:43:44.848034606 +0100
@@ -29,6 +29,7 @@
 #include <sound/initval.h>
 #include <sound/rawmidi.h>
 #include <sound/control.h>
+#include <asm/local.h>
 
 #define CARD_NAME "Miditerminal 4140"
 #define DRIVER_NAME "MTS64"
@@ -67,7 +68,7 @@ struct mts64 {
 	struct pardevice *pardev;
 	int pardev_claimed;
 
-	int open_count;
+	local_t open_count;
 	int current_midi_output_port;
 	int current_midi_input_port;
 	u8 mode[MTS64_NUM_INPUT_PORTS];
@@ -697,7 +698,7 @@ static int snd_mts64_rawmidi_open(struct
 {
 	struct mts64 *mts = substream->rmidi->private_data;
 
-	if (mts->open_count == 0) {
+	if (local_read(&mts->open_count) == 0) {
 		/* We don't need a spinlock here, because this is just called 
 		   if the device has not been opened before. 
 		   So there aren't any IRQs from the device */
@@ -705,7 +706,7 @@ static int snd_mts64_rawmidi_open(struct
 
 		msleep(50);
 	}
-	++(mts->open_count);
+	local_inc(&mts->open_count);
 
 	return 0;
 }
@@ -715,8 +716,7 @@ static int snd_mts64_rawmidi_close(struc
 	struct mts64 *mts = substream->rmidi->private_data;
 	unsigned long flags;
 
-	--(mts->open_count);
-	if (mts->open_count == 0) {
+	if (local_dec_return(&mts->open_count) == 0) {
 		/* We need the spinlock_irqsave here because we can still
 		   have IRQs at this point */
 		spin_lock_irqsave(&mts->lock, flags);
@@ -725,8 +725,8 @@ static int snd_mts64_rawmidi_close(struc
 
 		msleep(500);
 
-	} else if (mts->open_count < 0)
-		mts->open_count = 0;
+	} else if (local_read(&mts->open_count) < 0)
+		local_set(&mts->open_count, 0);
 
 	return 0;
 }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/sound/drivers/opl4/opl4_lib.c linux-3.3.8-pax/sound/drivers/opl4/opl4_lib.c
--- linux-3.3.8/sound/drivers/opl4/opl4_lib.c	2012-01-08 19:48:32.111470711 +0100
+++ linux-3.3.8-pax/sound/drivers/opl4/opl4_lib.c	2012-03-19 10:43:44.848034606 +0100
@@ -29,7 +29,7 @@ MODULE_AUTHOR("Clemens Ladisch <clemens@
 MODULE_DESCRIPTION("OPL4 driver");
 MODULE_LICENSE("GPL");
 
-static void inline snd_opl4_wait(struct snd_opl4 *opl4)
+static inline void snd_opl4_wait(struct snd_opl4 *opl4)
 {
 	int timeout = 10;
 	while ((inb(opl4->fm_port) & OPL4_STATUS_BUSY) && --timeout > 0)
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/sound/drivers/portman2x4.c linux-3.3.8-pax/sound/drivers/portman2x4.c
--- linux-3.3.8/sound/drivers/portman2x4.c	2012-03-19 10:39:14.680049031 +0100
+++ linux-3.3.8-pax/sound/drivers/portman2x4.c	2012-03-19 10:43:44.848034606 +0100
@@ -48,6 +48,7 @@
 #include <sound/initval.h>
 #include <sound/rawmidi.h>
 #include <sound/control.h>
+#include <asm/local.h>
 
 #define CARD_NAME "Portman 2x4"
 #define DRIVER_NAME "portman"
@@ -85,7 +86,7 @@ struct portman {
 	struct pardevice *pardev;
 	int pardev_claimed;
 
-	int open_count;
+	local_t open_count;
 	int mode[PORTMAN_NUM_INPUT_PORTS];
 	struct snd_rawmidi_substream *midi_input[PORTMAN_NUM_INPUT_PORTS];
 };
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/sound/firewire/amdtp.c linux-3.3.8-pax/sound/firewire/amdtp.c
--- linux-3.3.8/sound/firewire/amdtp.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/sound/firewire/amdtp.c	2012-03-19 10:43:44.852034606 +0100
@@ -371,7 +371,7 @@ static void queue_out_packet(struct amdt
 		ptr = s->pcm_buffer_pointer + data_blocks;
 		if (ptr >= pcm->runtime->buffer_size)
 			ptr -= pcm->runtime->buffer_size;
-		ACCESS_ONCE(s->pcm_buffer_pointer) = ptr;
+		ACCESS_ONCE_RW(s->pcm_buffer_pointer) = ptr;
 
 		s->pcm_period_pointer += data_blocks;
 		if (s->pcm_period_pointer >= pcm->runtime->period_size) {
@@ -511,7 +511,7 @@ EXPORT_SYMBOL(amdtp_out_stream_start);
  */
 void amdtp_out_stream_update(struct amdtp_out_stream *s)
 {
-	ACCESS_ONCE(s->source_node_id_field) =
+	ACCESS_ONCE_RW(s->source_node_id_field) =
 		(fw_parent_device(s->unit)->card->node_id & 0x3f) << 24;
 }
 EXPORT_SYMBOL(amdtp_out_stream_update);
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/sound/firewire/amdtp.h linux-3.3.8-pax/sound/firewire/amdtp.h
--- linux-3.3.8/sound/firewire/amdtp.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/sound/firewire/amdtp.h	2012-03-19 10:43:44.852034606 +0100
@@ -146,7 +146,7 @@ static inline void amdtp_out_stream_pcm_
 static inline void amdtp_out_stream_pcm_trigger(struct amdtp_out_stream *s,
 						struct snd_pcm_substream *pcm)
 {
-	ACCESS_ONCE(s->pcm) = pcm;
+	ACCESS_ONCE_RW(s->pcm) = pcm;
 }
 
 /**
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/sound/firewire/isight.c linux-3.3.8-pax/sound/firewire/isight.c
--- linux-3.3.8/sound/firewire/isight.c	2012-01-08 19:48:32.139470709 +0100
+++ linux-3.3.8-pax/sound/firewire/isight.c	2012-03-19 10:43:44.852034606 +0100
@@ -96,7 +96,7 @@ static void isight_update_pointers(struc
 	ptr += count;
 	if (ptr >= runtime->buffer_size)
 		ptr -= runtime->buffer_size;
-	ACCESS_ONCE(isight->buffer_pointer) = ptr;
+	ACCESS_ONCE_RW(isight->buffer_pointer) = ptr;
 
 	isight->period_counter += count;
 	if (isight->period_counter >= runtime->period_size) {
@@ -307,7 +307,7 @@ static int isight_hw_params(struct snd_p
 	if (err < 0)
 		return err;
 
-	ACCESS_ONCE(isight->pcm_active) = true;
+	ACCESS_ONCE_RW(isight->pcm_active) = true;
 
 	return 0;
 }
@@ -340,7 +340,7 @@ static int isight_hw_free(struct snd_pcm
 {
 	struct isight *isight = substream->private_data;
 
-	ACCESS_ONCE(isight->pcm_active) = false;
+	ACCESS_ONCE_RW(isight->pcm_active) = false;
 
 	mutex_lock(&isight->mutex);
 	isight_stop_streaming(isight);
@@ -433,10 +433,10 @@ static int isight_trigger(struct snd_pcm
 
 	switch (cmd) {
 	case SNDRV_PCM_TRIGGER_START:
-		ACCESS_ONCE(isight->pcm_running) = true;
+		ACCESS_ONCE_RW(isight->pcm_running) = true;
 		break;
 	case SNDRV_PCM_TRIGGER_STOP:
-		ACCESS_ONCE(isight->pcm_running) = false;
+		ACCESS_ONCE_RW(isight->pcm_running) = false;
 		break;
 	default:
 		return -EINVAL;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/sound/isa/cmi8330.c linux-3.3.8-pax/sound/isa/cmi8330.c
--- linux-3.3.8/sound/isa/cmi8330.c	2012-03-19 10:39:14.696049030 +0100
+++ linux-3.3.8-pax/sound/isa/cmi8330.c	2012-03-19 10:43:44.852034606 +0100
@@ -172,7 +172,7 @@ struct snd_cmi8330 {
 
 	struct snd_pcm *pcm;
 	struct snd_cmi8330_stream {
-		struct snd_pcm_ops ops;
+		snd_pcm_ops_no_const ops;
 		snd_pcm_open_callback_t open;
 		void *private_data; /* sb or wss */
 	} streams[2];
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/sound/oss/sb_audio.c linux-3.3.8-pax/sound/oss/sb_audio.c
--- linux-3.3.8/sound/oss/sb_audio.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/sound/oss/sb_audio.c	2012-03-19 10:43:44.856034605 +0100
@@ -901,7 +901,7 @@ sb16_copy_from_user(int dev,
 		buf16 = (signed short *)(localbuf + localoffs);
 		while (c)
 		{
-			locallen = (c >= LBUFCOPYSIZE ? LBUFCOPYSIZE : c);
+			locallen = ((unsigned)c >= LBUFCOPYSIZE ? LBUFCOPYSIZE : c);
 			if (copy_from_user(lbuf8,
 					   userbuf+useroffs + p,
 					   locallen))
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/sound/oss/swarm_cs4297a.c linux-3.3.8-pax/sound/oss/swarm_cs4297a.c
--- linux-3.3.8/sound/oss/swarm_cs4297a.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/sound/oss/swarm_cs4297a.c	2012-03-19 10:43:44.868034604 +0100
@@ -2606,7 +2606,6 @@ static int __init cs4297a_init(void)
 {
 	struct cs4297a_state *s;
 	u32 pwr, id;
-	mm_segment_t fs;
 	int rval;
 #ifndef CONFIG_BCM_CS4297A_CSWARM
 	u64 cfg;
@@ -2696,22 +2695,23 @@ static int __init cs4297a_init(void)
         if (!rval) {
 		char *sb1250_duart_present;
 
+#if 0
+                mm_segment_t fs;
                 fs = get_fs();
                 set_fs(KERNEL_DS);
-#if 0
                 val = SOUND_MASK_LINE;
                 mixer_ioctl(s, SOUND_MIXER_WRITE_RECSRC, (unsigned long) &val);
                 for (i = 0; i < ARRAY_SIZE(initvol); i++) {
                         val = initvol[i].vol;
                         mixer_ioctl(s, initvol[i].mixch, (unsigned long) &val);
                 }
+                set_fs(fs);
 //                cs4297a_write_ac97(s, 0x18, 0x0808);
 #else
                 //                cs4297a_write_ac97(s, 0x5e, 0x180);
                 cs4297a_write_ac97(s, 0x02, 0x0808);
                 cs4297a_write_ac97(s, 0x18, 0x0808);
 #endif
-                set_fs(fs);
 
                 list_add(&s->list, &cs4297a_devs);
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/sound/pci/hda/hda_codec.h linux-3.3.8-pax/sound/pci/hda/hda_codec.h
--- linux-3.3.8/sound/pci/hda/hda_codec.h	2012-03-19 10:39:14.984049016 +0100
+++ linux-3.3.8-pax/sound/pci/hda/hda_codec.h	2012-03-19 10:43:44.868034605 +0100
@@ -611,7 +611,7 @@ struct hda_bus_ops {
 	/* notify power-up/down from codec to controller */
 	void (*pm_notify)(struct hda_bus *bus);
 #endif
-};
+} __no_const;
 
 /* template to pass to the bus constructor */
 struct hda_bus_template {
@@ -713,6 +713,7 @@ struct hda_codec_ops {
 #endif
 	void (*reboot_notify)(struct hda_codec *codec);
 };
+typedef struct hda_codec_ops __no_const hda_codec_ops_no_const;
 
 /* record for amp information cache */
 struct hda_cache_head {
@@ -743,7 +744,7 @@ struct hda_pcm_ops {
 		       struct snd_pcm_substream *substream);
 	int (*cleanup)(struct hda_pcm_stream *info, struct hda_codec *codec,
 		       struct snd_pcm_substream *substream);
-};
+} __no_const;
 
 /* PCM information for each substream */
 struct hda_pcm_stream {
@@ -801,7 +802,7 @@ struct hda_codec {
 	const char *modelname;	/* model name for preset */
 
 	/* set by patch */
-	struct hda_codec_ops patch_ops;
+	hda_codec_ops_no_const patch_ops;
 
 	/* PCM to create, set by patch_ops.build_pcms callback */
 	unsigned int num_pcms;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/sound/pci/ice1712/ice1712.h linux-3.3.8-pax/sound/pci/ice1712/ice1712.h
--- linux-3.3.8/sound/pci/ice1712/ice1712.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/sound/pci/ice1712/ice1712.h	2012-03-19 10:43:44.876034604 +0100
@@ -269,7 +269,7 @@ struct snd_ak4xxx_private {
 	unsigned int mask_flags;	/* total mask bits */
 	struct snd_akm4xxx_ops {
 		void (*set_rate_val)(struct snd_akm4xxx *ak, unsigned int rate);
-	} ops;
+	} __no_const ops;
 };
 
 struct snd_ice1712_spdif {
@@ -285,7 +285,7 @@ struct snd_ice1712_spdif {
 		int (*default_put)(struct snd_ice1712 *, struct snd_ctl_elem_value *ucontrol);
 		void (*stream_get)(struct snd_ice1712 *, struct snd_ctl_elem_value *ucontrol);
 		int (*stream_put)(struct snd_ice1712 *, struct snd_ctl_elem_value *ucontrol);
-	} ops;
+	} __no_const ops;
 };
 
 
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/sound/pci/ymfpci/ymfpci_main.c linux-3.3.8-pax/sound/pci/ymfpci/ymfpci_main.c
--- linux-3.3.8/sound/pci/ymfpci/ymfpci_main.c	2012-03-19 10:39:15.100049008 +0100
+++ linux-3.3.8-pax/sound/pci/ymfpci/ymfpci_main.c	2012-03-19 10:43:44.880034605 +0100
@@ -203,8 +203,8 @@ static void snd_ymfpci_hw_stop(struct sn
 		if ((snd_ymfpci_readl(chip, YDSXGR_STATUS) & 2) == 0)
 			break;
 	}
-	if (atomic_read(&chip->interrupt_sleep_count)) {
-		atomic_set(&chip->interrupt_sleep_count, 0);
+	if (atomic_read_unchecked(&chip->interrupt_sleep_count)) {
+		atomic_set_unchecked(&chip->interrupt_sleep_count, 0);
 		wake_up(&chip->interrupt_sleep);
 	}
       __end:
@@ -788,7 +788,7 @@ static void snd_ymfpci_irq_wait(struct s
 		 	continue;
 		init_waitqueue_entry(&wait, current);
 		add_wait_queue(&chip->interrupt_sleep, &wait);
-		atomic_inc(&chip->interrupt_sleep_count);
+		atomic_inc_unchecked(&chip->interrupt_sleep_count);
 		schedule_timeout_uninterruptible(msecs_to_jiffies(50));
 		remove_wait_queue(&chip->interrupt_sleep, &wait);
 	}
@@ -826,8 +826,8 @@ static irqreturn_t snd_ymfpci_interrupt(
 		snd_ymfpci_writel(chip, YDSXGR_MODE, mode);
 		spin_unlock(&chip->reg_lock);
 
-		if (atomic_read(&chip->interrupt_sleep_count)) {
-			atomic_set(&chip->interrupt_sleep_count, 0);
+		if (atomic_read_unchecked(&chip->interrupt_sleep_count)) {
+			atomic_set_unchecked(&chip->interrupt_sleep_count, 0);
 			wake_up(&chip->interrupt_sleep);
 		}
 	}
@@ -2389,7 +2389,7 @@ int __devinit snd_ymfpci_create(struct s
 	spin_lock_init(&chip->reg_lock);
 	spin_lock_init(&chip->voice_lock);
 	init_waitqueue_head(&chip->interrupt_sleep);
-	atomic_set(&chip->interrupt_sleep_count, 0);
+	atomic_set_unchecked(&chip->interrupt_sleep_count, 0);
 	chip->card = card;
 	chip->pci = pci;
 	chip->irq = -1;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/sound/soc/soc-pcm.c linux-3.3.8-pax/sound/soc/soc-pcm.c
--- linux-3.3.8/sound/soc/soc-pcm.c	2012-03-19 10:39:15.580048982 +0100
+++ linux-3.3.8-pax/sound/soc/soc-pcm.c	2012-03-19 10:43:44.888034603 +0100
@@ -605,7 +605,7 @@ int soc_new_pcm(struct snd_soc_pcm_runti
 	struct snd_soc_platform *platform = rtd->platform;
 	struct snd_soc_dai *codec_dai = rtd->codec_dai;
 	struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
-	struct snd_pcm_ops *soc_pcm_ops = &rtd->ops;
+	snd_pcm_ops_no_const *soc_pcm_ops = &rtd->ops;
 	struct snd_pcm *pcm;
 	char new_name[64];
 	int ret = 0, playback = 0, capture = 0;
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/sound/usb/card.h linux-3.3.8-pax/sound/usb/card.h
--- linux-3.3.8/sound/usb/card.h	2012-03-19 10:39:15.612048982 +0100
+++ linux-3.3.8-pax/sound/usb/card.h	2012-03-19 10:43:44.888034603 +0100
@@ -45,6 +45,7 @@ struct snd_urb_ops {
 	int (*prepare_sync)(struct snd_usb_substream *subs, struct snd_pcm_runtime *runtime, struct urb *u);
 	int (*retire_sync)(struct snd_usb_substream *subs, struct snd_pcm_runtime *runtime, struct urb *u);
 };
+typedef struct snd_urb_ops __no_const snd_urb_ops_no_const;
 
 struct snd_usb_substream {
 	struct snd_usb_stream *stream;
@@ -94,7 +95,7 @@ struct snd_usb_substream {
 	struct snd_pcm_hw_constraint_list rate_list;	/* limited rates */
 	spinlock_t lock;
 
-	struct snd_urb_ops ops;		/* callbacks (must be filled at init) */
+	snd_urb_ops_no_const ops;	/* callbacks (must be filled at init) */
 	int last_frame_number;          /* stored frame number */
 	int last_delay;                 /* stored delay */
 };
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/tools/gcc/checker_plugin.c linux-3.3.8-pax/tools/gcc/checker_plugin.c
--- linux-3.3.8/tools/gcc/checker_plugin.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-3.3.8-pax/tools/gcc/checker_plugin.c	2012-03-19 10:43:44.888034603 +0100
@@ -0,0 +1,171 @@
+/*
+ * Copyright 2011 by the PaX Team <pageexec@freemail.hu>
+ * Licensed under the GPL v2
+ *
+ * Note: the choice of the license means that the compilation process is
+ *       NOT 'eligible' as defined by gcc's library exception to the GPL v3,
+ *       but for the kernel it doesn't matter since it doesn't link against
+ *       any of the gcc libraries
+ *
+ * gcc plugin to implement various sparse (source code checker) features
+ *
+ * TODO:
+ * - define separate __iomem, __percpu and __rcu address spaces (lots of code to patch)
+ *
+ * BUGS:
+ * - none known
+ */
+#include "gcc-plugin.h"
+#include "config.h"
+#include "system.h"
+#include "coretypes.h"
+#include "tree.h"
+#include "tree-pass.h"
+#include "flags.h"
+#include "intl.h"
+#include "toplev.h"
+#include "plugin.h"
+//#include "expr.h" where are you...
+#include "diagnostic.h"
+#include "plugin-version.h"
+#include "tm.h"
+#include "function.h"
+#include "basic-block.h"
+#include "gimple.h"
+#include "rtl.h"
+#include "emit-rtl.h"
+#include "tree-flow.h"
+#include "target.h"
+
+extern void c_register_addr_space (const char *str, addr_space_t as);
+extern enum machine_mode default_addr_space_pointer_mode (addr_space_t);
+extern enum machine_mode default_addr_space_address_mode (addr_space_t);
+extern bool default_addr_space_valid_pointer_mode(enum machine_mode mode, addr_space_t as);
+extern bool default_addr_space_legitimate_address_p(enum machine_mode mode, rtx mem, bool strict, addr_space_t as);
+extern rtx default_addr_space_legitimize_address(rtx x, rtx oldx, enum machine_mode mode, addr_space_t as);
+
+extern void print_gimple_stmt(FILE *, gimple, int, int);
+extern rtx emit_move_insn(rtx x, rtx y);
+
+int plugin_is_GPL_compatible;
+
+static struct plugin_info checker_plugin_info = {
+	.version	= "201111150100",
+};
+
+#define ADDR_SPACE_KERNEL		0
+#define ADDR_SPACE_FORCE_KERNEL		1
+#define ADDR_SPACE_USER			2
+#define ADDR_SPACE_FORCE_USER		3
+#define ADDR_SPACE_IOMEM		0
+#define ADDR_SPACE_FORCE_IOMEM		0
+#define ADDR_SPACE_PERCPU		0
+#define ADDR_SPACE_FORCE_PERCPU		0
+#define ADDR_SPACE_RCU			0
+#define ADDR_SPACE_FORCE_RCU		0
+
+static enum machine_mode checker_addr_space_pointer_mode(addr_space_t addrspace)
+{
+	return default_addr_space_pointer_mode(ADDR_SPACE_GENERIC);
+}
+
+static enum machine_mode checker_addr_space_address_mode(addr_space_t addrspace)
+{
+	return default_addr_space_address_mode(ADDR_SPACE_GENERIC);
+}
+
+static bool checker_addr_space_valid_pointer_mode(enum machine_mode mode, addr_space_t as)
+{
+	return default_addr_space_valid_pointer_mode(mode, as);
+}
+
+static bool checker_addr_space_legitimate_address_p(enum machine_mode mode, rtx mem, bool strict, addr_space_t as)
+{
+	return default_addr_space_legitimate_address_p(mode, mem, strict, ADDR_SPACE_GENERIC);
+}
+
+static rtx checker_addr_space_legitimize_address(rtx x, rtx oldx, enum machine_mode mode, addr_space_t as)
+{
+	return default_addr_space_legitimize_address(x, oldx, mode, as);
+}
+
+static bool checker_addr_space_subset_p(addr_space_t subset, addr_space_t superset)
+{
+	if (subset == ADDR_SPACE_FORCE_KERNEL && superset == ADDR_SPACE_KERNEL)
+		return true;
+
+	if (subset == ADDR_SPACE_FORCE_USER && superset == ADDR_SPACE_USER)
+		return true;
+
+	if (subset == ADDR_SPACE_FORCE_IOMEM && superset == ADDR_SPACE_IOMEM)
+		return true;
+
+	if (subset == ADDR_SPACE_KERNEL && superset == ADDR_SPACE_FORCE_USER)
+		return true;
+
+	if (subset == ADDR_SPACE_KERNEL && superset == ADDR_SPACE_FORCE_IOMEM)
+		return true;
+
+	if (subset == ADDR_SPACE_USER && superset == ADDR_SPACE_FORCE_KERNEL)
+		return true;
+
+	if (subset == ADDR_SPACE_IOMEM && superset == ADDR_SPACE_FORCE_KERNEL)
+		return true;
+
+	return subset == superset;
+}
+
+static rtx checker_addr_space_convert(rtx op, tree from_type, tree to_type)
+{
+//	addr_space_t from_as = TYPE_ADDR_SPACE(TREE_TYPE(from_type));
+//	addr_space_t to_as = TYPE_ADDR_SPACE(TREE_TYPE(to_type));
+
+	return op;
+}
+
+static void register_checker_address_spaces(void *event_data, void *data)
+{
+	c_register_addr_space("__kernel", ADDR_SPACE_KERNEL);
+	c_register_addr_space("__force_kernel", ADDR_SPACE_FORCE_KERNEL);
+	c_register_addr_space("__user", ADDR_SPACE_USER);
+	c_register_addr_space("__force_user", ADDR_SPACE_FORCE_USER);
+//	c_register_addr_space("__iomem", ADDR_SPACE_IOMEM);
+//	c_register_addr_space("__force_iomem", ADDR_SPACE_FORCE_IOMEM);
+//	c_register_addr_space("__percpu", ADDR_SPACE_PERCPU);
+//	c_register_addr_space("__force_percpu", ADDR_SPACE_FORCE_PERCPU);
+//	c_register_addr_space("__rcu", ADDR_SPACE_RCU);
+//	c_register_addr_space("__force_rcu", ADDR_SPACE_FORCE_RCU);
+
+	targetm.addr_space.pointer_mode		= checker_addr_space_pointer_mode;
+	targetm.addr_space.address_mode		= checker_addr_space_address_mode;
+	targetm.addr_space.valid_pointer_mode	= checker_addr_space_valid_pointer_mode;
+	targetm.addr_space.legitimate_address_p	= checker_addr_space_legitimate_address_p;
+//	targetm.addr_space.legitimize_address	= checker_addr_space_legitimize_address;
+	targetm.addr_space.subset_p		= checker_addr_space_subset_p;
+	targetm.addr_space.convert		= checker_addr_space_convert;
+}
+
+int plugin_init(struct plugin_name_args *plugin_info, struct plugin_gcc_version *version)
+{
+	const char * const plugin_name = plugin_info->base_name;
+	const int argc = plugin_info->argc;
+	const struct plugin_argument * const argv = plugin_info->argv;
+	int i;
+
+	if (!plugin_default_version_check(version, &gcc_version)) {
+		error(G_("incompatible gcc/plugin versions"));
+		return 1;
+	}
+
+	register_callback(plugin_name, PLUGIN_INFO, NULL, &checker_plugin_info);
+
+	for (i = 0; i < argc; ++i)
+		error(G_("unkown option '-fplugin-arg-%s-%s'"), plugin_name, argv[i].key);
+
+	if (TARGET_64BIT == 0)
+		return 0;
+
+	register_callback(plugin_name, PLUGIN_PRAGMAS, register_checker_address_spaces, NULL);
+
+	return 0;
+}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/tools/gcc/colorize_plugin.c linux-3.3.8-pax/tools/gcc/colorize_plugin.c
--- linux-3.3.8/tools/gcc/colorize_plugin.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-3.3.8-pax/tools/gcc/colorize_plugin.c	2012-03-19 10:43:44.888034603 +0100
@@ -0,0 +1,147 @@
+/*
+ * Copyright 2012 by PaX Team <pageexec@freemail.hu>
+ * Licensed under the GPL v2
+ *
+ * Note: the choice of the license means that the compilation process is
+ *       NOT 'eligible' as defined by gcc's library exception to the GPL v3,
+ *       but for the kernel it doesn't matter since it doesn't link against
+ *       any of the gcc libraries
+ *
+ * gcc plugin to colorize diagnostic output
+ *
+ */
+
+#include "gcc-plugin.h"
+#include "config.h"
+#include "system.h"
+#include "coretypes.h"
+#include "tree.h"
+#include "tree-pass.h"
+#include "flags.h"
+#include "intl.h"
+#include "toplev.h"
+#include "plugin.h"
+#include "diagnostic.h"
+#include "plugin-version.h"
+#include "tm.h"
+
+int plugin_is_GPL_compatible;
+
+static struct plugin_info colorize_plugin_info = {
+	.version	= "201203092200",
+};
+
+#define GREEN		"\033[32m\033[2m"
+#define LIGHTGREEN	"\033[32m\033[1m"
+#define YELLOW		"\033[33m\033[2m"
+#define LIGHTYELLOW	"\033[33m\033[1m"
+#define RED		"\033[31m\033[2m"
+#define LIGHTRED	"\033[31m\033[1m"
+#define BLUE		"\033[34m\033[2m"
+#define LIGHTBLUE	"\033[34m\033[1m"
+#define BRIGHT		"\033[m\033[1m"
+#define NORMAL		"\033[m"
+
+static diagnostic_starter_fn old_starter;
+static diagnostic_finalizer_fn old_finalizer;
+
+static void start_colorize(diagnostic_context *context, diagnostic_info *diagnostic)
+{
+	const char *color;
+	char *newprefix;
+
+	switch (diagnostic->kind) {
+	case DK_NOTE:
+		color = LIGHTBLUE;
+		break;
+
+	case DK_PEDWARN:
+	case DK_WARNING:
+		color = LIGHTYELLOW;
+		break;
+
+	case DK_ERROR:
+	case DK_FATAL:
+	case DK_ICE:
+	case DK_PERMERROR:
+	case DK_SORRY:
+		color = LIGHTRED;
+		break;
+
+	default:
+		color = NORMAL;
+	}
+
+	old_starter(context, diagnostic);
+	if (-1 == asprintf(&newprefix, "%s%s" NORMAL, color, context->printer->prefix))
+		return;
+	pp_destroy_prefix(context->printer);
+	pp_set_prefix(context->printer, newprefix);
+}
+
+static void finalize_colorize(diagnostic_context *context, diagnostic_info *diagnostic)
+{
+	old_finalizer(context, diagnostic);
+}
+
+static void colorize_arm(void)
+{
+	old_starter = diagnostic_starter(global_dc);
+	old_finalizer = diagnostic_finalizer(global_dc);
+
+	diagnostic_starter(global_dc) = start_colorize;
+	diagnostic_finalizer(global_dc) = finalize_colorize;
+}
+
+static unsigned int execute_colorize_rearm(void)
+{
+	if (diagnostic_starter(global_dc) == start_colorize)
+		return 0;
+
+	colorize_arm();
+	return 0;
+}
+
+struct simple_ipa_opt_pass pass_ipa_colorize_rearm = {
+	.pass = {
+		.type			= SIMPLE_IPA_PASS,
+		.name			= "colorize_rearm",
+		.gate			= NULL,
+		.execute		= execute_colorize_rearm,
+		.sub			= NULL,
+		.next			= NULL,
+		.static_pass_number	= 0,
+		.tv_id			= TV_NONE,
+		.properties_required	= 0,
+		.properties_provided	= 0,
+		.properties_destroyed	= 0,
+		.todo_flags_start	= 0,
+		.todo_flags_finish	= 0
+	}
+};
+
+static void colorize_start_unit(void *gcc_data, void *user_data)
+{
+	colorize_arm();
+}
+
+int plugin_init(struct plugin_name_args *plugin_info, struct plugin_gcc_version *version)
+{
+	const char * const plugin_name = plugin_info->base_name;
+	struct register_pass_info colorize_rearm_pass_info = {
+		.pass				= &pass_ipa_colorize_rearm.pass,
+		.reference_pass_name		= "*free_lang_data",
+		.ref_pass_instance_number	= 0,
+		.pos_op 			= PASS_POS_INSERT_AFTER
+	};
+
+	if (!plugin_default_version_check(version, &gcc_version)) {
+		error(G_("incompatible gcc/plugin versions"));
+		return 1;
+	}
+
+	register_callback(plugin_name, PLUGIN_INFO, NULL, &colorize_plugin_info);
+	register_callback(plugin_name, PLUGIN_START_UNIT, &colorize_start_unit, NULL);
+	register_callback(plugin_name, PLUGIN_PASS_MANAGER_SETUP, NULL, &colorize_rearm_pass_info);
+	return 0;
+}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/tools/gcc/constify_plugin.c linux-3.3.8-pax/tools/gcc/constify_plugin.c
--- linux-3.3.8/tools/gcc/constify_plugin.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-3.3.8-pax/tools/gcc/constify_plugin.c	2012-05-30 02:13:59.687048363 +0200
@@ -0,0 +1,328 @@
+/*
+ * Copyright 2011 by Emese Revfy <re.emese@gmail.com>
+ * Copyright 2011 by PaX Team <pageexec@freemail.hu>
+ * Licensed under the GPL v2, or (at your option) v3
+ *
+ * This gcc plugin constifies all structures which contain only function pointers or are explicitly marked for constification.
+ *
+ * Homepage:
+ * http://www.grsecurity.net/~ephox/const_plugin/
+ *
+ * Usage:
+ * $ gcc -I`gcc -print-file-name=plugin`/include -fPIC -shared -O2 -o constify_plugin.so constify_plugin.c
+ * $ gcc -fplugin=constify_plugin.so test.c -O2
+ */
+
+#include "gcc-plugin.h"
+#include "config.h"
+#include "system.h"
+#include "coretypes.h"
+#include "tree.h"
+#include "tree-pass.h"
+#include "flags.h"
+#include "intl.h"
+#include "toplev.h"
+#include "plugin.h"
+#include "diagnostic.h"
+#include "plugin-version.h"
+#include "tm.h"
+#include "function.h"
+#include "basic-block.h"
+#include "gimple.h"
+#include "rtl.h"
+#include "emit-rtl.h"
+#include "tree-flow.h"
+
+#define C_TYPE_FIELDS_READONLY(TYPE) TREE_LANG_FLAG_1(TYPE)
+
+int plugin_is_GPL_compatible;
+
+static struct plugin_info const_plugin_info = {
+	.version	= "201205300030",
+	.help		= "no-constify\tturn off constification\n",
+};
+
+static void deconstify_tree(tree node);
+
+static void deconstify_type(tree type)
+{
+	tree field;
+
+	for (field = TYPE_FIELDS(type); field; field = TREE_CHAIN(field)) {
+		tree type = TREE_TYPE(field);
+
+		if (TREE_CODE(type) != RECORD_TYPE && TREE_CODE(type) != UNION_TYPE)
+			continue;
+		if (!TYPE_READONLY(type))
+			continue;
+
+		deconstify_tree(field);
+	}
+	TYPE_READONLY(type) = 0;
+	C_TYPE_FIELDS_READONLY(type) = 0;
+}
+
+static void deconstify_tree(tree node)
+{
+	tree old_type, new_type, field;
+
+	old_type = TREE_TYPE(node);
+
+	gcc_assert(TYPE_READONLY(old_type) && (TYPE_QUALS(old_type) & TYPE_QUAL_CONST));
+
+	new_type = build_qualified_type(old_type, TYPE_QUALS(old_type) & ~TYPE_QUAL_CONST);
+	TYPE_FIELDS(new_type) = copy_list(TYPE_FIELDS(new_type));
+	for (field = TYPE_FIELDS(new_type); field; field = TREE_CHAIN(field))
+		DECL_FIELD_CONTEXT(field) = new_type;
+
+	deconstify_type(new_type);
+
+	TREE_READONLY(node) = 0;
+	TREE_TYPE(node) = new_type;
+}
+
+static tree handle_no_const_attribute(tree *node, tree name, tree args, int flags, bool *no_add_attrs)
+{
+	tree type;
+
+	*no_add_attrs = true;
+	if (TREE_CODE(*node) == FUNCTION_DECL) {
+		error("%qE attribute does not apply to functions", name);
+		return NULL_TREE;
+	}
+
+	if (TREE_CODE(*node) == VAR_DECL) {
+		error("%qE attribute does not apply to variables", name);
+		return NULL_TREE;
+	}
+
+	if (TYPE_P(*node)) {
+		if (TREE_CODE(*node) == RECORD_TYPE || TREE_CODE(*node) == UNION_TYPE)
+			*no_add_attrs = false;
+		else
+			error("%qE attribute applies to struct and union types only", name);
+		return NULL_TREE;
+	}
+
+	type = TREE_TYPE(*node);
+
+	if (TREE_CODE(type) != RECORD_TYPE && TREE_CODE(type) != UNION_TYPE) {
+		error("%qE attribute applies to struct and union types only", name);
+		return NULL_TREE;
+	}
+
+	if (lookup_attribute(IDENTIFIER_POINTER(name), TYPE_ATTRIBUTES(type))) {
+		error("%qE attribute is already applied to the type", name);
+		return NULL_TREE;
+	}
+
+	if (TREE_CODE(*node) == TYPE_DECL && !TYPE_READONLY(type)) {
+		error("%qE attribute used on type that is not constified", name);
+		return NULL_TREE;
+	}
+
+	if (TREE_CODE(*node) == TYPE_DECL) {
+		deconstify_tree(*node);
+		return NULL_TREE;
+	}
+
+	return NULL_TREE;
+}
+
+static void constify_type(tree type)
+{
+	TYPE_READONLY(type) = 1;
+	C_TYPE_FIELDS_READONLY(type) = 1;
+}
+
+static tree handle_do_const_attribute(tree *node, tree name, tree args, int flags, bool *no_add_attrs)
+{
+	*no_add_attrs = true;
+	if (!TYPE_P(*node)) {
+		error("%qE attribute applies to types only", name);
+		return NULL_TREE;
+	}
+
+	if (TREE_CODE(*node) != RECORD_TYPE && TREE_CODE(*node) != UNION_TYPE) {
+		error("%qE attribute applies to struct and union types only", name);
+		return NULL_TREE;
+	}
+
+	*no_add_attrs = false;
+	constify_type(*node);
+	return NULL_TREE;
+}
+
+static struct attribute_spec no_const_attr = {
+	.name			= "no_const",
+	.min_length		= 0,
+	.max_length		= 0,
+	.decl_required		= false,
+	.type_required		= false,
+	.function_type_required	= false,
+	.handler		= handle_no_const_attribute,
+#if BUILDING_GCC_VERSION >= 4007
+	.affects_type_identity	= true
+#endif
+};
+
+static struct attribute_spec do_const_attr = {
+	.name			= "do_const",
+	.min_length		= 0,
+	.max_length		= 0,
+	.decl_required		= false,
+	.type_required		= false,
+	.function_type_required	= false,
+	.handler		= handle_do_const_attribute,
+#if BUILDING_GCC_VERSION >= 4007
+	.affects_type_identity	= true
+#endif
+};
+
+static void register_attributes(void *event_data, void *data)
+{
+	register_attribute(&no_const_attr);
+	register_attribute(&do_const_attr);
+}
+
+static bool is_fptr(tree field)
+{
+	tree ptr = TREE_TYPE(field);
+
+	if (TREE_CODE(ptr) != POINTER_TYPE)
+		return false;
+
+	return TREE_CODE(TREE_TYPE(ptr)) == FUNCTION_TYPE;
+}
+
+static bool walk_struct(tree node)
+{
+	tree field;
+
+	if (TYPE_FIELDS(node) == NULL_TREE)
+		return false;
+
+	if (lookup_attribute("no_const", TYPE_ATTRIBUTES(node))) {
+		gcc_assert(!TYPE_READONLY(node));
+		deconstify_type(node);
+		return false;
+	}
+
+	for (field = TYPE_FIELDS(node); field; field = TREE_CHAIN(field)) {
+		tree type = TREE_TYPE(field);
+		enum tree_code code = TREE_CODE(type);
+		if (code == RECORD_TYPE || code == UNION_TYPE) {
+			if (!(walk_struct(type)))
+				return false;
+		} else if (!is_fptr(field) && !TREE_READONLY(field))
+			return false;
+	}
+	return true;
+}
+
+static void finish_type(void *event_data, void *data)
+{
+	tree type = (tree)event_data;
+
+	if (type == NULL_TREE)
+		return;
+
+	if (TYPE_READONLY(type))
+		return;
+
+	if (walk_struct(type))
+		constify_type(type);
+}
+
+static unsigned int check_local_variables(void);
+
+struct gimple_opt_pass pass_local_variable = {
+	{
+		.type			= GIMPLE_PASS,
+		.name			= "check_local_variables",
+		.gate			= NULL,
+		.execute		= check_local_variables,
+		.sub			= NULL,
+		.next			= NULL,
+		.static_pass_number	= 0,
+		.tv_id			= TV_NONE,
+		.properties_required	= 0,
+		.properties_provided	= 0,
+		.properties_destroyed	= 0,
+		.todo_flags_start	= 0,
+		.todo_flags_finish	= 0
+	}
+};
+
+static unsigned int check_local_variables(void)
+{
+	tree var;
+	referenced_var_iterator rvi;
+
+#if BUILDING_GCC_VERSION == 4005
+	FOR_EACH_REFERENCED_VAR(var, rvi) {
+#else
+	FOR_EACH_REFERENCED_VAR(cfun, var, rvi) {
+#endif
+		tree type = TREE_TYPE(var);
+
+		if (!DECL_P(var) || TREE_STATIC(var) || DECL_EXTERNAL(var))
+			continue;
+
+		if (TREE_CODE(type) != RECORD_TYPE && TREE_CODE(type) != UNION_TYPE)
+			continue;
+
+		if (!TYPE_READONLY(type))
+			continue;
+
+//		if (lookup_attribute("no_const", DECL_ATTRIBUTES(var)))
+//			continue;
+
+//		if (lookup_attribute("no_const", TYPE_ATTRIBUTES(type)))
+//			continue;
+
+		if (walk_struct(type)) {
+			error_at(DECL_SOURCE_LOCATION(var), "constified variable %qE cannot be local", var);
+			return 1;
+		}
+	}
+	return 0;
+}
+
+int plugin_init(struct plugin_name_args *plugin_info, struct plugin_gcc_version *version)
+{
+	const char * const plugin_name = plugin_info->base_name;
+	const int argc = plugin_info->argc;
+	const struct plugin_argument * const argv = plugin_info->argv;
+	int i;
+	bool constify = true;
+
+	struct register_pass_info local_variable_pass_info = {
+		.pass				= &pass_local_variable.pass,
+		.reference_pass_name		= "*referenced_vars",
+		.ref_pass_instance_number	= 0,
+		.pos_op				= PASS_POS_INSERT_AFTER
+	};
+
+	if (!plugin_default_version_check(version, &gcc_version)) {
+		error(G_("incompatible gcc/plugin versions"));
+		return 1;
+	}
+
+	for (i = 0; i < argc; ++i) {
+		if (!(strcmp(argv[i].key, "no-constify"))) {
+			constify = false;
+			continue;
+		}
+		error(G_("unkown option '-fplugin-arg-%s-%s'"), plugin_name, argv[i].key);
+	}
+
+	register_callback(plugin_name, PLUGIN_INFO, NULL, &const_plugin_info);
+	if (constify) {
+		register_callback(plugin_name, PLUGIN_FINISH_TYPE, finish_type, NULL);
+		register_callback(plugin_name, PLUGIN_PASS_MANAGER_SETUP, NULL, &local_variable_pass_info);
+	}
+	register_callback(plugin_name, PLUGIN_ATTRIBUTES, register_attributes, NULL);
+
+	return 0;
+}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/tools/gcc/kallocstat_plugin.c linux-3.3.8-pax/tools/gcc/kallocstat_plugin.c
--- linux-3.3.8/tools/gcc/kallocstat_plugin.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-3.3.8-pax/tools/gcc/kallocstat_plugin.c	2012-03-19 10:43:44.888034604 +0100
@@ -0,0 +1,167 @@
+/*
+ * Copyright 2011 by the PaX Team <pageexec@freemail.hu>
+ * Licensed under the GPL v2
+ *
+ * Note: the choice of the license means that the compilation process is
+ *       NOT 'eligible' as defined by gcc's library exception to the GPL v3,
+ *       but for the kernel it doesn't matter since it doesn't link against
+ *       any of the gcc libraries
+ *
+ * gcc plugin to find the distribution of k*alloc sizes
+ *
+ * TODO:
+ *
+ * BUGS:
+ * - none known
+ */
+#include "gcc-plugin.h"
+#include "config.h"
+#include "system.h"
+#include "coretypes.h"
+#include "tree.h"
+#include "tree-pass.h"
+#include "flags.h"
+#include "intl.h"
+#include "toplev.h"
+#include "plugin.h"
+//#include "expr.h" where are you...
+#include "diagnostic.h"
+#include "plugin-version.h"
+#include "tm.h"
+#include "function.h"
+#include "basic-block.h"
+#include "gimple.h"
+#include "rtl.h"
+#include "emit-rtl.h"
+
+extern void print_gimple_stmt(FILE *, gimple, int, int);
+
+int plugin_is_GPL_compatible;
+
+static const char * const kalloc_functions[] = {
+	"__kmalloc",
+	"kmalloc",
+	"kmalloc_large",
+	"kmalloc_node",
+	"kmalloc_order",
+	"kmalloc_order_trace",
+	"kmalloc_slab",
+	"kzalloc",
+	"kzalloc_node",
+};
+
+static struct plugin_info kallocstat_plugin_info = {
+	.version	= "201111150100",
+};
+
+static unsigned int execute_kallocstat(void);
+
+static struct gimple_opt_pass kallocstat_pass = {
+	.pass = {
+		.type			= GIMPLE_PASS,
+		.name			= "kallocstat",
+		.gate			= NULL,
+		.execute		= execute_kallocstat,
+		.sub			= NULL,
+		.next			= NULL,
+		.static_pass_number	= 0,
+		.tv_id			= TV_NONE,
+		.properties_required	= 0,
+		.properties_provided	= 0,
+		.properties_destroyed	= 0,
+		.todo_flags_start	= 0,
+		.todo_flags_finish	= 0
+	}
+};
+
+static bool is_kalloc(const char *fnname)
+{
+	size_t i;
+
+	for (i = 0; i < ARRAY_SIZE(kalloc_functions); i++)
+		if (!strcmp(fnname, kalloc_functions[i]))
+			return true;
+	return false;
+}
+
+static unsigned int execute_kallocstat(void)
+{
+	basic_block bb;
+
+	// 1. loop through BBs and GIMPLE statements
+	FOR_EACH_BB(bb) {
+		gimple_stmt_iterator gsi;
+		for (gsi = gsi_start_bb(bb); !gsi_end_p(gsi); gsi_next(&gsi)) {
+			// gimple match: 
+			tree fndecl, size;
+			gimple call_stmt;
+			const char *fnname;
+
+			// is it a call
+			call_stmt = gsi_stmt(gsi);
+			if (!is_gimple_call(call_stmt))
+				continue;
+			fndecl = gimple_call_fndecl(call_stmt);
+			if (fndecl == NULL_TREE)
+				continue;
+			if (TREE_CODE(fndecl) != FUNCTION_DECL)
+				continue;
+
+			// is it a call to k*alloc
+			fnname = IDENTIFIER_POINTER(DECL_NAME(fndecl));
+			if (!is_kalloc(fnname))
+				continue;
+
+			// is the size arg the result of a simple const assignment
+			size = gimple_call_arg(call_stmt, 0);
+			while (true) {
+				gimple def_stmt;
+				expanded_location xloc;
+				size_t size_val;
+
+				if (TREE_CODE(size) != SSA_NAME)
+					break;
+				def_stmt = SSA_NAME_DEF_STMT(size);
+				if (!def_stmt || !is_gimple_assign(def_stmt))
+					break;
+				if (gimple_num_ops(def_stmt) != 2)
+					break;
+				size = gimple_assign_rhs1(def_stmt);
+				if (!TREE_CONSTANT(size))
+					continue;
+				xloc = expand_location(gimple_location(def_stmt));
+				if (!xloc.file)
+					xloc = expand_location(DECL_SOURCE_LOCATION(current_function_decl));
+				size_val = TREE_INT_CST_LOW(size);
+				fprintf(stderr, "kallocsize: %8zu %8zx %s %s:%u\n", size_val, size_val, fnname, xloc.file, xloc.line);
+				break;
+			}
+//print_gimple_stmt(stderr, call_stmt, 0, TDF_LINENO);
+//debug_tree(gimple_call_fn(call_stmt));
+//print_node(stderr, "pax", fndecl, 4);
+		}
+	}
+
+	return 0;
+}
+
+int plugin_init(struct plugin_name_args *plugin_info, struct plugin_gcc_version *version)
+{
+	const char * const plugin_name = plugin_info->base_name;
+	struct register_pass_info kallocstat_pass_info = {
+		.pass				= &kallocstat_pass.pass,
+		.reference_pass_name		= "ssa",
+		.ref_pass_instance_number	= 0,
+		.pos_op 			= PASS_POS_INSERT_AFTER
+	};
+
+	if (!plugin_default_version_check(version, &gcc_version)) {
+		error(G_("incompatible gcc/plugin versions"));
+		return 1;
+	}
+
+	register_callback(plugin_name, PLUGIN_INFO, NULL, &kallocstat_plugin_info);
+	register_callback(plugin_name, PLUGIN_PASS_MANAGER_SETUP, NULL, &kallocstat_pass_info);
+
+	return 0;
+}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/tools/gcc/kernexec_plugin.c linux-3.3.8-pax/tools/gcc/kernexec_plugin.c
--- linux-3.3.8/tools/gcc/kernexec_plugin.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-3.3.8-pax/tools/gcc/kernexec_plugin.c	2012-03-28 13:46:52.616160829 +0200
@@ -0,0 +1,427 @@
+/*
+ * Copyright 2011 by the PaX Team <pageexec@freemail.hu>
+ * Licensed under the GPL v2
+ *
+ * Note: the choice of the license means that the compilation process is
+ *       NOT 'eligible' as defined by gcc's library exception to the GPL v3,
+ *       but for the kernel it doesn't matter since it doesn't link against
+ *       any of the gcc libraries
+ *
+ * gcc plugin to make KERNEXEC/amd64 almost as good as it is on i386
+ *
+ * TODO:
+ *
+ * BUGS:
+ * - none known
+ */
+#include "gcc-plugin.h"
+#include "config.h"
+#include "system.h"
+#include "coretypes.h"
+#include "tree.h"
+#include "tree-pass.h"
+#include "flags.h"
+#include "intl.h"
+#include "toplev.h"
+#include "plugin.h"
+//#include "expr.h" where are you...
+#include "diagnostic.h"
+#include "plugin-version.h"
+#include "tm.h"
+#include "function.h"
+#include "basic-block.h"
+#include "gimple.h"
+#include "rtl.h"
+#include "emit-rtl.h"
+#include "tree-flow.h"
+
+extern void print_gimple_stmt(FILE *, gimple, int, int);
+extern rtx emit_move_insn(rtx x, rtx y);
+
+int plugin_is_GPL_compatible;
+
+static struct plugin_info kernexec_plugin_info = {
+	.version	= "201111291120",
+	.help		= "method=[bts|or]\tinstrumentation method\n"
+};
+
+static unsigned int execute_kernexec_reload(void);
+static unsigned int execute_kernexec_fptr(void);
+static unsigned int execute_kernexec_retaddr(void);
+static bool kernexec_cmodel_check(void);
+
+static void (*kernexec_instrument_fptr)(gimple_stmt_iterator *);
+static void (*kernexec_instrument_retaddr)(rtx);
+
+static struct gimple_opt_pass kernexec_reload_pass = {
+	.pass = {
+		.type			= GIMPLE_PASS,
+		.name			= "kernexec_reload",
+		.gate			= kernexec_cmodel_check,
+		.execute		= execute_kernexec_reload,
+		.sub			= NULL,
+		.next			= NULL,
+		.static_pass_number	= 0,
+		.tv_id			= TV_NONE,
+		.properties_required	= 0,
+		.properties_provided	= 0,
+		.properties_destroyed	= 0,
+		.todo_flags_start	= 0,
+		.todo_flags_finish	= TODO_verify_ssa | TODO_verify_stmts | TODO_dump_func | TODO_remove_unused_locals | TODO_update_ssa_no_phi
+	}
+};
+
+static struct gimple_opt_pass kernexec_fptr_pass = {
+	.pass = {
+		.type			= GIMPLE_PASS,
+		.name			= "kernexec_fptr",
+		.gate			= kernexec_cmodel_check,
+		.execute		= execute_kernexec_fptr,
+		.sub			= NULL,
+		.next			= NULL,
+		.static_pass_number	= 0,
+		.tv_id			= TV_NONE,
+		.properties_required	= 0,
+		.properties_provided	= 0,
+		.properties_destroyed	= 0,
+		.todo_flags_start	= 0,
+		.todo_flags_finish	= TODO_verify_ssa | TODO_verify_stmts | TODO_dump_func | TODO_remove_unused_locals | TODO_update_ssa_no_phi
+	}
+};
+
+static struct rtl_opt_pass kernexec_retaddr_pass = {
+	.pass = {
+		.type			= RTL_PASS,
+		.name			= "kernexec_retaddr",
+		.gate			= kernexec_cmodel_check,
+		.execute		= execute_kernexec_retaddr,
+		.sub			= NULL,
+		.next			= NULL,
+		.static_pass_number	= 0,
+		.tv_id			= TV_NONE,
+		.properties_required	= 0,
+		.properties_provided	= 0,
+		.properties_destroyed	= 0,
+		.todo_flags_start	= 0,
+		.todo_flags_finish	= TODO_dump_func | TODO_ggc_collect
+	}
+};
+
+static bool kernexec_cmodel_check(void)
+{
+	tree section;
+
+	if (ix86_cmodel != CM_KERNEL)
+		return false;
+
+	section = lookup_attribute("section", DECL_ATTRIBUTES(current_function_decl));
+	if (!section || !TREE_VALUE(section))
+		return true;
+
+	section = TREE_VALUE(TREE_VALUE(section));
+	if (strncmp(TREE_STRING_POINTER(section), ".vsyscall_", 10))
+		return true;
+
+	return false;
+}
+
+/*
+ * add special KERNEXEC instrumentation: reload %r10 after it has been clobbered
+ */
+static void kernexec_reload_fptr_mask(gimple_stmt_iterator *gsi)
+{
+	gimple asm_movabs_stmt;
+
+	// build asm volatile("movabs $0x8000000000000000, %%r10\n\t" : : : );
+	asm_movabs_stmt = gimple_build_asm_vec("movabs $0x8000000000000000, %%r10\n\t", NULL, NULL, NULL, NULL);
+	gimple_asm_set_volatile(asm_movabs_stmt, true);
+	gsi_insert_after(gsi, asm_movabs_stmt, GSI_CONTINUE_LINKING);
+	update_stmt(asm_movabs_stmt);
+}
+
+/*
+ * find all asm() stmts that clobber r10 and add a reload of r10
+ */
+static unsigned int execute_kernexec_reload(void)
+{
+	basic_block bb;
+
+	// 1. loop through BBs and GIMPLE statements
+	FOR_EACH_BB(bb) {
+		gimple_stmt_iterator gsi;
+
+		for (gsi = gsi_start_bb(bb); !gsi_end_p(gsi); gsi_next(&gsi)) {
+			// gimple match: __asm__ ("" :  :  : "r10");
+			gimple asm_stmt;
+			size_t nclobbers;
+
+			// is it an asm ...
+			asm_stmt = gsi_stmt(gsi);
+			if (gimple_code(asm_stmt) != GIMPLE_ASM)
+				continue;
+
+			// ... clobbering r10
+			nclobbers = gimple_asm_nclobbers(asm_stmt);
+			while (nclobbers--) {
+				tree op = gimple_asm_clobber_op(asm_stmt, nclobbers);
+				if (strcmp(TREE_STRING_POINTER(TREE_VALUE(op)), "r10"))
+					continue;
+				kernexec_reload_fptr_mask(&gsi);
+//print_gimple_stmt(stderr, asm_stmt, 0, TDF_LINENO);
+				break;
+			}
+		}
+	}
+
+	return 0;
+}
+
+/*
+ * add special KERNEXEC instrumentation: force MSB of fptr to 1, which will produce
+ * a non-canonical address from a userland ptr and will just trigger a GPF on dereference
+ */
+static void kernexec_instrument_fptr_bts(gimple_stmt_iterator *gsi)
+{
+	gimple assign_intptr, assign_new_fptr, call_stmt;
+	tree intptr, old_fptr, new_fptr, kernexec_mask;
+
+	call_stmt = gsi_stmt(*gsi);
+	old_fptr = gimple_call_fn(call_stmt);
+
+	// create temporary unsigned long variable used for bitops and cast fptr to it
+	intptr = create_tmp_var(long_unsigned_type_node, "kernexec_bts");
+	add_referenced_var(intptr);
+	mark_sym_for_renaming(intptr);
+	assign_intptr = gimple_build_assign(intptr, fold_convert(long_unsigned_type_node, old_fptr));
+	gsi_insert_before(gsi, assign_intptr, GSI_SAME_STMT);
+	update_stmt(assign_intptr);
+
+	// apply logical or to temporary unsigned long and bitmask
+	kernexec_mask = build_int_cstu(long_long_unsigned_type_node, 0x8000000000000000LL);
+//	kernexec_mask = build_int_cstu(long_long_unsigned_type_node, 0xffffffff80000000LL);
+	assign_intptr = gimple_build_assign(intptr, fold_build2(BIT_IOR_EXPR, long_long_unsigned_type_node, intptr, kernexec_mask));
+	gsi_insert_before(gsi, assign_intptr, GSI_SAME_STMT);
+	update_stmt(assign_intptr);
+
+	// cast temporary unsigned long back to a temporary fptr variable
+	new_fptr = create_tmp_var(TREE_TYPE(old_fptr), "kernexec_fptr");
+	add_referenced_var(new_fptr);
+	mark_sym_for_renaming(new_fptr);
+	assign_new_fptr = gimple_build_assign(new_fptr, fold_convert(TREE_TYPE(old_fptr), intptr));
+	gsi_insert_before(gsi, assign_new_fptr, GSI_SAME_STMT);
+	update_stmt(assign_new_fptr);
+
+	// replace call stmt fn with the new fptr
+	gimple_call_set_fn(call_stmt, new_fptr);
+	update_stmt(call_stmt);
+}
+
+static void kernexec_instrument_fptr_or(gimple_stmt_iterator *gsi)
+{
+	gimple asm_or_stmt, call_stmt;
+	tree old_fptr, new_fptr, input, output;
+	VEC(tree, gc) *inputs = NULL;
+	VEC(tree, gc) *outputs = NULL;
+
+	call_stmt = gsi_stmt(*gsi);
+	old_fptr = gimple_call_fn(call_stmt);
+
+	// create temporary fptr variable
+	new_fptr = create_tmp_var(TREE_TYPE(old_fptr), "kernexec_or");
+	add_referenced_var(new_fptr);
+	mark_sym_for_renaming(new_fptr);
+
+	// build asm volatile("orq %%r10, %0\n\t" : "=r"(new_fptr) : "0"(old_fptr));
+	input = build_tree_list(NULL_TREE, build_string(2, "0"));
+	input = chainon(NULL_TREE, build_tree_list(input, old_fptr));
+	output = build_tree_list(NULL_TREE, build_string(3, "=r"));
+	output = chainon(NULL_TREE, build_tree_list(output, new_fptr));
+	VEC_safe_push(tree, gc, inputs, input);
+	VEC_safe_push(tree, gc, outputs, output);
+	asm_or_stmt = gimple_build_asm_vec("orq %%r10, %0\n\t", inputs, outputs, NULL, NULL);
+	gimple_asm_set_volatile(asm_or_stmt, true);
+	gsi_insert_before(gsi, asm_or_stmt, GSI_SAME_STMT);
+	update_stmt(asm_or_stmt);
+
+	// replace call stmt fn with the new fptr
+	gimple_call_set_fn(call_stmt, new_fptr);
+	update_stmt(call_stmt);
+}
+
+/*
+ * find all C level function pointer dereferences and forcibly set the highest bit of the pointer
+ */
+static unsigned int execute_kernexec_fptr(void)
+{
+	basic_block bb;
+
+	// 1. loop through BBs and GIMPLE statements
+	FOR_EACH_BB(bb) {
+		gimple_stmt_iterator gsi;
+
+		for (gsi = gsi_start_bb(bb); !gsi_end_p(gsi); gsi_next(&gsi)) {
+			// gimple match: h_1 = get_fptr (); D.2709_3 = h_1 (x_2(D));
+			tree fn;
+			gimple call_stmt;
+
+			// is it a call ...
+			call_stmt = gsi_stmt(gsi);
+			if (!is_gimple_call(call_stmt))
+				continue;
+			fn = gimple_call_fn(call_stmt);
+			if (TREE_CODE(fn) == ADDR_EXPR)
+				continue;
+			if (TREE_CODE(fn) != SSA_NAME)
+				gcc_unreachable();
+
+			// ... through a function pointer
+			fn = SSA_NAME_VAR(fn);
+			if (TREE_CODE(fn) != VAR_DECL && TREE_CODE(fn) != PARM_DECL)
+				continue;
+			fn = TREE_TYPE(fn);
+			if (TREE_CODE(fn) != POINTER_TYPE)
+				continue;
+			fn = TREE_TYPE(fn);
+			if (TREE_CODE(fn) != FUNCTION_TYPE)
+				continue;
+
+			kernexec_instrument_fptr(&gsi);
+
+//debug_tree(gimple_call_fn(call_stmt));
+//print_gimple_stmt(stderr, call_stmt, 0, TDF_LINENO);
+		}
+	}
+
+	return 0;
+}
+
+// add special KERNEXEC instrumentation: btsq $63,(%rsp) just before retn
+static void kernexec_instrument_retaddr_bts(rtx insn)
+{
+	rtx btsq;
+	rtvec argvec, constraintvec, labelvec;
+	int line;
+
+	// create asm volatile("btsq $63,(%%rsp)":::)
+	argvec = rtvec_alloc(0);
+	constraintvec = rtvec_alloc(0);
+	labelvec = rtvec_alloc(0);
+	line = expand_location(RTL_LOCATION(insn)).line;
+	btsq = gen_rtx_ASM_OPERANDS(VOIDmode, "btsq $63,(%%rsp)", empty_string, 0, argvec, constraintvec, labelvec, line);
+	MEM_VOLATILE_P(btsq) = 1;
+//	RTX_FRAME_RELATED_P(btsq) = 1; // not for ASM_OPERANDS
+	emit_insn_before(btsq, insn);
+}
+
+// add special KERNEXEC instrumentation: orq %r10,(%rsp) just before retn
+static void kernexec_instrument_retaddr_or(rtx insn)
+{
+	rtx orq;
+	rtvec argvec, constraintvec, labelvec;
+	int line;
+
+	// create asm volatile("orq %%r10,(%%rsp)":::)
+	argvec = rtvec_alloc(0);
+	constraintvec = rtvec_alloc(0);
+	labelvec = rtvec_alloc(0);
+	line = expand_location(RTL_LOCATION(insn)).line;
+	orq = gen_rtx_ASM_OPERANDS(VOIDmode, "orq %%r10,(%%rsp)", empty_string, 0, argvec, constraintvec, labelvec, line);
+	MEM_VOLATILE_P(orq) = 1;
+//	RTX_FRAME_RELATED_P(orq) = 1; // not for ASM_OPERANDS
+	emit_insn_before(orq, insn);
+}
+
+/*
+ * find all asm level function returns and forcibly set the highest bit of the return address
+ */
+static unsigned int execute_kernexec_retaddr(void)
+{
+	rtx insn;
+
+	// 1. find function returns
+	for (insn = get_insns(); insn; insn = NEXT_INSN(insn)) {
+		// rtl match: (jump_insn 41 40 42 2 (return) fptr.c:42 634 {return_internal} (nil))
+		//            (jump_insn 12 9 11 2 (parallel [ (return) (unspec [ (0) ] UNSPEC_REP) ]) fptr.c:46 635 {return_internal_long} (nil))
+		rtx body;
+
+		// is it a retn
+		if (!JUMP_P(insn))
+			continue;
+		body = PATTERN(insn);
+		if (GET_CODE(body) == PARALLEL)
+			body = XVECEXP(body, 0, 0);
+		if (GET_CODE(body) != RETURN)
+			continue;
+		kernexec_instrument_retaddr(insn);
+	}
+
+//	print_simple_rtl(stderr, get_insns());
+//	print_rtl(stderr, get_insns());
+
+	return 0;
+}
+
+int plugin_init(struct plugin_name_args *plugin_info, struct plugin_gcc_version *version)
+{
+	const char * const plugin_name = plugin_info->base_name;
+	const int argc = plugin_info->argc;
+	const struct plugin_argument * const argv = plugin_info->argv;
+	int i;
+	struct register_pass_info kernexec_reload_pass_info = {
+		.pass				= &kernexec_reload_pass.pass,
+		.reference_pass_name		= "ssa",
+		.ref_pass_instance_number	= 0,
+		.pos_op 			= PASS_POS_INSERT_AFTER
+	};
+	struct register_pass_info kernexec_fptr_pass_info = {
+		.pass				= &kernexec_fptr_pass.pass,
+		.reference_pass_name		= "ssa",
+		.ref_pass_instance_number	= 0,
+		.pos_op 			= PASS_POS_INSERT_AFTER
+	};
+	struct register_pass_info kernexec_retaddr_pass_info = {
+		.pass				= &kernexec_retaddr_pass.pass,
+		.reference_pass_name		= "pro_and_epilogue",
+		.ref_pass_instance_number	= 0,
+		.pos_op 			= PASS_POS_INSERT_AFTER
+	};
+
+	if (!plugin_default_version_check(version, &gcc_version)) {
+		error(G_("incompatible gcc/plugin versions"));
+		return 1;
+	}
+
+	register_callback(plugin_name, PLUGIN_INFO, NULL, &kernexec_plugin_info);
+
+	if (TARGET_64BIT == 0)
+		return 0;
+
+	for (i = 0; i < argc; ++i) {
+		if (!strcmp(argv[i].key, "method")) {
+			if (!argv[i].value) {
+				error(G_("no value supplied for option '-fplugin-arg-%s-%s'"), plugin_name, argv[i].key);
+				continue;
+			}
+			if (!strcmp(argv[i].value, "bts")) {
+				kernexec_instrument_fptr = kernexec_instrument_fptr_bts;
+				kernexec_instrument_retaddr = kernexec_instrument_retaddr_bts;
+			} else if (!strcmp(argv[i].value, "or")) {
+				kernexec_instrument_fptr = kernexec_instrument_fptr_or;
+				kernexec_instrument_retaddr = kernexec_instrument_retaddr_or;
+				fix_register("r10", 1, 1);
+			} else
+				error(G_("invalid option argument '-fplugin-arg-%s-%s=%s'"), plugin_name, argv[i].key, argv[i].value);
+			continue;
+		}
+		error(G_("unkown option '-fplugin-arg-%s-%s'"), plugin_name, argv[i].key);
+	}
+	if (!kernexec_instrument_fptr || !kernexec_instrument_retaddr)
+		error(G_("no instrumentation method was selected via '-fplugin-arg-%s-method'"), plugin_name);
+
+	if (kernexec_instrument_fptr == kernexec_instrument_fptr_or)
+		register_callback(plugin_name, PLUGIN_PASS_MANAGER_SETUP, NULL, &kernexec_reload_pass_info);
+	register_callback(plugin_name, PLUGIN_PASS_MANAGER_SETUP, NULL, &kernexec_fptr_pass_info);
+	register_callback(plugin_name, PLUGIN_PASS_MANAGER_SETUP, NULL, &kernexec_retaddr_pass_info);
+
+	return 0;
+}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/tools/gcc/Makefile linux-3.3.8-pax/tools/gcc/Makefile
--- linux-3.3.8/tools/gcc/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ linux-3.3.8-pax/tools/gcc/Makefile	2012-03-26 23:37:20.540230119 +0200
@@ -0,0 +1,26 @@
+#CC := gcc
+#PLUGIN_SOURCE_FILES := pax_plugin.c
+#PLUGIN_OBJECT_FILES := $(patsubst %.c,%.o,$(PLUGIN_SOURCE_FILES))
+GCCPLUGINS_DIR := $(shell $(CC) -print-file-name=plugin)
+#CFLAGS += -I$(GCCPLUGINS_DIR)/include -fPIC -O2 -Wall -W -std=gnu99
+
+HOST_EXTRACFLAGS += -I$(GCCPLUGINS_DIR)/include -I$(GCCPLUGINS_DIR)/include/c-family -std=gnu99 -ggdb
+CFLAGS_size_overflow_plugin.o := -Wno-missing-initializer
+
+hostlibs-$(CONFIG_PAX_CONSTIFY_PLUGIN) := constify_plugin.so
+hostlibs-$(CONFIG_PAX_MEMORY_STACKLEAK) += stackleak_plugin.so
+hostlibs-$(CONFIG_KALLOCSTAT_PLUGIN) += kallocstat_plugin.so
+hostlibs-$(CONFIG_PAX_KERNEXEC_PLUGIN) += kernexec_plugin.so
+hostlibs-$(CONFIG_CHECKER_PLUGIN) += checker_plugin.so
+hostlibs-y += colorize_plugin.so
+hostlibs-$(CONFIG_PAX_SIZE_OVERFLOW) += size_overflow_plugin.so
+
+always := $(hostlibs-y)
+
+constify_plugin-objs := constify_plugin.o
+stackleak_plugin-objs := stackleak_plugin.o
+kallocstat_plugin-objs := kallocstat_plugin.o
+kernexec_plugin-objs := kernexec_plugin.o
+checker_plugin-objs := checker_plugin.o
+colorize_plugin-objs := colorize_plugin.o
+size_overflow_plugin-objs := size_overflow_plugin.o
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/tools/gcc/size_overflow_hash.h linux-3.3.8-pax/tools/gcc/size_overflow_hash.h
--- linux-3.3.8/tools/gcc/size_overflow_hash.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-3.3.8-pax/tools/gcc/size_overflow_hash.h	2012-05-21 21:42:59.000000000 +0200
@@ -0,0 +1,13933 @@
+struct size_overflow_hash _000001_hash = {
+	.next	= NULL,
+	.name	= "alloc_dr",
+	.file	= "drivers/base/devres.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000002_hash = {
+	.next	= NULL,
+	.name	= "__copy_from_user",
+	.file	= "arch/x86/include/asm/uaccess_32.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000003_hash = {
+	.next	= NULL,
+	.name	= "copy_from_user",
+	.file	= "arch/x86/include/asm/uaccess_32.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000004_hash = {
+	.next	= NULL,
+	.name	= "__copy_from_user_inatomic",
+	.file	= "arch/x86/include/asm/uaccess_32.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000005_hash = {
+	.next	= NULL,
+	.name	= "__copy_from_user_nocache",
+	.file	= "arch/x86/include/asm/uaccess_32.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000006_hash = {
+	.next	= NULL,
+	.name	= "__copy_to_user_inatomic",
+	.file	= "arch/x86/include/asm/uaccess_32.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000007_hash = {
+	.next	= NULL,
+	.name	= "do_xip_mapping_read",
+	.file	= "mm/filemap_xip.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000008_hash = {
+	.next	= NULL,
+	.name	= "hugetlbfs_read",
+	.file	= "fs/hugetlbfs/inode.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000009_hash = {
+	.next	= NULL,
+	.name	= "kcalloc",
+	.file	= "include/linux/slab.h",
+	.param1	= 1,
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000011_hash = {
+	.next	= NULL,
+	.name	= "kmalloc",
+	.file	= "include/linux/slub_def.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000012_hash = {
+	.next	= NULL,
+	.name	= "kmalloc_slab",
+	.file	= "include/linux/slub_def.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000013_hash = {
+	.next	= NULL,
+	.name	= "kmemdup",
+	.file	= "include/linux/string.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000014_hash = {
+	.next	= NULL,
+	.name	= "__krealloc",
+	.file	= "include/linux/slab.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000015_hash = {
+	.next	= NULL,
+	.name	= "memdup_user",
+	.file	= "include/linux/string.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000016_hash = {
+	.next	= NULL,
+	.name	= "module_alloc",
+	.file	= "include/linux/moduleloader.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000017_hash = {
+	.next	= NULL,
+	.name	= "read_default_ldt",
+	.file	= "arch/x86/kernel/ldt.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000018_hash = {
+	.next	= NULL,
+	.name	= "read_kcore",
+	.file	= "fs/proc/kcore.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000019_hash = {
+	.next	= NULL,
+	.name	= "read_ldt",
+	.file	= "arch/x86/kernel/ldt.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000020_hash = {
+	.next	= NULL,
+	.name	= "read_zero",
+	.file	= "drivers/char/mem.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000021_hash = {
+	.next	= NULL,
+	.name	= "__vmalloc_node",
+	.file	= "mm/vmalloc.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000022_hash = {
+	.next	= NULL,
+	.name	= "vm_map_ram",
+	.file	= "include/linux/vmalloc.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000023_hash = {
+	.next	= NULL,
+	.name	= "aa_simple_write_to_buffer",
+	.file	= "security/apparmor/apparmorfs.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000024_hash = {
+	.next	= NULL,
+	.name	= "ablkcipher_copy_iv",
+	.file	= "crypto/ablkcipher.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000025_hash = {
+	.next	= NULL,
+	.name	= "ablkcipher_next_slow",
+	.file	= "crypto/ablkcipher.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000026_hash = {
+	.next	= NULL,
+	.name	= "acpi_os_allocate",
+	.file	= "include/acpi/platform/aclinux.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000027_hash = {
+	.next	= NULL,
+	.name	= "acpi_system_write_wakeup_device",
+	.file	= "drivers/acpi/proc.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000028_hash = {
+	.next	= NULL,
+	.name	= "ahash_setkey_unaligned",
+	.file	= "crypto/ahash.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000029_hash = {
+	.next	= NULL,
+	.name	= "alloc_fdmem",
+	.file	= "fs/file.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000030_hash = {
+	.next	= NULL,
+	.name	= "audit_unpack_string",
+	.file	= "kernel/auditfilter.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000031_hash = {
+	.next	= NULL,
+	.name	= "bio_alloc_map_data",
+	.file	= "fs/bio.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000032_hash = {
+	.next	= NULL,
+	.name	= "bio_kmalloc",
+	.file	= "include/linux/bio.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000033_hash = {
+	.next	= NULL,
+	.name	= "blkcipher_copy_iv",
+	.file	= "crypto/blkcipher.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000034_hash = {
+	.next	= NULL,
+	.name	= "blkcipher_next_slow",
+	.file	= "crypto/blkcipher.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000035_hash = {
+	.next	= NULL,
+	.name	= "cgroup_write_string",
+	.file	= "kernel/cgroup.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000036_hash = {
+	.next	= NULL,
+	.name	= "cgroup_write_X64",
+	.file	= "kernel/cgroup.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000037_hash = {
+	.next	= NULL,
+	.name	= "clear_refs_write",
+	.file	= "fs/proc/task_mmu.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000038_hash = {
+	.next	= NULL,
+	.name	= "comm_write",
+	.file	= "fs/proc/base.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000039_hash = {
+	.next	= NULL,
+	.name	= "copy_and_check",
+	.file	= "kernel/module.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000040_hash = {
+	.next	= NULL,
+	.name	= "__copy_to_user",
+	.file	= "arch/x86/include/asm/uaccess_32.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000041_hash = {
+	.next	= NULL,
+	.name	= "copy_vm86_regs_from_user",
+	.file	= "arch/x86/kernel/vm86_32.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000042_hash = {
+	.next	= NULL,
+	.name	= "csum_partial_copy_fromiovecend",
+	.file	= "include/linux/socket.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000043_hash = {
+	.next	= NULL,
+	.name	= "ddebug_proc_write",
+	.file	= "lib/dynamic_debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000044_hash = {
+	.next	= NULL,
+	.name	= "devm_kzalloc",
+	.file	= "include/linux/device.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000045_hash = {
+	.next	= NULL,
+	.name	= "devres_alloc",
+	.file	= "include/linux/device.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000046_hash = {
+	.next	= NULL,
+	.name	= "do_ip_setsockopt",
+	.file	= "net/ipv4/ip_sockglue.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000047_hash = {
+	.next	= NULL,
+	.name	= "do_kimage_alloc",
+	.file	= "kernel/kexec.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000048_hash = {
+	.next	= NULL,
+	.name	= "do_tty_write",
+	.file	= "drivers/tty/tty_io.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000049_hash = {
+	.next	= NULL,
+	.name	= "fanotify_write",
+	.file	= "fs/notify/fanotify/fanotify_user.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000050_hash = {
+	.next	= NULL,
+	.name	= "file_read_actor",
+	.file	= "include/linux/fs.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000051_hash = {
+	.next	= NULL,
+	.name	= "fill_write_buffer",
+	.file	= "fs/sysfs/file.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000052_hash = {
+	.next	= NULL,
+	.name	= "get_user_cpu_mask",
+	.file	= "kernel/sched/core.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000053_hash = {
+	.next	= NULL,
+	.name	= "hashtab_create",
+	.file	= "security/selinux/ss/hashtab.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000054_hash = {
+	.next	= NULL,
+	.name	= "heap_init",
+	.file	= "include/linux/prio_heap.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000055_hash = {
+	.next	= NULL,
+	.name	= "hest_ghes_dev_register",
+	.file	= "drivers/acpi/apei/hest.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000056_hash = {
+	.next	= NULL,
+	.name	= "ima_write_policy",
+	.file	= "security/integrity/ima/ima_fs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000057_hash = {
+	.next	= NULL,
+	.name	= "input_ff_create",
+	.file	= "include/linux/input.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000058_hash = {
+	.next	= NULL,
+	.name	= "input_mt_init_slots",
+	.file	= "include/linux/input/mt.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000059_hash = {
+	.next	= NULL,
+	.name	= "iov_iter_copy_from_user",
+	.file	= "include/linux/fs.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000060_hash = {
+	.next	= NULL,
+	.name	= "iov_iter_copy_from_user_atomic",
+	.file	= "include/linux/fs.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000061_hash = {
+	.next	= NULL,
+	.name	= "keyctl_instantiate_key_common",
+	.file	= "security/keys/keyctl.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000062_hash = {
+	.next	= NULL,
+	.name	= "keyctl_update_key",
+	.file	= "security/keys/keyctl.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000063_hash = {
+	.next	= NULL,
+	.name	= "__kfifo_alloc",
+	.file	= "include/linux/kfifo.h",
+	.param2	= 1,
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000065_hash = {
+	.next	= NULL,
+	.name	= "kfifo_copy_from_user",
+	.file	= "kernel/kfifo.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000066_hash = {
+	.next	= NULL,
+	.name	= "kmalloc_node",
+	.file	= "include/linux/slab.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000067_hash = {
+	.next	= NULL,
+	.name	= "kmalloc_parameter",
+	.file	= "kernel/params.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000068_hash = {
+	.next	= NULL,
+	.name	= "kobj_map",
+	.file	= "include/linux/kobj_map.h",
+	.param2	= 1,
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000070_hash = {
+	.next	= NULL,
+	.name	= "krealloc",
+	.file	= "include/linux/slab.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000071_hash = {
+	.next	= NULL,
+	.name	= "kvmalloc",
+	.file	= "security/apparmor/lib.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000072_hash = {
+	.next	= NULL,
+	.name	= "kzalloc",
+	.file	= "include/linux/slab.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000073_hash = {
+	.next	= NULL,
+	.name	= "listxattr",
+	.file	= "fs/xattr.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000074_hash = {
+	.next	= NULL,
+	.name	= "mempool_kmalloc",
+	.file	= "include/linux/mempool.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000075_hash = {
+	.next	= NULL,
+	.name	= "mem_rw",
+	.file	= "fs/proc/base.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000076_hash = {
+	.next	= NULL,
+	.name	= "module_alloc_update_bounds",
+	.file	= "kernel/module.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000077_hash = {
+	.next	= NULL,
+	.name	= "mpi_alloc_limb_space",
+	.file	= "lib/mpi/mpiutil.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000078_hash = {
+	.next	= NULL,
+	.name	= "mpi_resize",
+	.file	= "include/linux/mpi.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000079_hash = {
+	.next	= NULL,
+	.name	= "mtrr_write",
+	.file	= "arch/x86/kernel/cpu/mtrr/if.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000080_hash = {
+	.next	= NULL,
+	.name	= "oom_adjust_write",
+	.file	= "fs/proc/base.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000081_hash = {
+	.next	= NULL,
+	.name	= "oom_score_adj_write",
+	.file	= "fs/proc/base.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000082_hash = {
+	.next	= NULL,
+	.name	= "pipe_iov_copy_from_user",
+	.file	= "fs/pipe.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000083_hash = {
+	.next	= NULL,
+	.name	= "pipe_iov_copy_to_user",
+	.file	= "fs/pipe.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000084_hash = {
+	.next	= NULL,
+	.name	= "pipe_set_size",
+	.file	= "fs/pipe.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000085_hash = {
+	.next	= NULL,
+	.name	= "platform_device_add_data",
+	.file	= "include/linux/platform_device.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000086_hash = {
+	.next	= NULL,
+	.name	= "platform_device_add_resources",
+	.file	= "include/linux/platform_device.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000087_hash = {
+	.next	= NULL,
+	.name	= "pm_qos_power_write",
+	.file	= "kernel/power/qos.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000088_hash = {
+	.next	= NULL,
+	.name	= "pnpbios_proc_write",
+	.file	= "drivers/pnp/pnpbios/proc.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000089_hash = {
+	.next	= NULL,
+	.name	= "__probe_kernel_read",
+	.file	= "include/linux/uaccess.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000090_hash = {
+	.next	= NULL,
+	.name	= "__probe_kernel_write",
+	.file	= "include/linux/uaccess.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000091_hash = {
+	.next	= NULL,
+	.name	= "proc_coredump_filter_write",
+	.file	= "fs/proc/base.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000092_hash = {
+	.next	= NULL,
+	.name	= "process_vm_rw_pages",
+	.file	= "mm/process_vm_access.c",
+	.param5	= 1,
+	.param6	= 1,
+};
+
+struct size_overflow_hash _000094_hash = {
+	.next	= NULL,
+	.name	= "proc_loginuid_write",
+	.file	= "fs/proc/base.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000095_hash = {
+	.next	= NULL,
+	.name	= "proc_pid_attr_write",
+	.file	= "fs/proc/base.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000096_hash = {
+	.next	= NULL,
+	.name	= "pstore_mkfile",
+	.file	= "fs/pstore/inode.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000097_hash = {
+	.next	= NULL,
+	.name	= "qdisc_class_hash_alloc",
+	.file	= "net/sched/sch_api.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000098_hash = {
+	.next	= NULL,
+	.name	= "read",
+	.file	= "fs/sysfs/bin.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000099_hash = {
+	.next	= NULL,
+	.name	= "regmap_access_read_file",
+	.file	= "drivers/base/regmap/regmap-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000100_hash = {
+	.next	= NULL,
+	.name	= "regmap_map_read_file",
+	.file	= "drivers/base/regmap/regmap-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000101_hash = {
+	.next	= NULL,
+	.name	= "_regmap_raw_write",
+	.file	= "drivers/base/regmap/regmap.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000102_hash = {
+	.next	= NULL,
+	.name	= "regset_tls_set",
+	.file	= "arch/x86/kernel/tls.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000103_hash = {
+	.next	= NULL,
+	.name	= "request_key_auth_new",
+	.file	= "security/keys/request_key_auth.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000104_hash = {
+	.next	= NULL,
+	.name	= "restore_i387_fxsave",
+	.file	= "arch/x86/kernel/i387.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000105_hash = {
+	.next	= NULL,
+	.name	= "rngapi_reset",
+	.file	= "crypto/rng.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000106_hash = {
+	.next	= NULL,
+	.name	= "rw_copy_check_uvector",
+	.file	= "include/linux/fs.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000107_hash = {
+	.next	= NULL,
+	.name	= "sched_autogroup_write",
+	.file	= "fs/proc/base.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000108_hash = {
+	.next	= NULL,
+	.name	= "security_context_to_sid_core",
+	.file	= "security/selinux/ss/services.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000109_hash = {
+	.next	= NULL,
+	.name	= "sel_commit_bools_write",
+	.file	= "security/selinux/selinuxfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000110_hash = {
+	.next	= NULL,
+	.name	= "sel_write_avc_cache_threshold",
+	.file	= "security/selinux/selinuxfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000111_hash = {
+	.next	= NULL,
+	.name	= "sel_write_bool",
+	.file	= "security/selinux/selinuxfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000112_hash = {
+	.next	= NULL,
+	.name	= "sel_write_checkreqprot",
+	.file	= "security/selinux/selinuxfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000113_hash = {
+	.next	= NULL,
+	.name	= "sel_write_disable",
+	.file	= "security/selinux/selinuxfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000114_hash = {
+	.next	= NULL,
+	.name	= "sel_write_enforce",
+	.file	= "security/selinux/selinuxfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000115_hash = {
+	.next	= NULL,
+	.name	= "sel_write_load",
+	.file	= "security/selinux/selinuxfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000116_hash = {
+	.next	= NULL,
+	.name	= "setkey_unaligned",
+	.file	= "crypto/ablkcipher.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000117_hash = {
+	.next	= NULL,
+	.name	= "setkey_unaligned",
+	.file	= "crypto/blkcipher.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000118_hash = {
+	.next	= NULL,
+	.name	= "setkey_unaligned",
+	.file	= "crypto/aead.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000119_hash = {
+	.next	= NULL,
+	.name	= "setkey_unaligned",
+	.file	= "crypto/cipher.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000120_hash = {
+	.next	= NULL,
+	.name	= "setxattr",
+	.file	= "fs/xattr.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000121_hash = {
+	.next	= NULL,
+	.name	= "sg_kmalloc",
+	.file	= "lib/scatterlist.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000122_hash = {
+	.next	= NULL,
+	.name	= "shash_setkey_unaligned",
+	.file	= "crypto/shash.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000123_hash = {
+	.next	= NULL,
+	.name	= "shmem_xattr_set",
+	.file	= "mm/shmem.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000124_hash = {
+	.next	= NULL,
+	.name	= "simple_transaction_get",
+	.file	= "include/linux/fs.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000125_hash = {
+	.next	= NULL,
+	.name	= "simple_write_to_buffer",
+	.file	= "include/linux/fs.h",
+	.param2	= 1,
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000127_hash = {
+	.next	= NULL,
+	.name	= "smk_write_ambient",
+	.file	= "security/smack/smackfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000128_hash = {
+	.next	= NULL,
+	.name	= "smk_write_cipso",
+	.file	= "security/smack/smackfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000129_hash = {
+	.next	= NULL,
+	.name	= "smk_write_direct",
+	.file	= "security/smack/smackfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000130_hash = {
+	.next	= NULL,
+	.name	= "smk_write_doi",
+	.file	= "security/smack/smackfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000131_hash = {
+	.next	= NULL,
+	.name	= "smk_write_load_list",
+	.file	= "security/smack/smackfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000132_hash = {
+	.next	= &_000102_hash,
+	.name	= "smk_write_logging",
+	.file	= "security/smack/smackfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000133_hash = {
+	.next	= NULL,
+	.name	= "smk_write_netlbladdr",
+	.file	= "security/smack/smackfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000134_hash = {
+	.next	= NULL,
+	.name	= "smk_write_onlycap",
+	.file	= "security/smack/smackfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000135_hash = {
+	.next	= NULL,
+	.name	= "sys_add_key",
+	.file	= "include/linux/syscalls.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000136_hash = {
+	.next	= NULL,
+	.name	= "sys_modify_ldt",
+	.file	= "arch/x86/include/asm/syscalls.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000137_hash = {
+	.next	= NULL,
+	.name	= "sys_semtimedop",
+	.file	= "include/linux/syscalls.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000138_hash = {
+	.next	= NULL,
+	.name	= "tomoyo_write_self",
+	.file	= "security/tomoyo/securityfs_if.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000139_hash = {
+	.next	= NULL,
+	.name	= "tpm_write",
+	.file	= "drivers/char/tpm/tpm.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000140_hash = {
+	.next	= NULL,
+	.name	= "tty_buffer_alloc",
+	.file	= "drivers/tty/tty_buffer.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000141_hash = {
+	.next	= NULL,
+	.name	= "user_instantiate",
+	.file	= "include/keys/user-type.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000142_hash = {
+	.next	= NULL,
+	.name	= "user_update",
+	.file	= "include/keys/user-type.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000143_hash = {
+	.next	= NULL,
+	.name	= "vc_do_resize",
+	.file	= "drivers/tty/vt/vt.c",
+	.param3	= 1,
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000145_hash = {
+	.next	= NULL,
+	.name	= "vcs_write",
+	.file	= "drivers/tty/vt/vc_screen.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000146_hash = {
+	.next	= NULL,
+	.name	= "vga_arb_write",
+	.file	= "drivers/gpu/vga/vgaarb.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000147_hash = {
+	.next	= NULL,
+	.name	= "vga_switcheroo_debugfs_write",
+	.file	= "drivers/gpu/vga/vga_switcheroo.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000148_hash = {
+	.next	= NULL,
+	.name	= "__vmalloc",
+	.file	= "include/linux/vmalloc.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000149_hash = {
+	.next	= NULL,
+	.name	= "vmalloc_32",
+	.file	= "include/linux/vmalloc.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000150_hash = {
+	.next	= NULL,
+	.name	= "vmalloc_32_user",
+	.file	= "include/linux/vmalloc.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000151_hash = {
+	.next	= NULL,
+	.name	= "vmalloc_exec",
+	.file	= "include/linux/vmalloc.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000152_hash = {
+	.next	= NULL,
+	.name	= "vmalloc_node",
+	.file	= "include/linux/vmalloc.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000153_hash = {
+	.next	= NULL,
+	.name	= "__vmalloc_node_flags",
+	.file	= "mm/vmalloc.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000154_hash = {
+	.next	= NULL,
+	.name	= "vmalloc_user",
+	.file	= "include/linux/vmalloc.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000155_hash = {
+	.next	= NULL,
+	.name	= "write",
+	.file	= "fs/sysfs/bin.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000156_hash = {
+	.next	= NULL,
+	.name	= "__xip_file_write",
+	.file	= "mm/filemap_xip.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000157_hash = {
+	.next	= NULL,
+	.name	= "acpi_ex_allocate_name_string",
+	.file	= "drivers/acpi/acpica/exnames.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000158_hash = {
+	.next	= NULL,
+	.name	= "acpi_os_allocate_zeroed",
+	.file	= "include/acpi/platform/aclinux.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000159_hash = {
+	.next	= NULL,
+	.name	= "acpi_ut_initialize_buffer",
+	.file	= "drivers/acpi/acpica/utalloc.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000160_hash = {
+	.next	= NULL,
+	.name	= "add_numbered_child",
+	.file	= "drivers/mfd/twl-core.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000161_hash = {
+	.next	= NULL,
+	.name	= "___alloc_bootmem_nopanic",
+	.file	= "mm/nobootmem.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000162_hash = {
+	.next	= NULL,
+	.name	= "alloc_large_system_hash",
+	.file	= "include/linux/bootmem.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000163_hash = {
+	.next	= NULL,
+	.name	= "audit_init_entry",
+	.file	= "kernel/auditfilter.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000164_hash = {
+	.next	= NULL,
+	.name	= "__bio_map_kern",
+	.file	= "fs/bio.c",
+	.param2	= 1,
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000166_hash = {
+	.next	= NULL,
+	.name	= "blk_register_region",
+	.file	= "include/linux/genhd.h",
+	.param1	= 1,
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000168_hash = {
+	.next	= NULL,
+	.name	= "cdev_add",
+	.file	= "include/linux/cdev.h",
+	.param2	= 1,
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000170_hash = {
+	.next	= NULL,
+	.name	= "copy_to_user",
+	.file	= "arch/x86/include/asm/uaccess_32.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000171_hash = {
+	.next	= NULL,
+	.name	= "crypto_ahash_setkey",
+	.file	= "include/crypto/hash.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000172_hash = {
+	.next	= NULL,
+	.name	= "crypto_alloc_instance2",
+	.file	= "include/crypto/algapi.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000173_hash = {
+	.next	= NULL,
+	.name	= "crypto_shash_setkey",
+	.file	= "include/crypto/hash.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000174_hash = {
+	.next	= NULL,
+	.name	= "dev_set_alias",
+	.file	= "include/linux/netdevice.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000175_hash = {
+	.next	= NULL,
+	.name	= "do_readv_writev",
+	.file	= "fs/read_write.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000176_hash = {
+	.next	= NULL,
+	.name	= "getxattr",
+	.file	= "fs/xattr.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000177_hash = {
+	.next	= NULL,
+	.name	= "hugetlbfs_read_actor",
+	.file	= "fs/hugetlbfs/inode.c",
+	.param2	= 1,
+	.param5	= 1,
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000180_hash = {
+	.next	= NULL,
+	.name	= "keyctl_instantiate_key",
+	.file	= "security/keys/keyctl.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000181_hash = {
+	.next	= NULL,
+	.name	= "keyctl_instantiate_key_iov",
+	.file	= "security/keys/keyctl.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000182_hash = {
+	.next	= NULL,
+	.name	= "__kfifo_from_user",
+	.file	= "include/linux/kfifo.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000183_hash = {
+	.next	= NULL,
+	.name	= "kimage_crash_alloc",
+	.file	= "kernel/kexec.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000184_hash = {
+	.next	= NULL,
+	.name	= "kimage_normal_alloc",
+	.file	= "kernel/kexec.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000185_hash = {
+	.next	= NULL,
+	.name	= "mpi_alloc",
+	.file	= "include/linux/mpi.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000186_hash = {
+	.next	= NULL,
+	.name	= "mpi_set_bit",
+	.file	= "include/linux/mpi.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000187_hash = {
+	.next	= NULL,
+	.name	= "mpi_set_highbit",
+	.file	= "include/linux/mpi.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000188_hash = {
+	.next	= NULL,
+	.name	= "neigh_hash_alloc",
+	.file	= "net/core/neighbour.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000189_hash = {
+	.next	= NULL,
+	.name	= "nl_pid_hash_zalloc",
+	.file	= "net/netlink/af_netlink.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000190_hash = {
+	.next	= NULL,
+	.name	= "pci_add_cap_save_buffer",
+	.file	= "drivers/pci/pci.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000191_hash = {
+	.next	= NULL,
+	.name	= "pcpu_mem_zalloc",
+	.file	= "mm/percpu.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000192_hash = {
+	.next	= NULL,
+	.name	= "platform_create_bundle",
+	.file	= "include/linux/platform_device.h",
+	.param4	= 1,
+	.param6	= 1,
+};
+
+struct size_overflow_hash _000194_hash = {
+	.next	= NULL,
+	.name	= "process_vm_rw",
+	.file	= "mm/process_vm_access.c",
+	.param3	= 1,
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000196_hash = {
+	.next	= NULL,
+	.name	= "process_vm_rw_single_vec",
+	.file	= "mm/process_vm_access.c",
+	.param1	= 1,
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000198_hash = {
+	.next	= NULL,
+	.name	= "profile_load",
+	.file	= "security/apparmor/apparmorfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000199_hash = {
+	.next	= NULL,
+	.name	= "profile_remove",
+	.file	= "security/apparmor/apparmorfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000200_hash = {
+	.next	= NULL,
+	.name	= "profile_replace",
+	.file	= "security/apparmor/apparmorfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000201_hash = {
+	.next	= NULL,
+	.name	= "regcache_rbtree_insert_to_block",
+	.file	= "drivers/base/regmap/regcache-rbtree.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000202_hash = {
+	.next	= NULL,
+	.name	= "regmap_raw_write",
+	.file	= "include/linux/regmap.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000203_hash = {
+	.next	= NULL,
+	.name	= "relay_alloc_page_array",
+	.file	= "kernel/relay.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000204_hash = {
+	.next	= NULL,
+	.name	= "RESIZE_IF_NEEDED",
+	.file	= "lib/mpi/mpi-internal.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000205_hash = {
+	.next	= NULL,
+	.name	= "security_context_to_sid",
+	.file	= "security/selinux/ss/services.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000206_hash = {
+	.next	= NULL,
+	.name	= "security_context_to_sid_default",
+	.file	= "security/selinux/ss/services.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000207_hash = {
+	.next	= NULL,
+	.name	= "security_context_to_sid_force",
+	.file	= "security/selinux/ss/services.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000208_hash = {
+	.next	= NULL,
+	.name	= "selinux_transaction_write",
+	.file	= "security/selinux/selinuxfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000209_hash = {
+	.next	= NULL,
+	.name	= "sel_write_access",
+	.file	= "security/selinux/selinuxfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000210_hash = {
+	.next	= NULL,
+	.name	= "sel_write_create",
+	.file	= "security/selinux/selinuxfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000211_hash = {
+	.next	= NULL,
+	.name	= "sel_write_member",
+	.file	= "security/selinux/selinuxfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000212_hash = {
+	.next	= NULL,
+	.name	= "sel_write_relabel",
+	.file	= "security/selinux/selinuxfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000213_hash = {
+	.next	= NULL,
+	.name	= "sel_write_user",
+	.file	= "security/selinux/selinuxfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000214_hash = {
+	.next	= NULL,
+	.name	= "setkey",
+	.file	= "crypto/cipher.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000215_hash = {
+	.next	= NULL,
+	.name	= "setkey",
+	.file	= "crypto/ablkcipher.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000216_hash = {
+	.next	= NULL,
+	.name	= "setkey",
+	.file	= "crypto/aead.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000217_hash = {
+	.next	= NULL,
+	.name	= "setkey",
+	.file	= "crypto/blkcipher.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000218_hash = {
+	.next	= NULL,
+	.name	= "smk_write_access",
+	.file	= "security/smack/smackfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000219_hash = {
+	.next	= NULL,
+	.name	= "snapshot_write",
+	.file	= "kernel/power/user.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000220_hash = {
+	.next	= NULL,
+	.name	= "spi_alloc_master",
+	.file	= "include/linux/spi/spi.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000221_hash = {
+	.next	= NULL,
+	.name	= "spi_register_board_info",
+	.file	= "include/linux/spi/spi.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000222_hash = {
+	.next	= NULL,
+	.name	= "sys_flistxattr",
+	.file	= "include/linux/syscalls.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000223_hash = {
+	.next	= NULL,
+	.name	= "sys_fsetxattr",
+	.file	= "include/linux/syscalls.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000224_hash = {
+	.next	= NULL,
+	.name	= "sysfs_write_file",
+	.file	= "fs/sysfs/file.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000225_hash = {
+	.next	= NULL,
+	.name	= "sys_ipc",
+	.file	= "include/linux/syscalls.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000226_hash = {
+	.next	= NULL,
+	.name	= "sys_keyctl",
+	.file	= "include/linux/syscalls.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000227_hash = {
+	.next	= NULL,
+	.name	= "sys_listxattr",
+	.file	= "include/linux/syscalls.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000228_hash = {
+	.next	= NULL,
+	.name	= "sys_llistxattr",
+	.file	= "include/linux/syscalls.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000229_hash = {
+	.next	= NULL,
+	.name	= "sys_lsetxattr",
+	.file	= "include/linux/syscalls.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000230_hash = {
+	.next	= NULL,
+	.name	= "sys_sched_setaffinity",
+	.file	= "include/linux/syscalls.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000231_hash = {
+	.next	= NULL,
+	.name	= "sys_semop",
+	.file	= "include/linux/syscalls.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000232_hash = {
+	.next	= NULL,
+	.name	= "sys_setxattr",
+	.file	= "include/linux/syscalls.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000233_hash = {
+	.next	= NULL,
+	.name	= "tnode_alloc",
+	.file	= "net/ipv4/fib_trie.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000234_hash = {
+	.next	= NULL,
+	.name	= "tomoyo_commit_ok",
+	.file	= "security/tomoyo/memory.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000235_hash = {
+	.next	= NULL,
+	.name	= "tomoyo_scan_bprm",
+	.file	= "security/tomoyo/condition.c",
+	.param2	= 1,
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000237_hash = {
+	.next	= NULL,
+	.name	= "tty_write",
+	.file	= "drivers/tty/tty_io.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000238_hash = {
+	.next	= NULL,
+	.name	= "vc_resize",
+	.file	= "include/linux/vt_kern.h",
+	.param2	= 1,
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000240_hash = {
+	.next	= NULL,
+	.name	= "vmalloc",
+	.file	= "include/linux/vmalloc.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000241_hash = {
+	.next	= NULL,
+	.name	= "vzalloc",
+	.file	= "include/linux/vmalloc.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000242_hash = {
+	.next	= NULL,
+	.name	= "vzalloc_node",
+	.file	= "include/linux/vmalloc.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000243_hash = {
+	.next	= NULL,
+	.name	= "xfrm_hash_alloc",
+	.file	= "net/xfrm/xfrm_hash.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000244_hash = {
+	.next	= NULL,
+	.name	= "acpi_ds_build_internal_package_obj",
+	.file	= "drivers/acpi/acpica/dsobject.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000245_hash = {
+	.next	= NULL,
+	.name	= "acpi_system_read_event",
+	.file	= "drivers/acpi/event.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000246_hash = {
+	.next	= NULL,
+	.name	= "acpi_ut_create_buffer_object",
+	.file	= "drivers/acpi/acpica/utobject.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000247_hash = {
+	.next	= NULL,
+	.name	= "acpi_ut_create_package_object",
+	.file	= "drivers/acpi/acpica/utobject.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000248_hash = {
+	.next	= NULL,
+	.name	= "acpi_ut_create_string_object",
+	.file	= "drivers/acpi/acpica/utobject.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000249_hash = {
+	.next	= NULL,
+	.name	= "add_child",
+	.file	= "drivers/mfd/twl-core.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000250_hash = {
+	.next	= NULL,
+	.name	= "___alloc_bootmem",
+	.file	= "mm/nobootmem.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000251_hash = {
+	.next	= NULL,
+	.name	= "__alloc_bootmem_nopanic",
+	.file	= "include/linux/bootmem.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000252_hash = {
+	.next	= NULL,
+	.name	= "async_setkey",
+	.file	= "crypto/blkcipher.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000253_hash = {
+	.next	= NULL,
+	.name	= "bio_map_kern",
+	.file	= "include/linux/bio.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000254_hash = {
+	.next	= NULL,
+	.name	= "copy_oldmem_page",
+	.file	= "include/linux/crash_dump.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000255_hash = {
+	.next	= NULL,
+	.name	= "do_sigpending",
+	.file	= "include/linux/signal.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000257_hash = {
+	.next	= NULL,
+	.name	= "keyctl_describe_key",
+	.file	= "security/keys/keyctl.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000258_hash = {
+	.next	= NULL,
+	.name	= "keyctl_get_security",
+	.file	= "security/keys/keyctl.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000259_hash = {
+	.next	= NULL,
+	.name	= "keyring_read",
+	.file	= "security/keys/keyring.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000260_hash = {
+	.next	= NULL,
+	.name	= "kfifo_copy_to_user",
+	.file	= "kernel/kfifo.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000261_hash = {
+	.next	= NULL,
+	.name	= "mousedev_read",
+	.file	= "drivers/input/mousedev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000262_hash = {
+	.next	= NULL,
+	.name	= "mpi_lshift_limbs",
+	.file	= "lib/mpi/mpi-bit.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000263_hash = {
+	.next	= NULL,
+	.name	= "neigh_hash_grow",
+	.file	= "net/core/neighbour.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000264_hash = {
+	.next	= NULL,
+	.name	= "posix_clock_register",
+	.file	= "include/linux/posix-clock.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000265_hash = {
+	.next	= NULL,
+	.name	= "__proc_file_read",
+	.file	= "fs/proc/generic.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000266_hash = {
+	.next	= NULL,
+	.name	= "read_profile",
+	.file	= "kernel/profile.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000267_hash = {
+	.next	= NULL,
+	.name	= "read_vmcore",
+	.file	= "fs/proc/vmcore.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000268_hash = {
+	.next	= NULL,
+	.name	= "redirected_tty_write",
+	.file	= "drivers/tty/tty_io.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000269_hash = {
+	.next	= NULL,
+	.name	= "__register_chrdev",
+	.file	= "include/linux/fs.h",
+	.param2	= 1,
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000271_hash = {
+	.next	= NULL,
+	.name	= "request_key_auth_read",
+	.file	= "security/keys/request_key_auth.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000272_hash = {
+	.next	= NULL,
+	.name	= "shash_async_setkey",
+	.file	= "crypto/shash.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000273_hash = {
+	.next	= NULL,
+	.name	= "shash_compat_setkey",
+	.file	= "crypto/shash.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000274_hash = {
+	.next	= NULL,
+	.name	= "simple_read_from_buffer",
+	.file	= "include/linux/fs.h",
+	.param2	= 1,
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000276_hash = {
+	.next	= NULL,
+	.name	= "store_ifalias",
+	.file	= "net/core/net-sysfs.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000277_hash = {
+	.next	= NULL,
+	.name	= "subbuf_read_actor",
+	.file	= "kernel/relay.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000278_hash = {
+	.next	= NULL,
+	.name	= "sys_fgetxattr",
+	.file	= "include/linux/syscalls.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000279_hash = {
+	.next	= NULL,
+	.name	= "sys_getxattr",
+	.file	= "include/linux/syscalls.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000280_hash = {
+	.next	= NULL,
+	.name	= "sys_kexec_load",
+	.file	= "include/linux/syscalls.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000281_hash = {
+	.next	= NULL,
+	.name	= "sys_lgetxattr",
+	.file	= "include/linux/syscalls.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000282_hash = {
+	.next	= NULL,
+	.name	= "sys_process_vm_readv",
+	.file	= "include/linux/syscalls.h",
+	.param3	= 1,
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000284_hash = {
+	.next	= NULL,
+	.name	= "sys_process_vm_writev",
+	.file	= "include/linux/syscalls.h",
+	.param3	= 1,
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000286_hash = {
+	.next	= NULL,
+	.name	= "sys_sched_getaffinity",
+	.file	= "include/linux/syscalls.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000287_hash = {
+	.next	= NULL,
+	.name	= "tomoyo_read_self",
+	.file	= "security/tomoyo/securityfs_if.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000288_hash = {
+	.next	= NULL,
+	.name	= "tpm_read",
+	.file	= "drivers/char/tpm/tpm.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000289_hash = {
+	.next	= NULL,
+	.name	= "user_read",
+	.file	= "include/keys/user-type.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000290_hash = {
+	.next	= NULL,
+	.name	= "vcs_read",
+	.file	= "drivers/tty/vt/vc_screen.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000291_hash = {
+	.next	= NULL,
+	.name	= "vfs_readv",
+	.file	= "include/linux/fs.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000292_hash = {
+	.next	= NULL,
+	.name	= "vfs_writev",
+	.file	= "include/linux/fs.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000293_hash = {
+	.next	= NULL,
+	.name	= "vga_arb_read",
+	.file	= "drivers/gpu/vga/vgaarb.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000294_hash = {
+	.next	= NULL,
+	.name	= "xz_dec_lzma2_create",
+	.file	= "lib/xz/xz_dec_lzma2.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000295_hash = {
+	.next	= NULL,
+	.name	= "aat2870_reg_read_file",
+	.file	= "drivers/mfd/aat2870-core.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000296_hash = {
+	.next	= NULL,
+	.name	= "__alloc_bootmem",
+	.file	= "include/linux/bootmem.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000297_hash = {
+	.next	= NULL,
+	.name	= "__alloc_bootmem_low",
+	.file	= "include/linux/bootmem.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000298_hash = {
+	.next	= NULL,
+	.name	= "__alloc_bootmem_node_nopanic",
+	.file	= "include/linux/bootmem.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000299_hash = {
+	.next	= NULL,
+	.name	= "blk_rq_map_kern",
+	.file	= "include/linux/blkdev.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000300_hash = {
+	.next	= NULL,
+	.name	= "cgroup_read_s64",
+	.file	= "kernel/cgroup.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000301_hash = {
+	.next	= NULL,
+	.name	= "cgroup_read_u64",
+	.file	= "kernel/cgroup.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000302_hash = {
+	.next	= NULL,
+	.name	= "cpuset_common_file_read",
+	.file	= "kernel/cpuset.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000303_hash = {
+	.next	= NULL,
+	.name	= "filter_read",
+	.file	= "lib/dma-debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000304_hash = {
+	.next	= NULL,
+	.name	= "ima_show_htable_value",
+	.file	= "security/integrity/ima/ima_fs.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000305_hash = {
+	.next	= NULL,
+	.name	= "kernel_readv",
+	.file	= "fs/splice.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000306_hash = {
+	.next	= NULL,
+	.name	= "__kfifo_to_user",
+	.file	= "include/linux/kfifo.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000307_hash = {
+	.next	= NULL,
+	.name	= "__kfifo_to_user_r",
+	.file	= "include/linux/kfifo.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000308_hash = {
+	.next	= NULL,
+	.name	= "mqueue_read_file",
+	.file	= "ipc/mqueue.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000309_hash = {
+	.next	= NULL,
+	.name	= "oom_adjust_read",
+	.file	= "fs/proc/base.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000310_hash = {
+	.next	= NULL,
+	.name	= "oom_score_adj_read",
+	.file	= "fs/proc/base.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000311_hash = {
+	.next	= NULL,
+	.name	= "pm_qos_power_read",
+	.file	= "kernel/power/qos.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000312_hash = {
+	.next	= NULL,
+	.name	= "proc_coredump_filter_read",
+	.file	= "fs/proc/base.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000313_hash = {
+	.next	= NULL,
+	.name	= "proc_fdinfo_read",
+	.file	= "fs/proc/base.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000314_hash = {
+	.next	= NULL,
+	.name	= "proc_info_read",
+	.file	= "fs/proc/base.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000315_hash = {
+	.next	= NULL,
+	.name	= "proc_loginuid_read",
+	.file	= "fs/proc/base.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000316_hash = {
+	.next	= NULL,
+	.name	= "proc_pid_attr_read",
+	.file	= "fs/proc/base.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000317_hash = {
+	.next	= NULL,
+	.name	= "proc_sessionid_read",
+	.file	= "fs/proc/base.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000318_hash = {
+	.next	= NULL,
+	.name	= "pstore_file_read",
+	.file	= "fs/pstore/inode.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000319_hash = {
+	.next	= NULL,
+	.name	= "read_enabled_file_bool",
+	.file	= "kernel/kprobes.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000320_hash = {
+	.next	= NULL,
+	.name	= "read_file_blob",
+	.file	= "fs/debugfs/file.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000321_hash = {
+	.next	= NULL,
+	.name	= "read_file_bool",
+	.file	= "fs/debugfs/file.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000322_hash = {
+	.next	= NULL,
+	.name	= "read_from_oldmem",
+	.file	= "fs/proc/vmcore.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000323_hash = {
+	.next	= NULL,
+	.name	= "read_oldmem",
+	.file	= "drivers/char/mem.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000324_hash = {
+	.next	= NULL,
+	.name	= "res_counter_read",
+	.file	= "include/linux/res_counter.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000325_hash = {
+	.next	= NULL,
+	.name	= "sel_read_avc_cache_threshold",
+	.file	= "security/selinux/selinuxfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000326_hash = {
+	.next	= NULL,
+	.name	= "sel_read_avc_hash_stats",
+	.file	= "security/selinux/selinuxfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000327_hash = {
+	.next	= NULL,
+	.name	= "sel_read_bool",
+	.file	= "security/selinux/selinuxfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000328_hash = {
+	.next	= NULL,
+	.name	= "sel_read_checkreqprot",
+	.file	= "security/selinux/selinuxfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000329_hash = {
+	.next	= NULL,
+	.name	= "sel_read_class",
+	.file	= "security/selinux/selinuxfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000330_hash = {
+	.next	= NULL,
+	.name	= "sel_read_enforce",
+	.file	= "security/selinux/selinuxfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000331_hash = {
+	.next	= NULL,
+	.name	= "sel_read_handle_status",
+	.file	= "security/selinux/selinuxfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000332_hash = {
+	.next	= NULL,
+	.name	= "sel_read_handle_unknown",
+	.file	= "security/selinux/selinuxfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000333_hash = {
+	.next	= NULL,
+	.name	= "sel_read_initcon",
+	.file	= "security/selinux/selinuxfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000334_hash = {
+	.next	= NULL,
+	.name	= "sel_read_mls",
+	.file	= "security/selinux/selinuxfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000335_hash = {
+	.next	= NULL,
+	.name	= "sel_read_perm",
+	.file	= "security/selinux/selinuxfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000336_hash = {
+	.next	= NULL,
+	.name	= "sel_read_policy",
+	.file	= "security/selinux/selinuxfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000337_hash = {
+	.next	= NULL,
+	.name	= "sel_read_policycap",
+	.file	= "security/selinux/selinuxfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000338_hash = {
+	.next	= NULL,
+	.name	= "sel_read_policyvers",
+	.file	= "security/selinux/selinuxfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000339_hash = {
+	.next	= NULL,
+	.name	= "simple_attr_read",
+	.file	= "include/linux/fs.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000340_hash = {
+	.next	= NULL,
+	.name	= "simple_transaction_read",
+	.file	= "include/linux/fs.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000341_hash = {
+	.next	= NULL,
+	.name	= "smk_read_ambient",
+	.file	= "security/smack/smackfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000342_hash = {
+	.next	= NULL,
+	.name	= "smk_read_direct",
+	.file	= "security/smack/smackfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000343_hash = {
+	.next	= NULL,
+	.name	= "smk_read_doi",
+	.file	= "security/smack/smackfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000344_hash = {
+	.next	= NULL,
+	.name	= "smk_read_logging",
+	.file	= "security/smack/smackfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000345_hash = {
+	.next	= NULL,
+	.name	= "smk_read_onlycap",
+	.file	= "security/smack/smackfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000346_hash = {
+	.next	= NULL,
+	.name	= "snapshot_read",
+	.file	= "kernel/power/user.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000347_hash = {
+	.next	= NULL,
+	.name	= "supply_map_read_file",
+	.file	= "drivers/regulator/core.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000348_hash = {
+	.next	= NULL,
+	.name	= "sysfs_read_file",
+	.file	= "fs/sysfs/file.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000349_hash = {
+	.next	= NULL,
+	.name	= "sys_preadv",
+	.file	= "include/linux/syscalls.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000350_hash = {
+	.next	= NULL,
+	.name	= "sys_pwritev",
+	.file	= "include/linux/syscalls.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000351_hash = {
+	.next	= NULL,
+	.name	= "sys_readv",
+	.file	= "include/linux/syscalls.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000352_hash = {
+	.next	= NULL,
+	.name	= "sys_rt_sigpending",
+	.file	= "include/linux/syscalls.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000353_hash = {
+	.next	= NULL,
+	.name	= "sys_writev",
+	.file	= "include/linux/syscalls.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000354_hash = {
+	.next	= NULL,
+	.name	= "ima_show_htable_violations",
+	.file	= "security/integrity/ima/ima_fs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000355_hash = {
+	.next	= NULL,
+	.name	= "ima_show_measurements_count",
+	.file	= "security/integrity/ima/ima_fs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000356_hash = {
+	.next	= NULL,
+	.name	= "alloc_cpu_rmap",
+	.file	= "include/linux/cpu_rmap.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000357_hash = {
+	.next	= NULL,
+	.name	= "alloc_page_cgroup",
+	.file	= "mm/page_cgroup.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000358_hash = {
+	.next	= NULL,
+	.name	= "alloc_sched_domains",
+	.file	= "include/linux/sched.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000359_hash = {
+	.next	= NULL,
+	.name	= "compat_rw_copy_check_uvector",
+	.file	= "include/linux/compat.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000360_hash = {
+	.next	= NULL,
+	.name	= "compat_sys_kexec_load",
+	.file	= "include/linux/kexec.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000361_hash = {
+	.next	= NULL,
+	.name	= "compat_sys_semtimedop",
+	.file	= "include/linux/compat.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000362_hash = {
+	.next	= NULL,
+	.name	= "copy_from_user",
+	.file	= "arch/x86/include/asm/uaccess_64.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000363_hash = {
+	.next	= NULL,
+	.name	= "__copy_from_user",
+	.file	= "arch/x86/include/asm/uaccess_64.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000364_hash = {
+	.next	= NULL,
+	.name	= "__copy_from_user_inatomic",
+	.file	= "arch/x86/include/asm/uaccess_64.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000365_hash = {
+	.next	= NULL,
+	.name	= "__copy_from_user_nocache",
+	.file	= "arch/x86/include/asm/uaccess_64.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000366_hash = {
+	.next	= NULL,
+	.name	= "__copy_in_user",
+	.file	= "arch/x86/include/asm/uaccess_64.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000367_hash = {
+	.next	= NULL,
+	.name	= "copy_in_user",
+	.file	= "arch/x86/include/asm/uaccess_64.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000368_hash = {
+	.next	= NULL,
+	.name	= "__copy_to_user",
+	.file	= "arch/x86/include/asm/uaccess_64.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000369_hash = {
+	.next	= NULL,
+	.name	= "copy_to_user",
+	.file	= "arch/x86/include/asm/uaccess_64.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000370_hash = {
+	.next	= NULL,
+	.name	= "__copy_to_user_inatomic",
+	.file	= "arch/x86/include/asm/uaccess_64.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000371_hash = {
+	.next	= NULL,
+	.name	= "kmalloc_node",
+	.file	= "include/linux/slub_def.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000372_hash = {
+	.next	= NULL,
+	.name	= "pcpu_alloc_bootmem",
+	.file	= "arch/x86/kernel/setup_percpu.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000373_hash = {
+	.next	= NULL,
+	.name	= "sys32_rt_sigpending",
+	.file	= "arch/x86/include/asm/sys_ia32.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000374_hash = {
+	.next	= NULL,
+	.name	= "tunables_read",
+	.file	= "arch/x86/platform/uv/tlb_uv.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000375_hash = {
+	.next	= NULL,
+	.name	= "compat_do_readv_writev",
+	.file	= "fs/compat.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000376_hash = {
+	.next	= NULL,
+	.name	= "compat_keyctl_instantiate_key_iov",
+	.file	= "security/keys/compat.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000377_hash = {
+	.next	= NULL,
+	.name	= "compat_process_vm_rw",
+	.file	= "mm/process_vm_access.c",
+	.param3	= 1,
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000379_hash = {
+	.next	= NULL,
+	.name	= "do_pages_stat",
+	.file	= "mm/migrate.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000380_hash = {
+	.next	= NULL,
+	.name	= "kzalloc_node",
+	.file	= "include/linux/slab.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000381_hash = {
+	.next	= NULL,
+	.name	= "pcpu_fc_alloc",
+	.file	= "arch/x86/kernel/setup_percpu.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000382_hash = {
+	.next	= NULL,
+	.name	= "ptc_proc_write",
+	.file	= "arch/x86/platform/uv/tlb_uv.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000383_hash = {
+	.next	= NULL,
+	.name	= "tunables_write",
+	.file	= "arch/x86/platform/uv/tlb_uv.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000384_hash = {
+	.next	= NULL,
+	.name	= "__alloc_bootmem_low_node",
+	.file	= "include/linux/bootmem.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000385_hash = {
+	.next	= NULL,
+	.name	= "__alloc_bootmem_node",
+	.file	= "include/linux/bootmem.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000386_hash = {
+	.next	= NULL,
+	.name	= "compat_readv",
+	.file	= "fs/compat.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000387_hash = {
+	.next	= NULL,
+	.name	= "compat_sys_keyctl",
+	.file	= "include/linux/compat.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000388_hash = {
+	.next	= NULL,
+	.name	= "compat_sys_process_vm_readv",
+	.file	= "include/linux/compat.h",
+	.param3	= 1,
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000390_hash = {
+	.next	= NULL,
+	.name	= "compat_sys_process_vm_writev",
+	.file	= "include/linux/compat.h",
+	.param3	= 1,
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000392_hash = {
+	.next	= NULL,
+	.name	= "compat_writev",
+	.file	= "fs/compat.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000393_hash = {
+	.next	= NULL,
+	.name	= "sys_move_pages",
+	.file	= "include/linux/syscalls.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000394_hash = {
+	.next	= NULL,
+	.name	= "__alloc_bootmem_node_high",
+	.file	= "include/linux/bootmem.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000395_hash = {
+	.next	= NULL,
+	.name	= "compat_sys_move_pages",
+	.file	= "include/linux/compat.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000396_hash = {
+	.next	= NULL,
+	.name	= "compat_sys_preadv",
+	.file	= "include/linux/compat.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000397_hash = {
+	.next	= NULL,
+	.name	= "compat_sys_pwritev",
+	.file	= "include/linux/compat.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000398_hash = {
+	.next	= NULL,
+	.name	= "compat_sys_readv",
+	.file	= "include/linux/compat.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000399_hash = {
+	.next	= NULL,
+	.name	= "compat_sys_writev",
+	.file	= "include/linux/compat.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000400_hash = {
+	.next	= NULL,
+	.name	= "sparse_early_usemaps_alloc_node",
+	.file	= "mm/sparse.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000401_hash = {
+	.next	= NULL,
+	.name	= "__earlyonly_bootmem_alloc",
+	.file	= "mm/sparse-vmemmap.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000402_hash = {
+	.next	= NULL,
+	.name	= "sparse_mem_maps_populate_node",
+	.file	= "include/linux/mm.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000403_hash = {
+	.next	= NULL,
+	.name	= "vmemmap_alloc_block",
+	.file	= "include/linux/mm.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000404_hash = {
+	.next	= NULL,
+	.name	= "sparse_early_mem_maps_alloc_node",
+	.file	= "mm/sparse.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000405_hash = {
+	.next	= NULL,
+	.name	= "vmemmap_alloc_block_buf",
+	.file	= "include/linux/mm.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000406_hash = {
+	.next	= NULL,
+	.name	= "acpi_battery_write_alarm",
+	.file	= "drivers/acpi/battery.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000407_hash = {
+	.next	= NULL,
+	.name	= "acpi_battery_write_alarm",
+	.file	= "drivers/acpi/sbs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000408_hash = {
+	.next	= NULL,
+	.name	= "ad7879_spi_xfer",
+	.file	= "drivers/input/touchscreen/ad7879-spi.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000409_hash = {
+	.next	= NULL,
+	.name	= "add_port",
+	.file	= "drivers/char/virtio_console.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000410_hash = {
+	.next	= NULL,
+	.name	= "addtgt",
+	.file	= "drivers/block/aoe/aoecmd.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000411_hash = {
+	.next	= NULL,
+	.name	= "adu_read",
+	.file	= "drivers/usb/misc/adutux.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000412_hash = {
+	.next	= NULL,
+	.name	= "adu_write",
+	.file	= "drivers/usb/misc/adutux.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000413_hash = {
+	.next	= NULL,
+	.name	= "aer_inject_write",
+	.file	= "drivers/pci/pcie/aer/aer_inject.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000414_hash = {
+	.next	= NULL,
+	.name	= "aes_decrypt_fail_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000415_hash = {
+	.next	= NULL,
+	.name	= "aes_decrypt_interrupt_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000416_hash = {
+	.next	= NULL,
+	.name	= "aes_decrypt_packets_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000417_hash = {
+	.next	= NULL,
+	.name	= "aes_encrypt_fail_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000418_hash = {
+	.next	= NULL,
+	.name	= "aes_encrypt_interrupt_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000419_hash = {
+	.next	= NULL,
+	.name	= "aes_encrypt_packets_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000420_hash = {
+	.next	= NULL,
+	.name	= "afs_alloc_flat_call",
+	.file	= "fs/afs/rxrpc.c",
+	.param2	= 1,
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000422_hash = {
+	.next	= NULL,
+	.name	= "afs_cell_alloc",
+	.file	= "fs/afs/cell.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000423_hash = {
+	.next	= NULL,
+	.name	= "afs_proc_cells_write",
+	.file	= "fs/afs/proc.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000424_hash = {
+	.next	= NULL,
+	.name	= "afs_proc_rootcell_write",
+	.file	= "fs/afs/proc.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000425_hash = {
+	.next	= NULL,
+	.name	= "aggr_recv_addba_req_evt",
+	.file	= "drivers/net/wireless/ath/ath6kl/txrx.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000426_hash = {
+	.next	= NULL,
+	.name	= "agp_3_5_isochronous_node_enable",
+	.file	= "drivers/char/agp/isoch.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000427_hash = {
+	.next	= NULL,
+	.name	= "agp_alloc_page_array",
+	.file	= "drivers/char/agp/generic.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000428_hash = {
+	.next	= NULL,
+	.name	= "alg_setkey",
+	.file	= "crypto/af_alg.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000429_hash = {
+	.next	= NULL,
+	.name	= "alloc_buf",
+	.file	= "drivers/char/virtio_console.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000430_hash = {
+	.next	= NULL,
+	.name	= "alloc_context",
+	.file	= "drivers/md/dm-raid1.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000431_hash = {
+	.next	= NULL,
+	.name	= "alloc_context",
+	.file	= "drivers/md/dm-stripe.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000432_hash = {
+	.next	= NULL,
+	.name	= "__alloc_dev_table",
+	.file	= "fs/exofs/super.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000433_hash = {
+	.next	= NULL,
+	.name	= "alloc_ep_req",
+	.file	= "drivers/usb/gadget/f_midi.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000434_hash = {
+	.next	= NULL,
+	.name	= "alloc_flex_gd",
+	.file	= "fs/ext4/resize.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000435_hash = {
+	.next	= NULL,
+	.name	= "__alloc_objio_seg",
+	.file	= "fs/nfs/objlayout/objio_osd.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000436_hash = {
+	.next	= NULL,
+	.name	= "alloc_one_pg_vec_page",
+	.file	= "net/packet/af_packet.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000437_hash = {
+	.next	= NULL,
+	.name	= "alloc_ring",
+	.file	= "drivers/net/ethernet/chelsio/cxgb3/sge.c",
+	.param2	= 1,
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000438_hash = {
+	.next	= NULL,
+	.name	= "alloc_ring",
+	.file	= "drivers/net/ethernet/chelsio/cxgb4vf/sge.c",
+	.param2	= 1,
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000441_hash = {
+	.next	= NULL,
+	.name	= "alloc_ts_config",
+	.file	= "include/linux/textsearch.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000442_hash = {
+	.next	= NULL,
+	.name	= "altera_drscan",
+	.file	= "drivers/misc/altera-stapl/altera-jtag.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000443_hash = {
+	.next	= NULL,
+	.name	= "altera_irscan",
+	.file	= "drivers/misc/altera-stapl/altera-jtag.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000444_hash = {
+	.next	= &_000066_hash,
+	.name	= "altera_set_dr_post",
+	.file	= "drivers/misc/altera-stapl/altera-jtag.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000445_hash = {
+	.next	= NULL,
+	.name	= "altera_set_dr_pre",
+	.file	= "drivers/misc/altera-stapl/altera-jtag.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000446_hash = {
+	.next	= NULL,
+	.name	= "altera_set_ir_post",
+	.file	= "drivers/misc/altera-stapl/altera-jtag.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000447_hash = {
+	.next	= NULL,
+	.name	= "altera_set_ir_pre",
+	.file	= "drivers/misc/altera-stapl/altera-jtag.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000448_hash = {
+	.next	= NULL,
+	.name	= "altera_swap_dr",
+	.file	= "drivers/misc/altera-stapl/altera-jtag.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000449_hash = {
+	.next	= NULL,
+	.name	= "altera_swap_ir",
+	.file	= "drivers/misc/altera-stapl/altera-jtag.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000450_hash = {
+	.next	= NULL,
+	.name	= "aoedev_flush",
+	.file	= "drivers/block/aoe/aoedev.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000451_hash = {
+	.next	= NULL,
+	.name	= "asd_store_update_bios",
+	.file	= "drivers/scsi/aic94xx/aic94xx_init.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000452_hash = {
+	.next	= NULL,
+	.name	= "asix_read_cmd",
+	.file	= "drivers/net/usb/asix.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000453_hash = {
+	.next	= NULL,
+	.name	= "asix_write_cmd",
+	.file	= "drivers/net/usb/asix.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000454_hash = {
+	.next	= NULL,
+	.name	= "asn1_octets_decode",
+	.file	= "net/ipv4/netfilter/nf_nat_snmp_basic.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000455_hash = {
+	.next	= NULL,
+	.name	= "asn1_oid_decode",
+	.file	= "net/ipv4/netfilter/nf_nat_snmp_basic.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000456_hash = {
+	.next	= NULL,
+	.name	= "asn1_oid_decode",
+	.file	= "fs/cifs/asn1.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000457_hash = {
+	.next	= NULL,
+	.name	= "ath6kl_add_bss_if_needed",
+	.file	= "drivers/net/wireless/ath/ath6kl/cfg80211.c",
+	.param6	= 1,
+};
+
+struct size_overflow_hash _000458_hash = {
+	.next	= NULL,
+	.name	= "ath6kl_debug_roam_tbl_event",
+	.file	= "drivers/net/wireless/ath/ath6kl/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000459_hash = {
+	.next	= NULL,
+	.name	= "ath6kl_disconnect_timeout_read",
+	.file	= "drivers/net/wireless/ath/ath6kl/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000460_hash = {
+	.next	= NULL,
+	.name	= "ath6kl_endpoint_stats_read",
+	.file	= "drivers/net/wireless/ath/ath6kl/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000461_hash = {
+	.next	= NULL,
+	.name	= "ath6kl_fwlog_mask_read",
+	.file	= "drivers/net/wireless/ath/ath6kl/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000462_hash = {
+	.next	= NULL,
+	.name	= "ath6kl_fwlog_read",
+	.file	= "drivers/net/wireless/ath/ath6kl/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000463_hash = {
+	.next	= NULL,
+	.name	= "ath6kl_keepalive_read",
+	.file	= "drivers/net/wireless/ath/ath6kl/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000464_hash = {
+	.next	= NULL,
+	.name	= "ath6kl_lrssi_roam_read",
+	.file	= "drivers/net/wireless/ath/ath6kl/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000465_hash = {
+	.next	= NULL,
+	.name	= "ath6kl_regdump_read",
+	.file	= "drivers/net/wireless/ath/ath6kl/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000466_hash = {
+	.next	= NULL,
+	.name	= "ath6kl_regread_read",
+	.file	= "drivers/net/wireless/ath/ath6kl/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000467_hash = {
+	.next	= NULL,
+	.name	= "ath6kl_regwrite_read",
+	.file	= "drivers/net/wireless/ath/ath6kl/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000468_hash = {
+	.next	= NULL,
+	.name	= "ath6kl_roam_table_read",
+	.file	= "drivers/net/wireless/ath/ath6kl/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000469_hash = {
+	.next	= NULL,
+	.name	= "ath6kl_send_go_probe_resp",
+	.file	= "drivers/net/wireless/ath/ath6kl/cfg80211.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000470_hash = {
+	.next	= NULL,
+	.name	= "ath6kl_set_ap_probe_resp_ies",
+	.file	= "drivers/net/wireless/ath/ath6kl/cfg80211.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000471_hash = {
+	.next	= NULL,
+	.name	= "ath6kl_set_assoc_req_ies",
+	.file	= "drivers/net/wireless/ath/ath6kl/cfg80211.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000472_hash = {
+	.next	= NULL,
+	.name	= "ath6kl_tm_rx_report_event",
+	.file	= "drivers/net/wireless/ath/ath6kl/testmode.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000473_hash = {
+	.next	= NULL,
+	.name	= "ath6kl_wmi_send_action_cmd",
+	.file	= "drivers/net/wireless/ath/ath6kl/wmi.c",
+	.param7	= 1,
+};
+
+struct size_overflow_hash _000474_hash = {
+	.next	= NULL,
+	.name	= "ath6kl_wmi_send_mgmt_cmd",
+	.file	= "drivers/net/wireless/ath/ath6kl/wmi.c",
+	.param7	= 1,
+};
+
+struct size_overflow_hash _000475_hash = {
+	.next	= NULL,
+	.name	= "ath9k_debugfs_read_buf",
+	.file	= "drivers/net/wireless/ath/ath9k/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000476_hash = {
+	.next	= NULL,
+	.name	= "atk_debugfs_ggrp_read",
+	.file	= "drivers/hwmon/asus_atk0110.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000477_hash = {
+	.next	= NULL,
+	.name	= "atm_get_addr",
+	.file	= "net/atm/addr.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000478_hash = {
+	.next	= NULL,
+	.name	= "attach_hdlc_protocol",
+	.file	= "include/linux/hdlc.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000479_hash = {
+	.next	= NULL,
+	.name	= "av7110_vbi_write",
+	.file	= "drivers/media/dvb/ttpci/av7110_v4l.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000480_hash = {
+	.next	= NULL,
+	.name	= "ax25_setsockopt",
+	.file	= "net/ax25/af_ax25.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000481_hash = {
+	.next	= NULL,
+	.name	= "b43_debugfs_read",
+	.file	= "drivers/net/wireless/b43/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000482_hash = {
+	.next	= NULL,
+	.name	= "b43_debugfs_write",
+	.file	= "drivers/net/wireless/b43/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000483_hash = {
+	.next	= NULL,
+	.name	= "b43legacy_debugfs_read",
+	.file	= "drivers/net/wireless/b43legacy/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000484_hash = {
+	.next	= NULL,
+	.name	= "b43legacy_debugfs_write",
+	.file	= "drivers/net/wireless/b43legacy/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000485_hash = {
+	.next	= NULL,
+	.name	= "b43_nphy_load_samples",
+	.file	= "drivers/net/wireless/b43/phy_n.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000486_hash = {
+	.next	= NULL,
+	.name	= "bch_alloc",
+	.file	= "lib/bch.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000487_hash = {
+	.next	= NULL,
+	.name	= "bfad_debugfs_read",
+	.file	= "drivers/scsi/bfa/bfad_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000488_hash = {
+	.next	= NULL,
+	.name	= "bfad_debugfs_read_regrd",
+	.file	= "drivers/scsi/bfa/bfad_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000489_hash = {
+	.next	= NULL,
+	.name	= "bfad_debugfs_write_regrd",
+	.file	= "drivers/scsi/bfa/bfad_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000490_hash = {
+	.next	= NULL,
+	.name	= "bfad_debugfs_write_regwr",
+	.file	= "drivers/scsi/bfa/bfad_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000491_hash = {
+	.next	= NULL,
+	.name	= "bits_to_user",
+	.file	= "drivers/input/evdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000492_hash = {
+	.next	= NULL,
+	.name	= "bl_pipe_downcall",
+	.file	= "fs/nfs/blocklayout/blocklayoutdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000493_hash = {
+	.next	= NULL,
+	.name	= "bm_entry_read",
+	.file	= "fs/binfmt_misc.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000494_hash = {
+	.next	= NULL,
+	.name	= "bm_realloc_pages",
+	.file	= "drivers/block/drbd/drbd_bitmap.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000495_hash = {
+	.next	= NULL,
+	.name	= "bm_status_read",
+	.file	= "fs/binfmt_misc.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000496_hash = {
+	.next	= NULL,
+	.name	= "bnad_debugfs_read",
+	.file	= "drivers/net/ethernet/brocade/bna/bnad_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000497_hash = {
+	.next	= NULL,
+	.name	= "bnad_debugfs_read_regrd",
+	.file	= "drivers/net/ethernet/brocade/bna/bnad_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000498_hash = {
+	.next	= NULL,
+	.name	= "bnad_debugfs_write_regrd",
+	.file	= "drivers/net/ethernet/brocade/bna/bnad_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000499_hash = {
+	.next	= NULL,
+	.name	= "bnad_debugfs_write_regwr",
+	.file	= "drivers/net/ethernet/brocade/bna/bnad_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000500_hash = {
+	.next	= NULL,
+	.name	= "bnx2fc_cmd_mgr_alloc",
+	.file	= "drivers/scsi/bnx2fc/bnx2fc_io.c",
+	.param2	= 1,
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000502_hash = {
+	.next	= NULL,
+	.name	= "btmrvl_curpsmode_read",
+	.file	= "drivers/bluetooth/btmrvl_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000503_hash = {
+	.next	= NULL,
+	.name	= "btmrvl_gpiogap_read",
+	.file	= "drivers/bluetooth/btmrvl_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000504_hash = {
+	.next	= NULL,
+	.name	= "btmrvl_gpiogap_write",
+	.file	= "drivers/bluetooth/btmrvl_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000505_hash = {
+	.next	= NULL,
+	.name	= "btmrvl_hscfgcmd_read",
+	.file	= "drivers/bluetooth/btmrvl_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000506_hash = {
+	.next	= NULL,
+	.name	= "btmrvl_hscfgcmd_write",
+	.file	= "drivers/bluetooth/btmrvl_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000507_hash = {
+	.next	= &_000006_hash,
+	.name	= "btmrvl_hscmd_read",
+	.file	= "drivers/bluetooth/btmrvl_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000508_hash = {
+	.next	= NULL,
+	.name	= "btmrvl_hscmd_write",
+	.file	= "drivers/bluetooth/btmrvl_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000509_hash = {
+	.next	= NULL,
+	.name	= "btmrvl_hsmode_read",
+	.file	= "drivers/bluetooth/btmrvl_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000510_hash = {
+	.next	= NULL,
+	.name	= "btmrvl_hsmode_write",
+	.file	= "drivers/bluetooth/btmrvl_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000511_hash = {
+	.next	= NULL,
+	.name	= "btmrvl_hsstate_read",
+	.file	= "drivers/bluetooth/btmrvl_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000512_hash = {
+	.next	= NULL,
+	.name	= "btmrvl_pscmd_read",
+	.file	= "drivers/bluetooth/btmrvl_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000513_hash = {
+	.next	= NULL,
+	.name	= "btmrvl_pscmd_write",
+	.file	= "drivers/bluetooth/btmrvl_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000514_hash = {
+	.next	= NULL,
+	.name	= "btmrvl_psmode_read",
+	.file	= "drivers/bluetooth/btmrvl_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000515_hash = {
+	.next	= NULL,
+	.name	= "btmrvl_psmode_write",
+	.file	= "drivers/bluetooth/btmrvl_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000516_hash = {
+	.next	= NULL,
+	.name	= "btmrvl_psstate_read",
+	.file	= "drivers/bluetooth/btmrvl_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000517_hash = {
+	.next	= NULL,
+	.name	= "btmrvl_txdnldready_read",
+	.file	= "drivers/bluetooth/btmrvl_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000518_hash = {
+	.next	= NULL,
+	.name	= "btrfs_alloc_delayed_item",
+	.file	= "fs/btrfs/delayed-inode.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000519_hash = {
+	.next	= NULL,
+	.name	= "btrfs_copy_from_user",
+	.file	= "fs/btrfs/file.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000520_hash = {
+	.next	= NULL,
+	.name	= "__btrfs_map_block",
+	.file	= "fs/btrfs/volumes.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000521_hash = {
+	.next	= NULL,
+	.name	= "__c4iw_init_resource_fifo",
+	.file	= "drivers/infiniband/hw/cxgb4/resource.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000522_hash = {
+	.next	= NULL,
+	.name	= "cache_do_downcall",
+	.file	= "net/sunrpc/cache.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000523_hash = {
+	.next	= NULL,
+	.name	= "cachefiles_daemon_write",
+	.file	= "fs/cachefiles/daemon.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000524_hash = {
+	.next	= NULL,
+	.name	= "cache_read",
+	.file	= "net/sunrpc/cache.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000525_hash = {
+	.next	= NULL,
+	.name	= "ca_extend",
+	.file	= "drivers/md/persistent-data/dm-space-map-checker.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000526_hash = {
+	.next	= NULL,
+	.name	= "calc_hmac",
+	.file	= "security/keys/encrypted-keys/encrypted.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000527_hash = {
+	.next	= NULL,
+	.name	= "capi_write",
+	.file	= "drivers/isdn/capi/capi.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000528_hash = {
+	.next	= NULL,
+	.name	= "carl9170_cmd_buf",
+	.file	= "drivers/net/wireless/ath/carl9170/cmd.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000529_hash = {
+	.next	= NULL,
+	.name	= "carl9170_debugfs_read",
+	.file	= "drivers/net/wireless/ath/carl9170/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000530_hash = {
+	.next	= NULL,
+	.name	= "carl9170_debugfs_write",
+	.file	= "drivers/net/wireless/ath/carl9170/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000531_hash = {
+	.next	= NULL,
+	.name	= "cciss_proc_write",
+	.file	= "drivers/block/cciss.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000532_hash = {
+	.next	= NULL,
+	.name	= "ceph_buffer_new",
+	.file	= "include/linux/ceph/buffer.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000533_hash = {
+	.next	= NULL,
+	.name	= "ceph_copy_page_vector_to_user",
+	.file	= "include/linux/ceph/libceph.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000534_hash = {
+	.next	= NULL,
+	.name	= "ceph_copy_user_to_page_vector",
+	.file	= "include/linux/ceph/libceph.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000535_hash = {
+	.next	= NULL,
+	.name	= "ceph_read_dir",
+	.file	= "fs/ceph/dir.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000536_hash = {
+	.next	= NULL,
+	.name	= "ceph_setxattr",
+	.file	= "fs/ceph/xattr.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000537_hash = {
+	.next	= NULL,
+	.name	= "cfg80211_connect_result",
+	.file	= "include/net/cfg80211.h",
+	.param4	= 1,
+	.param6	= 1,
+};
+
+struct size_overflow_hash _000539_hash = {
+	.next	= NULL,
+	.name	= "cfg80211_disconnected",
+	.file	= "include/net/cfg80211.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000540_hash = {
+	.next	= NULL,
+	.name	= "cfg80211_inform_bss",
+	.file	= "include/net/cfg80211.h",
+	.param8	= 1,
+};
+
+struct size_overflow_hash _000541_hash = {
+	.next	= NULL,
+	.name	= "cfg80211_inform_bss_frame",
+	.file	= "include/net/cfg80211.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000542_hash = {
+	.next	= NULL,
+	.name	= "cfg80211_roamed_bss",
+	.file	= "include/net/cfg80211.h",
+	.param4	= 1,
+	.param6	= 1,
+};
+
+struct size_overflow_hash _000544_hash = {
+	.next	= NULL,
+	.name	= "cfi_read_pri",
+	.file	= "include/linux/mtd/cfi.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000545_hash = {
+	.next	= NULL,
+	.name	= "channel_type_read",
+	.file	= "net/mac80211/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000546_hash = {
+	.next	= NULL,
+	.name	= "cifs_idmap_key_instantiate",
+	.file	= "fs/cifs/cifsacl.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000547_hash = {
+	.next	= NULL,
+	.name	= "cifs_readdata_alloc",
+	.file	= "fs/cifs/cifssmb.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000548_hash = {
+	.next	= NULL,
+	.name	= "cifs_security_flags_proc_write",
+	.file	= "fs/cifs/cifs_debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000549_hash = {
+	.next	= NULL,
+	.name	= "cifs_setxattr",
+	.file	= "fs/cifs/xattr.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000550_hash = {
+	.next	= NULL,
+	.name	= "cifs_spnego_key_instantiate",
+	.file	= "fs/cifs/cifs_spnego.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000551_hash = {
+	.next	= NULL,
+	.name	= "cifs_writedata_alloc",
+	.file	= "fs/cifs/cifssmb.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000552_hash = {
+	.next	= NULL,
+	.name	= "ci_ll_write",
+	.file	= "drivers/media/dvb/ttpci/av7110_ca.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000553_hash = {
+	.next	= NULL,
+	.name	= "clusterip_proc_write",
+	.file	= "net/ipv4/netfilter/ipt_CLUSTERIP.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000554_hash = {
+	.next	= &_000108_hash,
+	.name	= "cm4040_write",
+	.file	= "drivers/char/pcmcia/cm4040_cs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000555_hash = {
+	.next	= NULL,
+	.name	= "cm_copy_private_data",
+	.file	= "drivers/infiniband/core/cm.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000556_hash = {
+	.next	= NULL,
+	.name	= "cmm_write",
+	.file	= "drivers/char/pcmcia/cm4000_cs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000557_hash = {
+	.next	= NULL,
+	.name	= "cm_write",
+	.file	= "drivers/acpi/custom_method.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000558_hash = {
+	.next	= NULL,
+	.name	= "coda_psdev_read",
+	.file	= "fs/coda/psdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000559_hash = {
+	.next	= NULL,
+	.name	= "coda_psdev_write",
+	.file	= "fs/coda/psdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000560_hash = {
+	.next	= NULL,
+	.name	= "codec_list_read_file",
+	.file	= "sound/soc/soc-core.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000561_hash = {
+	.next	= NULL,
+	.name	= "codec_reg_read_file",
+	.file	= "sound/soc/soc-core.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000562_hash = {
+	.next	= NULL,
+	.name	= "command_file_write",
+	.file	= "drivers/misc/ibmasm/ibmasmfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000563_hash = {
+	.next	= NULL,
+	.name	= "command_write",
+	.file	= "drivers/uwb/uwb-debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000564_hash = {
+	.next	= NULL,
+	.name	= "concat_writev",
+	.file	= "drivers/mtd/mtdconcat.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000565_hash = {
+	.next	= NULL,
+	.name	= "configfs_read_file",
+	.file	= "fs/configfs/file.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000566_hash = {
+	.next	= NULL,
+	.name	= "context_alloc",
+	.file	= "drivers/md/dm-raid.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000567_hash = {
+	.next	= NULL,
+	.name	= "copy_counters_to_user",
+	.file	= "net/bridge/netfilter/ebtables.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000568_hash = {
+	.next	= NULL,
+	.name	= "copy_entries_to_user",
+	.file	= "net/ipv6/netfilter/ip6_tables.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000569_hash = {
+	.next	= NULL,
+	.name	= "copy_entries_to_user",
+	.file	= "net/ipv4/netfilter/arp_tables.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000570_hash = {
+	.next	= NULL,
+	.name	= "copy_entries_to_user",
+	.file	= "net/ipv4/netfilter/ip_tables.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000571_hash = {
+	.next	= NULL,
+	.name	= "copy_from_user_toio",
+	.file	= "include/sound/core.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000572_hash = {
+	.next	= NULL,
+	.name	= "copy_macs",
+	.file	= "net/atm/mpc.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000573_hash = {
+	.next	= NULL,
+	.name	= "copy_to_user_fromio",
+	.file	= "include/sound/core.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000574_hash = {
+	.next	= NULL,
+	.name	= "cosa_write",
+	.file	= "drivers/net/wan/cosa.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000575_hash = {
+	.next	= NULL,
+	.name	= "create_attr_set",
+	.file	= "drivers/platform/x86/thinkpad_acpi.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000576_hash = {
+	.next	= NULL,
+	.name	= "create_entry",
+	.file	= "fs/binfmt_misc.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000577_hash = {
+	.next	= NULL,
+	.name	= "create_gpadl_header",
+	.file	= "drivers/hv/channel.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000578_hash = {
+	.next	= NULL,
+	.name	= "create_queues",
+	.file	= "drivers/atm/ambassador.c",
+	.param2	= 1,
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000580_hash = {
+	.next	= NULL,
+	.name	= "_create_sg_bios",
+	.file	= "drivers/scsi/osd/osd_initiator.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000581_hash = {
+	.next	= NULL,
+	.name	= "cryptd_alloc_instance",
+	.file	= "crypto/cryptd.c",
+	.param2	= 1,
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000583_hash = {
+	.next	= NULL,
+	.name	= "cryptd_hash_setkey",
+	.file	= "crypto/cryptd.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000584_hash = {
+	.next	= NULL,
+	.name	= "crypto_authenc_esn_setkey",
+	.file	= "crypto/authencesn.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000585_hash = {
+	.next	= NULL,
+	.name	= "crypto_authenc_setkey",
+	.file	= "crypto/authenc.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000586_hash = {
+	.next	= NULL,
+	.name	= "ctrl_out",
+	.file	= "drivers/usb/misc/usbtest.c",
+	.param3	= 1,
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000588_hash = {
+	.next	= NULL,
+	.name	= "cx18_copy_buf_to_user",
+	.file	= "drivers/media/video/cx18/cx18-fileops.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000589_hash = {
+	.next	= NULL,
+	.name	= "cx24116_writeregN",
+	.file	= "drivers/media/dvb/frontends/cx24116.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000590_hash = {
+	.next	= NULL,
+	.name	= "cxgb_alloc_mem",
+	.file	= "drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000591_hash = {
+	.next	= NULL,
+	.name	= "cxgbi_alloc_big_mem",
+	.file	= "drivers/scsi/cxgbi/libcxgbi.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000592_hash = {
+	.next	= NULL,
+	.name	= "cxgbi_device_register",
+	.file	= "drivers/scsi/cxgbi/libcxgbi.c",
+	.param1	= 1,
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000594_hash = {
+	.next	= NULL,
+	.name	= "__cxio_init_resource_fifo",
+	.file	= "drivers/infiniband/hw/cxgb3/cxio_resource.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000595_hash = {
+	.next	= NULL,
+	.name	= "dac960_user_command_proc_write",
+	.file	= "drivers/block/DAC960.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000596_hash = {
+	.next	= NULL,
+	.name	= "dai_list_read_file",
+	.file	= "sound/soc/soc-core.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000597_hash = {
+	.next	= NULL,
+	.name	= "dapm_bias_read_file",
+	.file	= "sound/soc/soc-dapm.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000598_hash = {
+	.next	= NULL,
+	.name	= "dapm_widget_power_read_file",
+	.file	= "sound/soc/soc-dapm.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000599_hash = {
+	.next	= NULL,
+	.name	= "datablob_format",
+	.file	= "security/keys/encrypted-keys/encrypted.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000600_hash = {
+	.next	= NULL,
+	.name	= "dbgfs_frame",
+	.file	= "drivers/net/caif/caif_spi.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000601_hash = {
+	.next	= NULL,
+	.name	= "dbgfs_state",
+	.file	= "drivers/net/caif/caif_spi.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000602_hash = {
+	.next	= NULL,
+	.name	= "dccp_feat_clone_sp_val",
+	.file	= "net/dccp/feat.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000603_hash = {
+	.next	= NULL,
+	.name	= "dccp_setsockopt_ccid",
+	.file	= "net/dccp/proto.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000604_hash = {
+	.next	= NULL,
+	.name	= "dccp_setsockopt_service",
+	.file	= "net/dccp/proto.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000605_hash = {
+	.next	= NULL,
+	.name	= "ddb_input_read",
+	.file	= "drivers/media/dvb/ddbridge/ddbridge-core.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000606_hash = {
+	.next	= NULL,
+	.name	= "ddb_output_write",
+	.file	= "drivers/media/dvb/ddbridge/ddbridge-core.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000607_hash = {
+	.next	= NULL,
+	.name	= "ddp_make_gl",
+	.file	= "drivers/scsi/cxgbi/libcxgbi.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000608_hash = {
+	.next	= NULL,
+	.name	= "debugfs_read",
+	.file	= "drivers/infiniband/hw/cxgb4/device.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000609_hash = {
+	.next	= NULL,
+	.name	= "debugfs_read",
+	.file	= "drivers/char/virtio_console.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000610_hash = {
+	.next	= NULL,
+	.name	= "debug_output",
+	.file	= "drivers/usb/host/ohci-dbg.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000611_hash = {
+	.next	= NULL,
+	.name	= "debug_output",
+	.file	= "drivers/usb/host/ehci-dbg.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000612_hash = {
+	.next	= NULL,
+	.name	= "debug_read",
+	.file	= "fs/ocfs2/dlm/dlmdebug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000613_hash = {
+	.next	= NULL,
+	.name	= "dev_config",
+	.file	= "drivers/usb/gadget/inode.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000614_hash = {
+	.next	= NULL,
+	.name	= "device_write",
+	.file	= "fs/dlm/user.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000615_hash = {
+	.next	= NULL,
+	.name	= "dev_read",
+	.file	= "drivers/media/video/gspca/gspca.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000616_hash = {
+	.next	= NULL,
+	.name	= "dfs_file_read",
+	.file	= "drivers/mtd/ubi/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000617_hash = {
+	.next	= NULL,
+	.name	= "dfs_file_write",
+	.file	= "drivers/mtd/ubi/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000618_hash = {
+	.next	= NULL,
+	.name	= "direct_entry",
+	.file	= "drivers/misc/lkdtm.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000619_hash = {
+	.next	= NULL,
+	.name	= "dispatch_proc_write",
+	.file	= "drivers/platform/x86/thinkpad_acpi.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000620_hash = {
+	.next	= NULL,
+	.name	= "diva_os_malloc",
+	.file	= "drivers/isdn/hardware/eicon/platform.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000621_hash = {
+	.next	= NULL,
+	.name	= "dlmfs_file_read",
+	.file	= "fs/ocfs2/dlmfs/dlmfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000622_hash = {
+	.next	= NULL,
+	.name	= "dlmfs_file_write",
+	.file	= "fs/ocfs2/dlmfs/dlmfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000623_hash = {
+	.next	= NULL,
+	.name	= "dma_attach",
+	.file	= "drivers/net/wireless/brcm80211/brcmsmac/dma.c",
+	.param6	= 1,
+	.param7	= 1,
+};
+
+struct size_overflow_hash _000625_hash = {
+	.next	= NULL,
+	.name	= "dma_rx_errors_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000626_hash = {
+	.next	= NULL,
+	.name	= "dma_rx_requested_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000627_hash = {
+	.next	= NULL,
+	.name	= "dma_show_regs",
+	.file	= "drivers/tty/serial/mfd.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000628_hash = {
+	.next	= NULL,
+	.name	= "dma_tx_errors_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000629_hash = {
+	.next	= NULL,
+	.name	= "dma_tx_requested_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000630_hash = {
+	.next	= NULL,
+	.name	= "dm_read",
+	.file	= "drivers/net/usb/dm9601.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000631_hash = {
+	.next	= NULL,
+	.name	= "dm_vcalloc",
+	.file	= "include/linux/device-mapper.h",
+	.param1	= 1,
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000633_hash = {
+	.next	= NULL,
+	.name	= "dm_write",
+	.file	= "drivers/net/usb/dm9601.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000634_hash = {
+	.next	= NULL,
+	.name	= "__dn_setsockopt",
+	.file	= "net/decnet/af_decnet.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000635_hash = {
+	.next	= NULL,
+	.name	= "dns_query",
+	.file	= "include/linux/dns_resolver.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000636_hash = {
+	.next	= NULL,
+	.name	= "dns_resolver_instantiate",
+	.file	= "net/dns_resolver/dns_key.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000637_hash = {
+	.next	= NULL,
+	.name	= "dns_resolver_read",
+	.file	= "net/dns_resolver/dns_key.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000638_hash = {
+	.next	= NULL,
+	.name	= "do_add_counters",
+	.file	= "net/ipv6/netfilter/ip6_tables.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000639_hash = {
+	.next	= NULL,
+	.name	= "do_add_counters",
+	.file	= "net/ipv4/netfilter/ip_tables.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000640_hash = {
+	.next	= NULL,
+	.name	= "do_add_counters",
+	.file	= "net/ipv4/netfilter/arp_tables.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000641_hash = {
+	.next	= NULL,
+	.name	= "__do_config_autodelink",
+	.file	= "drivers/usb/storage/realtek_cr.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000642_hash = {
+	.next	= NULL,
+	.name	= "do_ipv6_setsockopt",
+	.file	= "net/ipv6/ipv6_sockglue.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000643_hash = {
+	.next	= NULL,
+	.name	= "do_ip_vs_set_ctl",
+	.file	= "net/netfilter/ipvs/ip_vs_ctl.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000644_hash = {
+	.next	= NULL,
+	.name	= "do_register_entry",
+	.file	= "drivers/misc/lkdtm.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000645_hash = {
+	.next	= NULL,
+	.name	= "__do_replace",
+	.file	= "net/ipv6/netfilter/ip6_tables.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000646_hash = {
+	.next	= NULL,
+	.name	= "__do_replace",
+	.file	= "net/ipv4/netfilter/ip_tables.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000647_hash = {
+	.next	= NULL,
+	.name	= "__do_replace",
+	.file	= "net/ipv4/netfilter/arp_tables.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000648_hash = {
+	.next	= NULL,
+	.name	= "do_sync",
+	.file	= "fs/gfs2/quota.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000649_hash = {
+	.next	= NULL,
+	.name	= "do_update_counters",
+	.file	= "net/bridge/netfilter/ebtables.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000650_hash = {
+	.next	= NULL,
+	.name	= "driver_state_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000651_hash = {
+	.next	= NULL,
+	.name	= "dsp_write",
+	.file	= "sound/oss/msnd_pinnacle.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000652_hash = {
+	.next	= NULL,
+	.name	= "dvb_aplay",
+	.file	= "drivers/media/dvb/ttpci/av7110_av.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000653_hash = {
+	.next	= NULL,
+	.name	= "dvb_ca_en50221_io_write",
+	.file	= "drivers/media/dvb/dvb-core/dvb_ca_en50221.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000654_hash = {
+	.next	= NULL,
+	.name	= "dvb_dmxdev_set_buffer_size",
+	.file	= "drivers/media/dvb/dvb-core/dmxdev.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000655_hash = {
+	.next	= NULL,
+	.name	= "dvbdmx_write",
+	.file	= "drivers/media/dvb/dvb-core/dvb_demux.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000656_hash = {
+	.next	= NULL,
+	.name	= "dvb_dvr_set_buffer_size",
+	.file	= "drivers/media/dvb/dvb-core/dmxdev.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000657_hash = {
+	.next	= NULL,
+	.name	= "dvb_play",
+	.file	= "drivers/media/dvb/ttpci/av7110_av.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000658_hash = {
+	.next	= NULL,
+	.name	= "dvb_ringbuffer_pkt_read_user",
+	.file	= "drivers/media/dvb/dvb-core/dvb_ringbuffer.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000659_hash = {
+	.next	= NULL,
+	.name	= "dvb_ringbuffer_read_user",
+	.file	= "drivers/media/dvb/dvb-core/dvb_ringbuffer.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000660_hash = {
+	.next	= NULL,
+	.name	= "dw210x_op_rw",
+	.file	= "drivers/media/dvb/dvb-usb/dw2102.c",
+	.param6	= 1,
+};
+
+struct size_overflow_hash _000661_hash = {
+	.next	= NULL,
+	.name	= "dwc3_mode_write",
+	.file	= "drivers/usb/dwc3/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000662_hash = {
+	.next	= NULL,
+	.name	= "econet_sendmsg",
+	.file	= "net/econet/af_econet.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000663_hash = {
+	.next	= NULL,
+	.name	= "ecryptfs_copy_filename",
+	.file	= "fs/ecryptfs/crypto.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000664_hash = {
+	.next	= NULL,
+	.name	= "ecryptfs_miscdev_write",
+	.file	= "fs/ecryptfs/miscdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000665_hash = {
+	.next	= NULL,
+	.name	= "ecryptfs_send_miscdev",
+	.file	= "fs/ecryptfs/miscdev.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000666_hash = {
+	.next	= NULL,
+	.name	= "edac_device_alloc_ctl_info",
+	.file	= "drivers/edac/edac_device.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000667_hash = {
+	.next	= NULL,
+	.name	= "edac_mc_alloc",
+	.file	= "drivers/edac/edac_mc.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000668_hash = {
+	.next	= NULL,
+	.name	= "edac_pci_alloc_ctl_info",
+	.file	= "drivers/edac/edac_pci.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000669_hash = {
+	.next	= NULL,
+	.name	= "efivar_create_sysfs_entry",
+	.file	= "drivers/firmware/efivars.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000670_hash = {
+	.next	= NULL,
+	.name	= "efx_tsoh_heap_alloc",
+	.file	= "drivers/net/ethernet/sfc/tx.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000671_hash = {
+	.next	= NULL,
+	.name	= "encrypted_instantiate",
+	.file	= "security/keys/encrypted-keys/encrypted.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000672_hash = {
+	.next	= NULL,
+	.name	= "encrypted_update",
+	.file	= "security/keys/encrypted-keys/encrypted.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000673_hash = {
+	.next	= NULL,
+	.name	= "ep0_write",
+	.file	= "drivers/usb/gadget/inode.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000674_hash = {
+	.next	= NULL,
+	.name	= "ep_read",
+	.file	= "drivers/usb/gadget/inode.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000675_hash = {
+	.next	= NULL,
+	.name	= "ep_write",
+	.file	= "drivers/usb/gadget/inode.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000676_hash = {
+	.next	= NULL,
+	.name	= "erst_dbg_write",
+	.file	= "drivers/acpi/apei/erst-dbg.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000677_hash = {
+	.next	= NULL,
+	.name	= "et61x251_read",
+	.file	= "drivers/media/video/et61x251/et61x251_core.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000678_hash = {
+	.next	= NULL,
+	.name	= "event_calibration_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000679_hash = {
+	.next	= NULL,
+	.name	= "event_heart_beat_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000680_hash = {
+	.next	= NULL,
+	.name	= "event_oom_late_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000681_hash = {
+	.next	= NULL,
+	.name	= "event_phy_transmit_error_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000682_hash = {
+	.next	= NULL,
+	.name	= "event_rx_mem_empty_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000683_hash = {
+	.next	= NULL,
+	.name	= "event_rx_mismatch_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000684_hash = {
+	.next	= NULL,
+	.name	= "event_rx_pool_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000685_hash = {
+	.next	= NULL,
+	.name	= "event_tx_stuck_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000686_hash = {
+	.next	= NULL,
+	.name	= "excessive_retries_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000687_hash = {
+	.next	= NULL,
+	.name	= "exofs_read_lookup_dev_table",
+	.file	= "fs/exofs/super.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000688_hash = {
+	.next	= NULL,
+	.name	= "ext4_kvmalloc",
+	.file	= "fs/ext4/super.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000689_hash = {
+	.next	= NULL,
+	.name	= "ext4_kvzalloc",
+	.file	= "fs/ext4/super.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000690_hash = {
+	.next	= NULL,
+	.name	= "extend_netdev_table",
+	.file	= "net/core/netprio_cgroup.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000691_hash = {
+	.next	= NULL,
+	.name	= "fd_copyin",
+	.file	= "drivers/block/floppy.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000692_hash = {
+	.next	= NULL,
+	.name	= "fd_copyout",
+	.file	= "drivers/block/floppy.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000693_hash = {
+	.next	= NULL,
+	.name	= "__ffs_ep0_read_events",
+	.file	= "drivers/usb/gadget/f_fs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000694_hash = {
+	.next	= NULL,
+	.name	= "ffs_epfile_io",
+	.file	= "drivers/usb/gadget/f_fs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000695_hash = {
+	.next	= NULL,
+	.name	= "ffs_prepare_buffer",
+	.file	= "drivers/usb/gadget/f_fs.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000696_hash = {
+	.next	= NULL,
+	.name	= "f_hidg_read",
+	.file	= "drivers/usb/gadget/f_hid.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000697_hash = {
+	.next	= NULL,
+	.name	= "f_hidg_write",
+	.file	= "drivers/usb/gadget/f_hid.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000698_hash = {
+	.next	= NULL,
+	.name	= "fill_write_buffer",
+	.file	= "fs/configfs/file.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000699_hash = {
+	.next	= NULL,
+	.name	= "flexcop_device_kmalloc",
+	.file	= "drivers/media/dvb/b2c2/flexcop.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000700_hash = {
+	.next	= NULL,
+	.name	= "fops_read",
+	.file	= "drivers/media/video/saa7164/saa7164-encoder.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000701_hash = {
+	.next	= NULL,
+	.name	= "fops_read",
+	.file	= "drivers/media/video/saa7164/saa7164-vbi.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000702_hash = {
+	.next	= NULL,
+	.name	= "format_devstat_counter",
+	.file	= "net/mac80211/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000703_hash = {
+	.next	= NULL,
+	.name	= "fragmentation_threshold_read",
+	.file	= "net/wireless/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000704_hash = {
+	.next	= NULL,
+	.name	= "frame_alloc",
+	.file	= "drivers/media/video/gspca/gspca.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000705_hash = {
+	.next	= NULL,
+	.name	= "ftdi_elan_write",
+	.file	= "drivers/usb/misc/ftdi-elan.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000706_hash = {
+	.next	= NULL,
+	.name	= "fuse_conn_limit_read",
+	.file	= "fs/fuse/control.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000707_hash = {
+	.next	= NULL,
+	.name	= "fuse_conn_limit_write",
+	.file	= "fs/fuse/control.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000708_hash = {
+	.next	= &_000531_hash,
+	.name	= "fuse_conn_waiting_read",
+	.file	= "fs/fuse/control.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000709_hash = {
+	.next	= NULL,
+	.name	= "garp_attr_create",
+	.file	= "net/802/garp.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000710_hash = {
+	.next	= NULL,
+	.name	= "get_alua_req",
+	.file	= "drivers/scsi/device_handler/scsi_dh_alua.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000711_hash = {
+	.next	= NULL,
+	.name	= "get_derived_key",
+	.file	= "security/keys/encrypted-keys/encrypted.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000712_hash = {
+	.next	= NULL,
+	.name	= "getdqbuf",
+	.file	= "fs/quota/quota_tree.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000713_hash = {
+	.next	= NULL,
+	.name	= "get_fdb_entries",
+	.file	= "net/bridge/br_ioctl.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000714_hash = {
+	.next	= NULL,
+	.name	= "get_rdac_req",
+	.file	= "drivers/scsi/device_handler/scsi_dh_rdac.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000715_hash = {
+	.next	= NULL,
+	.name	= "get_registers",
+	.file	= "drivers/net/usb/pegasus.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000716_hash = {
+	.next	= NULL,
+	.name	= "get_server_iovec",
+	.file	= "fs/cifs/connect.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000717_hash = {
+	.next	= NULL,
+	.name	= "get_ucode_user",
+	.file	= "arch/x86/kernel/microcode_intel.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000718_hash = {
+	.next	= NULL,
+	.name	= "gfs2_alloc_sort_buffer",
+	.file	= "fs/gfs2/dir.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000719_hash = {
+	.next	= NULL,
+	.name	= "gfs2_glock_nq_m",
+	.file	= "fs/gfs2/glock.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000720_hash = {
+	.next	= NULL,
+	.name	= "gigaset_initdriver",
+	.file	= "drivers/isdn/gigaset/common.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000721_hash = {
+	.next	= NULL,
+	.name	= "gpio_power_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000722_hash = {
+	.next	= NULL,
+	.name	= "gs_alloc_req",
+	.file	= "drivers/usb/gadget/u_serial.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000723_hash = {
+	.next	= NULL,
+	.name	= "gs_buf_alloc",
+	.file	= "drivers/usb/gadget/u_serial.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000724_hash = {
+	.next	= NULL,
+	.name	= "gss_pipe_downcall",
+	.file	= "net/sunrpc/auth_gss/auth_gss.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000725_hash = {
+	.next	= NULL,
+	.name	= "handle_request",
+	.file	= "drivers/firewire/core-cdev.c",
+	.param9	= 1,
+};
+
+struct size_overflow_hash _000726_hash = {
+	.next	= NULL,
+	.name	= "hash_new",
+	.file	= "net/batman-adv/hash.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000727_hash = {
+	.next	= NULL,
+	.name	= "hash_setkey",
+	.file	= "crypto/algif_hash.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000728_hash = {
+	.next	= NULL,
+	.name	= "hcd_buffer_alloc",
+	.file	= "include/linux/usb/hcd.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000729_hash = {
+	.next	= NULL,
+	.name	= "hci_sock_setsockopt",
+	.file	= "net/bluetooth/hci_sock.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000730_hash = {
+	.next	= NULL,
+	.name	= "hdpvr_read",
+	.file	= "drivers/media/video/hdpvr/hdpvr-video.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000731_hash = {
+	.next	= NULL,
+	.name	= "hidraw_get_report",
+	.file	= "drivers/hid/hidraw.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000732_hash = {
+	.next	= NULL,
+	.name	= "hidraw_read",
+	.file	= "drivers/hid/hidraw.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000733_hash = {
+	.next	= NULL,
+	.name	= "hidraw_send_report",
+	.file	= "drivers/hid/hidraw.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000734_hash = {
+	.next	= NULL,
+	.name	= "hid_register_field",
+	.file	= "drivers/hid/hid-core.c",
+	.param2	= 1,
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000736_hash = {
+	.next	= NULL,
+	.name	= "hpfs_translate_name",
+	.file	= "fs/hpfs/name.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000737_hash = {
+	.next	= NULL,
+	.name	= "hpi_alloc_control_cache",
+	.file	= "sound/pci/asihpi/hpicmn.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000738_hash = {
+	.next	= NULL,
+	.name	= "ht40allow_map_read",
+	.file	= "net/wireless/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000739_hash = {
+	.next	= NULL,
+	.name	= "__hwahc_dev_set_key",
+	.file	= "drivers/usb/host/hwa-hc.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000740_hash = {
+	.next	= NULL,
+	.name	= "hwflags_read",
+	.file	= "net/mac80211/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000741_hash = {
+	.next	= NULL,
+	.name	= "hysdn_conf_read",
+	.file	= "drivers/isdn/hysdn/hysdn_procconf.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000742_hash = {
+	.next	= NULL,
+	.name	= "hysdn_conf_write",
+	.file	= "drivers/isdn/hysdn/hysdn_procconf.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000743_hash = {
+	.next	= NULL,
+	.name	= "hysdn_log_write",
+	.file	= "drivers/isdn/hysdn/hysdn_proclog.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000744_hash = {
+	.next	= NULL,
+	.name	= "i2400m_rx_stats_read",
+	.file	= "drivers/net/wimax/i2400m/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000745_hash = {
+	.next	= NULL,
+	.name	= "i2400m_tx_stats_read",
+	.file	= "drivers/net/wimax/i2400m/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000746_hash = {
+	.next	= NULL,
+	.name	= "__i2400mu_send_barker",
+	.file	= "drivers/net/wimax/i2400m/usb.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000747_hash = {
+	.next	= NULL,
+	.name	= "i2400m_zrealloc_2x",
+	.file	= "drivers/net/wimax/i2400m/fw.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000748_hash = {
+	.next	= NULL,
+	.name	= "i2cdev_read",
+	.file	= "drivers/i2c/i2c-dev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000749_hash = {
+	.next	= &_000459_hash,
+	.name	= "i2cdev_write",
+	.file	= "drivers/i2c/i2c-dev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000750_hash = {
+	.next	= NULL,
+	.name	= "ib_alloc_device",
+	.file	= "include/rdma/ib_verbs.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000751_hash = {
+	.next	= NULL,
+	.name	= "ib_copy_from_udata",
+	.file	= "include/rdma/ib_verbs.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000752_hash = {
+	.next	= NULL,
+	.name	= "ib_copy_to_udata",
+	.file	= "include/rdma/ib_verbs.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000753_hash = {
+	.next	= NULL,
+	.name	= "ibmasm_new_command",
+	.file	= "drivers/misc/ibmasm/command.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000754_hash = {
+	.next	= NULL,
+	.name	= "ib_ucm_alloc_data",
+	.file	= "drivers/infiniband/core/ucm.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000755_hash = {
+	.next	= NULL,
+	.name	= "ib_umad_write",
+	.file	= "drivers/infiniband/core/user_mad.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000756_hash = {
+	.next	= NULL,
+	.name	= "ib_uverbs_unmarshall_recv",
+	.file	= "drivers/infiniband/core/uverbs_cmd.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000757_hash = {
+	.next	= NULL,
+	.name	= "ide_driver_proc_write",
+	.file	= "drivers/ide/ide-proc.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000758_hash = {
+	.next	= NULL,
+	.name	= "ide_queue_pc_tail",
+	.file	= "include/linux/ide.h",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000759_hash = {
+	.next	= NULL,
+	.name	= "ide_raw_taskfile",
+	.file	= "include/linux/ide.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000760_hash = {
+	.next	= NULL,
+	.name	= "ide_settings_proc_write",
+	.file	= "drivers/ide/ide-proc.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000761_hash = {
+	.next	= NULL,
+	.name	= "idetape_chrdev_read",
+	.file	= "drivers/ide/ide-tape.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000762_hash = {
+	.next	= NULL,
+	.name	= "idetape_chrdev_write",
+	.file	= "drivers/ide/ide-tape.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000763_hash = {
+	.next	= NULL,
+	.name	= "idmouse_read",
+	.file	= "drivers/usb/misc/idmouse.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000764_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_build_probe_req",
+	.file	= "net/mac80211/util.c",
+	.param7	= 1,
+};
+
+struct size_overflow_hash _000765_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000766_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_write",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000767_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_key_alloc",
+	.file	= "net/mac80211/key.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000768_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_mgmt_tx",
+	.file	= "net/mac80211/cfg.c",
+	.param9	= 1,
+};
+
+struct size_overflow_hash _000769_hash = {
+	.next	= NULL,
+	.name	= "ikconfig_read_current",
+	.file	= "kernel/configs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000770_hash = {
+	.next	= NULL,
+	.name	= "il3945_sta_dbgfs_stats_table_read",
+	.file	= "drivers/net/wireless/iwlegacy/3945-rs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000771_hash = {
+	.next	= NULL,
+	.name	= "il3945_ucode_general_stats_read",
+	.file	= "drivers/net/wireless/iwlegacy/3945-debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000772_hash = {
+	.next	= NULL,
+	.name	= "il3945_ucode_rx_stats_read",
+	.file	= "drivers/net/wireless/iwlegacy/3945-debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000773_hash = {
+	.next	= NULL,
+	.name	= "il3945_ucode_tx_stats_read",
+	.file	= "drivers/net/wireless/iwlegacy/3945-debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000774_hash = {
+	.next	= NULL,
+	.name	= "il4965_rs_sta_dbgfs_rate_scale_data_read",
+	.file	= "drivers/net/wireless/iwlegacy/4965-rs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000775_hash = {
+	.next	= NULL,
+	.name	= "il4965_rs_sta_dbgfs_scale_table_read",
+	.file	= "drivers/net/wireless/iwlegacy/4965-rs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000776_hash = {
+	.next	= NULL,
+	.name	= "il4965_rs_sta_dbgfs_stats_table_read",
+	.file	= "drivers/net/wireless/iwlegacy/4965-rs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000777_hash = {
+	.next	= NULL,
+	.name	= "il4965_ucode_general_stats_read",
+	.file	= "drivers/net/wireless/iwlegacy/4965-debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000778_hash = {
+	.next	= NULL,
+	.name	= "il4965_ucode_rx_stats_read",
+	.file	= "drivers/net/wireless/iwlegacy/4965-debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000779_hash = {
+	.next	= NULL,
+	.name	= "il4965_ucode_tx_stats_read",
+	.file	= "drivers/net/wireless/iwlegacy/4965-debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000780_hash = {
+	.next	= NULL,
+	.name	= "il_dbgfs_chain_noise_read",
+	.file	= "drivers/net/wireless/iwlegacy/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000781_hash = {
+	.next	= NULL,
+	.name	= "il_dbgfs_channels_read",
+	.file	= "drivers/net/wireless/iwlegacy/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000782_hash = {
+	.next	= NULL,
+	.name	= "il_dbgfs_disable_ht40_read",
+	.file	= "drivers/net/wireless/iwlegacy/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000783_hash = {
+	.next	= NULL,
+	.name	= "il_dbgfs_fh_reg_read",
+	.file	= "drivers/net/wireless/iwlegacy/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000784_hash = {
+	.next	= NULL,
+	.name	= "il_dbgfs_force_reset_read",
+	.file	= "drivers/net/wireless/iwlegacy/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000785_hash = {
+	.next	= NULL,
+	.name	= "il_dbgfs_interrupt_read",
+	.file	= "drivers/net/wireless/iwlegacy/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000786_hash = {
+	.next	= NULL,
+	.name	= "il_dbgfs_missed_beacon_read",
+	.file	= "drivers/net/wireless/iwlegacy/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000787_hash = {
+	.next	= NULL,
+	.name	= "il_dbgfs_nvm_read",
+	.file	= "drivers/net/wireless/iwlegacy/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000788_hash = {
+	.next	= NULL,
+	.name	= "il_dbgfs_power_save_status_read",
+	.file	= "drivers/net/wireless/iwlegacy/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000789_hash = {
+	.next	= NULL,
+	.name	= "il_dbgfs_qos_read",
+	.file	= "drivers/net/wireless/iwlegacy/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000790_hash = {
+	.next	= &_000221_hash,
+	.name	= "il_dbgfs_rxon_filter_flags_read",
+	.file	= "drivers/net/wireless/iwlegacy/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000791_hash = {
+	.next	= NULL,
+	.name	= "il_dbgfs_rxon_flags_read",
+	.file	= "drivers/net/wireless/iwlegacy/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000792_hash = {
+	.next	= NULL,
+	.name	= "il_dbgfs_rx_queue_read",
+	.file	= "drivers/net/wireless/iwlegacy/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000793_hash = {
+	.next	= NULL,
+	.name	= "il_dbgfs_rx_stats_read",
+	.file	= "drivers/net/wireless/iwlegacy/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000794_hash = {
+	.next	= NULL,
+	.name	= "il_dbgfs_sensitivity_read",
+	.file	= "drivers/net/wireless/iwlegacy/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000795_hash = {
+	.next	= NULL,
+	.name	= "il_dbgfs_sram_read",
+	.file	= "drivers/net/wireless/iwlegacy/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000796_hash = {
+	.next	= NULL,
+	.name	= "il_dbgfs_stations_read",
+	.file	= "drivers/net/wireless/iwlegacy/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000797_hash = {
+	.next	= NULL,
+	.name	= "il_dbgfs_status_read",
+	.file	= "drivers/net/wireless/iwlegacy/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000798_hash = {
+	.next	= NULL,
+	.name	= "il_dbgfs_traffic_log_read",
+	.file	= "drivers/net/wireless/iwlegacy/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000799_hash = {
+	.next	= NULL,
+	.name	= "il_dbgfs_tx_queue_read",
+	.file	= "drivers/net/wireless/iwlegacy/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000800_hash = {
+	.next	= NULL,
+	.name	= "il_dbgfs_tx_stats_read",
+	.file	= "drivers/net/wireless/iwlegacy/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000801_hash = {
+	.next	= NULL,
+	.name	= "ilo_read",
+	.file	= "drivers/misc/hpilo.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000802_hash = {
+	.next	= NULL,
+	.name	= "ilo_write",
+	.file	= "drivers/misc/hpilo.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000803_hash = {
+	.next	= NULL,
+	.name	= "init_data_container",
+	.file	= "fs/btrfs/backref.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000804_hash = {
+	.next	= NULL,
+	.name	= "init_list_set",
+	.file	= "net/netfilter/ipset/ip_set_list_set.c",
+	.param2	= 1,
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000806_hash = {
+	.next	= NULL,
+	.name	= "interpret_user_input",
+	.file	= "fs/ubifs/debug.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000807_hash = {
+	.next	= NULL,
+	.name	= "int_proc_write",
+	.file	= "drivers/net/wireless/ray_cs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000808_hash = {
+	.next	= NULL,
+	.name	= "iowarrior_read",
+	.file	= "drivers/usb/misc/iowarrior.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000809_hash = {
+	.next	= NULL,
+	.name	= "iowarrior_write",
+	.file	= "drivers/usb/misc/iowarrior.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000810_hash = {
+	.next	= NULL,
+	.name	= "ip_set_alloc",
+	.file	= "include/linux/netfilter/ipset/ip_set.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000811_hash = {
+	.next	= NULL,
+	.name	= "ip_vs_conn_fill_param_sync",
+	.file	= "net/netfilter/ipvs/ip_vs_sync.c",
+	.param6	= 1,
+};
+
+struct size_overflow_hash _000812_hash = {
+	.next	= NULL,
+	.name	= "irda_setsockopt",
+	.file	= "net/irda/af_irda.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000813_hash = {
+	.next	= NULL,
+	.name	= "ir_lirc_transmit_ir",
+	.file	= "drivers/media/rc/ir-lirc-codec.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000814_hash = {
+	.next	= NULL,
+	.name	= "irnet_ctrl_write",
+	.file	= "net/irda/irnet/irnet_ppp.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000815_hash = {
+	.next	= NULL,
+	.name	= "iscsi_decode_text_input",
+	.file	= "drivers/target/iscsi/iscsi_target_parameters.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000816_hash = {
+	.next	= NULL,
+	.name	= "iscsit_dump_data_payload",
+	.file	= "drivers/target/iscsi/iscsi_target_erl1.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000817_hash = {
+	.next	= NULL,
+	.name	= "isdn_read",
+	.file	= "drivers/isdn/i4l/isdn_common.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000818_hash = {
+	.next	= NULL,
+	.name	= "iso_callback",
+	.file	= "drivers/firewire/core-cdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000819_hash = {
+	.next	= NULL,
+	.name	= "iso_packets_buffer_init",
+	.file	= "sound/firewire/packets-buffer.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000820_hash = {
+	.next	= NULL,
+	.name	= "iso_sched_alloc",
+	.file	= "drivers/usb/host/ehci-sched.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000821_hash = {
+	.next	= NULL,
+	.name	= "isr_cmd_cmplt_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000822_hash = {
+	.next	= NULL,
+	.name	= "isr_commands_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000823_hash = {
+	.next	= NULL,
+	.name	= "isr_decrypt_done_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000824_hash = {
+	.next	= NULL,
+	.name	= "isr_dma0_done_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000825_hash = {
+	.next	= NULL,
+	.name	= "isr_dma1_done_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000826_hash = {
+	.next	= NULL,
+	.name	= "isr_fiqs_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000827_hash = {
+	.next	= NULL,
+	.name	= "isr_host_acknowledges_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000828_hash = {
+	.next	= &_000629_hash,
+	.name	= "isr_hw_pm_mode_changes_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000829_hash = {
+	.next	= &_000329_hash,
+	.name	= "isr_irqs_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000830_hash = {
+	.next	= NULL,
+	.name	= "isr_low_rssi_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000831_hash = {
+	.next	= NULL,
+	.name	= "isr_pci_pm_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000832_hash = {
+	.next	= NULL,
+	.name	= "isr_rx_headers_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000833_hash = {
+	.next	= NULL,
+	.name	= "isr_rx_mem_overflow_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000834_hash = {
+	.next	= NULL,
+	.name	= "isr_rx_procs_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000835_hash = {
+	.next	= NULL,
+	.name	= "isr_rx_rdys_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000836_hash = {
+	.next	= NULL,
+	.name	= "isr_tx_exch_complete_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000837_hash = {
+	.next	= NULL,
+	.name	= "isr_tx_procs_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000838_hash = {
+	.next	= NULL,
+	.name	= "isr_wakeups_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000839_hash = {
+	.next	= NULL,
+	.name	= "ivtv_copy_buf_to_user",
+	.file	= "drivers/media/video/ivtv/ivtv-fileops.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000840_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_bt_traffic_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000841_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_chain_noise_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000842_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_channels_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000843_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_current_sleep_command_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000844_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_debug_level_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000845_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_debug_level_write",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000846_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_disable_ht40_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000847_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_fh_reg_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-trans-pcie.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000848_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_force_reset_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000849_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_interrupt_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-trans-pcie.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000850_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_log_event_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-trans-pcie.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000851_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_missed_beacon_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000852_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_nvm_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000853_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_plcp_delta_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000854_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_power_save_status_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000855_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_protection_mode_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000856_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_qos_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000857_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_reply_tx_error_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000858_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_rx_handlers_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000859_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_rxon_filter_flags_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000860_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_rxon_flags_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000861_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_rx_queue_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-trans-pcie.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000862_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_rx_statistics_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000863_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_sensitivity_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000864_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_sleep_level_override_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000865_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_sram_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000866_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_stations_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000867_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_status_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000868_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_temperature_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000869_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_thermal_throttling_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000870_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_traffic_log_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000871_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_tx_queue_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-trans-pcie.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000872_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_tx_statistics_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000873_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_ucode_bt_stats_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000874_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_ucode_general_stats_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000875_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_ucode_rx_stats_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000876_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_ucode_tracing_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000877_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_ucode_tx_stats_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000878_hash = {
+	.next	= NULL,
+	.name	= "iwl_dbgfs_wowlan_sram_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000879_hash = {
+	.next	= NULL,
+	.name	= "iwmct_fw_parser_init",
+	.file	= "drivers/misc/iwmc3200top/fw-download.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000880_hash = {
+	.next	= NULL,
+	.name	= "iwm_notif_send",
+	.file	= "drivers/net/wireless/iwmc3200wifi/main.c",
+	.param6	= 1,
+};
+
+struct size_overflow_hash _000881_hash = {
+	.next	= NULL,
+	.name	= "iwm_ntf_calib_res",
+	.file	= "drivers/net/wireless/iwmc3200wifi/rx.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000882_hash = {
+	.next	= NULL,
+	.name	= "iwm_umac_set_config_var",
+	.file	= "drivers/net/wireless/iwmc3200wifi/commands.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000883_hash = {
+	.next	= NULL,
+	.name	= "jbd2_alloc",
+	.file	= "include/linux/jbd2.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000884_hash = {
+	.next	= NULL,
+	.name	= "key_algorithm_read",
+	.file	= "net/mac80211/debugfs_key.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000885_hash = {
+	.next	= NULL,
+	.name	= "key_icverrors_read",
+	.file	= "net/mac80211/debugfs_key.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000886_hash = {
+	.next	= NULL,
+	.name	= "key_key_read",
+	.file	= "net/mac80211/debugfs_key.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000887_hash = {
+	.next	= NULL,
+	.name	= "key_replays_read",
+	.file	= "net/mac80211/debugfs_key.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000888_hash = {
+	.next	= NULL,
+	.name	= "key_rx_spec_read",
+	.file	= "net/mac80211/debugfs_key.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000889_hash = {
+	.next	= NULL,
+	.name	= "key_tx_spec_read",
+	.file	= "net/mac80211/debugfs_key.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000890_hash = {
+	.next	= NULL,
+	.name	= "kmem_alloc",
+	.file	= "fs/xfs/kmem.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000891_hash = {
+	.next	= NULL,
+	.name	= "kmem_zalloc_large",
+	.file	= "fs/xfs/kmem.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000892_hash = {
+	.next	= NULL,
+	.name	= "kone_receive",
+	.file	= "drivers/hid/hid-roccat-kone.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000893_hash = {
+	.next	= NULL,
+	.name	= "kone_send",
+	.file	= "drivers/hid/hid-roccat-kone.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000894_hash = {
+	.next	= NULL,
+	.name	= "kvm_read_guest_atomic",
+	.file	= "include/linux/kvm_host.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000895_hash = {
+	.next	= NULL,
+	.name	= "kvm_read_guest_cached",
+	.file	= "include/linux/kvm_host.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000896_hash = {
+	.next	= NULL,
+	.name	= "kvm_set_irq_routing",
+	.file	= "include/linux/kvm_host.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000897_hash = {
+	.next	= NULL,
+	.name	= "kvm_write_guest_cached",
+	.file	= "include/linux/kvm_host.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000898_hash = {
+	.next	= NULL,
+	.name	= "l2cap_sock_setsockopt",
+	.file	= "net/bluetooth/l2cap_sock.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000899_hash = {
+	.next	= NULL,
+	.name	= "l2cap_sock_setsockopt_old",
+	.file	= "net/bluetooth/l2cap_sock.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000900_hash = {
+	.next	= NULL,
+	.name	= "lane2_associate_req",
+	.file	= "net/atm/lec.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000901_hash = {
+	.next	= NULL,
+	.name	= "lbs_debugfs_read",
+	.file	= "drivers/net/wireless/libertas/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000902_hash = {
+	.next	= NULL,
+	.name	= "lbs_debugfs_write",
+	.file	= "drivers/net/wireless/libertas/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000903_hash = {
+	.next	= NULL,
+	.name	= "lbs_dev_info",
+	.file	= "drivers/net/wireless/libertas/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000904_hash = {
+	.next	= NULL,
+	.name	= "lbs_host_sleep_read",
+	.file	= "drivers/net/wireless/libertas/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000905_hash = {
+	.next	= NULL,
+	.name	= "lbs_rdbbp_read",
+	.file	= "drivers/net/wireless/libertas/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000906_hash = {
+	.next	= NULL,
+	.name	= "lbs_rdmac_read",
+	.file	= "drivers/net/wireless/libertas/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000907_hash = {
+	.next	= NULL,
+	.name	= "lbs_rdrf_read",
+	.file	= "drivers/net/wireless/libertas/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000908_hash = {
+	.next	= NULL,
+	.name	= "lbs_sleepparams_read",
+	.file	= "drivers/net/wireless/libertas/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000909_hash = {
+	.next	= NULL,
+	.name	= "lbs_threshold_read",
+	.file	= "drivers/net/wireless/libertas/debugfs.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000910_hash = {
+	.next	= NULL,
+	.name	= "lc_create",
+	.file	= "include/linux/lru_cache.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000911_hash = {
+	.next	= NULL,
+	.name	= "lcd_write",
+	.file	= "drivers/usb/misc/usblcd.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000912_hash = {
+	.next	= NULL,
+	.name	= "leaf_dealloc",
+	.file	= "fs/gfs2/dir.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000913_hash = {
+	.next	= NULL,
+	.name	= "__lgread",
+	.file	= "drivers/lguest/core.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000914_hash = {
+	.next	= NULL,
+	.name	= "__lgwrite",
+	.file	= "drivers/lguest/core.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000915_hash = {
+	.next	= NULL,
+	.name	= "link_send_sections_long",
+	.file	= "net/tipc/link.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000916_hash = {
+	.next	= NULL,
+	.name	= "lirc_buffer_init",
+	.file	= "include/media/lirc_dev.h",
+	.param2	= 1,
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000918_hash = {
+	.next	= NULL,
+	.name	= "lkdtm_debugfs_read",
+	.file	= "drivers/misc/lkdtm.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000919_hash = {
+	.next	= NULL,
+	.name	= "LoadBitmap",
+	.file	= "drivers/media/dvb/ttpci/av7110_hw.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000920_hash = {
+	.next	= NULL,
+	.name	= "long_retry_limit_read",
+	.file	= "net/wireless/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000921_hash = {
+	.next	= NULL,
+	.name	= "lpfc_debugfs_dif_err_read",
+	.file	= "drivers/scsi/lpfc/lpfc_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000922_hash = {
+	.next	= NULL,
+	.name	= "lpfc_debugfs_dif_err_write",
+	.file	= "drivers/scsi/lpfc/lpfc_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000923_hash = {
+	.next	= NULL,
+	.name	= "lpfc_debugfs_read",
+	.file	= "drivers/scsi/lpfc/lpfc_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000924_hash = {
+	.next	= NULL,
+	.name	= "lpfc_idiag_baracc_read",
+	.file	= "drivers/scsi/lpfc/lpfc_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000925_hash = {
+	.next	= NULL,
+	.name	= "lpfc_idiag_ctlacc_read",
+	.file	= "drivers/scsi/lpfc/lpfc_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000926_hash = {
+	.next	= NULL,
+	.name	= "lpfc_idiag_drbacc_read",
+	.file	= "drivers/scsi/lpfc/lpfc_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000927_hash = {
+	.next	= NULL,
+	.name	= "lpfc_idiag_extacc_read",
+	.file	= "drivers/scsi/lpfc/lpfc_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000928_hash = {
+	.next	= NULL,
+	.name	= "lpfc_idiag_mbxacc_read",
+	.file	= "drivers/scsi/lpfc/lpfc_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000929_hash = {
+	.next	= NULL,
+	.name	= "lpfc_idiag_pcicfg_read",
+	.file	= "drivers/scsi/lpfc/lpfc_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000930_hash = {
+	.next	= NULL,
+	.name	= "lpfc_idiag_queacc_read",
+	.file	= "drivers/scsi/lpfc/lpfc_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000931_hash = {
+	.next	= NULL,
+	.name	= "lpfc_idiag_queinfo_read",
+	.file	= "drivers/scsi/lpfc/lpfc_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000932_hash = {
+	.next	= NULL,
+	.name	= "lpfc_sli4_queue_alloc",
+	.file	= "drivers/scsi/lpfc/lpfc_sli.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000933_hash = {
+	.next	= NULL,
+	.name	= "lp_write",
+	.file	= "drivers/char/lp.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000934_hash = {
+	.next	= NULL,
+	.name	= "mac80211_format_buffer",
+	.file	= "net/mac80211/debugfs.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000935_hash = {
+	.next	= NULL,
+	.name	= "mce_write",
+	.file	= "arch/x86/kernel/cpu/mcheck/mce-inject.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000936_hash = {
+	.next	= NULL,
+	.name	= "mcs7830_get_reg",
+	.file	= "drivers/net/usb/mcs7830.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000937_hash = {
+	.next	= NULL,
+	.name	= "mcs7830_set_reg",
+	.file	= "drivers/net/usb/mcs7830.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000938_hash = {
+	.next	= NULL,
+	.name	= "mdc800_device_read",
+	.file	= "drivers/usb/image/mdc800.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000939_hash = {
+	.next	= NULL,
+	.name	= "mdiobus_alloc_size",
+	.file	= "include/linux/phy.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000940_hash = {
+	.next	= NULL,
+	.name	= "media_entity_init",
+	.file	= "include/media/media-entity.h",
+	.param2	= 1,
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000942_hash = {
+	.next	= NULL,
+	.name	= "memstick_alloc_host",
+	.file	= "include/linux/memstick.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000943_hash = {
+	.next	= NULL,
+	.name	= "mgmt_control",
+	.file	= "include/net/bluetooth/hci_core.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000944_hash = {
+	.next	= NULL,
+	.name	= "mgmt_pending_add",
+	.file	= "net/bluetooth/mgmt.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000945_hash = {
+	.next	= &_000321_hash,
+	.name	= "mic_calc_failure_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000946_hash = {
+	.next	= NULL,
+	.name	= "mic_rx_pkts_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000947_hash = {
+	.next	= NULL,
+	.name	= "minstrel_stats_read",
+	.file	= "net/mac80211/rc80211_minstrel_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000948_hash = {
+	.next	= NULL,
+	.name	= "mlx4_en_create_rx_ring",
+	.file	= "drivers/net/ethernet/mellanox/mlx4/en_rx.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000949_hash = {
+	.next	= NULL,
+	.name	= "mlx4_en_create_tx_ring",
+	.file	= "drivers/net/ethernet/mellanox/mlx4/en_tx.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000950_hash = {
+	.next	= NULL,
+	.name	= "mmc_ext_csd_read",
+	.file	= "drivers/mmc/core/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000951_hash = {
+	.next	= NULL,
+	.name	= "mmc_send_bus_test",
+	.file	= "drivers/mmc/core/mmc_ops.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000952_hash = {
+	.next	= NULL,
+	.name	= "mmc_send_cxd_data",
+	.file	= "drivers/mmc/core/mmc_ops.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000953_hash = {
+	.next	= NULL,
+	.name	= "mmc_test_alloc_mem",
+	.file	= "drivers/mmc/card/mmc_test.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000954_hash = {
+	.next	= NULL,
+	.name	= "mon_bin_get_event",
+	.file	= "drivers/usb/mon/mon_bin.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000955_hash = {
+	.next	= NULL,
+	.name	= "mon_stat_read",
+	.file	= "drivers/usb/mon/mon_stat.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000956_hash = {
+	.next	= NULL,
+	.name	= "mptctl_getiocinfo",
+	.file	= "drivers/message/fusion/mptctl.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000957_hash = {
+	.next	= NULL,
+	.name	= "msnd_fifo_alloc",
+	.file	= "sound/oss/msnd.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000958_hash = {
+	.next	= NULL,
+	.name	= "mtdchar_readoob",
+	.file	= "drivers/mtd/mtdchar.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000959_hash = {
+	.next	= NULL,
+	.name	= "mtdchar_write",
+	.file	= "drivers/mtd/mtdchar.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000960_hash = {
+	.next	= NULL,
+	.name	= "mtdchar_writeoob",
+	.file	= "drivers/mtd/mtdchar.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000961_hash = {
+	.next	= NULL,
+	.name	= "mtdswap_init",
+	.file	= "drivers/mtd/mtdswap.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000962_hash = {
+	.next	= NULL,
+	.name	= "mtf_test_write",
+	.file	= "drivers/mmc/card/mmc_test.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000963_hash = {
+	.next	= NULL,
+	.name	= "musb_test_mode_write",
+	.file	= "drivers/usb/musb/musb_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000964_hash = {
+	.next	= NULL,
+	.name	= "mvumi_alloc_mem_resource",
+	.file	= "drivers/scsi/mvumi.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000965_hash = {
+	.next	= NULL,
+	.name	= "mwifiex_alloc_sdio_mpa_buffers",
+	.file	= "drivers/net/wireless/mwifiex/sdio.c",
+	.param2	= 1,
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000967_hash = {
+	.next	= NULL,
+	.name	= "mwifiex_debug_read",
+	.file	= "drivers/net/wireless/mwifiex/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000968_hash = {
+	.next	= NULL,
+	.name	= "mwifiex_get_common_rates",
+	.file	= "drivers/net/wireless/mwifiex/join.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000969_hash = {
+	.next	= NULL,
+	.name	= "mwifiex_getlog_read",
+	.file	= "drivers/net/wireless/mwifiex/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000970_hash = {
+	.next	= NULL,
+	.name	= "mwifiex_info_read",
+	.file	= "drivers/net/wireless/mwifiex/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000971_hash = {
+	.next	= NULL,
+	.name	= "mwifiex_rdeeprom_read",
+	.file	= "drivers/net/wireless/mwifiex/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000972_hash = {
+	.next	= NULL,
+	.name	= "mwifiex_regrdwr_read",
+	.file	= "drivers/net/wireless/mwifiex/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000973_hash = {
+	.next	= NULL,
+	.name	= "mwifiex_update_curr_bss_params",
+	.file	= "drivers/net/wireless/mwifiex/scan.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000974_hash = {
+	.next	= NULL,
+	.name	= "nand_bch_init",
+	.file	= "include/linux/mtd/nand_bch.h",
+	.param2	= 1,
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000976_hash = {
+	.next	= NULL,
+	.name	= "ncp_file_write",
+	.file	= "fs/ncpfs/file.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000977_hash = {
+	.next	= NULL,
+	.name	= "ncp__vol2io",
+	.file	= "fs/ncpfs/ncplib_kernel.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000978_hash = {
+	.next	= NULL,
+	.name	= "new_bind_ctl",
+	.file	= "sound/pci/hda/patch_realtek.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _000979_hash = {
+	.next	= NULL,
+	.name	= "nfc_llcp_build_tlv",
+	.file	= "net/nfc/llcp/commands.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000980_hash = {
+	.next	= NULL,
+	.name	= "nfs4_alloc_slots",
+	.file	= "fs/nfs/nfs4proc.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000981_hash = {
+	.next	= NULL,
+	.name	= "nfs4_write_cached_acl",
+	.file	= "fs/nfs/nfs4proc.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000982_hash = {
+	.next	= NULL,
+	.name	= "nfsctl_transaction_read",
+	.file	= "fs/nfsd/nfsctl.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000983_hash = {
+	.next	= NULL,
+	.name	= "nfsctl_transaction_write",
+	.file	= "fs/nfsd/nfsctl.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000984_hash = {
+	.next	= NULL,
+	.name	= "nfsd_cache_update",
+	.file	= "fs/nfsd/nfscache.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000985_hash = {
+	.next	= NULL,
+	.name	= "nfs_idmap_get_desc",
+	.file	= "fs/nfs/idmap.c",
+	.param2	= 1,
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000987_hash = {
+	.next	= NULL,
+	.name	= "nfs_readdata_alloc",
+	.file	= "include/linux/nfs_fs.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000988_hash = {
+	.next	= NULL,
+	.name	= "nfs_readdir_make_qstr",
+	.file	= "fs/nfs/dir.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000989_hash = {
+	.next	= NULL,
+	.name	= "nfs_writedata_alloc",
+	.file	= "include/linux/nfs_fs.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000990_hash = {
+	.next	= NULL,
+	.name	= "nsm_create_handle",
+	.file	= "fs/lockd/mon.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000991_hash = {
+	.next	= NULL,
+	.name	= "ntfs_copy_from_user",
+	.file	= "fs/ntfs/file.c",
+	.param3	= 1,
+	.param5	= 1,
+};
+
+struct size_overflow_hash _000993_hash = {
+	.next	= NULL,
+	.name	= "__ntfs_copy_from_user_iovec_inatomic",
+	.file	= "fs/ntfs/file.c",
+	.param3	= 1,
+	.param4	= 1,
+};
+
+struct size_overflow_hash _000995_hash = {
+	.next	= NULL,
+	.name	= "__ntfs_malloc",
+	.file	= "fs/ntfs/malloc.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000996_hash = {
+	.next	= NULL,
+	.name	= "nvme_alloc_iod",
+	.file	= "drivers/block/nvme.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _000997_hash = {
+	.next	= NULL,
+	.name	= "nvram_write",
+	.file	= "drivers/char/nvram.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000998_hash = {
+	.next	= NULL,
+	.name	= "o2hb_debug_read",
+	.file	= "fs/ocfs2/cluster/heartbeat.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _000999_hash = {
+	.next	= NULL,
+	.name	= "o2net_debug_read",
+	.file	= "fs/ocfs2/cluster/netdebug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001000_hash = {
+	.next	= NULL,
+	.name	= "o2net_send_message_vec",
+	.file	= "fs/ocfs2/cluster/tcp.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001001_hash = {
+	.next	= NULL,
+	.name	= "ocfs2_control_cfu",
+	.file	= "fs/ocfs2/stack_user.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001002_hash = {
+	.next	= NULL,
+	.name	= "ocfs2_control_read",
+	.file	= "fs/ocfs2/stack_user.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001003_hash = {
+	.next	= NULL,
+	.name	= "ocfs2_debug_read",
+	.file	= "fs/ocfs2/super.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001004_hash = {
+	.next	= NULL,
+	.name	= "opera1_xilinx_rw",
+	.file	= "drivers/media/dvb/dvb-usb/opera1.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001005_hash = {
+	.next	= NULL,
+	.name	= "oprofilefs_str_to_user",
+	.file	= "include/linux/oprofile.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001006_hash = {
+	.next	= NULL,
+	.name	= "oprofilefs_ulong_from_user",
+	.file	= "include/linux/oprofile.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001007_hash = {
+	.next	= &_000626_hash,
+	.name	= "oprofilefs_ulong_to_user",
+	.file	= "include/linux/oprofile.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001008_hash = {
+	.next	= NULL,
+	.name	= "_ore_get_io_state",
+	.file	= "fs/exofs/ore.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001009_hash = {
+	.next	= NULL,
+	.name	= "_osd_realloc_seg",
+	.file	= "drivers/scsi/osd/osd_initiator.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001010_hash = {
+	.next	= NULL,
+	.name	= "_osd_req_list_objects",
+	.file	= "drivers/scsi/osd/osd_initiator.c",
+	.param6	= 1,
+};
+
+struct size_overflow_hash _001011_hash = {
+	.next	= NULL,
+	.name	= "osd_req_read_kern",
+	.file	= "include/scsi/osd_initiator.h",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001012_hash = {
+	.next	= NULL,
+	.name	= "osd_req_write_kern",
+	.file	= "include/scsi/osd_initiator.h",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001013_hash = {
+	.next	= NULL,
+	.name	= "osst_execute",
+	.file	= "drivers/scsi/osst.c",
+	.param6	= 1,
+};
+
+struct size_overflow_hash _001014_hash = {
+	.next	= NULL,
+	.name	= "otp_read",
+	.file	= "drivers/mtd/devices/mtd_dataflash.c",
+	.param2	= 1,
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001016_hash = {
+	.next	= NULL,
+	.name	= "packet_buffer_init",
+	.file	= "drivers/firewire/nosy.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001017_hash = {
+	.next	= NULL,
+	.name	= "packet_setsockopt",
+	.file	= "net/packet/af_packet.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001018_hash = {
+	.next	= NULL,
+	.name	= "parse_arg",
+	.file	= "drivers/platform/x86/asus_acpi.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001019_hash = {
+	.next	= NULL,
+	.name	= "parse_command",
+	.file	= "fs/binfmt_misc.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001020_hash = {
+	.next	= NULL,
+	.name	= "pcmcia_replace_cis",
+	.file	= "drivers/pcmcia/cistpl.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001021_hash = {
+	.next	= NULL,
+	.name	= "pcnet32_realloc_rx_ring",
+	.file	= "drivers/net/ethernet/amd/pcnet32.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001022_hash = {
+	.next	= NULL,
+	.name	= "pcnet32_realloc_tx_ring",
+	.file	= "drivers/net/ethernet/amd/pcnet32.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001023_hash = {
+	.next	= NULL,
+	.name	= "pgctrl_write",
+	.file	= "net/core/pktgen.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001024_hash = {
+	.next	= NULL,
+	.name	= "pg_read",
+	.file	= "drivers/block/paride/pg.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001025_hash = {
+	.next	= NULL,
+	.name	= "pg_write",
+	.file	= "drivers/block/paride/pg.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001026_hash = {
+	.next	= NULL,
+	.name	= "picolcd_debug_eeprom_read",
+	.file	= "drivers/hid/hid-picolcd.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001027_hash = {
+	.next	= NULL,
+	.name	= "pkt_add",
+	.file	= "drivers/usb/serial/garmin_gps.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001028_hash = {
+	.next	= NULL,
+	.name	= "pktgen_if_write",
+	.file	= "net/core/pktgen.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001029_hash = {
+	.next	= NULL,
+	.name	= "platform_list_read_file",
+	.file	= "sound/soc/soc-core.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001030_hash = {
+	.next	= NULL,
+	.name	= "pm8001_store_update_fw",
+	.file	= "drivers/scsi/pm8001/pm8001_ctl.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001031_hash = {
+	.next	= NULL,
+	.name	= "port_show_regs",
+	.file	= "drivers/tty/serial/mfd.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001032_hash = {
+	.next	= NULL,
+	.name	= "ppp_cp_parse_cr",
+	.file	= "drivers/net/wan/hdlc_ppp.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001033_hash = {
+	.next	= NULL,
+	.name	= "ppp_write",
+	.file	= "drivers/net/ppp/ppp_generic.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001034_hash = {
+	.next	= NULL,
+	.name	= "pp_read",
+	.file	= "drivers/char/ppdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001035_hash = {
+	.next	= NULL,
+	.name	= "pp_write",
+	.file	= "drivers/char/ppdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001036_hash = {
+	.next	= NULL,
+	.name	= "printer_read",
+	.file	= "drivers/usb/gadget/printer.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001037_hash = {
+	.next	= NULL,
+	.name	= "printer_req_alloc",
+	.file	= "drivers/usb/gadget/printer.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001038_hash = {
+	.next	= NULL,
+	.name	= "printer_write",
+	.file	= "drivers/usb/gadget/printer.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001039_hash = {
+	.next	= NULL,
+	.name	= "prism2_set_genericelement",
+	.file	= "drivers/net/wireless/hostap/hostap_ioctl.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001040_hash = {
+	.next	= NULL,
+	.name	= "proc_read",
+	.file	= "drivers/net/wireless/airo.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001041_hash = {
+	.next	= NULL,
+	.name	= "proc_scsi_devinfo_write",
+	.file	= "drivers/scsi/scsi_devinfo.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001042_hash = {
+	.next	= NULL,
+	.name	= "proc_scsi_write",
+	.file	= "drivers/scsi/scsi_proc.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001043_hash = {
+	.next	= NULL,
+	.name	= "proc_scsi_write_proc",
+	.file	= "drivers/scsi/scsi_proc.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001044_hash = {
+	.next	= NULL,
+	.name	= "proc_write",
+	.file	= "drivers/net/wireless/airo.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001045_hash = {
+	.next	= NULL,
+	.name	= "provide_user_output",
+	.file	= "fs/ubifs/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001046_hash = {
+	.next	= NULL,
+	.name	= "ps_pspoll_max_apturn_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001047_hash = {
+	.next	= NULL,
+	.name	= "ps_pspoll_timeouts_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001048_hash = {
+	.next	= NULL,
+	.name	= "ps_pspoll_utilization_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001049_hash = {
+	.next	= NULL,
+	.name	= "ps_upsd_max_apturn_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001050_hash = {
+	.next	= NULL,
+	.name	= "ps_upsd_max_sptime_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001051_hash = {
+	.next	= NULL,
+	.name	= "ps_upsd_timeouts_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001052_hash = {
+	.next	= NULL,
+	.name	= "ps_upsd_utilization_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001053_hash = {
+	.next	= NULL,
+	.name	= "pti_char_write",
+	.file	= "drivers/misc/pti.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001054_hash = {
+	.next	= NULL,
+	.name	= "pt_read",
+	.file	= "drivers/block/paride/pt.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001055_hash = {
+	.next	= NULL,
+	.name	= "pt_write",
+	.file	= "drivers/block/paride/pt.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001056_hash = {
+	.next	= NULL,
+	.name	= "pvr2_ioread_read",
+	.file	= "drivers/media/video/pvrusb2/pvrusb2-ioread.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001057_hash = {
+	.next	= NULL,
+	.name	= "pvr2_ioread_set_sync_key",
+	.file	= "drivers/media/video/pvrusb2/pvrusb2-ioread.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001058_hash = {
+	.next	= NULL,
+	.name	= "pvr2_stream_buffer_count",
+	.file	= "drivers/media/video/pvrusb2/pvrusb2-io.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001059_hash = {
+	.next	= NULL,
+	.name	= "pwr_disable_ps_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001060_hash = {
+	.next	= NULL,
+	.name	= "pwr_elp_enter_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001061_hash = {
+	.next	= NULL,
+	.name	= "pwr_enable_ps_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001062_hash = {
+	.next	= NULL,
+	.name	= "pwr_fix_tsf_ps_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001063_hash = {
+	.next	= NULL,
+	.name	= "pwr_missing_bcns_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001064_hash = {
+	.next	= NULL,
+	.name	= "pwr_power_save_off_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001065_hash = {
+	.next	= NULL,
+	.name	= "pwr_ps_enter_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001066_hash = {
+	.next	= NULL,
+	.name	= "pwr_rcvd_awake_beacons_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001067_hash = {
+	.next	= NULL,
+	.name	= "pwr_rcvd_beacons_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001068_hash = {
+	.next	= NULL,
+	.name	= "pwr_tx_without_ps_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001069_hash = {
+	.next	= NULL,
+	.name	= "pwr_tx_with_ps_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001070_hash = {
+	.next	= NULL,
+	.name	= "pwr_wake_on_host_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001071_hash = {
+	.next	= NULL,
+	.name	= "pwr_wake_on_timer_exp_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001072_hash = {
+	.next	= NULL,
+	.name	= "qc_capture",
+	.file	= "drivers/media/video/c-qcam.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001073_hash = {
+	.next	= NULL,
+	.name	= "qla2x00_get_ctx_bsg_sp",
+	.file	= "drivers/scsi/qla2xxx/qla_bsg.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001074_hash = {
+	.next	= NULL,
+	.name	= "qla2x00_get_ctx_sp",
+	.file	= "drivers/scsi/qla2xxx/qla_init.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001075_hash = {
+	.next	= NULL,
+	.name	= "qlcnic_alloc_msix_entries",
+	.file	= "drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001076_hash = {
+	.next	= NULL,
+	.name	= "queues_read",
+	.file	= "net/mac80211/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001077_hash = {
+	.next	= NULL,
+	.name	= "r3964_write",
+	.file	= "drivers/tty/n_r3964.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001078_hash = {
+	.next	= NULL,
+	.name	= "raw_setsockopt",
+	.file	= "net/can/raw.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001079_hash = {
+	.next	= NULL,
+	.name	= "ray_cs_essid_proc_write",
+	.file	= "drivers/net/wireless/ray_cs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001080_hash = {
+	.next	= NULL,
+	.name	= "rbd_snap_add",
+	.file	= "drivers/block/rbd.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001081_hash = {
+	.next	= NULL,
+	.name	= "rcname_read",
+	.file	= "net/mac80211/rate.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001082_hash = {
+	.next	= NULL,
+	.name	= "rds_message_alloc",
+	.file	= "net/rds/message.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001083_hash = {
+	.next	= NULL,
+	.name	= "rds_page_copy_user",
+	.file	= "net/rds/page.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001084_hash = {
+	.next	= NULL,
+	.name	= "read",
+	.file	= "drivers/pci/hotplug/cpqphp_sysfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001085_hash = {
+	.next	= NULL,
+	.name	= "read_4k_modal_eeprom",
+	.file	= "drivers/net/wireless/ath/ath9k/htc_drv_debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001086_hash = {
+	.next	= NULL,
+	.name	= "read_9287_modal_eeprom",
+	.file	= "drivers/net/wireless/ath/ath9k/htc_drv_debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001087_hash = {
+	.next	= NULL,
+	.name	= "read_buf",
+	.file	= "fs/nfsd/nfs4xdr.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001088_hash = {
+	.next	= NULL,
+	.name	= "read_cis_cache",
+	.file	= "drivers/pcmcia/cistpl.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001089_hash = {
+	.next	= NULL,
+	.name	= "read_def_modal_eeprom",
+	.file	= "drivers/net/wireless/ath/ath9k/htc_drv_debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001090_hash = {
+	.next	= NULL,
+	.name	= "read_file_ani",
+	.file	= "drivers/net/wireless/ath/ath5k/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001091_hash = {
+	.next	= NULL,
+	.name	= "read_file_antenna",
+	.file	= "drivers/net/wireless/ath/ath5k/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001092_hash = {
+	.next	= NULL,
+	.name	= "read_file_base_eeprom",
+	.file	= "drivers/net/wireless/ath/ath9k/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001093_hash = {
+	.next	= NULL,
+	.name	= "read_file_base_eeprom",
+	.file	= "drivers/net/wireless/ath/ath9k/htc_drv_debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001094_hash = {
+	.next	= NULL,
+	.name	= "read_file_beacon",
+	.file	= "drivers/net/wireless/ath/ath5k/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001095_hash = {
+	.next	= NULL,
+	.name	= "read_file_credit_dist_stats",
+	.file	= "drivers/net/wireless/ath/ath6kl/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001096_hash = {
+	.next	= NULL,
+	.name	= "read_file_debug",
+	.file	= "drivers/net/wireless/ath/ath9k/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001097_hash = {
+	.next	= NULL,
+	.name	= "read_file_debug",
+	.file	= "drivers/net/wireless/ath/ath9k/htc_drv_debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001098_hash = {
+	.next	= NULL,
+	.name	= "read_file_debug",
+	.file	= "drivers/net/wireless/ath/ath5k/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001099_hash = {
+	.next	= NULL,
+	.name	= "read_file_disable_ani",
+	.file	= "drivers/net/wireless/ath/ath9k/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001100_hash = {
+	.next	= NULL,
+	.name	= "read_file_dma",
+	.file	= "drivers/net/wireless/ath/ath9k/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001101_hash = {
+	.next	= NULL,
+	.name	= "read_file_dump_nfcal",
+	.file	= "drivers/net/wireless/ath/ath9k/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001102_hash = {
+	.next	= NULL,
+	.name	= "read_file_frameerrors",
+	.file	= "drivers/net/wireless/ath/ath5k/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001103_hash = {
+	.next	= NULL,
+	.name	= "read_file_interrupt",
+	.file	= "drivers/net/wireless/ath/ath9k/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001104_hash = {
+	.next	= NULL,
+	.name	= "read_file_misc",
+	.file	= "drivers/net/wireless/ath/ath5k/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001105_hash = {
+	.next	= NULL,
+	.name	= "read_file_misc",
+	.file	= "drivers/net/wireless/ath/ath9k/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001106_hash = {
+	.next	= NULL,
+	.name	= "read_file_modal_eeprom",
+	.file	= "drivers/net/wireless/ath/ath9k/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001107_hash = {
+	.next	= NULL,
+	.name	= "read_file_queue",
+	.file	= "drivers/net/wireless/ath/ath5k/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001108_hash = {
+	.next	= NULL,
+	.name	= "read_file_queue",
+	.file	= "drivers/net/wireless/ath/ath9k/htc_drv_debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001109_hash = {
+	.next	= NULL,
+	.name	= "read_file_rcstat",
+	.file	= "drivers/net/wireless/ath/ath9k/rc.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001110_hash = {
+	.next	= NULL,
+	.name	= "read_file_recv",
+	.file	= "drivers/net/wireless/ath/ath9k/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001111_hash = {
+	.next	= NULL,
+	.name	= "read_file_recv",
+	.file	= "drivers/net/wireless/ath/ath9k/htc_drv_debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001112_hash = {
+	.next	= NULL,
+	.name	= "read_file_regidx",
+	.file	= "drivers/net/wireless/ath/ath9k/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001113_hash = {
+	.next	= &_001103_hash,
+	.name	= "read_file_regval",
+	.file	= "drivers/net/wireless/ath/ath9k/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001114_hash = {
+	.next	= NULL,
+	.name	= "read_file_rx_chainmask",
+	.file	= "drivers/net/wireless/ath/ath9k/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001115_hash = {
+	.next	= NULL,
+	.name	= "read_file_slot",
+	.file	= "drivers/net/wireless/ath/ath9k/htc_drv_debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001116_hash = {
+	.next	= NULL,
+	.name	= "read_file_stations",
+	.file	= "drivers/net/wireless/ath/ath9k/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001117_hash = {
+	.next	= NULL,
+	.name	= "read_file_tgt_int_stats",
+	.file	= "drivers/net/wireless/ath/ath9k/htc_drv_debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001118_hash = {
+	.next	= NULL,
+	.name	= "read_file_tgt_rx_stats",
+	.file	= "drivers/net/wireless/ath/ath9k/htc_drv_debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001119_hash = {
+	.next	= NULL,
+	.name	= "read_file_tgt_stats",
+	.file	= "drivers/net/wireless/ath/ath6kl/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001120_hash = {
+	.next	= NULL,
+	.name	= "read_file_tgt_tx_stats",
+	.file	= "drivers/net/wireless/ath/ath9k/htc_drv_debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001121_hash = {
+	.next	= NULL,
+	.name	= "read_file_tx_chainmask",
+	.file	= "drivers/net/wireless/ath/ath9k/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001122_hash = {
+	.next	= NULL,
+	.name	= "read_file_war_stats",
+	.file	= "drivers/net/wireless/ath/ath6kl/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001123_hash = {
+	.next	= NULL,
+	.name	= "read_file_wiphy",
+	.file	= "drivers/net/wireless/ath/ath9k/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001124_hash = {
+	.next	= NULL,
+	.name	= "read_file_xmit",
+	.file	= "drivers/net/wireless/ath/ath9k/htc_drv_debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001125_hash = {
+	.next	= NULL,
+	.name	= "read_file_xmit",
+	.file	= "drivers/net/wireless/ath/ath9k/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001126_hash = {
+	.next	= NULL,
+	.name	= "read_flush",
+	.file	= "net/sunrpc/cache.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001127_hash = {
+	.next	= NULL,
+	.name	= "realloc_buffer",
+	.file	= "drivers/scsi/device_handler/scsi_dh_alua.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001128_hash = {
+	.next	= NULL,
+	.name	= "receive_DataRequest",
+	.file	= "drivers/block/drbd/drbd_receiver.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001129_hash = {
+	.next	= NULL,
+	.name	= "recent_mt_proc_write",
+	.file	= "net/netfilter/xt_recent.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001130_hash = {
+	.next	= NULL,
+	.name	= "redrat3_transmit_ir",
+	.file	= "drivers/media/rc/redrat3.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001131_hash = {
+	.next	= NULL,
+	.name	= "reg_w_buf",
+	.file	= "drivers/media/video/gspca/t613.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001132_hash = {
+	.next	= NULL,
+	.name	= "reg_w_ixbuf",
+	.file	= "drivers/media/video/gspca/t613.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001133_hash = {
+	.next	= NULL,
+	.name	= "reiserfs_allocate_list_bitmaps",
+	.file	= "include/linux/reiserfs_fs.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001134_hash = {
+	.next	= NULL,
+	.name	= "reiserfs_resize",
+	.file	= "include/linux/reiserfs_fs_sb.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001135_hash = {
+	.next	= NULL,
+	.name	= "remote_settings_file_write",
+	.file	= "drivers/misc/ibmasm/ibmasmfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001136_hash = {
+	.next	= NULL,
+	.name	= "_req_append_segment",
+	.file	= "drivers/scsi/osd/osd_initiator.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001137_hash = {
+	.next	= NULL,
+	.name	= "retry_count_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001138_hash = {
+	.next	= NULL,
+	.name	= "revalidate",
+	.file	= "drivers/block/aoe/aoechr.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001139_hash = {
+	.next	= NULL,
+	.name	= "rfcomm_sock_setsockopt",
+	.file	= "net/bluetooth/rfcomm/sock.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001140_hash = {
+	.next	= NULL,
+	.name	= "rfkill_fop_read",
+	.file	= "net/rfkill/core.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001141_hash = {
+	.next	= NULL,
+	.name	= "rndis_add_response",
+	.file	= "drivers/usb/gadget/rndis.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001142_hash = {
+	.next	= NULL,
+	.name	= "rng_dev_read",
+	.file	= "drivers/char/hw_random/core.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001143_hash = {
+	.next	= NULL,
+	.name	= "roccat_common_receive",
+	.file	= "drivers/hid/hid-roccat-common.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001144_hash = {
+	.next	= NULL,
+	.name	= "roccat_common_send",
+	.file	= "drivers/hid/hid-roccat-common.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001145_hash = {
+	.next	= NULL,
+	.name	= "roccat_read",
+	.file	= "drivers/hid/hid-roccat.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001146_hash = {
+	.next	= NULL,
+	.name	= "rpc_malloc",
+	.file	= "include/linux/sunrpc/sched.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001147_hash = {
+	.next	= NULL,
+	.name	= "rs_sta_dbgfs_rate_scale_data_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-agn-rs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001148_hash = {
+	.next	= NULL,
+	.name	= "rs_sta_dbgfs_scale_table_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-agn-rs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001149_hash = {
+	.next	= NULL,
+	.name	= "rs_sta_dbgfs_stats_table_read",
+	.file	= "drivers/net/wireless/iwlwifi/iwl-agn-rs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001150_hash = {
+	.next	= NULL,
+	.name	= "rt2x00debug_write_bbp",
+	.file	= "drivers/net/wireless/rt2x00/rt2x00debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001151_hash = {
+	.next	= NULL,
+	.name	= "rt2x00debug_write_csr",
+	.file	= "drivers/net/wireless/rt2x00/rt2x00debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001152_hash = {
+	.next	= &_000808_hash,
+	.name	= "rt2x00debug_write_eeprom",
+	.file	= "drivers/net/wireless/rt2x00/rt2x00debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001153_hash = {
+	.next	= NULL,
+	.name	= "rt2x00debug_write_rf",
+	.file	= "drivers/net/wireless/rt2x00/rt2x00debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001154_hash = {
+	.next	= NULL,
+	.name	= "rts51x_read_mem",
+	.file	= "drivers/usb/storage/realtek_cr.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001155_hash = {
+	.next	= NULL,
+	.name	= "rts51x_write_mem",
+	.file	= "drivers/usb/storage/realtek_cr.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001156_hash = {
+	.next	= NULL,
+	.name	= "rts_threshold_read",
+	.file	= "net/wireless/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001157_hash = {
+	.next	= NULL,
+	.name	= "rx_dropped_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001158_hash = {
+	.next	= NULL,
+	.name	= "rx_fcs_err_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001159_hash = {
+	.next	= NULL,
+	.name	= "rx_hdr_overflow_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001160_hash = {
+	.next	= NULL,
+	.name	= "rx_hw_stuck_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001161_hash = {
+	.next	= NULL,
+	.name	= "rx_out_of_mem_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001162_hash = {
+	.next	= NULL,
+	.name	= "rx_path_reset_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001163_hash = {
+	.next	= NULL,
+	.name	= "rxpipe_beacon_buffer_thres_host_int_trig_rx_data_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001164_hash = {
+	.next	= NULL,
+	.name	= "rxpipe_descr_host_int_trig_rx_data_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001165_hash = {
+	.next	= NULL,
+	.name	= "rxpipe_missed_beacon_host_int_trig_rx_data_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001166_hash = {
+	.next	= NULL,
+	.name	= "rxpipe_rx_prep_beacon_drop_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001167_hash = {
+	.next	= NULL,
+	.name	= "rxpipe_tx_xfr_host_int_trig_rx_data_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001168_hash = {
+	.next	= NULL,
+	.name	= "rx_reset_counter_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001169_hash = {
+	.next	= NULL,
+	.name	= "rx_xfr_hint_trig_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001170_hash = {
+	.next	= NULL,
+	.name	= "saa7164_buffer_alloc_user",
+	.file	= "drivers/media/video/saa7164/saa7164-buffer.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001171_hash = {
+	.next	= NULL,
+	.name	= "scsi_execute",
+	.file	= "include/scsi/scsi_device.h",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001172_hash = {
+	.next	= NULL,
+	.name	= "scsi_tgt_copy_sense",
+	.file	= "drivers/scsi/scsi_tgt_lib.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001173_hash = {
+	.next	= NULL,
+	.name	= "sctp_auth_create_key",
+	.file	= "net/sctp/auth.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001174_hash = {
+	.next	= NULL,
+	.name	= "sctp_make_abort_user",
+	.file	= "include/net/sctp/sm.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001175_hash = {
+	.next	= NULL,
+	.name	= "sctpprobe_read",
+	.file	= "net/sctp/probe.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001176_hash = {
+	.next	= NULL,
+	.name	= "sctp_setsockopt_active_key",
+	.file	= "net/sctp/socket.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001177_hash = {
+	.next	= NULL,
+	.name	= "sctp_setsockopt_adaptation_layer",
+	.file	= "net/sctp/socket.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001178_hash = {
+	.next	= NULL,
+	.name	= "sctp_setsockopt_associnfo",
+	.file	= "net/sctp/socket.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001179_hash = {
+	.next	= NULL,
+	.name	= "sctp_setsockopt_auth_chunk",
+	.file	= "net/sctp/socket.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001180_hash = {
+	.next	= NULL,
+	.name	= "sctp_setsockopt_auth_key",
+	.file	= "net/sctp/socket.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001181_hash = {
+	.next	= NULL,
+	.name	= "sctp_setsockopt_autoclose",
+	.file	= "net/sctp/socket.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001182_hash = {
+	.next	= NULL,
+	.name	= "sctp_setsockopt_context",
+	.file	= "net/sctp/socket.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001183_hash = {
+	.next	= NULL,
+	.name	= "sctp_setsockopt_default_send_param",
+	.file	= "net/sctp/socket.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001184_hash = {
+	.next	= NULL,
+	.name	= "sctp_setsockopt_delayed_ack",
+	.file	= "net/sctp/socket.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001185_hash = {
+	.next	= NULL,
+	.name	= "sctp_setsockopt_del_key",
+	.file	= "net/sctp/socket.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001186_hash = {
+	.next	= NULL,
+	.name	= "sctp_setsockopt_events",
+	.file	= "net/sctp/socket.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001187_hash = {
+	.next	= NULL,
+	.name	= "sctp_setsockopt_hmac_ident",
+	.file	= "net/sctp/socket.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001188_hash = {
+	.next	= NULL,
+	.name	= "sctp_setsockopt_initmsg",
+	.file	= "net/sctp/socket.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001189_hash = {
+	.next	= NULL,
+	.name	= "sctp_setsockopt_maxburst",
+	.file	= "net/sctp/socket.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001190_hash = {
+	.next	= NULL,
+	.name	= "sctp_setsockopt_maxseg",
+	.file	= "net/sctp/socket.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001191_hash = {
+	.next	= NULL,
+	.name	= "sctp_setsockopt_peer_addr_params",
+	.file	= "net/sctp/socket.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001192_hash = {
+	.next	= NULL,
+	.name	= "sctp_setsockopt_peer_primary_addr",
+	.file	= "net/sctp/socket.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001193_hash = {
+	.next	= NULL,
+	.name	= "sctp_setsockopt_rtoinfo",
+	.file	= "net/sctp/socket.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001194_hash = {
+	.next	= NULL,
+	.name	= "sctp_tsnmap_init",
+	.file	= "include/net/sctp/tsnmap.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001195_hash = {
+	.next	= NULL,
+	.name	= "send_control_msg",
+	.file	= "drivers/media/video/zr364xx.c",
+	.param6	= 1,
+};
+
+struct size_overflow_hash _001196_hash = {
+	.next	= NULL,
+	.name	= "set_aoe_iflist",
+	.file	= "drivers/block/aoe/aoenet.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001197_hash = {
+	.next	= NULL,
+	.name	= "set_registers",
+	.file	= "drivers/net/usb/pegasus.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001198_hash = {
+	.next	= NULL,
+	.name	= "setsockopt",
+	.file	= "net/caif/caif_socket.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001199_hash = {
+	.next	= NULL,
+	.name	= "setup_req",
+	.file	= "drivers/usb/gadget/inode.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001200_hash = {
+	.next	= NULL,
+	.name	= "sfq_alloc",
+	.file	= "net/sched/sch_sfq.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001201_hash = {
+	.next	= NULL,
+	.name	= "sgl_map_user_pages",
+	.file	= "drivers/scsi/st.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001202_hash = {
+	.next	= NULL,
+	.name	= "short_retry_limit_read",
+	.file	= "net/wireless/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001203_hash = {
+	.next	= NULL,
+	.name	= "sm501_create_subdev",
+	.file	= "drivers/mfd/sm501.c",
+	.param3	= 1,
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001205_hash = {
+	.next	= NULL,
+	.name	= "sn9c102_read",
+	.file	= "drivers/media/video/sn9c102/sn9c102_core.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001206_hash = {
+	.next	= NULL,
+	.name	= "snd_ac97_pcm_assign",
+	.file	= "include/sound/ac97_codec.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001207_hash = {
+	.next	= NULL,
+	.name	= "snd_ctl_elem_user_tlv",
+	.file	= "sound/core/control.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001208_hash = {
+	.next	= NULL,
+	.name	= "snd_emu10k1_fx8010_read",
+	.file	= "sound/pci/emu10k1/emuproc.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001209_hash = {
+	.next	= NULL,
+	.name	= "snd_es1938_capture_copy",
+	.file	= "sound/pci/es1938.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001210_hash = {
+	.next	= NULL,
+	.name	= "snd_gus_dram_peek",
+	.file	= "sound/isa/gus/gus_dram.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001211_hash = {
+	.next	= NULL,
+	.name	= "snd_gus_dram_poke",
+	.file	= "sound/isa/gus/gus_dram.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001212_hash = {
+	.next	= NULL,
+	.name	= "snd_hdsp_capture_copy",
+	.file	= "sound/pci/rme9652/hdsp.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001213_hash = {
+	.next	= NULL,
+	.name	= "snd_hdsp_playback_copy",
+	.file	= "sound/pci/rme9652/hdsp.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001214_hash = {
+	.next	= NULL,
+	.name	= "snd_info_entry_write",
+	.file	= "sound/core/info.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001215_hash = {
+	.next	= NULL,
+	.name	= "snd_opl4_mem_proc_read",
+	.file	= "sound/drivers/opl4/opl4_proc.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001216_hash = {
+	.next	= NULL,
+	.name	= "snd_opl4_mem_proc_write",
+	.file	= "sound/drivers/opl4/opl4_proc.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001217_hash = {
+	.next	= NULL,
+	.name	= "snd_pcm_aio_read",
+	.file	= "sound/core/pcm_native.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001218_hash = {
+	.next	= NULL,
+	.name	= "snd_pcm_aio_write",
+	.file	= "sound/core/pcm_native.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001219_hash = {
+	.next	= NULL,
+	.name	= "snd_pcm_alloc_vmalloc_buffer",
+	.file	= "drivers/media/video/cx231xx/cx231xx-audio.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001220_hash = {
+	.next	= NULL,
+	.name	= "snd_pcm_alloc_vmalloc_buffer",
+	.file	= "drivers/media/video/cx18/cx18-alsa-pcm.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001221_hash = {
+	.next	= NULL,
+	.name	= "snd_pcm_alloc_vmalloc_buffer",
+	.file	= "drivers/media/video/em28xx/em28xx-audio.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001222_hash = {
+	.next	= NULL,
+	.name	= "_snd_pcm_lib_alloc_vmalloc_buffer",
+	.file	= "include/sound/pcm.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001223_hash = {
+	.next	= NULL,
+	.name	= "snd_pcm_oss_read1",
+	.file	= "sound/core/oss/pcm_oss.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001224_hash = {
+	.next	= NULL,
+	.name	= "snd_pcm_oss_write1",
+	.file	= "sound/core/oss/pcm_oss.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001225_hash = {
+	.next	= NULL,
+	.name	= "snd_pcm_oss_write2",
+	.file	= "sound/core/oss/pcm_oss.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001226_hash = {
+	.next	= NULL,
+	.name	= "snd_pcm_plugin_build",
+	.file	= "sound/core/oss/pcm_plugin.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001227_hash = {
+	.next	= NULL,
+	.name	= "snd_rme9652_capture_copy",
+	.file	= "sound/pci/rme9652/rme9652.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001228_hash = {
+	.next	= NULL,
+	.name	= "snd_rme9652_playback_copy",
+	.file	= "sound/pci/rme9652/rme9652.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001229_hash = {
+	.next	= NULL,
+	.name	= "snd_soc_hw_bulk_write_raw",
+	.file	= "sound/soc/soc-io.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001230_hash = {
+	.next	= NULL,
+	.name	= "snd_usb_ctl_msg",
+	.file	= "sound/usb/helper.c",
+	.param8	= 1,
+};
+
+struct size_overflow_hash _001231_hash = {
+	.next	= NULL,
+	.name	= "_sp2d_alloc",
+	.file	= "fs/exofs/ore_raid.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001232_hash = {
+	.next	= NULL,
+	.name	= "spidev_message",
+	.file	= "drivers/spi/spidev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001233_hash = {
+	.next	= NULL,
+	.name	= "spidev_write",
+	.file	= "drivers/spi/spidev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001234_hash = {
+	.next	= NULL,
+	.name	= "spi_show_regs",
+	.file	= "drivers/spi/spi-dw.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001235_hash = {
+	.next	= NULL,
+	.name	= "srp_alloc_iu",
+	.file	= "drivers/infiniband/ulp/srp/ib_srp.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001236_hash = {
+	.next	= NULL,
+	.name	= "srp_iu_pool_alloc",
+	.file	= "drivers/scsi/libsrp.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001237_hash = {
+	.next	= NULL,
+	.name	= "srp_ring_alloc",
+	.file	= "drivers/scsi/libsrp.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001238_hash = {
+	.next	= NULL,
+	.name	= "sta_agg_status_read",
+	.file	= "net/mac80211/debugfs_sta.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001239_hash = {
+	.next	= NULL,
+	.name	= "sta_agg_status_write",
+	.file	= "net/mac80211/debugfs_sta.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001240_hash = {
+	.next	= NULL,
+	.name	= "sta_connected_time_read",
+	.file	= "net/mac80211/debugfs_sta.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001241_hash = {
+	.next	= NULL,
+	.name	= "sta_flags_read",
+	.file	= "net/mac80211/debugfs_sta.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001242_hash = {
+	.next	= NULL,
+	.name	= "sta_ht_capa_read",
+	.file	= "net/mac80211/debugfs_sta.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001243_hash = {
+	.next	= NULL,
+	.name	= "sta_last_seq_ctrl_read",
+	.file	= "net/mac80211/debugfs_sta.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001244_hash = {
+	.next	= NULL,
+	.name	= "sta_num_ps_buf_frames_read",
+	.file	= "net/mac80211/debugfs_sta.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001245_hash = {
+	.next	= NULL,
+	.name	= "stk_prepare_sio_buffers",
+	.file	= "drivers/media/video/stk-webcam.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001246_hash = {
+	.next	= NULL,
+	.name	= "store_iwmct_log_level",
+	.file	= "drivers/misc/iwmc3200top/log.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001247_hash = {
+	.next	= NULL,
+	.name	= "store_iwmct_log_level_fw",
+	.file	= "drivers/misc/iwmc3200top/log.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001248_hash = {
+	.next	= NULL,
+	.name	= "str_to_user",
+	.file	= "drivers/input/evdev.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001249_hash = {
+	.next	= NULL,
+	.name	= "svc_pool_map_alloc_arrays",
+	.file	= "net/sunrpc/svc.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001250_hash = {
+	.next	= NULL,
+	.name	= "svc_setsockopt",
+	.file	= "net/atm/svc.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001251_hash = {
+	.next	= NULL,
+	.name	= "t4_alloc_mem",
+	.file	= "drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001252_hash = {
+	.next	= NULL,
+	.name	= "tda10048_writeregbulk",
+	.file	= "drivers/media/dvb/frontends/tda10048.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001253_hash = {
+	.next	= NULL,
+	.name	= "__team_options_register",
+	.file	= "drivers/net/team/team.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001254_hash = {
+	.next	= NULL,
+	.name	= "tifm_alloc_adapter",
+	.file	= "include/linux/tifm.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001255_hash = {
+	.next	= NULL,
+	.name	= "tipc_subseq_alloc",
+	.file	= "net/tipc/name_table.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001256_hash = {
+	.next	= NULL,
+	.name	= "tm6000_read_write_usb",
+	.file	= "drivers/media/video/tm6000/tm6000-core.c",
+	.param7	= 1,
+};
+
+struct size_overflow_hash _001257_hash = {
+	.next	= NULL,
+	.name	= "tower_write",
+	.file	= "drivers/usb/misc/legousbtower.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001258_hash = {
+	.next	= NULL,
+	.name	= "trusted_instantiate",
+	.file	= "security/keys/trusted.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001259_hash = {
+	.next	= NULL,
+	.name	= "trusted_update",
+	.file	= "security/keys/trusted.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001260_hash = {
+	.next	= NULL,
+	.name	= "TSS_rawhmac",
+	.file	= "security/keys/trusted.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001261_hash = {
+	.next	= NULL,
+	.name	= "tx_internal_desc_overflow_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001262_hash = {
+	.next	= NULL,
+	.name	= "tx_queue_len_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001263_hash = {
+	.next	= NULL,
+	.name	= "tx_queue_len_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001264_hash = {
+	.next	= NULL,
+	.name	= "tx_queue_status_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001265_hash = {
+	.next	= NULL,
+	.name	= "udf_alloc_i_data",
+	.file	= "fs/udf/inode.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001266_hash = {
+	.next	= NULL,
+	.name	= "udf_sb_alloc_partition_maps",
+	.file	= "fs/udf/super.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001267_hash = {
+	.next	= NULL,
+	.name	= "uea_idma_write",
+	.file	= "drivers/usb/atm/ueagle-atm.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001268_hash = {
+	.next	= NULL,
+	.name	= "uea_request",
+	.file	= "drivers/usb/atm/ueagle-atm.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001269_hash = {
+	.next	= NULL,
+	.name	= "uea_send_modem_cmd",
+	.file	= "drivers/usb/atm/ueagle-atm.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001270_hash = {
+	.next	= NULL,
+	.name	= "uhci_debug_read",
+	.file	= "drivers/usb/host/uhci-debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001271_hash = {
+	.next	= NULL,
+	.name	= "uio_read",
+	.file	= "drivers/uio/uio.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001272_hash = {
+	.next	= NULL,
+	.name	= "uio_write",
+	.file	= "drivers/uio/uio.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001273_hash = {
+	.next	= NULL,
+	.name	= "um_idi_write",
+	.file	= "drivers/isdn/hardware/eicon/divasi.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001274_hash = {
+	.next	= NULL,
+	.name	= "unlink_queued",
+	.file	= "drivers/usb/misc/usbtest.c",
+	.param3	= 1,
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001275_hash = {
+	.next	= NULL,
+	.name	= "us122l_ctl_msg",
+	.file	= "sound/usb/usx2y/us122l.c",
+	.param8	= 1,
+};
+
+struct size_overflow_hash _001276_hash = {
+	.next	= NULL,
+	.name	= "usbdev_read",
+	.file	= "drivers/usb/core/devio.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001277_hash = {
+	.next	= NULL,
+	.name	= "usblp_read",
+	.file	= "drivers/usb/class/usblp.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001278_hash = {
+	.next	= NULL,
+	.name	= "usblp_write",
+	.file	= "drivers/usb/class/usblp.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001279_hash = {
+	.next	= NULL,
+	.name	= "usbtest_alloc_urb",
+	.file	= "drivers/usb/misc/usbtest.c",
+	.param3	= 1,
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001281_hash = {
+	.next	= NULL,
+	.name	= "usbtmc_read",
+	.file	= "drivers/usb/class/usbtmc.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001282_hash = {
+	.next	= NULL,
+	.name	= "usbtmc_write",
+	.file	= "drivers/usb/class/usbtmc.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001283_hash = {
+	.next	= NULL,
+	.name	= "usbvision_v4l2_read",
+	.file	= "drivers/media/video/usbvision/usbvision-video.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001284_hash = {
+	.next	= NULL,
+	.name	= "uvc_alloc_buffers",
+	.file	= "drivers/usb/gadget/uvc_queue.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001285_hash = {
+	.next	= NULL,
+	.name	= "uvc_alloc_entity",
+	.file	= "drivers/media/video/uvc/uvc_driver.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001286_hash = {
+	.next	= NULL,
+	.name	= "uvc_debugfs_stats_read",
+	.file	= "drivers/media/video/uvc/uvc_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001287_hash = {
+	.next	= NULL,
+	.name	= "uvc_simplify_fraction",
+	.file	= "drivers/media/video/uvc/uvc_driver.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001288_hash = {
+	.next	= NULL,
+	.name	= "uwb_rc_neh_grok_event",
+	.file	= "drivers/uwb/neh.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001289_hash = {
+	.next	= NULL,
+	.name	= "v4l2_event_subscribe",
+	.file	= "include/media/v4l2-event.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001290_hash = {
+	.next	= NULL,
+	.name	= "v4l_stk_read",
+	.file	= "drivers/media/video/stk-webcam.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001291_hash = {
+	.next	= NULL,
+	.name	= "__vb2_perform_fileio",
+	.file	= "drivers/media/video/videobuf2-core.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001292_hash = {
+	.next	= NULL,
+	.name	= "vdma_mem_alloc",
+	.file	= "arch/x86/include/asm/floppy.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001293_hash = {
+	.next	= NULL,
+	.name	= "vfd_write",
+	.file	= "drivers/media/rc/imon.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001294_hash = {
+	.next	= NULL,
+	.name	= "vhci_get_user",
+	.file	= "drivers/bluetooth/hci_vhci.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001295_hash = {
+	.next	= NULL,
+	.name	= "__vhost_add_used_n",
+	.file	= "drivers/vhost/vhost.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001296_hash = {
+	.next	= NULL,
+	.name	= "__videobuf_alloc_vb",
+	.file	= "drivers/media/video/videobuf-dma-sg.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001297_hash = {
+	.next	= NULL,
+	.name	= "__videobuf_alloc_vb",
+	.file	= "drivers/media/video/videobuf-dma-contig.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001298_hash = {
+	.next	= NULL,
+	.name	= "__videobuf_alloc_vb",
+	.file	= "drivers/media/video/videobuf-vmalloc.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001299_hash = {
+	.next	= NULL,
+	.name	= "__videobuf_copy_to_user",
+	.file	= "drivers/media/video/videobuf-core.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001300_hash = {
+	.next	= NULL,
+	.name	= "video_proc_write",
+	.file	= "drivers/platform/x86/toshiba_acpi.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001301_hash = {
+	.next	= NULL,
+	.name	= "vifs_state_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001302_hash = {
+	.next	= NULL,
+	.name	= "vlsi_alloc_ring",
+	.file	= "drivers/net/irda/vlsi_ir.c",
+	.param3	= 1,
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001304_hash = {
+	.next	= NULL,
+	.name	= "vol_cdev_direct_write",
+	.file	= "drivers/mtd/ubi/cdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001305_hash = {
+	.next	= NULL,
+	.name	= "vol_cdev_read",
+	.file	= "drivers/mtd/ubi/cdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001306_hash = {
+	.next	= NULL,
+	.name	= "vring_add_indirect",
+	.file	= "drivers/virtio/virtio_ring.c",
+	.param3	= 1,
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001308_hash = {
+	.next	= NULL,
+	.name	= "vring_new_virtqueue",
+	.file	= "include/linux/virtio_ring.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001309_hash = {
+	.next	= NULL,
+	.name	= "__vxge_hw_channel_allocate",
+	.file	= "drivers/net/ethernet/neterion/vxge/vxge-config.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001310_hash = {
+	.next	= NULL,
+	.name	= "vxge_os_dma_malloc",
+	.file	= "drivers/net/ethernet/neterion/vxge/vxge-config.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001311_hash = {
+	.next	= NULL,
+	.name	= "vxge_os_dma_malloc_async",
+	.file	= "drivers/net/ethernet/neterion/vxge/vxge-config.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001312_hash = {
+	.next	= NULL,
+	.name	= "w9966_v4l_read",
+	.file	= "drivers/media/video/w9966.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001313_hash = {
+	.next	= NULL,
+	.name	= "waiters_read",
+	.file	= "fs/dlm/debug_fs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001314_hash = {
+	.next	= NULL,
+	.name	= "wa_nep_queue",
+	.file	= "drivers/usb/wusbcore/wa-nep.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001315_hash = {
+	.next	= NULL,
+	.name	= "__wa_xfer_setup_segs",
+	.file	= "drivers/usb/wusbcore/wa-xfer.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001316_hash = {
+	.next	= NULL,
+	.name	= "wdm_read",
+	.file	= "drivers/usb/class/cdc-wdm.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001317_hash = {
+	.next	= NULL,
+	.name	= "wdm_write",
+	.file	= "drivers/usb/class/cdc-wdm.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001318_hash = {
+	.next	= NULL,
+	.name	= "wep_addr_key_count_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001319_hash = {
+	.next	= &_000480_hash,
+	.name	= "wep_decrypt_fail_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001320_hash = {
+	.next	= NULL,
+	.name	= "wep_default_key_count_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001321_hash = {
+	.next	= NULL,
+	.name	= "wep_interrupt_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001322_hash = {
+	.next	= NULL,
+	.name	= "wep_key_not_found_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001323_hash = {
+	.next	= NULL,
+	.name	= "wep_packets_read",
+	.file	= "drivers/net/wireless/wl1251/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001324_hash = {
+	.next	= NULL,
+	.name	= "wiimote_hid_send",
+	.file	= "drivers/hid/hid-wiimote-core.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001325_hash = {
+	.next	= NULL,
+	.name	= "wl1271_format_buffer",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001326_hash = {
+	.next	= NULL,
+	.name	= "wl1273_fm_fops_write",
+	.file	= "drivers/media/radio/radio-wl1273.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001327_hash = {
+	.next	= NULL,
+	.name	= "wlc_phy_loadsampletable_nphy",
+	.file	= "drivers/net/wireless/brcm80211/brcmsmac/phy/phy_n.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001328_hash = {
+	.next	= NULL,
+	.name	= "wpan_phy_alloc",
+	.file	= "include/net/wpan-phy.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001329_hash = {
+	.next	= NULL,
+	.name	= "write_flush",
+	.file	= "net/sunrpc/cache.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001330_hash = {
+	.next	= NULL,
+	.name	= "write_rio",
+	.file	= "drivers/usb/misc/rio500.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001331_hash = {
+	.next	= NULL,
+	.name	= "wusb_ccm_mac",
+	.file	= "drivers/usb/wusbcore/crypto.c",
+	.param7	= 1,
+};
+
+struct size_overflow_hash _001332_hash = {
+	.next	= NULL,
+	.name	= "xfs_attrmulti_attr_set",
+	.file	= "fs/xfs/xfs_ioctl.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001333_hash = {
+	.next	= NULL,
+	.name	= "xfs_handle_to_dentry",
+	.file	= "fs/xfs/xfs_ioctl.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001334_hash = {
+	.next	= NULL,
+	.name	= "xhci_alloc_stream_info",
+	.file	= "drivers/usb/host/xhci-mem.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001335_hash = {
+	.next	= NULL,
+	.name	= "xprt_alloc",
+	.file	= "include/linux/sunrpc/xprt.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001336_hash = {
+	.next	= NULL,
+	.name	= "xprt_rdma_allocate",
+	.file	= "net/sunrpc/xprtrdma/transport.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001337_hash = {
+	.next	= NULL,
+	.name	= "xt_alloc_table_info",
+	.file	= "include/linux/netfilter/x_tables.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001338_hash = {
+	.next	= NULL,
+	.name	= "zd_usb_iowrite16v_async",
+	.file	= "drivers/net/wireless/zd1211rw/zd_usb.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001339_hash = {
+	.next	= NULL,
+	.name	= "zd_usb_read_fw",
+	.file	= "drivers/net/wireless/zd1211rw/zd_usb.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001340_hash = {
+	.next	= NULL,
+	.name	= "zoran_write",
+	.file	= "drivers/media/video/zoran/zoran_procfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001341_hash = {
+	.next	= NULL,
+	.name	= "ad7879_spi_multi_read",
+	.file	= "drivers/input/touchscreen/ad7879-spi.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001342_hash = {
+	.next	= NULL,
+	.name	= "aes_decrypt_fail_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001343_hash = {
+	.next	= NULL,
+	.name	= "aes_decrypt_interrupt_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001344_hash = {
+	.next	= NULL,
+	.name	= "aes_decrypt_packets_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001345_hash = {
+	.next	= NULL,
+	.name	= "aes_encrypt_fail_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001346_hash = {
+	.next	= NULL,
+	.name	= "aes_encrypt_interrupt_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001347_hash = {
+	.next	= NULL,
+	.name	= "aes_encrypt_packets_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001348_hash = {
+	.next	= NULL,
+	.name	= "afs_cell_create",
+	.file	= "fs/afs/cell.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001349_hash = {
+	.next	= NULL,
+	.name	= "agp_create_user_memory",
+	.file	= "drivers/char/agp/generic.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001350_hash = {
+	.next	= NULL,
+	.name	= "alg_setsockopt",
+	.file	= "crypto/af_alg.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001351_hash = {
+	.next	= NULL,
+	.name	= "alloc_targets",
+	.file	= "drivers/md/dm-table.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001352_hash = {
+	.next	= NULL,
+	.name	= "aoechr_write",
+	.file	= "drivers/block/aoe/aoechr.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001353_hash = {
+	.next	= NULL,
+	.name	= "ath6kl_cfg80211_connect_event",
+	.file	= "drivers/net/wireless/ath/ath6kl/cfg80211.c",
+	.param7	= 1,
+	.param9	= 1,
+	.param8	= 1,
+};
+
+struct size_overflow_hash _001356_hash = {
+	.next	= NULL,
+	.name	= "ath6kl_mgmt_tx",
+	.file	= "drivers/net/wireless/ath/ath6kl/cfg80211.c",
+	.param9	= 1,
+};
+
+struct size_overflow_hash _001357_hash = {
+	.next	= NULL,
+	.name	= "atomic_read_file",
+	.file	= "arch/x86/oprofile/../../../drivers/oprofile/oprofilefs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001358_hash = {
+	.next	= NULL,
+	.name	= "beacon_interval_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001359_hash = {
+	.next	= NULL,
+	.name	= "bm_entry_write",
+	.file	= "fs/binfmt_misc.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001360_hash = {
+	.next	= NULL,
+	.name	= "bm_init",
+	.file	= "lib/ts_bm.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001361_hash = {
+	.next	= NULL,
+	.name	= "bm_register_write",
+	.file	= "fs/binfmt_misc.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001362_hash = {
+	.next	= NULL,
+	.name	= "bm_status_write",
+	.file	= "fs/binfmt_misc.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001363_hash = {
+	.next	= NULL,
+	.name	= "brn_proc_write",
+	.file	= "drivers/platform/x86/asus_acpi.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001364_hash = {
+	.next	= NULL,
+	.name	= "btrfs_map_block",
+	.file	= "fs/btrfs/volumes.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001365_hash = {
+	.next	= NULL,
+	.name	= "cache_downcall",
+	.file	= "net/sunrpc/cache.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001366_hash = {
+	.next	= NULL,
+	.name	= "cache_slow_downcall",
+	.file	= "net/sunrpc/cache.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001367_hash = {
+	.next	= NULL,
+	.name	= "ceph_dns_resolve_name",
+	.file	= "net/ceph/messenger.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001368_hash = {
+	.next	= NULL,
+	.name	= "cfg80211_roamed",
+	.file	= "include/net/cfg80211.h",
+	.param5	= 1,
+	.param7	= 1,
+};
+
+struct size_overflow_hash _001370_hash = {
+	.next	= NULL,
+	.name	= "cifs_readv_from_socket",
+	.file	= "fs/cifs/connect.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001371_hash = {
+	.next	= NULL,
+	.name	= "configfs_write_file",
+	.file	= "fs/configfs/file.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001372_hash = {
+	.next	= &_001370_hash,
+	.name	= "cpu_type_read",
+	.file	= "arch/x86/oprofile/../../../drivers/oprofile/oprofile_files.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001373_hash = {
+	.next	= NULL,
+	.name	= "cx18_copy_mdl_to_user",
+	.file	= "drivers/media/video/cx18/cx18-fileops.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001374_hash = {
+	.next	= NULL,
+	.name	= "cxgbi_ddp_reserve",
+	.file	= "drivers/scsi/cxgbi/libcxgbi.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001375_hash = {
+	.next	= NULL,
+	.name	= "cxgbi_device_portmap_create",
+	.file	= "drivers/scsi/cxgbi/libcxgbi.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001376_hash = {
+	.next	= NULL,
+	.name	= "datablob_hmac_append",
+	.file	= "security/keys/encrypted-keys/encrypted.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001377_hash = {
+	.next	= NULL,
+	.name	= "datablob_hmac_verify",
+	.file	= "security/keys/encrypted-keys/encrypted.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001378_hash = {
+	.next	= NULL,
+	.name	= "dataflash_read_fact_otp",
+	.file	= "drivers/mtd/devices/mtd_dataflash.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001379_hash = {
+	.next	= NULL,
+	.name	= "dataflash_read_user_otp",
+	.file	= "drivers/mtd/devices/mtd_dataflash.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001380_hash = {
+	.next	= NULL,
+	.name	= "depth_read",
+	.file	= "arch/x86/oprofile/../../../drivers/oprofile/oprofile_files.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001381_hash = {
+	.next	= NULL,
+	.name	= "depth_write",
+	.file	= "arch/x86/oprofile/../../../drivers/oprofile/oprofile_files.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001382_hash = {
+	.next	= NULL,
+	.name	= "dev_irnet_write",
+	.file	= "net/irda/irnet/irnet_ppp.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001383_hash = {
+	.next	= NULL,
+	.name	= "dev_write",
+	.file	= "sound/oss/msnd_pinnacle.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001384_hash = {
+	.next	= NULL,
+	.name	= "dfs_file_read",
+	.file	= "fs/ubifs/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001385_hash = {
+	.next	= NULL,
+	.name	= "dfs_file_write",
+	.file	= "fs/ubifs/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001386_hash = {
+	.next	= NULL,
+	.name	= "dfs_global_file_read",
+	.file	= "fs/ubifs/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001387_hash = {
+	.next	= NULL,
+	.name	= "dfs_global_file_write",
+	.file	= "fs/ubifs/debug.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001388_hash = {
+	.next	= NULL,
+	.name	= "disconnect",
+	.file	= "net/bluetooth/mgmt.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001389_hash = {
+	.next	= NULL,
+	.name	= "disp_proc_write",
+	.file	= "drivers/platform/x86/asus_acpi.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001390_hash = {
+	.next	= NULL,
+	.name	= "dma_rx_errors_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001391_hash = {
+	.next	= NULL,
+	.name	= "dma_rx_requested_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001392_hash = {
+	.next	= NULL,
+	.name	= "dma_tx_errors_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001393_hash = {
+	.next	= NULL,
+	.name	= "dma_tx_requested_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001394_hash = {
+	.next	= NULL,
+	.name	= "dm_exception_table_init",
+	.file	= "drivers/md/dm-snap.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001395_hash = {
+	.next	= NULL,
+	.name	= "do_dccp_setsockopt",
+	.file	= "net/dccp/proto.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001396_hash = {
+	.next	= NULL,
+	.name	= "dtim_interval_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001397_hash = {
+	.next	= NULL,
+	.name	= "dvb_audio_write",
+	.file	= "drivers/media/dvb/ttpci/av7110_av.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001398_hash = {
+	.next	= NULL,
+	.name	= "dvb_demux_do_ioctl",
+	.file	= "drivers/media/dvb/dvb-core/dmxdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001399_hash = {
+	.next	= NULL,
+	.name	= "dvb_dvr_do_ioctl",
+	.file	= "drivers/media/dvb/dvb-core/dmxdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001400_hash = {
+	.next	= NULL,
+	.name	= "dvb_video_write",
+	.file	= "drivers/media/dvb/ttpci/av7110_av.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001401_hash = {
+	.next	= NULL,
+	.name	= "ecryptfs_decode_and_decrypt_filename",
+	.file	= "fs/ecryptfs/crypto.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001402_hash = {
+	.next	= NULL,
+	.name	= "ecryptfs_encrypt_and_encode_filename",
+	.file	= "fs/ecryptfs/crypto.c",
+	.param6	= 1,
+};
+
+struct size_overflow_hash _001403_hash = {
+	.next	= NULL,
+	.name	= "enable_read",
+	.file	= "arch/x86/oprofile/../../../drivers/oprofile/oprofile_files.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001404_hash = {
+	.next	= NULL,
+	.name	= "enable_write",
+	.file	= "arch/x86/oprofile/../../../drivers/oprofile/oprofile_files.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001405_hash = {
+	.next	= NULL,
+	.name	= "event_calibration_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001406_hash = {
+	.next	= NULL,
+	.name	= "event_heart_beat_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001407_hash = {
+	.next	= NULL,
+	.name	= "event_oom_late_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001408_hash = {
+	.next	= NULL,
+	.name	= "event_phy_transmit_error_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001409_hash = {
+	.next	= NULL,
+	.name	= "event_rx_mem_empty_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001410_hash = {
+	.next	= NULL,
+	.name	= "event_rx_mismatch_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001411_hash = {
+	.next	= NULL,
+	.name	= "event_rx_pool_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001412_hash = {
+	.next	= NULL,
+	.name	= "event_tx_stuck_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001413_hash = {
+	.next	= NULL,
+	.name	= "excessive_retries_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001414_hash = {
+	.next	= NULL,
+	.name	= "exofs_read_kern",
+	.file	= "fs/exofs/super.c",
+	.param6	= 1,
+};
+
+struct size_overflow_hash _001415_hash = {
+	.next	= NULL,
+	.name	= "fallback_on_nodma_alloc",
+	.file	= "drivers/block/floppy.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001416_hash = {
+	.next	= NULL,
+	.name	= "__feat_register_sp",
+	.file	= "net/dccp/feat.c",
+	.param6	= 1,
+};
+
+struct size_overflow_hash _001417_hash = {
+	.next	= NULL,
+	.name	= "ffs_ep0_write",
+	.file	= "drivers/usb/gadget/f_fs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001418_hash = {
+	.next	= NULL,
+	.name	= "ffs_epfile_read",
+	.file	= "drivers/usb/gadget/f_fs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001419_hash = {
+	.next	= NULL,
+	.name	= "ffs_epfile_write",
+	.file	= "drivers/usb/gadget/f_fs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001420_hash = {
+	.next	= NULL,
+	.name	= "frequency_read",
+	.file	= "net/mac80211/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001421_hash = {
+	.next	= NULL,
+	.name	= "fsm_init",
+	.file	= "lib/ts_fsm.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001422_hash = {
+	.next	= NULL,
+	.name	= "garmin_read_process",
+	.file	= "drivers/usb/serial/garmin_gps.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001423_hash = {
+	.next	= NULL,
+	.name	= "garp_request_join",
+	.file	= "include/net/garp.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001424_hash = {
+	.next	= NULL,
+	.name	= "hcd_alloc_coherent",
+	.file	= "drivers/usb/core/hcd.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001425_hash = {
+	.next	= NULL,
+	.name	= "hci_sock_sendmsg",
+	.file	= "net/bluetooth/hci_sock.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001426_hash = {
+	.next	= NULL,
+	.name	= "__hwahc_op_set_gtk",
+	.file	= "drivers/usb/host/hwa-hc.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001427_hash = {
+	.next	= NULL,
+	.name	= "__hwahc_op_set_ptk",
+	.file	= "drivers/usb/host/hwa-hc.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001428_hash = {
+	.next	= NULL,
+	.name	= "ib_send_cm_drep",
+	.file	= "include/rdma/ib_cm.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001429_hash = {
+	.next	= NULL,
+	.name	= "ib_send_cm_mra",
+	.file	= "include/rdma/ib_cm.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001430_hash = {
+	.next	= NULL,
+	.name	= "ib_send_cm_rtu",
+	.file	= "include/rdma/ib_cm.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001431_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_bss_info_update",
+	.file	= "net/mac80211/scan.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001432_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_aid",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001433_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_auto_open_plinks",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001434_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_ave_beacon",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001435_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_bssid",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001436_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_channel_type",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001437_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_dot11MeshConfirmTimeout",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001438_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_dot11MeshGateAnnouncementProtocol",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001439_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_dot11MeshHoldingTimeout",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001440_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_dot11MeshHWMPactivePathTimeout",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001441_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_dot11MeshHWMPmaxPREQretries",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001442_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_dot11MeshHWMPnetDiameterTraversalTime",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001443_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_dot11MeshHWMPperrMinInterval",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001444_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_dot11MeshHWMPpreqMinInterval",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001445_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_dot11MeshHWMPRannInterval",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001446_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_dot11MeshHWMPRootMode",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001447_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_dot11MeshMaxPeerLinks",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001448_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_dot11MeshMaxRetries",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001449_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_dot11MeshRetryTimeout",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001450_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_dot11MeshTTL",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001451_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_dropped_frames_congestion",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001452_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_dropped_frames_no_route",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001453_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_dropped_frames_ttl",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001454_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_drop_unencrypted",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001455_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_dtim_count",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001456_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_element_ttl",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001457_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_estab_plinks",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001458_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_flags",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001459_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_fwded_frames",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001460_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_fwded_mcast",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001461_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_fwded_unicast",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001462_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_last_beacon",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001463_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_min_discovery_timeout",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001464_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_num_buffered_multicast",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001465_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_num_sta_authorized",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001466_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_num_sta_ps",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001467_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_path_refresh_time",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001468_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_peer",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001469_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_rc_rateidx_mask_2ghz",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001470_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_rc_rateidx_mask_5ghz",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001471_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_smps",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001472_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_state",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001473_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_tkip_mic_test",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001474_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_if_read_tsf",
+	.file	= "net/mac80211/debugfs_netdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001475_hash = {
+	.next	= NULL,
+	.name	= "ieee80211_send_probe_req",
+	.file	= "net/mac80211/util.c",
+	.param6	= 1,
+};
+
+struct size_overflow_hash _001476_hash = {
+	.next	= NULL,
+	.name	= "init_map_ipmac",
+	.file	= "net/netfilter/ipset/ip_set_bitmap_ipmac.c",
+	.param3	= 1,
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001478_hash = {
+	.next	= NULL,
+	.name	= "init_tid_tabs",
+	.file	= "drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c",
+	.param2	= 1,
+	.param4	= 1,
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001481_hash = {
+	.next	= NULL,
+	.name	= "isr_cmd_cmplt_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001482_hash = {
+	.next	= NULL,
+	.name	= "isr_commands_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001483_hash = {
+	.next	= NULL,
+	.name	= "isr_decrypt_done_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001484_hash = {
+	.next	= NULL,
+	.name	= "isr_dma0_done_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001485_hash = {
+	.next	= NULL,
+	.name	= "isr_dma1_done_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001486_hash = {
+	.next	= NULL,
+	.name	= "isr_fiqs_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001487_hash = {
+	.next	= NULL,
+	.name	= "isr_host_acknowledges_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001488_hash = {
+	.next	= &_001393_hash,
+	.name	= "isr_hw_pm_mode_changes_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001489_hash = {
+	.next	= &_001205_hash,
+	.name	= "isr_irqs_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001490_hash = {
+	.next	= NULL,
+	.name	= "isr_low_rssi_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001491_hash = {
+	.next	= NULL,
+	.name	= "isr_pci_pm_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001492_hash = {
+	.next	= NULL,
+	.name	= "isr_rx_headers_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001493_hash = {
+	.next	= NULL,
+	.name	= "isr_rx_mem_overflow_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001494_hash = {
+	.next	= NULL,
+	.name	= "isr_rx_procs_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001495_hash = {
+	.next	= NULL,
+	.name	= "isr_rx_rdys_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001496_hash = {
+	.next	= NULL,
+	.name	= "isr_tx_exch_complete_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001497_hash = {
+	.next	= NULL,
+	.name	= "isr_tx_procs_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001498_hash = {
+	.next	= NULL,
+	.name	= "isr_wakeups_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001499_hash = {
+	.next	= NULL,
+	.name	= "ivtv_read",
+	.file	= "drivers/media/video/ivtv/ivtv-fileops.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001500_hash = {
+	.next	= NULL,
+	.name	= "kmem_realloc",
+	.file	= "fs/xfs/kmem.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001501_hash = {
+	.next	= NULL,
+	.name	= "kmem_zalloc",
+	.file	= "fs/xfs/kmem.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001502_hash = {
+	.next	= NULL,
+	.name	= "kmem_zalloc_greedy",
+	.file	= "fs/xfs/kmem.c",
+	.param2	= 1,
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001504_hash = {
+	.next	= NULL,
+	.name	= "kmp_init",
+	.file	= "lib/ts_kmp.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001505_hash = {
+	.next	= NULL,
+	.name	= "lcd_proc_write",
+	.file	= "drivers/platform/x86/asus_acpi.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001506_hash = {
+	.next	= NULL,
+	.name	= "ledd_proc_write",
+	.file	= "drivers/platform/x86/asus_acpi.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001507_hash = {
+	.next	= NULL,
+	.name	= "mic_calc_failure_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001508_hash = {
+	.next	= NULL,
+	.name	= "mic_rx_pkts_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001509_hash = {
+	.next	= NULL,
+	.name	= "nfs4_realloc_slot_table",
+	.file	= "fs/nfs/nfs4proc.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001510_hash = {
+	.next	= NULL,
+	.name	= "nfs_idmap_request_key",
+	.file	= "fs/nfs/idmap.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001511_hash = {
+	.next	= NULL,
+	.name	= "nsm_get_handle",
+	.file	= "include/linux/lockd/lockd.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001512_hash = {
+	.next	= NULL,
+	.name	= "ntfs_copy_from_user_iovec",
+	.file	= "fs/ntfs/file.c",
+	.param3	= 1,
+	.param6	= 1,
+};
+
+struct size_overflow_hash _001514_hash = {
+	.next	= NULL,
+	.name	= "ntfs_file_buffered_write",
+	.file	= "fs/ntfs/file.c",
+	.param6	= 1,
+};
+
+struct size_overflow_hash _001515_hash = {
+	.next	= NULL,
+	.name	= "ntfs_malloc_nofs",
+	.file	= "fs/ntfs/malloc.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001516_hash = {
+	.next	= NULL,
+	.name	= "ntfs_malloc_nofs_nofail",
+	.file	= "fs/ntfs/malloc.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001517_hash = {
+	.next	= NULL,
+	.name	= "ocfs2_control_message",
+	.file	= "fs/ocfs2/stack_user.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001518_hash = {
+	.next	= NULL,
+	.name	= "opera1_usb_i2c_msgxfer",
+	.file	= "drivers/media/dvb/dvb-usb/opera1.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001519_hash = {
+	.next	= NULL,
+	.name	= "orinoco_add_extscan_result",
+	.file	= "drivers/net/wireless/orinoco/scan.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001520_hash = {
+	.next	= NULL,
+	.name	= "osd_req_list_collection_objects",
+	.file	= "include/scsi/osd_initiator.h",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001521_hash = {
+	.next	= NULL,
+	.name	= "osd_req_list_partition_objects",
+	.file	= "include/scsi/osd_initiator.h",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001522_hash = {
+	.next	= NULL,
+	.name	= "pair_device",
+	.file	= "net/bluetooth/mgmt.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001523_hash = {
+	.next	= NULL,
+	.name	= "pccard_store_cis",
+	.file	= "drivers/pcmcia/cistpl.c",
+	.param6	= 1,
+};
+
+struct size_overflow_hash _001524_hash = {
+	.next	= NULL,
+	.name	= "pin_code_reply",
+	.file	= "net/bluetooth/mgmt.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001525_hash = {
+	.next	= NULL,
+	.name	= "play_iframe",
+	.file	= "drivers/media/dvb/ttpci/av7110_av.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001526_hash = {
+	.next	= NULL,
+	.name	= "pointer_size_read",
+	.file	= "arch/x86/oprofile/../../../drivers/oprofile/oprofile_files.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001527_hash = {
+	.next	= NULL,
+	.name	= "power_read",
+	.file	= "net/mac80211/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001528_hash = {
+	.next	= NULL,
+	.name	= "ps_pspoll_max_apturn_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001529_hash = {
+	.next	= NULL,
+	.name	= "ps_pspoll_timeouts_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001530_hash = {
+	.next	= NULL,
+	.name	= "ps_pspoll_utilization_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001531_hash = {
+	.next	= NULL,
+	.name	= "ps_upsd_max_apturn_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001532_hash = {
+	.next	= NULL,
+	.name	= "ps_upsd_max_sptime_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001533_hash = {
+	.next	= NULL,
+	.name	= "ps_upsd_timeouts_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001534_hash = {
+	.next	= NULL,
+	.name	= "ps_upsd_utilization_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001535_hash = {
+	.next	= NULL,
+	.name	= "pwr_disable_ps_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001536_hash = {
+	.next	= NULL,
+	.name	= "pwr_elp_enter_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001537_hash = {
+	.next	= NULL,
+	.name	= "pwr_enable_ps_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001538_hash = {
+	.next	= NULL,
+	.name	= "pwr_fix_tsf_ps_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001539_hash = {
+	.next	= NULL,
+	.name	= "pwr_missing_bcns_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001540_hash = {
+	.next	= NULL,
+	.name	= "pwr_power_save_off_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001541_hash = {
+	.next	= NULL,
+	.name	= "pwr_ps_enter_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001542_hash = {
+	.next	= NULL,
+	.name	= "pwr_rcvd_awake_beacons_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001543_hash = {
+	.next	= NULL,
+	.name	= "pwr_rcvd_beacons_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001544_hash = {
+	.next	= NULL,
+	.name	= "pwr_tx_without_ps_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001545_hash = {
+	.next	= NULL,
+	.name	= "pwr_tx_with_ps_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001546_hash = {
+	.next	= NULL,
+	.name	= "pwr_wake_on_host_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001547_hash = {
+	.next	= NULL,
+	.name	= "pwr_wake_on_timer_exp_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001548_hash = {
+	.next	= NULL,
+	.name	= "qcam_read",
+	.file	= "drivers/media/video/c-qcam.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001549_hash = {
+	.next	= NULL,
+	.name	= "retry_count_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001550_hash = {
+	.next	= NULL,
+	.name	= "rx_dropped_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001551_hash = {
+	.next	= NULL,
+	.name	= "rx_fcs_err_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001552_hash = {
+	.next	= NULL,
+	.name	= "rx_hdr_overflow_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001553_hash = {
+	.next	= NULL,
+	.name	= "rx_hw_stuck_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001554_hash = {
+	.next	= NULL,
+	.name	= "rx_out_of_mem_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001555_hash = {
+	.next	= NULL,
+	.name	= "rx_path_reset_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001556_hash = {
+	.next	= NULL,
+	.name	= "rxpipe_beacon_buffer_thres_host_int_trig_rx_data_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001557_hash = {
+	.next	= NULL,
+	.name	= "rxpipe_descr_host_int_trig_rx_data_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001558_hash = {
+	.next	= NULL,
+	.name	= "rxpipe_missed_beacon_host_int_trig_rx_data_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001559_hash = {
+	.next	= NULL,
+	.name	= "rxpipe_rx_prep_beacon_drop_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001560_hash = {
+	.next	= NULL,
+	.name	= "rxpipe_tx_xfr_host_int_trig_rx_data_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001561_hash = {
+	.next	= NULL,
+	.name	= "rx_reset_counter_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001562_hash = {
+	.next	= NULL,
+	.name	= "rx_streaming_always_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001563_hash = {
+	.next	= NULL,
+	.name	= "rx_streaming_interval_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001564_hash = {
+	.next	= NULL,
+	.name	= "rx_xfr_hint_trig_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001565_hash = {
+	.next	= NULL,
+	.name	= "scsi_execute_req",
+	.file	= "include/scsi/scsi_device.h",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001566_hash = {
+	.next	= NULL,
+	.name	= "scsi_tgt_kspace_exec",
+	.file	= "drivers/scsi/scsi_tgt_lib.c",
+	.param8	= 1,
+};
+
+struct size_overflow_hash _001567_hash = {
+	.next	= NULL,
+	.name	= "sctp_sendmsg",
+	.file	= "net/sctp/socket.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001568_hash = {
+	.next	= NULL,
+	.name	= "sctp_setsockopt",
+	.file	= "net/sctp/socket.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001569_hash = {
+	.next	= NULL,
+	.name	= "set_connectable",
+	.file	= "net/bluetooth/mgmt.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001570_hash = {
+	.next	= NULL,
+	.name	= "set_discoverable",
+	.file	= "net/bluetooth/mgmt.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001571_hash = {
+	.next	= NULL,
+	.name	= "set_local_name",
+	.file	= "net/bluetooth/mgmt.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001572_hash = {
+	.next	= NULL,
+	.name	= "set_powered",
+	.file	= "net/bluetooth/mgmt.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001573_hash = {
+	.next	= NULL,
+	.name	= "simple_alloc_urb",
+	.file	= "drivers/usb/misc/usbtest.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001574_hash = {
+	.next	= NULL,
+	.name	= "sm_checker_extend",
+	.file	= "drivers/md/persistent-data/dm-space-map-checker.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001575_hash = {
+	.next	= NULL,
+	.name	= "snd_cs4281_BA0_read",
+	.file	= "sound/pci/cs4281.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001576_hash = {
+	.next	= NULL,
+	.name	= "snd_cs4281_BA1_read",
+	.file	= "sound/pci/cs4281.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001577_hash = {
+	.next	= NULL,
+	.name	= "snd_cs46xx_io_read",
+	.file	= "sound/pci/cs46xx/cs46xx_lib.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001578_hash = {
+	.next	= NULL,
+	.name	= "snd_gus_dram_read",
+	.file	= "include/sound/gus.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001579_hash = {
+	.next	= NULL,
+	.name	= "snd_gus_dram_write",
+	.file	= "include/sound/gus.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001580_hash = {
+	.next	= NULL,
+	.name	= "snd_mem_proc_write",
+	.file	= "sound/core/memalloc.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001581_hash = {
+	.next	= NULL,
+	.name	= "snd_pcm_oss_read",
+	.file	= "sound/core/oss/pcm_oss.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001582_hash = {
+	.next	= NULL,
+	.name	= "snd_pcm_oss_sync1",
+	.file	= "sound/core/oss/pcm_oss.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001583_hash = {
+	.next	= NULL,
+	.name	= "snd_pcm_oss_write",
+	.file	= "sound/core/oss/pcm_oss.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001584_hash = {
+	.next	= NULL,
+	.name	= "snd_rme32_capture_copy",
+	.file	= "sound/pci/rme32.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001585_hash = {
+	.next	= NULL,
+	.name	= "snd_rme32_playback_copy",
+	.file	= "sound/pci/rme32.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001586_hash = {
+	.next	= NULL,
+	.name	= "snd_rme96_capture_copy",
+	.file	= "sound/pci/rme96.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001587_hash = {
+	.next	= NULL,
+	.name	= "snd_rme96_playback_copy",
+	.file	= "sound/pci/rme96.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001588_hash = {
+	.next	= NULL,
+	.name	= "spi_execute",
+	.file	= "drivers/scsi/scsi_transport_spi.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001589_hash = {
+	.next	= NULL,
+	.name	= "srp_target_alloc",
+	.file	= "include/scsi/libsrp.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001590_hash = {
+	.next	= NULL,
+	.name	= "stats_dot11ACKFailureCount_read",
+	.file	= "net/mac80211/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001591_hash = {
+	.next	= NULL,
+	.name	= "stats_dot11FCSErrorCount_read",
+	.file	= "net/mac80211/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001592_hash = {
+	.next	= NULL,
+	.name	= "stats_dot11RTSFailureCount_read",
+	.file	= "net/mac80211/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001593_hash = {
+	.next	= NULL,
+	.name	= "stats_dot11RTSSuccessCount_read",
+	.file	= "net/mac80211/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001594_hash = {
+	.next	= NULL,
+	.name	= "stk_allocate_buffers",
+	.file	= "drivers/media/video/stk-webcam.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001595_hash = {
+	.next	= NULL,
+	.name	= "submit_inquiry",
+	.file	= "drivers/scsi/device_handler/scsi_dh_rdac.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001596_hash = {
+	.next	= NULL,
+	.name	= "team_options_register",
+	.file	= "include/linux/if_team.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001597_hash = {
+	.next	= NULL,
+	.name	= "test_unaligned_bulk",
+	.file	= "drivers/usb/misc/usbtest.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001598_hash = {
+	.next	= NULL,
+	.name	= "timeout_read",
+	.file	= "arch/x86/oprofile/../../../drivers/oprofile/oprofile_files.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001599_hash = {
+	.next	= NULL,
+	.name	= "timeout_write",
+	.file	= "arch/x86/oprofile/../../../drivers/oprofile/oprofile_files.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001600_hash = {
+	.next	= NULL,
+	.name	= "tipc_link_send_sections_fast",
+	.file	= "net/tipc/link.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001601_hash = {
+	.next	= NULL,
+	.name	= "total_ps_buffered_read",
+	.file	= "net/mac80211/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001602_hash = {
+	.next	= NULL,
+	.name	= "ts_read",
+	.file	= "drivers/media/dvb/ddbridge/ddbridge-core.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001603_hash = {
+	.next	= NULL,
+	.name	= "TSS_authhmac",
+	.file	= "security/keys/trusted.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001604_hash = {
+	.next	= NULL,
+	.name	= "TSS_checkhmac1",
+	.file	= "security/keys/trusted.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001605_hash = {
+	.next	= NULL,
+	.name	= "TSS_checkhmac2",
+	.file	= "security/keys/trusted.c",
+	.param5	= 1,
+	.param7	= 1,
+};
+
+struct size_overflow_hash _001607_hash = {
+	.next	= NULL,
+	.name	= "ts_write",
+	.file	= "drivers/media/dvb/ddbridge/ddbridge-core.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001608_hash = {
+	.next	= NULL,
+	.name	= "tx_internal_desc_overflow_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001609_hash = {
+	.next	= NULL,
+	.name	= "uapsd_max_sp_len_read",
+	.file	= "net/mac80211/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001610_hash = {
+	.next	= NULL,
+	.name	= "uapsd_queues_read",
+	.file	= "net/mac80211/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001611_hash = {
+	.next	= NULL,
+	.name	= "ulong_read_file",
+	.file	= "arch/x86/oprofile/../../../drivers/oprofile/oprofilefs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001612_hash = {
+	.next	= NULL,
+	.name	= "ulong_write_file",
+	.file	= "arch/x86/oprofile/../../../drivers/oprofile/oprofilefs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001613_hash = {
+	.next	= NULL,
+	.name	= "usb_alloc_coherent",
+	.file	= "include/linux/usb.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001614_hash = {
+	.next	= NULL,
+	.name	= "user_power_read",
+	.file	= "net/mac80211/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001615_hash = {
+	.next	= NULL,
+	.name	= "vb2_read",
+	.file	= "include/media/videobuf2-core.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001616_hash = {
+	.next	= NULL,
+	.name	= "vb2_write",
+	.file	= "include/media/videobuf2-core.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001617_hash = {
+	.next	= NULL,
+	.name	= "vhost_add_used_n",
+	.file	= "drivers/vhost/vhost.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001618_hash = {
+	.next	= NULL,
+	.name	= "virtqueue_add_buf",
+	.file	= "include/linux/virtio.h",
+	.param3	= 1,
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001620_hash = {
+	.next	= NULL,
+	.name	= "vmbus_establish_gpadl",
+	.file	= "include/linux/hyperv.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001621_hash = {
+	.next	= NULL,
+	.name	= "wep_addr_key_count_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001622_hash = {
+	.next	= NULL,
+	.name	= "wep_decrypt_fail_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001623_hash = {
+	.next	= NULL,
+	.name	= "wep_default_key_count_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001624_hash = {
+	.next	= NULL,
+	.name	= "wep_interrupt_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001625_hash = {
+	.next	= NULL,
+	.name	= "wep_iv_read",
+	.file	= "net/mac80211/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001626_hash = {
+	.next	= NULL,
+	.name	= "wep_key_not_found_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001627_hash = {
+	.next	= NULL,
+	.name	= "wep_packets_read",
+	.file	= "drivers/net/wireless/wl12xx/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001628_hash = {
+	.next	= NULL,
+	.name	= "write_led",
+	.file	= "drivers/platform/x86/asus_acpi.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001629_hash = {
+	.next	= NULL,
+	.name	= "wusb_prf",
+	.file	= "include/linux/usb/wusb.h",
+	.param7	= 1,
+};
+
+struct size_overflow_hash _001630_hash = {
+	.next	= NULL,
+	.name	= "zd_usb_iowrite16v",
+	.file	= "drivers/net/wireless/zd1211rw/zd_usb.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001631_hash = {
+	.next	= NULL,
+	.name	= "afs_cell_lookup",
+	.file	= "fs/afs/cell.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001632_hash = {
+	.next	= NULL,
+	.name	= "agp_generic_alloc_user",
+	.file	= "drivers/char/agp/generic.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001634_hash = {
+	.next	= NULL,
+	.name	= "bluetooth_proc_write",
+	.file	= "drivers/platform/x86/asus_acpi.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001635_hash = {
+	.next	= NULL,
+	.name	= "cache_write",
+	.file	= "net/sunrpc/cache.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001636_hash = {
+	.next	= NULL,
+	.name	= "ch_do_scsi",
+	.file	= "drivers/scsi/ch.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001637_hash = {
+	.next	= NULL,
+	.name	= "cx18_read",
+	.file	= "drivers/media/video/cx18/cx18-fileops.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001638_hash = {
+	.next	= NULL,
+	.name	= "dccp_feat_register_sp",
+	.file	= "net/dccp/feat.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001640_hash = {
+	.next	= NULL,
+	.name	= "iso_alloc_urb",
+	.file	= "drivers/usb/misc/usbtest.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001641_hash = {
+	.next	= NULL,
+	.name	= "ivtv_read_pos",
+	.file	= "drivers/media/video/ivtv/ivtv-fileops.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001642_hash = {
+	.next	= NULL,
+	.name	= "mcam_v4l_read",
+	.file	= "drivers/media/video/marvell-ccic/mcam-core.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001643_hash = {
+	.next	= NULL,
+	.name	= "mled_proc_write",
+	.file	= "drivers/platform/x86/asus_acpi.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001644_hash = {
+	.next	= NULL,
+	.name	= "nfs_idmap_lookup_id",
+	.file	= "fs/nfs/idmap.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001645_hash = {
+	.next	= NULL,
+	.name	= "ocfs2_control_write",
+	.file	= "fs/ocfs2/stack_user.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001646_hash = {
+	.next	= NULL,
+	.name	= "osd_req_list_dev_partitions",
+	.file	= "include/scsi/osd_initiator.h",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001647_hash = {
+	.next	= NULL,
+	.name	= "osd_req_list_partition_collections",
+	.file	= "include/scsi/osd_initiator.h",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001648_hash = {
+	.next	= NULL,
+	.name	= "pwc_video_read",
+	.file	= "drivers/media/video/pwc/pwc-if.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001649_hash = {
+	.next	= NULL,
+	.name	= "scsi_vpd_inquiry",
+	.file	= "drivers/scsi/scsi.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001650_hash = {
+	.next	= NULL,
+	.name	= "snd_gf1_mem_proc_dump",
+	.file	= "sound/isa/gus/gus_mem_proc.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001651_hash = {
+	.next	= NULL,
+	.name	= "spi_dv_device_echo_buffer",
+	.file	= "drivers/scsi/scsi_transport_spi.c",
+	.param2	= 1,
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001653_hash = {
+	.next	= NULL,
+	.name	= "tled_proc_write",
+	.file	= "drivers/platform/x86/asus_acpi.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001655_hash = {
+	.next	= NULL,
+	.name	= "usb_allocate_stream_buffers",
+	.file	= "drivers/media/dvb/dvb-usb/usb-urb.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001656_hash = {
+	.next	= NULL,
+	.name	= "_usb_writeN_sync",
+	.file	= "drivers/net/wireless/rtlwifi/usb.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001657_hash = {
+	.next	= NULL,
+	.name	= "vhost_add_used_and_signal_n",
+	.file	= "drivers/vhost/vhost.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001658_hash = {
+	.next	= NULL,
+	.name	= "vmbus_open",
+	.file	= "include/linux/hyperv.h",
+	.param2	= 1,
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001660_hash = {
+	.next	= NULL,
+	.name	= "wled_proc_write",
+	.file	= "drivers/platform/x86/asus_acpi.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001661_hash = {
+	.next	= NULL,
+	.name	= "wusb_prf_256",
+	.file	= "include/linux/usb/wusb.h",
+	.param7	= 1,
+};
+
+struct size_overflow_hash _001662_hash = {
+	.next	= NULL,
+	.name	= "wusb_prf_64",
+	.file	= "include/linux/usb/wusb.h",
+	.param7	= 1,
+};
+
+struct size_overflow_hash _001663_hash = {
+	.next	= NULL,
+	.name	= "agp_allocate_memory",
+	.file	= "include/linux/agp_backend.h",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001664_hash = {
+	.next	= NULL,
+	.name	= "cx18_read_pos",
+	.file	= "drivers/media/video/cx18/cx18-fileops.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001665_hash = {
+	.next	= NULL,
+	.name	= "nfs_map_group_to_gid",
+	.file	= "include/linux/nfs_idmap.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001666_hash = {
+	.next	= NULL,
+	.name	= "nfs_map_name_to_uid",
+	.file	= "include/linux/nfs_idmap.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001667_hash = {
+	.next	= NULL,
+	.name	= "test_iso_queue",
+	.file	= "drivers/usb/misc/usbtest.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001668_hash = {
+	.next	= NULL,
+	.name	= "agp_allocate_memory_wrap",
+	.file	= "drivers/char/agp/frontend.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001669_hash = {
+	.next	= NULL,
+	.name	= "alloc_irq_cpu_rmap",
+	.file	= "include/linux/cpu_rmap.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001670_hash = {
+	.next	= NULL,
+	.name	= "alloc_ring",
+	.file	= "drivers/net/ethernet/chelsio/cxgb4/sge.c",
+	.param2	= 1,
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001672_hash = {
+	.next	= &_001124_hash,
+	.name	= "atomic_counters_read",
+	.file	= "drivers/infiniband/hw/ipath/ipath_fs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001673_hash = {
+	.next	= NULL,
+	.name	= "atomic_stats_read",
+	.file	= "drivers/infiniband/hw/ipath/ipath_fs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001674_hash = {
+	.next	= NULL,
+	.name	= "c4iw_init_resource_fifo",
+	.file	= "drivers/infiniband/hw/cxgb4/resource.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001675_hash = {
+	.next	= NULL,
+	.name	= "c4iw_init_resource_fifo_random",
+	.file	= "drivers/infiniband/hw/cxgb4/resource.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001676_hash = {
+	.next	= NULL,
+	.name	= "compat_do_arpt_set_ctl",
+	.file	= "net/ipv4/netfilter/arp_tables.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001677_hash = {
+	.next	= NULL,
+	.name	= "compat_do_ip6t_set_ctl",
+	.file	= "net/ipv6/netfilter/ip6_tables.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001678_hash = {
+	.next	= NULL,
+	.name	= "compat_do_ipt_set_ctl",
+	.file	= "net/ipv4/netfilter/ip_tables.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001679_hash = {
+	.next	= NULL,
+	.name	= "cxio_init_resource_fifo",
+	.file	= "drivers/infiniband/hw/cxgb3/cxio_resource.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001680_hash = {
+	.next	= NULL,
+	.name	= "cxio_init_resource_fifo_random",
+	.file	= "drivers/infiniband/hw/cxgb3/cxio_resource.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001681_hash = {
+	.next	= NULL,
+	.name	= "dev_counters_read",
+	.file	= "drivers/infiniband/hw/qib/qib_fs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001682_hash = {
+	.next	= NULL,
+	.name	= "dev_names_read",
+	.file	= "drivers/infiniband/hw/qib/qib_fs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001683_hash = {
+	.next	= &_001468_hash,
+	.name	= "do_arpt_set_ctl",
+	.file	= "net/ipv4/netfilter/arp_tables.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001684_hash = {
+	.next	= NULL,
+	.name	= "do_ip6t_set_ctl",
+	.file	= "net/ipv6/netfilter/ip6_tables.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001685_hash = {
+	.next	= NULL,
+	.name	= "do_ipt_set_ctl",
+	.file	= "net/ipv4/netfilter/ip_tables.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001686_hash = {
+	.next	= NULL,
+	.name	= "drbd_bm_resize",
+	.file	= "drivers/block/drbd/drbd_bitmap.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001687_hash = {
+	.next	= NULL,
+	.name	= "driver_names_read",
+	.file	= "drivers/infiniband/hw/qib/qib_fs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001688_hash = {
+	.next	= NULL,
+	.name	= "driver_stats_read",
+	.file	= "drivers/infiniband/hw/qib/qib_fs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001689_hash = {
+	.next	= NULL,
+	.name	= "flash_read",
+	.file	= "drivers/infiniband/hw/qib/qib_fs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001690_hash = {
+	.next	= NULL,
+	.name	= "flash_read",
+	.file	= "drivers/infiniband/hw/ipath/ipath_fs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001691_hash = {
+	.next	= NULL,
+	.name	= "flash_write",
+	.file	= "drivers/infiniband/hw/qib/qib_fs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001692_hash = {
+	.next	= NULL,
+	.name	= "flash_write",
+	.file	= "drivers/infiniband/hw/ipath/ipath_fs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001693_hash = {
+	.next	= NULL,
+	.name	= "ghash_async_setkey",
+	.file	= "arch/x86/crypto/ghash-clmulni-intel_glue.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001694_hash = {
+	.next	= NULL,
+	.name	= "handle_eviocgbit",
+	.file	= "drivers/input/evdev.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001695_hash = {
+	.next	= NULL,
+	.name	= "hid_parse_report",
+	.file	= "include/linux/hid.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001696_hash = {
+	.next	= NULL,
+	.name	= "ipath_get_base_info",
+	.file	= "drivers/infiniband/hw/ipath/ipath_file_ops.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001697_hash = {
+	.next	= NULL,
+	.name	= "options_write",
+	.file	= "drivers/misc/sgi-gru/gruprocfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001698_hash = {
+	.next	= NULL,
+	.name	= "portcntrs_1_read",
+	.file	= "drivers/infiniband/hw/qib/qib_fs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001699_hash = {
+	.next	= NULL,
+	.name	= "portcntrs_2_read",
+	.file	= "drivers/infiniband/hw/qib/qib_fs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001700_hash = {
+	.next	= NULL,
+	.name	= "portnames_read",
+	.file	= "drivers/infiniband/hw/qib/qib_fs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001701_hash = {
+	.next	= NULL,
+	.name	= "qib_alloc_devdata",
+	.file	= "drivers/infiniband/hw/qib/qib_init.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001702_hash = {
+	.next	= NULL,
+	.name	= "qib_diag_write",
+	.file	= "drivers/infiniband/hw/qib/qib_diag.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001703_hash = {
+	.next	= NULL,
+	.name	= "qib_get_base_info",
+	.file	= "drivers/infiniband/hw/qib/qib_file_ops.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001704_hash = {
+	.next	= NULL,
+	.name	= "qsfp_1_read",
+	.file	= "drivers/infiniband/hw/qib/qib_fs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001705_hash = {
+	.next	= NULL,
+	.name	= "qsfp_2_read",
+	.file	= "drivers/infiniband/hw/qib/qib_fs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001706_hash = {
+	.next	= NULL,
+	.name	= "rfc4106_set_key",
+	.file	= "arch/x86/crypto/aesni-intel_glue.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001707_hash = {
+	.next	= &_000258_hash,
+	.name	= "stats_read_ul",
+	.file	= "drivers/idle/i7300_idle.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001708_hash = {
+	.next	= NULL,
+	.name	= "xpc_kmalloc_cacheline_aligned",
+	.file	= "drivers/misc/sgi-xp/xpc_partition.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001709_hash = {
+	.next	= NULL,
+	.name	= "xpc_kzalloc_cacheline_aligned",
+	.file	= "drivers/misc/sgi-xp/xpc_main.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001710_hash = {
+	.next	= NULL,
+	.name	= "c4iw_init_resource",
+	.file	= "drivers/infiniband/hw/cxgb4/resource.c",
+	.param2	= 1,
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001712_hash = {
+	.next	= NULL,
+	.name	= "cxio_hal_init_resource",
+	.file	= "drivers/infiniband/hw/cxgb3/cxio_resource.c",
+	.param2	= 1,
+	.param7	= 1,
+	.param6	= 1,
+};
+
+struct size_overflow_hash _001715_hash = {
+	.next	= &_000734_hash,
+	.name	= "cxio_hal_init_rhdl_resource",
+	.file	= "drivers/infiniband/hw/cxgb3/cxio_resource.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001716_hash = {
+	.next	= NULL,
+	.name	= "amthi_read",
+	.file	= "drivers/staging/mei/iorw.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001717_hash = {
+	.next	= NULL,
+	.name	= "bcm_char_read",
+	.file	= "drivers/staging/bcm/Bcmchar.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001718_hash = {
+	.next	= NULL,
+	.name	= "BcmCopySection",
+	.file	= "drivers/staging/bcm/nvm.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001719_hash = {
+	.next	= NULL,
+	.name	= "buffer_from_user",
+	.file	= "drivers/staging/vme/devices/vme_user.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001720_hash = {
+	.next	= NULL,
+	.name	= "buffer_to_user",
+	.file	= "drivers/staging/vme/devices/vme_user.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001721_hash = {
+	.next	= NULL,
+	.name	= "capabilities_read",
+	.file	= "drivers/xen/xenfs/super.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001722_hash = {
+	.next	= NULL,
+	.name	= "chd_dec_fetch_cdata",
+	.file	= "drivers/staging/crystalhd/crystalhd_lnx.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001723_hash = {
+	.next	= NULL,
+	.name	= "create_bounce_buffer",
+	.file	= "drivers/staging/hv/storvsc_drv.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001724_hash = {
+	.next	= NULL,
+	.name	= "crystalhd_create_dio_pool",
+	.file	= "drivers/staging/crystalhd/crystalhd_misc.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001725_hash = {
+	.next	= NULL,
+	.name	= "do_read_log_to_user",
+	.file	= "drivers/staging/android/logger.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001726_hash = {
+	.next	= NULL,
+	.name	= "do_write_log_from_user",
+	.file	= "drivers/staging/android/logger.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001727_hash = {
+	.next	= NULL,
+	.name	= "dt3155_read",
+	.file	= "drivers/staging/media/dt3155v4l/dt3155v4l.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001728_hash = {
+	.next	= NULL,
+	.name	= "easycap_alsa_vmalloc",
+	.file	= "drivers/staging/media/easycap/easycap_sound.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001729_hash = {
+	.next	= NULL,
+	.name	= "evm_read_key",
+	.file	= "security/integrity/evm/evm_secfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001730_hash = {
+	.next	= NULL,
+	.name	= "evm_write_key",
+	.file	= "security/integrity/evm/evm_secfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001731_hash = {
+	.next	= NULL,
+	.name	= "evtchn_read",
+	.file	= "drivers/xen/evtchn.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001732_hash = {
+	.next	= NULL,
+	.name	= "gather_array",
+	.file	= "drivers/xen/privcmd.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001733_hash = {
+	.next	= NULL,
+	.name	= "gnttab_map",
+	.file	= "drivers/xen/grant-table.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001734_hash = {
+	.next	= NULL,
+	.name	= "iio_read_first_n_kfifo",
+	.file	= "drivers/staging/iio/kfifo_buf.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001735_hash = {
+	.next	= NULL,
+	.name	= "iio_read_first_n_sw_rb",
+	.file	= "drivers/staging/iio/ring_sw.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001736_hash = {
+	.next	= NULL,
+	.name	= "keymap_store",
+	.file	= "drivers/staging/speakup/kobjects.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001737_hash = {
+	.next	= NULL,
+	.name	= "line6_dumpreq_initbuf",
+	.file	= "drivers/staging/line6/dumprequest.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001738_hash = {
+	.next	= NULL,
+	.name	= "lirc_write",
+	.file	= "drivers/staging/media/lirc/lirc_parallel.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001739_hash = {
+	.next	= NULL,
+	.name	= "lirc_write",
+	.file	= "drivers/staging/media/lirc/lirc_sir.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001740_hash = {
+	.next	= &_000815_hash,
+	.name	= "lirc_write",
+	.file	= "drivers/staging/media/lirc/lirc_serial.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001741_hash = {
+	.next	= &_001021_hash,
+	.name	= "_malloc",
+	.file	= "drivers/staging/rtl8712/osdep_service.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001742_hash = {
+	.next	= NULL,
+	.name	= "mei_read",
+	.file	= "drivers/staging/mei/main.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001743_hash = {
+	.next	= NULL,
+	.name	= "mei_write",
+	.file	= "drivers/staging/mei/main.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001744_hash = {
+	.next	= NULL,
+	.name	= "msg_set",
+	.file	= "drivers/staging/speakup/i18n.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001745_hash = {
+	.next	= NULL,
+	.name	= "OS_kmalloc",
+	.file	= "drivers/staging/cxt1e1/sbecom_inline_linux.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001746_hash = {
+	.next	= NULL,
+	.name	= "queue_reply",
+	.file	= "drivers/xen/xenbus/xenbus_dev_frontend.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001747_hash = {
+	.next	= &_000841_hash,
+	.name	= "resource_from_user",
+	.file	= "drivers/staging/vme/devices/vme_user.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001748_hash = {
+	.next	= NULL,
+	.name	= "sca3000_read_first_n_hw_rb",
+	.file	= "drivers/staging/iio/accel/sca3000_ring.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001749_hash = {
+	.next	= NULL,
+	.name	= "sep_lock_user_pages",
+	.file	= "drivers/staging/sep/sep_driver.c",
+	.param2	= 1,
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001751_hash = {
+	.next	= NULL,
+	.name	= "sep_prepare_input_output_dma_table_in_dcb",
+	.file	= "drivers/staging/sep/sep_driver.c",
+	.param4	= 1,
+	.param5	= 1,
+	.param2	= 1,
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001753_hash = {
+	.next	= NULL,
+	.name	= "split",
+	.file	= "drivers/xen/xenbus/xenbus_xs.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001754_hash = {
+	.next	= NULL,
+	.name	= "storvsc_connect_to_vsp",
+	.file	= "drivers/staging/hv/storvsc_drv.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001755_hash = {
+	.next	= NULL,
+	.name	= "u32_array_read",
+	.file	= "arch/x86/xen/debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001756_hash = {
+	.next	= NULL,
+	.name	= "ValidateDSDParamsChecksum",
+	.file	= "drivers/staging/bcm/led_control.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001757_hash = {
+	.next	= NULL,
+	.name	= "vfd_write",
+	.file	= "drivers/staging/media/lirc/lirc_sasem.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001758_hash = {
+	.next	= NULL,
+	.name	= "vfd_write",
+	.file	= "drivers/staging/media/lirc/lirc_imon.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001759_hash = {
+	.next	= NULL,
+	.name	= "Wb35Reg_BurstWrite",
+	.file	= "drivers/staging/winbond/wb35reg.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001760_hash = {
+	.next	= NULL,
+	.name	= "xenbus_file_write",
+	.file	= "drivers/xen/xenbus/xenbus_dev_frontend.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001761_hash = {
+	.next	= NULL,
+	.name	= "xsd_read",
+	.file	= "drivers/xen/xenfs/xenstored.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001762_hash = {
+	.next	= NULL,
+	.name	= "line6_dumpreq_init",
+	.file	= "drivers/staging/line6/dumprequest.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001763_hash = {
+	.next	= NULL,
+	.name	= "r8712_usbctrl_vendorreq",
+	.file	= "drivers/staging/rtl8712/usb_ops_linux.c",
+	.param6	= 1,
+};
+
+struct size_overflow_hash _001764_hash = {
+	.next	= NULL,
+	.name	= "r871x_set_wpa_ie",
+	.file	= "drivers/staging/rtl8712/rtl871x_ioctl_linux.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001765_hash = {
+	.next	= NULL,
+	.name	= "sep_prepare_input_dma_table",
+	.file	= "drivers/staging/sep/sep_driver.c",
+	.param2	= 1,
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001767_hash = {
+	.next	= NULL,
+	.name	= "sep_prepare_input_output_dma_table",
+	.file	= "drivers/staging/sep/sep_driver.c",
+	.param2	= 1,
+	.param4	= 1,
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001770_hash = {
+	.next	= NULL,
+	.name	= "vme_user_write",
+	.file	= "drivers/staging/vme/devices/vme_user.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001771_hash = {
+	.next	= NULL,
+	.name	= "alloc_ebda_hpc",
+	.file	= "drivers/pci/hotplug/ibmphp_ebda.c",
+	.param1	= 1,
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001772_hash = {
+	.next	= NULL,
+	.name	= "alloc_apertures",
+	.file	= "include/linux/fb.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001773_hash = {
+	.next	= NULL,
+	.name	= "bin_uuid",
+	.file	= "kernel/sysctl_binary.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001774_hash = {
+	.next	= &_000640_hash,
+	.name	= "__copy_from_user_inatomic_nocache",
+	.file	= "arch/x86/include/asm/uaccess_64.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001775_hash = {
+	.next	= NULL,
+	.name	= "do_dmabuf_dirty_sou",
+	.file	= "drivers/gpu/drm/vmwgfx/vmwgfx_kms.c",
+	.param7	= 1,
+};
+
+struct size_overflow_hash _001776_hash = {
+	.next	= NULL,
+	.name	= "do_surface_dirty_sou",
+	.file	= "drivers/gpu/drm/vmwgfx/vmwgfx_kms.c",
+	.param7	= 1,
+};
+
+struct size_overflow_hash _001777_hash = {
+	.next	= NULL,
+	.name	= "drm_agp_bind_pages",
+	.file	= "drivers/gpu/drm/drm_agpsupport.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001778_hash = {
+	.next	= NULL,
+	.name	= "drm_calloc_large",
+	.file	= "include/drm/drm_mem_util.h",
+	.param1	= 1,
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001780_hash = {
+	.next	= NULL,
+	.name	= "drm_ht_create",
+	.file	= "drivers/gpu/drm/drm_hashtab.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001781_hash = {
+	.next	= NULL,
+	.name	= "drm_malloc_ab",
+	.file	= "include/drm/drm_mem_util.h",
+	.param1	= 1,
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001783_hash = {
+	.next	= NULL,
+	.name	= "drm_plane_init",
+	.file	= "drivers/gpu/drm/drm_crtc.c",
+	.param6	= 1,
+};
+
+struct size_overflow_hash _001784_hash = {
+	.next	= NULL,
+	.name	= "drm_vmalloc_dma",
+	.file	= "drivers/gpu/drm/drm_scatter.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001785_hash = {
+	.next	= NULL,
+	.name	= "fb_read",
+	.file	= "drivers/video/fbmem.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001786_hash = {
+	.next	= NULL,
+	.name	= "fb_write",
+	.file	= "drivers/video/fbmem.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001787_hash = {
+	.next	= NULL,
+	.name	= "framebuffer_alloc",
+	.file	= "include/linux/fb.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001788_hash = {
+	.next	= NULL,
+	.name	= "i915_cache_sharing_read",
+	.file	= "drivers/gpu/drm/i915/i915_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001789_hash = {
+	.next	= NULL,
+	.name	= "i915_cache_sharing_write",
+	.file	= "drivers/gpu/drm/i915/i915_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001790_hash = {
+	.next	= NULL,
+	.name	= "i915_max_freq_read",
+	.file	= "drivers/gpu/drm/i915/i915_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001791_hash = {
+	.next	= NULL,
+	.name	= "i915_max_freq_write",
+	.file	= "drivers/gpu/drm/i915/i915_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001792_hash = {
+	.next	= NULL,
+	.name	= "i915_wedged_read",
+	.file	= "drivers/gpu/drm/i915/i915_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001793_hash = {
+	.next	= NULL,
+	.name	= "i915_wedged_write",
+	.file	= "drivers/gpu/drm/i915/i915_debugfs.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001794_hash = {
+	.next	= NULL,
+	.name	= "__module_alloc",
+	.file	= "arch/x86/kernel/module.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001795_hash = {
+	.next	= NULL,
+	.name	= "module_alloc_update_bounds_rw",
+	.file	= "kernel/module.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001796_hash = {
+	.next	= NULL,
+	.name	= "module_alloc_update_bounds_rx",
+	.file	= "kernel/module.c",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001797_hash = {
+	.next	= NULL,
+	.name	= "p9_client_read",
+	.file	= "include/net/9p/client.h",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001798_hash = {
+	.next	= NULL,
+	.name	= "probe_kernel_write",
+	.file	= "include/linux/uaccess.h",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001799_hash = {
+	.next	= NULL,
+	.name	= "sched_feat_write",
+	.file	= "kernel/sched/core.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001800_hash = {
+	.next	= NULL,
+	.name	= "tstats_write",
+	.file	= "kernel/time/timer_stats.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001801_hash = {
+	.next	= NULL,
+	.name	= "ttm_bo_fbdev_io",
+	.file	= "drivers/gpu/drm/ttm/ttm_bo_vm.c",
+	.param4	= 1,
+};
+
+struct size_overflow_hash _001802_hash = {
+	.next	= NULL,
+	.name	= "ttm_bo_io",
+	.file	= "drivers/gpu/drm/ttm/ttm_bo_vm.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001803_hash = {
+	.next	= NULL,
+	.name	= "ttm_dma_page_pool_free",
+	.file	= "drivers/gpu/drm/ttm/ttm_page_alloc_dma.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001804_hash = {
+	.next	= NULL,
+	.name	= "ttm_page_pool_free",
+	.file	= "drivers/gpu/drm/ttm/ttm_page_alloc.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001805_hash = {
+	.next	= NULL,
+	.name	= "vmw_execbuf_process",
+	.file	= "drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c",
+	.param5	= 1,
+};
+
+struct size_overflow_hash _001806_hash = {
+	.next	= NULL,
+	.name	= "vmw_fifo_reserve",
+	.file	= "drivers/gpu/drm/vmwgfx/vmwgfx_fifo.c",
+	.param2	= 1,
+};
+
+struct size_overflow_hash _001807_hash = {
+	.next	= NULL,
+	.name	= "vmw_kms_present",
+	.file	= "drivers/gpu/drm/vmwgfx/vmwgfx_kms.c",
+	.param9	= 1,
+};
+
+struct size_overflow_hash _001808_hash = {
+	.next	= NULL,
+	.name	= "vmw_kms_readback",
+	.file	= "drivers/gpu/drm/vmwgfx/vmwgfx_kms.c",
+	.param6	= 1,
+};
+
+struct size_overflow_hash _001809_hash = {
+	.next	= NULL,
+	.name	= "acpi_system_write_alarm",
+	.file	= "drivers/acpi/proc.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash _001810_hash = {
+	.next	= NULL,
+	.name	= "kmalloc",
+	.file	= "include/linux/slab_def.h",
+	.param1	= 1,
+};
+
+struct size_overflow_hash _001811_hash = {
+	.next	= NULL,
+	.name	= "slabinfo_write",
+	.file	= "mm/slab.c",
+	.param3	= 1,
+};
+
+struct size_overflow_hash *size_overflow_hash[65536] = {
+	[56878]	= &_000001_hash,
+	[11151]	= &_000002_hash,
+	[17854]	= &_000003_hash,
+	[4132]	= &_000004_hash,
+	[39070]	= &_000005_hash,
+	[35447]	= &_000007_hash,
+	[47830]	= &_000008_hash,
+	[65254]	= &_000009_hash,
+	[17521]	= &_000011_hash,
+	[41425]	= &_000012_hash,
+	[5785]	= &_000013_hash,
+	[19960]	= &_000014_hash,
+	[26729]	= &_000015_hash,
+	[7954]	= &_000016_hash,
+	[22403]	= &_000017_hash,
+	[23258]	= &_000018_hash,
+	[55695]	= &_000019_hash,
+	[38964]	= &_000020_hash,
+	[64250]	= &_000021_hash,
+	[31825]	= &_000022_hash,
+	[47446]	= &_000023_hash,
+	[61521]	= &_000024_hash,
+	[64227]	= &_000025_hash,
+	[53378]	= &_000026_hash,
+	[8885]	= &_000027_hash,
+	[62101]	= &_000028_hash,
+	[18152]	= &_000029_hash,
+	[37525]	= &_000030_hash,
+	[25827]	= &_000031_hash,
+	[1169]	= &_000032_hash,
+	[11925]	= &_000033_hash,
+	[20558]	= &_000034_hash,
+	[44019]	= &_000035_hash,
+	[21909]	= &_000036_hash,
+	[63679]	= &_000037_hash,
+	[39450]	= &_000038_hash,
+	[25085]	= &_000039_hash,
+	[17830]	= &_000040_hash,
+	[14329]	= &_000041_hash,
+	[31235]	= &_000042_hash,
+	[48207]	= &_000043_hash,
+	[34918]	= &_000044_hash,
+	[46839]	= &_000045_hash,
+	[57930]	= &_000046_hash,
+	[41364]	= &_000047_hash,
+	[17581]	= &_000048_hash,
+	[45922]	= &_000049_hash,
+	[49567]	= &_000050_hash,
+	[18248]	= &_000051_hash,
+	[25528]	= &_000052_hash,
+	[61874]	= &_000053_hash,
+	[22591]	= &_000054_hash,
+	[48456]	= &_000055_hash,
+	[8743]	= &_000056_hash,
+	[39131]	= &_000057_hash,
+	[48328]	= &_000058_hash,
+	[47136]	= &_000059_hash,
+	[6358]	= &_000060_hash,
+	[12252]	= &_000061_hash,
+	[49340]	= &_000062_hash,
+	[45875]	= &_000063_hash,
+	[52182]	= &_000065_hash,
+	[31149]	= &_000067_hash,
+	[20455]	= &_000068_hash,
+	[19917]	= &_000070_hash,
+	[64771]	= &_000071_hash,
+	[25140]	= &_000072_hash,
+	[34097]	= &_000073_hash,
+	[58131]	= &_000074_hash,
+	[65311]	= &_000075_hash,
+	[60609]	= &_000076_hash,
+	[1917]	= &_000077_hash,
+	[15337]	= &_000078_hash,
+	[4732]	= &_000079_hash,
+	[38783]	= &_000080_hash,
+	[37249]	= &_000081_hash,
+	[9234]	= &_000082_hash,
+	[33309]	= &_000083_hash,
+	[22389]	= &_000084_hash,
+	[56319]	= &_000085_hash,
+	[21496]	= &_000086_hash,
+	[8163]	= &_000087_hash,
+	[58766]	= &_000088_hash,
+	[21048]	= &_000089_hash,
+	[51221]	= &_000090_hash,
+	[21498]	= &_000091_hash,
+	[42627]	= &_000092_hash,
+	[53059]	= &_000094_hash,
+	[52870]	= &_000095_hash,
+	[1567]	= &_000096_hash,
+	[38330]	= &_000097_hash,
+	[30892]	= &_000098_hash,
+	[16927]	= &_000099_hash,
+	[16461]	= &_000100_hash,
+	[5634]	= &_000101_hash,
+	[16496]	= &_000103_hash,
+	[40012]	= &_000104_hash,
+	[46014]	= &_000105_hash,
+	[39600]	= &_000106_hash,
+	[7435]	= &_000107_hash,
+	[13332]	= &_000109_hash,
+	[36665]	= &_000110_hash,
+	[12413]	= &_000111_hash,
+	[27279]	= &_000112_hash,
+	[44774]	= &_000113_hash,
+	[14479]	= &_000114_hash,
+	[32447]	= &_000115_hash,
+	[15439]	= &_000116_hash,
+	[17932]	= &_000117_hash,
+	[26096]	= &_000118_hash,
+	[50814]	= &_000119_hash,
+	[22598]	= &_000120_hash,
+	[48287]	= &_000121_hash,
+	[15611]	= &_000122_hash,
+	[13414]	= &_000123_hash,
+	[40371]	= &_000124_hash,
+	[284]	= &_000125_hash,
+	[6293]	= &_000127_hash,
+	[60587]	= &_000128_hash,
+	[8181]	= &_000129_hash,
+	[27451]	= &_000130_hash,
+	[29259]	= &_000131_hash,
+	[41172]	= &_000132_hash,
+	[3315]	= &_000133_hash,
+	[37550]	= &_000134_hash,
+	[40395]	= &_000135_hash,
+	[24124]	= &_000136_hash,
+	[63535]	= &_000137_hash,
+	[14981]	= &_000138_hash,
+	[52008]	= &_000139_hash,
+	[22091]	= &_000140_hash,
+	[64800]	= &_000141_hash,
+	[14919]	= &_000142_hash,
+	[60340]	= &_000143_hash,
+	[34205]	= &_000145_hash,
+	[65246]	= &_000146_hash,
+	[1299]	= &_000147_hash,
+	[33165]	= &_000148_hash,
+	[22394]	= &_000149_hash,
+	[49562]	= &_000150_hash,
+	[56881]	= &_000151_hash,
+	[13870]	= &_000152_hash,
+	[65074]	= &_000153_hash,
+	[11553]	= &_000154_hash,
+	[43222]	= &_000155_hash,
+	[17984]	= &_000156_hash,
+	[26811]	= &_000157_hash,
+	[30848]	= &_000158_hash,
+	[15627]	= &_000159_hash,
+	[43101]	= &_000160_hash,
+	[4082]	= &_000161_hash,
+	[43692]	= &_000162_hash,
+	[21622]	= &_000163_hash,
+	[50734]	= &_000164_hash,
+	[803]	= &_000166_hash,
+	[64674]	= &_000168_hash,
+	[57538]	= &_000170_hash,
+	[42442]	= &_000171_hash,
+	[23031]	= &_000172_hash,
+	[40663]	= &_000173_hash,
+	[51180]	= &_000174_hash,
+	[24173]	= &_000175_hash,
+	[9286]	= &_000176_hash,
+	[49517]	= &_000177_hash,
+	[34878]	= &_000180_hash,
+	[22819]	= &_000181_hash,
+	[64314]	= &_000182_hash,
+	[20494]	= &_000183_hash,
+	[9483]	= &_000184_hash,
+	[26518]	= &_000185_hash,
+	[44651]	= &_000186_hash,
+	[1188]	= &_000187_hash,
+	[36031]	= &_000188_hash,
+	[33469]	= &_000189_hash,
+	[19672]	= &_000190_hash,
+	[3216]	= &_000191_hash,
+	[25071]	= &_000192_hash,
+	[11744]	= &_000194_hash,
+	[2358]	= &_000196_hash,
+	[10146]	= &_000198_hash,
+	[58709]	= &_000199_hash,
+	[64773]	= &_000200_hash,
+	[6159]	= &_000201_hash,
+	[28617]	= &_000202_hash,
+	[61067]	= &_000203_hash,
+	[12884]	= &_000204_hash,
+	[37308]	= &_000205_hash,
+	[59973]	= &_000206_hash,
+	[35895]	= &_000207_hash,
+	[24951]	= &_000208_hash,
+	[3070]	= &_000209_hash,
+	[61023]	= &_000210_hash,
+	[45702]	= &_000211_hash,
+	[5533]	= &_000212_hash,
+	[29186]	= &_000213_hash,
+	[26311]	= &_000214_hash,
+	[40182]	= &_000215_hash,
+	[50505]	= &_000216_hash,
+	[59061]	= &_000217_hash,
+	[27511]	= &_000218_hash,
+	[63286]	= &_000219_hash,
+	[6678]	= &_000220_hash,
+	[23065]	= &_000222_hash,
+	[18156]	= &_000223_hash,
+	[53757]	= &_000224_hash,
+	[53720]	= &_000225_hash,
+	[50241]	= &_000226_hash,
+	[22498]	= &_000227_hash,
+	[10991]	= &_000228_hash,
+	[40026]	= &_000229_hash,
+	[19995]	= &_000230_hash,
+	[30445]	= &_000231_hash,
+	[57691]	= &_000232_hash,
+	[23150]	= &_000233_hash,
+	[9960]	= &_000234_hash,
+	[8736]	= &_000235_hash,
+	[23750]	= &_000237_hash,
+	[18393]	= &_000238_hash,
+	[28541]	= &_000240_hash,
+	[59944]	= &_000241_hash,
+	[35042]	= &_000242_hash,
+	[63488]	= &_000243_hash,
+	[27286]	= &_000244_hash,
+	[46922]	= &_000245_hash,
+	[11860]	= &_000246_hash,
+	[52928]	= &_000247_hash,
+	[46714]	= &_000248_hash,
+	[57313]	= &_000249_hash,
+	[61978]	= &_000250_hash,
+	[61063]	= &_000251_hash,
+	[22271]	= &_000252_hash,
+	[4214]	= &_000253_hash,
+	[46247]	= &_000254_hash,
+	[33246]	= &_000255_hash,
+	[58325]	= &_000257_hash,
+	[47399]	= &_000259_hash,
+	[34963]	= &_000260_hash,
+	[21221]	= &_000261_hash,
+	[32211]	= &_000262_hash,
+	[20854]	= &_000263_hash,
+	[49351]	= &_000264_hash,
+	[52341]	= &_000265_hash,
+	[53533]	= &_000266_hash,
+	[52267]	= &_000267_hash,
+	[46753]	= &_000268_hash,
+	[2115]	= &_000269_hash,
+	[44017]	= &_000271_hash,
+	[13495]	= &_000272_hash,
+	[12988]	= &_000273_hash,
+	[55227]	= &_000274_hash,
+	[47762]	= &_000276_hash,
+	[17613]	= &_000277_hash,
+	[52037]	= &_000278_hash,
+	[5994]	= &_000279_hash,
+	[46818]	= &_000280_hash,
+	[13467]	= &_000281_hash,
+	[61848]	= &_000282_hash,
+	[43082]	= &_000284_hash,
+	[55732]	= &_000286_hash,
+	[2543]	= &_000287_hash,
+	[51694]	= &_000288_hash,
+	[18402]	= &_000289_hash,
+	[38282]	= &_000290_hash,
+	[5456]	= &_000291_hash,
+	[58261]	= &_000292_hash,
+	[24792]	= &_000293_hash,
+	[6422]	= &_000294_hash,
+	[63953]	= &_000295_hash,
+	[27384]	= &_000296_hash,
+	[47213]	= &_000297_hash,
+	[23548]	= &_000298_hash,
+	[47858]	= &_000299_hash,
+	[52501]	= &_000300_hash,
+	[12475]	= &_000301_hash,
+	[52921]	= &_000302_hash,
+	[19120]	= &_000303_hash,
+	[14355]	= &_000304_hash,
+	[30563]	= &_000305_hash,
+	[14942]	= &_000306_hash,
+	[30969]	= &_000307_hash,
+	[57776]	= &_000308_hash,
+	[21956]	= &_000309_hash,
+	[44050]	= &_000310_hash,
+	[2193]	= &_000311_hash,
+	[44818]	= &_000312_hash,
+	[50616]	= &_000313_hash,
+	[49299]	= &_000314_hash,
+	[2796]	= &_000315_hash,
+	[4190]	= &_000316_hash,
+	[11548]	= &_000317_hash,
+	[53798]	= &_000318_hash,
+	[60370]	= &_000319_hash,
+	[35863]	= &_000320_hash,
+	[54595]	= &_000322_hash,
+	[2808]	= &_000323_hash,
+	[24656]	= &_000324_hash,
+	[895]	= &_000325_hash,
+	[32809]	= &_000326_hash,
+	[55621]	= &_000327_hash,
+	[1733]	= &_000328_hash,
+	[36069]	= &_000330_hash,
+	[23714]	= &_000331_hash,
+	[26020]	= &_000332_hash,
+	[63875]	= &_000333_hash,
+	[58608]	= &_000334_hash,
+	[8919]	= &_000335_hash,
+	[23906]	= &_000336_hash,
+	[59497]	= &_000337_hash,
+	[34782]	= &_000338_hash,
+	[40998]	= &_000339_hash,
+	[33328]	= &_000340_hash,
+	[17866]	= &_000341_hash,
+	[38741]	= &_000342_hash,
+	[53939]	= &_000343_hash,
+	[14658]	= &_000344_hash,
+	[42465]	= &_000345_hash,
+	[49600]	= &_000346_hash,
+	[7391]	= &_000347_hash,
+	[43616]	= &_000348_hash,
+	[16775]	= &_000349_hash,
+	[41393]	= &_000350_hash,
+	[10532]	= &_000351_hash,
+	[50366]	= &_000352_hash,
+	[33324]	= &_000353_hash,
+	[38200]	= &_000354_hash,
+	[59315]	= &_000355_hash,
+	[33916]	= &_000356_hash,
+	[36593]	= &_000357_hash,
+	[63079]	= &_000358_hash,
+	[379]	= &_000359_hash,
+	[34248]	= &_000360_hash,
+	[27251]	= &_000361_hash,
+	[29460]	= &_000362_hash,
+	[7461]	= &_000363_hash,
+	[9870]	= &_000364_hash,
+	[44596]	= &_000365_hash,
+	[45157]	= &_000366_hash,
+	[55069]	= &_000367_hash,
+	[29452]	= &_000368_hash,
+	[54888]	= &_000369_hash,
+	[31885]	= &_000370_hash,
+	[20206]	= &_000371_hash,
+	[59852]	= &_000372_hash,
+	[20325]	= &_000373_hash,
+	[18488]	= &_000374_hash,
+	[22017]	= &_000375_hash,
+	[57485]	= &_000376_hash,
+	[49827]	= &_000377_hash,
+	[37770]	= &_000379_hash,
+	[52668]	= &_000380_hash,
+	[13724]	= &_000381_hash,
+	[59701]	= &_000382_hash,
+	[11954]	= &_000383_hash,
+	[9890]	= &_000384_hash,
+	[17684]	= &_000385_hash,
+	[18158]	= &_000386_hash,
+	[61318]	= &_000387_hash,
+	[2760]	= &_000388_hash,
+	[38444]	= &_000390_hash,
+	[55856]	= &_000392_hash,
+	[34762]	= &_000393_hash,
+	[48360]	= &_000394_hash,
+	[40885]	= &_000395_hash,
+	[36032]	= &_000396_hash,
+	[52057]	= &_000397_hash,
+	[12463]	= &_000398_hash,
+	[30616]	= &_000399_hash,
+	[38680]	= &_000400_hash,
+	[41742]	= &_000401_hash,
+	[50662]	= &_000402_hash,
+	[48440]	= &_000403_hash,
+	[34418]	= &_000404_hash,
+	[64275]	= &_000405_hash,
+	[12231]	= &_000406_hash,
+	[53530]	= &_000407_hash,
+	[54723]	= &_000408_hash,
+	[19490]	= &_000409_hash,
+	[11595]	= &_000410_hash,
+	[15277]	= &_000411_hash,
+	[4811]	= &_000412_hash,
+	[42017]	= &_000413_hash,
+	[17238]	= &_000414_hash,
+	[55439]	= &_000415_hash,
+	[45794]	= &_000416_hash,
+	[60027]	= &_000417_hash,
+	[3750]	= &_000418_hash,
+	[11091]	= &_000419_hash,
+	[32935]	= &_000420_hash,
+	[22809]	= &_000422_hash,
+	[60193]	= &_000423_hash,
+	[14396]	= &_000424_hash,
+	[18101]	= &_000425_hash,
+	[46395]	= &_000426_hash,
+	[24339]	= &_000427_hash,
+	[26065]	= &_000428_hash,
+	[43016]	= &_000429_hash,
+	[41996]	= &_000430_hash,
+	[7371]	= &_000431_hash,
+	[32968]	= &_000432_hash,
+	[53082]	= &_000433_hash,
+	[38798]	= &_000434_hash,
+	[12726]	= &_000435_hash,
+	[55018]	= &_000436_hash,
+	[26114]	= &_000437_hash,
+	[31697]	= &_000438_hash,
+	[21401]	= &_000441_hash,
+	[33193]	= &_000442_hash,
+	[52271]	= &_000443_hash,
+	[20847]	= &_000444_hash,
+	[30754]	= &_000445_hash,
+	[54440]	= &_000446_hash,
+	[22059]	= &_000447_hash,
+	[47566]	= &_000448_hash,
+	[22926]	= &_000449_hash,
+	[20788]	= &_000450_hash,
+	[18162]	= &_000451_hash,
+	[65006]	= &_000452_hash,
+	[11523]	= &_000453_hash,
+	[29207]	= &_000454_hash,
+	[18071]	= &_000455_hash,
+	[7601]	= &_000456_hash,
+	[12773]	= &_000457_hash,
+	[61543]	= &_000458_hash,
+	[5578]	= &_000460_hash,
+	[49050]	= &_000461_hash,
+	[51965]	= &_000462_hash,
+	[6807]	= &_000463_hash,
+	[22982]	= &_000464_hash,
+	[36769]	= &_000465_hash,
+	[53892]	= &_000466_hash,
+	[2547]	= &_000467_hash,
+	[53678]	= &_000468_hash,
+	[61439]	= &_000469_hash,
+	[31287]	= &_000470_hash,
+	[6125]	= &_000471_hash,
+	[57511]	= &_000472_hash,
+	[13001]	= &_000473_hash,
+	[62932]	= &_000474_hash,
+	[62284]	= &_000475_hash,
+	[9472]	= &_000476_hash,
+	[26260]	= &_000477_hash,
+	[63065]	= &_000478_hash,
+	[18949]	= &_000479_hash,
+	[29891]	= &_000481_hash,
+	[41916]	= &_000482_hash,
+	[40474]	= &_000483_hash,
+	[63551]	= &_000484_hash,
+	[36557]	= &_000485_hash,
+	[2994]	= &_000486_hash,
+	[5521]	= &_000487_hash,
+	[51016]	= &_000488_hash,
+	[7644]	= &_000489_hash,
+	[55103]	= &_000490_hash,
+	[11488]	= &_000491_hash,
+	[7184]	= &_000492_hash,
+	[36934]	= &_000493_hash,
+	[54855]	= &_000494_hash,
+	[63193]	= &_000495_hash,
+	[12369]	= &_000496_hash,
+	[15828]	= &_000497_hash,
+	[61322]	= &_000498_hash,
+	[5412]	= &_000499_hash,
+	[28089]	= &_000500_hash,
+	[64306]	= &_000502_hash,
+	[24071]	= &_000503_hash,
+	[50308]	= &_000504_hash,
+	[38790]	= &_000505_hash,
+	[9838]	= &_000506_hash,
+	[18983]	= &_000507_hash,
+	[9656]	= &_000508_hash,
+	[18950]	= &_000509_hash,
+	[59749]	= &_000510_hash,
+	[20465]	= &_000511_hash,
+	[4765]	= &_000512_hash,
+	[16169]	= &_000513_hash,
+	[6930]	= &_000514_hash,
+	[16926]	= &_000515_hash,
+	[35218]	= &_000516_hash,
+	[19956]	= &_000517_hash,
+	[55255]	= &_000518_hash,
+	[861]	= &_000519_hash,
+	[26574]	= &_000520_hash,
+	[26794]	= &_000521_hash,
+	[2133]	= &_000522_hash,
+	[44616]	= &_000523_hash,
+	[12840]	= &_000524_hash,
+	[60426]	= &_000525_hash,
+	[18133]	= &_000526_hash,
+	[30479]	= &_000527_hash,
+	[3219]	= &_000528_hash,
+	[36488]	= &_000529_hash,
+	[62043]	= &_000530_hash,
+	[21714]	= &_000532_hash,
+	[48007]	= &_000533_hash,
+	[49969]	= &_000534_hash,
+	[7701]	= &_000535_hash,
+	[11521]	= &_000536_hash,
+	[4269]	= &_000537_hash,
+	[37627]	= &_000539_hash,
+	[33555]	= &_000540_hash,
+	[25900]	= &_000541_hash,
+	[31709]	= &_000542_hash,
+	[44626]	= &_000544_hash,
+	[1679]	= &_000545_hash,
+	[18349]	= &_000546_hash,
+	[15338]	= &_000547_hash,
+	[57935]	= &_000548_hash,
+	[55850]	= &_000549_hash,
+	[36063]	= &_000550_hash,
+	[56674]	= &_000551_hash,
+	[21379]	= &_000552_hash,
+	[18507]	= &_000553_hash,
+	[55719]	= &_000554_hash,
+	[31210]	= &_000555_hash,
+	[36207]	= &_000556_hash,
+	[64180]	= &_000557_hash,
+	[41770]	= &_000558_hash,
+	[11600]	= &_000559_hash,
+	[36638]	= &_000560_hash,
+	[25576]	= &_000561_hash,
+	[7000]	= &_000562_hash,
+	[34187]	= &_000563_hash,
+	[58533]	= &_000564_hash,
+	[5083]	= &_000565_hash,
+	[62614]	= &_000566_hash,
+	[20085]	= &_000567_hash,
+	[1135]	= &_000568_hash,
+	[25613]	= &_000569_hash,
+	[9541]	= &_000570_hash,
+	[30577]	= &_000571_hash,
+	[35722]	= &_000572_hash,
+	[60407]	= &_000573_hash,
+	[29465]	= &_000574_hash,
+	[46891]	= &_000575_hash,
+	[43633]	= &_000576_hash,
+	[53743]	= &_000577_hash,
+	[16196]	= &_000578_hash,
+	[34425]	= &_000580_hash,
+	[9646]	= &_000581_hash,
+	[59756]	= &_000583_hash,
+	[45524]	= &_000584_hash,
+	[36702]	= &_000585_hash,
+	[36747]	= &_000586_hash,
+	[33643]	= &_000588_hash,
+	[29158]	= &_000589_hash,
+	[49662]	= &_000590_hash,
+	[51062]	= &_000591_hash,
+	[64755]	= &_000592_hash,
+	[4829]	= &_000594_hash,
+	[16413]	= &_000595_hash,
+	[36125]	= &_000596_hash,
+	[36293]	= &_000597_hash,
+	[39712]	= &_000598_hash,
+	[32160]	= &_000599_hash,
+	[22962]	= &_000600_hash,
+	[32001]	= &_000601_hash,
+	[35828]	= &_000602_hash,
+	[3106]	= &_000603_hash,
+	[34039]	= &_000604_hash,
+	[22393]	= &_000605_hash,
+	[3560]	= &_000606_hash,
+	[28195]	= &_000607_hash,
+	[2062]	= &_000608_hash,
+	[64001]	= &_000609_hash,
+	[42407]	= &_000610_hash,
+	[6253]	= &_000611_hash,
+	[58640]	= &_000612_hash,
+	[32195]	= &_000613_hash,
+	[26197]	= &_000614_hash,
+	[58003]	= &_000615_hash,
+	[21662]	= &_000616_hash,
+	[45750]	= &_000617_hash,
+	[25798]	= &_000618_hash,
+	[41052]	= &_000619_hash,
+	[14096]	= &_000620_hash,
+	[1439]	= &_000621_hash,
+	[29074]	= &_000622_hash,
+	[2376]	= &_000623_hash,
+	[24068]	= &_000625_hash,
+	[59519]	= &_000627_hash,
+	[9893]	= &_000628_hash,
+	[39979]	= &_000630_hash,
+	[41540]	= &_000631_hash,
+	[43200]	= &_000633_hash,
+	[33494]	= &_000634_hash,
+	[2028]	= &_000635_hash,
+	[27206]	= &_000636_hash,
+	[24302]	= &_000637_hash,
+	[38112]	= &_000638_hash,
+	[46538]	= &_000639_hash,
+	[35228]	= &_000641_hash,
+	[8339]	= &_000642_hash,
+	[45349]	= &_000643_hash,
+	[48404]	= &_000644_hash,
+	[37865]	= &_000645_hash,
+	[45763]	= &_000646_hash,
+	[62347]	= &_000647_hash,
+	[21644]	= &_000648_hash,
+	[53135]	= &_000649_hash,
+	[25095]	= &_000650_hash,
+	[11697]	= &_000651_hash,
+	[27003]	= &_000652_hash,
+	[32464]	= &_000653_hash,
+	[65339]	= &_000654_hash,
+	[44248]	= &_000655_hash,
+	[16]	= &_000656_hash,
+	[29933]	= &_000657_hash,
+	[34359]	= &_000658_hash,
+	[3154]	= &_000659_hash,
+	[59308]	= &_000660_hash,
+	[61661]	= &_000661_hash,
+	[23959]	= &_000662_hash,
+	[6724]	= &_000663_hash,
+	[54587]	= &_000664_hash,
+	[28479]	= &_000665_hash,
+	[56583]	= &_000666_hash,
+	[64644]	= &_000667_hash,
+	[23284]	= &_000668_hash,
+	[61655]	= &_000669_hash,
+	[20980]	= &_000670_hash,
+	[19794]	= &_000671_hash,
+	[30036]	= &_000672_hash,
+	[25649]	= &_000673_hash,
+	[47428]	= &_000674_hash,
+	[47737]	= &_000675_hash,
+	[8367]	= &_000676_hash,
+	[2987]	= &_000677_hash,
+	[50962]	= &_000678_hash,
+	[10760]	= &_000679_hash,
+	[31678]	= &_000680_hash,
+	[48558]	= &_000681_hash,
+	[2274]	= &_000682_hash,
+	[831]	= &_000683_hash,
+	[61833]	= &_000684_hash,
+	[56864]	= &_000685_hash,
+	[31040]	= &_000686_hash,
+	[22196]	= &_000687_hash,
+	[20076]	= &_000688_hash,
+	[52821]	= &_000689_hash,
+	[21896]	= &_000690_hash,
+	[49367]	= &_000691_hash,
+	[64731]	= &_000692_hash,
+	[37110]	= &_000693_hash,
+	[53694]	= &_000694_hash,
+	[6175]	= &_000695_hash,
+	[33048]	= &_000696_hash,
+	[34746]	= &_000697_hash,
+	[23777]	= &_000698_hash,
+	[53828]	= &_000699_hash,
+	[26539]	= &_000700_hash,
+	[42628]	= &_000701_hash,
+	[59115]	= &_000702_hash,
+	[4456]	= &_000703_hash,
+	[63619]	= &_000704_hash,
+	[47329]	= &_000705_hash,
+	[13534]	= &_000706_hash,
+	[36955]	= &_000707_hash,
+	[9841]	= &_000708_hash,
+	[19308]	= &_000709_hash,
+	[52439]	= &_000710_hash,
+	[24680]	= &_000711_hash,
+	[55652]	= &_000712_hash,
+	[7842]	= &_000713_hash,
+	[6500]	= &_000714_hash,
+	[33485]	= &_000715_hash,
+	[49920]	= &_000716_hash,
+	[50750]	= &_000717_hash,
+	[22318]	= &_000718_hash,
+	[44599]	= &_000719_hash,
+	[46403]	= &_000720_hash,
+	[44534]	= &_000721_hash,
+	[303]	= &_000722_hash,
+	[22960]	= &_000723_hash,
+	[10544]	= &_000724_hash,
+	[8236]	= &_000725_hash,
+	[21239]	= &_000726_hash,
+	[24712]	= &_000727_hash,
+	[37974]	= &_000728_hash,
+	[62082]	= &_000729_hash,
+	[57054]	= &_000730_hash,
+	[53265]	= &_000731_hash,
+	[52239]	= &_000732_hash,
+	[14753]	= &_000733_hash,
+	[60221]	= &_000736_hash,
+	[27142]	= &_000737_hash,
+	[14295]	= &_000738_hash,
+	[25923]	= &_000739_hash,
+	[29213]	= &_000740_hash,
+	[31865]	= &_000741_hash,
+	[4764]	= &_000742_hash,
+	[10574]	= &_000743_hash,
+	[55766]	= &_000744_hash,
+	[22483]	= &_000745_hash,
+	[61047]	= &_000746_hash,
+	[41044]	= &_000747_hash,
+	[58978]	= &_000748_hash,
+	[47578]	= &_000749_hash,
+	[7730]	= &_000750_hash,
+	[15904]	= &_000751_hash,
+	[25081]	= &_000752_hash,
+	[45743]	= &_000753_hash,
+	[58830]	= &_000754_hash,
+	[59081]	= &_000755_hash,
+	[47533]	= &_000756_hash,
+	[11305]	= &_000757_hash,
+	[29096]	= &_000758_hash,
+	[19749]	= &_000759_hash,
+	[56290]	= &_000760_hash,
+	[44963]	= &_000761_hash,
+	[30026]	= &_000762_hash,
+	[27694]	= &_000763_hash,
+	[8089]	= &_000764_hash,
+	[38583]	= &_000765_hash,
+	[1144]	= &_000766_hash,
+	[20939]	= &_000767_hash,
+	[22231]	= &_000768_hash,
+	[17486]	= &_000769_hash,
+	[51811]	= &_000770_hash,
+	[62746]	= &_000771_hash,
+	[19181]	= &_000772_hash,
+	[52661]	= &_000773_hash,
+	[51148]	= &_000774_hash,
+	[49864]	= &_000775_hash,
+	[37978]	= &_000776_hash,
+	[6280]	= &_000777_hash,
+	[12961]	= &_000778_hash,
+	[60541]	= &_000779_hash,
+	[37021]	= &_000780_hash,
+	[26028]	= &_000781_hash,
+	[41363]	= &_000782_hash,
+	[42016]	= &_000783_hash,
+	[58540]	= &_000784_hash,
+	[2326]	= &_000785_hash,
+	[60981]	= &_000786_hash,
+	[13313]	= &_000787_hash,
+	[44188]	= &_000788_hash,
+	[34638]	= &_000789_hash,
+	[20304]	= &_000790_hash,
+	[60975]	= &_000791_hash,
+	[12244]	= &_000792_hash,
+	[16266]	= &_000793_hash,
+	[3395]	= &_000794_hash,
+	[63321]	= &_000795_hash,
+	[20509]	= &_000796_hash,
+	[57365]	= &_000797_hash,
+	[47449]	= &_000798_hash,
+	[56693]	= &_000799_hash,
+	[33936]	= &_000800_hash,
+	[52548]	= &_000801_hash,
+	[18733]	= &_000802_hash,
+	[15560]	= &_000803_hash,
+	[13231]	= &_000804_hash,
+	[64518]	= &_000806_hash,
+	[54551]	= &_000807_hash,
+	[54359]	= &_000809_hash,
+	[46503]	= &_000810_hash,
+	[22258]	= &_000811_hash,
+	[39434]	= &_000812_hash,
+	[52887]	= &_000813_hash,
+	[3079]	= &_000814_hash,
+	[18813]	= &_000816_hash,
+	[47614]	= &_000817_hash,
+	[38186]	= &_000818_hash,
+	[57652]	= &_000819_hash,
+	[10078]	= &_000820_hash,
+	[17910]	= &_000821_hash,
+	[13567]	= &_000822_hash,
+	[21531]	= &_000823_hash,
+	[46135]	= &_000824_hash,
+	[10582]	= &_000825_hash,
+	[4662]	= &_000826_hash,
+	[17969]	= &_000827_hash,
+	[43943]	= &_000828_hash,
+	[46740]	= &_000829_hash,
+	[26716]	= &_000830_hash,
+	[58230]	= &_000831_hash,
+	[252]	= &_000832_hash,
+	[15704]	= &_000833_hash,
+	[59765]	= &_000834_hash,
+	[7322]	= &_000835_hash,
+	[43950]	= &_000836_hash,
+	[53093]	= &_000837_hash,
+	[21646]	= &_000838_hash,
+	[57063]	= &_000839_hash,
+	[17132]	= &_000840_hash,
+	[53922]	= &_000842_hash,
+	[49155]	= &_000843_hash,
+	[16356]	= &_000844_hash,
+	[60037]	= &_000845_hash,
+	[17299]	= &_000846_hash,
+	[25678]	= &_000847_hash,
+	[15494]	= &_000848_hash,
+	[15159]	= &_000849_hash,
+	[28442]	= &_000850_hash,
+	[3514]	= &_000851_hash,
+	[38151]	= &_000852_hash,
+	[4173]	= &_000853_hash,
+	[7258]	= &_000854_hash,
+	[65109]	= &_000855_hash,
+	[58827]	= &_000856_hash,
+	[33575]	= &_000857_hash,
+	[33078]	= &_000858_hash,
+	[47234]	= &_000859_hash,
+	[39193]	= &_000860_hash,
+	[10950]	= &_000861_hash,
+	[15613]	= &_000862_hash,
+	[16046]	= &_000863_hash,
+	[50172]	= &_000864_hash,
+	[26107]	= &_000865_hash,
+	[60543]	= &_000866_hash,
+	[56337]	= &_000867_hash,
+	[47626]	= &_000868_hash,
+	[24409]	= &_000869_hash,
+	[11732]	= &_000870_hash,
+	[30010]	= &_000871_hash,
+	[51480]	= &_000872_hash,
+	[28518]	= &_000873_hash,
+	[2061]	= &_000874_hash,
+	[10885]	= &_000875_hash,
+	[29517]	= &_000876_hash,
+	[45913]	= &_000877_hash,
+	[51774]	= &_000878_hash,
+	[62298]	= &_000879_hash,
+	[8892]	= &_000880_hash,
+	[64891]	= &_000881_hash,
+	[64537]	= &_000882_hash,
+	[38103]	= &_000883_hash,
+	[55518]	= &_000884_hash,
+	[27419]	= &_000885_hash,
+	[13869]	= &_000886_hash,
+	[53150]	= &_000887_hash,
+	[2884]	= &_000888_hash,
+	[10362]	= &_000889_hash,
+	[6961]	= &_000890_hash,
+	[56975]	= &_000891_hash,
+	[12508]	= &_000892_hash,
+	[54597]	= &_000893_hash,
+	[60499]	= &_000894_hash,
+	[50109]	= &_000895_hash,
+	[944]	= &_000896_hash,
+	[29229]	= &_000897_hash,
+	[37648]	= &_000898_hash,
+	[1568]	= &_000899_hash,
+	[61793]	= &_000900_hash,
+	[53395]	= &_000901_hash,
+	[5519]	= &_000902_hash,
+	[28637]	= &_000903_hash,
+	[53687]	= &_000904_hash,
+	[6783]	= &_000905_hash,
+	[43312]	= &_000906_hash,
+	[2373]	= &_000907_hash,
+	[33482]	= &_000908_hash,
+	[24886]	= &_000909_hash,
+	[48154]	= &_000910_hash,
+	[12838]	= &_000911_hash,
+	[47012]	= &_000912_hash,
+	[23691]	= &_000913_hash,
+	[37924]	= &_000914_hash,
+	[47346]	= &_000915_hash,
+	[5624]	= &_000916_hash,
+	[16842]	= &_000918_hash,
+	[60399]	= &_000919_hash,
+	[2312]	= &_000920_hash,
+	[59212]	= &_000921_hash,
+	[11923]	= &_000922_hash,
+	[10805]	= &_000923_hash,
+	[36577]	= &_000924_hash,
+	[60948]	= &_000925_hash,
+	[21711]	= &_000926_hash,
+	[54830]	= &_000927_hash,
+	[1822]	= &_000928_hash,
+	[44573]	= &_000929_hash,
+	[23805]	= &_000930_hash,
+	[46061]	= &_000931_hash,
+	[33996]	= &_000932_hash,
+	[40856]	= &_000933_hash,
+	[16299]	= &_000934_hash,
+	[63446]	= &_000935_hash,
+	[31205]	= &_000936_hash,
+	[33100]	= &_000937_hash,
+	[40843]	= &_000938_hash,
+	[23712]	= &_000939_hash,
+	[36962]	= &_000940_hash,
+	[9845]	= &_000942_hash,
+	[13738]	= &_000943_hash,
+	[58099]	= &_000944_hash,
+	[31869]	= &_000945_hash,
+	[63501]	= &_000946_hash,
+	[58188]	= &_000947_hash,
+	[51338]	= &_000948_hash,
+	[54999]	= &_000949_hash,
+	[2434]	= &_000950_hash,
+	[34958]	= &_000951_hash,
+	[41487]	= &_000952_hash,
+	[11941]	= &_000953_hash,
+	[56728]	= &_000954_hash,
+	[48150]	= &_000955_hash,
+	[13905]	= &_000956_hash,
+	[9054]	= &_000957_hash,
+	[10758]	= &_000958_hash,
+	[48056]	= &_000959_hash,
+	[24231]	= &_000960_hash,
+	[43748]	= &_000961_hash,
+	[24237]	= &_000962_hash,
+	[14899]	= &_000963_hash,
+	[38652]	= &_000964_hash,
+	[65013]	= &_000965_hash,
+	[16645]	= &_000967_hash,
+	[55031]	= &_000968_hash,
+	[23978]	= &_000969_hash,
+	[24208]	= &_000970_hash,
+	[18098]	= &_000971_hash,
+	[2303]	= &_000972_hash,
+	[3338]	= &_000973_hash,
+	[39219]	= &_000974_hash,
+	[18609]	= &_000976_hash,
+	[64412]	= &_000977_hash,
+	[16962]	= &_000978_hash,
+	[26346]	= &_000979_hash,
+	[39380]	= &_000980_hash,
+	[33020]	= &_000981_hash,
+	[22639]	= &_000982_hash,
+	[6453]	= &_000983_hash,
+	[58602]	= &_000984_hash,
+	[50920]	= &_000985_hash,
+	[56471]	= &_000987_hash,
+	[15378]	= &_000988_hash,
+	[3589]	= &_000989_hash,
+	[12558]	= &_000990_hash,
+	[3201]	= &_000991_hash,
+	[28175]	= &_000993_hash,
+	[43888]	= &_000995_hash,
+	[56010]	= &_000996_hash,
+	[32456]	= &_000997_hash,
+	[29036]	= &_000998_hash,
+	[32330]	= &_000999_hash,
+	[25603]	= &_001000_hash,
+	[17675]	= &_001001_hash,
+	[36271]	= &_001002_hash,
+	[49814]	= &_001003_hash,
+	[5693]	= &_001004_hash,
+	[51009]	= &_001005_hash,
+	[62835]	= &_001006_hash,
+	[27139]	= &_001007_hash,
+	[45155]	= &_001008_hash,
+	[17186]	= &_001009_hash,
+	[46734]	= &_001010_hash,
+	[61957]	= &_001011_hash,
+	[51389]	= &_001012_hash,
+	[23687]	= &_001013_hash,
+	[46825]	= &_001014_hash,
+	[52287]	= &_001016_hash,
+	[31408]	= &_001017_hash,
+	[5396]	= &_001018_hash,
+	[62247]	= &_001019_hash,
+	[7946]	= &_001020_hash,
+	[58210]	= &_001022_hash,
+	[15618]	= &_001023_hash,
+	[61225]	= &_001024_hash,
+	[13163]	= &_001025_hash,
+	[36882]	= &_001026_hash,
+	[8719]	= &_001027_hash,
+	[8539]	= &_001028_hash,
+	[27134]	= &_001029_hash,
+	[53335]	= &_001030_hash,
+	[30381]	= &_001031_hash,
+	[32336]	= &_001032_hash,
+	[32867]	= &_001033_hash,
+	[1238]	= &_001034_hash,
+	[8174]	= &_001035_hash,
+	[6368]	= &_001036_hash,
+	[29170]	= &_001037_hash,
+	[9687]	= &_001038_hash,
+	[61116]	= &_001039_hash,
+	[31681]	= &_001040_hash,
+	[22119]	= &_001041_hash,
+	[59885]	= &_001042_hash,
+	[47789]	= &_001043_hash,
+	[5796]	= &_001044_hash,
+	[43376]	= &_001045_hash,
+	[36706]	= &_001046_hash,
+	[47945]	= &_001047_hash,
+	[33208]	= &_001048_hash,
+	[55431]	= &_001049_hash,
+	[25291]	= &_001050_hash,
+	[58805]	= &_001051_hash,
+	[23708]	= &_001052_hash,
+	[29278]	= &_001053_hash,
+	[1272]	= &_001054_hash,
+	[10199]	= &_001055_hash,
+	[34666]	= &_001056_hash,
+	[49317]	= &_001057_hash,
+	[18604]	= &_001058_hash,
+	[42545]	= &_001059_hash,
+	[33157]	= &_001060_hash,
+	[53343]	= &_001061_hash,
+	[64842]	= &_001062_hash,
+	[61865]	= &_001063_hash,
+	[54010]	= &_001064_hash,
+	[64638]	= &_001065_hash,
+	[20480]	= &_001066_hash,
+	[23341]	= &_001067_hash,
+	[10350]	= &_001068_hash,
+	[30970]	= &_001069_hash,
+	[62360]	= &_001070_hash,
+	[52537]	= &_001071_hash,
+	[51386]	= &_001072_hash,
+	[48731]	= &_001073_hash,
+	[58061]	= &_001074_hash,
+	[40405]	= &_001075_hash,
+	[57198]	= &_001076_hash,
+	[19290]	= &_001077_hash,
+	[60403]	= &_001078_hash,
+	[2738]	= &_001079_hash,
+	[59721]	= &_001080_hash,
+	[24980]	= &_001081_hash,
+	[55896]	= &_001082_hash,
+	[57055]	= &_001083_hash,
+	[46010]	= &_001084_hash,
+	[712]	= &_001085_hash,
+	[37747]	= &_001086_hash,
+	[59996]	= &_001087_hash,
+	[45219]	= &_001088_hash,
+	[16917]	= &_001089_hash,
+	[7415]	= &_001090_hash,
+	[29576]	= &_001091_hash,
+	[13584]	= &_001092_hash,
+	[53364]	= &_001093_hash,
+	[14813]	= &_001094_hash,
+	[25543]	= &_001095_hash,
+	[29240]	= &_001096_hash,
+	[38748]	= &_001097_hash,
+	[42270]	= &_001098_hash,
+	[34848]	= &_001099_hash,
+	[46226]	= &_001100_hash,
+	[55526]	= &_001101_hash,
+	[48271]	= &_001102_hash,
+	[24658]	= &_001104_hash,
+	[46964]	= &_001105_hash,
+	[2637]	= &_001106_hash,
+	[55601]	= &_001107_hash,
+	[60275]	= &_001108_hash,
+	[52645]	= &_001109_hash,
+	[11712]	= &_001110_hash,
+	[51364]	= &_001111_hash,
+	[5106]	= &_001112_hash,
+	[24710]	= &_001113_hash,
+	[13101]	= &_001114_hash,
+	[46963]	= &_001115_hash,
+	[6779]	= &_001116_hash,
+	[9237]	= &_001117_hash,
+	[61524]	= &_001118_hash,
+	[38247]	= &_001119_hash,
+	[48715]	= &_001120_hash,
+	[40797]	= &_001121_hash,
+	[46780]	= &_001122_hash,
+	[22071]	= &_001123_hash,
+	[49735]	= &_001125_hash,
+	[63925]	= &_001126_hash,
+	[30902]	= &_001127_hash,
+	[39828]	= &_001128_hash,
+	[53089]	= &_001129_hash,
+	[6394]	= &_001130_hash,
+	[5116]	= &_001131_hash,
+	[50702]	= &_001132_hash,
+	[59565]	= &_001133_hash,
+	[61042]	= &_001134_hash,
+	[14533]	= &_001135_hash,
+	[23807]	= &_001136_hash,
+	[24296]	= &_001137_hash,
+	[8808]	= &_001138_hash,
+	[52383]	= &_001139_hash,
+	[30487]	= &_001140_hash,
+	[30125]	= &_001141_hash,
+	[40665]	= &_001142_hash,
+	[60809]	= &_001143_hash,
+	[4842]	= &_001144_hash,
+	[13955]	= &_001145_hash,
+	[33237]	= &_001146_hash,
+	[40673]	= &_001147_hash,
+	[48026]	= &_001148_hash,
+	[64033]	= &_001149_hash,
+	[13879]	= &_001150_hash,
+	[60114]	= &_001151_hash,
+	[19472]	= &_001152_hash,
+	[33552]	= &_001153_hash,
+	[28575]	= &_001154_hash,
+	[19696]	= &_001155_hash,
+	[19742]	= &_001156_hash,
+	[15286]	= &_001157_hash,
+	[24629]	= &_001158_hash,
+	[28382]	= &_001159_hash,
+	[18962]	= &_001160_hash,
+	[45796]	= &_001161_hash,
+	[51632]	= &_001162_hash,
+	[16907]	= &_001163_hash,
+	[49336]	= &_001164_hash,
+	[25316]	= &_001165_hash,
+	[39978]	= &_001166_hash,
+	[8091]	= &_001167_hash,
+	[30680]	= &_001168_hash,
+	[2066]	= &_001169_hash,
+	[24271]	= &_001170_hash,
+	[34934]	= &_001171_hash,
+	[29208]	= &_001172_hash,
+	[18591]	= &_001173_hash,
+	[24373]	= &_001174_hash,
+	[41485]	= &_001175_hash,
+	[45487]	= &_001176_hash,
+	[29299]	= &_001177_hash,
+	[53920]	= &_001178_hash,
+	[25407]	= &_001179_hash,
+	[5525]	= &_001180_hash,
+	[3531]	= &_001181_hash,
+	[25143]	= &_001182_hash,
+	[56046]	= &_001183_hash,
+	[34693]	= &_001184_hash,
+	[48644]	= &_001185_hash,
+	[21226]	= &_001186_hash,
+	[14051]	= &_001187_hash,
+	[7715]	= &_001188_hash,
+	[30413]	= &_001189_hash,
+	[13681]	= &_001190_hash,
+	[6554]	= &_001191_hash,
+	[12228]	= &_001192_hash,
+	[25497]	= &_001193_hash,
+	[52228]	= &_001194_hash,
+	[49069]	= &_001195_hash,
+	[26961]	= &_001196_hash,
+	[13768]	= &_001197_hash,
+	[56185]	= &_001198_hash,
+	[41838]	= &_001199_hash,
+	[60119]	= &_001200_hash,
+	[3112]	= &_001201_hash,
+	[62001]	= &_001202_hash,
+	[35888]	= &_001203_hash,
+	[54718]	= &_001206_hash,
+	[64177]	= &_001207_hash,
+	[57222]	= &_001208_hash,
+	[5260]	= &_001209_hash,
+	[55517]	= &_001210_hash,
+	[18186]	= &_001211_hash,
+	[14257]	= &_001212_hash,
+	[26846]	= &_001213_hash,
+	[56097]	= &_001214_hash,
+	[55151]	= &_001215_hash,
+	[2999]	= &_001216_hash,
+	[3602]	= &_001217_hash,
+	[18460]	= &_001218_hash,
+	[3507]	= &_001219_hash,
+	[57847]	= &_001220_hash,
+	[58077]	= &_001221_hash,
+	[2659]	= &_001222_hash,
+	[39846]	= &_001223_hash,
+	[18629]	= &_001224_hash,
+	[2723]	= &_001225_hash,
+	[45230]	= &_001226_hash,
+	[26941]	= &_001227_hash,
+	[4344]	= &_001228_hash,
+	[8487]	= &_001229_hash,
+	[9901]	= &_001230_hash,
+	[43061]	= &_001231_hash,
+	[42551]	= &_001232_hash,
+	[63272]	= &_001233_hash,
+	[37771]	= &_001234_hash,
+	[28261]	= &_001235_hash,
+	[44694]	= &_001236_hash,
+	[8573]	= &_001237_hash,
+	[60174]	= &_001238_hash,
+	[28040]	= &_001239_hash,
+	[39423]	= &_001240_hash,
+	[98]	= &_001241_hash,
+	[62874]	= &_001242_hash,
+	[38726]	= &_001243_hash,
+	[55348]	= &_001244_hash,
+	[10997]	= &_001245_hash,
+	[88]	= &_001246_hash,
+	[60639]	= &_001247_hash,
+	[48159]	= &_001248_hash,
+	[47899]	= &_001249_hash,
+	[25367]	= &_001250_hash,
+	[55681]	= &_001251_hash,
+	[44716]	= &_001252_hash,
+	[26161]	= &_001253_hash,
+	[55347]	= &_001254_hash,
+	[14518]	= &_001255_hash,
+	[8887]	= &_001256_hash,
+	[23009]	= &_001257_hash,
+	[27962]	= &_001258_hash,
+	[20004]	= &_001259_hash,
+	[61750]	= &_001260_hash,
+	[11661]	= &_001261_hash,
+	[37118]	= &_001262_hash,
+	[9370]	= &_001263_hash,
+	[15099]	= &_001264_hash,
+	[2404]	= &_001265_hash,
+	[64074]	= &_001266_hash,
+	[7538]	= &_001267_hash,
+	[19736]	= &_001268_hash,
+	[8199]	= &_001269_hash,
+	[40711]	= &_001270_hash,
+	[47859]	= &_001271_hash,
+	[53925]	= &_001272_hash,
+	[46888]	= &_001273_hash,
+	[21783]	= &_001274_hash,
+	[37305]	= &_001275_hash,
+	[18414]	= &_001276_hash,
+	[62423]	= &_001277_hash,
+	[30371]	= &_001278_hash,
+	[32617]	= &_001279_hash,
+	[14530]	= &_001281_hash,
+	[48623]	= &_001282_hash,
+	[12845]	= &_001283_hash,
+	[8895]	= &_001284_hash,
+	[33661]	= &_001285_hash,
+	[23178]	= &_001286_hash,
+	[54706]	= &_001287_hash,
+	[27133]	= &_001288_hash,
+	[52745]	= &_001289_hash,
+	[64420]	= &_001290_hash,
+	[25617]	= &_001291_hash,
+	[25414]	= &_001292_hash,
+	[20445]	= &_001293_hash,
+	[64006]	= &_001294_hash,
+	[52646]	= &_001295_hash,
+	[30281]	= &_001296_hash,
+	[3761]	= &_001297_hash,
+	[44345]	= &_001298_hash,
+	[14713]	= &_001299_hash,
+	[26043]	= &_001300_hash,
+	[41679]	= &_001301_hash,
+	[6267]	= &_001302_hash,
+	[22247]	= &_001304_hash,
+	[9440]	= &_001305_hash,
+	[54676]	= &_001306_hash,
+	[53982]	= &_001308_hash,
+	[9467]	= &_001309_hash,
+	[53419]	= &_001310_hash,
+	[1424]	= &_001311_hash,
+	[17561]	= &_001312_hash,
+	[28161]	= &_001313_hash,
+	[57262]	= &_001314_hash,
+	[61071]	= &_001315_hash,
+	[20067]	= &_001316_hash,
+	[34321]	= &_001317_hash,
+	[56199]	= &_001318_hash,
+	[29070]	= &_001319_hash,
+	[15698]	= &_001320_hash,
+	[14173]	= &_001321_hash,
+	[41224]	= &_001322_hash,
+	[56438]	= &_001323_hash,
+	[41894]	= &_001324_hash,
+	[20885]	= &_001325_hash,
+	[23275]	= &_001326_hash,
+	[45043]	= &_001327_hash,
+	[22143]	= &_001328_hash,
+	[38029]	= &_001329_hash,
+	[55343]	= &_001330_hash,
+	[40624]	= &_001331_hash,
+	[26476]	= &_001332_hash,
+	[43128]	= &_001333_hash,
+	[45115]	= &_001334_hash,
+	[32958]	= &_001335_hash,
+	[43091]	= &_001336_hash,
+	[33299]	= &_001337_hash,
+	[55021]	= &_001338_hash,
+	[5509]	= &_001339_hash,
+	[53012]	= &_001340_hash,
+	[57849]	= &_001341_hash,
+	[63282]	= &_001342_hash,
+	[27883]	= &_001343_hash,
+	[1670]	= &_001344_hash,
+	[24095]	= &_001345_hash,
+	[47810]	= &_001346_hash,
+	[40759]	= &_001347_hash,
+	[42139]	= &_001348_hash,
+	[50484]	= &_001349_hash,
+	[2305]	= &_001350_hash,
+	[59832]	= &_001351_hash,
+	[17662]	= &_001352_hash,
+	[58943]	= &_001353_hash,
+	[37417]	= &_001356_hash,
+	[25127]	= &_001357_hash,
+	[15006]	= &_001358_hash,
+	[54292]	= &_001359_hash,
+	[30642]	= &_001360_hash,
+	[39939]	= &_001361_hash,
+	[34818]	= &_001362_hash,
+	[23378]	= &_001363_hash,
+	[24090]	= &_001364_hash,
+	[11111]	= &_001365_hash,
+	[64141]	= &_001366_hash,
+	[46457]	= &_001367_hash,
+	[57927]	= &_001368_hash,
+	[58877]	= &_001371_hash,
+	[13880]	= &_001372_hash,
+	[62888]	= &_001373_hash,
+	[57962]	= &_001374_hash,
+	[9117]	= &_001375_hash,
+	[52012]	= &_001376_hash,
+	[49246]	= &_001377_hash,
+	[52701]	= &_001378_hash,
+	[29857]	= &_001379_hash,
+	[49420]	= &_001380_hash,
+	[45897]	= &_001381_hash,
+	[15141]	= &_001382_hash,
+	[24177]	= &_001383_hash,
+	[10325]	= &_001384_hash,
+	[52861]	= &_001385_hash,
+	[28922]	= &_001386_hash,
+	[31089]	= &_001387_hash,
+	[63084]	= &_001388_hash,
+	[26245]	= &_001389_hash,
+	[60000]	= &_001390_hash,
+	[56935]	= &_001391_hash,
+	[37569]	= &_001392_hash,
+	[6446]	= &_001394_hash,
+	[35883]	= &_001395_hash,
+	[9123]	= &_001396_hash,
+	[51457]	= &_001397_hash,
+	[1787]	= &_001398_hash,
+	[10135]	= &_001399_hash,
+	[952]	= &_001400_hash,
+	[53578]	= &_001401_hash,
+	[9923]	= &_001402_hash,
+	[45249]	= &_001403_hash,
+	[52860]	= &_001404_hash,
+	[29558]	= &_001405_hash,
+	[40556]	= &_001406_hash,
+	[53210]	= &_001407_hash,
+	[2506]	= &_001408_hash,
+	[48262]	= &_001409_hash,
+	[46939]	= &_001410_hash,
+	[17901]	= &_001411_hash,
+	[27204]	= &_001412_hash,
+	[52516]	= &_001413_hash,
+	[55885]	= &_001414_hash,
+	[6681]	= &_001415_hash,
+	[42360]	= &_001416_hash,
+	[20259]	= &_001417_hash,
+	[8874]	= &_001418_hash,
+	[53363]	= &_001419_hash,
+	[17500]	= &_001420_hash,
+	[63988]	= &_001421_hash,
+	[26378]	= &_001422_hash,
+	[7768]	= &_001423_hash,
+	[12938]	= &_001424_hash,
+	[6755]	= &_001425_hash,
+	[43806]	= &_001426_hash,
+	[15976]	= &_001427_hash,
+	[2732]	= &_001428_hash,
+	[2519]	= &_001429_hash,
+	[14340]	= &_001430_hash,
+	[34772]	= &_001431_hash,
+	[36433]	= &_001432_hash,
+	[16068]	= &_001433_hash,
+	[22052]	= &_001434_hash,
+	[8929]	= &_001435_hash,
+	[63220]	= &_001436_hash,
+	[18246]	= &_001437_hash,
+	[37678]	= &_001438_hash,
+	[4932]	= &_001439_hash,
+	[46960]	= &_001440_hash,
+	[16909]	= &_001441_hash,
+	[44429]	= &_001442_hash,
+	[59514]	= &_001443_hash,
+	[62760]	= &_001444_hash,
+	[41841]	= &_001445_hash,
+	[25417]	= &_001446_hash,
+	[63230]	= &_001447_hash,
+	[39532]	= &_001448_hash,
+	[24688]	= &_001449_hash,
+	[18555]	= &_001450_hash,
+	[54499]	= &_001451_hash,
+	[10719]	= &_001452_hash,
+	[1644]	= &_001453_hash,
+	[15109]	= &_001454_hash,
+	[15787]	= &_001455_hash,
+	[57869]	= &_001456_hash,
+	[54445]	= &_001457_hash,
+	[19398]	= &_001458_hash,
+	[9488]	= &_001459_hash,
+	[12587]	= &_001460_hash,
+	[17124]	= &_001461_hash,
+	[53665]	= &_001462_hash,
+	[40386]	= &_001463_hash,
+	[39444]	= &_001464_hash,
+	[28873]	= &_001465_hash,
+	[11290]	= &_001466_hash,
+	[51313]	= &_001467_hash,
+	[23354]	= &_001469_hash,
+	[49559]	= &_001470_hash,
+	[49312]	= &_001471_hash,
+	[36333]	= &_001472_hash,
+	[59349]	= &_001473_hash,
+	[60316]	= &_001474_hash,
+	[2546]	= &_001475_hash,
+	[57483]	= &_001476_hash,
+	[14569]	= &_001478_hash,
+	[61842]	= &_001481_hash,
+	[32923]	= &_001482_hash,
+	[57471]	= &_001483_hash,
+	[83]	= &_001484_hash,
+	[40242]	= &_001485_hash,
+	[42578]	= &_001486_hash,
+	[62037]	= &_001487_hash,
+	[8131]	= &_001488_hash,
+	[752]	= &_001489_hash,
+	[56376]	= &_001490_hash,
+	[22290]	= &_001491_hash,
+	[46232]	= &_001492_hash,
+	[35132]	= &_001493_hash,
+	[23825]	= &_001494_hash,
+	[43262]	= &_001495_hash,
+	[8138]	= &_001496_hash,
+	[31489]	= &_001497_hash,
+	[57578]	= &_001498_hash,
+	[28007]	= &_001499_hash,
+	[28688]	= &_001500_hash,
+	[19319]	= &_001501_hash,
+	[12575]	= &_001502_hash,
+	[62762]	= &_001504_hash,
+	[47450]	= &_001505_hash,
+	[1869]	= &_001506_hash,
+	[51225]	= &_001507_hash,
+	[19561]	= &_001508_hash,
+	[64894]	= &_001509_hash,
+	[6829]	= &_001510_hash,
+	[30644]	= &_001511_hash,
+	[63391]	= &_001512_hash,
+	[11655]	= &_001514_hash,
+	[28229]	= &_001515_hash,
+	[22382]	= &_001516_hash,
+	[22649]	= &_001517_hash,
+	[42619]	= &_001518_hash,
+	[19761]	= &_001519_hash,
+	[56990]	= &_001520_hash,
+	[19531]	= &_001521_hash,
+	[26514]	= &_001522_hash,
+	[56773]	= &_001523_hash,
+	[15563]	= &_001524_hash,
+	[26212]	= &_001525_hash,
+	[29203]	= &_001526_hash,
+	[32768]	= &_001527_hash,
+	[15110]	= &_001528_hash,
+	[3885]	= &_001529_hash,
+	[13788]	= &_001530_hash,
+	[27875]	= &_001531_hash,
+	[54959]	= &_001532_hash,
+	[20945]	= &_001533_hash,
+	[59640]	= &_001534_hash,
+	[4693]	= &_001535_hash,
+	[13793]	= &_001536_hash,
+	[25659]	= &_001537_hash,
+	[18734]	= &_001538_hash,
+	[17869]	= &_001539_hash,
+	[26270]	= &_001540_hash,
+	[18458]	= &_001541_hash,
+	[58468]	= &_001542_hash,
+	[61257]	= &_001543_hash,
+	[39946]	= &_001544_hash,
+	[52382]	= &_001545_hash,
+	[18428]	= &_001546_hash,
+	[31069]	= &_001547_hash,
+	[61614]	= &_001548_hash,
+	[60044]	= &_001549_hash,
+	[36818]	= &_001550_hash,
+	[54353]	= &_001551_hash,
+	[55994]	= &_001552_hash,
+	[65142]	= &_001553_hash,
+	[1664]	= &_001554_hash,
+	[32212]	= &_001555_hash,
+	[63087]	= &_001556_hash,
+	[29916]	= &_001557_hash,
+	[54912]	= &_001558_hash,
+	[10318]	= &_001559_hash,
+	[44031]	= &_001560_hash,
+	[50108]	= &_001561_hash,
+	[57812]	= &_001562_hash,
+	[63190]	= &_001563_hash,
+	[48246]	= &_001564_hash,
+	[3744]	= &_001565_hash,
+	[56321]	= &_001566_hash,
+	[42691]	= &_001567_hash,
+	[62052]	= &_001568_hash,
+	[21999]	= &_001569_hash,
+	[13672]	= &_001570_hash,
+	[20648]	= &_001571_hash,
+	[42500]	= &_001572_hash,
+	[22795]	= &_001573_hash,
+	[19496]	= &_001574_hash,
+	[35556]	= &_001575_hash,
+	[57144]	= &_001576_hash,
+	[1019]	= &_001577_hash,
+	[28818]	= &_001578_hash,
+	[52880]	= &_001579_hash,
+	[6543]	= &_001580_hash,
+	[18895]	= &_001581_hash,
+	[857]	= &_001582_hash,
+	[45966]	= &_001583_hash,
+	[11785]	= &_001584_hash,
+	[7736]	= &_001585_hash,
+	[4308]	= &_001586_hash,
+	[51095]	= &_001587_hash,
+	[12101]	= &_001588_hash,
+	[427]	= &_001589_hash,
+	[4021]	= &_001590_hash,
+	[54201]	= &_001591_hash,
+	[5615]	= &_001592_hash,
+	[16234]	= &_001593_hash,
+	[51718]	= &_001594_hash,
+	[42390]	= &_001595_hash,
+	[55391]	= &_001596_hash,
+	[28539]	= &_001597_hash,
+	[943]	= &_001598_hash,
+	[32683]	= &_001599_hash,
+	[39182]	= &_001600_hash,
+	[33198]	= &_001601_hash,
+	[39446]	= &_001602_hash,
+	[16394]	= &_001603_hash,
+	[30791]	= &_001604_hash,
+	[35530]	= &_001605_hash,
+	[53193]	= &_001607_hash,
+	[39401]	= &_001608_hash,
+	[28624]	= &_001609_hash,
+	[12066]	= &_001610_hash,
+	[63492]	= &_001611_hash,
+	[14897]	= &_001612_hash,
+	[29641]	= &_001613_hash,
+	[10165]	= &_001614_hash,
+	[60046]	= &_001615_hash,
+	[12429]	= &_001616_hash,
+	[32788]	= &_001617_hash,
+	[52698]	= &_001618_hash,
+	[13130]	= &_001620_hash,
+	[28643]	= &_001621_hash,
+	[50666]	= &_001622_hash,
+	[35126]	= &_001623_hash,
+	[33593]	= &_001624_hash,
+	[27547]	= &_001625_hash,
+	[5484]	= &_001626_hash,
+	[26642]	= &_001627_hash,
+	[25586]	= &_001628_hash,
+	[58757]	= &_001629_hash,
+	[18701]	= &_001630_hash,
+	[26271]	= &_001631_hash,
+	[23829]	= &_001632_hash,
+	[63659]	= &_001634_hash,
+	[26603]	= &_001635_hash,
+	[25704]	= &_001636_hash,
+	[21149]	= &_001637_hash,
+	[36900]	= &_001638_hash,
+	[61577]	= &_001640_hash,
+	[54095]	= &_001641_hash,
+	[31650]	= &_001642_hash,
+	[48970]	= &_001643_hash,
+	[49357]	= &_001644_hash,
+	[33835]	= &_001645_hash,
+	[46861]	= &_001646_hash,
+	[1428]	= &_001647_hash,
+	[36247]	= &_001648_hash,
+	[21600]	= &_001649_hash,
+	[24747]	= &_001650_hash,
+	[51012]	= &_001651_hash,
+	[38974]	= &_001653_hash,
+	[30549]	= &_001655_hash,
+	[40146]	= &_001656_hash,
+	[41756]	= &_001657_hash,
+	[37010]	= &_001658_hash,
+	[35072]	= &_001660_hash,
+	[2114]	= &_001661_hash,
+	[48424]	= &_001662_hash,
+	[61522]	= &_001663_hash,
+	[50633]	= &_001664_hash,
+	[2283]	= &_001665_hash,
+	[61763]	= &_001666_hash,
+	[48195]	= &_001667_hash,
+	[31000]	= &_001668_hash,
+	[23856]	= &_001669_hash,
+	[37421]	= &_001670_hash,
+	[10019]	= &_001672_hash,
+	[5148]	= &_001673_hash,
+	[14363]	= &_001674_hash,
+	[57354]	= &_001675_hash,
+	[62460]	= &_001676_hash,
+	[45174]	= &_001677_hash,
+	[31054]	= &_001678_hash,
+	[62195]	= &_001679_hash,
+	[14976]	= &_001680_hash,
+	[55676]	= &_001681_hash,
+	[1025]	= &_001682_hash,
+	[6921]	= &_001683_hash,
+	[22158]	= &_001684_hash,
+	[18050]	= &_001685_hash,
+	[18612]	= &_001686_hash,
+	[31107]	= &_001687_hash,
+	[45212]	= &_001688_hash,
+	[29599]	= &_001689_hash,
+	[30827]	= &_001690_hash,
+	[25086]	= &_001691_hash,
+	[27146]	= &_001692_hash,
+	[2467]	= &_001693_hash,
+	[45786]	= &_001694_hash,
+	[51909]	= &_001695_hash,
+	[64604]	= &_001696_hash,
+	[57819]	= &_001697_hash,
+	[11001]	= &_001698_hash,
+	[20326]	= &_001699_hash,
+	[12682]	= &_001700_hash,
+	[28932]	= &_001701_hash,
+	[53491]	= &_001702_hash,
+	[63894]	= &_001703_hash,
+	[51191]	= &_001704_hash,
+	[59759]	= &_001705_hash,
+	[15691]	= &_001706_hash,
+	[38786]	= &_001707_hash,
+	[51546]	= &_001708_hash,
+	[10121]	= &_001709_hash,
+	[60786]	= &_001710_hash,
+	[19952]	= &_001712_hash,
+	[7271]	= &_001715_hash,
+	[10729]	= &_001716_hash,
+	[28883]	= &_001717_hash,
+	[52042]	= &_001718_hash,
+	[49606]	= &_001719_hash,
+	[33243]	= &_001720_hash,
+	[57341]	= &_001721_hash,
+	[7978]	= &_001722_hash,
+	[36330]	= &_001723_hash,
+	[39035]	= &_001724_hash,
+	[34498]	= &_001725_hash,
+	[19789]	= &_001726_hash,
+	[55685]	= &_001727_hash,
+	[55419]	= &_001728_hash,
+	[27798]	= &_001729_hash,
+	[54599]	= &_001730_hash,
+	[65522]	= &_001731_hash,
+	[38111]	= &_001732_hash,
+	[57077]	= &_001733_hash,
+	[53053]	= &_001734_hash,
+	[14190]	= &_001735_hash,
+	[47037]	= &_001736_hash,
+	[33296]	= &_001737_hash,
+	[23803]	= &_001738_hash,
+	[48773]	= &_001739_hash,
+	[63014]	= &_001740_hash,
+	[64392]	= &_001741_hash,
+	[44203]	= &_001742_hash,
+	[47717]	= &_001743_hash,
+	[38399]	= &_001744_hash,
+	[30385]	= &_001745_hash,
+	[61693]	= &_001746_hash,
+	[32049]	= &_001747_hash,
+	[26133]	= &_001748_hash,
+	[45038]	= &_001749_hash,
+	[8582]	= &_001751_hash,
+	[38182]	= &_001753_hash,
+	[62457]	= &_001754_hash,
+	[27937]	= &_001755_hash,
+	[3795]	= &_001756_hash,
+	[23228]	= &_001757_hash,
+	[56511]	= &_001758_hash,
+	[47807]	= &_001759_hash,
+	[60528]	= &_001760_hash,
+	[51858]	= &_001761_hash,
+	[49183]	= &_001762_hash,
+	[33807]	= &_001763_hash,
+	[34791]	= &_001764_hash,
+	[8150]	= &_001765_hash,
+	[19691]	= &_001767_hash,
+	[20519]	= &_001770_hash,
+	[17144]	= &_001771_hash,
+	[14000]	= &_001772_hash,
+	[31148]	= &_001773_hash,
+	[62594]	= &_001774_hash,
+	[39210]	= &_001775_hash,
+	[2077]	= &_001776_hash,
+	[23497]	= &_001777_hash,
+	[34512]	= &_001778_hash,
+	[16268]	= &_001780_hash,
+	[14562]	= &_001781_hash,
+	[17606]	= &_001783_hash,
+	[25654]	= &_001784_hash,
+	[56078]	= &_001785_hash,
+	[61088]	= &_001786_hash,
+	[53442]	= &_001787_hash,
+	[54456]	= &_001788_hash,
+	[22038]	= &_001789_hash,
+	[58394]	= &_001790_hash,
+	[38953]	= &_001791_hash,
+	[16109]	= &_001792_hash,
+	[3812]	= &_001793_hash,
+	[5084]	= &_001794_hash,
+	[41893]	= &_001795_hash,
+	[45486]	= &_001796_hash,
+	[50226]	= &_001797_hash,
+	[63694]	= &_001798_hash,
+	[56763]	= &_001799_hash,
+	[20905]	= &_001800_hash,
+	[13080]	= &_001801_hash,
+	[54700]	= &_001802_hash,
+	[40947]	= &_001803_hash,
+	[32645]	= &_001804_hash,
+	[57462]	= &_001805_hash,
+	[33853]	= &_001806_hash,
+	[57940]	= &_001807_hash,
+	[45583]	= &_001808_hash,
+	[14237]	= &_001809_hash,
+	[27495]	= &_001810_hash,
+	[12489]	= &_001811_hash,
+};
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/tools/gcc/size_overflow_plugin.c linux-3.3.8-pax/tools/gcc/size_overflow_plugin.c
--- linux-3.3.8/tools/gcc/size_overflow_plugin.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-3.3.8-pax/tools/gcc/size_overflow_plugin.c	2012-06-01 17:53:19.778511172 +0200
@@ -0,0 +1,1188 @@
+/*
+ * Copyright 2011, 2012 by Emese Revfy <re.emese@gmail.com>
+ * Licensed under the GPL v2, or (at your option) v3
+ *
+ * Homepage:
+ * http://www.grsecurity.net/~ephox/overflow_plugin/
+ *
+ * This plugin recomputes expressions of function arguments marked by a size_overflow attribute
+ * with double integer precision (DImode/TImode for 32/64 bit integer types).
+ * The recomputed argument is checked against INT_MAX and an event is logged on overflow and the triggering process is killed.
+ *
+ * Usage:
+ * $ gcc -I`gcc -print-file-name=plugin`/include -fPIC -shared -O2 -o size_overflow_plugin.so size_overflow_plugin.c
+ * $ gcc -fplugin=size_overflow_plugin.so test.c  -O2
+ */
+
+#include "gcc-plugin.h"
+#include "config.h"
+#include "system.h"
+#include "coretypes.h"
+#include "tree.h"
+#include "tree-pass.h"
+#include "intl.h"
+#include "plugin-version.h"
+#include "tm.h"
+#include "toplev.h"
+#include "function.h"
+#include "tree-flow.h"
+#include "plugin.h"
+#include "gimple.h"
+#include "c-common.h"
+#include "diagnostic.h"
+#include "cfgloop.h"
+
+struct size_overflow_hash {
+		struct size_overflow_hash *next;
+		const char *name;
+		const char *file;
+		unsigned short param1:1;
+		unsigned short param2:1;
+		unsigned short param3:1;
+		unsigned short param4:1;
+		unsigned short param5:1;
+		unsigned short param6:1;
+		unsigned short param7:1;
+		unsigned short param8:1;
+		unsigned short param9:1;
+};
+
+#include "size_overflow_hash.h"
+
+#define __unused __attribute__((__unused__))
+#define NAME(node) IDENTIFIER_POINTER(DECL_NAME(node))
+#define NAME_LEN(node) IDENTIFIER_LENGTH(DECL_NAME(node))
+#define BEFORE_STMT true
+#define AFTER_STMT false
+#define CREATE_NEW_VAR NULL_TREE
+
+int plugin_is_GPL_compatible;
+void debug_gimple_stmt(gimple gs);
+
+static tree expand(struct pointer_set_t *visited, bool *potentionally_overflowed, tree var);
+static tree signed_size_overflow_type;
+static tree unsigned_size_overflow_type;
+static tree report_size_overflow_decl;
+static tree const_char_ptr_type_node;
+static unsigned int handle_function(void);
+static bool file_match = true;
+
+static struct plugin_info size_overflow_plugin_info = {
+	.version	= "20120521beta",
+	.help		= "no-size_overflow\tturn off size overflow checking\n",
+};
+
+static tree handle_size_overflow_attribute(tree *node, tree __unused name, tree args, int __unused flags, bool *no_add_attrs)
+{
+	unsigned int arg_count = type_num_arguments(*node);
+
+	for (; args; args = TREE_CHAIN(args)) {
+		tree position = TREE_VALUE(args);
+		if (TREE_CODE(position) != INTEGER_CST || TREE_INT_CST_HIGH(position) || TREE_INT_CST_LOW(position) < 1 || TREE_INT_CST_LOW(position) > arg_count ) {
+			error("handle_size_overflow_attribute: overflow parameter outside range.");
+			*no_add_attrs = true;
+		}
+	}
+	return NULL_TREE;
+}
+
+static struct attribute_spec no_size_overflow_attr = {
+	.name				= "size_overflow",
+	.min_length			= 1,
+	.max_length			= -1,
+	.decl_required			= false,
+	.type_required			= true,
+	.function_type_required		= true,
+	.handler			= handle_size_overflow_attribute
+};
+
+static void register_attributes(void __unused *event_data, void __unused *data)
+{
+	register_attribute(&no_size_overflow_attr);
+}
+
+// http://www.team5150.com/~andrew/noncryptohashzoo2~/CrapWow.html
+static unsigned int CrapWow(const char *key, unsigned int len, unsigned int seed)
+{
+#define cwfold( a, b, lo, hi ) { p = (unsigned int)(a) * (unsigned long long)(b); lo ^= (unsigned int)p; hi ^= (unsigned int)(p >> 32); }
+#define cwmixa( in ) { cwfold( in, m, k, h ); }
+#define cwmixb( in ) { cwfold( in, n, h, k ); }
+
+	const unsigned int m = 0x57559429;
+	const unsigned int n = 0x5052acdb;
+	const unsigned int *key4 = (const unsigned int *)key;
+	unsigned int h = len;
+	unsigned int k = len + seed + n;
+	unsigned long long p;
+
+	while (len >= 8) {
+		cwmixb(key4[0]) cwmixa(key4[1]) key4 += 2;
+		len -= 8;
+	}
+	if (len >= 4) {
+		cwmixb(key4[0]) key4 += 1;
+		len -= 4;
+	}
+	if (len)
+		cwmixa(key4[0] & ((1 << (len * 8)) - 1 ));
+	cwmixb(h ^ (k + n));
+	return k ^ h;
+
+#undef cwfold
+#undef cwmixa
+#undef cwmixb
+}
+
+static inline unsigned int get_hash_num(const char *fndecl, const char *loc_file, unsigned int seed)
+{
+	unsigned int fn = CrapWow(fndecl, strlen(fndecl), seed) & 0xffff;
+	unsigned int file = CrapWow(loc_file, strlen(loc_file), seed) & 0xffff;
+
+	if (file_match)
+		return fn ^ file;
+	else
+		return fn;
+}
+
+static inline tree get_original_function_decl(tree fndecl)
+{
+	if (DECL_ABSTRACT_ORIGIN(fndecl))
+		return DECL_ABSTRACT_ORIGIN(fndecl);
+	return fndecl;
+}
+
+static inline gimple get_def_stmt(tree node)
+{
+	gcc_assert(TREE_CODE(node) == SSA_NAME);
+	return SSA_NAME_DEF_STMT(node);
+}
+
+static struct size_overflow_hash *get_function_hash(tree fndecl, const char *loc_file)
+{
+	unsigned int hash;
+	struct size_overflow_hash *entry;
+	const char *func_name = NAME(fndecl);
+
+	hash = get_hash_num(NAME(fndecl), loc_file, 0);
+
+	entry = size_overflow_hash[hash];
+	while (entry) {
+		if (!strcmp(entry->name, func_name) && (!file_match || !strcmp(entry->file, loc_file)))
+			return entry;
+		entry = entry->next;
+	}
+
+	return NULL;
+}
+
+static void check_arg_type(tree var)
+{
+	tree type = TREE_TYPE(var);
+	enum tree_code code = TREE_CODE(type);
+
+	gcc_assert(code == INTEGER_TYPE || code == ENUMERAL_TYPE ||
+		  (code == POINTER_TYPE && TREE_CODE(TREE_TYPE(type)) == VOID_TYPE) ||
+		  (code == POINTER_TYPE && TREE_CODE(TREE_TYPE(type)) == INTEGER_TYPE));
+}
+
+static int find_arg_number(tree arg, tree func)
+{
+	tree var;
+	bool match = false;
+	unsigned int argnum = 1;
+
+	if (TREE_CODE(arg) == SSA_NAME)
+		arg = SSA_NAME_VAR(arg);
+
+	for (var = DECL_ARGUMENTS(func); var; var = TREE_CHAIN(var)) {
+		if (strcmp(NAME(arg), NAME(var))) {
+			argnum++;
+			continue;
+		}
+		check_arg_type(var);
+
+		match = true;
+		if (!TYPE_UNSIGNED(TREE_TYPE(var)))
+			return 0;
+		break;
+	}
+	if (!match) {
+		warning(0, "find_arg_number: cannot find the %s argument in %s", NAME(arg), NAME(func));
+		return 0;
+	}
+	return argnum;
+}
+
+static void print_missing_msg(tree func, const char *filename, unsigned int argnum)
+{
+	unsigned int new_hash;
+	location_t loc = DECL_SOURCE_LOCATION(func);
+	const char *curfunc = NAME(func);
+
+	new_hash = get_hash_num(curfunc, filename, 0);
+//	inform(loc, "Function %s is missing from the size_overflow hash table +%s+%d+%u+%s+", curfunc, curfunc, argnum, new_hash, filename);
+}
+
+static void check_missing_attribute(tree arg)
+{
+	tree type, func = get_original_function_decl(current_function_decl);
+	unsigned int argnum;
+	struct size_overflow_hash *hash;
+	const char *filename;
+
+	gcc_assert(TREE_CODE(arg) != COMPONENT_REF);
+
+	type = TREE_TYPE(arg);
+	// skip function pointers
+	if (TREE_CODE(type) == POINTER_TYPE && TREE_CODE(TREE_TYPE(type)) == FUNCTION_TYPE)
+		return;
+
+	if (lookup_attribute("size_overflow", TYPE_ATTRIBUTES(TREE_TYPE(func))))
+		return;
+
+	argnum = find_arg_number(arg, func);
+	if (argnum == 0)
+		return;
+
+	filename = DECL_SOURCE_FILE(func);
+
+	hash = get_function_hash(func, filename);
+	if (!hash) {
+		print_missing_msg(func, filename, argnum);
+		return;
+	}
+
+#define check_param(num)			\
+	if (num == argnum && hash->param##num)	\
+		return;
+	check_param(1);
+	check_param(2);
+	check_param(3);
+	check_param(4);
+	check_param(5);
+	check_param(6);
+	check_param(7);
+	check_param(8);
+	check_param(9);
+#undef check_param
+
+	print_missing_msg(func, filename, argnum);
+}
+
+static tree create_new_var(tree type)
+{
+	tree new_var = create_tmp_var(type, "cicus");
+
+	add_referenced_var(new_var);
+	mark_sym_for_renaming(new_var);
+	return new_var;
+}
+
+static bool is_bool(tree node)
+{
+	tree type;
+
+	if (node == NULL_TREE)
+		return false;
+
+	type = TREE_TYPE(node);
+	if (!INTEGRAL_TYPE_P(type))
+		return false;
+	if (TREE_CODE(type) == BOOLEAN_TYPE)
+		return true;
+	if (TYPE_PRECISION(type) == 1)
+		return true;
+	return false;
+}
+
+static tree cast_a_tree(tree type, tree var)
+{
+	gcc_assert(fold_convertible_p(type, var));
+
+	return fold_convert(type, var);
+}
+
+static gimple build_cast_stmt(tree type, tree var, tree new_var, location_t loc)
+{
+	gimple assign;
+
+	if (new_var == CREATE_NEW_VAR)
+		new_var = create_new_var(type);
+
+	assign = gimple_build_assign(new_var, cast_a_tree(type, var));
+	gimple_set_location(assign, loc);
+	gimple_set_lhs(assign, make_ssa_name(new_var, assign));
+
+	return assign;
+}
+
+static tree create_assign(struct pointer_set_t *visited, bool *potentionally_overflowed, gimple oldstmt, tree rhs1, bool before)
+{
+	tree oldstmt_rhs1;
+	enum tree_code code;
+	gimple stmt;
+	gimple_stmt_iterator gsi;
+
+	if (!*potentionally_overflowed)
+		return NULL_TREE;
+
+	if (rhs1 == NULL_TREE) {
+		debug_gimple_stmt(oldstmt);
+		error("create_assign: rhs1 is NULL_TREE");
+		gcc_unreachable();
+	}
+
+	oldstmt_rhs1 = gimple_assign_rhs1(oldstmt);
+	code = TREE_CODE(oldstmt_rhs1);
+	if (code == PARM_DECL || (code == SSA_NAME && gimple_code(get_def_stmt(oldstmt_rhs1)) == GIMPLE_NOP))
+		check_missing_attribute(oldstmt_rhs1);
+
+	stmt = build_cast_stmt(signed_size_overflow_type, rhs1, CREATE_NEW_VAR, gimple_location(oldstmt));
+	gsi = gsi_for_stmt(oldstmt);
+	if (lookup_stmt_eh_lp(oldstmt) != 0) {
+		basic_block next_bb, cur_bb;
+		edge e;
+
+		gcc_assert(before == false);
+		gcc_assert(stmt_can_throw_internal(oldstmt));
+		gcc_assert(gimple_code(oldstmt) == GIMPLE_CALL);
+		gcc_assert(!gsi_end_p(gsi));
+
+		cur_bb = gimple_bb(oldstmt);
+		next_bb = cur_bb->next_bb;
+		e = find_edge(cur_bb, next_bb);
+		gcc_assert(e != NULL);
+		gcc_assert(e->flags & EDGE_FALLTHRU);
+
+		gsi = gsi_after_labels(next_bb);
+		gcc_assert(!gsi_end_p(gsi));
+		before = true;
+	}
+	if (before)
+		gsi_insert_before(&gsi, stmt, GSI_NEW_STMT);
+	else
+		gsi_insert_after(&gsi, stmt, GSI_NEW_STMT);
+	update_stmt(stmt);
+	pointer_set_insert(visited, oldstmt);
+	return gimple_get_lhs(stmt);
+}
+
+static tree dup_assign(struct pointer_set_t *visited, bool *potentionally_overflowed, gimple oldstmt, tree rhs1, tree rhs2, tree __unused rhs3)
+{
+	tree new_var, lhs = gimple_get_lhs(oldstmt);
+	gimple stmt;
+	gimple_stmt_iterator gsi;
+
+	if (!*potentionally_overflowed)
+		return NULL_TREE;
+
+	if (gimple_num_ops(oldstmt) != 4 && rhs1 == NULL_TREE) {
+		rhs1 = gimple_assign_rhs1(oldstmt);
+		rhs1 = create_assign(visited, potentionally_overflowed, oldstmt, rhs1, BEFORE_STMT);
+	}
+	if (gimple_num_ops(oldstmt) == 3 && rhs2 == NULL_TREE) {
+		rhs2 = gimple_assign_rhs2(oldstmt);
+		rhs2 = create_assign(visited, potentionally_overflowed, oldstmt, rhs2, BEFORE_STMT);
+	}
+
+	stmt = gimple_copy(oldstmt);
+	gimple_set_location(stmt, gimple_location(oldstmt));
+
+	if (gimple_assign_rhs_code(oldstmt) == WIDEN_MULT_EXPR)
+		gimple_assign_set_rhs_code(stmt, MULT_EXPR);
+
+	if (is_bool(lhs))
+		new_var = SSA_NAME_VAR(lhs);
+	else
+		new_var = create_new_var(signed_size_overflow_type);
+	new_var = make_ssa_name(new_var, stmt);
+	gimple_set_lhs(stmt, new_var);
+
+	if (rhs1 != NULL_TREE) {
+		if (!gimple_assign_cast_p(oldstmt))
+			rhs1 = cast_a_tree(signed_size_overflow_type, rhs1);
+		gimple_assign_set_rhs1(stmt, rhs1);
+	}
+
+	if (rhs2 != NULL_TREE)
+		gimple_assign_set_rhs2(stmt, rhs2);
+#if BUILDING_GCC_VERSION >= 4007
+	if (rhs3 != NULL_TREE)
+		gimple_assign_set_rhs3(stmt, rhs3);
+#endif
+	gimple_set_vuse(stmt, gimple_vuse(oldstmt));
+	gimple_set_vdef(stmt, gimple_vdef(oldstmt));
+
+	gsi = gsi_for_stmt(oldstmt);
+	gsi_insert_after(&gsi, stmt, GSI_SAME_STMT);
+	update_stmt(stmt);
+	pointer_set_insert(visited, oldstmt);
+	return gimple_get_lhs(stmt);
+}
+
+static gimple overflow_create_phi_node(gimple oldstmt, tree var)
+{
+	basic_block bb;
+	gimple phi;
+	gimple_stmt_iterator gsi = gsi_for_stmt(oldstmt);
+
+	bb = gsi_bb(gsi);
+
+	phi = create_phi_node(var, bb);
+	gsi = gsi_last(phi_nodes(bb));
+	gsi_remove(&gsi, false);
+
+	gsi = gsi_for_stmt(oldstmt);
+	gsi_insert_after(&gsi, phi, GSI_NEW_STMT);
+	gimple_set_bb(phi, bb);
+	return phi;
+}
+
+static tree signed_cast_constant(tree node)
+{
+	gcc_assert(is_gimple_constant(node));
+
+	return cast_a_tree(signed_size_overflow_type, node);
+}
+
+static basic_block create_a_first_bb(void)
+{
+	basic_block first_bb;
+
+	first_bb = split_block_after_labels(ENTRY_BLOCK_PTR)->dest;
+	if (dom_info_available_p(CDI_DOMINATORS))
+		set_immediate_dominator(CDI_DOMINATORS, first_bb, ENTRY_BLOCK_PTR);
+	return first_bb;
+}
+
+static gimple cast_old_phi_arg(gimple oldstmt, tree arg, tree new_var, unsigned int i)
+{
+	basic_block bb;
+	gimple newstmt, def_stmt;
+	gimple_stmt_iterator gsi;
+
+	newstmt = build_cast_stmt(signed_size_overflow_type, arg, new_var, gimple_location(oldstmt));
+	if (TREE_CODE(arg) == SSA_NAME) {
+		def_stmt = get_def_stmt(arg);
+		if (gimple_code(def_stmt) != GIMPLE_NOP) {
+			gsi = gsi_for_stmt(def_stmt);
+			gsi_insert_after(&gsi, newstmt, GSI_NEW_STMT);
+			return newstmt;
+		}
+	}
+
+	bb = gimple_phi_arg_edge(oldstmt, i)->src;
+	if (bb->index == 0)
+		bb = create_a_first_bb();
+	gsi = gsi_after_labels(bb);
+	gsi_insert_before(&gsi, newstmt, GSI_NEW_STMT);
+	return newstmt;
+}
+
+static gimple handle_new_phi_arg(tree arg, tree new_var, tree new_rhs)
+{
+	gimple newstmt;
+	gimple_stmt_iterator gsi;
+	void (*gsi_insert)(gimple_stmt_iterator *, gimple, enum gsi_iterator_update);
+	gimple def_newstmt = get_def_stmt(new_rhs);
+
+	gsi_insert = gsi_insert_after;
+	gsi = gsi_for_stmt(def_newstmt);
+
+	switch (gimple_code(get_def_stmt(arg))) {
+	case GIMPLE_PHI:
+		newstmt = gimple_build_assign(new_var, new_rhs);
+		gsi = gsi_after_labels(gimple_bb(def_newstmt));
+		gsi_insert = gsi_insert_before;
+		break;
+	case GIMPLE_ASM:
+	case GIMPLE_CALL:
+		newstmt = gimple_build_assign(new_var, new_rhs);
+		break;
+	case GIMPLE_ASSIGN:
+		newstmt = gimple_build_assign(new_var, gimple_get_lhs(def_newstmt));
+		break;
+	default:
+		/* unknown gimple_code (handle_build_new_phi_arg) */
+		gcc_unreachable();
+	}
+
+	gimple_set_lhs(newstmt, make_ssa_name(new_var, newstmt));
+	gsi_insert(&gsi, newstmt, GSI_NEW_STMT);
+	update_stmt(newstmt);
+	return newstmt;
+}
+
+static tree build_new_phi_arg(struct pointer_set_t *visited, bool *potentionally_overflowed, tree arg, tree new_var)
+{
+	gimple newstmt;
+	tree new_rhs;
+
+	new_rhs = expand(visited, potentionally_overflowed, arg);
+
+	if (new_rhs == NULL_TREE)
+		return NULL_TREE;
+
+	newstmt = handle_new_phi_arg(arg, new_var, new_rhs);
+	return gimple_get_lhs(newstmt);
+}
+
+static tree build_new_phi(struct pointer_set_t *visited, bool *potentionally_overflowed, gimple oldstmt)
+{
+	gimple phi;
+	tree new_var = create_new_var(signed_size_overflow_type);
+	unsigned int i, n = gimple_phi_num_args(oldstmt);
+
+	pointer_set_insert(visited, oldstmt);
+	phi = overflow_create_phi_node(oldstmt, new_var);
+	for (i = 0; i < n; i++) {
+		tree arg, lhs;
+
+		arg = gimple_phi_arg_def(oldstmt, i);
+		if (is_gimple_constant(arg))
+			arg = signed_cast_constant(arg);
+		lhs = build_new_phi_arg(visited, potentionally_overflowed, arg, new_var);
+		if (lhs == NULL_TREE)
+			lhs = gimple_get_lhs(cast_old_phi_arg(oldstmt, arg, new_var, i));
+		add_phi_arg(phi, lhs, gimple_phi_arg_edge(oldstmt, i), gimple_location(oldstmt));
+	}
+
+	update_stmt(phi);
+	return gimple_phi_result(phi);
+}
+
+static tree handle_unary_rhs(struct pointer_set_t *visited, bool *potentionally_overflowed, tree var)
+{
+	gimple def_stmt = get_def_stmt(var);
+	tree new_rhs1, rhs1 = gimple_assign_rhs1(def_stmt);
+
+	*potentionally_overflowed = true;
+	new_rhs1 = expand(visited, potentionally_overflowed, rhs1);
+	if (new_rhs1 == NULL_TREE) {
+		if (TREE_CODE(TREE_TYPE(rhs1)) == POINTER_TYPE)
+			return create_assign(visited, potentionally_overflowed, def_stmt, var, AFTER_STMT);
+		else
+			return create_assign(visited, potentionally_overflowed, def_stmt, rhs1, AFTER_STMT);
+	}
+	return dup_assign(visited, potentionally_overflowed, def_stmt, new_rhs1, NULL_TREE, NULL_TREE);
+}
+
+static tree handle_unary_ops(struct pointer_set_t *visited, bool *potentionally_overflowed, tree var)
+{
+	gimple def_stmt = get_def_stmt(var);
+	tree rhs1 = gimple_assign_rhs1(def_stmt);
+
+	if (is_gimple_constant(rhs1))
+		return dup_assign(visited, potentionally_overflowed, def_stmt, signed_cast_constant(rhs1), NULL_TREE, NULL_TREE);
+
+	gcc_assert(TREE_CODE(rhs1) != COND_EXPR);
+	switch (TREE_CODE(rhs1)) {
+	case SSA_NAME:
+		return handle_unary_rhs(visited, potentionally_overflowed, var);
+
+	case ARRAY_REF:
+	case BIT_FIELD_REF:
+	case ADDR_EXPR:
+	case COMPONENT_REF:
+	case INDIRECT_REF:
+#if BUILDING_GCC_VERSION >= 4006
+	case MEM_REF:
+#endif
+	case PARM_DECL:
+	case TARGET_MEM_REF:
+	case VAR_DECL:
+		return create_assign(visited, potentionally_overflowed, def_stmt, var, AFTER_STMT);
+
+	default:
+		debug_gimple_stmt(def_stmt);
+		debug_tree(rhs1);
+		gcc_unreachable();
+	}
+}
+
+static void insert_cond(basic_block cond_bb, tree arg, enum tree_code cond_code, tree type_value)
+{
+	gimple cond_stmt;
+	gimple_stmt_iterator gsi = gsi_last_bb(cond_bb);
+
+	cond_stmt = gimple_build_cond(cond_code, arg, type_value, NULL_TREE, NULL_TREE);
+	gsi_insert_after(&gsi, cond_stmt, GSI_CONTINUE_LINKING);
+	update_stmt(cond_stmt);
+}
+
+static tree create_string_param(tree string)
+{
+	tree i_type, a_type;
+	int length = TREE_STRING_LENGTH(string);
+
+	gcc_assert(length > 0);
+
+	i_type = build_index_type(build_int_cst(NULL_TREE, length - 1));
+	a_type = build_array_type(char_type_node, i_type);
+
+	TREE_TYPE(string) = a_type;
+	TREE_CONSTANT(string) = 1;
+	TREE_READONLY(string) = 1;
+
+	return build1(ADDR_EXPR, ptr_type_node, string);
+}
+
+static void insert_cond_result(basic_block bb_true, gimple stmt, tree arg)
+{
+	gimple func_stmt, def_stmt;
+	tree current_func, loc_file, loc_line;
+	expanded_location xloc;
+	gimple_stmt_iterator gsi = gsi_start_bb(bb_true);
+
+	def_stmt = get_def_stmt(arg);
+	xloc = expand_location(gimple_location(def_stmt));
+
+	if (!gimple_has_location(def_stmt)) {
+		xloc = expand_location(gimple_location(stmt));
+		if (!gimple_has_location(stmt))
+			xloc = expand_location(DECL_SOURCE_LOCATION(current_function_decl));
+	}
+
+	loc_line = build_int_cstu(unsigned_type_node, xloc.line);
+
+	loc_file = build_string(strlen(xloc.file) + 1, xloc.file);
+	loc_file = create_string_param(loc_file);
+
+	current_func = build_string(NAME_LEN(current_function_decl) + 1, NAME(current_function_decl));
+	current_func = create_string_param(current_func);
+
+	// void report_size_overflow(const char *file, unsigned int line, const char *func)
+	func_stmt = gimple_build_call(report_size_overflow_decl, 3, loc_file, loc_line, current_func);
+
+	gsi_insert_after(&gsi, func_stmt, GSI_CONTINUE_LINKING);
+}
+
+static void __unused print_the_code_insertions(gimple stmt)
+{
+	location_t loc = gimple_location(stmt);
+
+	inform(loc, "Integer size_overflow check applied here.");
+}
+
+static void insert_check_size_overflow(gimple stmt, enum tree_code cond_code, tree arg, tree type_value)
+{
+	basic_block cond_bb, join_bb, bb_true;
+	edge e;
+	gimple_stmt_iterator gsi = gsi_for_stmt(stmt);
+
+	cond_bb = gimple_bb(stmt);
+	gsi_prev(&gsi);
+	if (gsi_end_p(gsi))
+		e = split_block_after_labels(cond_bb);
+	else
+		e = split_block(cond_bb, gsi_stmt(gsi));
+	cond_bb = e->src;
+	join_bb = e->dest;
+	e->flags = EDGE_FALSE_VALUE;
+	e->probability = REG_BR_PROB_BASE;
+
+	bb_true = create_empty_bb(cond_bb);
+	make_edge(cond_bb, bb_true, EDGE_TRUE_VALUE);
+	make_edge(cond_bb, join_bb, EDGE_FALSE_VALUE);
+	make_edge(bb_true, join_bb, EDGE_FALLTHRU);
+
+	if (dom_info_available_p(CDI_DOMINATORS)) {
+		set_immediate_dominator(CDI_DOMINATORS, bb_true, cond_bb);
+		set_immediate_dominator(CDI_DOMINATORS, join_bb, cond_bb);
+	}
+
+	if (current_loops != NULL) {
+		gcc_assert(cond_bb->loop_father == join_bb->loop_father);
+		add_bb_to_loop(bb_true, cond_bb->loop_father);
+	}
+
+	insert_cond(cond_bb, arg, cond_code, type_value);
+	insert_cond_result(bb_true, stmt, arg);
+
+//	print_the_code_insertions(stmt);
+}
+
+static tree get_type_for_check(tree rhs)
+{
+	tree def_rhs;
+	gimple def_stmt = get_def_stmt(rhs);
+
+	if (!gimple_assign_cast_p(def_stmt))
+		return TREE_TYPE(rhs);
+	def_rhs = gimple_assign_rhs1(def_stmt);
+	if (TREE_CODE(TREE_TYPE(def_rhs)) == INTEGER_TYPE)
+		return TREE_TYPE(def_rhs);
+	return TREE_TYPE(rhs);
+}
+
+static gimple cast_to_unsigned_size_overflow_type(gimple stmt, tree cast_rhs)
+{
+	gimple ucast_stmt;
+	gimple_stmt_iterator gsi;
+	location_t loc = gimple_location(stmt);
+
+	ucast_stmt = build_cast_stmt(unsigned_size_overflow_type, cast_rhs, CREATE_NEW_VAR, loc);
+	gsi = gsi_for_stmt(stmt);
+	gsi_insert_before(&gsi, ucast_stmt, GSI_SAME_STMT);
+	return ucast_stmt;
+}
+
+static void check_size_overflow(gimple stmt, tree cast_rhs, tree rhs, bool *potentionally_overflowed)
+{
+	tree type_max, type_min, rhs_type;
+	gimple ucast_stmt;
+
+	if (!*potentionally_overflowed)
+		return;
+
+	rhs_type = get_type_for_check(rhs);
+
+	if (TYPE_UNSIGNED(rhs_type)) {
+		ucast_stmt = cast_to_unsigned_size_overflow_type(stmt, cast_rhs);
+		type_max = cast_a_tree(unsigned_size_overflow_type, TYPE_MAX_VALUE(rhs_type));
+		insert_check_size_overflow(stmt, GT_EXPR, gimple_get_lhs(ucast_stmt), type_max);
+	} else {
+		type_max = cast_a_tree(signed_size_overflow_type, TYPE_MAX_VALUE(rhs_type));
+		insert_check_size_overflow(stmt, GT_EXPR, cast_rhs, type_max);
+
+		type_min = cast_a_tree(signed_size_overflow_type, TYPE_MIN_VALUE(rhs_type));
+		insert_check_size_overflow(stmt, LT_EXPR, cast_rhs, type_min);
+	}
+}
+
+static tree change_assign_rhs(struct pointer_set_t *visited, bool *potentionally_overflowed, gimple stmt, tree orig_rhs)
+{
+	gimple assign;
+	gimple_stmt_iterator gsi = gsi_for_stmt(stmt);
+	tree new_rhs, origtype = TREE_TYPE(orig_rhs);
+
+	gcc_assert(gimple_code(stmt) == GIMPLE_ASSIGN);
+
+	new_rhs = expand(visited, potentionally_overflowed, orig_rhs);
+	if (new_rhs == NULL_TREE)
+		return NULL_TREE;
+
+	assign = build_cast_stmt(origtype, new_rhs, CREATE_NEW_VAR, gimple_location(stmt));
+	gsi_insert_before(&gsi, assign, GSI_SAME_STMT);
+	update_stmt(assign);
+	return gimple_get_lhs(assign);
+}
+
+static tree handle_const_assign(struct pointer_set_t *visited, bool *potentionally_overflowed, gimple def_stmt, tree var, tree rhs, tree new_rhs1, tree new_rhs2, void (*gimple_assign_set_rhs)(gimple, tree))
+{
+	tree new_rhs, cast_rhs;
+
+	if (gimple_assign_rhs_code(def_stmt) == MIN_EXPR)
+		return dup_assign(visited, potentionally_overflowed, def_stmt, new_rhs1, new_rhs2, NULL_TREE);
+
+	new_rhs = change_assign_rhs(visited, potentionally_overflowed, def_stmt, rhs);
+	if (new_rhs != NULL_TREE) {
+		gimple_assign_set_rhs(def_stmt, new_rhs);
+		update_stmt(def_stmt);
+
+		cast_rhs = gimple_assign_rhs1(get_def_stmt(new_rhs));
+
+		check_size_overflow(def_stmt, cast_rhs, rhs, potentionally_overflowed);
+	}
+	return create_assign(visited, potentionally_overflowed, def_stmt, var, AFTER_STMT);
+}
+
+static tree handle_binary_ops(struct pointer_set_t *visited, bool *potentionally_overflowed, tree var)
+{
+	tree rhs1, rhs2;
+	gimple def_stmt = get_def_stmt(var);
+	tree new_rhs1 = NULL_TREE;
+	tree new_rhs2 = NULL_TREE;
+
+	rhs1 = gimple_assign_rhs1(def_stmt);
+	rhs2 = gimple_assign_rhs2(def_stmt);
+
+	/* no DImode/TImode division in the 32/64 bit kernel */
+	switch (gimple_assign_rhs_code(def_stmt)) {
+	case RDIV_EXPR:
+	case TRUNC_DIV_EXPR:
+	case CEIL_DIV_EXPR:
+	case FLOOR_DIV_EXPR:
+	case ROUND_DIV_EXPR:
+	case TRUNC_MOD_EXPR:
+	case CEIL_MOD_EXPR:
+	case FLOOR_MOD_EXPR:
+	case ROUND_MOD_EXPR:
+	case EXACT_DIV_EXPR:
+	case POINTER_PLUS_EXPR:
+	case BIT_AND_EXPR:
+		return create_assign(visited, potentionally_overflowed, def_stmt, var, AFTER_STMT);
+	default:
+		break;
+	}
+
+	*potentionally_overflowed = true;
+
+	if (TREE_CODE(rhs1) == SSA_NAME)
+		new_rhs1 = expand(visited, potentionally_overflowed, rhs1);
+	if (TREE_CODE(rhs2) == SSA_NAME)
+		new_rhs2 = expand(visited, potentionally_overflowed, rhs2);
+
+	if (is_gimple_constant(rhs2))
+		return handle_const_assign(visited, potentionally_overflowed, def_stmt, var, rhs1, new_rhs1, signed_cast_constant(rhs2), &gimple_assign_set_rhs1);
+
+	if (is_gimple_constant(rhs1))
+		return handle_const_assign(visited, potentionally_overflowed, def_stmt, var, rhs2, signed_cast_constant(rhs1), new_rhs2, &gimple_assign_set_rhs2);
+
+	return dup_assign(visited, potentionally_overflowed, def_stmt, new_rhs1, new_rhs2, NULL_TREE);
+}
+
+#if BUILDING_GCC_VERSION >= 4007
+static tree get_new_rhs(struct pointer_set_t *visited, bool *potentionally_overflowed, tree rhs)
+{
+	if (is_gimple_constant(rhs))
+		return signed_cast_constant(rhs);
+	if (TREE_CODE(rhs) != SSA_NAME)
+		return NULL_TREE;
+	return expand(visited, potentionally_overflowed, rhs);
+}
+
+static tree handle_ternary_ops(struct pointer_set_t *visited, bool *potentionally_overflowed, tree var)
+{
+	tree rhs1, rhs2, rhs3, new_rhs1, new_rhs2, new_rhs3;
+	gimple def_stmt = get_def_stmt(var);
+
+	*potentionally_overflowed = true;
+
+	rhs1 = gimple_assign_rhs1(def_stmt);
+	rhs2 = gimple_assign_rhs2(def_stmt);
+	rhs3 = gimple_assign_rhs3(def_stmt);
+	new_rhs1 = get_new_rhs(visited, potentionally_overflowed, rhs1);
+	new_rhs2 = get_new_rhs(visited, potentionally_overflowed, rhs2);
+	new_rhs3 = get_new_rhs(visited, potentionally_overflowed, rhs3);
+
+	if (new_rhs1 == NULL_TREE && new_rhs2 != NULL_TREE && new_rhs3 != NULL_TREE)
+		return dup_assign(visited, potentionally_overflowed, def_stmt, new_rhs1, new_rhs2, new_rhs3);
+	error("handle_ternary_ops: unknown rhs");
+	gcc_unreachable();
+}
+#endif
+
+static void set_size_overflow_type(tree node)
+{
+	switch (TYPE_MODE(TREE_TYPE(node))) {
+	case SImode:
+		signed_size_overflow_type = intDI_type_node;
+		unsigned_size_overflow_type = unsigned_intDI_type_node;
+		break;
+	case DImode:
+		if (LONG_TYPE_SIZE == GET_MODE_BITSIZE(SImode)) {
+			signed_size_overflow_type = intDI_type_node;
+			unsigned_size_overflow_type = unsigned_intDI_type_node;
+		} else {
+			signed_size_overflow_type = intTI_type_node;
+			unsigned_size_overflow_type = unsigned_intTI_type_node;
+		}
+		break;
+	default:
+		error("set_size_overflow_type: unsupported gcc configuration.");
+		gcc_unreachable();
+	}
+}
+
+static tree expand_visited(gimple def_stmt)
+{
+	gimple tmp;
+	gimple_stmt_iterator gsi = gsi_for_stmt(def_stmt);
+
+	gsi_next(&gsi);
+	tmp = gsi_stmt(gsi);
+	switch (gimple_code(tmp)) {
+	case GIMPLE_ASSIGN:
+		return gimple_get_lhs(tmp);
+	case GIMPLE_PHI:
+		return gimple_phi_result(tmp);
+	case GIMPLE_CALL:
+		return gimple_call_lhs(tmp);
+	default:
+		return NULL_TREE;
+	}
+}
+
+static tree expand(struct pointer_set_t *visited, bool *potentionally_overflowed, tree var)
+{
+	gimple def_stmt;
+	enum tree_code code = TREE_CODE(TREE_TYPE(var));
+
+	if (is_gimple_constant(var))
+		return NULL_TREE;
+
+	if (TREE_CODE(var) == ADDR_EXPR)
+		return NULL_TREE;
+
+	gcc_assert(code == INTEGER_TYPE || code == POINTER_TYPE || code == BOOLEAN_TYPE || code == ENUMERAL_TYPE);
+	if (code != INTEGER_TYPE)
+		return NULL_TREE;
+
+	if (SSA_NAME_IS_DEFAULT_DEF(var)) {
+		check_missing_attribute(var);
+		return NULL_TREE;
+	}
+
+	def_stmt = get_def_stmt(var);
+
+	if (!def_stmt)
+		return NULL_TREE;
+
+	if (pointer_set_contains(visited, def_stmt))
+		return expand_visited(def_stmt);
+
+	switch (gimple_code(def_stmt)) {
+	case GIMPLE_NOP:
+		check_missing_attribute(var);
+		return NULL_TREE;
+	case GIMPLE_PHI:
+		return build_new_phi(visited, potentionally_overflowed, def_stmt);
+	case GIMPLE_CALL:
+	case GIMPLE_ASM:
+		return create_assign(visited, potentionally_overflowed, def_stmt, var, AFTER_STMT);
+	case GIMPLE_ASSIGN:
+		switch (gimple_num_ops(def_stmt)) {
+		case 2:
+			return handle_unary_ops(visited, potentionally_overflowed, var);
+		case 3:
+			return handle_binary_ops(visited, potentionally_overflowed, var);
+#if BUILDING_GCC_VERSION >= 4007
+		case 4:
+			return handle_ternary_ops(visited, potentionally_overflowed, var);
+#endif
+		}
+	default:
+		debug_gimple_stmt(def_stmt);
+		error("expand: unknown gimple code");
+		gcc_unreachable();
+	}
+}
+
+static void change_function_arg(gimple stmt, tree origarg, unsigned int argnum, tree newarg)
+{
+	gimple assign;
+	gimple_stmt_iterator gsi = gsi_for_stmt(stmt);
+	tree origtype = TREE_TYPE(origarg);
+
+	gcc_assert(gimple_code(stmt) == GIMPLE_CALL);
+
+	assign = build_cast_stmt(origtype, newarg, CREATE_NEW_VAR, gimple_location(stmt));
+	gsi_insert_before(&gsi, assign, GSI_SAME_STMT);
+	update_stmt(assign);
+
+	gimple_call_set_arg(stmt, argnum, gimple_get_lhs(assign));
+	update_stmt(stmt);
+}
+
+static tree get_function_arg(unsigned int argnum, gimple stmt, tree fndecl)
+{
+	const char *origid;
+	tree arg, origarg;
+
+	if (!DECL_ABSTRACT_ORIGIN(fndecl)) {
+		gcc_assert(gimple_call_num_args(stmt) > argnum);
+		return gimple_call_arg(stmt, argnum);
+	}
+
+	origarg = DECL_ARGUMENTS(DECL_ABSTRACT_ORIGIN(fndecl));
+	while (origarg && argnum) {
+		argnum--;
+		origarg = TREE_CHAIN(origarg);
+	}
+
+	gcc_assert(argnum == 0);
+
+	gcc_assert(origarg != NULL_TREE);
+	origid = NAME(origarg);
+	for (arg = DECL_ARGUMENTS(fndecl); arg; arg = TREE_CHAIN(arg)) {
+		if (!strcmp(origid, NAME(arg)))
+			return arg;
+	}
+	return NULL_TREE;
+}
+
+static void handle_function_arg(gimple stmt, tree fndecl, unsigned int argnum)
+{
+	struct pointer_set_t *visited;
+	tree arg, newarg, type_max;
+	gimple ucast_stmt;
+	bool potentionally_overflowed;
+
+	arg = get_function_arg(argnum, stmt, fndecl);
+	if (arg == NULL_TREE)
+		return;
+
+	if (is_gimple_constant(arg))
+		return;
+	if (TREE_CODE(arg) != SSA_NAME)
+		return;
+
+	check_arg_type(arg);
+
+	set_size_overflow_type(arg);
+
+	visited = pointer_set_create();
+	potentionally_overflowed = false;
+	newarg = expand(visited, &potentionally_overflowed, arg);
+	pointer_set_destroy(visited);
+
+	if (newarg == NULL_TREE || !potentionally_overflowed)
+		return;
+
+	change_function_arg(stmt, arg, argnum, newarg);
+
+	ucast_stmt = cast_to_unsigned_size_overflow_type(stmt, newarg);
+
+	type_max = build_int_cstu(unsigned_size_overflow_type, 0x7fffffff);
+	insert_check_size_overflow(stmt, GT_EXPR, gimple_get_lhs(ucast_stmt), type_max);
+}
+
+static void handle_function_by_attribute(gimple stmt, tree attr, tree fndecl)
+{
+	tree p = TREE_VALUE(attr);
+	do {
+		handle_function_arg(stmt, fndecl, TREE_INT_CST_LOW(TREE_VALUE(p))-1);
+		p = TREE_CHAIN(p);
+	} while (p);
+}
+
+static void handle_function_by_hash(gimple stmt, tree fndecl)
+{
+	tree orig_fndecl;
+	struct size_overflow_hash *hash;
+	const char *filename = DECL_SOURCE_FILE(fndecl);
+
+	orig_fndecl = get_original_function_decl(fndecl);
+	hash = get_function_hash(orig_fndecl, filename);
+	if (!hash)
+		return;
+
+#define search_param(argnum)							\
+	if (hash->param##argnum)						\
+		handle_function_arg(stmt, fndecl, argnum - 1);
+
+	search_param(1);
+	search_param(2);
+	search_param(3);
+	search_param(4);
+	search_param(5);
+	search_param(6);
+	search_param(7);
+	search_param(8);
+	search_param(9);
+#undef search_param
+}
+
+static unsigned int handle_function(void)
+{
+	basic_block bb = ENTRY_BLOCK_PTR->next_bb;
+	int saved_last_basic_block = last_basic_block;
+
+	do {
+		gimple_stmt_iterator gsi;
+		basic_block next = bb->next_bb;
+
+		for (gsi = gsi_start_bb(bb); !gsi_end_p(gsi); gsi_next(&gsi)) {
+			tree fndecl, attr;
+			gimple stmt = gsi_stmt(gsi);
+
+			if (!(is_gimple_call(stmt)))
+				continue;
+			fndecl = gimple_call_fndecl(stmt);
+			if (fndecl == NULL_TREE)
+				continue;
+			if (gimple_call_num_args(stmt) == 0)
+				continue;
+			attr = lookup_attribute("size_overflow", TYPE_ATTRIBUTES(TREE_TYPE(fndecl)));
+			if (!attr || !TREE_VALUE(attr))
+				handle_function_by_hash(stmt, fndecl);
+			else
+				handle_function_by_attribute(stmt, attr, fndecl);
+			gsi = gsi_for_stmt(stmt);
+		}
+		bb = next;
+	} while (bb && bb->index <= saved_last_basic_block);
+	return 0;
+}
+
+static struct gimple_opt_pass size_overflow_pass = {
+	.pass = {
+		.type			= GIMPLE_PASS,
+		.name			= "size_overflow",
+		.gate			= NULL,
+		.execute		= handle_function,
+		.sub			= NULL,
+		.next			= NULL,
+		.static_pass_number	= 0,
+		.tv_id			= TV_NONE,
+		.properties_required	= PROP_cfg | PROP_referenced_vars,
+		.properties_provided	= 0,
+		.properties_destroyed	= 0,
+		.todo_flags_start	= 0,
+		.todo_flags_finish	= TODO_verify_ssa | TODO_verify_stmts | TODO_dump_func | TODO_remove_unused_locals | TODO_update_ssa_no_phi | TODO_cleanup_cfg | TODO_ggc_collect | TODO_verify_flow
+	}
+};
+
+static void start_unit_callback(void __unused *gcc_data, void __unused *user_data)
+{
+	tree fntype;
+
+	const_char_ptr_type_node = build_pointer_type(build_type_variant(char_type_node, 1, 0));
+
+	// void report_size_overflow(const char *loc_file, unsigned int loc_line, const char *current_func)
+	fntype = build_function_type_list(void_type_node,
+					  const_char_ptr_type_node,
+					  unsigned_type_node,
+					  const_char_ptr_type_node,
+					  NULL_TREE);
+	report_size_overflow_decl = build_fn_decl("report_size_overflow", fntype);
+
+	DECL_ASSEMBLER_NAME(report_size_overflow_decl);
+	TREE_PUBLIC(report_size_overflow_decl) = 1;
+	DECL_EXTERNAL(report_size_overflow_decl) = 1;
+	DECL_ARTIFICIAL(report_size_overflow_decl) = 1;
+}
+
+extern struct gimple_opt_pass pass_dce;
+
+int plugin_init(struct plugin_name_args *plugin_info, struct plugin_gcc_version *version)
+{
+	int i;
+	const char * const plugin_name = plugin_info->base_name;
+	const int argc = plugin_info->argc;
+	const struct plugin_argument * const argv = plugin_info->argv;
+	bool enable = true;
+
+	struct register_pass_info size_overflow_pass_info = {
+		.pass				= &size_overflow_pass.pass,
+		.reference_pass_name		= "ssa",
+		.ref_pass_instance_number	= 1,
+		.pos_op				= PASS_POS_INSERT_AFTER
+	};
+
+	if (!plugin_default_version_check(version, &gcc_version)) {
+		error(G_("incompatible gcc/plugin versions"));
+		return 1;
+	}
+
+	for (i = 0; i < argc; ++i) {
+		if (!strcmp(argv[i].key, "no-size-overflow")) {
+			enable = false;
+			continue;
+		} else if (!(strcmp(argv[i].key, "no-file-match"))) {
+			file_match = false;
+			continue;
+		}
+		error(G_("unkown option '-fplugin-arg-%s-%s'"), plugin_name, argv[i].key);
+	}
+
+	register_callback(plugin_name, PLUGIN_INFO, NULL, &size_overflow_plugin_info);
+	if (enable) {
+		register_callback ("start_unit", PLUGIN_START_UNIT, &start_unit_callback, NULL);
+		register_callback(plugin_name, PLUGIN_PASS_MANAGER_SETUP, NULL, &size_overflow_pass_info);
+	}
+	register_callback(plugin_name, PLUGIN_ATTRIBUTES, register_attributes, NULL);
+
+	return 0;
+}
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/tools/gcc/stackleak_plugin.c linux-3.3.8-pax/tools/gcc/stackleak_plugin.c
--- linux-3.3.8/tools/gcc/stackleak_plugin.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-3.3.8-pax/tools/gcc/stackleak_plugin.c	2012-04-03 21:13:33.733949292 +0200
@@ -0,0 +1,313 @@
+/*
+ * Copyright 2011 by the PaX Team <pageexec@freemail.hu>
+ * Licensed under the GPL v2
+ *
+ * Note: the choice of the license means that the compilation process is
+ *       NOT 'eligible' as defined by gcc's library exception to the GPL v3,
+ *       but for the kernel it doesn't matter since it doesn't link against
+ *       any of the gcc libraries
+ *
+ * gcc plugin to help implement various PaX features
+ *
+ * - track lowest stack pointer
+ *
+ * TODO:
+ * - initialize all local variables
+ *
+ * BUGS:
+ * - none known
+ */
+#include "gcc-plugin.h"
+#include "config.h"
+#include "system.h"
+#include "coretypes.h"
+#include "tree.h"
+#include "tree-pass.h"
+#include "flags.h"
+#include "intl.h"
+#include "toplev.h"
+#include "plugin.h"
+//#include "expr.h" where are you...
+#include "diagnostic.h"
+#include "plugin-version.h"
+#include "tm.h"
+#include "function.h"
+#include "basic-block.h"
+#include "gimple.h"
+#include "rtl.h"
+#include "emit-rtl.h"
+
+extern void print_gimple_stmt(FILE *, gimple, int, int);
+
+int plugin_is_GPL_compatible;
+
+static int track_frame_size = -1;
+static const char track_function[] = "pax_track_stack";
+static const char check_function[] = "pax_check_alloca";
+static bool init_locals;
+
+static struct plugin_info stackleak_plugin_info = {
+	.version	= "201203140940",
+	.help		= "track-lowest-sp=nn\ttrack sp in functions whose frame size is at least nn bytes\n"
+//			  "initialize-locals\t\tforcibly initialize all stack frames\n"
+};
+
+static bool gate_stackleak_track_stack(void);
+static unsigned int execute_stackleak_tree_instrument(void);
+static unsigned int execute_stackleak_final(void);
+
+static struct gimple_opt_pass stackleak_tree_instrument_pass = {
+	.pass = {
+		.type			= GIMPLE_PASS,
+		.name			= "stackleak_tree_instrument",
+		.gate			= gate_stackleak_track_stack,
+		.execute		= execute_stackleak_tree_instrument,
+		.sub			= NULL,
+		.next			= NULL,
+		.static_pass_number	= 0,
+		.tv_id			= TV_NONE,
+		.properties_required	= PROP_gimple_leh | PROP_cfg,
+		.properties_provided	= 0,
+		.properties_destroyed	= 0,
+		.todo_flags_start	= 0, //TODO_verify_ssa | TODO_verify_flow | TODO_verify_stmts,
+		.todo_flags_finish	= TODO_verify_ssa | TODO_verify_stmts | TODO_dump_func | TODO_update_ssa
+	}
+};
+
+static struct rtl_opt_pass stackleak_final_rtl_opt_pass = {
+	.pass = {
+		.type			= RTL_PASS,
+		.name			= "stackleak_final",
+		.gate			= gate_stackleak_track_stack,
+		.execute		= execute_stackleak_final,
+		.sub			= NULL,
+		.next			= NULL,
+		.static_pass_number	= 0,
+		.tv_id			= TV_NONE,
+		.properties_required	= 0,
+		.properties_provided	= 0,
+		.properties_destroyed	= 0,
+		.todo_flags_start	= 0,
+		.todo_flags_finish	= TODO_dump_func
+	}
+};
+
+static bool gate_stackleak_track_stack(void)
+{
+	return track_frame_size >= 0;
+}
+
+static void stackleak_check_alloca(gimple_stmt_iterator *gsi)
+{
+	gimple check_alloca;
+	tree fntype, fndecl, alloca_size;
+
+	fntype = build_function_type_list(void_type_node, long_unsigned_type_node, NULL_TREE);
+	fndecl = build_fn_decl(check_function, fntype);
+	DECL_ASSEMBLER_NAME(fndecl); // for LTO
+
+	// insert call to void pax_check_alloca(unsigned long size)
+	alloca_size = gimple_call_arg(gsi_stmt(*gsi), 0);
+	check_alloca = gimple_build_call(fndecl, 1, alloca_size);
+	gsi_insert_before(gsi, check_alloca, GSI_SAME_STMT);
+}
+
+static void stackleak_add_instrumentation(gimple_stmt_iterator *gsi)
+{
+	gimple track_stack;
+	tree fntype, fndecl;
+
+	fntype = build_function_type_list(void_type_node, NULL_TREE);
+	fndecl = build_fn_decl(track_function, fntype);
+	DECL_ASSEMBLER_NAME(fndecl); // for LTO
+
+	// insert call to void pax_track_stack(void)
+	track_stack = gimple_build_call(fndecl, 0);
+	gsi_insert_after(gsi, track_stack, GSI_CONTINUE_LINKING);
+}
+
+#if BUILDING_GCC_VERSION == 4005
+static bool gimple_call_builtin_p(gimple stmt, enum built_in_function code)
+{
+	tree fndecl;
+
+	if (!is_gimple_call(stmt))
+		return false;
+	fndecl = gimple_call_fndecl(stmt);
+	if (!fndecl)
+		return false;
+	if (DECL_BUILT_IN_CLASS(fndecl) != BUILT_IN_NORMAL)
+		return false;
+//	print_node(stderr, "pax", fndecl, 4);
+	return DECL_FUNCTION_CODE(fndecl) == code;
+}
+#endif
+
+static bool is_alloca(gimple stmt)
+{
+	if (gimple_call_builtin_p(stmt, BUILT_IN_ALLOCA))
+		return true;
+
+#if BUILDING_GCC_VERSION >= 4007
+	if (gimple_call_builtin_p(stmt, BUILT_IN_ALLOCA_WITH_ALIGN))
+		return true;
+#endif
+
+	return false;
+}
+
+static unsigned int execute_stackleak_tree_instrument(void)
+{
+	basic_block bb, entry_bb;
+	bool prologue_instrumented = false, is_leaf = true;
+
+	entry_bb = ENTRY_BLOCK_PTR_FOR_FUNCTION(cfun)->next_bb;
+
+	// 1. loop through BBs and GIMPLE statements
+	FOR_EACH_BB(bb) {
+		gimple_stmt_iterator gsi;
+
+		for (gsi = gsi_start_bb(bb); !gsi_end_p(gsi); gsi_next(&gsi)) {
+			gimple stmt;
+
+			stmt = gsi_stmt(gsi);
+
+			if (is_gimple_call(stmt))
+				is_leaf = false;
+
+			// gimple match: align 8 built-in BUILT_IN_NORMAL:BUILT_IN_ALLOCA attributes <tree_list 0xb7576450>
+			if (!is_alloca(stmt))
+				continue;
+
+			// 2. insert stack overflow check before each __builtin_alloca call
+			stackleak_check_alloca(&gsi);
+
+			// 3. insert track call after each __builtin_alloca call
+			stackleak_add_instrumentation(&gsi);
+			if (bb == entry_bb)
+				prologue_instrumented = true;
+		}
+	}
+
+	// special cases for some bad linux code: taking the address of static inline functions will materialize them
+	// but we mustn't instrument some of them as the resulting stack alignment required by the function call ABI
+	// will break other assumptions regarding the expected (but not otherwise enforced) register clobbering  ABI.
+	// case in point: native_save_fl on amd64 when optimized for size clobbers rdx if it were instrumented here.
+	if (is_leaf && !TREE_PUBLIC(current_function_decl) && DECL_DECLARED_INLINE_P(current_function_decl))
+		return 0;
+	if (is_leaf && !strncmp(IDENTIFIER_POINTER(DECL_NAME(current_function_decl)), "_paravirt_", 10))
+		return 0;
+
+	// 4. insert track call at the beginning
+	if (!prologue_instrumented) {
+		gimple_stmt_iterator gsi;
+
+		bb = split_block_after_labels(ENTRY_BLOCK_PTR)->dest;
+		if (dom_info_available_p(CDI_DOMINATORS))
+			set_immediate_dominator(CDI_DOMINATORS, bb, ENTRY_BLOCK_PTR);
+		gsi = gsi_start_bb(bb);
+		stackleak_add_instrumentation(&gsi);
+	}
+
+	return 0;
+}
+
+static unsigned int execute_stackleak_final(void)
+{
+	rtx insn;
+
+	if (cfun->calls_alloca)
+		return 0;
+
+	// keep calls only if function frame is big enough
+	if (get_frame_size() >= track_frame_size)
+		return 0;
+
+	// 1. find pax_track_stack calls
+	for (insn = get_insns(); insn; insn = NEXT_INSN(insn)) {
+		// rtl match: (call_insn 8 7 9 3 (call (mem (symbol_ref ("pax_track_stack") [flags 0x41] <function_decl 0xb7470e80 pax_track_stack>) [0 S1 A8]) (4)) -1 (nil) (nil))
+		rtx body;
+
+		if (!CALL_P(insn))
+			continue;
+		body = PATTERN(insn);
+		if (GET_CODE(body) != CALL)
+			continue;
+		body = XEXP(body, 0);
+		if (GET_CODE(body) != MEM)
+			continue;
+		body = XEXP(body, 0);
+		if (GET_CODE(body) != SYMBOL_REF)
+			continue;
+		if (strcmp(XSTR(body, 0), track_function))
+			continue;
+//		warning(0, "track_frame_size: %d %ld %d", cfun->calls_alloca, get_frame_size(), track_frame_size);
+		// 2. delete call
+		insn = delete_insn_and_edges(insn);
+#if BUILDING_GCC_VERSION >= 4007
+		if (GET_CODE(insn) == NOTE && NOTE_KIND(insn) == NOTE_INSN_CALL_ARG_LOCATION)
+			insn = delete_insn_and_edges(insn);
+#endif
+	}
+
+//	print_simple_rtl(stderr, get_insns());
+//	print_rtl(stderr, get_insns());
+//	warning(0, "track_frame_size: %d %ld %d", cfun->calls_alloca, get_frame_size(), track_frame_size);
+
+	return 0;
+}
+
+int plugin_init(struct plugin_name_args *plugin_info, struct plugin_gcc_version *version)
+{
+	const char * const plugin_name = plugin_info->base_name;
+	const int argc = plugin_info->argc;
+	const struct plugin_argument * const argv = plugin_info->argv;
+	int i;
+	struct register_pass_info stackleak_tree_instrument_pass_info = {
+		.pass				= &stackleak_tree_instrument_pass.pass,
+//		.reference_pass_name		= "tree_profile",
+		.reference_pass_name		= "optimized",
+		.ref_pass_instance_number	= 0,
+		.pos_op 			= PASS_POS_INSERT_BEFORE
+	};
+	struct register_pass_info stackleak_final_pass_info = {
+		.pass				= &stackleak_final_rtl_opt_pass.pass,
+		.reference_pass_name		= "final",
+		.ref_pass_instance_number	= 0,
+		.pos_op 			= PASS_POS_INSERT_BEFORE
+	};
+
+	if (!plugin_default_version_check(version, &gcc_version)) {
+		error(G_("incompatible gcc/plugin versions"));
+		return 1;
+	}
+
+	register_callback(plugin_name, PLUGIN_INFO, NULL, &stackleak_plugin_info);
+
+	for (i = 0; i < argc; ++i) {
+		if (!strcmp(argv[i].key, "track-lowest-sp")) {
+			if (!argv[i].value) {
+				error(G_("no value supplied for option '-fplugin-arg-%s-%s'"), plugin_name, argv[i].key);
+				continue;
+			}
+			track_frame_size = atoi(argv[i].value);
+			if (argv[i].value[0] < '0' || argv[i].value[0] > '9' || track_frame_size < 0)
+				error(G_("invalid option argument '-fplugin-arg-%s-%s=%s'"), plugin_name, argv[i].key, argv[i].value);
+			continue;
+		}
+		if (!strcmp(argv[i].key, "initialize-locals")) {
+			if (argv[i].value) {
+				error(G_("invalid option argument '-fplugin-arg-%s-%s=%s'"), plugin_name, argv[i].key, argv[i].value);
+				continue;
+			}
+			init_locals = true;
+			continue;
+		}
+		error(G_("unkown option '-fplugin-arg-%s-%s'"), plugin_name, argv[i].key);
+	}
+
+	register_callback(plugin_name, PLUGIN_PASS_MANAGER_SETUP, NULL, &stackleak_tree_instrument_pass_info);
+	register_callback(plugin_name, PLUGIN_PASS_MANAGER_SETUP, NULL, &stackleak_final_pass_info);
+
+	return 0;
+}
Binary files linux-3.3.8/tools/perf/perf and linux-3.3.8-pax/tools/perf/perf differ
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/tools/perf/util/include/asm/alternative-asm.h linux-3.3.8-pax/tools/perf/util/include/asm/alternative-asm.h
--- linux-3.3.8/tools/perf/util/include/asm/alternative-asm.h	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/tools/perf/util/include/asm/alternative-asm.h	2012-03-19 10:43:44.888034604 +0100
@@ -5,4 +5,7 @@
 
 #define altinstruction_entry #
 
+	.macro pax_force_retaddr rip=0, reload=0
+	.endm
+
 #endif
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/usr/gen_init_cpio.c linux-3.3.8-pax/usr/gen_init_cpio.c
--- linux-3.3.8/usr/gen_init_cpio.c	2011-07-22 04:17:23.000000000 +0200
+++ linux-3.3.8-pax/usr/gen_init_cpio.c	2012-03-19 10:43:44.888034604 +0100
@@ -303,7 +303,7 @@ static int cpio_mkfile(const char *name,
 	int retval;
 	int rc = -1;
 	int namesize;
-	int i;
+	unsigned int i;
 
 	mode |= S_IFREG;
 
@@ -392,9 +392,10 @@ static char *cpio_replace_env(char *new_
                        *env_var = *expanded = '\0';
                        strncat(env_var, start + 2, end - start - 2);
                        strncat(expanded, new_location, start - new_location);
-                       strncat(expanded, getenv(env_var), PATH_MAX);
-                       strncat(expanded, end + 1, PATH_MAX);
+                       strncat(expanded, getenv(env_var), PATH_MAX - strlen(expanded));
+                       strncat(expanded, end + 1, PATH_MAX - strlen(expanded));
                        strncpy(new_location, expanded, PATH_MAX);
+                       new_location[PATH_MAX] = 0;
                } else
                        break;
        }
diff -NurpX linux-3.3.8-pax/Documentation/dontdiff linux-3.3.8/virt/kvm/kvm_main.c linux-3.3.8-pax/virt/kvm/kvm_main.c
--- linux-3.3.8/virt/kvm/kvm_main.c	2012-05-12 22:26:33.508957502 +0200
+++ linux-3.3.8-pax/virt/kvm/kvm_main.c	2012-05-12 22:26:42.696957333 +0200
@@ -75,7 +75,7 @@ LIST_HEAD(vm_list);
 
 static cpumask_var_t cpus_hardware_enabled;
 static int kvm_usage_count = 0;
-static atomic_t hardware_enable_failed;
+static atomic_unchecked_t hardware_enable_failed;
 
 struct kmem_cache *kvm_vcpu_cache;
 EXPORT_SYMBOL_GPL(kvm_vcpu_cache);
@@ -2318,7 +2318,7 @@ static void hardware_enable_nolock(void
 
 	if (r) {
 		cpumask_clear_cpu(cpu, cpus_hardware_enabled);
-		atomic_inc(&hardware_enable_failed);
+		atomic_inc_unchecked(&hardware_enable_failed);
 		printk(KERN_INFO "kvm: enabling virtualization on "
 				 "CPU%d failed\n", cpu);
 	}
@@ -2372,10 +2372,10 @@ static int hardware_enable_all(void)
 
 	kvm_usage_count++;
 	if (kvm_usage_count == 1) {
-		atomic_set(&hardware_enable_failed, 0);
+		atomic_set_unchecked(&hardware_enable_failed, 0);
 		on_each_cpu(hardware_enable_nolock, NULL, 1);
 
-		if (atomic_read(&hardware_enable_failed)) {
+		if (atomic_read_unchecked(&hardware_enable_failed)) {
 			hardware_disable_all_nolock();
 			r = -EBUSY;
 		}
@@ -2738,7 +2738,7 @@ static void kvm_sched_out(struct preempt
 	kvm_arch_vcpu_put(vcpu);
 }
 
-int kvm_init(void *opaque, unsigned vcpu_size, unsigned vcpu_align,
+int kvm_init(const void *opaque, unsigned vcpu_size, unsigned vcpu_align,
 		  struct module *module)
 {
 	int r;
@@ -2801,7 +2801,7 @@ int kvm_init(void *opaque, unsigned vcpu
 	if (!vcpu_align)
 		vcpu_align = __alignof__(struct kvm_vcpu);
 	kvm_vcpu_cache = kmem_cache_create("kvm_vcpu", vcpu_size, vcpu_align,
-					   0, NULL);
+					   SLAB_USERCOPY, NULL);
 	if (!kvm_vcpu_cache) {
 		r = -ENOMEM;
 		goto out_free_3;
@@ -2811,9 +2811,11 @@ int kvm_init(void *opaque, unsigned vcpu
 	if (r)
 		goto out_free;
 
-	kvm_chardev_ops.owner = module;
-	kvm_vm_fops.owner = module;
-	kvm_vcpu_fops.owner = module;
+	pax_open_kernel();
+	*(void **)&kvm_chardev_ops.owner = module;
+	*(void **)&kvm_vm_fops.owner = module;
+	*(void **)&kvm_vcpu_fops.owner = module;
+	pax_close_kernel();
 
 	r = misc_register(&kvm_dev);
 	if (r) {
